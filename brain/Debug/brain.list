
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800c65c  0800c65c  0001c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c684  0800c684  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c68c  0800c68c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c68c  0800c68c  0001c68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0800c694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  24000028  0800c6bc  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400081c  0800c6bc  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020935  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f43  00000000  00000000  0004098b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  000438d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00044ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003861c  00000000  00000000  000463c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012344  00000000  00000000  0007e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017379a  00000000  00000000  00090d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002044c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  00204540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c644 	.word	0x0800c644

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	0800c644 	.word	0x0800c644

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000018 	.word	0x24000018
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f008 fcd6 	bl	800903c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f008 fda9 	bl	80091ec <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f008 fda4 	bl	80091ec <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	2400072c 	.word	0x2400072c
 80006b0:	24000678 	.word	0x24000678
 80006b4:	24000704 	.word	0x24000704
 80006b8:	240001a4 	.word	0x240001a4
 80006bc:	240002c0 	.word	0x240002c0
 80006c0:	24000508 	.word	0x24000508

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000508 	.word	0x24000508
 800072c:	24000298 	.word	0x24000298
 8000730:	240001a4 	.word	0x240001a4
 8000734:	24000650 	.word	0x24000650
 8000738:	24000678 	.word	0x24000678
 800073c:	24000380 	.word	0x24000380
 8000740:	24000078 	.word	0x24000078
 8000744:	24000104 	.word	0x24000104

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 fb38 	bl	8008e08 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f008 fc4a 	bl	800903c <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000508 	.word	0x24000508
 80007c8:	24000050 	.word	0x24000050
 80007cc:	240001a4 	.word	0x240001a4
 80007d0:	24000650 	.word	0x24000650
 80007d4:	24000678 	.word	0x24000678
 80007d8:	2400072c 	.word	0x2400072c
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000810 	.word	0x24000810
 80007e4:	24000078 	.word	0x24000078
 80007e8:	24000658 	.word	0x24000658

080007ec <compassRequest>:
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
	wait4CompassTx();
	compassTxPacket[0] = 'z';
}
void compassRequest(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	4903      	ldr	r1, [pc, #12]	; (8000800 <compassRequest+0x14>)
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <compassRequest+0x18>)
 80007f6:	f008 fb9d 	bl	8008f34 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000000 	.word	0x24000000
 8000804:	24000508 	.word	0x24000508

08000808 <peripheralADC_Init>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <positionControl_Init+0x18>)
 800081e:	f007 fff1 	bl	8008804 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <positionControl_Init+0x1c>)
 8000828:	f005 f942 	bl	8005ab0 <HAL_GPIO_WritePin>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	240007b8 	.word	0x240007b8
 8000834:	58021000 	.word	0x58021000

08000838 <legShoot>:
//
void legShoot()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 800083e:	2032      	movs	r0, #50	; 0x32
 8000840:	f001 faea 	bl	8001e18 <HAL_Delay>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);	//enable legEn Pin
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <legShoot+0x74>)
 800084a:	f005 f931 	bl	8005ab0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <legShoot+0x78>)
 8000856:	f005 f92b 	bl	8005ab0 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800085a:	2032      	movs	r0, #50	; 0x32
 800085c:	f001 fadc 	bl	8001e18 <HAL_Delay>
	  for(int i = 0; i < LEG_PUL_SHOOT; ++i)
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	e019      	b.n	800089a <legShoot+0x62>
	  {
		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <legShoot+0x78>)
 800086e:	f005 f91f 	bl	8005ab0 <HAL_GPIO_WritePin>
		  delayUs(LEG_DELAYUS_SHOOT);
 8000872:	203c      	movs	r0, #60	; 0x3c
 8000874:	f7ff fed0 	bl	8000618 <delayUs>
		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <legShoot+0x78>)
 8000880:	f005 f916 	bl	8005ab0 <HAL_GPIO_WritePin>
		  delayUs(LEG_DELAYUS_SHOOT);
 8000884:	203c      	movs	r0, #60	; 0x3c
 8000886:	f7ff fec7 	bl	8000618 <delayUs>
		  trackingLegShoot++;
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <legShoot+0x7c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <legShoot+0x7c>)
 8000892:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < LEG_PUL_SHOOT; ++i)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f240 5213 	movw	r2, #1299	; 0x513
 80008a0:	4293      	cmp	r3, r2
 80008a2:	dde0      	ble.n	8000866 <legShoot+0x2e>
	  }
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58021000 	.word	0x58021000
 80008b0:	58020c00 	.word	0x58020c00
 80008b4:	2400039c 	.word	0x2400039c

080008b8 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d16e      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d16a      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d11e      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e2:	4837      	ldr	r0, [pc, #220]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80008e4:	f005 f8e4 	bl	8005ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80008e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ec:	4834      	ldr	r0, [pc, #208]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80008ee:	f005 f8f8 	bl	8005ae2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80008fa:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000904:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2bc7      	cmp	r3, #199	; 0xc7
 800090c:	dd05      	ble.n	800091a <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d11f      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4825      	ldr	r0, [pc, #148]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800092a:	f005 f8c1 	bl	8005ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 800092e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000932:	4823      	ldr	r0, [pc, #140]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000934:	f005 f8d5 	bl	8005ae2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000940:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800094a:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000954:	db05      	blt.n	8000962 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d11f      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000972:	f005 f89d 	bl	8005ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800097c:	f005 f8b1 	bl	8005ae2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000988:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000992:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800099c:	db05      	blt.n	80009aa <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240007b8 	.word	0x240007b8
 80009b8:	240005a0 	.word	0x240005a0
 80009bc:	2400070c 	.word	0x2400070c
 80009c0:	58020c00 	.word	0x58020c00
 80009c4:	24000598 	.word	0x24000598
 80009c8:	24000654 	.word	0x24000654

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f001 f990 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f82e 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f000 fbda 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 80009dc:	f000 fb88 	bl	80010f0 <MX_DMA_Init>
  MX_ADC1_Init();
 80009e0:	f000 f8de 	bl	8000ba0 <MX_ADC1_Init>
  MX_ADC3_Init();
 80009e4:	f000 f9b8 	bl	8000d58 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80009e8:	f000 fa9e 	bl	8000f28 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 fae8 	bl	8000fc0 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80009f0:	f000 fa16 	bl	8000e20 <MX_TIM7_Init>
  MX_UART7_Init();
 80009f4:	f000 fa4c 	bl	8000e90 <MX_UART7_Init>
  MX_USART6_UART_Init();
 80009f8:	f000 fb2e 	bl	8001058 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 80009fc:	f000 f948 	bl	8000c90 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000a00:	f7ff fe30 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8000a04:	f7ff ff00 	bl	8000808 <peripheralADC_Init>
  delayUs_Init();
 8000a08:	f7ff fde6 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000a0c:	f7ff ff04 	bl	8000818 <positionControl_Init>
  tracking = 1000;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <main+0x64>)
 8000a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a16:	601a      	str	r2, [r3, #0]
//  brake();
//  compassReset();
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  HAL_Delay(2000);
 8000a18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a1c:	f001 f9fc 	bl	8001e18 <HAL_Delay>
////	delayUs(1);
//}
//	  legControl(LEG_STATUS_RUNUP);
//	  HAL_Delay(5000);
//	  while(1);
	  legShoot();
 8000a20:	f7ff ff0a 	bl	8000838 <legShoot>
//	  HAL_Delay(1000);
//	  legControl(LEG_STATUS_RUNUP2);
//	  HAL_Delay(1000);
//	  legControl(legEnd);
	  HAL_Delay(3000);
 8000a24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a28:	f001 f9f6 	bl	8001e18 <HAL_Delay>
//		  delayUs(120);
//		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_RESET);
//		  delayUs(120);
//		  trackingLegShoot++;
//	  }
	  while(1);
 8000a2c:	e7fe      	b.n	8000a2c <main+0x60>
 8000a2e:	bf00      	nop
 8000a30:	24000624 	.word	0x24000624

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0cc      	sub	sp, #304	; 0x130
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a3e:	224c      	movs	r2, #76	; 0x4c
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00b fdf6 	bl	800c634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00b fdef 	bl	800c634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	23bc      	movs	r3, #188	; 0xbc
 8000a5e:	461a      	mov	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	f00b fde7 	bl	800c634 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f005 f856 	bl	8005b18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <SystemClock_Config+0x164>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <SystemClock_Config+0x164>)
 8000a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <SystemClock_Config+0x164>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <SystemClock_Config+0x168>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	4a43      	ldr	r2, [pc, #268]	; (8000b9c <SystemClock_Config+0x168>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a96:	4b41      	ldr	r3, [pc, #260]	; (8000b9c <SystemClock_Config+0x168>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	f003 0201 	and.w	r2, r3, #1
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa6:	bf00      	nop
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <SystemClock_Config+0x164>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab4:	d1f8      	bne.n	8000aa8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ada:	233c      	movs	r3, #60	; 0x3c
 8000adc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af2:	230c      	movs	r3, #12
 8000af4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 f83f 	bl	8005b8c <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b14:	f000 fc52 	bl	80013bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	233f      	movs	r3, #63	; 0x3f
 8000b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 fbf3 	bl	800633c <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000b5c:	f000 fc2e 	bl	80013bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	2203      	movs	r2, #3
 8000b66:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2200      	movs	r2, #0
 8000b76:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f005 ff61 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000b88:	f000 fc18 	bl	80013bc <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024800 	.word	0x58024800
 8000b9c:	58000400 	.word	0x58000400

08000ba0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bc6:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <MX_ADC1_Init+0xe8>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c22:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c24:	f001 fabc 	bl	80021a0 <HAL_ADC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c2e:	f000 fbc5 	bl	80013bc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c3e:	f002 f881 	bl	8002d44 <HAL_ADCEx_MultiModeConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c48:	f000 fbb8 	bl	80013bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c50:	2306      	movs	r3, #6
 8000c52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_ADC1_Init+0xe4>)
 8000c6c:	f001 fc38 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000c76:	f000 fba1 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	240003a0 	.word	0x240003a0
 8000c88:	40022000 	.word	0x40022000
 8000c8c:	3ef08000 	.word	0x3ef08000

08000c90 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000caa:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cb8:	2208      	movs	r2, #8
 8000cba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000d08:	f001 fa4a 	bl	80021a0 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000d12:	f000 fb53 	bl	80013bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_ADC2_Init+0xc4>)
 8000d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_ADC2_Init+0xbc>)
 8000d36:	f001 fbd3 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000d40:	f000 fb3c 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	24000234 	.word	0x24000234
 8000d50:	40022100 	.word	0x40022100
 8000d54:	2a000400 	.word	0x2a000400

08000d58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d72:	4a29      	ldr	r2, [pc, #164]	; (8000e18 <MX_ADC3_Init+0xc0>)
 8000d74:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d7c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000dd0:	f001 f9e6 	bl	80021a0 <HAL_ADC_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000dda:	f000 faef 	bl	80013bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_ADC3_Init+0xc4>)
 8000de0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de2:	2306      	movs	r3, #6
 8000de4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df0:	2304      	movs	r3, #4
 8000df2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_ADC3_Init+0xbc>)
 8000dfe:	f001 fb6f 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000e08:	f000 fad8 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2400040c 	.word	0x2400040c
 8000e18:	58026000 	.word	0x58026000
 8000e1c:	04300002 	.word	0x04300002

08000e20 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <MX_TIM7_Init+0x6c>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e38:	f640 125f 	movw	r2, #2399	; 0x95f
 8000e3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e54:	f007 fcaa 	bl	80087ac <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000e5e:	f000 faad 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM7_Init+0x68>)
 8000e70:	f007 fed4 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000e7a:	f000 fa9f 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240007b8 	.word	0x240007b8
 8000e8c:	40001400 	.word	0x40001400

08000e90 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_UART7_Init+0x90>)
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <MX_UART7_Init+0x94>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_UART7_Init+0x90>)
 8000e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_UART7_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_UART7_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_UART7_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_UART7_Init+0x90>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_UART7_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_UART7_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_UART7_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_UART7_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_UART7_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_UART7_Init+0x90>)
 8000eda:	f007 ff45 	bl	8008d68 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 fa6a 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_UART7_Init+0x90>)
 8000eec:	f00b fa99 	bl	800c422 <HAL_UARTEx_SetTxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f000 fa61 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <MX_UART7_Init+0x90>)
 8000efe:	f00b face 	bl	800c49e <HAL_UARTEx_SetRxFifoThreshold>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f000 fa58 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_UART7_Init+0x90>)
 8000f0e:	f00b fa4f 	bl	800c3b0 <HAL_UARTEx_DisableFifoMode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 fa50 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24000078 	.word	0x24000078
 8000f24:	40007800 	.word	0x40007800

08000f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f2e:	4a23      	ldr	r2, [pc, #140]	; (8000fbc <MX_USART1_UART_Init+0x94>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f72:	f007 fef9 	bl	8008d68 <HAL_UART_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f000 fa1e 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f84:	f00b fa4d 	bl	800c422 <HAL_UARTEx_SetTxFifoThreshold>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f8e:	f000 fa15 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f96:	f00b fa82 	bl	800c49e <HAL_UARTEx_SetRxFifoThreshold>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f000 fa0c 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000fa6:	f00b fa03 	bl	800c3b0 <HAL_UARTEx_DisableFifoMode>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 fa04 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	24000508 	.word	0x24000508
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <MX_USART3_UART_Init+0x94>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fcc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000fd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_USART3_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_USART3_UART_Init+0x90>)
 800100a:	f007 fead 	bl	8008d68 <HAL_UART_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001014:	f000 f9d2 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_USART3_UART_Init+0x90>)
 800101c:	f00b fa01 	bl	800c422 <HAL_UARTEx_SetTxFifoThreshold>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001026:	f000 f9c9 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <MX_USART3_UART_Init+0x90>)
 800102e:	f00b fa36 	bl	800c49e <HAL_UARTEx_SetRxFifoThreshold>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001038:	f000 f9c0 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_USART3_UART_Init+0x90>)
 800103e:	f00b f9b7 	bl	800c3b0 <HAL_UARTEx_DisableFifoMode>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001048:	f000 f9b8 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	240001a4 	.word	0x240001a4
 8001054:	40004800 	.word	0x40004800

08001058 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <MX_USART6_UART_Init+0x94>)
 8001060:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010a0:	4811      	ldr	r0, [pc, #68]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 80010a2:	f007 fe61 	bl	8008d68 <HAL_UART_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80010ac:	f000 f986 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 80010b4:	f00b f9b5 	bl	800c422 <HAL_UARTEx_SetTxFifoThreshold>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80010be:	f000 f97d 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 80010c6:	f00b f9ea 	bl	800c49e <HAL_UARTEx_SetRxFifoThreshold>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80010d0:	f000 f974 	bl	80013bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_USART6_UART_Init+0x90>)
 80010d6:	f00b f96b 	bl	800c3b0 <HAL_UARTEx_DisableFifoMode>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80010e0:	f000 f96c 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000678 	.word	0x24000678
 80010ec:	40011400 	.word	0x40011400

080010f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_DMA_Init+0x9c>)
 80010f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <MX_DMA_Init+0x9c>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_DMA_Init+0x9c>)
 8001108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_DMA_Init+0x9c>)
 8001116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <MX_DMA_Init+0x9c>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_DMA_Init+0x9c>)
 8001126:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	200b      	movs	r0, #11
 8001138:	f001 ffb9 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800113c:	200b      	movs	r0, #11
 800113e:	f001 ffd0 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	200c      	movs	r0, #12
 8001148:	f001 ffb1 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800114c:	200c      	movs	r0, #12
 800114e:	f001 ffc8 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	200d      	movs	r0, #13
 8001158:	f001 ffa9 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800115c:	200d      	movs	r0, #13
 800115e:	f001 ffc0 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200e      	movs	r0, #14
 8001168:	f001 ffa1 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800116c:	200e      	movs	r0, #14
 800116e:	f001 ffb8 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	203a      	movs	r0, #58	; 0x3a
 8001178:	f001 ff99 	bl	80030ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800117c:	203a      	movs	r0, #58	; 0x3a
 800117e:	f001 ffb0 	bl	80030e2 <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58024400 	.word	0x58024400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b77      	ldr	r3, [pc, #476]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	4a6e      	ldr	r2, [pc, #440]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f2:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <MX_GPIO_Init+0x214>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a67      	ldr	r2, [pc, #412]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123c:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <MX_GPIO_Init+0x214>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <MX_GPIO_Init+0x214>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <MX_GPIO_Init+0x214>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <MX_GPIO_Init+0x214>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <MX_GPIO_Init+0x214>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f240 7104 	movw	r1, #1796	; 0x704
 800127e:	484a      	ldr	r0, [pc, #296]	; (80013a8 <MX_GPIO_Init+0x218>)
 8001280:	f004 fc16 	bl	8005ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001284:	2200      	movs	r2, #0
 8001286:	f242 0167 	movw	r1, #8295	; 0x2067
 800128a:	4848      	ldr	r0, [pc, #288]	; (80013ac <MX_GPIO_Init+0x21c>)
 800128c:	f004 fc10 	bl	8005ab0 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001290:	2200      	movs	r2, #0
 8001292:	f643 610d 	movw	r1, #15885	; 0x3e0d
 8001296:	4846      	ldr	r0, [pc, #280]	; (80013b0 <MX_GPIO_Init+0x220>)
 8001298:	f004 fc0a 	bl	8005ab0 <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2182      	movs	r1, #130	; 0x82
 80012a0:	4844      	ldr	r0, [pc, #272]	; (80013b4 <MX_GPIO_Init+0x224>)
 80012a2:	f004 fc05 	bl	8005ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012ac:	4842      	ldr	r0, [pc, #264]	; (80013b8 <MX_GPIO_Init+0x228>)
 80012ae:	f004 fbff 	bl	8005ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80012b2:	f240 7304 	movw	r3, #1796	; 0x704
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4837      	ldr	r0, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x218>)
 80012cc:	f004 fa40 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80012d0:	f242 0367 	movw	r3, #8295	; 0x2067
 80012d4:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4830      	ldr	r0, [pc, #192]	; (80013ac <MX_GPIO_Init+0x21c>)
 80012ea:	f004 fa31 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80012ee:	230d      	movs	r3, #13
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	482a      	ldr	r0, [pc, #168]	; (80013b0 <MX_GPIO_Init+0x220>)
 8001306:	f004 fa23 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4824      	ldr	r0, [pc, #144]	; (80013b4 <MX_GPIO_Init+0x224>)
 8001322:	f004 fa15 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 8001326:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	481e      	ldr	r0, [pc, #120]	; (80013b8 <MX_GPIO_Init+0x228>)
 8001340:	f004 fa06 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <MX_GPIO_Init+0x228>)
 800135e:	f004 f9f7 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001362:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001366:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_GPIO_Init+0x220>)
 800137c:	f004 f9e8 	bl	8005750 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_GPIO_Init+0x224>)
 8001398:	f004 f9da 	bl	8005750 <HAL_GPIO_Init>

}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020000 	.word	0x58020000
 80013ac:	58020400 	.word	0x58020400
 80013b0:	58021800 	.word	0x58021800
 80013b4:	58021000 	.word	0x58021000
 80013b8:	58020c00 	.word	0x58020c00

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_MspInit+0x30>)
 80013d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x30>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	58024400 	.word	0x58024400

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a96      	ldr	r2, [pc, #600]	; (8001678 <HAL_ADC_MspInit+0x278>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d163      	bne.n	80014ea <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001422:	4b96      	ldr	r3, [pc, #600]	; (800167c <HAL_ADC_MspInit+0x27c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a94      	ldr	r2, [pc, #592]	; (800167c <HAL_ADC_MspInit+0x27c>)
 800142a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800142c:	4b93      	ldr	r3, [pc, #588]	; (800167c <HAL_ADC_MspInit+0x27c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10e      	bne.n	8001452 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001436:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143a:	4a91      	ldr	r2, [pc, #580]	; (8001680 <HAL_ADC_MspInit+0x280>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001444:	4b8e      	ldr	r3, [pc, #568]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a89      	ldr	r2, [pc, #548]	; (8001680 <HAL_ADC_MspInit+0x280>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b87      	ldr	r3, [pc, #540]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001470:	2308      	movs	r3, #8
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4880      	ldr	r0, [pc, #512]	; (8001684 <HAL_ADC_MspInit+0x284>)
 8001484:	f004 f964 	bl	8005750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001488:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_ADC_MspInit+0x288>)
 800148a:	4a80      	ldr	r2, [pc, #512]	; (800168c <HAL_ADC_MspInit+0x28c>)
 800148c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800148e:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <HAL_ADC_MspInit+0x288>)
 8001490:	2209      	movs	r2, #9
 8001492:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001494:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_ADC_MspInit+0x288>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149a:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <HAL_ADC_MspInit+0x288>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a0:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a8:	4b77      	ldr	r3, [pc, #476]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b8:	4b73      	ldr	r3, [pc, #460]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014c0:	4b71      	ldr	r3, [pc, #452]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c6:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014cc:	486e      	ldr	r0, [pc, #440]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014ce:	f001 fe23 	bl	8003118 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80014d8:	f7ff ff70 	bl	80013bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a6a      	ldr	r2, [pc, #424]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014e2:	4a69      	ldr	r2, [pc, #420]	; (8001688 <HAL_ADC_MspInit+0x288>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014e8:	e0c1      	b.n	800166e <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a68      	ldr	r2, [pc, #416]	; (8001690 <HAL_ADC_MspInit+0x290>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d163      	bne.n	80015bc <HAL_ADC_MspInit+0x1bc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014f4:	4b61      	ldr	r3, [pc, #388]	; (800167c <HAL_ADC_MspInit+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a60      	ldr	r2, [pc, #384]	; (800167c <HAL_ADC_MspInit+0x27c>)
 80014fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_ADC_MspInit+0x27c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10e      	bne.n	8001524 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001506:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800150c:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_ADC_MspInit+0x280>)
 800150e:	f043 0320 	orr.w	r3, r3, #32
 8001512:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001516:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	4a55      	ldr	r2, [pc, #340]	; (8001680 <HAL_ADC_MspInit+0x280>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001534:	4b52      	ldr	r3, [pc, #328]	; (8001680 <HAL_ADC_MspInit+0x280>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001542:	2301      	movs	r3, #1
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	484f      	ldr	r0, [pc, #316]	; (8001694 <HAL_ADC_MspInit+0x294>)
 8001556:	f004 f8fb 	bl	8005750 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_ADC_MspInit+0x298>)
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_ADC_MspInit+0x29c>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_ADC_MspInit+0x298>)
 8001562:	220a      	movs	r2, #10
 8001564:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_ADC_MspInit+0x298>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_ADC_MspInit+0x298>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_ADC_MspInit+0x298>)
 8001574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001578:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_ADC_MspInit+0x298>)
 800157c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001580:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <HAL_ADC_MspInit+0x298>)
 8001584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001588:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_ADC_MspInit+0x298>)
 800158c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001590:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_ADC_MspInit+0x298>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_ADC_MspInit+0x298>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800159e:	483e      	ldr	r0, [pc, #248]	; (8001698 <HAL_ADC_MspInit+0x298>)
 80015a0:	f001 fdba 	bl	8003118 <HAL_DMA_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 80015aa:	f7ff ff07 	bl	80013bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a39      	ldr	r2, [pc, #228]	; (8001698 <HAL_ADC_MspInit+0x298>)
 80015b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80015b4:	4a38      	ldr	r2, [pc, #224]	; (8001698 <HAL_ADC_MspInit+0x298>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015ba:	e058      	b.n	800166e <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a37      	ldr	r2, [pc, #220]	; (80016a0 <HAL_ADC_MspInit+0x2a0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d153      	bne.n	800166e <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_ADC_MspInit+0x280>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <HAL_ADC_MspInit+0x280>)
 80015ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_ADC_MspInit+0x280>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_ADC_MspInit+0x280>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_ADC_MspInit+0x280>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_ADC_MspInit+0x280>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001602:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001606:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800160a:	f000 fc33 	bl	8001e74 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <HAL_ADC_MspInit+0x2a8>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001616:	2273      	movs	r2, #115	; 0x73
 8001618:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001634:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001638:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001654:	f001 fd60 	bl	8003118 <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800165e:	f7ff fead 	bl	80013bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 8001666:	64da      	str	r2, [r3, #76]	; 0x4c
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_ADC_MspInit+0x2a4>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800166e:	bf00      	nop
 8001670:	3738      	adds	r7, #56	; 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000
 800167c:	24000048 	.word	0x24000048
 8001680:	58024400 	.word	0x58024400
 8001684:	58020000 	.word	0x58020000
 8001688:	240005a8 	.word	0x240005a8
 800168c:	40020010 	.word	0x40020010
 8001690:	40022100 	.word	0x40022100
 8001694:	58020800 	.word	0x58020800
 8001698:	24000738 	.word	0x24000738
 800169c:	40020028 	.word	0x40020028
 80016a0:	58026000 	.word	0x58026000
 80016a4:	240002e0 	.word	0x240002e0
 80016a8:	40020040 	.word	0x40020040

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_TIM_Base_MspInit+0x48>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d116      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_TIM_Base_MspInit+0x4c>)
 80016c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_TIM_Base_MspInit+0x4c>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_TIM_Base_MspInit+0x4c>)
 80016d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2037      	movs	r0, #55	; 0x37
 80016e2:	f001 fce4 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016e6:	2037      	movs	r0, #55	; 0x37
 80016e8:	f001 fcfb 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40001400 	.word	0x40001400
 80016f8:	58024400 	.word	0x58024400

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4aa3      	ldr	r2, [pc, #652]	; (80019a8 <HAL_UART_MspInit+0x2ac>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d136      	bne.n	800178c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800171e:	4ba3      	ldr	r3, [pc, #652]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001724:	4aa1      	ldr	r2, [pc, #644]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800172a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800172e:	4b9f      	ldr	r3, [pc, #636]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800173c:	4b9b      	ldr	r3, [pc, #620]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	4a9a      	ldr	r2, [pc, #616]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174c:	4b97      	ldr	r3, [pc, #604]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800176a:	2307      	movs	r3, #7
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800176e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001772:	4619      	mov	r1, r3
 8001774:	488e      	ldr	r0, [pc, #568]	; (80019b0 <HAL_UART_MspInit+0x2b4>)
 8001776:	f003 ffeb 	bl	8005750 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2104      	movs	r1, #4
 800177e:	2052      	movs	r0, #82	; 0x52
 8001780:	f001 fc95 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001784:	2052      	movs	r0, #82	; 0x52
 8001786:	f001 fcac 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800178a:	e108      	b.n	800199e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a88      	ldr	r2, [pc, #544]	; (80019b4 <HAL_UART_MspInit+0x2b8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d165      	bne.n	8001862 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800179c:	4a83      	ldr	r2, [pc, #524]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 80017a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	4b7d      	ldr	r3, [pc, #500]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	4a7c      	ldr	r2, [pc, #496]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c4:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 80017d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80017e4:	2304      	movs	r3, #4
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ec:	4619      	mov	r1, r3
 80017ee:	4872      	ldr	r0, [pc, #456]	; (80019b8 <HAL_UART_MspInit+0x2bc>)
 80017f0:	f003 ffae 	bl	8005750 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 80017f6:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <HAL_UART_MspInit+0x2c4>)
 80017f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017fa:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 80017fc:	2229      	movs	r2, #41	; 0x29
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001800:	4b6e      	ldr	r3, [pc, #440]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 800180e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001812:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001814:	4b69      	ldr	r3, [pc, #420]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181a:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001820:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001834:	4861      	ldr	r0, [pc, #388]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001836:	f001 fc6f 	bl	8003118 <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001840:	f7ff fdbc 	bl	80013bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a5d      	ldr	r2, [pc, #372]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 8001848:	679a      	str	r2, [r3, #120]	; 0x78
 800184a:	4a5c      	ldr	r2, [pc, #368]	; (80019bc <HAL_UART_MspInit+0x2c0>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2101      	movs	r1, #1
 8001854:	2025      	movs	r0, #37	; 0x25
 8001856:	f001 fc2a 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800185a:	2025      	movs	r0, #37	; 0x25
 800185c:	f001 fc41 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8001860:	e09d      	b.n	800199e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <HAL_UART_MspInit+0x2c8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d15d      	bne.n	8001928 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800186c:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800186e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001872:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800187e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001890:	4a46      	ldr	r2, [pc, #280]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189a:	4b44      	ldr	r3, [pc, #272]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 80018a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ba:	2307      	movs	r3, #7
 80018bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	483c      	ldr	r0, [pc, #240]	; (80019b8 <HAL_UART_MspInit+0x2bc>)
 80018c6:	f003 ff43 	bl	8005750 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018cc:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_UART_MspInit+0x2d0>)
 80018ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018d2:	222d      	movs	r2, #45	; 0x2d
 80018d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 80018f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800190a:	482f      	ldr	r0, [pc, #188]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 800190c:	f001 fc04 	bl	8003118 <HAL_DMA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001916:	f7ff fd51 	bl	80013bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 800191e:	679a      	str	r2, [r3, #120]	; 0x78
 8001920:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_UART_MspInit+0x2cc>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001926:	e03a      	b.n	800199e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_UART_MspInit+0x2d4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d135      	bne.n	800199e <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 800193a:	f043 0320 	orr.w	r3, r3, #32
 800193e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_UART_MspInit+0x2b0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800197e:	2307      	movs	r3, #7
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	4812      	ldr	r0, [pc, #72]	; (80019d4 <HAL_UART_MspInit+0x2d8>)
 800198a:	f003 fee1 	bl	8005750 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2102      	movs	r1, #2
 8001992:	2047      	movs	r0, #71	; 0x47
 8001994:	f001 fb8b 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001998:	2047      	movs	r0, #71	; 0x47
 800199a:	f001 fba2 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3740      	adds	r7, #64	; 0x40
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40007800 	.word	0x40007800
 80019ac:	58024400 	.word	0x58024400
 80019b0:	58021400 	.word	0x58021400
 80019b4:	40011000 	.word	0x40011000
 80019b8:	58020400 	.word	0x58020400
 80019bc:	24000474 	.word	0x24000474
 80019c0:	40020058 	.word	0x40020058
 80019c4:	40004800 	.word	0x40004800
 80019c8:	2400011c 	.word	0x2400011c
 80019cc:	40020440 	.word	0x40020440
 80019d0:	40011400 	.word	0x40011400
 80019d4:	58020800 	.word	0x58020800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <SysTick_Handler+0x2c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SysTick_Handler+0x2c>)
 8001a36:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SysTick_Handler+0x2c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d904      	bls.n	8001a4a <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Handler+0x2c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001a46:	f7fe fed1 	bl	80007ec <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4a:	f000 f9c5 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240004fc 	.word	0x240004fc

08001a58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA1_Stream0_IRQHandler+0x10>)
 8001a5e:	f002 fb65 	bl	800412c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	240005a8 	.word	0x240005a8

08001a6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//	leftRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
//	rigtRawDistance = a_Linear *pitchRawValue[1] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[2] + b_Linear;
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <DMA1_Stream1_IRQHandler+0x10>)
 8001a72:	f002 fb5b 	bl	800412c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	24000738 	.word	0x24000738

08001a80 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA1_Stream2_IRQHandler+0x10>)
 8001a86:	f002 fb51 	bl	800412c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	240002e0 	.word	0x240002e0

08001a94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <DMA1_Stream3_IRQHandler+0x24>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <DMA1_Stream3_IRQHandler+0x24>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <DMA1_Stream3_IRQHandler+0x28>)
 8001aac:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <DMA1_Stream3_IRQHandler+0x2c>)
 8001ab0:	f002 fb3c 	bl	800412c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	240002c0 	.word	0x240002c0
 8001abc:	24000370 	.word	0x24000370
 8001ac0:	24000474 	.word	0x24000474

08001ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <USART1_IRQHandler+0x10>)
 8001aca:	f007 fc17 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000508 	.word	0x24000508

08001ad8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM7_IRQHandler+0x10>)
 8001ade:	f006 febb 	bl	8008858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	240007b8 	.word	0x240007b8

08001aec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <DMA2_Stream2_IRQHandler+0xa8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d135      	bne.n	8001b64 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <DMA2_Stream2_IRQHandler+0xac>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	b2d1      	uxtb	r1, r2
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <DMA2_Stream2_IRQHandler+0xac>)
 8001b02:	7011      	strb	r1, [r2, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <DMA2_Stream2_IRQHandler+0xb0>)
 8001b08:	7819      	ldrb	r1, [r3, #0]
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b0c:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <DMA2_Stream2_IRQHandler+0xac>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d926      	bls.n	8001b64 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <DMA2_Stream2_IRQHandler+0xac>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <DMA2_Stream2_IRQHandler+0xa8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <DMA2_Stream2_IRQHandler+0xb8>)
 8001b36:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b42:	78db      	ldrb	r3, [r3, #3]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <DMA2_Stream2_IRQHandler+0xbc>)
 8001b4c:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <DMA2_Stream2_IRQHandler+0xb4>)
 8001b58:	795b      	ldrb	r3, [r3, #5]
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <DMA2_Stream2_IRQHandler+0xc0>)
 8001b62:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <DMA2_Stream2_IRQHandler+0xb0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2baa      	cmp	r3, #170	; 0xaa
 8001b6a:	d106      	bne.n	8001b7a <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <DMA2_Stream2_IRQHandler+0xa8>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <DMA2_Stream2_IRQHandler+0xa8>)
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e006      	b.n	8001b88 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <DMA2_Stream2_IRQHandler+0xa8>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <DMA2_Stream2_IRQHandler+0xa8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <DMA2_Stream2_IRQHandler+0xc4>)
 8001b8a:	f002 facf 	bl	800412c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	24000044 	.word	0x24000044
 8001b98:	24000404 	.word	0x24000404
 8001b9c:	24000704 	.word	0x24000704
 8001ba0:	240002b8 	.word	0x240002b8
 8001ba4:	240005a4 	.word	0x240005a4
 8001ba8:	240005a6 	.word	0x240005a6
 8001bac:	24000718 	.word	0x24000718
 8001bb0:	2400011c 	.word	0x2400011c

08001bb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <USART6_IRQHandler+0x10>)
 8001bba:	f007 fb9f 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24000678 	.word	0x24000678

08001bc8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <UART7_IRQHandler+0x10>)
 8001bce:	f007 fb95 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24000078 	.word	0x24000078

08001bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <SystemInit+0xac>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <SystemInit+0xac>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <SystemInit+0xb0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <SystemInit+0xb0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <SystemInit+0xb0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <SystemInit+0xb0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4921      	ldr	r1, [pc, #132]	; (8001c8c <SystemInit+0xb0>)
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <SystemInit+0xb4>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <SystemInit+0xb0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <SystemInit+0xb0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <SystemInit+0xb0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <SystemInit+0xb0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <SystemInit+0xb0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <SystemInit+0xb0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <SystemInit+0xb0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <SystemInit+0xb0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <SystemInit+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <SystemInit+0xb0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <SystemInit+0xb0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <SystemInit+0xb0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <SystemInit+0xb0>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <SystemInit+0xb0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <SystemInit+0xb8>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <SystemInit+0xbc>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c6e:	d202      	bcs.n	8001c76 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <SystemInit+0xc0>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SystemInit+0xac>)
 8001c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c7c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c94:	5c001000 	.word	0x5c001000
 8001c98:	ffff0000 	.word	0xffff0000
 8001c9c:	51008108 	.word	0x51008108

08001ca0 <Reset_Handler>:
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd8 <LoopFillZerobss+0x14>
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	e003      	b.n	8001cb0 <LoopCopyDataInit>

08001ca8 <CopyDataInit>:
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopFillZerobss+0x18>)
 8001caa:	585b      	ldr	r3, [r3, r1]
 8001cac:	5043      	str	r3, [r0, r1]
 8001cae:	3104      	adds	r1, #4

08001cb0 <LoopCopyDataInit>:
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x1c>)
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x20>)
 8001cb4:	1842      	adds	r2, r0, r1
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f6      	bcc.n	8001ca8 <CopyDataInit>
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x24>)
 8001cbc:	e002      	b.n	8001cc4 <LoopFillZerobss>

08001cbe <FillZerobss>:
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f842 3b04 	str.w	r3, [r2], #4

08001cc4 <LoopFillZerobss>:
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <LoopFillZerobss+0x28>)
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3f9      	bcc.n	8001cbe <FillZerobss>
 8001cca:	f7ff ff87 	bl	8001bdc <SystemInit>
 8001cce:	f00a fc8d 	bl	800c5ec <__libc_init_array>
 8001cd2:	f7fe fe7b 	bl	80009cc <main>
 8001cd6:	4770      	bx	lr
 8001cd8:	24080000 	.word	0x24080000
 8001cdc:	0800c694 	.word	0x0800c694
 8001ce0:	24000000 	.word	0x24000000
 8001ce4:	24000028 	.word	0x24000028
 8001ce8:	24000028 	.word	0x24000028
 8001cec:	2400081c 	.word	0x2400081c

08001cf0 <ADC3_IRQHandler>:
 8001cf0:	e7fe      	b.n	8001cf0 <ADC3_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	f001 f9cc 	bl	8003098 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d00:	f004 fcd2 	bl	80066a8 <HAL_RCC_GetSysClockFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_Init+0x68>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_Init+0x6c>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	fa21 f303 	lsr.w	r3, r1, r3
 8001d1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_Init+0x68>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_Init+0x6c>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_Init+0x70>)
 8001d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_Init+0x74>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f000 f814 	bl	8001d6c <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e002      	b.n	8001d54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4e:	f7ff fb3d 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	0800c66c 	.word	0x0800c66c
 8001d64:	2400001c 	.word	0x2400001c
 8001d68:	24000018 	.word	0x24000018

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_InitTick+0x60>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e021      	b.n	8001dc4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_InitTick+0x64>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_InitTick+0x60>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 f9b1 	bl	80030fe <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00e      	b.n	8001dc4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d80a      	bhi.n	8001dc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f001 f97b 	bl	80030ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_InitTick+0x68>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	24000024 	.word	0x24000024
 8001dd0:	24000018 	.word	0x24000018
 8001dd4:	24000020 	.word	0x24000020

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	24000024 	.word	0x24000024
 8001dfc:	24000818 	.word	0x24000818

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	24000818 	.word	0x24000818

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_Delay+0x40>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	24000024 	.word	0x24000024

08001e5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetREVID+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0c1b      	lsrs	r3, r3, #16
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	5c001000 	.word	0x5c001000

08001e74 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	58000400 	.word	0x58000400

08001ea0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f08:	b490      	push	{r4, r7}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3360      	adds	r3, #96	; 0x60
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	430b      	orrs	r3, r1
 8001f34:	4313      	orrs	r3, r2
 8001f36:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc90      	pop	{r4, r7}
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	431a      	orrs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	611a      	str	r2, [r3, #16]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f74:	b490      	push	{r4, r7}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3360      	adds	r3, #96	; 0x60
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	6023      	str	r3, [r4, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc90      	pop	{r4, r7}
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fa4:	b490      	push	{r4, r7}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3330      	adds	r3, #48	; 0x30
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	4413      	add	r3, r2
 8001fc2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001fc4:	6822      	ldr	r2, [r4, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	211f      	movs	r1, #31
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	f003 011f 	and.w	r1, r3, #31
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc90      	pop	{r4, r7}
 8001ff4:	4770      	bx	lr

08001ff6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ff6:	b490      	push	{r4, r7}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3314      	adds	r3, #20
 8002006:	461a      	mov	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	0e5b      	lsrs	r3, r3, #25
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	0d1b      	lsrs	r3, r3, #20
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2107      	movs	r1, #7
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0d1b      	lsrs	r3, r3, #20
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bc90      	pop	{r4, r7}
 8002044:	4770      	bx	lr
	...

08002048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0318 	and.w	r3, r3, #24
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <LL_ADC_SetChannelSingleDiff+0x44>)
 800206c:	40d9      	lsrs	r1, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	400b      	ands	r3, r1
 8002072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	000fffff 	.word	0x000fffff

08002090 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6093      	str	r3, [r2, #8]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	5fffffc0 	.word	0x5fffffc0

080020b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020c8:	d101      	bne.n	80020ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <LL_ADC_EnableInternalRegulator+0x24>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	6fffffc0 	.word	0x6fffffc0

08002104 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002118:	d101      	bne.n	800211e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <LL_ADC_IsEnabled+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_ADC_IsEnabled+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d101      	bne.n	800216a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b08      	cmp	r3, #8
 800218a:	d101      	bne.n	8002190 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e18e      	b.n	80024d8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff f919 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff67 	bl	80020b4 <LL_ADC_IsDeepPowerDownEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff4d 	bl	8002090 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff82 	bl	8002104 <LL_ADC_IsInternalRegulatorEnabled>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d113      	bne.n	800222e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff66 	bl	80020dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002210:	4b9a      	ldr	r3, [pc, #616]	; (800247c <HAL_ADC_Init+0x2dc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	4a9a      	ldr	r2, [pc, #616]	; (8002480 <HAL_ADC_Init+0x2e0>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002220:	e002      	b.n	8002228 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3b01      	subs	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f9      	bne.n	8002222 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff66 	bl	8002104 <LL_ADC_IsInternalRegulatorEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0210 	orr.w	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff77 	bl	8002152 <LL_ADC_REG_IsConversionOngoing>
 8002264:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8129 	bne.w	80024c6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 8125 	bne.w	80024c6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002284:	f043 0202 	orr.w	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff4b 	bl	800212c <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d136      	bne.n	800230a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a78      	ldr	r2, [pc, #480]	; (8002484 <HAL_ADC_Init+0x2e4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <HAL_ADC_Init+0x110>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_ADC_Init+0x2e8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d10e      	bne.n	80022ce <HAL_ADC_Init+0x12e>
 80022b0:	4874      	ldr	r0, [pc, #464]	; (8002484 <HAL_ADC_Init+0x2e4>)
 80022b2:	f7ff ff3b 	bl	800212c <LL_ADC_IsEnabled>
 80022b6:	4604      	mov	r4, r0
 80022b8:	4873      	ldr	r0, [pc, #460]	; (8002488 <HAL_ADC_Init+0x2e8>)
 80022ba:	f7ff ff37 	bl	800212c <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	4323      	orrs	r3, r4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e008      	b.n	80022e0 <HAL_ADC_Init+0x140>
 80022ce:	486f      	ldr	r0, [pc, #444]	; (800248c <HAL_ADC_Init+0x2ec>)
 80022d0:	f7ff ff2c 	bl	800212c <LL_ADC_IsEnabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a66      	ldr	r2, [pc, #408]	; (8002484 <HAL_ADC_Init+0x2e4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_ADC_Init+0x158>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_ADC_Init+0x2e8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_Init+0x15c>
 80022f8:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_ADC_Init+0x2f0>)
 80022fa:	e000      	b.n	80022fe <HAL_ADC_Init+0x15e>
 80022fc:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_ADC_Init+0x2f4>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7ff fdcb 	bl	8001ea0 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800230a:	f7ff fda7 	bl	8001e5c <HAL_GetREVID>
 800230e:	4602      	mov	r2, r0
 8002310:	f241 0303 	movw	r3, #4099	; 0x1003
 8002314:	429a      	cmp	r2, r3
 8002316:	d914      	bls.n	8002342 <HAL_ADC_Init+0x1a2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b10      	cmp	r3, #16
 800231e:	d110      	bne.n	8002342 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7d5b      	ldrb	r3, [r3, #21]
 8002324:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800232a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002330:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7f1b      	ldrb	r3, [r3, #28]
 8002336:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002338:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800233a:	f043 030c 	orr.w	r3, r3, #12
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e00d      	b.n	800235e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7d5b      	ldrb	r3, [r3, #21]
 8002346:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800234c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002352:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7f1b      	ldrb	r3, [r3, #28]
 8002358:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7f1b      	ldrb	r3, [r3, #28]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d106      	bne.n	8002374 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	3b01      	subs	r3, #1
 800236c:	045b      	lsls	r3, r3, #17
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	4b40      	ldr	r3, [pc, #256]	; (8002498 <HAL_ADC_Init+0x2f8>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fed2 	bl	8002152 <LL_ADC_REG_IsConversionOngoing>
 80023ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fedf 	bl	8002178 <LL_ADC_INJ_IsConversionOngoing>
 80023ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d14a      	bne.n	8002458 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d147      	bne.n	8002458 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7d1b      	ldrb	r3, [r3, #20]
 80023cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4b2f      	ldr	r3, [pc, #188]	; (800249c <HAL_ADC_Init+0x2fc>)
 80023de:	4013      	ands	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	69b9      	ldr	r1, [r7, #24]
 80023e6:	430b      	orrs	r3, r1
 80023e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d11b      	bne.n	800242c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_ADC_Init+0x300>)
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002408:	3a01      	subs	r2, #1
 800240a:	0411      	lsls	r1, r2, #16
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800241c:	430a      	orrs	r2, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e007      	b.n	800243c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fb58 	bl	8002b08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d121      	bne.n	80024a4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f023 010f 	bic.w	r1, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	e01c      	b.n	80024b4 <HAL_ADC_Init+0x314>
 800247a:	bf00      	nop
 800247c:	24000018 	.word	0x24000018
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	40022000 	.word	0x40022000
 8002488:	40022100 	.word	0x40022100
 800248c:	58026000 	.word	0x58026000
 8002490:	40022300 	.word	0x40022300
 8002494:	58026300 	.word	0x58026300
 8002498:	fff0c003 	.word	0xfff0c003
 800249c:	ffffbffc 	.word	0xffffbffc
 80024a0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 020f 	bic.w	r2, r2, #15
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f023 0303 	bic.w	r3, r3, #3
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
 80024c4:	e007      	b.n	80024d6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3724      	adds	r7, #36	; 0x24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b099      	sub	sp, #100	; 0x64
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a99      	ldr	r2, [pc, #612]	; (8002760 <HAL_ADC_ConfigChannel+0x280>)
 80024fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x2a>
 8002506:	2302      	movs	r3, #2
 8002508:	e2e6      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x5f8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fe1b 	bl	8002152 <LL_ADC_REG_IsConversionOngoing>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 82cb 	bne.w	8002aba <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252c:	2b00      	cmp	r3, #0
 800252e:	d108      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x62>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2201      	movs	r2, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	e00f      	b.n	8002562 <HAL_ADC_ConfigChannel+0x82>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2201      	movs	r2, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	69d1      	ldr	r1, [r2, #28]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff fd11 	bl	8001fa4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fde3 	bl	8002152 <LL_ADC_REG_IsConversionOngoing>
 800258c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fdf0 	bl	8002178 <LL_ADC_INJ_IsConversionOngoing>
 8002598:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800259a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 80b3 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f040 80af 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7ff fd1d 	bl	8001ff6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025bc:	4b69      	ldr	r3, [pc, #420]	; (8002764 <HAL_ADC_ConfigChannel+0x284>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025c8:	d10b      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x102>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	e01d      	b.n	800261e <HAL_ADC_ConfigChannel+0x13e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x128>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	e00a      	b.n	800261e <HAL_ADC_ConfigChannel+0x13e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d027      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6919      	ldr	r1, [r3, #16]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002636:	f7ff fc67 	bl	8001f08 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6919      	ldr	r1, [r3, #16]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	7e5b      	ldrb	r3, [r3, #25]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x170>
 800264a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800264e:	e000      	b.n	8002652 <HAL_ADC_ConfigChannel+0x172>
 8002650:	2300      	movs	r3, #0
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff fc8e 	bl	8001f74 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6919      	ldr	r1, [r3, #16]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	7e1b      	ldrb	r3, [r3, #24]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_ADC_ConfigChannel+0x18e>
 8002668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800266c:	e000      	b.n	8002670 <HAL_ADC_ConfigChannel+0x190>
 800266e:	2300      	movs	r3, #0
 8002670:	461a      	mov	r2, r3
 8002672:	f7ff fc66 	bl	8001f42 <LL_ADC_SetDataRightShift>
 8002676:	e047      	b.n	8002708 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	069b      	lsls	r3, r3, #26
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800269a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	069b      	lsls	r3, r3, #26
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026be:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	069b      	lsls	r3, r3, #26
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d107      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026e2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	069b      	lsls	r3, r3, #26
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002706:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fd0d 	bl	800212c <LL_ADC_IsEnabled>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 81d9 	bne.w	8002acc <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f7ff fc8e 	bl	8002048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_ADC_ConfigChannel+0x280>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f040 8101 	bne.w	800293a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10f      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x288>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	3301      	adds	r3, #1
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	2b09      	cmp	r3, #9
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e016      	b.n	800278e <HAL_ADC_ConfigChannel+0x2ae>
 8002760:	47ff0000 	.word	0x47ff0000
 8002764:	5c001000 	.word	0x5c001000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2b09      	cmp	r3, #9
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278e:	2b00      	cmp	r3, #0
 8002790:	d064      	beq.n	800285c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x2ce>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	3301      	adds	r3, #1
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ac:	e00e      	b.n	80027cc <HAL_ADC_ConfigChannel+0x2ec>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	069b      	lsls	r3, r3, #26
 80027c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x30c>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	3301      	adds	r3, #1
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	e010      	b.n	800280e <HAL_ADC_ConfigChannel+0x32e>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	ea42 0103 	orr.w	r1, r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x354>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	051b      	lsls	r3, r3, #20
 8002832:	e011      	b.n	8002858 <HAL_ADC_ConfigChannel+0x378>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002858:	430b      	orrs	r3, r1
 800285a:	e069      	b.n	8002930 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x398>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	3301      	adds	r3, #1
 8002870:	069b      	lsls	r3, r3, #26
 8002872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002876:	e00e      	b.n	8002896 <HAL_ADC_ConfigChannel+0x3b6>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	61fb      	str	r3, [r7, #28]
  return result;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x3d6>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	e010      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x3f8>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	617b      	str	r3, [r7, #20]
  return result;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	ea42 0103 	orr.w	r1, r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10d      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x424>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e9b      	lsrs	r3, r3, #26
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	3b1e      	subs	r3, #30
 80028fc:	051b      	lsls	r3, r3, #20
 80028fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002902:	e014      	b.n	800292e <HAL_ADC_ConfigChannel+0x44e>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	60fb      	str	r3, [r7, #12]
  return result;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292e:	430b      	orrs	r3, r1
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	4619      	mov	r1, r3
 8002936:	f7ff fb5e 	bl	8001ff6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f280 80c4 	bge.w	8002acc <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <HAL_ADC_ConfigChannel+0x600>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x478>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a64      	ldr	r2, [pc, #400]	; (8002ae4 <HAL_ADC_ConfigChannel+0x604>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x47c>
 8002958:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_ADC_ConfigChannel+0x608>)
 800295a:	e000      	b.n	800295e <HAL_ADC_ConfigChannel+0x47e>
 800295c:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_ADC_ConfigChannel+0x60c>)
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fac4 	bl	8001eec <LL_ADC_GetCommonPathInternalCh>
 8002964:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5d      	ldr	r2, [pc, #372]	; (8002ae0 <HAL_ADC_ConfigChannel+0x600>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0x49a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5b      	ldr	r2, [pc, #364]	; (8002ae4 <HAL_ADC_ConfigChannel+0x604>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10e      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x4b8>
 800297a:	4859      	ldr	r0, [pc, #356]	; (8002ae0 <HAL_ADC_ConfigChannel+0x600>)
 800297c:	f7ff fbd6 	bl	800212c <LL_ADC_IsEnabled>
 8002980:	4604      	mov	r4, r0
 8002982:	4858      	ldr	r0, [pc, #352]	; (8002ae4 <HAL_ADC_ConfigChannel+0x604>)
 8002984:	f7ff fbd2 	bl	800212c <LL_ADC_IsEnabled>
 8002988:	4603      	mov	r3, r0
 800298a:	4323      	orrs	r3, r4
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e008      	b.n	80029aa <HAL_ADC_ConfigChannel+0x4ca>
 8002998:	4855      	ldr	r0, [pc, #340]	; (8002af0 <HAL_ADC_ConfigChannel+0x610>)
 800299a:	f7ff fbc7 	bl	800212c <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07b      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_ADC_ConfigChannel+0x614>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d12e      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x536>
 80029b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d129      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4a      	ldr	r2, [pc, #296]	; (8002af0 <HAL_ADC_ConfigChannel+0x610>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d17f      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a43      	ldr	r2, [pc, #268]	; (8002ae0 <HAL_ADC_ConfigChannel+0x600>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x500>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a42      	ldr	r2, [pc, #264]	; (8002ae4 <HAL_ADC_ConfigChannel+0x604>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x504>
 80029e0:	4a41      	ldr	r2, [pc, #260]	; (8002ae8 <HAL_ADC_ConfigChannel+0x608>)
 80029e2:	e000      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x506>
 80029e4:	4a41      	ldr	r2, [pc, #260]	; (8002aec <HAL_ADC_ConfigChannel+0x60c>)
 80029e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f7ff fa69 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029f4:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_ADC_ConfigChannel+0x618>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	4a40      	ldr	r2, [pc, #256]	; (8002afc <HAL_ADC_ConfigChannel+0x61c>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a14:	e05a      	b.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <HAL_ADC_ConfigChannel+0x620>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d11e      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x57e>
 8002a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d119      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_ADC_ConfigChannel+0x610>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d14b      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a29      	ldr	r2, [pc, #164]	; (8002ae0 <HAL_ADC_ConfigChannel+0x600>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x568>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <HAL_ADC_ConfigChannel+0x604>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x56c>
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <HAL_ADC_ConfigChannel+0x608>)
 8002a4a:	e000      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x56e>
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_ADC_ConfigChannel+0x60c>)
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7ff fa35 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a5c:	e036      	b.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_ADC_ConfigChannel+0x624>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d131      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12c      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_ADC_ConfigChannel+0x610>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d127      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <HAL_ADC_ConfigChannel+0x600>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x5b0>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <HAL_ADC_ConfigChannel+0x604>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x5b4>
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_ADC_ConfigChannel+0x608>)
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x5b6>
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <HAL_ADC_ConfigChannel+0x60c>)
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7ff fa11 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
 8002aa4:	e012      	b.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ab8:	e008      	b.n	8002acc <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3764      	adds	r7, #100	; 0x64
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40022100 	.word	0x40022100
 8002ae8:	40022300 	.word	0x40022300
 8002aec:	58026300 	.word	0x58026300
 8002af0:	58026000 	.word	0x58026000
 8002af4:	cb840000 	.word	0xcb840000
 8002af8:	24000018 	.word	0x24000018
 8002afc:	053e2d63 	.word	0x053e2d63
 8002b00:	c7520000 	.word	0xc7520000
 8002b04:	cfb80000 	.word	0xcfb80000

08002b08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a70      	ldr	r2, [pc, #448]	; (8002cd8 <ADC_ConfigureBoostMode+0x1d0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <ADC_ConfigureBoostMode+0x1c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6f      	ldr	r2, [pc, #444]	; (8002cdc <ADC_ConfigureBoostMode+0x1d4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d109      	bne.n	8002b38 <ADC_ConfigureBoostMode+0x30>
 8002b24:	4b6e      	ldr	r3, [pc, #440]	; (8002ce0 <ADC_ConfigureBoostMode+0x1d8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e008      	b.n	8002b4a <ADC_ConfigureBoostMode+0x42>
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <ADC_ConfigureBoostMode+0x1dc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01a      	beq.n	8002b84 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b4e:	f003 ff1d 	bl	800698c <HAL_RCC_GetHCLKFreq>
 8002b52:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5c:	d006      	beq.n	8002b6c <ADC_ConfigureBoostMode+0x64>
 8002b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b62:	d00b      	beq.n	8002b7c <ADC_ConfigureBoostMode+0x74>
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d000      	beq.n	8002b6c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002b6a:	e05d      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	60fb      	str	r3, [r7, #12]
        break;
 8002b7a:	e055      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	60fb      	str	r3, [r7, #12]
        break;
 8002b82:	e051      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b88:	f004 fe3a 	bl	8007800 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b8c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b96:	d02a      	beq.n	8002bee <ADC_ConfigureBoostMode+0xe6>
 8002b98:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b9c:	d813      	bhi.n	8002bc6 <ADC_ConfigureBoostMode+0xbe>
 8002b9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba2:	d024      	beq.n	8002bee <ADC_ConfigureBoostMode+0xe6>
 8002ba4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba8:	d806      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0xb0>
 8002baa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bae:	d01e      	beq.n	8002bee <ADC_ConfigureBoostMode+0xe6>
 8002bb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bb4:	d01b      	beq.n	8002bee <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002bb6:	e037      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bbc:	d017      	beq.n	8002bee <ADC_ConfigureBoostMode+0xe6>
 8002bbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002bc2:	d014      	beq.n	8002bee <ADC_ConfigureBoostMode+0xe6>
        break;
 8002bc4:	e030      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002bc6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bca:	d021      	beq.n	8002c10 <ADC_ConfigureBoostMode+0x108>
 8002bcc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bd0:	d806      	bhi.n	8002be0 <ADC_ConfigureBoostMode+0xd8>
 8002bd2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bd6:	d013      	beq.n	8002c00 <ADC_ConfigureBoostMode+0xf8>
 8002bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bdc:	d014      	beq.n	8002c08 <ADC_ConfigureBoostMode+0x100>
        break;
 8002bde:	e023      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002be0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002be4:	d018      	beq.n	8002c18 <ADC_ConfigureBoostMode+0x110>
 8002be6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002bea:	d019      	beq.n	8002c20 <ADC_ConfigureBoostMode+0x118>
        break;
 8002bec:	e01c      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0c9b      	lsrs	r3, r3, #18
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
        break;
 8002bfe:	e013      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
      break;
 8002c06:	e00f      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	60fb      	str	r3, [r7, #12]
        break;
 8002c0e:	e00b      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	60fb      	str	r3, [r7, #12]
        break;
 8002c16:	e007      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	09db      	lsrs	r3, r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
        break;
 8002c1e:	e003      	b.n	8002c28 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	60fb      	str	r3, [r7, #12]
        break;
 8002c26:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c28:	f7ff f918 	bl	8001e5c <HAL_GetREVID>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d815      	bhi.n	8002c62 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <ADC_ConfigureBoostMode+0x1e0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d908      	bls.n	8002c50 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c4e:	e03e      	b.n	8002cce <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	e035      	b.n	8002cce <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a20      	ldr	r2, [pc, #128]	; (8002cec <ADC_ConfigureBoostMode+0x1e4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d808      	bhi.n	8002c82 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	e025      	b.n	8002cce <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <ADC_ConfigureBoostMode+0x1e8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d80a      	bhi.n	8002ca0 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	e016      	b.n	8002cce <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <ADC_ConfigureBoostMode+0x1ec>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d80a      	bhi.n	8002cbe <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	e007      	b.n	8002cce <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022100 	.word	0x40022100
 8002ce0:	40022300 	.word	0x40022300
 8002ce4:	58026300 	.word	0x58026300
 8002ce8:	01312d00 	.word	0x01312d00
 8002cec:	005f5e10 	.word	0x005f5e10
 8002cf0:	00bebc20 	.word	0x00bebc20
 8002cf4:	017d7840 	.word	0x017d7840

08002cf8 <LL_ADC_IsEnabled>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <LL_ADC_IsEnabled+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_ADC_IsEnabled+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d101      	bne.n	8002d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b09f      	sub	sp, #124	; 0x7c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0ba      	b.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5c      	ldr	r2, [pc, #368]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d102      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d74:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	e001      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e09d      	b.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffbd 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002da4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffb7 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d17f      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d17c      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a47      	ldr	r2, [pc, #284]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a46      	ldr	r2, [pc, #280]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d039      	beq.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002e06:	4836      	ldr	r0, [pc, #216]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e08:	f7ff ff76 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4835      	ldr	r0, [pc, #212]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e10:	f7ff ff72 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4323      	orrs	r3, r4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e008      	b.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002e24:	4832      	ldr	r0, [pc, #200]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e26:	f7ff ff67 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d047      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6811      	ldr	r1, [r2, #0]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e52:	e03a      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10e      	bne.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002e74:	481a      	ldr	r0, [pc, #104]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e76:	f7ff ff3f 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4819      	ldr	r0, [pc, #100]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e7e:	f7ff ff3b 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4323      	orrs	r3, r4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e008      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002e92:	4817      	ldr	r0, [pc, #92]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e94:	f7ff ff30 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002eb2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb4:	e009      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ec8:	e000      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	377c      	adds	r7, #124	; 0x7c
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40022100 	.word	0x40022100
 8002ee8:	40022300 	.word	0x40022300
 8002eec:	58026300 	.word	0x58026300
 8002ef0:	58026000 	.word	0x58026000
 8002ef4:	fffff0e0 	.word	0xfffff0e0

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <__NVIC_SetPriorityGrouping+0x40>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <__NVIC_SetPriorityGrouping+0x40>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	05fa0000 	.word	0x05fa0000

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	; (8002f94 <__NVIC_EnableIRQ+0x38>)
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003064:	d301      	bcc.n	800306a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <SysTick_Config+0x40>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003072:	210f      	movs	r1, #15
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f7ff ff8e 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <SysTick_Config+0x40>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <SysTick_Config+0x40>)
 8003084:	2207      	movs	r2, #7
 8003086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	e000e010 	.word	0xe000e010

08003098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff29 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff40 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff90 	bl	8002fec <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5f 	bl	8002f98 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff33 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa4 	bl	8003054 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7fe fe6e 	bl	8001e00 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e316      	b.n	800375e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_DMA_Init+0x1b8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04a      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a65      	ldr	r2, [pc, #404]	; (80032d4 <HAL_DMA_Init+0x1bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d045      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_DMA_Init+0x1c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d040      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a62      	ldr	r2, [pc, #392]	; (80032dc <HAL_DMA_Init+0x1c4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d03b      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a60      	ldr	r2, [pc, #384]	; (80032e0 <HAL_DMA_Init+0x1c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d036      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5f      	ldr	r2, [pc, #380]	; (80032e4 <HAL_DMA_Init+0x1cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d031      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5d      	ldr	r2, [pc, #372]	; (80032e8 <HAL_DMA_Init+0x1d0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02c      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5c      	ldr	r2, [pc, #368]	; (80032ec <HAL_DMA_Init+0x1d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d027      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_DMA_Init+0x1d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d022      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a59      	ldr	r2, [pc, #356]	; (80032f4 <HAL_DMA_Init+0x1dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d01d      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_DMA_Init+0x1e0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d018      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_DMA_Init+0x1e4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a54      	ldr	r2, [pc, #336]	; (8003300 <HAL_DMA_Init+0x1e8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00e      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a53      	ldr	r2, [pc, #332]	; (8003304 <HAL_DMA_Init+0x1ec>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a51      	ldr	r2, [pc, #324]	; (8003308 <HAL_DMA_Init+0x1f0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_Init+0xb8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a50      	ldr	r2, [pc, #320]	; (800330c <HAL_DMA_Init+0x1f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_DMA_Init+0xbc>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_DMA_Init+0xbe>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 813b 	beq.w	8003452 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_DMA_Init+0x1b8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d04a      	beq.n	800328c <HAL_DMA_Init+0x174>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a36      	ldr	r2, [pc, #216]	; (80032d4 <HAL_DMA_Init+0x1bc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d045      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <HAL_DMA_Init+0x1c0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d040      	beq.n	800328c <HAL_DMA_Init+0x174>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_DMA_Init+0x1c4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d03b      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_DMA_Init+0x1c8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d036      	beq.n	800328c <HAL_DMA_Init+0x174>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_DMA_Init+0x1cc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d031      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_DMA_Init+0x1d0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02c      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <HAL_DMA_Init+0x1d4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d027      	beq.n	800328c <HAL_DMA_Init+0x174>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <HAL_DMA_Init+0x1d8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d022      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_DMA_Init+0x1dc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d01d      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <HAL_DMA_Init+0x1e0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_DMA_Init+0x174>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a27      	ldr	r2, [pc, #156]	; (80032fc <HAL_DMA_Init+0x1e4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a25      	ldr	r2, [pc, #148]	; (8003300 <HAL_DMA_Init+0x1e8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00e      	beq.n	800328c <HAL_DMA_Init+0x174>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_DMA_Init+0x1ec>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a22      	ldr	r2, [pc, #136]	; (8003308 <HAL_DMA_Init+0x1f0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_DMA_Init+0x174>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_DMA_Init+0x1f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <HAL_DMA_Init+0x186>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e007      	b.n	80032ae <HAL_DMA_Init+0x196>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032ae:	e02f      	b.n	8003310 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b0:	f7fe fda6 	bl	8001e00 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d928      	bls.n	8003310 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2203      	movs	r2, #3
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e246      	b.n	800375e <HAL_DMA_Init+0x646>
 80032d0:	40020010 	.word	0x40020010
 80032d4:	40020028 	.word	0x40020028
 80032d8:	40020040 	.word	0x40020040
 80032dc:	40020058 	.word	0x40020058
 80032e0:	40020070 	.word	0x40020070
 80032e4:	40020088 	.word	0x40020088
 80032e8:	400200a0 	.word	0x400200a0
 80032ec:	400200b8 	.word	0x400200b8
 80032f0:	40020410 	.word	0x40020410
 80032f4:	40020428 	.word	0x40020428
 80032f8:	40020440 	.word	0x40020440
 80032fc:	40020458 	.word	0x40020458
 8003300:	40020470 	.word	0x40020470
 8003304:	40020488 	.word	0x40020488
 8003308:	400204a0 	.word	0x400204a0
 800330c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1c8      	bne.n	80032b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4b83      	ldr	r3, [pc, #524]	; (8003538 <HAL_DMA_Init+0x420>)
 800332a:	4013      	ands	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003336:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003342:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4313      	orrs	r3, r2
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003374:	4b71      	ldr	r3, [pc, #452]	; (800353c <HAL_DMA_Init+0x424>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b71      	ldr	r3, [pc, #452]	; (8003540 <HAL_DMA_Init+0x428>)
 800337a:	4013      	ands	r3, r2
 800337c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003380:	d328      	bcc.n	80033d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b28      	cmp	r3, #40	; 0x28
 8003388:	d903      	bls.n	8003392 <HAL_DMA_Init+0x27a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b2e      	cmp	r3, #46	; 0x2e
 8003390:	d917      	bls.n	80033c2 <HAL_DMA_Init+0x2aa>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b3e      	cmp	r3, #62	; 0x3e
 8003398:	d903      	bls.n	80033a2 <HAL_DMA_Init+0x28a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b42      	cmp	r3, #66	; 0x42
 80033a0:	d90f      	bls.n	80033c2 <HAL_DMA_Init+0x2aa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b46      	cmp	r3, #70	; 0x46
 80033a8:	d903      	bls.n	80033b2 <HAL_DMA_Init+0x29a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b48      	cmp	r3, #72	; 0x48
 80033b0:	d907      	bls.n	80033c2 <HAL_DMA_Init+0x2aa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b4e      	cmp	r3, #78	; 0x4e
 80033b8:	d905      	bls.n	80033c6 <HAL_DMA_Init+0x2ae>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b52      	cmp	r3, #82	; 0x52
 80033c0:	d801      	bhi.n	80033c6 <HAL_DMA_Init+0x2ae>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_Init+0x2b0>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0307 	bic.w	r3, r3, #7
 80033ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d117      	bne.n	800342e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f002 f813 	bl	800543c <DMA_CheckFifoParam>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e197      	b.n	800375e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f001 ff4e 	bl	80052d8 <DMA_CalcBaseAndBitshift>
 800343c:	4603      	mov	r3, r0
 800343e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	e0cd      	b.n	80035ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_DMA_Init+0x42c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a39      	ldr	r2, [pc, #228]	; (8003548 <HAL_DMA_Init+0x430>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a38      	ldr	r2, [pc, #224]	; (800354c <HAL_DMA_Init+0x434>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a36      	ldr	r2, [pc, #216]	; (8003550 <HAL_DMA_Init+0x438>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a35      	ldr	r2, [pc, #212]	; (8003554 <HAL_DMA_Init+0x43c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a33      	ldr	r2, [pc, #204]	; (8003558 <HAL_DMA_Init+0x440>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a32      	ldr	r2, [pc, #200]	; (800355c <HAL_DMA_Init+0x444>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_DMA_Init+0x38a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a30      	ldr	r2, [pc, #192]	; (8003560 <HAL_DMA_Init+0x448>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_DMA_Init+0x38e>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_DMA_Init+0x390>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8097 	beq.w	80035dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_DMA_Init+0x42c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d021      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_DMA_Init+0x430>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01c      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_DMA_Init+0x434>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d017      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_DMA_Init+0x438>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d012      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_DMA_Init+0x43c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00d      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_DMA_Init+0x440>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d008      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_DMA_Init+0x444>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_Init+0x3e4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_DMA_Init+0x448>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_DMA_Init+0x44c>)
 800351a:	4013      	ands	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d020      	beq.n	8003568 <HAL_DMA_Init+0x450>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d102      	bne.n	8003534 <HAL_DMA_Init+0x41c>
 800352e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003532:	e01a      	b.n	800356a <HAL_DMA_Init+0x452>
 8003534:	2300      	movs	r3, #0
 8003536:	e018      	b.n	800356a <HAL_DMA_Init+0x452>
 8003538:	fe10803f 	.word	0xfe10803f
 800353c:	5c001000 	.word	0x5c001000
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	58025408 	.word	0x58025408
 8003548:	5802541c 	.word	0x5802541c
 800354c:	58025430 	.word	0x58025430
 8003550:	58025444 	.word	0x58025444
 8003554:	58025458 	.word	0x58025458
 8003558:	5802546c 	.word	0x5802546c
 800355c:	58025480 	.word	0x58025480
 8003560:	58025494 	.word	0x58025494
 8003564:	fffe000f 	.word	0xfffe000f
 8003568:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003598:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b6e      	ldr	r3, [pc, #440]	; (8003768 <HAL_DMA_Init+0x650>)
 80035b0:	4413      	add	r3, r2
 80035b2:	4a6e      	ldr	r2, [pc, #440]	; (800376c <HAL_DMA_Init+0x654>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f001 fe89 	bl	80052d8 <DMA_CalcBaseAndBitshift>
 80035c6:	4603      	mov	r3, r0
 80035c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2201      	movs	r2, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	e008      	b.n	80035ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2203      	movs	r2, #3
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0b7      	b.n	800375e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5f      	ldr	r2, [pc, #380]	; (8003770 <HAL_DMA_Init+0x658>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d072      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_DMA_Init+0x65c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d06d      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5c      	ldr	r2, [pc, #368]	; (8003778 <HAL_DMA_Init+0x660>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d068      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5a      	ldr	r2, [pc, #360]	; (800377c <HAL_DMA_Init+0x664>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d063      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a59      	ldr	r2, [pc, #356]	; (8003780 <HAL_DMA_Init+0x668>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d05e      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a57      	ldr	r2, [pc, #348]	; (8003784 <HAL_DMA_Init+0x66c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d059      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a56      	ldr	r2, [pc, #344]	; (8003788 <HAL_DMA_Init+0x670>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d054      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a54      	ldr	r2, [pc, #336]	; (800378c <HAL_DMA_Init+0x674>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d04f      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a53      	ldr	r2, [pc, #332]	; (8003790 <HAL_DMA_Init+0x678>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04a      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a51      	ldr	r2, [pc, #324]	; (8003794 <HAL_DMA_Init+0x67c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a50      	ldr	r2, [pc, #320]	; (8003798 <HAL_DMA_Init+0x680>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d040      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a4e      	ldr	r2, [pc, #312]	; (800379c <HAL_DMA_Init+0x684>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03b      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4d      	ldr	r2, [pc, #308]	; (80037a0 <HAL_DMA_Init+0x688>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d036      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a4b      	ldr	r2, [pc, #300]	; (80037a4 <HAL_DMA_Init+0x68c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d031      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4a      	ldr	r2, [pc, #296]	; (80037a8 <HAL_DMA_Init+0x690>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02c      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a48      	ldr	r2, [pc, #288]	; (80037ac <HAL_DMA_Init+0x694>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d027      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a47      	ldr	r2, [pc, #284]	; (80037b0 <HAL_DMA_Init+0x698>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a45      	ldr	r2, [pc, #276]	; (80037b4 <HAL_DMA_Init+0x69c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a44      	ldr	r2, [pc, #272]	; (80037b8 <HAL_DMA_Init+0x6a0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_DMA_Init+0x6a4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a41      	ldr	r2, [pc, #260]	; (80037c0 <HAL_DMA_Init+0x6a8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <HAL_DMA_Init+0x6ac>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3e      	ldr	r2, [pc, #248]	; (80037c8 <HAL_DMA_Init+0x6b0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Init+0x5c6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <HAL_DMA_Init+0x6b4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_DMA_Init+0x5ca>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_DMA_Init+0x5cc>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d032      	beq.n	800374e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f001 ff23 	bl	8005534 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d102      	bne.n	80036fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003710:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d010      	beq.n	800373c <HAL_DMA_Init+0x624>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d80c      	bhi.n	800373c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f001 ffa0 	bl	8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e008      	b.n	800374e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	a7fdabf8 	.word	0xa7fdabf8
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	40020010 	.word	0x40020010
 8003774:	40020028 	.word	0x40020028
 8003778:	40020040 	.word	0x40020040
 800377c:	40020058 	.word	0x40020058
 8003780:	40020070 	.word	0x40020070
 8003784:	40020088 	.word	0x40020088
 8003788:	400200a0 	.word	0x400200a0
 800378c:	400200b8 	.word	0x400200b8
 8003790:	40020410 	.word	0x40020410
 8003794:	40020428 	.word	0x40020428
 8003798:	40020440 	.word	0x40020440
 800379c:	40020458 	.word	0x40020458
 80037a0:	40020470 	.word	0x40020470
 80037a4:	40020488 	.word	0x40020488
 80037a8:	400204a0 	.word	0x400204a0
 80037ac:	400204b8 	.word	0x400204b8
 80037b0:	58025408 	.word	0x58025408
 80037b4:	5802541c 	.word	0x5802541c
 80037b8:	58025430 	.word	0x58025430
 80037bc:	58025444 	.word	0x58025444
 80037c0:	58025458 	.word	0x58025458
 80037c4:	5802546c 	.word	0x5802546c
 80037c8:	58025480 	.word	0x58025480
 80037cc:	58025494 	.word	0x58025494

080037d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e226      	b.n	8003c3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_DMA_Start_IT+0x2a>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e21f      	b.n	8003c3a <HAL_DMA_Start_IT+0x46a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	f040 820a 	bne.w	8003c24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a68      	ldr	r2, [pc, #416]	; (80039c4 <HAL_DMA_Start_IT+0x1f4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04a      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a66      	ldr	r2, [pc, #408]	; (80039c8 <HAL_DMA_Start_IT+0x1f8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a65      	ldr	r2, [pc, #404]	; (80039cc <HAL_DMA_Start_IT+0x1fc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d040      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_DMA_Start_IT+0x200>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a62      	ldr	r2, [pc, #392]	; (80039d4 <HAL_DMA_Start_IT+0x204>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d036      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a60      	ldr	r2, [pc, #384]	; (80039d8 <HAL_DMA_Start_IT+0x208>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5f      	ldr	r2, [pc, #380]	; (80039dc <HAL_DMA_Start_IT+0x20c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02c      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a5d      	ldr	r2, [pc, #372]	; (80039e0 <HAL_DMA_Start_IT+0x210>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d027      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a5c      	ldr	r2, [pc, #368]	; (80039e4 <HAL_DMA_Start_IT+0x214>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a5a      	ldr	r2, [pc, #360]	; (80039e8 <HAL_DMA_Start_IT+0x218>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a59      	ldr	r2, [pc, #356]	; (80039ec <HAL_DMA_Start_IT+0x21c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <HAL_DMA_Start_IT+0x220>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_DMA_Start_IT+0x224>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a54      	ldr	r2, [pc, #336]	; (80039f8 <HAL_DMA_Start_IT+0x228>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a53      	ldr	r2, [pc, #332]	; (80039fc <HAL_DMA_Start_IT+0x22c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_Start_IT+0xee>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_DMA_Start_IT+0x230>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <HAL_DMA_Start_IT+0x100>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e007      	b.n	80038e0 <HAL_DMA_Start_IT+0x110>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f001 fb4a 	bl	8004f80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <HAL_DMA_Start_IT+0x1f4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a33      	ldr	r2, [pc, #204]	; (80039c8 <HAL_DMA_Start_IT+0x1f8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a31      	ldr	r2, [pc, #196]	; (80039cc <HAL_DMA_Start_IT+0x1fc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_DMA_Start_IT+0x200>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <HAL_DMA_Start_IT+0x204>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <HAL_DMA_Start_IT+0x208>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <HAL_DMA_Start_IT+0x20c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <HAL_DMA_Start_IT+0x210>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <HAL_DMA_Start_IT+0x214>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a27      	ldr	r2, [pc, #156]	; (80039e8 <HAL_DMA_Start_IT+0x218>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_DMA_Start_IT+0x21c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <HAL_DMA_Start_IT+0x220>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_DMA_Start_IT+0x224>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a21      	ldr	r2, [pc, #132]	; (80039f8 <HAL_DMA_Start_IT+0x228>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <HAL_DMA_Start_IT+0x22c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_DMA_Start_IT+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <HAL_DMA_Start_IT+0x230>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_DMA_Start_IT+0x1c0>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_DMA_Start_IT+0x1c2>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d036      	beq.n	8003a04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 021e 	bic.w	r2, r3, #30
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0216 	orr.w	r2, r2, #22
 80039a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03e      	beq.n	8003a30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0208 	orr.w	r2, r2, #8
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e035      	b.n	8003a30 <HAL_DMA_Start_IT+0x260>
 80039c4:	40020010 	.word	0x40020010
 80039c8:	40020028 	.word	0x40020028
 80039cc:	40020040 	.word	0x40020040
 80039d0:	40020058 	.word	0x40020058
 80039d4:	40020070 	.word	0x40020070
 80039d8:	40020088 	.word	0x40020088
 80039dc:	400200a0 	.word	0x400200a0
 80039e0:	400200b8 	.word	0x400200b8
 80039e4:	40020410 	.word	0x40020410
 80039e8:	40020428 	.word	0x40020428
 80039ec:	40020440 	.word	0x40020440
 80039f0:	40020458 	.word	0x40020458
 80039f4:	40020470 	.word	0x40020470
 80039f8:	40020488 	.word	0x40020488
 80039fc:	400204a0 	.word	0x400204a0
 8003a00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 020e 	bic.w	r2, r3, #14
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 020a 	orr.w	r2, r2, #10
 8003a16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0204 	orr.w	r2, r2, #4
 8003a2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a83      	ldr	r2, [pc, #524]	; (8003c44 <HAL_DMA_Start_IT+0x474>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d072      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a82      	ldr	r2, [pc, #520]	; (8003c48 <HAL_DMA_Start_IT+0x478>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d06d      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a80      	ldr	r2, [pc, #512]	; (8003c4c <HAL_DMA_Start_IT+0x47c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d068      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7f      	ldr	r2, [pc, #508]	; (8003c50 <HAL_DMA_Start_IT+0x480>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d063      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7d      	ldr	r2, [pc, #500]	; (8003c54 <HAL_DMA_Start_IT+0x484>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d05e      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7c      	ldr	r2, [pc, #496]	; (8003c58 <HAL_DMA_Start_IT+0x488>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d059      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <HAL_DMA_Start_IT+0x48c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d054      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <HAL_DMA_Start_IT+0x490>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d04f      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a77      	ldr	r2, [pc, #476]	; (8003c64 <HAL_DMA_Start_IT+0x494>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d04a      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a76      	ldr	r2, [pc, #472]	; (8003c68 <HAL_DMA_Start_IT+0x498>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d045      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a74      	ldr	r2, [pc, #464]	; (8003c6c <HAL_DMA_Start_IT+0x49c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d040      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_DMA_Start_IT+0x4a0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d03b      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a71      	ldr	r2, [pc, #452]	; (8003c74 <HAL_DMA_Start_IT+0x4a4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d036      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a70      	ldr	r2, [pc, #448]	; (8003c78 <HAL_DMA_Start_IT+0x4a8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d031      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <HAL_DMA_Start_IT+0x4ac>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02c      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6d      	ldr	r2, [pc, #436]	; (8003c80 <HAL_DMA_Start_IT+0x4b0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d027      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a6b      	ldr	r2, [pc, #428]	; (8003c84 <HAL_DMA_Start_IT+0x4b4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a6a      	ldr	r2, [pc, #424]	; (8003c88 <HAL_DMA_Start_IT+0x4b8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01d      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a68      	ldr	r2, [pc, #416]	; (8003c8c <HAL_DMA_Start_IT+0x4bc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_DMA_Start_IT+0x4c0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a65      	ldr	r2, [pc, #404]	; (8003c94 <HAL_DMA_Start_IT+0x4c4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a64      	ldr	r2, [pc, #400]	; (8003c98 <HAL_DMA_Start_IT+0x4c8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a62      	ldr	r2, [pc, #392]	; (8003c9c <HAL_DMA_Start_IT+0x4cc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_Start_IT+0x350>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <HAL_DMA_Start_IT+0x4d0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_DMA_Start_IT+0x354>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_DMA_Start_IT+0x356>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01a      	beq.n	8003b60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <HAL_DMA_Start_IT+0x474>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04a      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a36      	ldr	r2, [pc, #216]	; (8003c48 <HAL_DMA_Start_IT+0x478>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d045      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <HAL_DMA_Start_IT+0x47c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a33      	ldr	r2, [pc, #204]	; (8003c50 <HAL_DMA_Start_IT+0x480>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <HAL_DMA_Start_IT+0x484>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <HAL_DMA_Start_IT+0x488>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d031      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2e      	ldr	r2, [pc, #184]	; (8003c5c <HAL_DMA_Start_IT+0x48c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <HAL_DMA_Start_IT+0x490>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <HAL_DMA_Start_IT+0x494>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_DMA_Start_IT+0x498>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <HAL_DMA_Start_IT+0x49c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <HAL_DMA_Start_IT+0x4a0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_DMA_Start_IT+0x4a4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <HAL_DMA_Start_IT+0x4a8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_DMA_Start_IT+0x4ac>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_Start_IT+0x430>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_DMA_Start_IT+0x4b0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <HAL_DMA_Start_IT+0x442>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e012      	b.n	8003c38 <HAL_DMA_Start_IT+0x468>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e009      	b.n	8003c38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40020010 	.word	0x40020010
 8003c48:	40020028 	.word	0x40020028
 8003c4c:	40020040 	.word	0x40020040
 8003c50:	40020058 	.word	0x40020058
 8003c54:	40020070 	.word	0x40020070
 8003c58:	40020088 	.word	0x40020088
 8003c5c:	400200a0 	.word	0x400200a0
 8003c60:	400200b8 	.word	0x400200b8
 8003c64:	40020410 	.word	0x40020410
 8003c68:	40020428 	.word	0x40020428
 8003c6c:	40020440 	.word	0x40020440
 8003c70:	40020458 	.word	0x40020458
 8003c74:	40020470 	.word	0x40020470
 8003c78:	40020488 	.word	0x40020488
 8003c7c:	400204a0 	.word	0x400204a0
 8003c80:	400204b8 	.word	0x400204b8
 8003c84:	58025408 	.word	0x58025408
 8003c88:	5802541c 	.word	0x5802541c
 8003c8c:	58025430 	.word	0x58025430
 8003c90:	58025444 	.word	0x58025444
 8003c94:	58025458 	.word	0x58025458
 8003c98:	5802546c 	.word	0x5802546c
 8003c9c:	58025480 	.word	0x58025480
 8003ca0:	58025494 	.word	0x58025494

08003ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e205      	b.n	80040c2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d004      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e1fa      	b.n	80040c2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a8c      	ldr	r2, [pc, #560]	; (8003f04 <HAL_DMA_Abort_IT+0x260>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d04a      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a8b      	ldr	r2, [pc, #556]	; (8003f08 <HAL_DMA_Abort_IT+0x264>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d045      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <HAL_DMA_Abort_IT+0x268>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a88      	ldr	r2, [pc, #544]	; (8003f10 <HAL_DMA_Abort_IT+0x26c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a86      	ldr	r2, [pc, #536]	; (8003f14 <HAL_DMA_Abort_IT+0x270>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d036      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a85      	ldr	r2, [pc, #532]	; (8003f18 <HAL_DMA_Abort_IT+0x274>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d031      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a83      	ldr	r2, [pc, #524]	; (8003f1c <HAL_DMA_Abort_IT+0x278>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02c      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a82      	ldr	r2, [pc, #520]	; (8003f20 <HAL_DMA_Abort_IT+0x27c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d027      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a80      	ldr	r2, [pc, #512]	; (8003f24 <HAL_DMA_Abort_IT+0x280>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a7f      	ldr	r2, [pc, #508]	; (8003f28 <HAL_DMA_Abort_IT+0x284>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01d      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7d      	ldr	r2, [pc, #500]	; (8003f2c <HAL_DMA_Abort_IT+0x288>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7c      	ldr	r2, [pc, #496]	; (8003f30 <HAL_DMA_Abort_IT+0x28c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7a      	ldr	r2, [pc, #488]	; (8003f34 <HAL_DMA_Abort_IT+0x290>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a79      	ldr	r2, [pc, #484]	; (8003f38 <HAL_DMA_Abort_IT+0x294>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a77      	ldr	r2, [pc, #476]	; (8003f3c <HAL_DMA_Abort_IT+0x298>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_Abort_IT+0xc8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a76      	ldr	r2, [pc, #472]	; (8003f40 <HAL_DMA_Abort_IT+0x29c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_DMA_Abort_IT+0xcc>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_DMA_Abort_IT+0xce>
 8003d70:	2300      	movs	r3, #0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d065      	beq.n	8003e42 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a60      	ldr	r2, [pc, #384]	; (8003f04 <HAL_DMA_Abort_IT+0x260>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04a      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5e      	ldr	r2, [pc, #376]	; (8003f08 <HAL_DMA_Abort_IT+0x264>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d045      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5d      	ldr	r2, [pc, #372]	; (8003f0c <HAL_DMA_Abort_IT+0x268>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d040      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5b      	ldr	r2, [pc, #364]	; (8003f10 <HAL_DMA_Abort_IT+0x26c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d03b      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5a      	ldr	r2, [pc, #360]	; (8003f14 <HAL_DMA_Abort_IT+0x270>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d036      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a58      	ldr	r2, [pc, #352]	; (8003f18 <HAL_DMA_Abort_IT+0x274>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d031      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a57      	ldr	r2, [pc, #348]	; (8003f1c <HAL_DMA_Abort_IT+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d02c      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a55      	ldr	r2, [pc, #340]	; (8003f20 <HAL_DMA_Abort_IT+0x27c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d027      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a54      	ldr	r2, [pc, #336]	; (8003f24 <HAL_DMA_Abort_IT+0x280>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a52      	ldr	r2, [pc, #328]	; (8003f28 <HAL_DMA_Abort_IT+0x284>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a51      	ldr	r2, [pc, #324]	; (8003f2c <HAL_DMA_Abort_IT+0x288>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4f      	ldr	r2, [pc, #316]	; (8003f30 <HAL_DMA_Abort_IT+0x28c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4e      	ldr	r2, [pc, #312]	; (8003f34 <HAL_DMA_Abort_IT+0x290>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a4c      	ldr	r2, [pc, #304]	; (8003f38 <HAL_DMA_Abort_IT+0x294>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_DMA_Abort_IT+0x298>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_DMA_Abort_IT+0x17a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a49      	ldr	r2, [pc, #292]	; (8003f40 <HAL_DMA_Abort_IT+0x29c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <HAL_DMA_Abort_IT+0x18c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e147      	b.n	80040c0 <HAL_DMA_Abort_IT+0x41c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e13e      	b.n	80040c0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 020e 	bic.w	r2, r2, #14
 8003e50:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_DMA_Abort_IT+0x260>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04a      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_DMA_Abort_IT+0x264>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d045      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_DMA_Abort_IT+0x268>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d040      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_DMA_Abort_IT+0x26c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03b      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <HAL_DMA_Abort_IT+0x270>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d036      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_DMA_Abort_IT+0x274>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_DMA_Abort_IT+0x278>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d02c      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_DMA_Abort_IT+0x27c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d027      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_DMA_Abort_IT+0x280>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <HAL_DMA_Abort_IT+0x284>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <HAL_DMA_Abort_IT+0x288>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <HAL_DMA_Abort_IT+0x28c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <HAL_DMA_Abort_IT+0x290>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <HAL_DMA_Abort_IT+0x294>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <HAL_DMA_Abort_IT+0x298>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x24e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <HAL_DMA_Abort_IT+0x29c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d128      	bne.n	8003f44 <HAL_DMA_Abort_IT+0x2a0>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e027      	b.n	8003f54 <HAL_DMA_Abort_IT+0x2b0>
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020028 	.word	0x40020028
 8003f0c:	40020040 	.word	0x40020040
 8003f10:	40020058 	.word	0x40020058
 8003f14:	40020070 	.word	0x40020070
 8003f18:	40020088 	.word	0x40020088
 8003f1c:	400200a0 	.word	0x400200a0
 8003f20:	400200b8 	.word	0x400200b8
 8003f24:	40020410 	.word	0x40020410
 8003f28:	40020428 	.word	0x40020428
 8003f2c:	40020440 	.word	0x40020440
 8003f30:	40020458 	.word	0x40020458
 8003f34:	40020470 	.word	0x40020470
 8003f38:	40020488 	.word	0x40020488
 8003f3c:	400204a0 	.word	0x400204a0
 8003f40:	400204b8 	.word	0x400204b8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <HAL_DMA_Abort_IT+0x428>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d072      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5b      	ldr	r2, [pc, #364]	; (80040d0 <HAL_DMA_Abort_IT+0x42c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d06d      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a59      	ldr	r2, [pc, #356]	; (80040d4 <HAL_DMA_Abort_IT+0x430>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d068      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a58      	ldr	r2, [pc, #352]	; (80040d8 <HAL_DMA_Abort_IT+0x434>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d063      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_DMA_Abort_IT+0x438>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d05e      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a55      	ldr	r2, [pc, #340]	; (80040e0 <HAL_DMA_Abort_IT+0x43c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d059      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <HAL_DMA_Abort_IT+0x440>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d054      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_DMA_Abort_IT+0x444>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d04f      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_DMA_Abort_IT+0x448>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4f      	ldr	r2, [pc, #316]	; (80040f0 <HAL_DMA_Abort_IT+0x44c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a4d      	ldr	r2, [pc, #308]	; (80040f4 <HAL_DMA_Abort_IT+0x450>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4c      	ldr	r2, [pc, #304]	; (80040f8 <HAL_DMA_Abort_IT+0x454>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_DMA_Abort_IT+0x458>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a49      	ldr	r2, [pc, #292]	; (8004100 <HAL_DMA_Abort_IT+0x45c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a47      	ldr	r2, [pc, #284]	; (8004104 <HAL_DMA_Abort_IT+0x460>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a46      	ldr	r2, [pc, #280]	; (8004108 <HAL_DMA_Abort_IT+0x464>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a44      	ldr	r2, [pc, #272]	; (800410c <HAL_DMA_Abort_IT+0x468>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a43      	ldr	r2, [pc, #268]	; (8004110 <HAL_DMA_Abort_IT+0x46c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a41      	ldr	r2, [pc, #260]	; (8004114 <HAL_DMA_Abort_IT+0x470>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a40      	ldr	r2, [pc, #256]	; (8004118 <HAL_DMA_Abort_IT+0x474>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3e      	ldr	r2, [pc, #248]	; (800411c <HAL_DMA_Abort_IT+0x478>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3d      	ldr	r2, [pc, #244]	; (8004120 <HAL_DMA_Abort_IT+0x47c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3b      	ldr	r2, [pc, #236]	; (8004124 <HAL_DMA_Abort_IT+0x480>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_DMA_Abort_IT+0x3a0>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3a      	ldr	r2, [pc, #232]	; (8004128 <HAL_DMA_Abort_IT+0x484>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Abort_IT+0x3a4>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_DMA_Abort_IT+0x3a6>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800407c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004094:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800409e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40020010 	.word	0x40020010
 80040d0:	40020028 	.word	0x40020028
 80040d4:	40020040 	.word	0x40020040
 80040d8:	40020058 	.word	0x40020058
 80040dc:	40020070 	.word	0x40020070
 80040e0:	40020088 	.word	0x40020088
 80040e4:	400200a0 	.word	0x400200a0
 80040e8:	400200b8 	.word	0x400200b8
 80040ec:	40020410 	.word	0x40020410
 80040f0:	40020428 	.word	0x40020428
 80040f4:	40020440 	.word	0x40020440
 80040f8:	40020458 	.word	0x40020458
 80040fc:	40020470 	.word	0x40020470
 8004100:	40020488 	.word	0x40020488
 8004104:	400204a0 	.word	0x400204a0
 8004108:	400204b8 	.word	0x400204b8
 800410c:	58025408 	.word	0x58025408
 8004110:	5802541c 	.word	0x5802541c
 8004114:	58025430 	.word	0x58025430
 8004118:	58025444 	.word	0x58025444
 800411c:	58025458 	.word	0x58025458
 8004120:	5802546c 	.word	0x5802546c
 8004124:	58025480 	.word	0x58025480
 8004128:	58025494 	.word	0x58025494

0800412c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004138:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_DMA_IRQHandler+0x1ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a67      	ldr	r2, [pc, #412]	; (80042dc <HAL_DMA_IRQHandler+0x1b0>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0a9b      	lsrs	r3, r3, #10
 8004144:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5f      	ldr	r2, [pc, #380]	; (80042e0 <HAL_DMA_IRQHandler+0x1b4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d04a      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5d      	ldr	r2, [pc, #372]	; (80042e4 <HAL_DMA_IRQHandler+0x1b8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d045      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5c      	ldr	r2, [pc, #368]	; (80042e8 <HAL_DMA_IRQHandler+0x1bc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5a      	ldr	r2, [pc, #360]	; (80042ec <HAL_DMA_IRQHandler+0x1c0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d03b      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a59      	ldr	r2, [pc, #356]	; (80042f0 <HAL_DMA_IRQHandler+0x1c4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d036      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a57      	ldr	r2, [pc, #348]	; (80042f4 <HAL_DMA_IRQHandler+0x1c8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d031      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <HAL_DMA_IRQHandler+0x1cc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d02c      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a54      	ldr	r2, [pc, #336]	; (80042fc <HAL_DMA_IRQHandler+0x1d0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d027      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a53      	ldr	r2, [pc, #332]	; (8004300 <HAL_DMA_IRQHandler+0x1d4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a51      	ldr	r2, [pc, #324]	; (8004304 <HAL_DMA_IRQHandler+0x1d8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01d      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a50      	ldr	r2, [pc, #320]	; (8004308 <HAL_DMA_IRQHandler+0x1dc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a4e      	ldr	r2, [pc, #312]	; (800430c <HAL_DMA_IRQHandler+0x1e0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4d      	ldr	r2, [pc, #308]	; (8004310 <HAL_DMA_IRQHandler+0x1e4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a4b      	ldr	r2, [pc, #300]	; (8004314 <HAL_DMA_IRQHandler+0x1e8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <HAL_DMA_IRQHandler+0x1ec>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_DMA_IRQHandler+0xd2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a48      	ldr	r2, [pc, #288]	; (800431c <HAL_DMA_IRQHandler+0x1f0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_DMA_IRQHandler+0xd6>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_DMA_IRQHandler+0xd8>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 842b 	beq.w	8004a60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2208      	movs	r2, #8
 8004214:	409a      	lsls	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80a2 	beq.w	8004364 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_DMA_IRQHandler+0x1b4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d04a      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_DMA_IRQHandler+0x1b8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d045      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	; (80042e8 <HAL_DMA_IRQHandler+0x1bc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d040      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <HAL_DMA_IRQHandler+0x1c0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d03b      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_DMA_IRQHandler+0x1c4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d036      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <HAL_DMA_IRQHandler+0x1c8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d031      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	; (80042f8 <HAL_DMA_IRQHandler+0x1cc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02c      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_DMA_IRQHandler+0x1d0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_DMA_IRQHandler+0x1d4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_DMA_IRQHandler+0x1d8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d01d      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_DMA_IRQHandler+0x1dc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_DMA_IRQHandler+0x1e0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <HAL_DMA_IRQHandler+0x1e4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_DMA_IRQHandler+0x1e8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <HAL_DMA_IRQHandler+0x1ec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x194>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_DMA_IRQHandler+0x1f0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d12f      	bne.n	8004320 <HAL_DMA_IRQHandler+0x1f4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e02e      	b.n	8004334 <HAL_DMA_IRQHandler+0x208>
 80042d6:	bf00      	nop
 80042d8:	24000018 	.word	0x24000018
 80042dc:	1b4e81b5 	.word	0x1b4e81b5
 80042e0:	40020010 	.word	0x40020010
 80042e4:	40020028 	.word	0x40020028
 80042e8:	40020040 	.word	0x40020040
 80042ec:	40020058 	.word	0x40020058
 80042f0:	40020070 	.word	0x40020070
 80042f4:	40020088 	.word	0x40020088
 80042f8:	400200a0 	.word	0x400200a0
 80042fc:	400200b8 	.word	0x400200b8
 8004300:	40020410 	.word	0x40020410
 8004304:	40020428 	.word	0x40020428
 8004308:	40020440 	.word	0x40020440
 800430c:	40020458 	.word	0x40020458
 8004310:	40020470 	.word	0x40020470
 8004314:	40020488 	.word	0x40020488
 8004318:	400204a0 	.word	0x400204a0
 800431c:	400204b8 	.word	0x400204b8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d015      	beq.n	8004364 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2208      	movs	r2, #8
 8004352:	409a      	lsls	r2, r3
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d06e      	beq.n	8004458 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a69      	ldr	r2, [pc, #420]	; (8004524 <HAL_DMA_IRQHandler+0x3f8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d04a      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_DMA_IRQHandler+0x3fc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d045      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a66      	ldr	r2, [pc, #408]	; (800452c <HAL_DMA_IRQHandler+0x400>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d040      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a64      	ldr	r2, [pc, #400]	; (8004530 <HAL_DMA_IRQHandler+0x404>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d03b      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_DMA_IRQHandler+0x408>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d036      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_DMA_IRQHandler+0x40c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d031      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_DMA_IRQHandler+0x410>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d02c      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5e      	ldr	r2, [pc, #376]	; (8004540 <HAL_DMA_IRQHandler+0x414>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d027      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5d      	ldr	r2, [pc, #372]	; (8004544 <HAL_DMA_IRQHandler+0x418>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5b      	ldr	r2, [pc, #364]	; (8004548 <HAL_DMA_IRQHandler+0x41c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01d      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5a      	ldr	r2, [pc, #360]	; (800454c <HAL_DMA_IRQHandler+0x420>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a58      	ldr	r2, [pc, #352]	; (8004550 <HAL_DMA_IRQHandler+0x424>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a57      	ldr	r2, [pc, #348]	; (8004554 <HAL_DMA_IRQHandler+0x428>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a55      	ldr	r2, [pc, #340]	; (8004558 <HAL_DMA_IRQHandler+0x42c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_DMA_IRQHandler+0x430>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_DMA_IRQHandler+0x2ee>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a52      	ldr	r2, [pc, #328]	; (8004560 <HAL_DMA_IRQHandler+0x434>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10a      	bne.n	8004430 <HAL_DMA_IRQHandler+0x304>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e003      	b.n	8004438 <HAL_DMA_IRQHandler+0x30c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2201      	movs	r2, #1
 8004446:	409a      	lsls	r2, r3
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	f043 0202 	orr.w	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2204      	movs	r2, #4
 8004462:	409a      	lsls	r2, r3
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 808f 	beq.w	800458c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2c      	ldr	r2, [pc, #176]	; (8004524 <HAL_DMA_IRQHandler+0x3f8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <HAL_DMA_IRQHandler+0x3fc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a29      	ldr	r2, [pc, #164]	; (800452c <HAL_DMA_IRQHandler+0x400>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a27      	ldr	r2, [pc, #156]	; (8004530 <HAL_DMA_IRQHandler+0x404>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a26      	ldr	r2, [pc, #152]	; (8004534 <HAL_DMA_IRQHandler+0x408>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a24      	ldr	r2, [pc, #144]	; (8004538 <HAL_DMA_IRQHandler+0x40c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a23      	ldr	r2, [pc, #140]	; (800453c <HAL_DMA_IRQHandler+0x410>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <HAL_DMA_IRQHandler+0x414>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a20      	ldr	r2, [pc, #128]	; (8004544 <HAL_DMA_IRQHandler+0x418>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_DMA_IRQHandler+0x41c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_DMA_IRQHandler+0x420>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_DMA_IRQHandler+0x424>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <HAL_DMA_IRQHandler+0x428>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_DMA_IRQHandler+0x42c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <HAL_DMA_IRQHandler+0x430>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_DMA_IRQHandler+0x3e2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <HAL_DMA_IRQHandler+0x434>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d12a      	bne.n	8004564 <HAL_DMA_IRQHandler+0x438>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e023      	b.n	800456c <HAL_DMA_IRQHandler+0x440>
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00d      	beq.n	800458c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	2204      	movs	r2, #4
 800457a:	409a      	lsls	r2, r3
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2210      	movs	r2, #16
 8004596:	409a      	lsls	r2, r3
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a6 	beq.w	80046ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a85      	ldr	r2, [pc, #532]	; (80047bc <HAL_DMA_IRQHandler+0x690>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04a      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a83      	ldr	r2, [pc, #524]	; (80047c0 <HAL_DMA_IRQHandler+0x694>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d045      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a82      	ldr	r2, [pc, #520]	; (80047c4 <HAL_DMA_IRQHandler+0x698>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d040      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a80      	ldr	r2, [pc, #512]	; (80047c8 <HAL_DMA_IRQHandler+0x69c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7f      	ldr	r2, [pc, #508]	; (80047cc <HAL_DMA_IRQHandler+0x6a0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d036      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a7d      	ldr	r2, [pc, #500]	; (80047d0 <HAL_DMA_IRQHandler+0x6a4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7c      	ldr	r2, [pc, #496]	; (80047d4 <HAL_DMA_IRQHandler+0x6a8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d02c      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a7a      	ldr	r2, [pc, #488]	; (80047d8 <HAL_DMA_IRQHandler+0x6ac>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d027      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a79      	ldr	r2, [pc, #484]	; (80047dc <HAL_DMA_IRQHandler+0x6b0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a77      	ldr	r2, [pc, #476]	; (80047e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a76      	ldr	r2, [pc, #472]	; (80047e4 <HAL_DMA_IRQHandler+0x6b8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a74      	ldr	r2, [pc, #464]	; (80047e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a73      	ldr	r2, [pc, #460]	; (80047ec <HAL_DMA_IRQHandler+0x6c0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a71      	ldr	r2, [pc, #452]	; (80047f0 <HAL_DMA_IRQHandler+0x6c4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a70      	ldr	r2, [pc, #448]	; (80047f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_DMA_IRQHandler+0x516>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6e      	ldr	r2, [pc, #440]	; (80047f8 <HAL_DMA_IRQHandler+0x6cc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10a      	bne.n	8004658 <HAL_DMA_IRQHandler+0x52c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e009      	b.n	800466c <HAL_DMA_IRQHandler+0x540>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf14      	ite	ne
 8004666:	2301      	movne	r3, #1
 8004668:	2300      	moveq	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d03e      	beq.n	80046ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2210      	movs	r2, #16
 800467a:	409a      	lsls	r2, r3
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d018      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d108      	bne.n	80046ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d024      	beq.n	80046ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
 80046ac:	e01f      	b.n	80046ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e016      	b.n	80046ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d107      	bne.n	80046de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0208 	bic.w	r2, r2, #8
 80046dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2220      	movs	r2, #32
 80046f8:	409a      	lsls	r2, r3
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8110 	beq.w	8004924 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <HAL_DMA_IRQHandler+0x690>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d04a      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <HAL_DMA_IRQHandler+0x694>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d045      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <HAL_DMA_IRQHandler+0x698>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d040      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <HAL_DMA_IRQHandler+0x69c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d03b      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a26      	ldr	r2, [pc, #152]	; (80047cc <HAL_DMA_IRQHandler+0x6a0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d036      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <HAL_DMA_IRQHandler+0x6a4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d031      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <HAL_DMA_IRQHandler+0x6a8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d02c      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a22      	ldr	r2, [pc, #136]	; (80047d8 <HAL_DMA_IRQHandler+0x6ac>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d027      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <HAL_DMA_IRQHandler+0x6b0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d01d      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_DMA_IRQHandler+0x6b8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_DMA_IRQHandler+0x6c0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <HAL_DMA_IRQHandler+0x6c4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x678>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_DMA_IRQHandler+0x6cc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d12b      	bne.n	80047fc <HAL_DMA_IRQHandler+0x6d0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	e02a      	b.n	8004810 <HAL_DMA_IRQHandler+0x6e4>
 80047ba:	bf00      	nop
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8087 	beq.w	8004924 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2220      	movs	r2, #32
 8004820:	409a      	lsls	r2, r3
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b04      	cmp	r3, #4
 8004830:	d139      	bne.n	80048a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0216 	bic.w	r2, r2, #22
 8004840:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004850:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <HAL_DMA_IRQHandler+0x736>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0208 	bic.w	r2, r2, #8
 8004870:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	223f      	movs	r2, #63	; 0x3f
 800487c:	409a      	lsls	r2, r3
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 834a 	beq.w	8004f30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
          }
          return;
 80048a4:	e344      	b.n	8004f30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d018      	beq.n	80048e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d02c      	beq.n	8004924 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
 80048d2:	e027      	b.n	8004924 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d023      	beq.n	8004924 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
 80048e4:	e01e      	b.n	8004924 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0210 	bic.w	r2, r2, #16
 8004902:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8306 	beq.w	8004f3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8088 	beq.w	8004a4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2204      	movs	r2, #4
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_DMA_IRQHandler+0xa08>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04a      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a79      	ldr	r2, [pc, #484]	; (8004b38 <HAL_DMA_IRQHandler+0xa0c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d045      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a77      	ldr	r2, [pc, #476]	; (8004b3c <HAL_DMA_IRQHandler+0xa10>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d040      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a76      	ldr	r2, [pc, #472]	; (8004b40 <HAL_DMA_IRQHandler+0xa14>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d03b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a74      	ldr	r2, [pc, #464]	; (8004b44 <HAL_DMA_IRQHandler+0xa18>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d036      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a73      	ldr	r2, [pc, #460]	; (8004b48 <HAL_DMA_IRQHandler+0xa1c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d031      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a71      	ldr	r2, [pc, #452]	; (8004b4c <HAL_DMA_IRQHandler+0xa20>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02c      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a70      	ldr	r2, [pc, #448]	; (8004b50 <HAL_DMA_IRQHandler+0xa24>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d027      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a6e      	ldr	r2, [pc, #440]	; (8004b54 <HAL_DMA_IRQHandler+0xa28>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6d      	ldr	r2, [pc, #436]	; (8004b58 <HAL_DMA_IRQHandler+0xa2c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d01d      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6b      	ldr	r2, [pc, #428]	; (8004b5c <HAL_DMA_IRQHandler+0xa30>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6a      	ldr	r2, [pc, #424]	; (8004b60 <HAL_DMA_IRQHandler+0xa34>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a68      	ldr	r2, [pc, #416]	; (8004b64 <HAL_DMA_IRQHandler+0xa38>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a67      	ldr	r2, [pc, #412]	; (8004b68 <HAL_DMA_IRQHandler+0xa3c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a65      	ldr	r2, [pc, #404]	; (8004b6c <HAL_DMA_IRQHandler+0xa40>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x8b8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a64      	ldr	r2, [pc, #400]	; (8004b70 <HAL_DMA_IRQHandler+0xa44>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d108      	bne.n	80049f6 <HAL_DMA_IRQHandler+0x8ca>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e007      	b.n	8004a06 <HAL_DMA_IRQHandler+0x8da>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d307      	bcc.n	8004a22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f2      	bne.n	8004a06 <HAL_DMA_IRQHandler+0x8da>
 8004a20:	e000      	b.n	8004a24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a22:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a42:	e003      	b.n	8004a4c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8272 	beq.w	8004f3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
 8004a5e:	e26c      	b.n	8004f3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a43      	ldr	r2, [pc, #268]	; (8004b74 <HAL_DMA_IRQHandler+0xa48>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a42      	ldr	r2, [pc, #264]	; (8004b78 <HAL_DMA_IRQHandler+0xa4c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a40      	ldr	r2, [pc, #256]	; (8004b7c <HAL_DMA_IRQHandler+0xa50>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3f      	ldr	r2, [pc, #252]	; (8004b80 <HAL_DMA_IRQHandler+0xa54>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3d      	ldr	r2, [pc, #244]	; (8004b84 <HAL_DMA_IRQHandler+0xa58>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3c      	ldr	r2, [pc, #240]	; (8004b88 <HAL_DMA_IRQHandler+0xa5c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <HAL_DMA_IRQHandler+0xa60>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x984>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a39      	ldr	r2, [pc, #228]	; (8004b90 <HAL_DMA_IRQHandler+0xa64>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x988>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_DMA_IRQHandler+0x98a>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 823f 	beq.w	8004f3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2204      	movs	r2, #4
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80cd 	beq.w	8004c74 <HAL_DMA_IRQHandler+0xb48>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80c7 	beq.w	8004c74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	2204      	movs	r2, #4
 8004af0:	409a      	lsls	r2, r3
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d049      	beq.n	8004b94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8210 	beq.w	8004f34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b1c:	e20a      	b.n	8004f34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8206 	beq.w	8004f34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b30:	e200      	b.n	8004f34 <HAL_DMA_IRQHandler+0xe08>
 8004b32:	bf00      	nop
 8004b34:	40020010 	.word	0x40020010
 8004b38:	40020028 	.word	0x40020028
 8004b3c:	40020040 	.word	0x40020040
 8004b40:	40020058 	.word	0x40020058
 8004b44:	40020070 	.word	0x40020070
 8004b48:	40020088 	.word	0x40020088
 8004b4c:	400200a0 	.word	0x400200a0
 8004b50:	400200b8 	.word	0x400200b8
 8004b54:	40020410 	.word	0x40020410
 8004b58:	40020428 	.word	0x40020428
 8004b5c:	40020440 	.word	0x40020440
 8004b60:	40020458 	.word	0x40020458
 8004b64:	40020470 	.word	0x40020470
 8004b68:	40020488 	.word	0x40020488
 8004b6c:	400204a0 	.word	0x400204a0
 8004b70:	400204b8 	.word	0x400204b8
 8004b74:	58025408 	.word	0x58025408
 8004b78:	5802541c 	.word	0x5802541c
 8004b7c:	58025430 	.word	0x58025430
 8004b80:	58025444 	.word	0x58025444
 8004b84:	58025458 	.word	0x58025458
 8004b88:	5802546c 	.word	0x5802546c
 8004b8c:	58025480 	.word	0x58025480
 8004b90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d160      	bne.n	8004c60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a8c      	ldr	r2, [pc, #560]	; (8004dd4 <HAL_DMA_IRQHandler+0xca8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d04a      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a8a      	ldr	r2, [pc, #552]	; (8004dd8 <HAL_DMA_IRQHandler+0xcac>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d045      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a89      	ldr	r2, [pc, #548]	; (8004ddc <HAL_DMA_IRQHandler+0xcb0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d040      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a87      	ldr	r2, [pc, #540]	; (8004de0 <HAL_DMA_IRQHandler+0xcb4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d03b      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a86      	ldr	r2, [pc, #536]	; (8004de4 <HAL_DMA_IRQHandler+0xcb8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d036      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a84      	ldr	r2, [pc, #528]	; (8004de8 <HAL_DMA_IRQHandler+0xcbc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d031      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a83      	ldr	r2, [pc, #524]	; (8004dec <HAL_DMA_IRQHandler+0xcc0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d02c      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a81      	ldr	r2, [pc, #516]	; (8004df0 <HAL_DMA_IRQHandler+0xcc4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d027      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a80      	ldr	r2, [pc, #512]	; (8004df4 <HAL_DMA_IRQHandler+0xcc8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d022      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a7e      	ldr	r2, [pc, #504]	; (8004df8 <HAL_DMA_IRQHandler+0xccc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01d      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7d      	ldr	r2, [pc, #500]	; (8004dfc <HAL_DMA_IRQHandler+0xcd0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d018      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a7b      	ldr	r2, [pc, #492]	; (8004e00 <HAL_DMA_IRQHandler+0xcd4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7a      	ldr	r2, [pc, #488]	; (8004e04 <HAL_DMA_IRQHandler+0xcd8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00e      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a78      	ldr	r2, [pc, #480]	; (8004e08 <HAL_DMA_IRQHandler+0xcdc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a77      	ldr	r2, [pc, #476]	; (8004e0c <HAL_DMA_IRQHandler+0xce0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xb12>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a75      	ldr	r2, [pc, #468]	; (8004e10 <HAL_DMA_IRQHandler+0xce4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <HAL_DMA_IRQHandler+0xb24>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0208 	bic.w	r2, r2, #8
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e007      	b.n	8004c60 <HAL_DMA_IRQHandler+0xb34>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8165 	beq.w	8004f34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c72:	e15f      	b.n	8004f34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80c5 	beq.w	8004e14 <HAL_DMA_IRQHandler+0xce8>
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80bf 	beq.w	8004e14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d018      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 813a 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ccc:	e134      	b.n	8004f38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8130 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce0:	e12a      	b.n	8004f38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d168      	bne.n	8004dbe <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a38      	ldr	r2, [pc, #224]	; (8004dd4 <HAL_DMA_IRQHandler+0xca8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d04a      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a37      	ldr	r2, [pc, #220]	; (8004dd8 <HAL_DMA_IRQHandler+0xcac>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d045      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <HAL_DMA_IRQHandler+0xcb0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d040      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_DMA_IRQHandler+0xcb4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d03b      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a32      	ldr	r2, [pc, #200]	; (8004de4 <HAL_DMA_IRQHandler+0xcb8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d036      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <HAL_DMA_IRQHandler+0xcbc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d031      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <HAL_DMA_IRQHandler+0xcc0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2e      	ldr	r2, [pc, #184]	; (8004df0 <HAL_DMA_IRQHandler+0xcc4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d027      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <HAL_DMA_IRQHandler+0xcc8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_DMA_IRQHandler+0xccc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <HAL_DMA_IRQHandler+0xcd0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <HAL_DMA_IRQHandler+0xcd4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a26      	ldr	r2, [pc, #152]	; (8004e04 <HAL_DMA_IRQHandler+0xcd8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <HAL_DMA_IRQHandler+0xcdc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <HAL_DMA_IRQHandler+0xce0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_DMA_IRQHandler+0xc60>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <HAL_DMA_IRQHandler+0xce4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <HAL_DMA_IRQHandler+0xc72>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0214 	bic.w	r2, r2, #20
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e007      	b.n	8004dae <HAL_DMA_IRQHandler+0xc82>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 020a 	bic.w	r2, r2, #10
 8004dac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80b8 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd0:	e0b2      	b.n	8004f38 <HAL_DMA_IRQHandler+0xe0c>
 8004dd2:	bf00      	nop
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8088 	beq.w	8004f3a <HAL_DMA_IRQHandler+0xe0e>
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8082 	beq.w	8004f3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a41      	ldr	r2, [pc, #260]	; (8004f40 <HAL_DMA_IRQHandler+0xe14>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d04a      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <HAL_DMA_IRQHandler+0xe18>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d045      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	; (8004f48 <HAL_DMA_IRQHandler+0xe1c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d040      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3c      	ldr	r2, [pc, #240]	; (8004f4c <HAL_DMA_IRQHandler+0xe20>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d03b      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3b      	ldr	r2, [pc, #236]	; (8004f50 <HAL_DMA_IRQHandler+0xe24>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d036      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <HAL_DMA_IRQHandler+0xe28>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d031      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a38      	ldr	r2, [pc, #224]	; (8004f58 <HAL_DMA_IRQHandler+0xe2c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d02c      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a36      	ldr	r2, [pc, #216]	; (8004f5c <HAL_DMA_IRQHandler+0xe30>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d027      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a35      	ldr	r2, [pc, #212]	; (8004f60 <HAL_DMA_IRQHandler+0xe34>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d022      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a33      	ldr	r2, [pc, #204]	; (8004f64 <HAL_DMA_IRQHandler+0xe38>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01d      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a32      	ldr	r2, [pc, #200]	; (8004f68 <HAL_DMA_IRQHandler+0xe3c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d018      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	; (8004f6c <HAL_DMA_IRQHandler+0xe40>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <HAL_DMA_IRQHandler+0xe44>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <HAL_DMA_IRQHandler+0xe48>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	; (8004f78 <HAL_DMA_IRQHandler+0xe4c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0xdaa>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_DMA_IRQHandler+0xe50>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0xdbc>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 021c 	bic.w	r2, r2, #28
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e007      	b.n	8004ef8 <HAL_DMA_IRQHandler+0xdcc>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 020e 	bic.w	r2, r2, #14
 8004ef6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	2201      	movs	r2, #1
 8004f02:	409a      	lsls	r2, r3
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
 8004f2e:	e004      	b.n	8004f3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f30:	bf00      	nop
 8004f32:	e002      	b.n	8004f3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f3a:	3728      	adds	r7, #40	; 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40020010 	.word	0x40020010
 8004f44:	40020028 	.word	0x40020028
 8004f48:	40020040 	.word	0x40020040
 8004f4c:	40020058 	.word	0x40020058
 8004f50:	40020070 	.word	0x40020070
 8004f54:	40020088 	.word	0x40020088
 8004f58:	400200a0 	.word	0x400200a0
 8004f5c:	400200b8 	.word	0x400200b8
 8004f60:	40020410 	.word	0x40020410
 8004f64:	40020428 	.word	0x40020428
 8004f68:	40020440 	.word	0x40020440
 8004f6c:	40020458 	.word	0x40020458
 8004f70:	40020470 	.word	0x40020470
 8004f74:	40020488 	.word	0x40020488
 8004f78:	400204a0 	.word	0x400204a0
 8004f7c:	400204b8 	.word	0x400204b8

08004f80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a84      	ldr	r2, [pc, #528]	; (80051b0 <DMA_SetConfig+0x230>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d072      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a82      	ldr	r2, [pc, #520]	; (80051b4 <DMA_SetConfig+0x234>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d06d      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a81      	ldr	r2, [pc, #516]	; (80051b8 <DMA_SetConfig+0x238>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d068      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7f      	ldr	r2, [pc, #508]	; (80051bc <DMA_SetConfig+0x23c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d063      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7e      	ldr	r2, [pc, #504]	; (80051c0 <DMA_SetConfig+0x240>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d05e      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7c      	ldr	r2, [pc, #496]	; (80051c4 <DMA_SetConfig+0x244>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d059      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7b      	ldr	r2, [pc, #492]	; (80051c8 <DMA_SetConfig+0x248>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d054      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a79      	ldr	r2, [pc, #484]	; (80051cc <DMA_SetConfig+0x24c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d04f      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a78      	ldr	r2, [pc, #480]	; (80051d0 <DMA_SetConfig+0x250>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d04a      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a76      	ldr	r2, [pc, #472]	; (80051d4 <DMA_SetConfig+0x254>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d045      	beq.n	800508a <DMA_SetConfig+0x10a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a75      	ldr	r2, [pc, #468]	; (80051d8 <DMA_SetConfig+0x258>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d040      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a73      	ldr	r2, [pc, #460]	; (80051dc <DMA_SetConfig+0x25c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d03b      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a72      	ldr	r2, [pc, #456]	; (80051e0 <DMA_SetConfig+0x260>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d036      	beq.n	800508a <DMA_SetConfig+0x10a>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a70      	ldr	r2, [pc, #448]	; (80051e4 <DMA_SetConfig+0x264>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d031      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6f      	ldr	r2, [pc, #444]	; (80051e8 <DMA_SetConfig+0x268>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d02c      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a6d      	ldr	r2, [pc, #436]	; (80051ec <DMA_SetConfig+0x26c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d027      	beq.n	800508a <DMA_SetConfig+0x10a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6c      	ldr	r2, [pc, #432]	; (80051f0 <DMA_SetConfig+0x270>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6a      	ldr	r2, [pc, #424]	; (80051f4 <DMA_SetConfig+0x274>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01d      	beq.n	800508a <DMA_SetConfig+0x10a>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a69      	ldr	r2, [pc, #420]	; (80051f8 <DMA_SetConfig+0x278>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a67      	ldr	r2, [pc, #412]	; (80051fc <DMA_SetConfig+0x27c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a66      	ldr	r2, [pc, #408]	; (8005200 <DMA_SetConfig+0x280>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <DMA_SetConfig+0x10a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a64      	ldr	r2, [pc, #400]	; (8005204 <DMA_SetConfig+0x284>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a63      	ldr	r2, [pc, #396]	; (8005208 <DMA_SetConfig+0x288>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <DMA_SetConfig+0x10a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a61      	ldr	r2, [pc, #388]	; (800520c <DMA_SetConfig+0x28c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d101      	bne.n	800508e <DMA_SetConfig+0x10e>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <DMA_SetConfig+0x110>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00d      	beq.n	80050b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800509c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a3e      	ldr	r2, [pc, #248]	; (80051b0 <DMA_SetConfig+0x230>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d04a      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <DMA_SetConfig+0x234>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d045      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a3b      	ldr	r2, [pc, #236]	; (80051b8 <DMA_SetConfig+0x238>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d040      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3a      	ldr	r2, [pc, #232]	; (80051bc <DMA_SetConfig+0x23c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d03b      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <DMA_SetConfig+0x240>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d036      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <DMA_SetConfig+0x244>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d031      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a35      	ldr	r2, [pc, #212]	; (80051c8 <DMA_SetConfig+0x248>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02c      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a34      	ldr	r2, [pc, #208]	; (80051cc <DMA_SetConfig+0x24c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d027      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a32      	ldr	r2, [pc, #200]	; (80051d0 <DMA_SetConfig+0x250>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d022      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a31      	ldr	r2, [pc, #196]	; (80051d4 <DMA_SetConfig+0x254>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d01d      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <DMA_SetConfig+0x258>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <DMA_SetConfig+0x25c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <DMA_SetConfig+0x260>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <DMA_SetConfig+0x264>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <DMA_SetConfig+0x268>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <DMA_SetConfig+0x1d0>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a28      	ldr	r2, [pc, #160]	; (80051ec <DMA_SetConfig+0x26c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <DMA_SetConfig+0x1d4>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <DMA_SetConfig+0x1d6>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d05a      	beq.n	8005210 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	223f      	movs	r2, #63	; 0x3f
 8005164:	409a      	lsls	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005178:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d108      	bne.n	800519c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800519a:	e087      	b.n	80052ac <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]
}
 80051ac:	e07e      	b.n	80052ac <DMA_SetConfig+0x32c>
 80051ae:	bf00      	nop
 80051b0:	40020010 	.word	0x40020010
 80051b4:	40020028 	.word	0x40020028
 80051b8:	40020040 	.word	0x40020040
 80051bc:	40020058 	.word	0x40020058
 80051c0:	40020070 	.word	0x40020070
 80051c4:	40020088 	.word	0x40020088
 80051c8:	400200a0 	.word	0x400200a0
 80051cc:	400200b8 	.word	0x400200b8
 80051d0:	40020410 	.word	0x40020410
 80051d4:	40020428 	.word	0x40020428
 80051d8:	40020440 	.word	0x40020440
 80051dc:	40020458 	.word	0x40020458
 80051e0:	40020470 	.word	0x40020470
 80051e4:	40020488 	.word	0x40020488
 80051e8:	400204a0 	.word	0x400204a0
 80051ec:	400204b8 	.word	0x400204b8
 80051f0:	58025408 	.word	0x58025408
 80051f4:	5802541c 	.word	0x5802541c
 80051f8:	58025430 	.word	0x58025430
 80051fc:	58025444 	.word	0x58025444
 8005200:	58025458 	.word	0x58025458
 8005204:	5802546c 	.word	0x5802546c
 8005208:	58025480 	.word	0x58025480
 800520c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <DMA_SetConfig+0x338>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a27      	ldr	r2, [pc, #156]	; (80052bc <DMA_SetConfig+0x33c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01d      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a25      	ldr	r2, [pc, #148]	; (80052c0 <DMA_SetConfig+0x340>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a24      	ldr	r2, [pc, #144]	; (80052c4 <DMA_SetConfig+0x344>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <DMA_SetConfig+0x348>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a21      	ldr	r2, [pc, #132]	; (80052cc <DMA_SetConfig+0x34c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <DMA_SetConfig+0x350>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <DMA_SetConfig+0x2e0>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <DMA_SetConfig+0x354>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d101      	bne.n	8005264 <DMA_SetConfig+0x2e4>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <DMA_SetConfig+0x2e6>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2201      	movs	r2, #1
 8005274:	409a      	lsls	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d108      	bne.n	800529c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	60da      	str	r2, [r3, #12]
}
 800529a:	e007      	b.n	80052ac <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]
}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	58025408 	.word	0x58025408
 80052bc:	5802541c 	.word	0x5802541c
 80052c0:	58025430 	.word	0x58025430
 80052c4:	58025444 	.word	0x58025444
 80052c8:	58025458 	.word	0x58025458
 80052cc:	5802546c 	.word	0x5802546c
 80052d0:	58025480 	.word	0x58025480
 80052d4:	58025494 	.word	0x58025494

080052d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a42      	ldr	r2, [pc, #264]	; (80053f0 <DMA_CalcBaseAndBitshift+0x118>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04a      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a41      	ldr	r2, [pc, #260]	; (80053f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d045      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <DMA_CalcBaseAndBitshift+0x120>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d040      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a3e      	ldr	r2, [pc, #248]	; (80053fc <DMA_CalcBaseAndBitshift+0x124>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d03b      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <DMA_CalcBaseAndBitshift+0x128>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d036      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a3b      	ldr	r2, [pc, #236]	; (8005404 <DMA_CalcBaseAndBitshift+0x12c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a39      	ldr	r2, [pc, #228]	; (8005408 <DMA_CalcBaseAndBitshift+0x130>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02c      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a38      	ldr	r2, [pc, #224]	; (800540c <DMA_CalcBaseAndBitshift+0x134>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d027      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a36      	ldr	r2, [pc, #216]	; (8005410 <DMA_CalcBaseAndBitshift+0x138>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a35      	ldr	r2, [pc, #212]	; (8005414 <DMA_CalcBaseAndBitshift+0x13c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <DMA_CalcBaseAndBitshift+0x140>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a32      	ldr	r2, [pc, #200]	; (800541c <DMA_CalcBaseAndBitshift+0x144>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <DMA_CalcBaseAndBitshift+0x148>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <DMA_CalcBaseAndBitshift+0x14c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <DMA_CalcBaseAndBitshift+0x150>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <DMA_CalcBaseAndBitshift+0xa8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <DMA_CalcBaseAndBitshift+0x154>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <DMA_CalcBaseAndBitshift+0xac>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <DMA_CalcBaseAndBitshift+0xae>
 8005384:	2300      	movs	r3, #0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d024      	beq.n	80053d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	3b10      	subs	r3, #16
 8005392:	4a27      	ldr	r2, [pc, #156]	; (8005430 <DMA_CalcBaseAndBitshift+0x158>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	4a24      	ldr	r2, [pc, #144]	; (8005434 <DMA_CalcBaseAndBitshift+0x15c>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d908      	bls.n	80053c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <DMA_CalcBaseAndBitshift+0x160>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	1d1a      	adds	r2, r3, #4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	659a      	str	r2, [r3, #88]	; 0x58
 80053c2:	e00d      	b.n	80053e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <DMA_CalcBaseAndBitshift+0x160>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6593      	str	r3, [r2, #88]	; 0x58
 80053d2:	e005      	b.n	80053e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40020010 	.word	0x40020010
 80053f4:	40020028 	.word	0x40020028
 80053f8:	40020040 	.word	0x40020040
 80053fc:	40020058 	.word	0x40020058
 8005400:	40020070 	.word	0x40020070
 8005404:	40020088 	.word	0x40020088
 8005408:	400200a0 	.word	0x400200a0
 800540c:	400200b8 	.word	0x400200b8
 8005410:	40020410 	.word	0x40020410
 8005414:	40020428 	.word	0x40020428
 8005418:	40020440 	.word	0x40020440
 800541c:	40020458 	.word	0x40020458
 8005420:	40020470 	.word	0x40020470
 8005424:	40020488 	.word	0x40020488
 8005428:	400204a0 	.word	0x400204a0
 800542c:	400204b8 	.word	0x400204b8
 8005430:	aaaaaaab 	.word	0xaaaaaaab
 8005434:	0800c67c 	.word	0x0800c67c
 8005438:	fffffc00 	.word	0xfffffc00

0800543c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d120      	bne.n	8005492 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	2b03      	cmp	r3, #3
 8005456:	d858      	bhi.n	800550a <DMA_CheckFifoParam+0xce>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <DMA_CheckFifoParam+0x24>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005471 	.word	0x08005471
 8005464:	08005483 	.word	0x08005483
 8005468:	08005471 	.word	0x08005471
 800546c:	0800550b 	.word	0x0800550b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d048      	beq.n	800550e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005480:	e045      	b.n	800550e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800548a:	d142      	bne.n	8005512 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005490:	e03f      	b.n	8005512 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549a:	d123      	bne.n	80054e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d838      	bhi.n	8005516 <DMA_CheckFifoParam+0xda>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <DMA_CheckFifoParam+0x70>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054bd 	.word	0x080054bd
 80054b0:	080054c3 	.word	0x080054c3
 80054b4:	080054bd 	.word	0x080054bd
 80054b8:	080054d5 	.word	0x080054d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
        break;
 80054c0:	e030      	b.n	8005524 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d025      	beq.n	800551a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054d2:	e022      	b.n	800551a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054dc:	d11f      	bne.n	800551e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054e2:	e01c      	b.n	800551e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d902      	bls.n	80054f2 <DMA_CheckFifoParam+0xb6>
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d003      	beq.n	80054f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80054f0:	e018      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
        break;
 80054f6:	e015      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
    break;
 8005508:	e00b      	b.n	8005522 <DMA_CheckFifoParam+0xe6>
        break;
 800550a:	bf00      	nop
 800550c:	e00a      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        break;
 800550e:	bf00      	nop
 8005510:	e008      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        break;
 8005512:	bf00      	nop
 8005514:	e006      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        break;
 8005516:	bf00      	nop
 8005518:	e004      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
        break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <DMA_CheckFifoParam+0xe8>
    break;
 8005522:	bf00      	nop
    }
  }

  return status;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop

08005534 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a38      	ldr	r2, [pc, #224]	; (8005628 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d022      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a36      	ldr	r2, [pc, #216]	; (800562c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01d      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a35      	ldr	r2, [pc, #212]	; (8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d018      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a33      	ldr	r2, [pc, #204]	; (8005634 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a32      	ldr	r2, [pc, #200]	; (8005638 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00e      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a30      	ldr	r2, [pc, #192]	; (800563c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d009      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2f      	ldr	r2, [pc, #188]	; (8005640 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005596:	2300      	movs	r3, #0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01a      	beq.n	80055d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	3b08      	subs	r3, #8
 80055a4:	4a28      	ldr	r2, [pc, #160]	; (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4b26      	ldr	r3, [pc, #152]	; (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a24      	ldr	r2, [pc, #144]	; (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80055c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2201      	movs	r2, #1
 80055ca:	409a      	lsls	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80055d0:	e024      	b.n	800561c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	3b10      	subs	r3, #16
 80055da:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d806      	bhi.n	80055fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4a1b      	ldr	r2, [pc, #108]	; (800565c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d902      	bls.n	80055fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3308      	adds	r3, #8
 80055f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a16      	ldr	r2, [pc, #88]	; (8005664 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800560c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2201      	movs	r2, #1
 8005616:	409a      	lsls	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	58025408 	.word	0x58025408
 800562c:	5802541c 	.word	0x5802541c
 8005630:	58025430 	.word	0x58025430
 8005634:	58025444 	.word	0x58025444
 8005638:	58025458 	.word	0x58025458
 800563c:	5802546c 	.word	0x5802546c
 8005640:	58025480 	.word	0x58025480
 8005644:	58025494 	.word	0x58025494
 8005648:	cccccccd 	.word	0xcccccccd
 800564c:	16009600 	.word	0x16009600
 8005650:	58025880 	.word	0x58025880
 8005654:	aaaaaaab 	.word	0xaaaaaaab
 8005658:	400204b8 	.word	0x400204b8
 800565c:	4002040f 	.word	0x4002040f
 8005660:	10008200 	.word	0x10008200
 8005664:	40020880 	.word	0x40020880

08005668 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d04a      	beq.n	8005714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d847      	bhi.n	8005714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a25      	ldr	r2, [pc, #148]	; (8005720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d022      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a24      	ldr	r2, [pc, #144]	; (8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d01d      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d018      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a21      	ldr	r2, [pc, #132]	; (800572c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1b      	ldr	r2, [pc, #108]	; (800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4b17      	ldr	r3, [pc, #92]	; (8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80056f0:	671a      	str	r2, [r3, #112]	; 0x70
 80056f2:	e009      	b.n	8005708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a11      	ldr	r2, [pc, #68]	; (800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005706:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	58025408 	.word	0x58025408
 8005724:	5802541c 	.word	0x5802541c
 8005728:	58025430 	.word	0x58025430
 800572c:	58025444 	.word	0x58025444
 8005730:	58025458 	.word	0x58025458
 8005734:	5802546c 	.word	0x5802546c
 8005738:	58025480 	.word	0x58025480
 800573c:	58025494 	.word	0x58025494
 8005740:	1600963f 	.word	0x1600963f
 8005744:	58025940 	.word	0x58025940
 8005748:	1000823f 	.word	0x1000823f
 800574c:	40020940 	.word	0x40020940

08005750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800575e:	4b89      	ldr	r3, [pc, #548]	; (8005984 <HAL_GPIO_Init+0x234>)
 8005760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005762:	e194      	b.n	8005a8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2101      	movs	r1, #1
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8186 	beq.w	8005a88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d00b      	beq.n	800579c <HAL_GPIO_Init+0x4c>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d007      	beq.n	800579c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005790:	2b11      	cmp	r3, #17
 8005792:	d003      	beq.n	800579c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b12      	cmp	r3, #18
 800579a:	d130      	bne.n	80057fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	2203      	movs	r2, #3
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057d2:	2201      	movs	r2, #1
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0201 	and.w	r2, r3, #1
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	2203      	movs	r2, #3
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43db      	mvns	r3, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4013      	ands	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0xee>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b12      	cmp	r3, #18
 800583c:	d123      	bne.n	8005886 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	08da      	lsrs	r2, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3208      	adds	r2, #8
 8005846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	08da      	lsrs	r2, r3, #3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3208      	adds	r2, #8
 8005880:	69b9      	ldr	r1, [r7, #24]
 8005882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	2203      	movs	r2, #3
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0203 	and.w	r2, r3, #3
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80e0 	beq.w	8005a88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_GPIO_Init+0x238>)
 80058ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ce:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <HAL_GPIO_Init+0x238>)
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058d8:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <HAL_GPIO_Init+0x238>)
 80058da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058e6:	4a29      	ldr	r2, [pc, #164]	; (800598c <HAL_GPIO_Init+0x23c>)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	089b      	lsrs	r3, r3, #2
 80058ec:	3302      	adds	r3, #2
 80058ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	220f      	movs	r2, #15
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a20      	ldr	r2, [pc, #128]	; (8005990 <HAL_GPIO_Init+0x240>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d052      	beq.n	80059b8 <HAL_GPIO_Init+0x268>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <HAL_GPIO_Init+0x244>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d031      	beq.n	800597e <HAL_GPIO_Init+0x22e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <HAL_GPIO_Init+0x248>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d02b      	beq.n	800597a <HAL_GPIO_Init+0x22a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <HAL_GPIO_Init+0x24c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d025      	beq.n	8005976 <HAL_GPIO_Init+0x226>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_GPIO_Init+0x250>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01f      	beq.n	8005972 <HAL_GPIO_Init+0x222>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_GPIO_Init+0x254>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d019      	beq.n	800596e <HAL_GPIO_Init+0x21e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <HAL_GPIO_Init+0x258>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_GPIO_Init+0x21a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <HAL_GPIO_Init+0x25c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00d      	beq.n	8005966 <HAL_GPIO_Init+0x216>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_GPIO_Init+0x260>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <HAL_GPIO_Init+0x212>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_GPIO_Init+0x264>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d101      	bne.n	800595e <HAL_GPIO_Init+0x20e>
 800595a:	2309      	movs	r3, #9
 800595c:	e02d      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 800595e:	230a      	movs	r3, #10
 8005960:	e02b      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 8005962:	2308      	movs	r3, #8
 8005964:	e029      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 8005966:	2307      	movs	r3, #7
 8005968:	e027      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 800596a:	2306      	movs	r3, #6
 800596c:	e025      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 800596e:	2305      	movs	r3, #5
 8005970:	e023      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 8005972:	2304      	movs	r3, #4
 8005974:	e021      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 8005976:	2303      	movs	r3, #3
 8005978:	e01f      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 800597a:	2302      	movs	r3, #2
 800597c:	e01d      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 800597e:	2301      	movs	r3, #1
 8005980:	e01b      	b.n	80059ba <HAL_GPIO_Init+0x26a>
 8005982:	bf00      	nop
 8005984:	58000080 	.word	0x58000080
 8005988:	58024400 	.word	0x58024400
 800598c:	58000400 	.word	0x58000400
 8005990:	58020000 	.word	0x58020000
 8005994:	58020400 	.word	0x58020400
 8005998:	58020800 	.word	0x58020800
 800599c:	58020c00 	.word	0x58020c00
 80059a0:	58021000 	.word	0x58021000
 80059a4:	58021400 	.word	0x58021400
 80059a8:	58021800 	.word	0x58021800
 80059ac:	58021c00 	.word	0x58021c00
 80059b0:	58022000 	.word	0x58022000
 80059b4:	58022400 	.word	0x58022400
 80059b8:	2300      	movs	r3, #0
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	f002 0203 	and.w	r2, r2, #3
 80059c0:	0092      	lsls	r2, r2, #2
 80059c2:	4093      	lsls	r3, r2
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ca:	4938      	ldr	r1, [pc, #224]	; (8005aac <HAL_GPIO_Init+0x35c>)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	3302      	adds	r3, #2
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f47f ae63 	bne.w	8005764 <HAL_GPIO_Init+0x14>
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	3724      	adds	r7, #36	; 0x24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	58000400 	.word	0x58000400

08005ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
 8005abc:	4613      	mov	r3, r2
 8005abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ac0:	787b      	ldrb	r3, [r7, #1]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ac6:	887a      	ldrh	r2, [r7, #2]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005acc:	e003      	b.n	8005ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	041a      	lsls	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	619a      	str	r2, [r3, #24]
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	887b      	ldrh	r3, [r7, #2]
 8005af4:	401a      	ands	r2, r3
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d104      	bne.n	8005b06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005afc:	887b      	ldrh	r3, [r7, #2]
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005b04:	e002      	b.n	8005b0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	619a      	str	r2, [r3, #24]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_PWREx_ConfigSupply+0x70>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d00a      	beq.n	8005b42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b2c:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <HAL_PWREx_ConfigSupply+0x70>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d001      	beq.n	8005b3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e01f      	b.n	8005b7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e01d      	b.n	8005b7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <HAL_PWREx_ConfigSupply+0x70>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f023 0207 	bic.w	r2, r3, #7
 8005b4a:	490f      	ldr	r1, [pc, #60]	; (8005b88 <HAL_PWREx_ConfigSupply+0x70>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b52:	f7fc f955 	bl	8001e00 <HAL_GetTick>
 8005b56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b58:	e009      	b.n	8005b6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b5a:	f7fc f951 	bl	8001e00 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b68:	d901      	bls.n	8005b6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e007      	b.n	8005b7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_PWREx_ConfigSupply+0x70>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7a:	d1ee      	bne.n	8005b5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	58024800 	.word	0x58024800

08005b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08c      	sub	sp, #48	; 0x30
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e3c4      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8087 	beq.w	8005cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bac:	4ba2      	ldr	r3, [pc, #648]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bb6:	4ba0      	ldr	r3, [pc, #640]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d007      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x46>
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	2b18      	cmp	r3, #24
 8005bc6:	d110      	bne.n	8005bea <HAL_RCC_OscConfig+0x5e>
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d10b      	bne.n	8005bea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd2:	4b99      	ldr	r3, [pc, #612]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d06c      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x12c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d168      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e39e      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCC_OscConfig+0x76>
 8005bf4:	4b90      	ldr	r3, [pc, #576]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a8f      	ldr	r2, [pc, #572]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	e02e      	b.n	8005c60 <HAL_RCC_OscConfig+0xd4>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x98>
 8005c0a:	4b8b      	ldr	r3, [pc, #556]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a8a      	ldr	r2, [pc, #552]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4b88      	ldr	r3, [pc, #544]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a87      	ldr	r2, [pc, #540]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e01d      	b.n	8005c60 <HAL_RCC_OscConfig+0xd4>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCC_OscConfig+0xbc>
 8005c2e:	4b82      	ldr	r3, [pc, #520]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a81      	ldr	r2, [pc, #516]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	4b7f      	ldr	r3, [pc, #508]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a7e      	ldr	r2, [pc, #504]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e00b      	b.n	8005c60 <HAL_RCC_OscConfig+0xd4>
 8005c48:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a7a      	ldr	r2, [pc, #488]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4b78      	ldr	r3, [pc, #480]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a77      	ldr	r2, [pc, #476]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fc f8ca 	bl	8001e00 <HAL_GetTick>
 8005c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c70:	f7fc f8c6 	bl	8001e00 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	; 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e352      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c82:	4b6d      	ldr	r3, [pc, #436]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0xe4>
 8005c8e:	e014      	b.n	8005cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fc f8b6 	bl	8001e00 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fc f8b2 	bl	8001e00 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e33e      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005caa:	4b63      	ldr	r3, [pc, #396]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x10c>
 8005cb6:	e000      	b.n	8005cba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8092 	beq.w	8005dec <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cd2:	4b59      	ldr	r3, [pc, #356]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_RCC_OscConfig+0x162>
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2b18      	cmp	r3, #24
 8005ce2:	d12d      	bne.n	8005d40 <HAL_RCC_OscConfig+0x1b4>
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d128      	bne.n	8005d40 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cee:	4b52      	ldr	r3, [pc, #328]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <HAL_RCC_OscConfig+0x17a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e310      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d06:	f7fc f8a9 	bl	8001e5c <HAL_GetREVID>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d80a      	bhi.n	8005d2a <HAL_RCC_OscConfig+0x19e>
 8005d14:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	4945      	ldr	r1, [pc, #276]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d28:	e060      	b.n	8005dec <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2a:	4b43      	ldr	r3, [pc, #268]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	493f      	ldr	r1, [pc, #252]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d3e:	e055      	b.n	8005dec <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d038      	beq.n	8005dba <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d48:	4b3b      	ldr	r3, [pc, #236]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f023 0219 	bic.w	r2, r3, #25
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4938      	ldr	r1, [pc, #224]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5a:	f7fc f851 	bl	8001e00 <HAL_GetTick>
 8005d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d62:	f7fc f84d 	bl	8001e00 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e2d9      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d74:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d80:	f7fc f86c 	bl	8001e5c <HAL_GetREVID>
 8005d84:	4602      	mov	r2, r0
 8005d86:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d80a      	bhi.n	8005da4 <HAL_RCC_OscConfig+0x218>
 8005d8e:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	031b      	lsls	r3, r3, #12
 8005d9c:	4926      	ldr	r1, [pc, #152]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]
 8005da2:	e023      	b.n	8005dec <HAL_RCC_OscConfig+0x260>
 8005da4:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	4921      	ldr	r1, [pc, #132]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]
 8005db8:	e018      	b.n	8005dec <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dba:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fc f81b 	bl	8001e00 <HAL_GetTick>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dce:	f7fc f817 	bl	8001e00 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e2a3      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de0:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8091 	beq.w	8005f1c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d007      	beq.n	8005e20 <HAL_RCC_OscConfig+0x294>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b18      	cmp	r3, #24
 8005e14:	d12f      	bne.n	8005e76 <HAL_RCC_OscConfig+0x2ea>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d12a      	bne.n	8005e76 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_OscConfig+0x2ac>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2b0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d003      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e277      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
 8005e38:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e3c:	f7fc f80e 	bl	8001e5c <HAL_GetREVID>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d80a      	bhi.n	8005e60 <HAL_RCC_OscConfig+0x2d4>
 8005e4a:	4ba2      	ldr	r3, [pc, #648]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	069b      	lsls	r3, r3, #26
 8005e58:	499e      	ldr	r1, [pc, #632]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e5e:	e05d      	b.n	8005f1c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e60:	4b9c      	ldr	r3, [pc, #624]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	4999      	ldr	r1, [pc, #612]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e74:	e052      	b.n	8005f1c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d035      	beq.n	8005eea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e7e:	4b95      	ldr	r3, [pc, #596]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a94      	ldr	r2, [pc, #592]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fb ffb9 	bl	8001e00 <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e92:	f7fb ffb5 	bl	8001e00 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e241      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ea4:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb0:	f7fb ffd4 	bl	8001e5c <HAL_GetREVID>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d80a      	bhi.n	8005ed4 <HAL_RCC_OscConfig+0x348>
 8005ebe:	4b85      	ldr	r3, [pc, #532]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	069b      	lsls	r3, r3, #26
 8005ecc:	4981      	ldr	r1, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
 8005ed2:	e023      	b.n	8005f1c <HAL_RCC_OscConfig+0x390>
 8005ed4:	4b7f      	ldr	r3, [pc, #508]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	061b      	lsls	r3, r3, #24
 8005ee2:	497c      	ldr	r1, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60cb      	str	r3, [r1, #12]
 8005ee8:	e018      	b.n	8005f1c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005eea:	4b7a      	ldr	r3, [pc, #488]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a79      	ldr	r2, [pc, #484]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef6:	f7fb ff83 	bl	8001e00 <HAL_GetTick>
 8005efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005efe:	f7fb ff7f 	bl	8001e00 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e20b      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f10:	4b70      	ldr	r3, [pc, #448]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f0      	bne.n	8005efe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d036      	beq.n	8005f96 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d019      	beq.n	8005f64 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f30:	4b68      	ldr	r3, [pc, #416]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f34:	4a67      	ldr	r2, [pc, #412]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fb ff60 	bl	8001e00 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fb ff5c 	bl	8001e00 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e1e8      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f56:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x3b8>
 8005f62:	e018      	b.n	8005f96 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f64:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f68:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fb ff46 	bl	8001e00 <HAL_GetTick>
 8005f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fb ff42 	bl	8001e00 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e1ce      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f8a:	4b52      	ldr	r3, [pc, #328]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d036      	beq.n	8006010 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d019      	beq.n	8005fde <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005faa:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a49      	ldr	r2, [pc, #292]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fb6:	f7fb ff23 	bl	8001e00 <HAL_GetTick>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005fbe:	f7fb ff1f 	bl	8001e00 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e1ab      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fd0:	4b40      	ldr	r3, [pc, #256]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x432>
 8005fdc:	e018      	b.n	8006010 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fde:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a3c      	ldr	r2, [pc, #240]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8005fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fea:	f7fb ff09 	bl	8001e00 <HAL_GetTick>
 8005fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ff2:	f7fb ff05 	bl	8001e00 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e191      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006004:	4b33      	ldr	r3, [pc, #204]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8086 	beq.w	800612a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800601e:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <HAL_RCC_OscConfig+0x54c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <HAL_RCC_OscConfig+0x54c>)
 8006024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800602a:	f7fb fee9 	bl	8001e00 <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006032:	f7fb fee5 	bl	8001e00 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b64      	cmp	r3, #100	; 0x64
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e171      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006044:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <HAL_RCC_OscConfig+0x54c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d106      	bne.n	8006066 <HAL_RCC_OscConfig+0x4da>
 8006058:	4b1e      	ldr	r3, [pc, #120]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6713      	str	r3, [r2, #112]	; 0x70
 8006064:	e02d      	b.n	80060c2 <HAL_RCC_OscConfig+0x536>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10c      	bne.n	8006088 <HAL_RCC_OscConfig+0x4fc>
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	6713      	str	r3, [r2, #112]	; 0x70
 800607a:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8006080:	f023 0304 	bic.w	r3, r3, #4
 8006084:	6713      	str	r3, [r2, #112]	; 0x70
 8006086:	e01c      	b.n	80060c2 <HAL_RCC_OscConfig+0x536>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b05      	cmp	r3, #5
 800608e:	d10c      	bne.n	80060aa <HAL_RCC_OscConfig+0x51e>
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 8006096:	f043 0304 	orr.w	r3, r3, #4
 800609a:	6713      	str	r3, [r2, #112]	; 0x70
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6713      	str	r3, [r2, #112]	; 0x70
 80060a8:	e00b      	b.n	80060c2 <HAL_RCC_OscConfig+0x536>
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	; 0x70
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a06      	ldr	r2, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x548>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01a      	beq.n	8006100 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ca:	f7fb fe99 	bl	8001e00 <HAL_GetTick>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d0:	e00f      	b.n	80060f2 <HAL_RCC_OscConfig+0x566>
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060dc:	f7fb fe90 	bl	8001e00 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e11a      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f2:	4b8f      	ldr	r3, [pc, #572]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ee      	beq.n	80060dc <HAL_RCC_OscConfig+0x550>
 80060fe:	e014      	b.n	800612a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fb fe7e 	bl	8001e00 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006106:	e00a      	b.n	800611e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006108:	f7fb fe7a 	bl	8001e00 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f241 3288 	movw	r2, #5000	; 0x1388
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e104      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800611e:	4b84      	ldr	r3, [pc, #528]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1ee      	bne.n	8006108 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80f9 	beq.w	8006326 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006134:	4b7e      	ldr	r3, [pc, #504]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800613c:	2b18      	cmp	r3, #24
 800613e:	f000 80b4 	beq.w	80062aa <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b02      	cmp	r3, #2
 8006148:	f040 8095 	bne.w	8006276 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614c:	4b78      	ldr	r3, [pc, #480]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a77      	ldr	r2, [pc, #476]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fb fe52 	bl	8001e00 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006160:	f7fb fe4e 	bl	8001e00 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e0da      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006172:	4b6f      	ldr	r3, [pc, #444]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800617e:	4b6c      	ldr	r3, [pc, #432]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006182:	4b6c      	ldr	r3, [pc, #432]	; (8006334 <HAL_RCC_OscConfig+0x7a8>)
 8006184:	4013      	ands	r3, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800618e:	0112      	lsls	r2, r2, #4
 8006190:	430a      	orrs	r2, r1
 8006192:	4967      	ldr	r1, [pc, #412]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	628b      	str	r3, [r1, #40]	; 0x28
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	3b01      	subs	r3, #1
 800619e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	3b01      	subs	r3, #1
 80061a8:	025b      	lsls	r3, r3, #9
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	3b01      	subs	r3, #1
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	3b01      	subs	r3, #1
 80061c2:	061b      	lsls	r3, r3, #24
 80061c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061c8:	4959      	ldr	r1, [pc, #356]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80061ce:	4b58      	ldr	r3, [pc, #352]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	4a57      	ldr	r2, [pc, #348]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061da:	4b55      	ldr	r3, [pc, #340]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061de:	4b56      	ldr	r3, [pc, #344]	; (8006338 <HAL_RCC_OscConfig+0x7ac>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061e6:	00d2      	lsls	r2, r2, #3
 80061e8:	4951      	ldr	r1, [pc, #324]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061ee:	4b50      	ldr	r3, [pc, #320]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f023 020c 	bic.w	r2, r3, #12
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	494d      	ldr	r1, [pc, #308]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006200:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	f023 0202 	bic.w	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620c:	4948      	ldr	r1, [pc, #288]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800620e:	4313      	orrs	r3, r2
 8006210:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006212:	4b47      	ldr	r3, [pc, #284]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	4a46      	ldr	r2, [pc, #280]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621e:	4b44      	ldr	r3, [pc, #272]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	4a43      	ldr	r2, [pc, #268]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800622a:	4b41      	ldr	r3, [pc, #260]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	4a40      	ldr	r2, [pc, #256]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006236:	4b3e      	ldr	r3, [pc, #248]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a3d      	ldr	r2, [pc, #244]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006242:	4b3b      	ldr	r3, [pc, #236]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a3a      	ldr	r2, [pc, #232]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800624c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624e:	f7fb fdd7 	bl	8001e00 <HAL_GetTick>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006256:	f7fb fdd3 	bl	8001e00 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e05f      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006268:	4b31      	ldr	r3, [pc, #196]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x6ca>
 8006274:	e057      	b.n	8006326 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006276:	4b2e      	ldr	r3, [pc, #184]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2d      	ldr	r2, [pc, #180]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800627c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fb fdbd 	bl	8001e00 <HAL_GetTick>
 8006286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628a:	f7fb fdb9 	bl	8001e00 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e045      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800629c:	4b24      	ldr	r3, [pc, #144]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f0      	bne.n	800628a <HAL_RCC_OscConfig+0x6fe>
 80062a8:	e03d      	b.n	8006326 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062b0:	4b1f      	ldr	r3, [pc, #124]	; (8006330 <HAL_RCC_OscConfig+0x7a4>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d031      	beq.n	8006322 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f003 0203 	and.w	r2, r3, #3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d12a      	bne.n	8006322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	091b      	lsrs	r3, r3, #4
 80062d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d8:	429a      	cmp	r2, r3
 80062da:	d122      	bne.n	8006322 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d11a      	bne.n	8006322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	0a5b      	lsrs	r3, r3, #9
 80062f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d111      	bne.n	8006322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d108      	bne.n	8006322 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	0e1b      	lsrs	r3, r3, #24
 8006314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d001      	beq.n	8006326 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	; 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	58024400 	.word	0x58024400
 8006334:	fffffc0c 	.word	0xfffffc0c
 8006338:	ffff0007 	.word	0xffff0007

0800633c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e19c      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006350:	4b8a      	ldr	r3, [pc, #552]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d910      	bls.n	8006380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b87      	ldr	r3, [pc, #540]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 020f 	bic.w	r2, r3, #15
 8006366:	4985      	ldr	r1, [pc, #532]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636e:	4b83      	ldr	r3, [pc, #524]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d001      	beq.n	8006380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e184      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d010      	beq.n	80063ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006398:	429a      	cmp	r2, r3
 800639a:	d908      	bls.n	80063ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800639c:	4b78      	ldr	r3, [pc, #480]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	4975      	ldr	r1, [pc, #468]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d010      	beq.n	80063dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	4b70      	ldr	r3, [pc, #448]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d908      	bls.n	80063dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063ca:	4b6d      	ldr	r3, [pc, #436]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	496a      	ldr	r1, [pc, #424]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d010      	beq.n	800640a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	4b64      	ldr	r3, [pc, #400]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d908      	bls.n	800640a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063f8:	4b61      	ldr	r3, [pc, #388]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	495e      	ldr	r1, [pc, #376]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006406:	4313      	orrs	r3, r2
 8006408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d010      	beq.n	8006438 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	4b59      	ldr	r3, [pc, #356]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006422:	429a      	cmp	r2, r3
 8006424:	d908      	bls.n	8006438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006426:	4b56      	ldr	r3, [pc, #344]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4953      	ldr	r1, [pc, #332]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006434:	4313      	orrs	r3, r2
 8006436:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4b4d      	ldr	r3, [pc, #308]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	429a      	cmp	r2, r3
 8006452:	d908      	bls.n	8006466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006454:	4b4a      	ldr	r3, [pc, #296]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f023 020f 	bic.w	r2, r3, #15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4947      	ldr	r1, [pc, #284]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006462:	4313      	orrs	r3, r2
 8006464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d055      	beq.n	800651e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006472:	4b43      	ldr	r3, [pc, #268]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4940      	ldr	r1, [pc, #256]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006480:	4313      	orrs	r3, r2
 8006482:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d107      	bne.n	800649c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800648c:	4b3c      	ldr	r3, [pc, #240]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d121      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0f6      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d107      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064a4:	4b36      	ldr	r3, [pc, #216]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d115      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0ea      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d107      	bne.n	80064cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064bc:	4b30      	ldr	r3, [pc, #192]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0de      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064cc:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0d6      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064dc:	4b28      	ldr	r3, [pc, #160]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f023 0207 	bic.w	r2, r3, #7
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4925      	ldr	r1, [pc, #148]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ee:	f7fb fc87 	bl	8001e00 <HAL_GetTick>
 80064f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f4:	e00a      	b.n	800650c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f6:	f7fb fc83 	bl	8001e00 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f241 3288 	movw	r2, #5000	; 0x1388
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e0be      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650c:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	429a      	cmp	r2, r3
 800651c:	d1eb      	bne.n	80064f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d010      	beq.n	800654c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	4b14      	ldr	r3, [pc, #80]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	429a      	cmp	r2, r3
 8006538:	d208      	bcs.n	800654c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f023 020f 	bic.w	r2, r3, #15
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	490e      	ldr	r1, [pc, #56]	; (8006580 <HAL_RCC_ClockConfig+0x244>)
 8006548:	4313      	orrs	r3, r2
 800654a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d214      	bcs.n	8006584 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 020f 	bic.w	r2, r3, #15
 8006562:	4906      	ldr	r1, [pc, #24]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b04      	ldr	r3, [pc, #16]	; (800657c <HAL_RCC_ClockConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d005      	beq.n	8006584 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e086      	b.n	800668a <HAL_RCC_ClockConfig+0x34e>
 800657c:	52002000 	.word	0x52002000
 8006580:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d010      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800659c:	429a      	cmp	r2, r3
 800659e:	d208      	bcs.n	80065b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065a0:	4b3c      	ldr	r3, [pc, #240]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	4939      	ldr	r1, [pc, #228]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	4b34      	ldr	r3, [pc, #208]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d208      	bcs.n	80065e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ce:	4b31      	ldr	r3, [pc, #196]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	492e      	ldr	r1, [pc, #184]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	4b28      	ldr	r3, [pc, #160]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d208      	bcs.n	800660e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	4922      	ldr	r1, [pc, #136]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 800660a:	4313      	orrs	r3, r2
 800660c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d010      	beq.n	800663c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006626:	429a      	cmp	r2, r3
 8006628:	d208      	bcs.n	800663c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800662a:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4917      	ldr	r1, [pc, #92]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 8006638:	4313      	orrs	r3, r2
 800663a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800663c:	f000 f834 	bl	80066a8 <HAL_RCC_GetSysClockFreq>
 8006640:	4601      	mov	r1, r0
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	4a12      	ldr	r2, [pc, #72]	; (8006698 <HAL_RCC_ClockConfig+0x35c>)
 800664e:	5cd3      	ldrb	r3, [r2, r3]
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	fa21 f303 	lsr.w	r3, r1, r3
 8006658:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <HAL_RCC_ClockConfig+0x358>)
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	4a0d      	ldr	r2, [pc, #52]	; (8006698 <HAL_RCC_ClockConfig+0x35c>)
 8006664:	5cd3      	ldrb	r3, [r2, r3]
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	4a0a      	ldr	r2, [pc, #40]	; (800669c <HAL_RCC_ClockConfig+0x360>)
 8006672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006674:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <HAL_RCC_ClockConfig+0x364>)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <HAL_RCC_ClockConfig+0x368>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb fb74 	bl	8001d6c <HAL_InitTick>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	0800c66c 	.word	0x0800c66c
 800669c:	2400001c 	.word	0x2400001c
 80066a0:	24000018 	.word	0x24000018
 80066a4:	24000020 	.word	0x24000020

080066a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ae:	4baf      	ldr	r3, [pc, #700]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b6:	2b18      	cmp	r3, #24
 80066b8:	f200 814e 	bhi.w	8006958 <HAL_RCC_GetSysClockFreq+0x2b0>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	08006729 	.word	0x08006729
 80066c8:	08006959 	.word	0x08006959
 80066cc:	08006959 	.word	0x08006959
 80066d0:	08006959 	.word	0x08006959
 80066d4:	08006959 	.word	0x08006959
 80066d8:	08006959 	.word	0x08006959
 80066dc:	08006959 	.word	0x08006959
 80066e0:	08006959 	.word	0x08006959
 80066e4:	0800674f 	.word	0x0800674f
 80066e8:	08006959 	.word	0x08006959
 80066ec:	08006959 	.word	0x08006959
 80066f0:	08006959 	.word	0x08006959
 80066f4:	08006959 	.word	0x08006959
 80066f8:	08006959 	.word	0x08006959
 80066fc:	08006959 	.word	0x08006959
 8006700:	08006959 	.word	0x08006959
 8006704:	08006755 	.word	0x08006755
 8006708:	08006959 	.word	0x08006959
 800670c:	08006959 	.word	0x08006959
 8006710:	08006959 	.word	0x08006959
 8006714:	08006959 	.word	0x08006959
 8006718:	08006959 	.word	0x08006959
 800671c:	08006959 	.word	0x08006959
 8006720:	08006959 	.word	0x08006959
 8006724:	0800675b 	.word	0x0800675b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006728:	4b90      	ldr	r3, [pc, #576]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006734:	4b8d      	ldr	r3, [pc, #564]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	08db      	lsrs	r3, r3, #3
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	4a8c      	ldr	r2, [pc, #560]	; (8006970 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
 8006744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006746:	e10a      	b.n	800695e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006748:	4b89      	ldr	r3, [pc, #548]	; (8006970 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800674a:	61bb      	str	r3, [r7, #24]
    break;
 800674c:	e107      	b.n	800695e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800674e:	4b89      	ldr	r3, [pc, #548]	; (8006974 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006750:	61bb      	str	r3, [r7, #24]
    break;
 8006752:	e104      	b.n	800695e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006754:	4b88      	ldr	r3, [pc, #544]	; (8006978 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006756:	61bb      	str	r3, [r7, #24]
    break;
 8006758:	e101      	b.n	800695e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800675a:	4b84      	ldr	r3, [pc, #528]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006764:	4b81      	ldr	r3, [pc, #516]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006770:	4b7e      	ldr	r3, [pc, #504]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800677a:	4b7c      	ldr	r3, [pc, #496]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	08db      	lsrs	r3, r3, #3
 8006780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80da 	beq.w	8006952 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d05a      	beq.n	800685a <HAL_RCC_GetSysClockFreq+0x1b2>
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d302      	bcc.n	80067ae <HAL_RCC_GetSysClockFreq+0x106>
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d078      	beq.n	800689e <HAL_RCC_GetSysClockFreq+0x1f6>
 80067ac:	e099      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ae:	4b6f      	ldr	r3, [pc, #444]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d02d      	beq.n	8006816 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067ba:	4b6c      	ldr	r3, [pc, #432]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	08db      	lsrs	r3, r3, #3
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	4a6a      	ldr	r2, [pc, #424]	; (8006970 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80067c6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e4:	4b61      	ldr	r3, [pc, #388]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067f8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800697c <HAL_RCC_GetSysClockFreq+0x2d4>
 80067fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006810:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006814:	e087      	b.n	8006926 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006820:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006980 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006828:	4b50      	ldr	r3, [pc, #320]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006838:	ed97 6a02 	vldr	s12, [r7, #8]
 800683c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800697c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006854:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006858:	e065      	b.n	8006926 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006984 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686c:	4b3f      	ldr	r3, [pc, #252]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006880:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800697c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006898:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800689c:	e043      	b.n	8006926 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006988 <HAL_RCC_GetSysClockFreq+0x2e0>
 80068ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b0:	4b2e      	ldr	r3, [pc, #184]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80068c4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800697c <HAL_RCC_GetSysClockFreq+0x2d4>
 80068c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068e0:	e021      	b.n	8006926 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006984 <HAL_RCC_GetSysClockFreq+0x2dc>
 80068f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f4:	4b1d      	ldr	r3, [pc, #116]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006904:	ed97 6a02 	vldr	s12, [r7, #8]
 8006908:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800697c <HAL_RCC_GetSysClockFreq+0x2d4>
 800690c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006920:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006924:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	0a5b      	lsrs	r3, r3, #9
 800692c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006930:	3301      	adds	r3, #1
 8006932:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800693e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694a:	ee17 3a90 	vmov	r3, s15
 800694e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006950:	e005      	b.n	800695e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	61bb      	str	r3, [r7, #24]
    break;
 8006956:	e002      	b.n	800695e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800695a:	61bb      	str	r3, [r7, #24]
    break;
 800695c:	bf00      	nop
  }

  return sysclockfreq;
 800695e:	69bb      	ldr	r3, [r7, #24]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3724      	adds	r7, #36	; 0x24
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	58024400 	.word	0x58024400
 8006970:	03d09000 	.word	0x03d09000
 8006974:	003d0900 	.word	0x003d0900
 8006978:	017d7840 	.word	0x017d7840
 800697c:	46000000 	.word	0x46000000
 8006980:	4c742400 	.word	0x4c742400
 8006984:	4a742400 	.word	0x4a742400
 8006988:	4bbebc20 	.word	0x4bbebc20

0800698c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006992:	f7ff fe89 	bl	80066a8 <HAL_RCC_GetSysClockFreq>
 8006996:	4601      	mov	r1, r0
 8006998:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCC_GetHCLKFreq+0x50>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	0a1b      	lsrs	r3, r3, #8
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80069a4:	5cd3      	ldrb	r3, [r2, r3]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	fa21 f303 	lsr.w	r3, r1, r3
 80069ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <HAL_RCC_GetHCLKFreq+0x50>)
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80069ba:	5cd3      	ldrb	r3, [r2, r3]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	fa22 f303 	lsr.w	r3, r2, r3
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80069c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069ca:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80069d2:	681b      	ldr	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	58024400 	.word	0x58024400
 80069e0:	0800c66c 	.word	0x0800c66c
 80069e4:	2400001c 	.word	0x2400001c
 80069e8:	24000018 	.word	0x24000018

080069ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80069f0:	f7ff ffcc 	bl	800698c <HAL_RCC_GetHCLKFreq>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	091b      	lsrs	r3, r3, #4
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a02:	5cd3      	ldrb	r3, [r2, r3]
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	58024400 	.word	0x58024400
 8006a14:	0800c66c 	.word	0x0800c66c

08006a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a1c:	f7ff ffb6 	bl	800698c <HAL_RCC_GetHCLKFreq>
 8006a20:	4601      	mov	r1, r0
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a2e:	5cd3      	ldrb	r3, [r2, r3]
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	0800c66c 	.word	0x0800c66c

08006a44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a50:	2300      	movs	r3, #0
 8006a52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d03d      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a68:	d013      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d802      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006a74:	e01f      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a7a:	d013      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006a7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a80:	d01c      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006a82:	e018      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a84:	4baf      	ldr	r3, [pc, #700]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	4aae      	ldr	r2, [pc, #696]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a90:	e015      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2102      	movs	r1, #2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fd23 	bl	80084e4 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006aa2:	e00c      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fdcc 	bl	8008648 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ab4:	e003      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ac4:	4b9f      	ldr	r3, [pc, #636]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad0:	499c      	ldr	r1, [pc, #624]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ad6:	e001      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03d      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d826      	bhi.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b0d 	.word	0x08006b0d
 8006afc:	08006b1b 	.word	0x08006b1b
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b45 	.word	0x08006b45
 8006b08:	08006b45 	.word	0x08006b45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b0c:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a8c      	ldr	r2, [pc, #560]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b18:	e015      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fcdf 	bl	80084e4 <RCCEx_PLL2_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b2a:	e00c      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3324      	adds	r3, #36	; 0x24
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fd88 	bl	8008648 <RCCEx_PLL3_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b3c:	e003      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]
      break;
 8006b42:	e000      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b4c:	4b7d      	ldr	r3, [pc, #500]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	f023 0207 	bic.w	r2, r3, #7
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	497a      	ldr	r1, [pc, #488]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b5e:	e001      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d03e      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d01c      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006b78:	2b80      	cmp	r3, #128	; 0x80
 8006b7a:	d804      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d008      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d00d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006b84:	e01e      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006b86:	2bc0      	cmp	r3, #192	; 0xc0
 8006b88:	d01f      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	d01e      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006b90:	e018      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b92:	4b6c      	ldr	r3, [pc, #432]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	4a6b      	ldr	r2, [pc, #428]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006b9e:	e017      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fc9c 	bl	80084e4 <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bb0:	e00e      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3324      	adds	r3, #36	; 0x24
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 fd45 	bl	8008648 <RCCEx_PLL3_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bc2:	e005      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc8:	e002      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006bd6:	4b5b      	ldr	r3, [pc, #364]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be2:	4958      	ldr	r1, [pc, #352]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	650b      	str	r3, [r1, #80]	; 0x50
 8006be8:	e001      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d044      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c04:	d01f      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0a:	d805      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c14:	d00e      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006c16:	e01f      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006c18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c1c:	d01f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c22:	d01e      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006c24:	e018      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c26:	4b47      	ldr	r3, [pc, #284]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	4a46      	ldr	r2, [pc, #280]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c32:	e017      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 fc52 	bl	80084e4 <RCCEx_PLL2_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c44:	e00e      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 fcfb 	bl	8008648 <RCCEx_PLL3_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c56:	e005      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c6a:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c78:	4932      	ldr	r1, [pc, #200]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c7e:	e001      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d044      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9a:	d01f      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ca0:	d805      	bhi.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006ca6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006caa:	d00e      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006cac:	e01f      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006cae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cb2:	d01f      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb8:	d01e      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006cba:	e018      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cbc:	4b21      	ldr	r3, [pc, #132]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	4a20      	ldr	r2, [pc, #128]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cc8:	e017      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 fc07 	bl	80084e4 <RCCEx_PLL2_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006cda:	e00e      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3324      	adds	r3, #36	; 0x24
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 fcb0 	bl	8008648 <RCCEx_PLL3_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cec:	e005      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf2:	e002      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006cf4:	bf00      	nop
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d0e:	490d      	ldr	r1, [pc, #52]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	658b      	str	r3, [r1, #88]	; 0x58
 8006d14:	e001      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d035      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d00c      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d802      	bhi.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01b      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006d36:	e017      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d00c      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006d3c:	2b30      	cmp	r3, #48	; 0x30
 8006d3e:	d018      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006d40:	e012      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006d42:	bf00      	nop
 8006d44:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d48:	4baf      	ldr	r3, [pc, #700]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	4aae      	ldr	r2, [pc, #696]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006d54:	e00e      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 fbc1 	bl	80084e4 <RCCEx_PLL2_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006d66:	e005      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d7a:	4ba3      	ldr	r3, [pc, #652]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d86:	49a0      	ldr	r1, [pc, #640]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d8c:	e001      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d042      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da6:	d01f      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	d805      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	d00e      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006db8:	e01f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006dba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dbe:	d01f      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc4:	d01e      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006dc6:	e018      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc8:	4b8f      	ldr	r3, [pc, #572]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a8e      	ldr	r2, [pc, #568]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006dd4:	e017      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 fb81 	bl	80084e4 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006de6:	e00e      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3324      	adds	r3, #36	; 0x24
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 fc2a 	bl	8008648 <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006df8:	e005      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e0c:	4b7e      	ldr	r3, [pc, #504]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e18:	497b      	ldr	r1, [pc, #492]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	650b      	str	r3, [r1, #80]	; 0x50
 8006e1e:	e001      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d042      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e38:	d01b      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e3e:	d805      	bhi.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d022      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e48:	d00a      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e4a:	e01b      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e50:	d01d      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e56:	d01c      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e5c:	d01b      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006e5e:	e011      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	2101      	movs	r1, #1
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fb3c 	bl	80084e4 <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006e70:	e012      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	; 0x24
 8006e76:	2101      	movs	r1, #1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 fbe5 	bl	8008648 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006e82:	e009      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	e006      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e004      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e9e:	4b5a      	ldr	r3, [pc, #360]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eaa:	4957      	ldr	r1, [pc, #348]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	650b      	str	r3, [r1, #80]	; 0x50
 8006eb0:	e001      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d044      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ecc:	d01b      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed2:	d805      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d022      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006ede:	e01b      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee4:	d01d      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eea:	d01c      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ef0:	d01b      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ef2:	e011      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 faf2 	bl	80084e4 <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f04:	e012      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3324      	adds	r3, #36	; 0x24
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fb9b 	bl	8008648 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f16:	e009      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f32:	4b35      	ldr	r3, [pc, #212]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f40:	4931      	ldr	r1, [pc, #196]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	658b      	str	r3, [r1, #88]	; 0x58
 8006f46:	e001      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d02d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f60:	d005      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f66:	d009      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d013      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006f6c:	e00f      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6e:	4b26      	ldr	r3, [pc, #152]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	4a25      	ldr	r2, [pc, #148]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f7a:	e00c      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	2101      	movs	r1, #1
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 faae 	bl	80084e4 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f8c:	e003      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	75fb      	strb	r3, [r7, #23]
      break;
 8006f92:	e000      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d109      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa8:	4917      	ldr	r1, [pc, #92]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	650b      	str	r3, [r1, #80]	; 0x50
 8006fae:	e001      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d035      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d81b      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	0800700d 	.word	0x0800700d
 8006fd4:	08006fe1 	.word	0x08006fe1
 8006fd8:	08006fef 	.word	0x08006fef
 8006fdc:	0800700d 	.word	0x0800700d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a08      	ldr	r2, [pc, #32]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006fec:	e00f      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 fa75 	bl	80084e4 <RCCEx_PLL2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ffe:	e006      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      break;
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007006:	bf00      	nop
 8007008:	58024400 	.word	0x58024400
      break;
 800700c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007014:	4bba      	ldr	r3, [pc, #744]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007018:	f023 0203 	bic.w	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	49b7      	ldr	r1, [pc, #732]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007022:	4313      	orrs	r3, r2
 8007024:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007026:	e001      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8086 	beq.w	8007146 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800703a:	4bb2      	ldr	r3, [pc, #712]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4ab1      	ldr	r2, [pc, #708]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007046:	f7fa fedb 	bl	8001e00 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800704c:	e009      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800704e:	f7fa fed7 	bl	8001e00 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b64      	cmp	r3, #100	; 0x64
 800705a:	d902      	bls.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	75fb      	strb	r3, [r7, #23]
        break;
 8007060:	e005      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007062:	4ba8      	ldr	r3, [pc, #672]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ef      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d166      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007074:	4ba2      	ldr	r3, [pc, #648]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800707e:	4053      	eors	r3, r2
 8007080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007084:	2b00      	cmp	r3, #0
 8007086:	d013      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007088:	4b9d      	ldr	r3, [pc, #628]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800708a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007090:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007092:	4b9b      	ldr	r3, [pc, #620]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a9a      	ldr	r2, [pc, #616]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800709e:	4b98      	ldr	r3, [pc, #608]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a97      	ldr	r2, [pc, #604]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070aa:	4a95      	ldr	r2, [pc, #596]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ba:	d115      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fa fea0 	bl	8001e00 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070c2:	e00b      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c4:	f7fa fe9c 	bl	8001e00 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d902      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	75fb      	strb	r3, [r7, #23]
            break;
 80070da:	e005      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070dc:	4b88      	ldr	r3, [pc, #544]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0ed      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d126      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fc:	d10d      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80070fe:	4b80      	ldr	r3, [pc, #512]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800710c:	0919      	lsrs	r1, r3, #4
 800710e:	4b7e      	ldr	r3, [pc, #504]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007110:	400b      	ands	r3, r1
 8007112:	497b      	ldr	r1, [pc, #492]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007114:	4313      	orrs	r3, r2
 8007116:	610b      	str	r3, [r1, #16]
 8007118:	e005      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800711a:	4b79      	ldr	r3, [pc, #484]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	4a78      	ldr	r2, [pc, #480]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007120:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007124:	6113      	str	r3, [r2, #16]
 8007126:	4b76      	ldr	r3, [pc, #472]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007128:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007134:	4972      	ldr	r1, [pc, #456]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007136:	4313      	orrs	r3, r2
 8007138:	670b      	str	r3, [r1, #112]	; 0x70
 800713a:	e004      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	75bb      	strb	r3, [r7, #22]
 8007140:	e001      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d07d      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007156:	2b28      	cmp	r3, #40	; 0x28
 8007158:	d866      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	0800722f 	.word	0x0800722f
 8007164:	08007229 	.word	0x08007229
 8007168:	08007229 	.word	0x08007229
 800716c:	08007229 	.word	0x08007229
 8007170:	08007229 	.word	0x08007229
 8007174:	08007229 	.word	0x08007229
 8007178:	08007229 	.word	0x08007229
 800717c:	08007229 	.word	0x08007229
 8007180:	08007205 	.word	0x08007205
 8007184:	08007229 	.word	0x08007229
 8007188:	08007229 	.word	0x08007229
 800718c:	08007229 	.word	0x08007229
 8007190:	08007229 	.word	0x08007229
 8007194:	08007229 	.word	0x08007229
 8007198:	08007229 	.word	0x08007229
 800719c:	08007229 	.word	0x08007229
 80071a0:	08007217 	.word	0x08007217
 80071a4:	08007229 	.word	0x08007229
 80071a8:	08007229 	.word	0x08007229
 80071ac:	08007229 	.word	0x08007229
 80071b0:	08007229 	.word	0x08007229
 80071b4:	08007229 	.word	0x08007229
 80071b8:	08007229 	.word	0x08007229
 80071bc:	08007229 	.word	0x08007229
 80071c0:	0800722f 	.word	0x0800722f
 80071c4:	08007229 	.word	0x08007229
 80071c8:	08007229 	.word	0x08007229
 80071cc:	08007229 	.word	0x08007229
 80071d0:	08007229 	.word	0x08007229
 80071d4:	08007229 	.word	0x08007229
 80071d8:	08007229 	.word	0x08007229
 80071dc:	08007229 	.word	0x08007229
 80071e0:	0800722f 	.word	0x0800722f
 80071e4:	08007229 	.word	0x08007229
 80071e8:	08007229 	.word	0x08007229
 80071ec:	08007229 	.word	0x08007229
 80071f0:	08007229 	.word	0x08007229
 80071f4:	08007229 	.word	0x08007229
 80071f8:	08007229 	.word	0x08007229
 80071fc:	08007229 	.word	0x08007229
 8007200:	0800722f 	.word	0x0800722f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3304      	adds	r3, #4
 8007208:	2101      	movs	r1, #1
 800720a:	4618      	mov	r0, r3
 800720c:	f001 f96a 	bl	80084e4 <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007214:	e00c      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3324      	adds	r3, #36	; 0x24
 800721a:	2101      	movs	r1, #1
 800721c:	4618      	mov	r0, r3
 800721e:	f001 fa13 	bl	8008648 <RCCEx_PLL3_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007226:	e003      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
      break;
 800722c:	e000      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800722e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007236:	4b32      	ldr	r3, [pc, #200]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007242:	492f      	ldr	r1, [pc, #188]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007244:	4313      	orrs	r3, r2
 8007246:	654b      	str	r3, [r1, #84]	; 0x54
 8007248:	e001      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d037      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725e:	2b05      	cmp	r3, #5
 8007260:	d820      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	080072ab 	.word	0x080072ab
 800726c:	08007281 	.word	0x08007281
 8007270:	08007293 	.word	0x08007293
 8007274:	080072ab 	.word	0x080072ab
 8007278:	080072ab 	.word	0x080072ab
 800727c:	080072ab 	.word	0x080072ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3304      	adds	r3, #4
 8007284:	2101      	movs	r1, #1
 8007286:	4618      	mov	r0, r3
 8007288:	f001 f92c 	bl	80084e4 <RCCEx_PLL2_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007290:	e00c      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3324      	adds	r3, #36	; 0x24
 8007296:	2101      	movs	r1, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f9d5 	bl	8008648 <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]
      break;
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80072aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072b2:	4b13      	ldr	r3, [pc, #76]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f023 0207 	bic.w	r2, r3, #7
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072be:	4910      	ldr	r1, [pc, #64]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	654b      	str	r3, [r1, #84]	; 0x54
 80072c4:	e001      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d040      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072dc:	2b05      	cmp	r3, #5
 80072de:	d827      	bhi.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80072e0:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	08007337 	.word	0x08007337
 80072ec:	0800730d 	.word	0x0800730d
 80072f0:	0800731f 	.word	0x0800731f
 80072f4:	08007337 	.word	0x08007337
 80072f8:	08007337 	.word	0x08007337
 80072fc:	08007337 	.word	0x08007337
 8007300:	58024400 	.word	0x58024400
 8007304:	58024800 	.word	0x58024800
 8007308:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	2101      	movs	r1, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f8e6 	bl	80084e4 <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800731c:	e00c      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3324      	adds	r3, #36	; 0x24
 8007322:	2101      	movs	r1, #1
 8007324:	4618      	mov	r0, r3
 8007326:	f001 f98f 	bl	8008648 <RCCEx_PLL3_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800732e:	e003      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	75fb      	strb	r3, [r7, #23]
      break;
 8007334:	e000      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800733e:	4bb2      	ldr	r3, [pc, #712]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	f023 0207 	bic.w	r2, r3, #7
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	49ae      	ldr	r1, [pc, #696]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800734e:	4313      	orrs	r3, r2
 8007350:	658b      	str	r3, [r1, #88]	; 0x58
 8007352:	e001      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d044      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736e:	d01b      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007374:	d805      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d022      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800737a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737e:	d00a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007380:	e01b      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007386:	d01d      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800738c:	d01c      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800738e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007392:	d01b      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007394:	e011      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3304      	adds	r3, #4
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f001 f8a1 	bl	80084e4 <RCCEx_PLL2_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073a6:	e012      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3324      	adds	r3, #36	; 0x24
 80073ac:	2102      	movs	r1, #2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f94a 	bl	8008648 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073b8:	e009      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
      break;
 80073be:	e006      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073c0:	bf00      	nop
 80073c2:	e004      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073c4:	bf00      	nop
 80073c6:	e002      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073d4:	4b8c      	ldr	r3, [pc, #560]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80073d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e2:	4989      	ldr	r1, [pc, #548]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	654b      	str	r3, [r1, #84]	; 0x54
 80073e8:	e001      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d044      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007404:	d01b      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800740a:	d805      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d022      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007414:	d00a      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007416:	e01b      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741c:	d01d      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800741e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007422:	d01c      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007428:	d01b      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800742a:	e011      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f001 f856 	bl	80084e4 <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800743c:	e012      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	2102      	movs	r1, #2
 8007444:	4618      	mov	r0, r3
 8007446:	f001 f8ff 	bl	8008648 <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800744e:	e009      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
      break;
 8007454:	e006      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007456:	bf00      	nop
 8007458:	e004      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800745a:	bf00      	nop
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800745e:	bf00      	nop
 8007460:	e000      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800746a:	4b67      	ldr	r3, [pc, #412]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007478:	4963      	ldr	r1, [pc, #396]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800747a:	4313      	orrs	r3, r2
 800747c:	658b      	str	r3, [r1, #88]	; 0x58
 800747e:	e001      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d044      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800749a:	d01b      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800749c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a0:	d805      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d022      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80074a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80074ac:	e01b      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80074ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b2:	d01d      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80074b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074b8:	d01c      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80074ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074be:	d01b      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80074c0:	e011      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 f80b 	bl	80084e4 <RCCEx_PLL2_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80074d2:	e012      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3324      	adds	r3, #36	; 0x24
 80074d8:	2102      	movs	r1, #2
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f8b4 	bl	8008648 <RCCEx_PLL3_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80074e4:	e009      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ea:	e006      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80074ec:	bf00      	nop
 80074ee:	e004      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80074f0:	bf00      	nop
 80074f2:	e002      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80074f4:	bf00      	nop
 80074f6:	e000      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80074f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007500:	4b41      	ldr	r3, [pc, #260]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007504:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800750e:	493e      	ldr	r1, [pc, #248]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007510:	4313      	orrs	r3, r2
 8007512:	658b      	str	r3, [r1, #88]	; 0x58
 8007514:	e001      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800752c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007530:	d10a      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2102      	movs	r1, #2
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f885 	bl	8008648 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007548:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007556:	492c      	ldr	r1, [pc, #176]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007558:	4313      	orrs	r3, r2
 800755a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01a      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007572:	d10a      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3324      	adds	r3, #36	; 0x24
 8007578:	2102      	movs	r1, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f001 f864 	bl	8008648 <RCCEx_PLL3_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800758a:	4b1f      	ldr	r3, [pc, #124]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007598:	491b      	ldr	r1, [pc, #108]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800759a:	4313      	orrs	r3, r2
 800759c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d032      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b4:	d00d      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80075b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ba:	d016      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d111      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 ff8c 	bl	80084e4 <RCCEx_PLL2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80075d0:	e00c      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3324      	adds	r3, #36	; 0x24
 80075d6:	2102      	movs	r1, #2
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f835 	bl	8008648 <RCCEx_PLL3_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
      break;
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80075ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007600:	4901      	ldr	r1, [pc, #4]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007602:	4313      	orrs	r3, r2
 8007604:	658b      	str	r3, [r1, #88]	; 0x58
 8007606:	e003      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d02f      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007626:	d00c      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800762c:	d015      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800762e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007632:	d10f      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007634:	4b71      	ldr	r3, [pc, #452]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4a70      	ldr	r2, [pc, #448]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800763a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007640:	e00c      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	2101      	movs	r1, #1
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fffd 	bl	8008648 <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007652:	e003      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800765a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007662:	4b66      	ldr	r3, [pc, #408]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007670:	4962      	ldr	r1, [pc, #392]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007672:	4313      	orrs	r3, r2
 8007674:	654b      	str	r3, [r1, #84]	; 0x54
 8007676:	e001      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d029      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007694:	d007      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007696:	e00f      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007698:	4b58      	ldr	r3, [pc, #352]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4a57      	ldr	r2, [pc, #348]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800769e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076a4:	e00b      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3304      	adds	r3, #4
 80076aa:	2102      	movs	r1, #2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 ff19 	bl	80084e4 <RCCEx_PLL2_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076b6:	e002      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	75fb      	strb	r3, [r7, #23]
      break;
 80076bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076c4:	4b4d      	ldr	r3, [pc, #308]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80076c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d0:	494a      	ldr	r1, [pc, #296]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076d6:	e001      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3324      	adds	r3, #36	; 0x24
 80076ec:	2102      	movs	r1, #2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 ffaa 	bl	8008648 <RCCEx_PLL3_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02f      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800770e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007712:	d00c      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007718:	d802      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d011      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800771e:	e00d      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d00f      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800772a:	d00e      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800772c:	e006      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772e:	4b33      	ldr	r3, [pc, #204]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	4a32      	ldr	r2, [pc, #200]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800773a:	e007      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
      break;
 8007740:	e004      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007742:	bf00      	nop
 8007744:	e002      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800774a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007752:	4b2a      	ldr	r3, [pc, #168]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775e:	4927      	ldr	r1, [pc, #156]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007760:	4313      	orrs	r3, r2
 8007762:	654b      	str	r3, [r1, #84]	; 0x54
 8007764:	e001      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d008      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007776:	4b21      	ldr	r3, [pc, #132]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	491e      	ldr	r1, [pc, #120]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007784:	4313      	orrs	r3, r2
 8007786:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d008      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007794:	4b19      	ldr	r3, [pc, #100]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a0:	4916      	ldr	r1, [pc, #88]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	4a11      	ldr	r2, [pc, #68]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077bc:	6113      	str	r3, [r2, #16]
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80077c8:	490c      	ldr	r1, [pc, #48]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da08      	bge.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077d6:	4b09      	ldr	r3, [pc, #36]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e2:	4906      	ldr	r1, [pc, #24]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80077e8:	7dbb      	ldrb	r3, [r7, #22]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	e000      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	58024400 	.word	0x58024400

08007800 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b090      	sub	sp, #64	; 0x40
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780e:	d150      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007810:	4ba1      	ldr	r3, [pc, #644]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	2b04      	cmp	r3, #4
 800781e:	d844      	bhi.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	0800783d 	.word	0x0800783d
 800782c:	0800784d 	.word	0x0800784d
 8007830:	0800785d 	.word	0x0800785d
 8007834:	080078a5 	.word	0x080078a5
 8007838:	0800786d 	.word	0x0800786d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800783c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fd03 	bl	800824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784a:	e241      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784c:	f107 0318 	add.w	r3, r7, #24
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fa63 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800785a:	e239      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785c:	f107 030c 	add.w	r3, r7, #12
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fba7 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800786a:	e231      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800786c:	4b8a      	ldr	r3, [pc, #552]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800786e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007874:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800787c:	4b87      	ldr	r3, [pc, #540]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007880:	e226      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007888:	d102      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800788a:	4b85      	ldr	r3, [pc, #532]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800788e:	e21f      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007896:	d102      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007898:	4b82      	ldr	r3, [pc, #520]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789c:	e218      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a2:	e215      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078a4:	4b80      	ldr	r3, [pc, #512]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a8:	e212      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ae:	bf00      	nop
 80078b0:	e20e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078b8:	d14f      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80078ba:	4b77      	ldr	r3, [pc, #476]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	2b80      	cmp	r3, #128	; 0x80
 80078c8:	d01c      	beq.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d804      	bhi.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d00e      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80078d6:	e03c      	b.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80078d8:	2bc0      	cmp	r3, #192	; 0xc0
 80078da:	d037      	beq.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e0:	d018      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80078e2:	e036      	b.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fcaf 	bl	800824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f2:	e1ed      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f4:	f107 0318 	add.w	r3, r7, #24
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fa0f 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007902:	e1e5      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007904:	f107 030c 	add.w	r3, r7, #12
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fb53 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007912:	e1dd      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007914:	4b60      	ldr	r3, [pc, #384]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800791c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007924:	4b5d      	ldr	r3, [pc, #372]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007928:	e1d2      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007930:	d102      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007932:	4b5b      	ldr	r3, [pc, #364]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007936:	e1cb      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793e:	d102      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007940:	4b58      	ldr	r3, [pc, #352]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007944:	e1c4      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800794a:	e1c1      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800794c:	4b56      	ldr	r3, [pc, #344]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007950:	e1be      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007956:	bf00      	nop
 8007958:	e1ba      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007960:	d153      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007962:	4b4d      	ldr	r3, [pc, #308]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007966:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800796a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007972:	d01f      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007978:	d805      	bhi.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800797e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007982:	d00f      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007984:	e03d      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007986:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800798a:	d037      	beq.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800798c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007990:	d018      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007992:	e036      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fc57 	bl	800824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a2:	e195      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a4:	f107 0318 	add.w	r3, r7, #24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 f9b7 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b2:	e18d      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b4:	f107 030c 	add.w	r3, r7, #12
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fafb 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079c2:	e185      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079c4:	4b34      	ldr	r3, [pc, #208]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d102      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80079d4:	4b31      	ldr	r3, [pc, #196]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80079d8:	e17a      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079e0:	d102      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80079e2:	4b2f      	ldr	r3, [pc, #188]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e6:	e173      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ee:	d102      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80079f0:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f4:	e16c      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079fa:	e169      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079fc:	4b2a      	ldr	r3, [pc, #168]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a00:	e166      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a06:	bf00      	nop
 8007a08:	e162      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a10:	d15d      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007a12:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007a1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a22:	d01f      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a28:	d805      	bhi.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007a2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a32:	d00f      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007a34:	e047      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007a36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a3a:	d041      	beq.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a40:	d018      	beq.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007a42:	e040      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fbff 	bl	800824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a52:	e13d      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a54:	f107 0318 	add.w	r3, r7, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f95f 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a62:	e135      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 faa3 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a72:	e12d      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a74:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a88:	e122      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a90:	d10c      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007a92:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a96:	e11b      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	03d09000 	.word	0x03d09000
 8007aa0:	003d0900 	.word	0x003d0900
 8007aa4:	017d7840 	.word	0x017d7840
 8007aa8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab2:	d102      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007ab4:	4b89      	ldr	r3, [pc, #548]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab8:	e10a      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007abe:	e107      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ac0:	4b87      	ldr	r3, [pc, #540]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac4:	e104      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aca:	bf00      	nop
 8007acc:	e100      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad4:	d153      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ad6:	4b83      	ldr	r3, [pc, #524]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ada:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ade:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae6:	d01f      	beq.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aec:	d805      	bhi.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af6:	d00f      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007af8:	e03d      	b.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007afa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007afe:	d037      	beq.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b04:	d018      	beq.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007b06:	e036      	b.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fb9d 	bl	800824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b16:	e0db      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b18:	f107 0318 	add.w	r3, r7, #24
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 f8fd 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b26:	e0d3      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b28:	f107 030c 	add.w	r3, r7, #12
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fa41 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b36:	e0cb      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b38:	4b6a      	ldr	r3, [pc, #424]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b48:	4b67      	ldr	r3, [pc, #412]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b4c:	e0c0      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b54:	d102      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007b56:	4b65      	ldr	r3, [pc, #404]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b5a:	e0b9      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b62:	d102      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007b64:	4b5d      	ldr	r3, [pc, #372]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b68:	e0b2      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b6e:	e0af      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b70:	4b5b      	ldr	r3, [pc, #364]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b74:	e0ac      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b7a:	bf00      	nop
 8007b7c:	e0a8      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b84:	d13d      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007b86:	4b57      	ldr	r3, [pc, #348]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b96:	d00c      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b9c:	d011      	beq.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d12b      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba2:	f107 0318 	add.w	r3, r7, #24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f8b8 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb0:	e08e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 f9fc 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc0:	e086      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bc2:	4b48      	ldr	r3, [pc, #288]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bd2:	4b45      	ldr	r3, [pc, #276]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bd6:	e07b      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bde:	d102      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007be0:	4b42      	ldr	r3, [pc, #264]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be4:	e074      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bec:	d102      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007bee:	4b3b      	ldr	r3, [pc, #236]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf2:	e06d      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf8:	e06a      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bfe:	bf00      	nop
 8007c00:	e066      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d11f      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007c0a:	4b36      	ldr	r3, [pc, #216]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1e:	d008      	beq.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007c20:	e00f      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fb10 	bl	800824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c30:	e04e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c32:	f107 0318 	add.w	r3, r7, #24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f870 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c40:	e046      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c46:	bf00      	nop
 8007c48:	e042      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c50:	d13c      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007c52:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c56:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007c5a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c62:	d01e      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c68:	d805      	bhi.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00d      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c72:	d00e      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007c74:	e026      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7a:	d01d      	beq.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c80:	d01d      	beq.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c86:	d014      	beq.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007c88:	e01c      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007c8a:	f000 f831 	bl	8007cf0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c8e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007c90:	e01e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c92:	f107 0318 	add.w	r3, r7, #24
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f840 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca0:	e016      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f984 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb0:	e00e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	e00b      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cbc:	e008      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc2:	e005      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc8:	bf00      	nop
 8007cca:	e001      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3740      	adds	r7, #64	; 0x40
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	017d7840 	.word	0x017d7840
 8007ce0:	00bb8000 	.word	0x00bb8000
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	03d09000 	.word	0x03d09000
 8007cec:	003d0900 	.word	0x003d0900

08007cf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007cf4:	f7fe fe4a 	bl	800698c <HAL_RCC_GetHCLKFreq>
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	4a04      	ldr	r2, [pc, #16]	; (8007d18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d06:	5cd3      	ldrb	r3, [r2, r3]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	58024400 	.word	0x58024400
 8007d18:	0800c66c 	.word	0x0800c66c

08007d1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b089      	sub	sp, #36	; 0x24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d24:	4b9d      	ldr	r3, [pc, #628]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d2e:	4b9b      	ldr	r3, [pc, #620]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	0b1b      	lsrs	r3, r3, #12
 8007d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d3a:	4b98      	ldr	r3, [pc, #608]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	091b      	lsrs	r3, r3, #4
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d46:	4b95      	ldr	r3, [pc, #596]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	08db      	lsrs	r3, r3, #3
 8007d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	fb02 f303 	mul.w	r3, r2, r3
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 810a 	beq.w	8007f7e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d05a      	beq.n	8007e26 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d302      	bcc.n	8007d7a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d078      	beq.n	8007e6a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007d78:	e099      	b.n	8007eae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d7a:	4b88      	ldr	r3, [pc, #544]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d02d      	beq.n	8007de2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d86:	4b85      	ldr	r3, [pc, #532]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	08db      	lsrs	r3, r3, #3
 8007d8c:	f003 0303 	and.w	r3, r3, #3
 8007d90:	4a83      	ldr	r2, [pc, #524]	; (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007d92:	fa22 f303 	lsr.w	r3, r2, r3
 8007d96:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db0:	4b7a      	ldr	r3, [pc, #488]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007de0:	e087      	b.n	8007ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df4:	4b69      	ldr	r3, [pc, #420]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e24:	e065      	b.n	8007ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b58      	ldr	r3, [pc, #352]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e68:	e043      	b.n	8007ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7c:	4b47      	ldr	r3, [pc, #284]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eac:	e021      	b.n	8007ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec0:	4b36      	ldr	r3, [pc, #216]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ef0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007ef2:	4b2a      	ldr	r3, [pc, #168]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	0a5b      	lsrs	r3, r3, #9
 8007ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efc:	ee07 3a90 	vmov	s15, r3
 8007f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f18:	ee17 2a90 	vmov	r2, s15
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f20:	4b1e      	ldr	r3, [pc, #120]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	0c1b      	lsrs	r3, r3, #16
 8007f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f46:	ee17 2a90 	vmov	r2, s15
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	0e1b      	lsrs	r3, r3, #24
 8007f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f74:	ee17 2a90 	vmov	r2, s15
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f7c:	e008      	b.n	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	609a      	str	r2, [r3, #8]
}
 8007f90:	bf00      	nop
 8007f92:	3724      	adds	r7, #36	; 0x24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	03d09000 	.word	0x03d09000
 8007fa4:	46000000 	.word	0x46000000
 8007fa8:	4c742400 	.word	0x4c742400
 8007fac:	4a742400 	.word	0x4a742400
 8007fb0:	4bbebc20 	.word	0x4bbebc20

08007fb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b089      	sub	sp, #36	; 0x24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fbc:	4b9d      	ldr	r3, [pc, #628]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007fc6:	4b9b      	ldr	r3, [pc, #620]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	0d1b      	lsrs	r3, r3, #20
 8007fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007fd2:	4b98      	ldr	r3, [pc, #608]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007fde:	4b95      	ldr	r3, [pc, #596]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	08db      	lsrs	r3, r3, #3
 8007fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 810a 	beq.w	8008216 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d05a      	beq.n	80080be <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008008:	2b01      	cmp	r3, #1
 800800a:	d302      	bcc.n	8008012 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800800c:	2b02      	cmp	r3, #2
 800800e:	d078      	beq.n	8008102 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008010:	e099      	b.n	8008146 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008012:	4b88      	ldr	r3, [pc, #544]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d02d      	beq.n	800807a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800801e:	4b85      	ldr	r3, [pc, #532]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	08db      	lsrs	r3, r3, #3
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	4a83      	ldr	r2, [pc, #524]	; (8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800802a:	fa22 f303 	lsr.w	r3, r2, r3
 800802e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008048:	4b7a      	ldr	r3, [pc, #488]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008058:	ed97 6a03 	vldr	s12, [r7, #12]
 800805c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800823c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008074:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008078:	e087      	b.n	800818a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	ee07 3a90 	vmov	s15, r3
 8008080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008084:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800808c:	4b69      	ldr	r3, [pc, #420]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809c:	ed97 6a03 	vldr	s12, [r7, #12]
 80080a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800823c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080bc:	e065      	b.n	800818a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80080cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d0:	4b58      	ldr	r3, [pc, #352]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800823c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008100:	e043      	b.n	800818a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008114:	4b47      	ldr	r3, [pc, #284]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008124:	ed97 6a03 	vldr	s12, [r7, #12]
 8008128:	eddf 5a44 	vldr	s11, [pc, #272]	; 800823c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800812c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008140:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008144:	e021      	b.n	800818a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008158:	4b36      	ldr	r3, [pc, #216]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008168:	ed97 6a03 	vldr	s12, [r7, #12]
 800816c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800823c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008188:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800818a:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	0a5b      	lsrs	r3, r3, #9
 8008190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80081a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b0:	ee17 2a90 	vmov	r2, s15
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80081b8:	4b1e      	ldr	r3, [pc, #120]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081de:	ee17 2a90 	vmov	r2, s15
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008200:	edd7 6a07 	vldr	s13, [r7, #28]
 8008204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800820c:	ee17 2a90 	vmov	r2, s15
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008214:	e008      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	609a      	str	r2, [r3, #8]
}
 8008228:	bf00      	nop
 800822a:	3724      	adds	r7, #36	; 0x24
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	58024400 	.word	0x58024400
 8008238:	03d09000 	.word	0x03d09000
 800823c:	46000000 	.word	0x46000000
 8008240:	4c742400 	.word	0x4c742400
 8008244:	4a742400 	.word	0x4a742400
 8008248:	4bbebc20 	.word	0x4bbebc20

0800824c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800824c:	b480      	push	{r7}
 800824e:	b089      	sub	sp, #36	; 0x24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008254:	4b9d      	ldr	r3, [pc, #628]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800825e:	4b9b      	ldr	r3, [pc, #620]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008268:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800826a:	4b98      	ldr	r3, [pc, #608]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008274:	4b95      	ldr	r3, [pc, #596]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	fb02 f303 	mul.w	r3, r2, r3
 8008284:	ee07 3a90 	vmov	s15, r3
 8008288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 810a 	beq.w	80084ac <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d05a      	beq.n	8008354 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d302      	bcc.n	80082a8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d078      	beq.n	8008398 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80082a6:	e099      	b.n	80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a8:	4b88      	ldr	r3, [pc, #544]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d02d      	beq.n	8008310 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082b4:	4b85      	ldr	r3, [pc, #532]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	08db      	lsrs	r3, r3, #3
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	4a84      	ldr	r2, [pc, #528]	; (80084d0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800830e:	e087      	b.n	8008420 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	4b6a      	ldr	r3, [pc, #424]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	ed97 6a03 	vldr	s12, [r7, #12]
 8008336:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800833a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008352:	e065      	b.n	8008420 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b59      	ldr	r3, [pc, #356]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008396:	e043      	b.n	8008420 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b48      	ldr	r3, [pc, #288]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80083be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083da:	e021      	b.n	8008420 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b37      	ldr	r3, [pc, #220]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008402:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800841e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008420:	4b2a      	ldr	r3, [pc, #168]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	0a5b      	lsrs	r3, r3, #9
 8008426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800843a:	edd7 6a07 	vldr	s13, [r7, #28]
 800843e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008446:	ee17 2a90 	vmov	r2, s15
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800844e:	4b1f      	ldr	r3, [pc, #124]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008468:	edd7 6a07 	vldr	s13, [r7, #28]
 800846c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800847c:	4b13      	ldr	r3, [pc, #76]	; (80084cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	0e1b      	lsrs	r3, r3, #24
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80084aa:	e008      	b.n	80084be <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
}
 80084be:	bf00      	nop
 80084c0:	3724      	adds	r7, #36	; 0x24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	58024400 	.word	0x58024400
 80084d0:	03d09000 	.word	0x03d09000
 80084d4:	46000000 	.word	0x46000000
 80084d8:	4c742400 	.word	0x4c742400
 80084dc:	4a742400 	.word	0x4a742400
 80084e0:	4bbebc20 	.word	0x4bbebc20

080084e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084f2:	4b53      	ldr	r3, [pc, #332]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d101      	bne.n	8008502 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e099      	b.n	8008636 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008502:	4b4f      	ldr	r3, [pc, #316]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a4e      	ldr	r2, [pc, #312]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800850c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800850e:	f7f9 fc77 	bl	8001e00 <HAL_GetTick>
 8008512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008514:	e008      	b.n	8008528 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008516:	f7f9 fc73 	bl	8001e00 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e086      	b.n	8008636 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008528:	4b45      	ldr	r3, [pc, #276]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1f0      	bne.n	8008516 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008534:	4b42      	ldr	r3, [pc, #264]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	493f      	ldr	r1, [pc, #252]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008544:	4313      	orrs	r3, r2
 8008546:	628b      	str	r3, [r1, #40]	; 0x28
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	3b01      	subs	r3, #1
 800854e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	3b01      	subs	r3, #1
 8008558:	025b      	lsls	r3, r3, #9
 800855a:	b29b      	uxth	r3, r3
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	3b01      	subs	r3, #1
 8008564:	041b      	lsls	r3, r3, #16
 8008566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	3b01      	subs	r3, #1
 8008572:	061b      	lsls	r3, r3, #24
 8008574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008578:	4931      	ldr	r1, [pc, #196]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800857e:	4b30      	ldr	r3, [pc, #192]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	492d      	ldr	r1, [pc, #180]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800858c:	4313      	orrs	r3, r2
 800858e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008590:	4b2b      	ldr	r3, [pc, #172]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	f023 0220 	bic.w	r2, r3, #32
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	4928      	ldr	r1, [pc, #160]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085a2:	4b27      	ldr	r3, [pc, #156]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	4a26      	ldr	r2, [pc, #152]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085a8:	f023 0310 	bic.w	r3, r3, #16
 80085ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <RCCEx_PLL2_Config+0x160>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	69d2      	ldr	r2, [r2, #28]
 80085ba:	00d2      	lsls	r2, r2, #3
 80085bc:	4920      	ldr	r1, [pc, #128]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085c2:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	4a1e      	ldr	r2, [pc, #120]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085c8:	f043 0310 	orr.w	r3, r3, #16
 80085cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085d4:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a19      	ldr	r2, [pc, #100]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085e0:	e00f      	b.n	8008602 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d106      	bne.n	80085f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085e8:	4b15      	ldr	r3, [pc, #84]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085f4:	e005      	b.n	8008602 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	4a11      	ldr	r2, [pc, #68]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800860c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800860e:	f7f9 fbf7 	bl	8001e00 <HAL_GetTick>
 8008612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008614:	e008      	b.n	8008628 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008616:	f7f9 fbf3 	bl	8001e00 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e006      	b.n	8008636 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
 8008644:	ffff0007 	.word	0xffff0007

08008648 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008656:	4b53      	ldr	r3, [pc, #332]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	2b03      	cmp	r3, #3
 8008660:	d101      	bne.n	8008666 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e099      	b.n	800879a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008666:	4b4f      	ldr	r3, [pc, #316]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a4e      	ldr	r2, [pc, #312]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800866c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008672:	f7f9 fbc5 	bl	8001e00 <HAL_GetTick>
 8008676:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008678:	e008      	b.n	800868c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800867a:	f7f9 fbc1 	bl	8001e00 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d901      	bls.n	800868c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e086      	b.n	800879a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800868c:	4b45      	ldr	r3, [pc, #276]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f0      	bne.n	800867a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008698:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	051b      	lsls	r3, r3, #20
 80086a6:	493f      	ldr	r1, [pc, #252]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	628b      	str	r3, [r1, #40]	; 0x28
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	025b      	lsls	r3, r3, #9
 80086be:	b29b      	uxth	r3, r3
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086dc:	4931      	ldr	r1, [pc, #196]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086e2:	4b30      	ldr	r3, [pc, #192]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	492d      	ldr	r1, [pc, #180]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80086f4:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	4928      	ldr	r1, [pc, #160]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008702:	4313      	orrs	r3, r2
 8008704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008706:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	4a26      	ldr	r2, [pc, #152]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800870c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008716:	4b24      	ldr	r3, [pc, #144]	; (80087a8 <RCCEx_PLL3_Config+0x160>)
 8008718:	4013      	ands	r3, r2
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	69d2      	ldr	r2, [r2, #28]
 800871e:	00d2      	lsls	r2, r2, #3
 8008720:	4920      	ldr	r1, [pc, #128]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008726:	4b1f      	ldr	r3, [pc, #124]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	4a1e      	ldr	r2, [pc, #120]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800872c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008738:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800873e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008744:	e00f      	b.n	8008766 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800874c:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008758:	e005      	b.n	8008766 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a0e      	ldr	r2, [pc, #56]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800876c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008772:	f7f9 fb45 	bl	8001e00 <HAL_GetTick>
 8008776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008778:	e008      	b.n	800878c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800877a:	f7f9 fb41 	bl	8001e00 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e006      	b.n	800879a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f0      	beq.n	800877a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	58024400 	.word	0x58024400
 80087a8:	ffff0007 	.word	0xffff0007

080087ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e01d      	b.n	80087fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7f8 ff6a 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f000 f97c 	bl	8008ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <HAL_TIM_Base_Start_IT+0x50>)
 8008824:	4013      	ands	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b06      	cmp	r3, #6
 800882c:	d00b      	beq.n	8008846 <HAL_TIM_Base_Start_IT+0x42>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008834:	d007      	beq.n	8008846 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f042 0201 	orr.w	r2, r2, #1
 8008844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	00010007 	.word	0x00010007

08008858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b02      	cmp	r3, #2
 800886c:	d122      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b02      	cmp	r3, #2
 800887a:	d11b      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0202 	mvn.w	r2, #2
 8008884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f905 	bl	8008aaa <HAL_TIM_IC_CaptureCallback>
 80088a0:	e005      	b.n	80088ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8f7 	bl	8008a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f908 	bl	8008abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d122      	bne.n	8008908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d11b      	bne.n	8008908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0204 	mvn.w	r2, #4
 80088d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2202      	movs	r2, #2
 80088de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f8db 	bl	8008aaa <HAL_TIM_IC_CaptureCallback>
 80088f4:	e005      	b.n	8008902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8cd 	bl	8008a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f8de 	bl	8008abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0308 	and.w	r3, r3, #8
 8008912:	2b08      	cmp	r3, #8
 8008914:	d122      	bne.n	800895c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b08      	cmp	r3, #8
 8008922:	d11b      	bne.n	800895c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0208 	mvn.w	r2, #8
 800892c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2204      	movs	r2, #4
 8008932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f8b1 	bl	8008aaa <HAL_TIM_IC_CaptureCallback>
 8008948:	e005      	b.n	8008956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f8a3 	bl	8008a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8b4 	bl	8008abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f003 0310 	and.w	r3, r3, #16
 8008966:	2b10      	cmp	r3, #16
 8008968:	d122      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b10      	cmp	r3, #16
 8008976:	d11b      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f06f 0210 	mvn.w	r2, #16
 8008980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2208      	movs	r2, #8
 8008986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f887 	bl	8008aaa <HAL_TIM_IC_CaptureCallback>
 800899c:	e005      	b.n	80089aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f879 	bl	8008a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f88a 	bl	8008abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0201 	mvn.w	r2, #1
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7f7 ff6e 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e6:	2b80      	cmp	r3, #128	; 0x80
 80089e8:	d10e      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f4:	2b80      	cmp	r3, #128	; 0x80
 80089f6:	d107      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f99c 	bl	8008d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a16:	d10e      	bne.n	8008a36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b80      	cmp	r3, #128	; 0x80
 8008a24:	d107      	bne.n	8008a36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f98f 	bl	8008d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b40      	cmp	r3, #64	; 0x40
 8008a42:	d10e      	bne.n	8008a62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b40      	cmp	r3, #64	; 0x40
 8008a50:	d107      	bne.n	8008a62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f838 	bl	8008ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b20      	cmp	r3, #32
 8008a6e:	d10e      	bne.n	8008a8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d107      	bne.n	8008a8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f06f 0220 	mvn.w	r2, #32
 8008a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f94f 	bl	8008d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a40      	ldr	r2, [pc, #256]	; (8008bfc <TIM_Base_SetConfig+0x114>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d013      	beq.n	8008b28 <TIM_Base_SetConfig+0x40>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b06:	d00f      	beq.n	8008b28 <TIM_Base_SetConfig+0x40>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a3d      	ldr	r2, [pc, #244]	; (8008c00 <TIM_Base_SetConfig+0x118>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00b      	beq.n	8008b28 <TIM_Base_SetConfig+0x40>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a3c      	ldr	r2, [pc, #240]	; (8008c04 <TIM_Base_SetConfig+0x11c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d007      	beq.n	8008b28 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a3b      	ldr	r2, [pc, #236]	; (8008c08 <TIM_Base_SetConfig+0x120>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_Base_SetConfig+0x40>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a3a      	ldr	r2, [pc, #232]	; (8008c0c <TIM_Base_SetConfig+0x124>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d108      	bne.n	8008b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a2f      	ldr	r2, [pc, #188]	; (8008bfc <TIM_Base_SetConfig+0x114>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d01f      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b48:	d01b      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	; (8008c00 <TIM_Base_SetConfig+0x118>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d017      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a2b      	ldr	r2, [pc, #172]	; (8008c04 <TIM_Base_SetConfig+0x11c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d013      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a2a      	ldr	r2, [pc, #168]	; (8008c08 <TIM_Base_SetConfig+0x120>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00f      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a29      	ldr	r2, [pc, #164]	; (8008c0c <TIM_Base_SetConfig+0x124>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00b      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a28      	ldr	r2, [pc, #160]	; (8008c10 <TIM_Base_SetConfig+0x128>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a27      	ldr	r2, [pc, #156]	; (8008c14 <TIM_Base_SetConfig+0x12c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_Base_SetConfig+0x9a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a26      	ldr	r2, [pc, #152]	; (8008c18 <TIM_Base_SetConfig+0x130>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d108      	bne.n	8008b94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a10      	ldr	r2, [pc, #64]	; (8008bfc <TIM_Base_SetConfig+0x114>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00f      	beq.n	8008be0 <TIM_Base_SetConfig+0xf8>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a12      	ldr	r2, [pc, #72]	; (8008c0c <TIM_Base_SetConfig+0x124>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00b      	beq.n	8008be0 <TIM_Base_SetConfig+0xf8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <TIM_Base_SetConfig+0x128>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d007      	beq.n	8008be0 <TIM_Base_SetConfig+0xf8>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a10      	ldr	r2, [pc, #64]	; (8008c14 <TIM_Base_SetConfig+0x12c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_Base_SetConfig+0xf8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a0f      	ldr	r2, [pc, #60]	; (8008c18 <TIM_Base_SetConfig+0x130>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d103      	bne.n	8008be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	615a      	str	r2, [r3, #20]
}
 8008bee:	bf00      	nop
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40000400 	.word	0x40000400
 8008c04:	40000800 	.word	0x40000800
 8008c08:	40000c00 	.word	0x40000c00
 8008c0c:	40010400 	.word	0x40010400
 8008c10:	40014000 	.word	0x40014000
 8008c14:	40014400 	.word	0x40014400
 8008c18:	40014800 	.word	0x40014800

08008c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e068      	b.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2e      	ldr	r2, [pc, #184]	; (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d004      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a2d      	ldr	r2, [pc, #180]	; (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d108      	bne.n	8008c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01d      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca6:	d018      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00e      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a18      	ldr	r2, [pc, #96]	; (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d009      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a13      	ldr	r2, [pc, #76]	; (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d004      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40010400 	.word	0x40010400
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	40000c00 	.word	0x40000c00
 8008d28:	40001800 	.word	0x40001800

08008d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e042      	b.n	8008e00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d106      	bne.n	8008d92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7f8 fcb5 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2224      	movs	r2, #36	; 0x24
 8008d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fc3c 	bl	8009628 <UART_SetConfig>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e022      	b.n	8008e00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f002 fdae 	bl	800b924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f002 fe35 	bl	800ba68 <UART_CheckIdleState>
 8008dfe:	4603      	mov	r3, r0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	f040 8083 	bne.w	8008f2a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_UART_Transmit+0x28>
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e07b      	b.n	8008f2c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_UART_Transmit+0x3a>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e074      	b.n	8008f2c <HAL_UART_Transmit+0x124>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2221      	movs	r2, #33	; 0x21
 8008e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008e5a:	f7f8 ffd1 	bl	8001e00 <HAL_GetTick>
 8008e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	88fa      	ldrh	r2, [r7, #6]
 8008e64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e78:	d108      	bne.n	8008e8c <HAL_UART_Transmit+0x84>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e003      	b.n	8008e94 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e94:	e02c      	b.n	8008ef0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2180      	movs	r1, #128	; 0x80
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f002 fe29 	bl	800baf8 <UART_WaitOnFlagUntilTimeout>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e03d      	b.n	8008f2c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10b      	bne.n	8008ece <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ec4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	3302      	adds	r3, #2
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	e007      	b.n	8008ede <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	3301      	adds	r3, #1
 8008edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1cc      	bne.n	8008e96 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2200      	movs	r2, #0
 8008f04:	2140      	movs	r1, #64	; 0x40
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f002 fdf6 	bl	800baf8 <UART_WaitOnFlagUntilTimeout>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e00a      	b.n	8008f2c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	e000      	b.n	8008f2c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f2a:	2302      	movs	r3, #2
  }
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d168      	bne.n	800901e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <HAL_UART_Transmit_IT+0x24>
 8008f52:	88fb      	ldrh	r3, [r7, #6]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e061      	b.n	8009020 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d101      	bne.n	8008f6a <HAL_UART_Transmit_IT+0x36>
 8008f66:	2302      	movs	r3, #2
 8008f68:	e05a      	b.n	8009020 <HAL_UART_Transmit_IT+0xec>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	88fa      	ldrh	r2, [r7, #6]
 8008f84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2221      	movs	r2, #33	; 0x21
 8008f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa6:	d11c      	bne.n	8008fe2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb0:	d107      	bne.n	8008fc2 <HAL_UART_Transmit_IT+0x8e>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4a1b      	ldr	r2, [pc, #108]	; (800902c <HAL_UART_Transmit_IT+0xf8>)
 8008fbe:	671a      	str	r2, [r3, #112]	; 0x70
 8008fc0:	e002      	b.n	8008fc8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4a1a      	ldr	r2, [pc, #104]	; (8009030 <HAL_UART_Transmit_IT+0xfc>)
 8008fc6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008fde:	609a      	str	r2, [r3, #8]
 8008fe0:	e01b      	b.n	800901a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fea:	d107      	bne.n	8008ffc <HAL_UART_Transmit_IT+0xc8>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4a0f      	ldr	r2, [pc, #60]	; (8009034 <HAL_UART_Transmit_IT+0x100>)
 8008ff8:	671a      	str	r2, [r3, #112]	; 0x70
 8008ffa:	e002      	b.n	8009002 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <HAL_UART_Transmit_IT+0x104>)
 8009000:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009018:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800901e:	2302      	movs	r3, #2
  }
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	0800bf37 	.word	0x0800bf37
 8009030:	0800be9d 	.word	0x0800be9d
 8009034:	0800be1f 	.word	0x0800be1f
 8009038:	0800bdab 	.word	0x0800bdab

0800903c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	4613      	mov	r3, r2
 8009048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009050:	2b20      	cmp	r3, #32
 8009052:	f040 80bc 	bne.w	80091ce <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <HAL_UART_Receive_IT+0x26>
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e0b4      	b.n	80091d0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_UART_Receive_IT+0x38>
 8009070:	2302      	movs	r3, #2
 8009072:	e0ad      	b.n	80091d0 <HAL_UART_Receive_IT+0x194>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	88fa      	ldrh	r2, [r7, #6]
 8009086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	88fa      	ldrh	r2, [r7, #6]
 800908e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a0:	d10e      	bne.n	80090c0 <HAL_UART_Receive_IT+0x84>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <HAL_UART_Receive_IT+0x7a>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090b4:	e02d      	b.n	8009112 <HAL_UART_Receive_IT+0xd6>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	22ff      	movs	r2, #255	; 0xff
 80090ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090be:	e028      	b.n	8009112 <HAL_UART_Receive_IT+0xd6>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10d      	bne.n	80090e4 <HAL_UART_Receive_IT+0xa8>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <HAL_UART_Receive_IT+0x9e>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	22ff      	movs	r2, #255	; 0xff
 80090d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090d8:	e01b      	b.n	8009112 <HAL_UART_Receive_IT+0xd6>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	227f      	movs	r2, #127	; 0x7f
 80090de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e2:	e016      	b.n	8009112 <HAL_UART_Receive_IT+0xd6>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ec:	d10d      	bne.n	800910a <HAL_UART_Receive_IT+0xce>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d104      	bne.n	8009100 <HAL_UART_Receive_IT+0xc4>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	227f      	movs	r2, #127	; 0x7f
 80090fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090fe:	e008      	b.n	8009112 <HAL_UART_Receive_IT+0xd6>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	223f      	movs	r2, #63	; 0x3f
 8009104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009108:	e003      	b.n	8009112 <HAL_UART_Receive_IT+0xd6>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2222      	movs	r2, #34	; 0x22
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913a:	d12a      	bne.n	8009192 <HAL_UART_Receive_IT+0x156>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009142:	88fa      	ldrh	r2, [r7, #6]
 8009144:	429a      	cmp	r2, r3
 8009146:	d324      	bcc.n	8009192 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009150:	d107      	bne.n	8009162 <HAL_UART_Receive_IT+0x126>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4a1f      	ldr	r2, [pc, #124]	; (80091dc <HAL_UART_Receive_IT+0x1a0>)
 800915e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009160:	e002      	b.n	8009168 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <HAL_UART_Receive_IT+0x1a4>)
 8009166:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800917e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800918e:	609a      	str	r2, [r3, #8]
 8009190:	e01b      	b.n	80091ca <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919a:	d107      	bne.n	80091ac <HAL_UART_Receive_IT+0x170>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d103      	bne.n	80091ac <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a0f      	ldr	r2, [pc, #60]	; (80091e4 <HAL_UART_Receive_IT+0x1a8>)
 80091a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80091aa:	e002      	b.n	80091b2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4a0e      	ldr	r2, [pc, #56]	; (80091e8 <HAL_UART_Receive_IT+0x1ac>)
 80091b0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80091c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e000      	b.n	80091d0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80091ce:	2302      	movs	r3, #2
  }
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	0800c26d 	.word	0x0800c26d
 80091e0:	0800c165 	.word	0x0800c165
 80091e4:	0800c0b9 	.word	0x0800c0b9
 80091e8:	0800c00f 	.word	0x0800c00f

080091ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009200:	2b20      	cmp	r3, #32
 8009202:	d170      	bne.n	80092e6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_UART_Receive_DMA+0x24>
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e069      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_UART_Receive_DMA+0x36>
 800921e:	2302      	movs	r3, #2
 8009220:	e062      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2222      	movs	r2, #34	; 0x22
 8009244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800924c:	2b00      	cmp	r3, #0
 800924e:	d02c      	beq.n	80092aa <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009254:	4a26      	ldr	r2, [pc, #152]	; (80092f0 <HAL_UART_Receive_DMA+0x104>)
 8009256:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925c:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <HAL_UART_Receive_DMA+0x108>)
 800925e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009264:	4a24      	ldr	r2, [pc, #144]	; (80092f8 <HAL_UART_Receive_DMA+0x10c>)
 8009266:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926c:	2200      	movs	r2, #0
 800926e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3324      	adds	r3, #36	; 0x24
 800927a:	4619      	mov	r1, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	461a      	mov	r2, r3
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	f7fa faa4 	bl	80037d0 <HAL_DMA_Start_IT>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00d      	beq.n	80092aa <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2210      	movs	r2, #16
 8009292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e01e      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0201 	orr.w	r2, r2, #1
 80092d0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e000      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	0800bc7d 	.word	0x0800bc7d
 80092f4:	0800bce3 	.word	0x0800bce3
 80092f8:	0800bcff 	.word	0x0800bcff

080092fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800931c:	69fa      	ldr	r2, [r7, #28]
 800931e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009322:	4013      	ands	r3, r2
 8009324:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d118      	bne.n	800935e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	d013      	beq.n	800935e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d009      	beq.n	800935e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 8145 	beq.w	80095de <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
      }
      return;
 800935c:	e13f      	b.n	80095de <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80e8 	beq.w	8009536 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4ba1      	ldr	r3, [pc, #644]	; (80095f0 <HAL_UART_IRQHandler+0x2f4>)
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	4ba0      	ldr	r3, [pc, #640]	; (80095f4 <HAL_UART_IRQHandler+0x2f8>)
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80dd 	beq.w	8009536 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d010      	beq.n	80093a8 <HAL_UART_IRQHandler+0xac>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2201      	movs	r2, #1
 8009396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939e:	f043 0201 	orr.w	r2, r3, #1
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d010      	beq.n	80093d4 <HAL_UART_IRQHandler+0xd8>
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2202      	movs	r2, #2
 80093c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ca:	f043 0204 	orr.w	r2, r3, #4
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d010      	beq.n	8009400 <HAL_UART_IRQHandler+0x104>
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2204      	movs	r2, #4
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f6:	f043 0202 	orr.w	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b00      	cmp	r3, #0
 8009408:	d015      	beq.n	8009436 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d104      	bne.n	800941e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	4b76      	ldr	r3, [pc, #472]	; (80095f0 <HAL_UART_IRQHandler+0x2f4>)
 8009418:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2208      	movs	r2, #8
 8009424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942c:	f043 0208 	orr.w	r2, r3, #8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800943c:	2b00      	cmp	r3, #0
 800943e:	d011      	beq.n	8009464 <HAL_UART_IRQHandler+0x168>
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00c      	beq.n	8009464 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945a:	f043 0220 	orr.w	r2, r3, #32
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 80b9 	beq.w	80095e2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d011      	beq.n	800949e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d004      	beq.n	80094be <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d031      	beq.n	8009522 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f002 fbb8 	bl	800bc34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ce:	2b40      	cmp	r3, #64	; 0x40
 80094d0:	d123      	bne.n	800951a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d013      	beq.n	8009512 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ee:	4a42      	ldr	r2, [pc, #264]	; (80095f8 <HAL_UART_IRQHandler+0x2fc>)
 80094f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fa fbd4 	bl	8003ca4 <HAL_DMA_Abort_IT>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d017      	beq.n	8009532 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009510:	e00f      	b.n	8009532 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f87c 	bl	8009610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	e00b      	b.n	8009532 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f878 	bl	8009610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009520:	e007      	b.n	8009532 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f874 	bl	8009610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009530:	e057      	b.n	80095e2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009532:	bf00      	nop
    return;
 8009534:	e055      	b.n	80095e2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00d      	beq.n	800955c <HAL_UART_IRQHandler+0x260>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d008      	beq.n	800955c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f002 ff0d 	bl	800c374 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800955a:	e045      	b.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009562:	2b00      	cmp	r3, #0
 8009564:	d012      	beq.n	800958c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d008      	beq.n	800958c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957e:	2b00      	cmp	r3, #0
 8009580:	d031      	beq.n	80095e6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
    }
    return;
 800958a:	e02c      	b.n	80095e6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	d008      	beq.n	80095a8 <HAL_UART_IRQHandler+0x2ac>
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f002 fd1a 	bl	800bfda <UART_EndTransmit_IT>
    return;
 80095a6:	e01f      	b.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d008      	beq.n	80095c4 <HAL_UART_IRQHandler+0x2c8>
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f002 feed 	bl	800c39c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095c2:	e011      	b.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	da09      	bge.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f002 fed7 	bl	800c388 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095da:	bf00      	nop
 80095dc:	e004      	b.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80095de:	bf00      	nop
 80095e0:	e002      	b.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80095e6:	bf00      	nop
  }
}
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	10000001 	.word	0x10000001
 80095f4:	04000120 	.word	0x04000120
 80095f8:	0800bd7f 	.word	0x0800bd7f

080095fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	0000      	movs	r0, r0
	...

08009628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009628:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800962c:	b090      	sub	sp, #64	; 0x40
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009632:	2300      	movs	r3, #0
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800963c:	2300      	movs	r3, #0
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	4313      	orrs	r3, r2
 8009656:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800965c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800965e:	4313      	orrs	r3, r2
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4bc1      	ldr	r3, [pc, #772]	; (8009970 <UART_SetConfig+0x348>)
 800966a:	4013      	ands	r3, r2
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009672:	430b      	orrs	r3, r1
 8009674:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68da      	ldr	r2, [r3, #12]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4ab7      	ldr	r2, [pc, #732]	; (8009974 <UART_SetConfig+0x34c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d004      	beq.n	80096a6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096a2:	4313      	orrs	r3, r2
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	4bb2      	ldr	r3, [pc, #712]	; (8009978 <UART_SetConfig+0x350>)
 80096ae:	4013      	ands	r3, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096b6:	430b      	orrs	r3, r1
 80096b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	f023 010f 	bic.w	r1, r3, #15
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	430a      	orrs	r2, r1
 80096ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4aa9      	ldr	r2, [pc, #676]	; (800997c <UART_SetConfig+0x354>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d177      	bne.n	80097ca <UART_SetConfig+0x1a2>
 80096da:	4ba9      	ldr	r3, [pc, #676]	; (8009980 <UART_SetConfig+0x358>)
 80096dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096e2:	2b28      	cmp	r3, #40	; 0x28
 80096e4:	d86c      	bhi.n	80097c0 <UART_SetConfig+0x198>
 80096e6:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0xc4>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009791 	.word	0x08009791
 80096f0:	080097c1 	.word	0x080097c1
 80096f4:	080097c1 	.word	0x080097c1
 80096f8:	080097c1 	.word	0x080097c1
 80096fc:	080097c1 	.word	0x080097c1
 8009700:	080097c1 	.word	0x080097c1
 8009704:	080097c1 	.word	0x080097c1
 8009708:	080097c1 	.word	0x080097c1
 800970c:	08009799 	.word	0x08009799
 8009710:	080097c1 	.word	0x080097c1
 8009714:	080097c1 	.word	0x080097c1
 8009718:	080097c1 	.word	0x080097c1
 800971c:	080097c1 	.word	0x080097c1
 8009720:	080097c1 	.word	0x080097c1
 8009724:	080097c1 	.word	0x080097c1
 8009728:	080097c1 	.word	0x080097c1
 800972c:	080097a1 	.word	0x080097a1
 8009730:	080097c1 	.word	0x080097c1
 8009734:	080097c1 	.word	0x080097c1
 8009738:	080097c1 	.word	0x080097c1
 800973c:	080097c1 	.word	0x080097c1
 8009740:	080097c1 	.word	0x080097c1
 8009744:	080097c1 	.word	0x080097c1
 8009748:	080097c1 	.word	0x080097c1
 800974c:	080097a9 	.word	0x080097a9
 8009750:	080097c1 	.word	0x080097c1
 8009754:	080097c1 	.word	0x080097c1
 8009758:	080097c1 	.word	0x080097c1
 800975c:	080097c1 	.word	0x080097c1
 8009760:	080097c1 	.word	0x080097c1
 8009764:	080097c1 	.word	0x080097c1
 8009768:	080097c1 	.word	0x080097c1
 800976c:	080097b1 	.word	0x080097b1
 8009770:	080097c1 	.word	0x080097c1
 8009774:	080097c1 	.word	0x080097c1
 8009778:	080097c1 	.word	0x080097c1
 800977c:	080097c1 	.word	0x080097c1
 8009780:	080097c1 	.word	0x080097c1
 8009784:	080097c1 	.word	0x080097c1
 8009788:	080097c1 	.word	0x080097c1
 800978c:	080097b9 	.word	0x080097b9
 8009790:	2301      	movs	r3, #1
 8009792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009796:	e233      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009798:	2304      	movs	r3, #4
 800979a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800979e:	e22f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80097a0:	2308      	movs	r3, #8
 80097a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097a6:	e22b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80097a8:	2310      	movs	r3, #16
 80097aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ae:	e227      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80097b0:	2320      	movs	r3, #32
 80097b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097b6:	e223      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097be:	e21f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097c6:	bf00      	nop
 80097c8:	e21a      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a6d      	ldr	r2, [pc, #436]	; (8009984 <UART_SetConfig+0x35c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d132      	bne.n	800983a <UART_SetConfig+0x212>
 80097d4:	4b6a      	ldr	r3, [pc, #424]	; (8009980 <UART_SetConfig+0x358>)
 80097d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d827      	bhi.n	8009830 <UART_SetConfig+0x208>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <UART_SetConfig+0x1c0>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	08009801 	.word	0x08009801
 80097ec:	08009809 	.word	0x08009809
 80097f0:	08009811 	.word	0x08009811
 80097f4:	08009819 	.word	0x08009819
 80097f8:	08009821 	.word	0x08009821
 80097fc:	08009829 	.word	0x08009829
 8009800:	2300      	movs	r3, #0
 8009802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009806:	e1fb      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009808:	2304      	movs	r3, #4
 800980a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800980e:	e1f7      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009810:	2308      	movs	r3, #8
 8009812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009816:	e1f3      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009818:	2310      	movs	r3, #16
 800981a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800981e:	e1ef      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009820:	2320      	movs	r3, #32
 8009822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009826:	e1eb      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800982e:	e1e7      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009830:	2380      	movs	r3, #128	; 0x80
 8009832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009836:	bf00      	nop
 8009838:	e1e2      	b.n	8009c00 <UART_SetConfig+0x5d8>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a52      	ldr	r2, [pc, #328]	; (8009988 <UART_SetConfig+0x360>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d132      	bne.n	80098aa <UART_SetConfig+0x282>
 8009844:	4b4e      	ldr	r3, [pc, #312]	; (8009980 <UART_SetConfig+0x358>)
 8009846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	2b05      	cmp	r3, #5
 800984e:	d827      	bhi.n	80098a0 <UART_SetConfig+0x278>
 8009850:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0x230>)
 8009852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009856:	bf00      	nop
 8009858:	08009871 	.word	0x08009871
 800985c:	08009879 	.word	0x08009879
 8009860:	08009881 	.word	0x08009881
 8009864:	08009889 	.word	0x08009889
 8009868:	08009891 	.word	0x08009891
 800986c:	08009899 	.word	0x08009899
 8009870:	2300      	movs	r3, #0
 8009872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009876:	e1c3      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800987e:	e1bf      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009886:	e1bb      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800988e:	e1b7      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009890:	2320      	movs	r3, #32
 8009892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009896:	e1b3      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800989e:	e1af      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098a6:	bf00      	nop
 80098a8:	e1aa      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a37      	ldr	r2, [pc, #220]	; (800998c <UART_SetConfig+0x364>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d132      	bne.n	800991a <UART_SetConfig+0x2f2>
 80098b4:	4b32      	ldr	r3, [pc, #200]	; (8009980 <UART_SetConfig+0x358>)
 80098b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d827      	bhi.n	8009910 <UART_SetConfig+0x2e8>
 80098c0:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <UART_SetConfig+0x2a0>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098e9 	.word	0x080098e9
 80098d0:	080098f1 	.word	0x080098f1
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009909 	.word	0x08009909
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098e6:	e18b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ee:	e187      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098f6:	e183      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098fe:	e17f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009900:	2320      	movs	r3, #32
 8009902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009906:	e17b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800990e:	e177      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009910:	2380      	movs	r3, #128	; 0x80
 8009912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009916:	bf00      	nop
 8009918:	e172      	b.n	8009c00 <UART_SetConfig+0x5d8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a1c      	ldr	r2, [pc, #112]	; (8009990 <UART_SetConfig+0x368>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d144      	bne.n	80099ae <UART_SetConfig+0x386>
 8009924:	4b16      	ldr	r3, [pc, #88]	; (8009980 <UART_SetConfig+0x358>)
 8009926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	2b05      	cmp	r3, #5
 800992e:	d839      	bhi.n	80099a4 <UART_SetConfig+0x37c>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <UART_SetConfig+0x310>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009951 	.word	0x08009951
 800993c:	08009959 	.word	0x08009959
 8009940:	08009961 	.word	0x08009961
 8009944:	08009969 	.word	0x08009969
 8009948:	08009995 	.word	0x08009995
 800994c:	0800999d 	.word	0x0800999d
 8009950:	2300      	movs	r3, #0
 8009952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009956:	e153      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009958:	2304      	movs	r3, #4
 800995a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800995e:	e14f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009960:	2308      	movs	r3, #8
 8009962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009966:	e14b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009968:	2310      	movs	r3, #16
 800996a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800996e:	e147      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009970:	cfff69f3 	.word	0xcfff69f3
 8009974:	58000c00 	.word	0x58000c00
 8009978:	11fff4ff 	.word	0x11fff4ff
 800997c:	40011000 	.word	0x40011000
 8009980:	58024400 	.word	0x58024400
 8009984:	40004400 	.word	0x40004400
 8009988:	40004800 	.word	0x40004800
 800998c:	40004c00 	.word	0x40004c00
 8009990:	40005000 	.word	0x40005000
 8009994:	2320      	movs	r3, #32
 8009996:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800999a:	e131      	b.n	8009c00 <UART_SetConfig+0x5d8>
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099a2:	e12d      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80099a4:	2380      	movs	r3, #128	; 0x80
 80099a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099aa:	bf00      	nop
 80099ac:	e128      	b.n	8009c00 <UART_SetConfig+0x5d8>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4ac3      	ldr	r2, [pc, #780]	; (8009cc0 <UART_SetConfig+0x698>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d178      	bne.n	8009aaa <UART_SetConfig+0x482>
 80099b8:	4bc2      	ldr	r3, [pc, #776]	; (8009cc4 <UART_SetConfig+0x69c>)
 80099ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099c0:	2b28      	cmp	r3, #40	; 0x28
 80099c2:	d86d      	bhi.n	8009aa0 <UART_SetConfig+0x478>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x3a4>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	08009a71 	.word	0x08009a71
 80099d0:	08009aa1 	.word	0x08009aa1
 80099d4:	08009aa1 	.word	0x08009aa1
 80099d8:	08009aa1 	.word	0x08009aa1
 80099dc:	08009aa1 	.word	0x08009aa1
 80099e0:	08009aa1 	.word	0x08009aa1
 80099e4:	08009aa1 	.word	0x08009aa1
 80099e8:	08009aa1 	.word	0x08009aa1
 80099ec:	08009a79 	.word	0x08009a79
 80099f0:	08009aa1 	.word	0x08009aa1
 80099f4:	08009aa1 	.word	0x08009aa1
 80099f8:	08009aa1 	.word	0x08009aa1
 80099fc:	08009aa1 	.word	0x08009aa1
 8009a00:	08009aa1 	.word	0x08009aa1
 8009a04:	08009aa1 	.word	0x08009aa1
 8009a08:	08009aa1 	.word	0x08009aa1
 8009a0c:	08009a81 	.word	0x08009a81
 8009a10:	08009aa1 	.word	0x08009aa1
 8009a14:	08009aa1 	.word	0x08009aa1
 8009a18:	08009aa1 	.word	0x08009aa1
 8009a1c:	08009aa1 	.word	0x08009aa1
 8009a20:	08009aa1 	.word	0x08009aa1
 8009a24:	08009aa1 	.word	0x08009aa1
 8009a28:	08009aa1 	.word	0x08009aa1
 8009a2c:	08009a89 	.word	0x08009a89
 8009a30:	08009aa1 	.word	0x08009aa1
 8009a34:	08009aa1 	.word	0x08009aa1
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009aa1 	.word	0x08009aa1
 8009a40:	08009aa1 	.word	0x08009aa1
 8009a44:	08009aa1 	.word	0x08009aa1
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	08009a91 	.word	0x08009a91
 8009a50:	08009aa1 	.word	0x08009aa1
 8009a54:	08009aa1 	.word	0x08009aa1
 8009a58:	08009aa1 	.word	0x08009aa1
 8009a5c:	08009aa1 	.word	0x08009aa1
 8009a60:	08009aa1 	.word	0x08009aa1
 8009a64:	08009aa1 	.word	0x08009aa1
 8009a68:	08009aa1 	.word	0x08009aa1
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a76:	e0c3      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a7e:	e0bf      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a86:	e0bb      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a8e:	e0b7      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a96:	e0b3      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	e0af      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aa6:	bf00      	nop
 8009aa8:	e0aa      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a86      	ldr	r2, [pc, #536]	; (8009cc8 <UART_SetConfig+0x6a0>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d132      	bne.n	8009b1a <UART_SetConfig+0x4f2>
 8009ab4:	4b83      	ldr	r3, [pc, #524]	; (8009cc4 <UART_SetConfig+0x69c>)
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	2b05      	cmp	r3, #5
 8009abe:	d827      	bhi.n	8009b10 <UART_SetConfig+0x4e8>
 8009ac0:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <UART_SetConfig+0x4a0>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009ae1 	.word	0x08009ae1
 8009acc:	08009ae9 	.word	0x08009ae9
 8009ad0:	08009af1 	.word	0x08009af1
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ae6:	e08b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009ae8:	2304      	movs	r3, #4
 8009aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aee:	e087      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009af0:	2308      	movs	r3, #8
 8009af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009af6:	e083      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009af8:	2310      	movs	r3, #16
 8009afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009afe:	e07f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b00:	2320      	movs	r3, #32
 8009b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b06:	e07b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b08:	2340      	movs	r3, #64	; 0x40
 8009b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b0e:	e077      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b10:	2380      	movs	r3, #128	; 0x80
 8009b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b16:	bf00      	nop
 8009b18:	e072      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a6b      	ldr	r2, [pc, #428]	; (8009ccc <UART_SetConfig+0x6a4>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d132      	bne.n	8009b8a <UART_SetConfig+0x562>
 8009b24:	4b67      	ldr	r3, [pc, #412]	; (8009cc4 <UART_SetConfig+0x69c>)
 8009b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	2b05      	cmp	r3, #5
 8009b2e:	d827      	bhi.n	8009b80 <UART_SetConfig+0x558>
 8009b30:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x510>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b56:	e053      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b5e:	e04f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b66:	e04b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b6e:	e047      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b70:	2320      	movs	r3, #32
 8009b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b76:	e043      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b78:	2340      	movs	r3, #64	; 0x40
 8009b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b7e:	e03f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b80:	2380      	movs	r3, #128	; 0x80
 8009b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b86:	bf00      	nop
 8009b88:	e03a      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a50      	ldr	r2, [pc, #320]	; (8009cd0 <UART_SetConfig+0x6a8>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d132      	bne.n	8009bfa <UART_SetConfig+0x5d2>
 8009b94:	4b4b      	ldr	r3, [pc, #300]	; (8009cc4 <UART_SetConfig+0x69c>)
 8009b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	2b05      	cmp	r3, #5
 8009b9e:	d827      	bhi.n	8009bf0 <UART_SetConfig+0x5c8>
 8009ba0:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <UART_SetConfig+0x580>)
 8009ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba6:	bf00      	nop
 8009ba8:	08009bc1 	.word	0x08009bc1
 8009bac:	08009bc9 	.word	0x08009bc9
 8009bb0:	08009bd1 	.word	0x08009bd1
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bc6:	e01b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009bc8:	2304      	movs	r3, #4
 8009bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bce:	e017      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bd6:	e013      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bde:	e00f      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009be0:	2320      	movs	r3, #32
 8009be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009be6:	e00b      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bee:	e007      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009bf0:	2380      	movs	r3, #128	; 0x80
 8009bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bf6:	bf00      	nop
 8009bf8:	e002      	b.n	8009c00 <UART_SetConfig+0x5d8>
 8009bfa:	2380      	movs	r3, #128	; 0x80
 8009bfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a32      	ldr	r2, [pc, #200]	; (8009cd0 <UART_SetConfig+0x6a8>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	f040 86f7 	bne.w	800a9fa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	f000 80c0 	beq.w	8009d96 <UART_SetConfig+0x76e>
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	dc04      	bgt.n	8009c24 <UART_SetConfig+0x5fc>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d00c      	beq.n	8009c38 <UART_SetConfig+0x610>
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d065      	beq.n	8009cee <UART_SetConfig+0x6c6>
 8009c22:	e27a      	b.n	800a11a <UART_SetConfig+0xaf2>
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	f000 81b0 	beq.w	8009f8a <UART_SetConfig+0x962>
 8009c2a:	2b40      	cmp	r3, #64	; 0x40
 8009c2c:	f000 821e 	beq.w	800a06c <UART_SetConfig+0xa44>
 8009c30:	2b10      	cmp	r3, #16
 8009c32:	f000 8104 	beq.w	8009e3e <UART_SetConfig+0x816>
 8009c36:	e270      	b.n	800a11a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c38:	f7fe f85a 	bl	8007cf0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d04e      	beq.n	8009ce4 <UART_SetConfig+0x6bc>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d048      	beq.n	8009ce0 <UART_SetConfig+0x6b8>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d042      	beq.n	8009cdc <UART_SetConfig+0x6b4>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d03c      	beq.n	8009cd8 <UART_SetConfig+0x6b0>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d036      	beq.n	8009cd4 <UART_SetConfig+0x6ac>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d026      	beq.n	8009cbc <UART_SetConfig+0x694>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b06      	cmp	r3, #6
 8009c74:	d020      	beq.n	8009cb8 <UART_SetConfig+0x690>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	2b07      	cmp	r3, #7
 8009c7c:	d01a      	beq.n	8009cb4 <UART_SetConfig+0x68c>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	2b08      	cmp	r3, #8
 8009c84:	d014      	beq.n	8009cb0 <UART_SetConfig+0x688>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b09      	cmp	r3, #9
 8009c8c:	d00e      	beq.n	8009cac <UART_SetConfig+0x684>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	2b0a      	cmp	r3, #10
 8009c94:	d008      	beq.n	8009ca8 <UART_SetConfig+0x680>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	2b0b      	cmp	r3, #11
 8009c9c:	d102      	bne.n	8009ca4 <UART_SetConfig+0x67c>
 8009c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ca2:	e020      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e01e      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009ca8:	2380      	movs	r3, #128	; 0x80
 8009caa:	e01c      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cac:	2340      	movs	r3, #64	; 0x40
 8009cae:	e01a      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	e018      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	e016      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	e014      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cbc:	230a      	movs	r3, #10
 8009cbe:	e012      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cc0:	40011400 	.word	0x40011400
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	40007800 	.word	0x40007800
 8009ccc:	40007c00 	.word	0x40007c00
 8009cd0:	58000c00 	.word	0x58000c00
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	e006      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cd8:	2306      	movs	r3, #6
 8009cda:	e004      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009cdc:	2304      	movs	r3, #4
 8009cde:	e002      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e000      	b.n	8009ce6 <UART_SetConfig+0x6be>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cec:	e219      	b.n	800a122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cee:	f107 0318 	add.w	r3, r7, #24
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe f812 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d044      	beq.n	8009d8c <UART_SetConfig+0x764>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d03e      	beq.n	8009d88 <UART_SetConfig+0x760>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d038      	beq.n	8009d84 <UART_SetConfig+0x75c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d032      	beq.n	8009d80 <UART_SetConfig+0x758>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d02c      	beq.n	8009d7c <UART_SetConfig+0x754>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d026      	beq.n	8009d78 <UART_SetConfig+0x750>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d020      	beq.n	8009d74 <UART_SetConfig+0x74c>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b07      	cmp	r3, #7
 8009d38:	d01a      	beq.n	8009d70 <UART_SetConfig+0x748>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b08      	cmp	r3, #8
 8009d40:	d014      	beq.n	8009d6c <UART_SetConfig+0x744>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d00e      	beq.n	8009d68 <UART_SetConfig+0x740>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b0a      	cmp	r3, #10
 8009d50:	d008      	beq.n	8009d64 <UART_SetConfig+0x73c>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b0b      	cmp	r3, #11
 8009d58:	d102      	bne.n	8009d60 <UART_SetConfig+0x738>
 8009d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d5e:	e016      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d60:	2301      	movs	r3, #1
 8009d62:	e014      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	e012      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d68:	2340      	movs	r3, #64	; 0x40
 8009d6a:	e010      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	e00e      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d70:	2310      	movs	r3, #16
 8009d72:	e00c      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d74:	230c      	movs	r3, #12
 8009d76:	e00a      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d78:	230a      	movs	r3, #10
 8009d7a:	e008      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	e006      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d80:	2306      	movs	r3, #6
 8009d82:	e004      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d84:	2304      	movs	r3, #4
 8009d86:	e002      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e000      	b.n	8009d8e <UART_SetConfig+0x766>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d94:	e1c5      	b.n	800a122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d96:	f107 030c 	add.w	r3, r7, #12
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe f90a 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d044      	beq.n	8009e34 <UART_SetConfig+0x80c>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d03e      	beq.n	8009e30 <UART_SetConfig+0x808>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d038      	beq.n	8009e2c <UART_SetConfig+0x804>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d032      	beq.n	8009e28 <UART_SetConfig+0x800>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d02c      	beq.n	8009e24 <UART_SetConfig+0x7fc>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d026      	beq.n	8009e20 <UART_SetConfig+0x7f8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b06      	cmp	r3, #6
 8009dd8:	d020      	beq.n	8009e1c <UART_SetConfig+0x7f4>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b07      	cmp	r3, #7
 8009de0:	d01a      	beq.n	8009e18 <UART_SetConfig+0x7f0>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	2b08      	cmp	r3, #8
 8009de8:	d014      	beq.n	8009e14 <UART_SetConfig+0x7ec>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b09      	cmp	r3, #9
 8009df0:	d00e      	beq.n	8009e10 <UART_SetConfig+0x7e8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b0a      	cmp	r3, #10
 8009df8:	d008      	beq.n	8009e0c <UART_SetConfig+0x7e4>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b0b      	cmp	r3, #11
 8009e00:	d102      	bne.n	8009e08 <UART_SetConfig+0x7e0>
 8009e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e06:	e016      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e014      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	e012      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	e010      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e14:	2320      	movs	r3, #32
 8009e16:	e00e      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	e00c      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	e00a      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e20:	230a      	movs	r3, #10
 8009e22:	e008      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e24:	2308      	movs	r3, #8
 8009e26:	e006      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e28:	2306      	movs	r3, #6
 8009e2a:	e004      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	e002      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e000      	b.n	8009e36 <UART_SetConfig+0x80e>
 8009e34:	2301      	movs	r3, #1
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e3c:	e171      	b.n	800a122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e3e:	4b7a      	ldr	r3, [pc, #488]	; (800a028 <UART_SetConfig+0xa00>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d054      	beq.n	8009ef4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e4a:	4b77      	ldr	r3, [pc, #476]	; (800a028 <UART_SetConfig+0xa00>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	08db      	lsrs	r3, r3, #3
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	4a75      	ldr	r2, [pc, #468]	; (800a02c <UART_SetConfig+0xa04>)
 8009e56:	40da      	lsrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d044      	beq.n	8009eea <UART_SetConfig+0x8c2>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d03e      	beq.n	8009ee6 <UART_SetConfig+0x8be>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d038      	beq.n	8009ee2 <UART_SetConfig+0x8ba>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d032      	beq.n	8009ede <UART_SetConfig+0x8b6>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d02c      	beq.n	8009eda <UART_SetConfig+0x8b2>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	2b05      	cmp	r3, #5
 8009e86:	d026      	beq.n	8009ed6 <UART_SetConfig+0x8ae>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	2b06      	cmp	r3, #6
 8009e8e:	d020      	beq.n	8009ed2 <UART_SetConfig+0x8aa>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d01a      	beq.n	8009ece <UART_SetConfig+0x8a6>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d014      	beq.n	8009eca <UART_SetConfig+0x8a2>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b09      	cmp	r3, #9
 8009ea6:	d00e      	beq.n	8009ec6 <UART_SetConfig+0x89e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	2b0a      	cmp	r3, #10
 8009eae:	d008      	beq.n	8009ec2 <UART_SetConfig+0x89a>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b0b      	cmp	r3, #11
 8009eb6:	d102      	bne.n	8009ebe <UART_SetConfig+0x896>
 8009eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ebc:	e016      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e014      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ec2:	2380      	movs	r3, #128	; 0x80
 8009ec4:	e012      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	e010      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009eca:	2320      	movs	r3, #32
 8009ecc:	e00e      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ece:	2310      	movs	r3, #16
 8009ed0:	e00c      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	e00a      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ed6:	230a      	movs	r3, #10
 8009ed8:	e008      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009eda:	2308      	movs	r3, #8
 8009edc:	e006      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ede:	2306      	movs	r3, #6
 8009ee0:	e004      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	e002      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	e000      	b.n	8009eec <UART_SetConfig+0x8c4>
 8009eea:	2301      	movs	r3, #1
 8009eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009ef2:	e116      	b.n	800a122 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d043      	beq.n	8009f84 <UART_SetConfig+0x95c>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d03d      	beq.n	8009f80 <UART_SetConfig+0x958>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d037      	beq.n	8009f7c <UART_SetConfig+0x954>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d031      	beq.n	8009f78 <UART_SetConfig+0x950>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d02b      	beq.n	8009f74 <UART_SetConfig+0x94c>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b05      	cmp	r3, #5
 8009f22:	d025      	beq.n	8009f70 <UART_SetConfig+0x948>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b06      	cmp	r3, #6
 8009f2a:	d01f      	beq.n	8009f6c <UART_SetConfig+0x944>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	2b07      	cmp	r3, #7
 8009f32:	d019      	beq.n	8009f68 <UART_SetConfig+0x940>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d013      	beq.n	8009f64 <UART_SetConfig+0x93c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	2b09      	cmp	r3, #9
 8009f42:	d00d      	beq.n	8009f60 <UART_SetConfig+0x938>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	2b0a      	cmp	r3, #10
 8009f4a:	d007      	beq.n	8009f5c <UART_SetConfig+0x934>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b0b      	cmp	r3, #11
 8009f52:	d101      	bne.n	8009f58 <UART_SetConfig+0x930>
 8009f54:	4b36      	ldr	r3, [pc, #216]	; (800a030 <UART_SetConfig+0xa08>)
 8009f56:	e016      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f58:	4b34      	ldr	r3, [pc, #208]	; (800a02c <UART_SetConfig+0xa04>)
 8009f5a:	e014      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f5c:	4b35      	ldr	r3, [pc, #212]	; (800a034 <UART_SetConfig+0xa0c>)
 8009f5e:	e012      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f60:	4b35      	ldr	r3, [pc, #212]	; (800a038 <UART_SetConfig+0xa10>)
 8009f62:	e010      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f64:	4b35      	ldr	r3, [pc, #212]	; (800a03c <UART_SetConfig+0xa14>)
 8009f66:	e00e      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f68:	4b35      	ldr	r3, [pc, #212]	; (800a040 <UART_SetConfig+0xa18>)
 8009f6a:	e00c      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f6c:	4b35      	ldr	r3, [pc, #212]	; (800a044 <UART_SetConfig+0xa1c>)
 8009f6e:	e00a      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f70:	4b35      	ldr	r3, [pc, #212]	; (800a048 <UART_SetConfig+0xa20>)
 8009f72:	e008      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f74:	4b35      	ldr	r3, [pc, #212]	; (800a04c <UART_SetConfig+0xa24>)
 8009f76:	e006      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f78:	4b35      	ldr	r3, [pc, #212]	; (800a050 <UART_SetConfig+0xa28>)
 8009f7a:	e004      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f7c:	4b35      	ldr	r3, [pc, #212]	; (800a054 <UART_SetConfig+0xa2c>)
 8009f7e:	e002      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f80:	4b35      	ldr	r3, [pc, #212]	; (800a058 <UART_SetConfig+0xa30>)
 8009f82:	e000      	b.n	8009f86 <UART_SetConfig+0x95e>
 8009f84:	4b29      	ldr	r3, [pc, #164]	; (800a02c <UART_SetConfig+0xa04>)
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f88:	e0cb      	b.n	800a122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d046      	beq.n	800a020 <UART_SetConfig+0x9f8>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d040      	beq.n	800a01c <UART_SetConfig+0x9f4>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d03a      	beq.n	800a018 <UART_SetConfig+0x9f0>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d034      	beq.n	800a014 <UART_SetConfig+0x9ec>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d02e      	beq.n	800a010 <UART_SetConfig+0x9e8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d028      	beq.n	800a00c <UART_SetConfig+0x9e4>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b06      	cmp	r3, #6
 8009fc0:	d022      	beq.n	800a008 <UART_SetConfig+0x9e0>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	d01c      	beq.n	800a004 <UART_SetConfig+0x9dc>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b08      	cmp	r3, #8
 8009fd0:	d016      	beq.n	800a000 <UART_SetConfig+0x9d8>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b09      	cmp	r3, #9
 8009fd8:	d00f      	beq.n	8009ffa <UART_SetConfig+0x9d2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b0a      	cmp	r3, #10
 8009fe0:	d008      	beq.n	8009ff4 <UART_SetConfig+0x9cc>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b0b      	cmp	r3, #11
 8009fe8:	d102      	bne.n	8009ff0 <UART_SetConfig+0x9c8>
 8009fea:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009fee:	e018      	b.n	800a022 <UART_SetConfig+0x9fa>
 8009ff0:	4b13      	ldr	r3, [pc, #76]	; (800a040 <UART_SetConfig+0xa18>)
 8009ff2:	e016      	b.n	800a022 <UART_SetConfig+0x9fa>
 8009ff4:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009ff8:	e013      	b.n	800a022 <UART_SetConfig+0x9fa>
 8009ffa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009ffe:	e010      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a000:	4b16      	ldr	r3, [pc, #88]	; (800a05c <UART_SetConfig+0xa34>)
 800a002:	e00e      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a004:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <UART_SetConfig+0xa08>)
 800a006:	e00c      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <UART_SetConfig+0xa38>)
 800a00a:	e00a      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a00c:	4b15      	ldr	r3, [pc, #84]	; (800a064 <UART_SetConfig+0xa3c>)
 800a00e:	e008      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <UART_SetConfig+0xa0c>)
 800a012:	e006      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a014:	4b14      	ldr	r3, [pc, #80]	; (800a068 <UART_SetConfig+0xa40>)
 800a016:	e004      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <UART_SetConfig+0xa10>)
 800a01a:	e002      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a01c:	4b07      	ldr	r3, [pc, #28]	; (800a03c <UART_SetConfig+0xa14>)
 800a01e:	e000      	b.n	800a022 <UART_SetConfig+0x9fa>
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <UART_SetConfig+0xa18>)
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a024:	e07d      	b.n	800a122 <UART_SetConfig+0xafa>
 800a026:	bf00      	nop
 800a028:	58024400 	.word	0x58024400
 800a02c:	03d09000 	.word	0x03d09000
 800a030:	0003d090 	.word	0x0003d090
 800a034:	0007a120 	.word	0x0007a120
 800a038:	000f4240 	.word	0x000f4240
 800a03c:	001e8480 	.word	0x001e8480
 800a040:	003d0900 	.word	0x003d0900
 800a044:	00516155 	.word	0x00516155
 800a048:	0061a800 	.word	0x0061a800
 800a04c:	007a1200 	.word	0x007a1200
 800a050:	00a2c2aa 	.word	0x00a2c2aa
 800a054:	00f42400 	.word	0x00f42400
 800a058:	01e84800 	.word	0x01e84800
 800a05c:	0001e848 	.word	0x0001e848
 800a060:	00051615 	.word	0x00051615
 800a064:	00061a80 	.word	0x00061a80
 800a068:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d04e      	beq.n	800a112 <UART_SetConfig+0xaea>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d047      	beq.n	800a10c <UART_SetConfig+0xae4>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	2b02      	cmp	r3, #2
 800a082:	d040      	beq.n	800a106 <UART_SetConfig+0xade>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d039      	beq.n	800a100 <UART_SetConfig+0xad8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b04      	cmp	r3, #4
 800a092:	d032      	beq.n	800a0fa <UART_SetConfig+0xad2>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b05      	cmp	r3, #5
 800a09a:	d02b      	beq.n	800a0f4 <UART_SetConfig+0xacc>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	2b06      	cmp	r3, #6
 800a0a2:	d024      	beq.n	800a0ee <UART_SetConfig+0xac6>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	2b07      	cmp	r3, #7
 800a0aa:	d01d      	beq.n	800a0e8 <UART_SetConfig+0xac0>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	2b08      	cmp	r3, #8
 800a0b2:	d016      	beq.n	800a0e2 <UART_SetConfig+0xaba>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b09      	cmp	r3, #9
 800a0ba:	d00f      	beq.n	800a0dc <UART_SetConfig+0xab4>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b0a      	cmp	r3, #10
 800a0c2:	d008      	beq.n	800a0d6 <UART_SetConfig+0xaae>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2b0b      	cmp	r3, #11
 800a0ca:	d101      	bne.n	800a0d0 <UART_SetConfig+0xaa8>
 800a0cc:	2380      	movs	r3, #128	; 0x80
 800a0ce:	e022      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d4:	e01f      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0da:	e01c      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0e0:	e019      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e6:	e016      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0ec:	e013      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a0f2:	e010      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a0f8:	e00d      	b.n	800a116 <UART_SetConfig+0xaee>
 800a0fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0fe:	e00a      	b.n	800a116 <UART_SetConfig+0xaee>
 800a100:	f241 5355 	movw	r3, #5461	; 0x1555
 800a104:	e007      	b.n	800a116 <UART_SetConfig+0xaee>
 800a106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a10a:	e004      	b.n	800a116 <UART_SetConfig+0xaee>
 800a10c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a110:	e001      	b.n	800a116 <UART_SetConfig+0xaee>
 800a112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a118:	e003      	b.n	800a122 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a120:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	2b00      	cmp	r3, #0
 800a126:	f001 83e8 	beq.w	800b8fa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4413      	add	r3, r2
 800a134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a136:	429a      	cmp	r2, r3
 800a138:	d305      	bcc.n	800a146 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a142:	429a      	cmp	r2, r3
 800a144:	d904      	bls.n	800a150 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14c:	f001 bbd5 	b.w	800b8fa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a150:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a154:	2b08      	cmp	r3, #8
 800a156:	f000 8154 	beq.w	800a402 <UART_SetConfig+0xdda>
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	dc06      	bgt.n	800a16c <UART_SetConfig+0xb44>
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d00f      	beq.n	800a182 <UART_SetConfig+0xb5a>
 800a162:	2b04      	cmp	r3, #4
 800a164:	f000 80ac 	beq.w	800a2c0 <UART_SetConfig+0xc98>
 800a168:	f000 bc30 	b.w	800a9cc <UART_SetConfig+0x13a4>
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	f000 832d 	beq.w	800a7cc <UART_SetConfig+0x11a4>
 800a172:	2b40      	cmp	r3, #64	; 0x40
 800a174:	f000 83a5 	beq.w	800a8c2 <UART_SetConfig+0x129a>
 800a178:	2b10      	cmp	r3, #16
 800a17a:	f000 81e3 	beq.w	800a544 <UART_SetConfig+0xf1c>
 800a17e:	f000 bc25 	b.w	800a9cc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a182:	f7fd fdb5 	bl	8007cf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a186:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	4618      	mov	r0, r3
 800a18c:	f04f 0100 	mov.w	r1, #0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	d067      	beq.n	800a268 <UART_SetConfig+0xc40>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d05e      	beq.n	800a25e <UART_SetConfig+0xc36>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d055      	beq.n	800a254 <UART_SetConfig+0xc2c>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d04c      	beq.n	800a24a <UART_SetConfig+0xc22>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d043      	beq.n	800a240 <UART_SetConfig+0xc18>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	2b05      	cmp	r3, #5
 800a1be:	d03a      	beq.n	800a236 <UART_SetConfig+0xc0e>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	2b06      	cmp	r3, #6
 800a1c6:	d031      	beq.n	800a22c <UART_SetConfig+0xc04>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b07      	cmp	r3, #7
 800a1ce:	d028      	beq.n	800a222 <UART_SetConfig+0xbfa>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d01f      	beq.n	800a218 <UART_SetConfig+0xbf0>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	d016      	beq.n	800a20e <UART_SetConfig+0xbe6>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	2b0a      	cmp	r3, #10
 800a1e6:	d00d      	beq.n	800a204 <UART_SetConfig+0xbdc>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ec:	2b0b      	cmp	r3, #11
 800a1ee:	d104      	bne.n	800a1fa <UART_SetConfig+0xbd2>
 800a1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1f4:	f04f 0400 	mov.w	r4, #0
 800a1f8:	e03a      	b.n	800a270 <UART_SetConfig+0xc48>
 800a1fa:	f04f 0301 	mov.w	r3, #1
 800a1fe:	f04f 0400 	mov.w	r4, #0
 800a202:	e035      	b.n	800a270 <UART_SetConfig+0xc48>
 800a204:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a208:	f04f 0400 	mov.w	r4, #0
 800a20c:	e030      	b.n	800a270 <UART_SetConfig+0xc48>
 800a20e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a212:	f04f 0400 	mov.w	r4, #0
 800a216:	e02b      	b.n	800a270 <UART_SetConfig+0xc48>
 800a218:	f04f 0320 	mov.w	r3, #32
 800a21c:	f04f 0400 	mov.w	r4, #0
 800a220:	e026      	b.n	800a270 <UART_SetConfig+0xc48>
 800a222:	f04f 0310 	mov.w	r3, #16
 800a226:	f04f 0400 	mov.w	r4, #0
 800a22a:	e021      	b.n	800a270 <UART_SetConfig+0xc48>
 800a22c:	f04f 030c 	mov.w	r3, #12
 800a230:	f04f 0400 	mov.w	r4, #0
 800a234:	e01c      	b.n	800a270 <UART_SetConfig+0xc48>
 800a236:	f04f 030a 	mov.w	r3, #10
 800a23a:	f04f 0400 	mov.w	r4, #0
 800a23e:	e017      	b.n	800a270 <UART_SetConfig+0xc48>
 800a240:	f04f 0308 	mov.w	r3, #8
 800a244:	f04f 0400 	mov.w	r4, #0
 800a248:	e012      	b.n	800a270 <UART_SetConfig+0xc48>
 800a24a:	f04f 0306 	mov.w	r3, #6
 800a24e:	f04f 0400 	mov.w	r4, #0
 800a252:	e00d      	b.n	800a270 <UART_SetConfig+0xc48>
 800a254:	f04f 0304 	mov.w	r3, #4
 800a258:	f04f 0400 	mov.w	r4, #0
 800a25c:	e008      	b.n	800a270 <UART_SetConfig+0xc48>
 800a25e:	f04f 0302 	mov.w	r3, #2
 800a262:	f04f 0400 	mov.w	r4, #0
 800a266:	e003      	b.n	800a270 <UART_SetConfig+0xc48>
 800a268:	f04f 0301 	mov.w	r3, #1
 800a26c:	f04f 0400 	mov.w	r4, #0
 800a270:	461a      	mov	r2, r3
 800a272:	4623      	mov	r3, r4
 800a274:	f7f6 f830 	bl	80002d8 <__aeabi_uldivmod>
 800a278:	4603      	mov	r3, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	4619      	mov	r1, r3
 800a27e:	4622      	mov	r2, r4
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	f04f 0400 	mov.w	r4, #0
 800a288:	0214      	lsls	r4, r2, #8
 800a28a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a28e:	020b      	lsls	r3, r1, #8
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6852      	ldr	r2, [r2, #4]
 800a294:	0852      	lsrs	r2, r2, #1
 800a296:	4611      	mov	r1, r2
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	eb13 0b01 	adds.w	fp, r3, r1
 800a2a0:	eb44 0c02 	adc.w	ip, r4, r2
 800a2a4:	4658      	mov	r0, fp
 800a2a6:	4661      	mov	r1, ip
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f04f 0400 	mov.w	r4, #0
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	f7f6 f810 	bl	80002d8 <__aeabi_uldivmod>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2be:	e389      	b.n	800a9d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c0:	f107 0318 	add.w	r3, r7, #24
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fd fd29 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f04f 0100 	mov.w	r1, #0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d067      	beq.n	800a3aa <UART_SetConfig+0xd82>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d05e      	beq.n	800a3a0 <UART_SetConfig+0xd78>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d055      	beq.n	800a396 <UART_SetConfig+0xd6e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d04c      	beq.n	800a38c <UART_SetConfig+0xd64>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d043      	beq.n	800a382 <UART_SetConfig+0xd5a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d03a      	beq.n	800a378 <UART_SetConfig+0xd50>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b06      	cmp	r3, #6
 800a308:	d031      	beq.n	800a36e <UART_SetConfig+0xd46>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b07      	cmp	r3, #7
 800a310:	d028      	beq.n	800a364 <UART_SetConfig+0xd3c>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	2b08      	cmp	r3, #8
 800a318:	d01f      	beq.n	800a35a <UART_SetConfig+0xd32>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	2b09      	cmp	r3, #9
 800a320:	d016      	beq.n	800a350 <UART_SetConfig+0xd28>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b0a      	cmp	r3, #10
 800a328:	d00d      	beq.n	800a346 <UART_SetConfig+0xd1e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b0b      	cmp	r3, #11
 800a330:	d104      	bne.n	800a33c <UART_SetConfig+0xd14>
 800a332:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a336:	f04f 0400 	mov.w	r4, #0
 800a33a:	e03a      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a33c:	f04f 0301 	mov.w	r3, #1
 800a340:	f04f 0400 	mov.w	r4, #0
 800a344:	e035      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a346:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a34a:	f04f 0400 	mov.w	r4, #0
 800a34e:	e030      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a350:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a354:	f04f 0400 	mov.w	r4, #0
 800a358:	e02b      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a35a:	f04f 0320 	mov.w	r3, #32
 800a35e:	f04f 0400 	mov.w	r4, #0
 800a362:	e026      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a364:	f04f 0310 	mov.w	r3, #16
 800a368:	f04f 0400 	mov.w	r4, #0
 800a36c:	e021      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a36e:	f04f 030c 	mov.w	r3, #12
 800a372:	f04f 0400 	mov.w	r4, #0
 800a376:	e01c      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a378:	f04f 030a 	mov.w	r3, #10
 800a37c:	f04f 0400 	mov.w	r4, #0
 800a380:	e017      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a382:	f04f 0308 	mov.w	r3, #8
 800a386:	f04f 0400 	mov.w	r4, #0
 800a38a:	e012      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a38c:	f04f 0306 	mov.w	r3, #6
 800a390:	f04f 0400 	mov.w	r4, #0
 800a394:	e00d      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a396:	f04f 0304 	mov.w	r3, #4
 800a39a:	f04f 0400 	mov.w	r4, #0
 800a39e:	e008      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a3a0:	f04f 0302 	mov.w	r3, #2
 800a3a4:	f04f 0400 	mov.w	r4, #0
 800a3a8:	e003      	b.n	800a3b2 <UART_SetConfig+0xd8a>
 800a3aa:	f04f 0301 	mov.w	r3, #1
 800a3ae:	f04f 0400 	mov.w	r4, #0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	f7f5 ff8f 	bl	80002d8 <__aeabi_uldivmod>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	460c      	mov	r4, r1
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	f04f 0300 	mov.w	r3, #0
 800a3c6:	f04f 0400 	mov.w	r4, #0
 800a3ca:	0214      	lsls	r4, r2, #8
 800a3cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a3d0:	020b      	lsls	r3, r1, #8
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	6852      	ldr	r2, [r2, #4]
 800a3d6:	0852      	lsrs	r2, r2, #1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	eb13 0b01 	adds.w	fp, r3, r1
 800a3e2:	eb44 0c02 	adc.w	ip, r4, r2
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	4661      	mov	r1, ip
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f04f 0400 	mov.w	r4, #0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	f7f5 ff6f 	bl	80002d8 <__aeabi_uldivmod>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a400:	e2e8      	b.n	800a9d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a402:	f107 030c 	add.w	r3, r7, #12
 800a406:	4618      	mov	r0, r3
 800a408:	f7fd fdd4 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	4618      	mov	r0, r3
 800a410:	f04f 0100 	mov.w	r1, #0
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d067      	beq.n	800a4ec <UART_SetConfig+0xec4>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	2b01      	cmp	r3, #1
 800a422:	d05e      	beq.n	800a4e2 <UART_SetConfig+0xeba>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d055      	beq.n	800a4d8 <UART_SetConfig+0xeb0>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	2b03      	cmp	r3, #3
 800a432:	d04c      	beq.n	800a4ce <UART_SetConfig+0xea6>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d043      	beq.n	800a4c4 <UART_SetConfig+0xe9c>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	2b05      	cmp	r3, #5
 800a442:	d03a      	beq.n	800a4ba <UART_SetConfig+0xe92>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	2b06      	cmp	r3, #6
 800a44a:	d031      	beq.n	800a4b0 <UART_SetConfig+0xe88>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	2b07      	cmp	r3, #7
 800a452:	d028      	beq.n	800a4a6 <UART_SetConfig+0xe7e>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	2b08      	cmp	r3, #8
 800a45a:	d01f      	beq.n	800a49c <UART_SetConfig+0xe74>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	2b09      	cmp	r3, #9
 800a462:	d016      	beq.n	800a492 <UART_SetConfig+0xe6a>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	2b0a      	cmp	r3, #10
 800a46a:	d00d      	beq.n	800a488 <UART_SetConfig+0xe60>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	2b0b      	cmp	r3, #11
 800a472:	d104      	bne.n	800a47e <UART_SetConfig+0xe56>
 800a474:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a478:	f04f 0400 	mov.w	r4, #0
 800a47c:	e03a      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a47e:	f04f 0301 	mov.w	r3, #1
 800a482:	f04f 0400 	mov.w	r4, #0
 800a486:	e035      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a488:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a48c:	f04f 0400 	mov.w	r4, #0
 800a490:	e030      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a492:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a496:	f04f 0400 	mov.w	r4, #0
 800a49a:	e02b      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a49c:	f04f 0320 	mov.w	r3, #32
 800a4a0:	f04f 0400 	mov.w	r4, #0
 800a4a4:	e026      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4a6:	f04f 0310 	mov.w	r3, #16
 800a4aa:	f04f 0400 	mov.w	r4, #0
 800a4ae:	e021      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4b0:	f04f 030c 	mov.w	r3, #12
 800a4b4:	f04f 0400 	mov.w	r4, #0
 800a4b8:	e01c      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4ba:	f04f 030a 	mov.w	r3, #10
 800a4be:	f04f 0400 	mov.w	r4, #0
 800a4c2:	e017      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4c4:	f04f 0308 	mov.w	r3, #8
 800a4c8:	f04f 0400 	mov.w	r4, #0
 800a4cc:	e012      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4ce:	f04f 0306 	mov.w	r3, #6
 800a4d2:	f04f 0400 	mov.w	r4, #0
 800a4d6:	e00d      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4d8:	f04f 0304 	mov.w	r3, #4
 800a4dc:	f04f 0400 	mov.w	r4, #0
 800a4e0:	e008      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4e2:	f04f 0302 	mov.w	r3, #2
 800a4e6:	f04f 0400 	mov.w	r4, #0
 800a4ea:	e003      	b.n	800a4f4 <UART_SetConfig+0xecc>
 800a4ec:	f04f 0301 	mov.w	r3, #1
 800a4f0:	f04f 0400 	mov.w	r4, #0
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4623      	mov	r3, r4
 800a4f8:	f7f5 feee 	bl	80002d8 <__aeabi_uldivmod>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	4619      	mov	r1, r3
 800a502:	4622      	mov	r2, r4
 800a504:	f04f 0300 	mov.w	r3, #0
 800a508:	f04f 0400 	mov.w	r4, #0
 800a50c:	0214      	lsls	r4, r2, #8
 800a50e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a512:	020b      	lsls	r3, r1, #8
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6852      	ldr	r2, [r2, #4]
 800a518:	0852      	lsrs	r2, r2, #1
 800a51a:	4611      	mov	r1, r2
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	eb13 0b01 	adds.w	fp, r3, r1
 800a524:	eb44 0c02 	adc.w	ip, r4, r2
 800a528:	4658      	mov	r0, fp
 800a52a:	4661      	mov	r1, ip
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f04f 0400 	mov.w	r4, #0
 800a534:	461a      	mov	r2, r3
 800a536:	4623      	mov	r3, r4
 800a538:	f7f5 fece 	bl	80002d8 <__aeabi_uldivmod>
 800a53c:	4603      	mov	r3, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a542:	e247      	b.n	800a9d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a544:	4b96      	ldr	r3, [pc, #600]	; (800a7a0 <UART_SetConfig+0x1178>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 80a3 	beq.w	800a698 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a552:	4b93      	ldr	r3, [pc, #588]	; (800a7a0 <UART_SetConfig+0x1178>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	08db      	lsrs	r3, r3, #3
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	4a91      	ldr	r2, [pc, #580]	; (800a7a4 <UART_SetConfig+0x117c>)
 800a55e:	fa22 f303 	lsr.w	r3, r2, r3
 800a562:	4618      	mov	r0, r3
 800a564:	f04f 0100 	mov.w	r1, #0
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d067      	beq.n	800a640 <UART_SetConfig+0x1018>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	2b01      	cmp	r3, #1
 800a576:	d05e      	beq.n	800a636 <UART_SetConfig+0x100e>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d055      	beq.n	800a62c <UART_SetConfig+0x1004>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	2b03      	cmp	r3, #3
 800a586:	d04c      	beq.n	800a622 <UART_SetConfig+0xffa>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d043      	beq.n	800a618 <UART_SetConfig+0xff0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	2b05      	cmp	r3, #5
 800a596:	d03a      	beq.n	800a60e <UART_SetConfig+0xfe6>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2b06      	cmp	r3, #6
 800a59e:	d031      	beq.n	800a604 <UART_SetConfig+0xfdc>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	2b07      	cmp	r3, #7
 800a5a6:	d028      	beq.n	800a5fa <UART_SetConfig+0xfd2>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d01f      	beq.n	800a5f0 <UART_SetConfig+0xfc8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b09      	cmp	r3, #9
 800a5b6:	d016      	beq.n	800a5e6 <UART_SetConfig+0xfbe>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	2b0a      	cmp	r3, #10
 800a5be:	d00d      	beq.n	800a5dc <UART_SetConfig+0xfb4>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	2b0b      	cmp	r3, #11
 800a5c6:	d104      	bne.n	800a5d2 <UART_SetConfig+0xfaa>
 800a5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5cc:	f04f 0400 	mov.w	r4, #0
 800a5d0:	e03a      	b.n	800a648 <UART_SetConfig+0x1020>
 800a5d2:	f04f 0301 	mov.w	r3, #1
 800a5d6:	f04f 0400 	mov.w	r4, #0
 800a5da:	e035      	b.n	800a648 <UART_SetConfig+0x1020>
 800a5dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a5e0:	f04f 0400 	mov.w	r4, #0
 800a5e4:	e030      	b.n	800a648 <UART_SetConfig+0x1020>
 800a5e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a5ea:	f04f 0400 	mov.w	r4, #0
 800a5ee:	e02b      	b.n	800a648 <UART_SetConfig+0x1020>
 800a5f0:	f04f 0320 	mov.w	r3, #32
 800a5f4:	f04f 0400 	mov.w	r4, #0
 800a5f8:	e026      	b.n	800a648 <UART_SetConfig+0x1020>
 800a5fa:	f04f 0310 	mov.w	r3, #16
 800a5fe:	f04f 0400 	mov.w	r4, #0
 800a602:	e021      	b.n	800a648 <UART_SetConfig+0x1020>
 800a604:	f04f 030c 	mov.w	r3, #12
 800a608:	f04f 0400 	mov.w	r4, #0
 800a60c:	e01c      	b.n	800a648 <UART_SetConfig+0x1020>
 800a60e:	f04f 030a 	mov.w	r3, #10
 800a612:	f04f 0400 	mov.w	r4, #0
 800a616:	e017      	b.n	800a648 <UART_SetConfig+0x1020>
 800a618:	f04f 0308 	mov.w	r3, #8
 800a61c:	f04f 0400 	mov.w	r4, #0
 800a620:	e012      	b.n	800a648 <UART_SetConfig+0x1020>
 800a622:	f04f 0306 	mov.w	r3, #6
 800a626:	f04f 0400 	mov.w	r4, #0
 800a62a:	e00d      	b.n	800a648 <UART_SetConfig+0x1020>
 800a62c:	f04f 0304 	mov.w	r3, #4
 800a630:	f04f 0400 	mov.w	r4, #0
 800a634:	e008      	b.n	800a648 <UART_SetConfig+0x1020>
 800a636:	f04f 0302 	mov.w	r3, #2
 800a63a:	f04f 0400 	mov.w	r4, #0
 800a63e:	e003      	b.n	800a648 <UART_SetConfig+0x1020>
 800a640:	f04f 0301 	mov.w	r3, #1
 800a644:	f04f 0400 	mov.w	r4, #0
 800a648:	461a      	mov	r2, r3
 800a64a:	4623      	mov	r3, r4
 800a64c:	f7f5 fe44 	bl	80002d8 <__aeabi_uldivmod>
 800a650:	4603      	mov	r3, r0
 800a652:	460c      	mov	r4, r1
 800a654:	4619      	mov	r1, r3
 800a656:	4622      	mov	r2, r4
 800a658:	f04f 0300 	mov.w	r3, #0
 800a65c:	f04f 0400 	mov.w	r4, #0
 800a660:	0214      	lsls	r4, r2, #8
 800a662:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a666:	020b      	lsls	r3, r1, #8
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6852      	ldr	r2, [r2, #4]
 800a66c:	0852      	lsrs	r2, r2, #1
 800a66e:	4611      	mov	r1, r2
 800a670:	f04f 0200 	mov.w	r2, #0
 800a674:	eb13 0b01 	adds.w	fp, r3, r1
 800a678:	eb44 0c02 	adc.w	ip, r4, r2
 800a67c:	4658      	mov	r0, fp
 800a67e:	4661      	mov	r1, ip
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f04f 0400 	mov.w	r4, #0
 800a688:	461a      	mov	r2, r3
 800a68a:	4623      	mov	r3, r4
 800a68c:	f7f5 fe24 	bl	80002d8 <__aeabi_uldivmod>
 800a690:	4603      	mov	r3, r0
 800a692:	460c      	mov	r4, r1
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a696:	e19d      	b.n	800a9d4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d05b      	beq.n	800a758 <UART_SetConfig+0x1130>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d053      	beq.n	800a750 <UART_SetConfig+0x1128>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d04b      	beq.n	800a748 <UART_SetConfig+0x1120>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d043      	beq.n	800a740 <UART_SetConfig+0x1118>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d03b      	beq.n	800a738 <UART_SetConfig+0x1110>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b05      	cmp	r3, #5
 800a6c6:	d033      	beq.n	800a730 <UART_SetConfig+0x1108>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	2b06      	cmp	r3, #6
 800a6ce:	d02b      	beq.n	800a728 <UART_SetConfig+0x1100>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	2b07      	cmp	r3, #7
 800a6d6:	d023      	beq.n	800a720 <UART_SetConfig+0x10f8>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d01b      	beq.n	800a718 <UART_SetConfig+0x10f0>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d013      	beq.n	800a710 <UART_SetConfig+0x10e8>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	2b0a      	cmp	r3, #10
 800a6ee:	d00b      	beq.n	800a708 <UART_SetConfig+0x10e0>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	2b0b      	cmp	r3, #11
 800a6f6:	d103      	bne.n	800a700 <UART_SetConfig+0x10d8>
 800a6f8:	4b2a      	ldr	r3, [pc, #168]	; (800a7a4 <UART_SetConfig+0x117c>)
 800a6fa:	f04f 0400 	mov.w	r4, #0
 800a6fe:	e02e      	b.n	800a75e <UART_SetConfig+0x1136>
 800a700:	4b29      	ldr	r3, [pc, #164]	; (800a7a8 <UART_SetConfig+0x1180>)
 800a702:	f04f 0403 	mov.w	r4, #3
 800a706:	e02a      	b.n	800a75e <UART_SetConfig+0x1136>
 800a708:	4b28      	ldr	r3, [pc, #160]	; (800a7ac <UART_SetConfig+0x1184>)
 800a70a:	f04f 0400 	mov.w	r4, #0
 800a70e:	e026      	b.n	800a75e <UART_SetConfig+0x1136>
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <UART_SetConfig+0x1188>)
 800a712:	f04f 0400 	mov.w	r4, #0
 800a716:	e022      	b.n	800a75e <UART_SetConfig+0x1136>
 800a718:	4b26      	ldr	r3, [pc, #152]	; (800a7b4 <UART_SetConfig+0x118c>)
 800a71a:	f04f 0400 	mov.w	r4, #0
 800a71e:	e01e      	b.n	800a75e <UART_SetConfig+0x1136>
 800a720:	4b25      	ldr	r3, [pc, #148]	; (800a7b8 <UART_SetConfig+0x1190>)
 800a722:	f04f 0400 	mov.w	r4, #0
 800a726:	e01a      	b.n	800a75e <UART_SetConfig+0x1136>
 800a728:	a419      	add	r4, pc, #100	; (adr r4, 800a790 <UART_SetConfig+0x1168>)
 800a72a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a72e:	e016      	b.n	800a75e <UART_SetConfig+0x1136>
 800a730:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <UART_SetConfig+0x1194>)
 800a732:	f04f 0400 	mov.w	r4, #0
 800a736:	e012      	b.n	800a75e <UART_SetConfig+0x1136>
 800a738:	4b21      	ldr	r3, [pc, #132]	; (800a7c0 <UART_SetConfig+0x1198>)
 800a73a:	f04f 0400 	mov.w	r4, #0
 800a73e:	e00e      	b.n	800a75e <UART_SetConfig+0x1136>
 800a740:	a415      	add	r4, pc, #84	; (adr r4, 800a798 <UART_SetConfig+0x1170>)
 800a742:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a746:	e00a      	b.n	800a75e <UART_SetConfig+0x1136>
 800a748:	4b1e      	ldr	r3, [pc, #120]	; (800a7c4 <UART_SetConfig+0x119c>)
 800a74a:	f04f 0400 	mov.w	r4, #0
 800a74e:	e006      	b.n	800a75e <UART_SetConfig+0x1136>
 800a750:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <UART_SetConfig+0x11a0>)
 800a752:	f04f 0401 	mov.w	r4, #1
 800a756:	e002      	b.n	800a75e <UART_SetConfig+0x1136>
 800a758:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <UART_SetConfig+0x1180>)
 800a75a:	f04f 0403 	mov.w	r4, #3
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6852      	ldr	r2, [r2, #4]
 800a762:	0852      	lsrs	r2, r2, #1
 800a764:	4611      	mov	r1, r2
 800a766:	f04f 0200 	mov.w	r2, #0
 800a76a:	eb13 0b01 	adds.w	fp, r3, r1
 800a76e:	eb44 0c02 	adc.w	ip, r4, r2
 800a772:	4658      	mov	r0, fp
 800a774:	4661      	mov	r1, ip
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f04f 0400 	mov.w	r4, #0
 800a77e:	461a      	mov	r2, r3
 800a780:	4623      	mov	r3, r4
 800a782:	f7f5 fda9 	bl	80002d8 <__aeabi_uldivmod>
 800a786:	4603      	mov	r3, r0
 800a788:	460c      	mov	r4, r1
 800a78a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a78c:	e122      	b.n	800a9d4 <UART_SetConfig+0x13ac>
 800a78e:	bf00      	nop
 800a790:	51615500 	.word	0x51615500
 800a794:	00000000 	.word	0x00000000
 800a798:	a2c2aa00 	.word	0xa2c2aa00
 800a79c:	00000000 	.word	0x00000000
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	03d09000 	.word	0x03d09000
 800a7a8:	d0900000 	.word	0xd0900000
 800a7ac:	07a12000 	.word	0x07a12000
 800a7b0:	0f424000 	.word	0x0f424000
 800a7b4:	1e848000 	.word	0x1e848000
 800a7b8:	3d090000 	.word	0x3d090000
 800a7bc:	61a80000 	.word	0x61a80000
 800a7c0:	7a120000 	.word	0x7a120000
 800a7c4:	f4240000 	.word	0xf4240000
 800a7c8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d05b      	beq.n	800a88c <UART_SetConfig+0x1264>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d053      	beq.n	800a884 <UART_SetConfig+0x125c>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d04b      	beq.n	800a87c <UART_SetConfig+0x1254>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d043      	beq.n	800a874 <UART_SetConfig+0x124c>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d03b      	beq.n	800a86c <UART_SetConfig+0x1244>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b05      	cmp	r3, #5
 800a7fa:	d033      	beq.n	800a864 <UART_SetConfig+0x123c>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	2b06      	cmp	r3, #6
 800a802:	d02b      	beq.n	800a85c <UART_SetConfig+0x1234>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b07      	cmp	r3, #7
 800a80a:	d023      	beq.n	800a854 <UART_SetConfig+0x122c>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b08      	cmp	r3, #8
 800a812:	d01b      	beq.n	800a84c <UART_SetConfig+0x1224>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d013      	beq.n	800a844 <UART_SetConfig+0x121c>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b0a      	cmp	r3, #10
 800a822:	d00b      	beq.n	800a83c <UART_SetConfig+0x1214>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b0b      	cmp	r3, #11
 800a82a:	d103      	bne.n	800a834 <UART_SetConfig+0x120c>
 800a82c:	4bc0      	ldr	r3, [pc, #768]	; (800ab30 <UART_SetConfig+0x1508>)
 800a82e:	f04f 0400 	mov.w	r4, #0
 800a832:	e02e      	b.n	800a892 <UART_SetConfig+0x126a>
 800a834:	4bbf      	ldr	r3, [pc, #764]	; (800ab34 <UART_SetConfig+0x150c>)
 800a836:	f04f 0400 	mov.w	r4, #0
 800a83a:	e02a      	b.n	800a892 <UART_SetConfig+0x126a>
 800a83c:	4bbe      	ldr	r3, [pc, #760]	; (800ab38 <UART_SetConfig+0x1510>)
 800a83e:	f04f 0400 	mov.w	r4, #0
 800a842:	e026      	b.n	800a892 <UART_SetConfig+0x126a>
 800a844:	4bbd      	ldr	r3, [pc, #756]	; (800ab3c <UART_SetConfig+0x1514>)
 800a846:	f04f 0400 	mov.w	r4, #0
 800a84a:	e022      	b.n	800a892 <UART_SetConfig+0x126a>
 800a84c:	4bbc      	ldr	r3, [pc, #752]	; (800ab40 <UART_SetConfig+0x1518>)
 800a84e:	f04f 0400 	mov.w	r4, #0
 800a852:	e01e      	b.n	800a892 <UART_SetConfig+0x126a>
 800a854:	4bbb      	ldr	r3, [pc, #748]	; (800ab44 <UART_SetConfig+0x151c>)
 800a856:	f04f 0400 	mov.w	r4, #0
 800a85a:	e01a      	b.n	800a892 <UART_SetConfig+0x126a>
 800a85c:	a4b0      	add	r4, pc, #704	; (adr r4, 800ab20 <UART_SetConfig+0x14f8>)
 800a85e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a862:	e016      	b.n	800a892 <UART_SetConfig+0x126a>
 800a864:	4bb8      	ldr	r3, [pc, #736]	; (800ab48 <UART_SetConfig+0x1520>)
 800a866:	f04f 0400 	mov.w	r4, #0
 800a86a:	e012      	b.n	800a892 <UART_SetConfig+0x126a>
 800a86c:	4bb7      	ldr	r3, [pc, #732]	; (800ab4c <UART_SetConfig+0x1524>)
 800a86e:	f04f 0400 	mov.w	r4, #0
 800a872:	e00e      	b.n	800a892 <UART_SetConfig+0x126a>
 800a874:	a4ac      	add	r4, pc, #688	; (adr r4, 800ab28 <UART_SetConfig+0x1500>)
 800a876:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a87a:	e00a      	b.n	800a892 <UART_SetConfig+0x126a>
 800a87c:	4bb4      	ldr	r3, [pc, #720]	; (800ab50 <UART_SetConfig+0x1528>)
 800a87e:	f04f 0400 	mov.w	r4, #0
 800a882:	e006      	b.n	800a892 <UART_SetConfig+0x126a>
 800a884:	4bb3      	ldr	r3, [pc, #716]	; (800ab54 <UART_SetConfig+0x152c>)
 800a886:	f04f 0400 	mov.w	r4, #0
 800a88a:	e002      	b.n	800a892 <UART_SetConfig+0x126a>
 800a88c:	4ba9      	ldr	r3, [pc, #676]	; (800ab34 <UART_SetConfig+0x150c>)
 800a88e:	f04f 0400 	mov.w	r4, #0
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6852      	ldr	r2, [r2, #4]
 800a896:	0852      	lsrs	r2, r2, #1
 800a898:	4611      	mov	r1, r2
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	eb13 0b01 	adds.w	fp, r3, r1
 800a8a2:	eb44 0c02 	adc.w	ip, r4, r2
 800a8a6:	4658      	mov	r0, fp
 800a8a8:	4661      	mov	r1, ip
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	f04f 0400 	mov.w	r4, #0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	4623      	mov	r3, r4
 800a8b6:	f7f5 fd0f 	bl	80002d8 <__aeabi_uldivmod>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a8c0:	e088      	b.n	800a9d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d064      	beq.n	800a994 <UART_SetConfig+0x136c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d05b      	beq.n	800a98a <UART_SetConfig+0x1362>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d052      	beq.n	800a980 <UART_SetConfig+0x1358>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d04a      	beq.n	800a978 <UART_SetConfig+0x1350>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	d041      	beq.n	800a96e <UART_SetConfig+0x1346>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2b05      	cmp	r3, #5
 800a8f0:	d039      	beq.n	800a966 <UART_SetConfig+0x133e>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	2b06      	cmp	r3, #6
 800a8f8:	d031      	beq.n	800a95e <UART_SetConfig+0x1336>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b07      	cmp	r3, #7
 800a900:	d028      	beq.n	800a954 <UART_SetConfig+0x132c>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	2b08      	cmp	r3, #8
 800a908:	d01f      	beq.n	800a94a <UART_SetConfig+0x1322>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	2b09      	cmp	r3, #9
 800a910:	d016      	beq.n	800a940 <UART_SetConfig+0x1318>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	2b0a      	cmp	r3, #10
 800a918:	d00d      	beq.n	800a936 <UART_SetConfig+0x130e>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	2b0b      	cmp	r3, #11
 800a920:	d104      	bne.n	800a92c <UART_SetConfig+0x1304>
 800a922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a926:	f04f 0400 	mov.w	r4, #0
 800a92a:	e037      	b.n	800a99c <UART_SetConfig+0x1374>
 800a92c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a930:	f04f 0400 	mov.w	r4, #0
 800a934:	e032      	b.n	800a99c <UART_SetConfig+0x1374>
 800a936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	e02d      	b.n	800a99c <UART_SetConfig+0x1374>
 800a940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a944:	f04f 0400 	mov.w	r4, #0
 800a948:	e028      	b.n	800a99c <UART_SetConfig+0x1374>
 800a94a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a94e:	f04f 0400 	mov.w	r4, #0
 800a952:	e023      	b.n	800a99c <UART_SetConfig+0x1374>
 800a954:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a958:	f04f 0400 	mov.w	r4, #0
 800a95c:	e01e      	b.n	800a99c <UART_SetConfig+0x1374>
 800a95e:	4b7e      	ldr	r3, [pc, #504]	; (800ab58 <UART_SetConfig+0x1530>)
 800a960:	f04f 0400 	mov.w	r4, #0
 800a964:	e01a      	b.n	800a99c <UART_SetConfig+0x1374>
 800a966:	4b7d      	ldr	r3, [pc, #500]	; (800ab5c <UART_SetConfig+0x1534>)
 800a968:	f04f 0400 	mov.w	r4, #0
 800a96c:	e016      	b.n	800a99c <UART_SetConfig+0x1374>
 800a96e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	e011      	b.n	800a99c <UART_SetConfig+0x1374>
 800a978:	4b79      	ldr	r3, [pc, #484]	; (800ab60 <UART_SetConfig+0x1538>)
 800a97a:	f04f 0400 	mov.w	r4, #0
 800a97e:	e00d      	b.n	800a99c <UART_SetConfig+0x1374>
 800a980:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a984:	f04f 0400 	mov.w	r4, #0
 800a988:	e008      	b.n	800a99c <UART_SetConfig+0x1374>
 800a98a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	e003      	b.n	800a99c <UART_SetConfig+0x1374>
 800a994:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a998:	f04f 0400 	mov.w	r4, #0
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6852      	ldr	r2, [r2, #4]
 800a9a0:	0852      	lsrs	r2, r2, #1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	f04f 0200 	mov.w	r2, #0
 800a9a8:	eb13 0b01 	adds.w	fp, r3, r1
 800a9ac:	eb44 0c02 	adc.w	ip, r4, r2
 800a9b0:	4658      	mov	r0, fp
 800a9b2:	4661      	mov	r1, ip
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f04f 0400 	mov.w	r4, #0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	4623      	mov	r3, r4
 800a9c0:	f7f5 fc8a 	bl	80002d8 <__aeabi_uldivmod>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9ca:	e003      	b.n	800a9d4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a9d2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9da:	d309      	bcc.n	800a9f0 <UART_SetConfig+0x13c8>
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e2:	d205      	bcs.n	800a9f0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ea:	60da      	str	r2, [r3, #12]
 800a9ec:	f000 bf85 	b.w	800b8fa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9f6:	f000 bf80 	b.w	800b8fa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa02:	f040 83da 	bne.w	800b1ba <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800aa06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	f200 83b3 	bhi.w	800b176 <UART_SetConfig+0x1b4e>
 800aa10:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <UART_SetConfig+0x13f0>)
 800aa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa16:	bf00      	nop
 800aa18:	0800ab65 	.word	0x0800ab65
 800aa1c:	0800ac1d 	.word	0x0800ac1d
 800aa20:	0800b177 	.word	0x0800b177
 800aa24:	0800b177 	.word	0x0800b177
 800aa28:	0800acd5 	.word	0x0800acd5
 800aa2c:	0800b177 	.word	0x0800b177
 800aa30:	0800b177 	.word	0x0800b177
 800aa34:	0800b177 	.word	0x0800b177
 800aa38:	0800ad91 	.word	0x0800ad91
 800aa3c:	0800b177 	.word	0x0800b177
 800aa40:	0800b177 	.word	0x0800b177
 800aa44:	0800b177 	.word	0x0800b177
 800aa48:	0800b177 	.word	0x0800b177
 800aa4c:	0800b177 	.word	0x0800b177
 800aa50:	0800b177 	.word	0x0800b177
 800aa54:	0800b177 	.word	0x0800b177
 800aa58:	0800ae4d 	.word	0x0800ae4d
 800aa5c:	0800b177 	.word	0x0800b177
 800aa60:	0800b177 	.word	0x0800b177
 800aa64:	0800b177 	.word	0x0800b177
 800aa68:	0800b177 	.word	0x0800b177
 800aa6c:	0800b177 	.word	0x0800b177
 800aa70:	0800b177 	.word	0x0800b177
 800aa74:	0800b177 	.word	0x0800b177
 800aa78:	0800b177 	.word	0x0800b177
 800aa7c:	0800b177 	.word	0x0800b177
 800aa80:	0800b177 	.word	0x0800b177
 800aa84:	0800b177 	.word	0x0800b177
 800aa88:	0800b177 	.word	0x0800b177
 800aa8c:	0800b177 	.word	0x0800b177
 800aa90:	0800b177 	.word	0x0800b177
 800aa94:	0800b177 	.word	0x0800b177
 800aa98:	0800afbf 	.word	0x0800afbf
 800aa9c:	0800b177 	.word	0x0800b177
 800aaa0:	0800b177 	.word	0x0800b177
 800aaa4:	0800b177 	.word	0x0800b177
 800aaa8:	0800b177 	.word	0x0800b177
 800aaac:	0800b177 	.word	0x0800b177
 800aab0:	0800b177 	.word	0x0800b177
 800aab4:	0800b177 	.word	0x0800b177
 800aab8:	0800b177 	.word	0x0800b177
 800aabc:	0800b177 	.word	0x0800b177
 800aac0:	0800b177 	.word	0x0800b177
 800aac4:	0800b177 	.word	0x0800b177
 800aac8:	0800b177 	.word	0x0800b177
 800aacc:	0800b177 	.word	0x0800b177
 800aad0:	0800b177 	.word	0x0800b177
 800aad4:	0800b177 	.word	0x0800b177
 800aad8:	0800b177 	.word	0x0800b177
 800aadc:	0800b177 	.word	0x0800b177
 800aae0:	0800b177 	.word	0x0800b177
 800aae4:	0800b177 	.word	0x0800b177
 800aae8:	0800b177 	.word	0x0800b177
 800aaec:	0800b177 	.word	0x0800b177
 800aaf0:	0800b177 	.word	0x0800b177
 800aaf4:	0800b177 	.word	0x0800b177
 800aaf8:	0800b177 	.word	0x0800b177
 800aafc:	0800b177 	.word	0x0800b177
 800ab00:	0800b177 	.word	0x0800b177
 800ab04:	0800b177 	.word	0x0800b177
 800ab08:	0800b177 	.word	0x0800b177
 800ab0c:	0800b177 	.word	0x0800b177
 800ab10:	0800b177 	.word	0x0800b177
 800ab14:	0800b177 	.word	0x0800b177
 800ab18:	0800b0b5 	.word	0x0800b0b5
 800ab1c:	f3af 8000 	nop.w
 800ab20:	05161500 	.word	0x05161500
 800ab24:	00000000 	.word	0x00000000
 800ab28:	0a2c2a00 	.word	0x0a2c2a00
 800ab2c:	00000000 	.word	0x00000000
 800ab30:	003d0900 	.word	0x003d0900
 800ab34:	3d090000 	.word	0x3d090000
 800ab38:	007a1200 	.word	0x007a1200
 800ab3c:	00f42400 	.word	0x00f42400
 800ab40:	01e84800 	.word	0x01e84800
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	061a8000 	.word	0x061a8000
 800ab4c:	07a12000 	.word	0x07a12000
 800ab50:	0f424000 	.word	0x0f424000
 800ab54:	1e848000 	.word	0x1e848000
 800ab58:	000aaa00 	.word	0x000aaa00
 800ab5c:	000ccc00 	.word	0x000ccc00
 800ab60:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab64:	f7fb ff42 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 800ab68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d044      	beq.n	800abfc <UART_SetConfig+0x15d4>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d03e      	beq.n	800abf8 <UART_SetConfig+0x15d0>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d038      	beq.n	800abf4 <UART_SetConfig+0x15cc>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d032      	beq.n	800abf0 <UART_SetConfig+0x15c8>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b04      	cmp	r3, #4
 800ab90:	d02c      	beq.n	800abec <UART_SetConfig+0x15c4>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	d026      	beq.n	800abe8 <UART_SetConfig+0x15c0>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b06      	cmp	r3, #6
 800aba0:	d020      	beq.n	800abe4 <UART_SetConfig+0x15bc>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	2b07      	cmp	r3, #7
 800aba8:	d01a      	beq.n	800abe0 <UART_SetConfig+0x15b8>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d014      	beq.n	800abdc <UART_SetConfig+0x15b4>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	d00e      	beq.n	800abd8 <UART_SetConfig+0x15b0>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b0a      	cmp	r3, #10
 800abc0:	d008      	beq.n	800abd4 <UART_SetConfig+0x15ac>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	2b0b      	cmp	r3, #11
 800abc8:	d102      	bne.n	800abd0 <UART_SetConfig+0x15a8>
 800abca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abce:	e016      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abd0:	2301      	movs	r3, #1
 800abd2:	e014      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abd4:	2380      	movs	r3, #128	; 0x80
 800abd6:	e012      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	e010      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abdc:	2320      	movs	r3, #32
 800abde:	e00e      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abe0:	2310      	movs	r3, #16
 800abe2:	e00c      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abe4:	230c      	movs	r3, #12
 800abe6:	e00a      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abe8:	230a      	movs	r3, #10
 800abea:	e008      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abec:	2308      	movs	r3, #8
 800abee:	e006      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abf0:	2306      	movs	r3, #6
 800abf2:	e004      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abf4:	2304      	movs	r3, #4
 800abf6:	e002      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abf8:	2302      	movs	r3, #2
 800abfa:	e000      	b.n	800abfe <UART_SetConfig+0x15d6>
 800abfc:	2301      	movs	r3, #1
 800abfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac04:	005a      	lsls	r2, r3, #1
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	085b      	lsrs	r3, r3, #1
 800ac0c:	441a      	add	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac1a:	e2b0      	b.n	800b17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac1c:	f7fb fefc 	bl	8006a18 <HAL_RCC_GetPCLK2Freq>
 800ac20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d044      	beq.n	800acb4 <UART_SetConfig+0x168c>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d03e      	beq.n	800acb0 <UART_SetConfig+0x1688>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d038      	beq.n	800acac <UART_SetConfig+0x1684>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d032      	beq.n	800aca8 <UART_SetConfig+0x1680>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d02c      	beq.n	800aca4 <UART_SetConfig+0x167c>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4e:	2b05      	cmp	r3, #5
 800ac50:	d026      	beq.n	800aca0 <UART_SetConfig+0x1678>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	2b06      	cmp	r3, #6
 800ac58:	d020      	beq.n	800ac9c <UART_SetConfig+0x1674>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5e:	2b07      	cmp	r3, #7
 800ac60:	d01a      	beq.n	800ac98 <UART_SetConfig+0x1670>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	d014      	beq.n	800ac94 <UART_SetConfig+0x166c>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	2b09      	cmp	r3, #9
 800ac70:	d00e      	beq.n	800ac90 <UART_SetConfig+0x1668>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2b0a      	cmp	r3, #10
 800ac78:	d008      	beq.n	800ac8c <UART_SetConfig+0x1664>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7e:	2b0b      	cmp	r3, #11
 800ac80:	d102      	bne.n	800ac88 <UART_SetConfig+0x1660>
 800ac82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac86:	e016      	b.n	800acb6 <UART_SetConfig+0x168e>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e014      	b.n	800acb6 <UART_SetConfig+0x168e>
 800ac8c:	2380      	movs	r3, #128	; 0x80
 800ac8e:	e012      	b.n	800acb6 <UART_SetConfig+0x168e>
 800ac90:	2340      	movs	r3, #64	; 0x40
 800ac92:	e010      	b.n	800acb6 <UART_SetConfig+0x168e>
 800ac94:	2320      	movs	r3, #32
 800ac96:	e00e      	b.n	800acb6 <UART_SetConfig+0x168e>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	e00c      	b.n	800acb6 <UART_SetConfig+0x168e>
 800ac9c:	230c      	movs	r3, #12
 800ac9e:	e00a      	b.n	800acb6 <UART_SetConfig+0x168e>
 800aca0:	230a      	movs	r3, #10
 800aca2:	e008      	b.n	800acb6 <UART_SetConfig+0x168e>
 800aca4:	2308      	movs	r3, #8
 800aca6:	e006      	b.n	800acb6 <UART_SetConfig+0x168e>
 800aca8:	2306      	movs	r3, #6
 800acaa:	e004      	b.n	800acb6 <UART_SetConfig+0x168e>
 800acac:	2304      	movs	r3, #4
 800acae:	e002      	b.n	800acb6 <UART_SetConfig+0x168e>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e000      	b.n	800acb6 <UART_SetConfig+0x168e>
 800acb4:	2301      	movs	r3, #1
 800acb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbc:	005a      	lsls	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	085b      	lsrs	r3, r3, #1
 800acc4:	441a      	add	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	fbb2 f3f3 	udiv	r3, r2, r3
 800acce:	b29b      	uxth	r3, r3
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acd2:	e254      	b.n	800b17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd4:	f107 0318 	add.w	r3, r7, #24
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fd f81f 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acde:	69fa      	ldr	r2, [r7, #28]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d044      	beq.n	800ad72 <UART_SetConfig+0x174a>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	2b01      	cmp	r3, #1
 800acee:	d03e      	beq.n	800ad6e <UART_SetConfig+0x1746>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d038      	beq.n	800ad6a <UART_SetConfig+0x1742>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d032      	beq.n	800ad66 <UART_SetConfig+0x173e>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d02c      	beq.n	800ad62 <UART_SetConfig+0x173a>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	2b05      	cmp	r3, #5
 800ad0e:	d026      	beq.n	800ad5e <UART_SetConfig+0x1736>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	2b06      	cmp	r3, #6
 800ad16:	d020      	beq.n	800ad5a <UART_SetConfig+0x1732>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	2b07      	cmp	r3, #7
 800ad1e:	d01a      	beq.n	800ad56 <UART_SetConfig+0x172e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b08      	cmp	r3, #8
 800ad26:	d014      	beq.n	800ad52 <UART_SetConfig+0x172a>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	d00e      	beq.n	800ad4e <UART_SetConfig+0x1726>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	2b0a      	cmp	r3, #10
 800ad36:	d008      	beq.n	800ad4a <UART_SetConfig+0x1722>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	2b0b      	cmp	r3, #11
 800ad3e:	d102      	bne.n	800ad46 <UART_SetConfig+0x171e>
 800ad40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad44:	e016      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e014      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad4a:	2380      	movs	r3, #128	; 0x80
 800ad4c:	e012      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad4e:	2340      	movs	r3, #64	; 0x40
 800ad50:	e010      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad52:	2320      	movs	r3, #32
 800ad54:	e00e      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad56:	2310      	movs	r3, #16
 800ad58:	e00c      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad5a:	230c      	movs	r3, #12
 800ad5c:	e00a      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad5e:	230a      	movs	r3, #10
 800ad60:	e008      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad62:	2308      	movs	r3, #8
 800ad64:	e006      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad66:	2306      	movs	r3, #6
 800ad68:	e004      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad6a:	2304      	movs	r3, #4
 800ad6c:	e002      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e000      	b.n	800ad74 <UART_SetConfig+0x174c>
 800ad72:	2301      	movs	r3, #1
 800ad74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad78:	005a      	lsls	r2, r3, #1
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	441a      	add	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad8e:	e1f6      	b.n	800b17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad90:	f107 030c 	add.w	r3, r7, #12
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fd f90d 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d044      	beq.n	800ae2e <UART_SetConfig+0x1806>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d03e      	beq.n	800ae2a <UART_SetConfig+0x1802>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d038      	beq.n	800ae26 <UART_SetConfig+0x17fe>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d032      	beq.n	800ae22 <UART_SetConfig+0x17fa>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d02c      	beq.n	800ae1e <UART_SetConfig+0x17f6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b05      	cmp	r3, #5
 800adca:	d026      	beq.n	800ae1a <UART_SetConfig+0x17f2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b06      	cmp	r3, #6
 800add2:	d020      	beq.n	800ae16 <UART_SetConfig+0x17ee>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b07      	cmp	r3, #7
 800adda:	d01a      	beq.n	800ae12 <UART_SetConfig+0x17ea>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d014      	beq.n	800ae0e <UART_SetConfig+0x17e6>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b09      	cmp	r3, #9
 800adea:	d00e      	beq.n	800ae0a <UART_SetConfig+0x17e2>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b0a      	cmp	r3, #10
 800adf2:	d008      	beq.n	800ae06 <UART_SetConfig+0x17de>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b0b      	cmp	r3, #11
 800adfa:	d102      	bne.n	800ae02 <UART_SetConfig+0x17da>
 800adfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae00:	e016      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e014      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae06:	2380      	movs	r3, #128	; 0x80
 800ae08:	e012      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae0a:	2340      	movs	r3, #64	; 0x40
 800ae0c:	e010      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae0e:	2320      	movs	r3, #32
 800ae10:	e00e      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae12:	2310      	movs	r3, #16
 800ae14:	e00c      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae16:	230c      	movs	r3, #12
 800ae18:	e00a      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	e008      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae1e:	2308      	movs	r3, #8
 800ae20:	e006      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae22:	2306      	movs	r3, #6
 800ae24:	e004      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae26:	2304      	movs	r3, #4
 800ae28:	e002      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae2a:	2302      	movs	r3, #2
 800ae2c:	e000      	b.n	800ae30 <UART_SetConfig+0x1808>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae34:	005a      	lsls	r2, r3, #1
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	085b      	lsrs	r3, r3, #1
 800ae3c:	441a      	add	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae4a:	e198      	b.n	800b17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae4c:	4b87      	ldr	r3, [pc, #540]	; (800b06c <UART_SetConfig+0x1a44>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d05e      	beq.n	800af16 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae58:	4b84      	ldr	r3, [pc, #528]	; (800b06c <UART_SetConfig+0x1a44>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	08db      	lsrs	r3, r3, #3
 800ae5e:	f003 0303 	and.w	r3, r3, #3
 800ae62:	4a83      	ldr	r2, [pc, #524]	; (800b070 <UART_SetConfig+0x1a48>)
 800ae64:	40da      	lsrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d044      	beq.n	800aef8 <UART_SetConfig+0x18d0>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d03e      	beq.n	800aef4 <UART_SetConfig+0x18cc>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d038      	beq.n	800aef0 <UART_SetConfig+0x18c8>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d032      	beq.n	800aeec <UART_SetConfig+0x18c4>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d02c      	beq.n	800aee8 <UART_SetConfig+0x18c0>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d026      	beq.n	800aee4 <UART_SetConfig+0x18bc>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	2b06      	cmp	r3, #6
 800ae9c:	d020      	beq.n	800aee0 <UART_SetConfig+0x18b8>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	2b07      	cmp	r3, #7
 800aea4:	d01a      	beq.n	800aedc <UART_SetConfig+0x18b4>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d014      	beq.n	800aed8 <UART_SetConfig+0x18b0>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	2b09      	cmp	r3, #9
 800aeb4:	d00e      	beq.n	800aed4 <UART_SetConfig+0x18ac>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	2b0a      	cmp	r3, #10
 800aebc:	d008      	beq.n	800aed0 <UART_SetConfig+0x18a8>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	2b0b      	cmp	r3, #11
 800aec4:	d102      	bne.n	800aecc <UART_SetConfig+0x18a4>
 800aec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeca:	e016      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aecc:	2301      	movs	r3, #1
 800aece:	e014      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aed0:	2380      	movs	r3, #128	; 0x80
 800aed2:	e012      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	e010      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aed8:	2320      	movs	r3, #32
 800aeda:	e00e      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aedc:	2310      	movs	r3, #16
 800aede:	e00c      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aee0:	230c      	movs	r3, #12
 800aee2:	e00a      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aee4:	230a      	movs	r3, #10
 800aee6:	e008      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aee8:	2308      	movs	r3, #8
 800aeea:	e006      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aeec:	2306      	movs	r3, #6
 800aeee:	e004      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aef0:	2304      	movs	r3, #4
 800aef2:	e002      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aef4:	2302      	movs	r3, #2
 800aef6:	e000      	b.n	800aefa <UART_SetConfig+0x18d2>
 800aef8:	2301      	movs	r3, #1
 800aefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefe:	005a      	lsls	r2, r3, #1
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	085b      	lsrs	r3, r3, #1
 800af06:	441a      	add	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af10:	b29b      	uxth	r3, r3
 800af12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800af14:	e133      	b.n	800b17e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d043      	beq.n	800afa6 <UART_SetConfig+0x197e>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2b01      	cmp	r3, #1
 800af24:	d03d      	beq.n	800afa2 <UART_SetConfig+0x197a>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d037      	beq.n	800af9e <UART_SetConfig+0x1976>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	2b03      	cmp	r3, #3
 800af34:	d031      	beq.n	800af9a <UART_SetConfig+0x1972>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d02b      	beq.n	800af96 <UART_SetConfig+0x196e>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af42:	2b05      	cmp	r3, #5
 800af44:	d025      	beq.n	800af92 <UART_SetConfig+0x196a>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4a:	2b06      	cmp	r3, #6
 800af4c:	d01f      	beq.n	800af8e <UART_SetConfig+0x1966>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af52:	2b07      	cmp	r3, #7
 800af54:	d019      	beq.n	800af8a <UART_SetConfig+0x1962>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	d013      	beq.n	800af86 <UART_SetConfig+0x195e>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af62:	2b09      	cmp	r3, #9
 800af64:	d00d      	beq.n	800af82 <UART_SetConfig+0x195a>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6a:	2b0a      	cmp	r3, #10
 800af6c:	d007      	beq.n	800af7e <UART_SetConfig+0x1956>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	2b0b      	cmp	r3, #11
 800af74:	d101      	bne.n	800af7a <UART_SetConfig+0x1952>
 800af76:	4b3f      	ldr	r3, [pc, #252]	; (800b074 <UART_SetConfig+0x1a4c>)
 800af78:	e016      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af7a:	4b3f      	ldr	r3, [pc, #252]	; (800b078 <UART_SetConfig+0x1a50>)
 800af7c:	e014      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af7e:	4b3f      	ldr	r3, [pc, #252]	; (800b07c <UART_SetConfig+0x1a54>)
 800af80:	e012      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af82:	4b3f      	ldr	r3, [pc, #252]	; (800b080 <UART_SetConfig+0x1a58>)
 800af84:	e010      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af86:	4b3f      	ldr	r3, [pc, #252]	; (800b084 <UART_SetConfig+0x1a5c>)
 800af88:	e00e      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af8a:	4b3f      	ldr	r3, [pc, #252]	; (800b088 <UART_SetConfig+0x1a60>)
 800af8c:	e00c      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af8e:	4b3f      	ldr	r3, [pc, #252]	; (800b08c <UART_SetConfig+0x1a64>)
 800af90:	e00a      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af92:	4b3f      	ldr	r3, [pc, #252]	; (800b090 <UART_SetConfig+0x1a68>)
 800af94:	e008      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af96:	4b3f      	ldr	r3, [pc, #252]	; (800b094 <UART_SetConfig+0x1a6c>)
 800af98:	e006      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af9a:	4b3f      	ldr	r3, [pc, #252]	; (800b098 <UART_SetConfig+0x1a70>)
 800af9c:	e004      	b.n	800afa8 <UART_SetConfig+0x1980>
 800af9e:	4b3f      	ldr	r3, [pc, #252]	; (800b09c <UART_SetConfig+0x1a74>)
 800afa0:	e002      	b.n	800afa8 <UART_SetConfig+0x1980>
 800afa2:	4b33      	ldr	r3, [pc, #204]	; (800b070 <UART_SetConfig+0x1a48>)
 800afa4:	e000      	b.n	800afa8 <UART_SetConfig+0x1980>
 800afa6:	4b34      	ldr	r3, [pc, #208]	; (800b078 <UART_SetConfig+0x1a50>)
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6852      	ldr	r2, [r2, #4]
 800afac:	0852      	lsrs	r2, r2, #1
 800afae:	441a      	add	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb8:	b29b      	uxth	r3, r3
 800afba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afbc:	e0df      	b.n	800b17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d045      	beq.n	800b052 <UART_SetConfig+0x1a2a>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d03f      	beq.n	800b04e <UART_SetConfig+0x1a26>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d039      	beq.n	800b04a <UART_SetConfig+0x1a22>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d033      	beq.n	800b046 <UART_SetConfig+0x1a1e>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d02d      	beq.n	800b042 <UART_SetConfig+0x1a1a>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b05      	cmp	r3, #5
 800afec:	d027      	beq.n	800b03e <UART_SetConfig+0x1a16>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	2b06      	cmp	r3, #6
 800aff4:	d021      	beq.n	800b03a <UART_SetConfig+0x1a12>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	2b07      	cmp	r3, #7
 800affc:	d01b      	beq.n	800b036 <UART_SetConfig+0x1a0e>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	2b08      	cmp	r3, #8
 800b004:	d015      	beq.n	800b032 <UART_SetConfig+0x1a0a>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d00f      	beq.n	800b02e <UART_SetConfig+0x1a06>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	2b0a      	cmp	r3, #10
 800b014:	d008      	beq.n	800b028 <UART_SetConfig+0x1a00>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	2b0b      	cmp	r3, #11
 800b01c:	d102      	bne.n	800b024 <UART_SetConfig+0x19fc>
 800b01e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b022:	e017      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b024:	4b18      	ldr	r3, [pc, #96]	; (800b088 <UART_SetConfig+0x1a60>)
 800b026:	e015      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b028:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b02c:	e012      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b02e:	4b1c      	ldr	r3, [pc, #112]	; (800b0a0 <UART_SetConfig+0x1a78>)
 800b030:	e010      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b032:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <UART_SetConfig+0x1a7c>)
 800b034:	e00e      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b036:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <UART_SetConfig+0x1a4c>)
 800b038:	e00c      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b03a:	4b1b      	ldr	r3, [pc, #108]	; (800b0a8 <UART_SetConfig+0x1a80>)
 800b03c:	e00a      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b03e:	4b1b      	ldr	r3, [pc, #108]	; (800b0ac <UART_SetConfig+0x1a84>)
 800b040:	e008      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b042:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <UART_SetConfig+0x1a54>)
 800b044:	e006      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b046:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <UART_SetConfig+0x1a88>)
 800b048:	e004      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b04a:	4b0d      	ldr	r3, [pc, #52]	; (800b080 <UART_SetConfig+0x1a58>)
 800b04c:	e002      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b04e:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <UART_SetConfig+0x1a5c>)
 800b050:	e000      	b.n	800b054 <UART_SetConfig+0x1a2c>
 800b052:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <UART_SetConfig+0x1a60>)
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6852      	ldr	r2, [r2, #4]
 800b058:	0852      	lsrs	r2, r2, #1
 800b05a:	441a      	add	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	fbb2 f3f3 	udiv	r3, r2, r3
 800b064:	b29b      	uxth	r3, r3
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b068:	e089      	b.n	800b17e <UART_SetConfig+0x1b56>
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
 800b070:	03d09000 	.word	0x03d09000
 800b074:	0007a120 	.word	0x0007a120
 800b078:	07a12000 	.word	0x07a12000
 800b07c:	000f4240 	.word	0x000f4240
 800b080:	001e8480 	.word	0x001e8480
 800b084:	003d0900 	.word	0x003d0900
 800b088:	007a1200 	.word	0x007a1200
 800b08c:	00a2c2aa 	.word	0x00a2c2aa
 800b090:	00c35000 	.word	0x00c35000
 800b094:	00f42400 	.word	0x00f42400
 800b098:	01458554 	.word	0x01458554
 800b09c:	01e84800 	.word	0x01e84800
 800b0a0:	0001e848 	.word	0x0001e848
 800b0a4:	0003d090 	.word	0x0003d090
 800b0a8:	000a2c2a 	.word	0x000a2c2a
 800b0ac:	000c3500 	.word	0x000c3500
 800b0b0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d04f      	beq.n	800b15c <UART_SetConfig+0x1b34>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d048      	beq.n	800b156 <UART_SetConfig+0x1b2e>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d041      	beq.n	800b150 <UART_SetConfig+0x1b28>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d03a      	beq.n	800b14a <UART_SetConfig+0x1b22>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d033      	beq.n	800b144 <UART_SetConfig+0x1b1c>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	2b05      	cmp	r3, #5
 800b0e2:	d02c      	beq.n	800b13e <UART_SetConfig+0x1b16>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b06      	cmp	r3, #6
 800b0ea:	d025      	beq.n	800b138 <UART_SetConfig+0x1b10>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b07      	cmp	r3, #7
 800b0f2:	d01e      	beq.n	800b132 <UART_SetConfig+0x1b0a>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d017      	beq.n	800b12c <UART_SetConfig+0x1b04>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	2b09      	cmp	r3, #9
 800b102:	d010      	beq.n	800b126 <UART_SetConfig+0x1afe>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b0a      	cmp	r3, #10
 800b10a:	d009      	beq.n	800b120 <UART_SetConfig+0x1af8>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b0b      	cmp	r3, #11
 800b112:	d102      	bne.n	800b11a <UART_SetConfig+0x1af2>
 800b114:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b118:	e022      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b11a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b11e:	e01f      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b124:	e01c      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b12a:	e019      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b12c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b130:	e016      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b136:	e013      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b138:	f241 5354 	movw	r3, #5460	; 0x1554
 800b13c:	e010      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b13e:	f641 1398 	movw	r3, #6552	; 0x1998
 800b142:	e00d      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b148:	e00a      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b14a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b14e:	e007      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b154:	e004      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b15a:	e001      	b.n	800b160 <UART_SetConfig+0x1b38>
 800b15c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6852      	ldr	r2, [r2, #4]
 800b164:	0852      	lsrs	r2, r2, #1
 800b166:	441a      	add	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b170:	b29b      	uxth	r3, r3
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b174:	e003      	b.n	800b17e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b17c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b180:	2b0f      	cmp	r3, #15
 800b182:	d916      	bls.n	800b1b2 <UART_SetConfig+0x1b8a>
 800b184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b18a:	d212      	bcs.n	800b1b2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18e:	b29b      	uxth	r3, r3
 800b190:	f023 030f 	bic.w	r3, r3, #15
 800b194:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b198:	085b      	lsrs	r3, r3, #1
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f003 0307 	and.w	r3, r3, #7
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b1ae:	60da      	str	r2, [r3, #12]
 800b1b0:	e3a3      	b.n	800b8fa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b8:	e39f      	b.n	800b8fa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b1ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1be:	2b40      	cmp	r3, #64	; 0x40
 800b1c0:	f200 8388 	bhi.w	800b8d4 <UART_SetConfig+0x22ac>
 800b1c4:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <UART_SetConfig+0x1ba4>)
 800b1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ca:	bf00      	nop
 800b1cc:	0800b2d1 	.word	0x0800b2d1
 800b1d0:	0800b387 	.word	0x0800b387
 800b1d4:	0800b8d5 	.word	0x0800b8d5
 800b1d8:	0800b8d5 	.word	0x0800b8d5
 800b1dc:	0800b43d 	.word	0x0800b43d
 800b1e0:	0800b8d5 	.word	0x0800b8d5
 800b1e4:	0800b8d5 	.word	0x0800b8d5
 800b1e8:	0800b8d5 	.word	0x0800b8d5
 800b1ec:	0800b4f7 	.word	0x0800b4f7
 800b1f0:	0800b8d5 	.word	0x0800b8d5
 800b1f4:	0800b8d5 	.word	0x0800b8d5
 800b1f8:	0800b8d5 	.word	0x0800b8d5
 800b1fc:	0800b8d5 	.word	0x0800b8d5
 800b200:	0800b8d5 	.word	0x0800b8d5
 800b204:	0800b8d5 	.word	0x0800b8d5
 800b208:	0800b8d5 	.word	0x0800b8d5
 800b20c:	0800b5b1 	.word	0x0800b5b1
 800b210:	0800b8d5 	.word	0x0800b8d5
 800b214:	0800b8d5 	.word	0x0800b8d5
 800b218:	0800b8d5 	.word	0x0800b8d5
 800b21c:	0800b8d5 	.word	0x0800b8d5
 800b220:	0800b8d5 	.word	0x0800b8d5
 800b224:	0800b8d5 	.word	0x0800b8d5
 800b228:	0800b8d5 	.word	0x0800b8d5
 800b22c:	0800b8d5 	.word	0x0800b8d5
 800b230:	0800b8d5 	.word	0x0800b8d5
 800b234:	0800b8d5 	.word	0x0800b8d5
 800b238:	0800b8d5 	.word	0x0800b8d5
 800b23c:	0800b8d5 	.word	0x0800b8d5
 800b240:	0800b8d5 	.word	0x0800b8d5
 800b244:	0800b8d5 	.word	0x0800b8d5
 800b248:	0800b8d5 	.word	0x0800b8d5
 800b24c:	0800b721 	.word	0x0800b721
 800b250:	0800b8d5 	.word	0x0800b8d5
 800b254:	0800b8d5 	.word	0x0800b8d5
 800b258:	0800b8d5 	.word	0x0800b8d5
 800b25c:	0800b8d5 	.word	0x0800b8d5
 800b260:	0800b8d5 	.word	0x0800b8d5
 800b264:	0800b8d5 	.word	0x0800b8d5
 800b268:	0800b8d5 	.word	0x0800b8d5
 800b26c:	0800b8d5 	.word	0x0800b8d5
 800b270:	0800b8d5 	.word	0x0800b8d5
 800b274:	0800b8d5 	.word	0x0800b8d5
 800b278:	0800b8d5 	.word	0x0800b8d5
 800b27c:	0800b8d5 	.word	0x0800b8d5
 800b280:	0800b8d5 	.word	0x0800b8d5
 800b284:	0800b8d5 	.word	0x0800b8d5
 800b288:	0800b8d5 	.word	0x0800b8d5
 800b28c:	0800b8d5 	.word	0x0800b8d5
 800b290:	0800b8d5 	.word	0x0800b8d5
 800b294:	0800b8d5 	.word	0x0800b8d5
 800b298:	0800b8d5 	.word	0x0800b8d5
 800b29c:	0800b8d5 	.word	0x0800b8d5
 800b2a0:	0800b8d5 	.word	0x0800b8d5
 800b2a4:	0800b8d5 	.word	0x0800b8d5
 800b2a8:	0800b8d5 	.word	0x0800b8d5
 800b2ac:	0800b8d5 	.word	0x0800b8d5
 800b2b0:	0800b8d5 	.word	0x0800b8d5
 800b2b4:	0800b8d5 	.word	0x0800b8d5
 800b2b8:	0800b8d5 	.word	0x0800b8d5
 800b2bc:	0800b8d5 	.word	0x0800b8d5
 800b2c0:	0800b8d5 	.word	0x0800b8d5
 800b2c4:	0800b8d5 	.word	0x0800b8d5
 800b2c8:	0800b8d5 	.word	0x0800b8d5
 800b2cc:	0800b815 	.word	0x0800b815
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2d0:	f7fb fb8c 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 800b2d4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d044      	beq.n	800b368 <UART_SetConfig+0x1d40>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d03e      	beq.n	800b364 <UART_SetConfig+0x1d3c>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d038      	beq.n	800b360 <UART_SetConfig+0x1d38>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d032      	beq.n	800b35c <UART_SetConfig+0x1d34>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d02c      	beq.n	800b358 <UART_SetConfig+0x1d30>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	2b05      	cmp	r3, #5
 800b304:	d026      	beq.n	800b354 <UART_SetConfig+0x1d2c>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30a:	2b06      	cmp	r3, #6
 800b30c:	d020      	beq.n	800b350 <UART_SetConfig+0x1d28>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	2b07      	cmp	r3, #7
 800b314:	d01a      	beq.n	800b34c <UART_SetConfig+0x1d24>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d014      	beq.n	800b348 <UART_SetConfig+0x1d20>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	2b09      	cmp	r3, #9
 800b324:	d00e      	beq.n	800b344 <UART_SetConfig+0x1d1c>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	2b0a      	cmp	r3, #10
 800b32c:	d008      	beq.n	800b340 <UART_SetConfig+0x1d18>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	2b0b      	cmp	r3, #11
 800b334:	d102      	bne.n	800b33c <UART_SetConfig+0x1d14>
 800b336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b33a:	e016      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e014      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	e012      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b344:	2340      	movs	r3, #64	; 0x40
 800b346:	e010      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b348:	2320      	movs	r3, #32
 800b34a:	e00e      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b34c:	2310      	movs	r3, #16
 800b34e:	e00c      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b350:	230c      	movs	r3, #12
 800b352:	e00a      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b354:	230a      	movs	r3, #10
 800b356:	e008      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b358:	2308      	movs	r3, #8
 800b35a:	e006      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b35c:	2306      	movs	r3, #6
 800b35e:	e004      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b360:	2304      	movs	r3, #4
 800b362:	e002      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b364:	2302      	movs	r3, #2
 800b366:	e000      	b.n	800b36a <UART_SetConfig+0x1d42>
 800b368:	2301      	movs	r3, #1
 800b36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b36c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	085b      	lsrs	r3, r3, #1
 800b376:	441a      	add	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b380:	b29b      	uxth	r3, r3
 800b382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b384:	e2aa      	b.n	800b8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b386:	f7fb fb47 	bl	8006a18 <HAL_RCC_GetPCLK2Freq>
 800b38a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	d044      	beq.n	800b41e <UART_SetConfig+0x1df6>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d03e      	beq.n	800b41a <UART_SetConfig+0x1df2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d038      	beq.n	800b416 <UART_SetConfig+0x1dee>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d032      	beq.n	800b412 <UART_SetConfig+0x1dea>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	2b04      	cmp	r3, #4
 800b3b2:	d02c      	beq.n	800b40e <UART_SetConfig+0x1de6>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	2b05      	cmp	r3, #5
 800b3ba:	d026      	beq.n	800b40a <UART_SetConfig+0x1de2>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	2b06      	cmp	r3, #6
 800b3c2:	d020      	beq.n	800b406 <UART_SetConfig+0x1dde>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	2b07      	cmp	r3, #7
 800b3ca:	d01a      	beq.n	800b402 <UART_SetConfig+0x1dda>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	2b08      	cmp	r3, #8
 800b3d2:	d014      	beq.n	800b3fe <UART_SetConfig+0x1dd6>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	2b09      	cmp	r3, #9
 800b3da:	d00e      	beq.n	800b3fa <UART_SetConfig+0x1dd2>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e0:	2b0a      	cmp	r3, #10
 800b3e2:	d008      	beq.n	800b3f6 <UART_SetConfig+0x1dce>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e8:	2b0b      	cmp	r3, #11
 800b3ea:	d102      	bne.n	800b3f2 <UART_SetConfig+0x1dca>
 800b3ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f0:	e016      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e014      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b3f6:	2380      	movs	r3, #128	; 0x80
 800b3f8:	e012      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b3fa:	2340      	movs	r3, #64	; 0x40
 800b3fc:	e010      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b3fe:	2320      	movs	r3, #32
 800b400:	e00e      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b402:	2310      	movs	r3, #16
 800b404:	e00c      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b406:	230c      	movs	r3, #12
 800b408:	e00a      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b40a:	230a      	movs	r3, #10
 800b40c:	e008      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b40e:	2308      	movs	r3, #8
 800b410:	e006      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b412:	2306      	movs	r3, #6
 800b414:	e004      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b416:	2304      	movs	r3, #4
 800b418:	e002      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b41a:	2302      	movs	r3, #2
 800b41c:	e000      	b.n	800b420 <UART_SetConfig+0x1df8>
 800b41e:	2301      	movs	r3, #1
 800b420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b422:	fbb2 f2f3 	udiv	r2, r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	441a      	add	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	fbb2 f3f3 	udiv	r3, r2, r3
 800b436:	b29b      	uxth	r3, r3
 800b438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b43a:	e24f      	b.n	800b8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b43c:	f107 0318 	add.w	r3, r7, #24
 800b440:	4618      	mov	r0, r3
 800b442:	f7fc fc6b 	bl	8007d1c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b446:	69fa      	ldr	r2, [r7, #28]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d044      	beq.n	800b4da <UART_SetConfig+0x1eb2>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	2b01      	cmp	r3, #1
 800b456:	d03e      	beq.n	800b4d6 <UART_SetConfig+0x1eae>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d038      	beq.n	800b4d2 <UART_SetConfig+0x1eaa>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	2b03      	cmp	r3, #3
 800b466:	d032      	beq.n	800b4ce <UART_SetConfig+0x1ea6>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d02c      	beq.n	800b4ca <UART_SetConfig+0x1ea2>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	2b05      	cmp	r3, #5
 800b476:	d026      	beq.n	800b4c6 <UART_SetConfig+0x1e9e>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	2b06      	cmp	r3, #6
 800b47e:	d020      	beq.n	800b4c2 <UART_SetConfig+0x1e9a>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	2b07      	cmp	r3, #7
 800b486:	d01a      	beq.n	800b4be <UART_SetConfig+0x1e96>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d014      	beq.n	800b4ba <UART_SetConfig+0x1e92>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	2b09      	cmp	r3, #9
 800b496:	d00e      	beq.n	800b4b6 <UART_SetConfig+0x1e8e>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	2b0a      	cmp	r3, #10
 800b49e:	d008      	beq.n	800b4b2 <UART_SetConfig+0x1e8a>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	2b0b      	cmp	r3, #11
 800b4a6:	d102      	bne.n	800b4ae <UART_SetConfig+0x1e86>
 800b4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4ac:	e016      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e014      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4b2:	2380      	movs	r3, #128	; 0x80
 800b4b4:	e012      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4b6:	2340      	movs	r3, #64	; 0x40
 800b4b8:	e010      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4ba:	2320      	movs	r3, #32
 800b4bc:	e00e      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4be:	2310      	movs	r3, #16
 800b4c0:	e00c      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	e00a      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4c6:	230a      	movs	r3, #10
 800b4c8:	e008      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4ca:	2308      	movs	r3, #8
 800b4cc:	e006      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4ce:	2306      	movs	r3, #6
 800b4d0:	e004      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4d2:	2304      	movs	r3, #4
 800b4d4:	e002      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	e000      	b.n	800b4dc <UART_SetConfig+0x1eb4>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	085b      	lsrs	r3, r3, #1
 800b4e6:	441a      	add	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4f4:	e1f2      	b.n	800b8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f6:	f107 030c 	add.w	r3, r7, #12
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fc fd5a 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	2b00      	cmp	r3, #0
 800b508:	d044      	beq.n	800b594 <UART_SetConfig+0x1f6c>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d03e      	beq.n	800b590 <UART_SetConfig+0x1f68>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	2b02      	cmp	r3, #2
 800b518:	d038      	beq.n	800b58c <UART_SetConfig+0x1f64>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d032      	beq.n	800b588 <UART_SetConfig+0x1f60>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	2b04      	cmp	r3, #4
 800b528:	d02c      	beq.n	800b584 <UART_SetConfig+0x1f5c>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b05      	cmp	r3, #5
 800b530:	d026      	beq.n	800b580 <UART_SetConfig+0x1f58>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b06      	cmp	r3, #6
 800b538:	d020      	beq.n	800b57c <UART_SetConfig+0x1f54>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b07      	cmp	r3, #7
 800b540:	d01a      	beq.n	800b578 <UART_SetConfig+0x1f50>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b08      	cmp	r3, #8
 800b548:	d014      	beq.n	800b574 <UART_SetConfig+0x1f4c>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	2b09      	cmp	r3, #9
 800b550:	d00e      	beq.n	800b570 <UART_SetConfig+0x1f48>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b0a      	cmp	r3, #10
 800b558:	d008      	beq.n	800b56c <UART_SetConfig+0x1f44>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	2b0b      	cmp	r3, #11
 800b560:	d102      	bne.n	800b568 <UART_SetConfig+0x1f40>
 800b562:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b566:	e016      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b568:	2301      	movs	r3, #1
 800b56a:	e014      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b56c:	2380      	movs	r3, #128	; 0x80
 800b56e:	e012      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b570:	2340      	movs	r3, #64	; 0x40
 800b572:	e010      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b574:	2320      	movs	r3, #32
 800b576:	e00e      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b578:	2310      	movs	r3, #16
 800b57a:	e00c      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b57c:	230c      	movs	r3, #12
 800b57e:	e00a      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b580:	230a      	movs	r3, #10
 800b582:	e008      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b584:	2308      	movs	r3, #8
 800b586:	e006      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b588:	2306      	movs	r3, #6
 800b58a:	e004      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b58c:	2304      	movs	r3, #4
 800b58e:	e002      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b590:	2302      	movs	r3, #2
 800b592:	e000      	b.n	800b596 <UART_SetConfig+0x1f6e>
 800b594:	2301      	movs	r3, #1
 800b596:	fbb2 f2f3 	udiv	r2, r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	085b      	lsrs	r3, r3, #1
 800b5a0:	441a      	add	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ae:	e195      	b.n	800b8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5b0:	4b87      	ldr	r3, [pc, #540]	; (800b7d0 <UART_SetConfig+0x21a8>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0320 	and.w	r3, r3, #32
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d05d      	beq.n	800b678 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5bc:	4b84      	ldr	r3, [pc, #528]	; (800b7d0 <UART_SetConfig+0x21a8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	08db      	lsrs	r3, r3, #3
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	4a83      	ldr	r2, [pc, #524]	; (800b7d4 <UART_SetConfig+0x21ac>)
 800b5c8:	40da      	lsrs	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d044      	beq.n	800b65c <UART_SetConfig+0x2034>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d03e      	beq.n	800b658 <UART_SetConfig+0x2030>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d038      	beq.n	800b654 <UART_SetConfig+0x202c>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d032      	beq.n	800b650 <UART_SetConfig+0x2028>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d02c      	beq.n	800b64c <UART_SetConfig+0x2024>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	2b05      	cmp	r3, #5
 800b5f8:	d026      	beq.n	800b648 <UART_SetConfig+0x2020>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b06      	cmp	r3, #6
 800b600:	d020      	beq.n	800b644 <UART_SetConfig+0x201c>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	2b07      	cmp	r3, #7
 800b608:	d01a      	beq.n	800b640 <UART_SetConfig+0x2018>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b08      	cmp	r3, #8
 800b610:	d014      	beq.n	800b63c <UART_SetConfig+0x2014>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	2b09      	cmp	r3, #9
 800b618:	d00e      	beq.n	800b638 <UART_SetConfig+0x2010>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	2b0a      	cmp	r3, #10
 800b620:	d008      	beq.n	800b634 <UART_SetConfig+0x200c>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	2b0b      	cmp	r3, #11
 800b628:	d102      	bne.n	800b630 <UART_SetConfig+0x2008>
 800b62a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b62e:	e016      	b.n	800b65e <UART_SetConfig+0x2036>
 800b630:	2301      	movs	r3, #1
 800b632:	e014      	b.n	800b65e <UART_SetConfig+0x2036>
 800b634:	2380      	movs	r3, #128	; 0x80
 800b636:	e012      	b.n	800b65e <UART_SetConfig+0x2036>
 800b638:	2340      	movs	r3, #64	; 0x40
 800b63a:	e010      	b.n	800b65e <UART_SetConfig+0x2036>
 800b63c:	2320      	movs	r3, #32
 800b63e:	e00e      	b.n	800b65e <UART_SetConfig+0x2036>
 800b640:	2310      	movs	r3, #16
 800b642:	e00c      	b.n	800b65e <UART_SetConfig+0x2036>
 800b644:	230c      	movs	r3, #12
 800b646:	e00a      	b.n	800b65e <UART_SetConfig+0x2036>
 800b648:	230a      	movs	r3, #10
 800b64a:	e008      	b.n	800b65e <UART_SetConfig+0x2036>
 800b64c:	2308      	movs	r3, #8
 800b64e:	e006      	b.n	800b65e <UART_SetConfig+0x2036>
 800b650:	2306      	movs	r3, #6
 800b652:	e004      	b.n	800b65e <UART_SetConfig+0x2036>
 800b654:	2304      	movs	r3, #4
 800b656:	e002      	b.n	800b65e <UART_SetConfig+0x2036>
 800b658:	2302      	movs	r3, #2
 800b65a:	e000      	b.n	800b65e <UART_SetConfig+0x2036>
 800b65c:	2301      	movs	r3, #1
 800b65e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	085b      	lsrs	r3, r3, #1
 800b668:	441a      	add	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b672:	b29b      	uxth	r3, r3
 800b674:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b676:	e131      	b.n	800b8dc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d043      	beq.n	800b708 <UART_SetConfig+0x20e0>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b01      	cmp	r3, #1
 800b686:	d03d      	beq.n	800b704 <UART_SetConfig+0x20dc>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d037      	beq.n	800b700 <UART_SetConfig+0x20d8>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b03      	cmp	r3, #3
 800b696:	d031      	beq.n	800b6fc <UART_SetConfig+0x20d4>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d02b      	beq.n	800b6f8 <UART_SetConfig+0x20d0>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b05      	cmp	r3, #5
 800b6a6:	d025      	beq.n	800b6f4 <UART_SetConfig+0x20cc>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	2b06      	cmp	r3, #6
 800b6ae:	d01f      	beq.n	800b6f0 <UART_SetConfig+0x20c8>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b07      	cmp	r3, #7
 800b6b6:	d019      	beq.n	800b6ec <UART_SetConfig+0x20c4>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d013      	beq.n	800b6e8 <UART_SetConfig+0x20c0>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	2b09      	cmp	r3, #9
 800b6c6:	d00d      	beq.n	800b6e4 <UART_SetConfig+0x20bc>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	2b0a      	cmp	r3, #10
 800b6ce:	d007      	beq.n	800b6e0 <UART_SetConfig+0x20b8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d4:	2b0b      	cmp	r3, #11
 800b6d6:	d101      	bne.n	800b6dc <UART_SetConfig+0x20b4>
 800b6d8:	4b3f      	ldr	r3, [pc, #252]	; (800b7d8 <UART_SetConfig+0x21b0>)
 800b6da:	e016      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6dc:	4b3d      	ldr	r3, [pc, #244]	; (800b7d4 <UART_SetConfig+0x21ac>)
 800b6de:	e014      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6e0:	4b3e      	ldr	r3, [pc, #248]	; (800b7dc <UART_SetConfig+0x21b4>)
 800b6e2:	e012      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6e4:	4b3e      	ldr	r3, [pc, #248]	; (800b7e0 <UART_SetConfig+0x21b8>)
 800b6e6:	e010      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6e8:	4b3e      	ldr	r3, [pc, #248]	; (800b7e4 <UART_SetConfig+0x21bc>)
 800b6ea:	e00e      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6ec:	4b3e      	ldr	r3, [pc, #248]	; (800b7e8 <UART_SetConfig+0x21c0>)
 800b6ee:	e00c      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6f0:	4b3e      	ldr	r3, [pc, #248]	; (800b7ec <UART_SetConfig+0x21c4>)
 800b6f2:	e00a      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6f4:	4b3e      	ldr	r3, [pc, #248]	; (800b7f0 <UART_SetConfig+0x21c8>)
 800b6f6:	e008      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6f8:	4b3e      	ldr	r3, [pc, #248]	; (800b7f4 <UART_SetConfig+0x21cc>)
 800b6fa:	e006      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b6fc:	4b3e      	ldr	r3, [pc, #248]	; (800b7f8 <UART_SetConfig+0x21d0>)
 800b6fe:	e004      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b700:	4b3e      	ldr	r3, [pc, #248]	; (800b7fc <UART_SetConfig+0x21d4>)
 800b702:	e002      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b704:	4b3e      	ldr	r3, [pc, #248]	; (800b800 <UART_SetConfig+0x21d8>)
 800b706:	e000      	b.n	800b70a <UART_SetConfig+0x20e2>
 800b708:	4b32      	ldr	r3, [pc, #200]	; (800b7d4 <UART_SetConfig+0x21ac>)
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	6852      	ldr	r2, [r2, #4]
 800b70e:	0852      	lsrs	r2, r2, #1
 800b710:	441a      	add	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	fbb2 f3f3 	udiv	r3, r2, r3
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71e:	e0dd      	b.n	800b8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	2b00      	cmp	r3, #0
 800b726:	d046      	beq.n	800b7b6 <UART_SetConfig+0x218e>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d040      	beq.n	800b7b2 <UART_SetConfig+0x218a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	2b02      	cmp	r3, #2
 800b736:	d03a      	beq.n	800b7ae <UART_SetConfig+0x2186>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d034      	beq.n	800b7aa <UART_SetConfig+0x2182>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	2b04      	cmp	r3, #4
 800b746:	d02e      	beq.n	800b7a6 <UART_SetConfig+0x217e>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	2b05      	cmp	r3, #5
 800b74e:	d028      	beq.n	800b7a2 <UART_SetConfig+0x217a>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	2b06      	cmp	r3, #6
 800b756:	d022      	beq.n	800b79e <UART_SetConfig+0x2176>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b07      	cmp	r3, #7
 800b75e:	d01c      	beq.n	800b79a <UART_SetConfig+0x2172>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	2b08      	cmp	r3, #8
 800b766:	d016      	beq.n	800b796 <UART_SetConfig+0x216e>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2b09      	cmp	r3, #9
 800b76e:	d00f      	beq.n	800b790 <UART_SetConfig+0x2168>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2b0a      	cmp	r3, #10
 800b776:	d008      	beq.n	800b78a <UART_SetConfig+0x2162>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b0b      	cmp	r3, #11
 800b77e:	d102      	bne.n	800b786 <UART_SetConfig+0x215e>
 800b780:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b784:	e018      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b786:	4b18      	ldr	r3, [pc, #96]	; (800b7e8 <UART_SetConfig+0x21c0>)
 800b788:	e016      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b78a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b78e:	e013      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b790:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b794:	e010      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b796:	4b1b      	ldr	r3, [pc, #108]	; (800b804 <UART_SetConfig+0x21dc>)
 800b798:	e00e      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b79a:	4b0f      	ldr	r3, [pc, #60]	; (800b7d8 <UART_SetConfig+0x21b0>)
 800b79c:	e00c      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b79e:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <UART_SetConfig+0x21e0>)
 800b7a0:	e00a      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b7a2:	4b1a      	ldr	r3, [pc, #104]	; (800b80c <UART_SetConfig+0x21e4>)
 800b7a4:	e008      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <UART_SetConfig+0x21b4>)
 800b7a8:	e006      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b7aa:	4b19      	ldr	r3, [pc, #100]	; (800b810 <UART_SetConfig+0x21e8>)
 800b7ac:	e004      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b7ae:	4b0c      	ldr	r3, [pc, #48]	; (800b7e0 <UART_SetConfig+0x21b8>)
 800b7b0:	e002      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b7b2:	4b0c      	ldr	r3, [pc, #48]	; (800b7e4 <UART_SetConfig+0x21bc>)
 800b7b4:	e000      	b.n	800b7b8 <UART_SetConfig+0x2190>
 800b7b6:	4b0c      	ldr	r3, [pc, #48]	; (800b7e8 <UART_SetConfig+0x21c0>)
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6852      	ldr	r2, [r2, #4]
 800b7bc:	0852      	lsrs	r2, r2, #1
 800b7be:	441a      	add	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7cc:	e086      	b.n	800b8dc <UART_SetConfig+0x22b4>
 800b7ce:	bf00      	nop
 800b7d0:	58024400 	.word	0x58024400
 800b7d4:	03d09000 	.word	0x03d09000
 800b7d8:	0003d090 	.word	0x0003d090
 800b7dc:	0007a120 	.word	0x0007a120
 800b7e0:	000f4240 	.word	0x000f4240
 800b7e4:	001e8480 	.word	0x001e8480
 800b7e8:	003d0900 	.word	0x003d0900
 800b7ec:	00516155 	.word	0x00516155
 800b7f0:	0061a800 	.word	0x0061a800
 800b7f4:	007a1200 	.word	0x007a1200
 800b7f8:	00a2c2aa 	.word	0x00a2c2aa
 800b7fc:	00f42400 	.word	0x00f42400
 800b800:	01e84800 	.word	0x01e84800
 800b804:	0001e848 	.word	0x0001e848
 800b808:	00051615 	.word	0x00051615
 800b80c:	00061a80 	.word	0x00061a80
 800b810:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d04e      	beq.n	800b8ba <UART_SetConfig+0x2292>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	2b01      	cmp	r3, #1
 800b822:	d047      	beq.n	800b8b4 <UART_SetConfig+0x228c>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d040      	beq.n	800b8ae <UART_SetConfig+0x2286>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b830:	2b03      	cmp	r3, #3
 800b832:	d039      	beq.n	800b8a8 <UART_SetConfig+0x2280>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d032      	beq.n	800b8a2 <UART_SetConfig+0x227a>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	2b05      	cmp	r3, #5
 800b842:	d02b      	beq.n	800b89c <UART_SetConfig+0x2274>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	2b06      	cmp	r3, #6
 800b84a:	d024      	beq.n	800b896 <UART_SetConfig+0x226e>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	2b07      	cmp	r3, #7
 800b852:	d01d      	beq.n	800b890 <UART_SetConfig+0x2268>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d016      	beq.n	800b88a <UART_SetConfig+0x2262>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	2b09      	cmp	r3, #9
 800b862:	d00f      	beq.n	800b884 <UART_SetConfig+0x225c>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	2b0a      	cmp	r3, #10
 800b86a:	d008      	beq.n	800b87e <UART_SetConfig+0x2256>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	2b0b      	cmp	r3, #11
 800b872:	d101      	bne.n	800b878 <UART_SetConfig+0x2250>
 800b874:	2380      	movs	r3, #128	; 0x80
 800b876:	e022      	b.n	800b8be <UART_SetConfig+0x2296>
 800b878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b87c:	e01f      	b.n	800b8be <UART_SetConfig+0x2296>
 800b87e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b882:	e01c      	b.n	800b8be <UART_SetConfig+0x2296>
 800b884:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b888:	e019      	b.n	800b8be <UART_SetConfig+0x2296>
 800b88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b88e:	e016      	b.n	800b8be <UART_SetConfig+0x2296>
 800b890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b894:	e013      	b.n	800b8be <UART_SetConfig+0x2296>
 800b896:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b89a:	e010      	b.n	800b8be <UART_SetConfig+0x2296>
 800b89c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b8a0:	e00d      	b.n	800b8be <UART_SetConfig+0x2296>
 800b8a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a6:	e00a      	b.n	800b8be <UART_SetConfig+0x2296>
 800b8a8:	f241 5355 	movw	r3, #5461	; 0x1555
 800b8ac:	e007      	b.n	800b8be <UART_SetConfig+0x2296>
 800b8ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8b2:	e004      	b.n	800b8be <UART_SetConfig+0x2296>
 800b8b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8b8:	e001      	b.n	800b8be <UART_SetConfig+0x2296>
 800b8ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6852      	ldr	r2, [r2, #4]
 800b8c2:	0852      	lsrs	r2, r2, #1
 800b8c4:	441a      	add	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8d2:	e003      	b.n	800b8dc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b8da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8de:	2b0f      	cmp	r3, #15
 800b8e0:	d908      	bls.n	800b8f4 <UART_SetConfig+0x22cc>
 800b8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e8:	d204      	bcs.n	800b8f4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8f0:	60da      	str	r2, [r3, #12]
 800b8f2:	e002      	b.n	800b8fa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3740      	adds	r7, #64	; 0x40
 800b91e:	46bd      	mov	sp, r7
 800b920:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00a      	beq.n	800b94e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	430a      	orrs	r2, r1
 800b96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	f003 0310 	and.w	r3, r3, #16
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00a      	beq.n	800b9d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	f003 0320 	and.w	r3, r3, #32
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00a      	beq.n	800b9f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d01a      	beq.n	800ba3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba22:	d10a      	bne.n	800ba3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00a      	beq.n	800ba5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	605a      	str	r2, [r3, #4]
  }
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af02      	add	r7, sp, #8
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ba78:	f7f6 f9c2 	bl	8001e00 <HAL_GetTick>
 800ba7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0308 	and.w	r3, r3, #8
 800ba88:	2b08      	cmp	r3, #8
 800ba8a:	d10e      	bne.n	800baaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f82c 	bl	800baf8 <UART_WaitOnFlagUntilTimeout>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa6:	2303      	movs	r3, #3
 800baa8:	e022      	b.n	800baf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0304 	and.w	r3, r3, #4
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d10e      	bne.n	800bad6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f816 	bl	800baf8 <UART_WaitOnFlagUntilTimeout>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e00c      	b.n	800baf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2220      	movs	r2, #32
 800bada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	4613      	mov	r3, r2
 800bb06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb08:	e062      	b.n	800bbd0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb10:	d05e      	beq.n	800bbd0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb12:	f7f6 f975 	bl	8001e00 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	69ba      	ldr	r2, [r7, #24]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d302      	bcc.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11d      	bne.n	800bb64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689a      	ldr	r2, [r3, #8]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f022 0201 	bic.w	r2, r2, #1
 800bb46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2220      	movs	r2, #32
 800bb4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e045      	b.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0304 	and.w	r3, r3, #4
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d02e      	beq.n	800bbd0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb80:	d126      	bne.n	800bbd0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb8a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689a      	ldr	r2, [r3, #8]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0201 	bic.w	r2, r2, #1
 800bbaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	e00f      	b.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	69da      	ldr	r2, [r3, #28]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	bf0c      	ite	eq
 800bbe0:	2301      	moveq	r3, #1
 800bbe2:	2300      	movne	r3, #0
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d08d      	beq.n	800bb0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bc0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	689a      	ldr	r2, [r3, #8]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bc1e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bc4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6899      	ldr	r1, [r3, #8]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <UART_EndRxTransfer+0x44>)
 800bc58:	400b      	ands	r3, r1
 800bc5a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	effffffe 	.word	0xeffffffe

0800bc7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc92:	d01f      	beq.n	800bcd4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcaa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689a      	ldr	r2, [r3, #8]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0201 	bic.w	r2, r2, #1
 800bcba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	689a      	ldr	r2, [r3, #8]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f7f4 fd37 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f7fd fc83 	bl	80095fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b086      	sub	sp, #24
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd26:	2b80      	cmp	r3, #128	; 0x80
 800bd28:	d109      	bne.n	800bd3e <UART_DMAError+0x40>
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b21      	cmp	r3, #33	; 0x21
 800bd2e:	d106      	bne.n	800bd3e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bd38:	6978      	ldr	r0, [r7, #20]
 800bd3a:	f7ff ff5d 	bl	800bbf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b40      	cmp	r3, #64	; 0x40
 800bd4a:	d109      	bne.n	800bd60 <UART_DMAError+0x62>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b22      	cmp	r3, #34	; 0x22
 800bd50:	d106      	bne.n	800bd60 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bd5a:	6978      	ldr	r0, [r7, #20]
 800bd5c:	f7ff ff6a 	bl	800bc34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	f043 0210 	orr.w	r2, r3, #16
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd70:	6978      	ldr	r0, [r7, #20]
 800bd72:	f7fd fc4d 	bl	8009610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd76:	bf00      	nop
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f7fd fc37 	bl	8009610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdb8:	2b21      	cmp	r3, #33	; 0x21
 800bdba:	d12a      	bne.n	800be12 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d110      	bne.n	800bdea <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdd6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bde6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bde8:	e013      	b.n	800be12 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be06:	b29b      	uxth	r3, r3
 800be08:	3b01      	subs	r3, #1
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be1e:	b480      	push	{r7}
 800be20:	b085      	sub	sp, #20
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be2c:	2b21      	cmp	r3, #33	; 0x21
 800be2e:	d12f      	bne.n	800be90 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be36:	b29b      	uxth	r3, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d110      	bne.n	800be5e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be4a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be5a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800be5c:	e018      	b.n	800be90 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be62:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be72:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be78:	1c9a      	adds	r2, r3, #2
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be84:	b29b      	uxth	r3, r3
 800be86:	3b01      	subs	r3, #1
 800be88:	b29a      	uxth	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800be90:	bf00      	nop
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beaa:	2b21      	cmp	r3, #33	; 0x21
 800beac:	d13d      	bne.n	800bf2a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800beb4:	81fb      	strh	r3, [r7, #14]
 800beb6:	e035      	b.n	800bf24 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d111      	bne.n	800bee8 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689a      	ldr	r2, [r3, #8]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bed2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bee2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800bee4:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800bee6:	e020      	b.n	800bf2a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	69db      	ldr	r3, [r3, #28]
 800beee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d013      	beq.n	800bf1e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800befa:	781a      	ldrb	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bf1e:	89fb      	ldrh	r3, [r7, #14]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	81fb      	strh	r3, [r7, #14]
 800bf24:	89fb      	ldrh	r3, [r7, #14]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1c6      	bne.n	800beb8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b085      	sub	sp, #20
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf44:	2b21      	cmp	r3, #33	; 0x21
 800bf46:	d142      	bne.n	800bfce <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf4e:	81fb      	strh	r3, [r7, #14]
 800bf50:	e03a      	b.n	800bfc8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d111      	bne.n	800bf82 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689a      	ldr	r2, [r3, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bf6c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf7c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800bf7e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800bf80:	e025      	b.n	800bfce <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d018      	beq.n	800bfc2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf94:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfa4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfaa:	1c9a      	adds	r2, r3, #2
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bfc2:	89fb      	ldrh	r3, [r7, #14]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	81fb      	strh	r3, [r7, #14]
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1c1      	bne.n	800bf52 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800bfce:	bf00      	nop
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bff0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2220      	movs	r2, #32
 800bff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7f4 fb5f 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c01c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c024:	2b22      	cmp	r3, #34	; 0x22
 800c026:	d13b      	bne.n	800c0a0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c030:	89bb      	ldrh	r3, [r7, #12]
 800c032:	b2d9      	uxtb	r1, r3
 800c034:	89fb      	ldrh	r3, [r7, #14]
 800c036:	b2da      	uxtb	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c03c:	400a      	ands	r2, r1
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c064:	b29b      	uxth	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d122      	bne.n	800c0b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c078:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0201 	bic.w	r2, r2, #1
 800c088:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7f4 fb55 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c09e:	e007      	b.n	800c0b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	699a      	ldr	r2, [r3, #24]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f042 0208 	orr.w	r2, r2, #8
 800c0ae:	619a      	str	r2, [r3, #24]
}
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ce:	2b22      	cmp	r3, #34	; 0x22
 800c0d0:	d13b      	bne.n	800c14a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0de:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c0e0:	89ba      	ldrh	r2, [r7, #12]
 800c0e2:	89fb      	ldrh	r3, [r7, #14]
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f0:	1c9a      	adds	r2, r3, #2
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c10e:	b29b      	uxth	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d122      	bne.n	800c15a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c122:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0201 	bic.w	r2, r2, #1
 800c132:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2220      	movs	r2, #32
 800c138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7f4 fb00 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c148:	e007      	b.n	800c15a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	699a      	ldr	r2, [r3, #24]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f042 0208 	orr.w	r2, r2, #8
 800c158:	619a      	str	r2, [r3, #24]
}
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c172:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c17a:	2b22      	cmp	r3, #34	; 0x22
 800c17c:	d166      	bne.n	800c24c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c184:	81fb      	strh	r3, [r7, #14]
 800c186:	e03d      	b.n	800c204 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c190:	893b      	ldrh	r3, [r7, #8]
 800c192:	b2d9      	uxtb	r1, r3
 800c194:	89bb      	ldrh	r3, [r7, #12]
 800c196:	b2da      	uxtb	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19c:	400a      	ands	r2, r1
 800c19e:	b2d2      	uxtb	r2, r2
 800c1a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d119      	bne.n	800c1fe <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6899      	ldr	r1, [r3, #8]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	4b1f      	ldr	r3, [pc, #124]	; (800c264 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c1e6:	400b      	ands	r3, r1
 800c1e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7f4 faa5 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c1fe:	89fb      	ldrh	r3, [r7, #14]
 800c200:	3b01      	subs	r3, #1
 800c202:	81fb      	strh	r3, [r7, #14]
 800c204:	89fb      	ldrh	r3, [r7, #14]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1be      	bne.n	800c188 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c210:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c212:	897b      	ldrh	r3, [r7, #10]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d021      	beq.n	800c25c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c21e:	897a      	ldrh	r2, [r7, #10]
 800c220:	429a      	cmp	r2, r3
 800c222:	d21b      	bcs.n	800c25c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c232:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c238:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f042 0220 	orr.w	r2, r2, #32
 800c248:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c24a:	e007      	b.n	800c25c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f042 0208 	orr.w	r2, r2, #8
 800c25a:	619a      	str	r2, [r3, #24]
}
 800c25c:	bf00      	nop
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	effffffe 	.word	0xeffffffe
 800c268:	0800c00f 	.word	0x0800c00f

0800c26c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c27a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c282:	2b22      	cmp	r3, #34	; 0x22
 800c284:	d166      	bne.n	800c354 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c28c:	82fb      	strh	r3, [r7, #22]
 800c28e:	e03d      	b.n	800c30c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c296:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c29e:	8a3a      	ldrh	r2, [r7, #16]
 800c2a0:	8abb      	ldrh	r3, [r7, #20]
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ae:	1c9a      	adds	r2, r3, #2
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d119      	bne.n	800c306 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6899      	ldr	r1, [r3, #8]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	4b1f      	ldr	r3, [pc, #124]	; (800c36c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c2ee:	400b      	ands	r3, r1
 800c2f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2220      	movs	r2, #32
 800c2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7f4 fa21 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c306:	8afb      	ldrh	r3, [r7, #22]
 800c308:	3b01      	subs	r3, #1
 800c30a:	82fb      	strh	r3, [r7, #22]
 800c30c:	8afb      	ldrh	r3, [r7, #22]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1be      	bne.n	800c290 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c318:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c31a:	8a7b      	ldrh	r3, [r7, #18]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d021      	beq.n	800c364 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c326:	8a7a      	ldrh	r2, [r7, #18]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d21b      	bcs.n	800c364 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c33a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a0c      	ldr	r2, [pc, #48]	; (800c370 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c340:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f042 0220 	orr.w	r2, r2, #32
 800c350:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c352:	e007      	b.n	800c364 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699a      	ldr	r2, [r3, #24]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0208 	orr.w	r2, r2, #8
 800c362:	619a      	str	r2, [r3, #24]
}
 800c364:	bf00      	nop
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	effffffe 	.word	0xeffffffe
 800c370:	0800c0b9 	.word	0x0800c0b9

0800c374 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d101      	bne.n	800c3c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	e027      	b.n	800c416 <HAL_UARTEx_DisableFifoMode+0x66>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2224      	movs	r2, #36	; 0x24
 800c3d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 0201 	bic.w	r2, r2, #1
 800c3ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2220      	movs	r2, #32
 800c408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c432:	2b01      	cmp	r3, #1
 800c434:	d101      	bne.n	800c43a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c436:	2302      	movs	r3, #2
 800c438:	e02d      	b.n	800c496 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2224      	movs	r2, #36	; 0x24
 800c446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f022 0201 	bic.w	r2, r2, #1
 800c460:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f850 	bl	800c51c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2220      	movs	r2, #32
 800c488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d101      	bne.n	800c4b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	e02d      	b.n	800c512 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2224      	movs	r2, #36	; 0x24
 800c4c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 0201 	bic.w	r2, r2, #1
 800c4dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	430a      	orrs	r2, r1
 800c4f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f812 	bl	800c51c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2220      	movs	r2, #32
 800c504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b089      	sub	sp, #36	; 0x24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c524:	4a2f      	ldr	r2, [pc, #188]	; (800c5e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c526:	f107 0314 	add.w	r3, r7, #20
 800c52a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c52e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c532:	4a2d      	ldr	r2, [pc, #180]	; (800c5e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c534:	f107 030c 	add.w	r3, r7, #12
 800c538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c53c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c544:	2b00      	cmp	r3, #0
 800c546:	d108      	bne.n	800c55a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c558:	e03d      	b.n	800c5d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c55a:	2308      	movs	r3, #8
 800c55c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c55e:	2308      	movs	r3, #8
 800c560:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	0e5b      	lsrs	r3, r3, #25
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	f003 0307 	and.w	r3, r3, #7
 800c570:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	0f5b      	lsrs	r3, r3, #29
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	f003 0307 	and.w	r3, r3, #7
 800c580:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c582:	7fbb      	ldrb	r3, [r7, #30]
 800c584:	7f3a      	ldrb	r2, [r7, #28]
 800c586:	f107 0120 	add.w	r1, r7, #32
 800c58a:	440a      	add	r2, r1
 800c58c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c590:	fb02 f303 	mul.w	r3, r2, r3
 800c594:	7f3a      	ldrb	r2, [r7, #28]
 800c596:	f107 0120 	add.w	r1, r7, #32
 800c59a:	440a      	add	r2, r1
 800c59c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c5ac:	7ffb      	ldrb	r3, [r7, #31]
 800c5ae:	7f7a      	ldrb	r2, [r7, #29]
 800c5b0:	f107 0120 	add.w	r1, r7, #32
 800c5b4:	440a      	add	r2, r1
 800c5b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c5ba:	fb02 f303 	mul.w	r3, r2, r3
 800c5be:	7f7a      	ldrb	r2, [r7, #29]
 800c5c0:	f107 0120 	add.w	r1, r7, #32
 800c5c4:	440a      	add	r2, r1
 800c5c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c5ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c5d6:	bf00      	nop
 800c5d8:	3724      	adds	r7, #36	; 0x24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	0800c65c 	.word	0x0800c65c
 800c5e8:	0800c664 	.word	0x0800c664

0800c5ec <__libc_init_array>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	4e0d      	ldr	r6, [pc, #52]	; (800c624 <__libc_init_array+0x38>)
 800c5f0:	4c0d      	ldr	r4, [pc, #52]	; (800c628 <__libc_init_array+0x3c>)
 800c5f2:	1ba4      	subs	r4, r4, r6
 800c5f4:	10a4      	asrs	r4, r4, #2
 800c5f6:	2500      	movs	r5, #0
 800c5f8:	42a5      	cmp	r5, r4
 800c5fa:	d109      	bne.n	800c610 <__libc_init_array+0x24>
 800c5fc:	4e0b      	ldr	r6, [pc, #44]	; (800c62c <__libc_init_array+0x40>)
 800c5fe:	4c0c      	ldr	r4, [pc, #48]	; (800c630 <__libc_init_array+0x44>)
 800c600:	f000 f820 	bl	800c644 <_init>
 800c604:	1ba4      	subs	r4, r4, r6
 800c606:	10a4      	asrs	r4, r4, #2
 800c608:	2500      	movs	r5, #0
 800c60a:	42a5      	cmp	r5, r4
 800c60c:	d105      	bne.n	800c61a <__libc_init_array+0x2e>
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c614:	4798      	blx	r3
 800c616:	3501      	adds	r5, #1
 800c618:	e7ee      	b.n	800c5f8 <__libc_init_array+0xc>
 800c61a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c61e:	4798      	blx	r3
 800c620:	3501      	adds	r5, #1
 800c622:	e7f2      	b.n	800c60a <__libc_init_array+0x1e>
 800c624:	0800c68c 	.word	0x0800c68c
 800c628:	0800c68c 	.word	0x0800c68c
 800c62c:	0800c68c 	.word	0x0800c68c
 800c630:	0800c690 	.word	0x0800c690

0800c634 <memset>:
 800c634:	4402      	add	r2, r0
 800c636:	4603      	mov	r3, r0
 800c638:	4293      	cmp	r3, r2
 800c63a:	d100      	bne.n	800c63e <memset+0xa>
 800c63c:	4770      	bx	lr
 800c63e:	f803 1b01 	strb.w	r1, [r3], #1
 800c642:	e7f9      	b.n	800c638 <memset+0x4>

0800c644 <_init>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr

0800c650 <_fini>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr
