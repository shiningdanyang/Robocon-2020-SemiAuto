
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddcc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800e068  0800e068  0001e068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2b0  0800e2b0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2b0  0800e2b0  0001e2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2b8  0800e2b8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2b8  0800e2b8  0001e2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2bc  0800e2bc  0001e2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  24000000  0800e2c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  240000a0  0800e360  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400073c  0800e360  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206c6  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eed  00000000  00000000  00040794  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  00043688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00044c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038692  00000000  00000000  00046100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000121f6  00000000  00000000  0007e792  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173839  00000000  00000000  00090988  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002041c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000613c  00000000  00000000  0020423c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e04c 	.word	0x0800e04c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	0800e04c 	.word	0x0800e04c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4903      	ldr	r1, [pc, #12]	; (800062c <peripheralUART_Init+0x14>)
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <peripheralUART_Init+0x18>)
 8000622:	f009 fae1 	bl	8009be8 <HAL_UART_Receive_IT>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	24000674 	.word	0x24000674
 8000630:	240005c0 	.word	0x240005c0

08000634 <compassReset>:

////////////////////////////////////////////////////////////
void compassReset(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <compassReset+0x1c>)
 800063a:	2261      	movs	r2, #97	; 0x61
 800063c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4903      	ldr	r1, [pc, #12]	; (8000650 <compassReset+0x1c>)
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <compassReset+0x20>)
 8000644:	f009 fa4c 	bl	8009ae0 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000648:	f000 f806 	bl	8000658 <wait4CompassTx>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000000 	.word	0x24000000
 8000654:	24000450 	.word	0x24000450

08000658 <wait4CompassTx>:

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 800065c:	e004      	b.n	8000668 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <wait4CompassTx+0x28>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <wait4CompassTx+0x28>)
 8000666:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <wait4CompassTx+0x2c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f6      	beq.n	800065e <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <wait4CompassTx+0x2c>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	24000734 	.word	0x24000734
 8000684:	24000670 	.word	0x24000670

08000688 <readADC>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;


void readADC()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&roll, (uint32_t*)rollRawValue, 2);
 800068c:	2202      	movs	r2, #2
 800068e:	4905      	ldr	r1, [pc, #20]	; (80006a4 <readADC+0x1c>)
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <readADC+0x20>)
 8000692:	f002 fa29 	bl	8002ae8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&pitch, (uint32_t*)pitchRawValue, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	4904      	ldr	r1, [pc, #16]	; (80006ac <readADC+0x24>)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <readADC+0x28>)
 800069c:	f002 fa24 	bl	8002ae8 <HAL_ADC_Start_DMA>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	240003cc 	.word	0x240003cc
 80006a8:	24000364 	.word	0x24000364
 80006ac:	240005b0 	.word	0x240005b0
 80006b0:	240003d0 	.word	0x240003d0

080006b4 <controlMotor1>:
int trackingControlMotor2;
int trackingControlMotor3;
int trackingControlMotor4;

void controlMotor1(int _speed)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bfb8      	it	lt
 80006c2:	425b      	neglt	r3, r3
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <controlMotor1+0x40>)
 80006c8:	701a      	strb	r2, [r3, #0]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db03      	blt.n	80006d8 <controlMotor1+0x24>
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <controlMotor1+0x40>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	711a      	strb	r2, [r3, #4]
 80006d6:	e002      	b.n	80006de <controlMotor1+0x2a>
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <controlMotor1+0x40>)
 80006da:	2201      	movs	r2, #1
 80006dc:	711a      	strb	r2, [r3, #4]
	trackingControlMotor1++;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <controlMotor1+0x44>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <controlMotor1+0x44>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	2400000c 	.word	0x2400000c
 80006f8:	24000440 	.word	0x24000440

080006fc <controlMotor2>:
void controlMotor2(int _speed)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	bfb8      	it	lt
 800070a:	425b      	neglt	r3, r3
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <controlMotor2+0x40>)
 8000710:	705a      	strb	r2, [r3, #1]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor2Dir] = ccw) : (spinalCordTxPacket[motor2Dir] = fcw);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db03      	blt.n	8000720 <controlMotor2+0x24>
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <controlMotor2+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	715a      	strb	r2, [r3, #5]
 800071e:	e002      	b.n	8000726 <controlMotor2+0x2a>
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <controlMotor2+0x40>)
 8000722:	2201      	movs	r2, #1
 8000724:	715a      	strb	r2, [r3, #5]
	trackingControlMotor2++;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <controlMotor2+0x44>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <controlMotor2+0x44>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	2400000c 	.word	0x2400000c
 8000740:	240002ac 	.word	0x240002ac

08000744 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	bfb8      	it	lt
 8000752:	425b      	neglt	r3, r3
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <controlMotor3+0x40>)
 8000758:	709a      	strb	r2, [r3, #2]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor3Dir] = ccw) : (spinalCordTxPacket[motor3Dir] = fcw);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db03      	blt.n	8000768 <controlMotor3+0x24>
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <controlMotor3+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	719a      	strb	r2, [r3, #6]
 8000766:	e002      	b.n	800076e <controlMotor3+0x2a>
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <controlMotor3+0x40>)
 800076a:	2201      	movs	r2, #1
 800076c:	719a      	strb	r2, [r3, #6]
	trackingControlMotor3++;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <controlMotor3+0x44>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <controlMotor3+0x44>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	2400000c 	.word	0x2400000c
 8000788:	24000230 	.word	0x24000230

0800078c <controlMotor4>:
void controlMotor4(int _speed)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	bfb8      	it	lt
 800079a:	425b      	neglt	r3, r3
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <controlMotor4+0x40>)
 80007a0:	70da      	strb	r2, [r3, #3]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor4Dir] = ccw) : (spinalCordTxPacket[motor4Dir] = fcw);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db03      	blt.n	80007b0 <controlMotor4+0x24>
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <controlMotor4+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	71da      	strb	r2, [r3, #7]
 80007ae:	e002      	b.n	80007b6 <controlMotor4+0x2a>
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <controlMotor4+0x40>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	71da      	strb	r2, [r3, #7]
	trackingControlMotor4++;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <controlMotor4+0x44>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <controlMotor4+0x44>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	2400000c 	.word	0x2400000c
 80007d0:	24000578 	.word	0x24000578
 80007d4:	00000000 	.word	0x00000000

080007d8 <PIDyaw>:

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 80007d8:	b490      	push	{r4, r7}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	yawError = _yawSetpoint - _yawValue;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <PIDyaw+0x120>)
 80007f2:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <PIDyaw+0x120>)
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	ee07 3a90 	vmov	s15, r3
 80007fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000802:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <PIDyaw+0x124>)
 8000804:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <PIDyaw+0x120>)
 800080a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080e:	461a      	mov	r2, r3
 8000810:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <PIDyaw+0x128>)
 8000812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000820:	4b38      	ldr	r3, [pc, #224]	; (8000904 <PIDyaw+0x12c>)
 8000822:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <PIDyaw+0x120>)
 8000828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <PIDyaw+0x130>)
 8000836:	ed93 7b00 	vldr	d7, [r3]
 800083a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <PIDyaw+0x130>)
 8000840:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <PIDyaw+0x134>)
 8000846:	ed93 6b00 	vldr	d6, [r3]
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <PIDyaw+0x124>)
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <PIDyaw+0x138>)
 8000856:	ed93 5b00 	vldr	d5, [r3]
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <PIDyaw+0x12c>)
 800085c:	ed93 7b00 	vldr	d7, [r3]
 8000860:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000864:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <PIDyaw+0x13c>)
 800086a:	ed93 5b00 	vldr	d5, [r3]
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <PIDyaw+0x130>)
 8000870:	ed93 7b00 	vldr	d7, [r3]
 8000874:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000878:	ee36 7b07 	vadd.f64	d7, d6, d7
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <PIDyaw+0x140>)
 800087e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <PIDyaw+0x140>)
 8000884:	ed93 7b00 	vldr	d7, [r3]
 8000888:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80008e8 <PIDyaw+0x110>
 800088c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	dd05      	ble.n	80008a2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000896:	4a20      	ldr	r2, [pc, #128]	; (8000918 <PIDyaw+0x140>)
 8000898:	f04f 0300 	mov.w	r3, #0
 800089c:	4c1f      	ldr	r4, [pc, #124]	; (800091c <PIDyaw+0x144>)
 800089e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <PIDyaw+0x140>)
 80008a4:	ed93 7b00 	vldr	d7, [r3]
 80008a8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80008f0 <PIDyaw+0x118>
 80008ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b4:	d505      	bpl.n	80008c2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <PIDyaw+0x140>)
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	4c18      	ldr	r4, [pc, #96]	; (8000920 <PIDyaw+0x148>)
 80008be:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <PIDyaw+0x120>)
 80008c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <PIDyaw+0x128>)
 80008ca:	801a      	strh	r2, [r3, #0]
	return yawPID;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <PIDyaw+0x140>)
 80008ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008d2:	ec44 3b17 	vmov	d7, r3, r4
}
 80008d6:	eeb0 0b47 	vmov.f64	d0, d7
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc90      	pop	{r4, r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	f3af 8000 	nop.w
 80008e8:	00000000 	.word	0x00000000
 80008ec:	40590000 	.word	0x40590000
 80008f0:	00000000 	.word	0x00000000
 80008f4:	c0590000 	.word	0xc0590000
 80008f8:	24000338 	.word	0x24000338
 80008fc:	24000340 	.word	0x24000340
 8000900:	240001a0 	.word	0x240001a0
 8000904:	240000e8 	.word	0x240000e8
 8000908:	24000330 	.word	0x24000330
 800090c:	24000018 	.word	0x24000018
 8000910:	240000c0 	.word	0x240000c0
 8000914:	240000c8 	.word	0x240000c8
 8000918:	240005b8 	.word	0x240005b8
 800091c:	40590000 	.word	0x40590000
 8000920:	c0590000 	.word	0xc0590000

08000924 <PIDroR>:

double PIDroR(int _roRValue, int _roRSetpoint)
{
 8000924:	b490      	push	{r4, r7}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	roRError = _roRSetpoint - _roRValue;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b29a      	uxth	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	b29b      	uxth	r3, r3
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21a      	sxth	r2, r3
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <PIDroR+0xcc>)
 800093e:	801a      	strh	r2, [r3, #0]
	roRP = roRError;
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <PIDroR+0xcc>)
 8000942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <PIDroR+0xd0>)
 8000950:	ed83 7b00 	vstr	d7, [r3]
	roRD = roRError - roRPreError;
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <PIDroR+0xcc>)
 8000956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095a:	461a      	mov	r2, r3
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <PIDroR+0xd4>)
 800095e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <PIDroR+0xd8>)
 800096e:	ed83 7b00 	vstr	d7, [r3]
	roRI = roRError + roRI;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <PIDroR+0xcc>)
 8000974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <PIDroR+0xdc>)
 8000982:	ed93 7b00 	vldr	d7, [r3]
 8000986:	ee36 7b07 	vadd.f64	d7, d6, d7
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <PIDroR+0xdc>)
 800098c:	ed83 7b00 	vstr	d7, [r3]
	roRPID = roRKp*roRP + roRKd*roRD + roRKi*roRI;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <PIDroR+0xe0>)
 8000992:	ed93 6b00 	vldr	d6, [r3]
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <PIDroR+0xd0>)
 8000998:	ed93 7b00 	vldr	d7, [r3]
 800099c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <PIDroR+0xe4>)
 80009a2:	ed93 5b00 	vldr	d5, [r3]
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <PIDroR+0xd8>)
 80009a8:	ed93 7b00 	vldr	d7, [r3]
 80009ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80009b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <PIDroR+0xe8>)
 80009b6:	ed93 5b00 	vldr	d5, [r3]
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <PIDroR+0xdc>)
 80009bc:	ed93 7b00 	vldr	d7, [r3]
 80009c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80009c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <PIDroR+0xec>)
 80009ca:	ed83 7b00 	vstr	d7, [r3]
	roRPreError = roRError;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <PIDroR+0xcc>)
 80009d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <PIDroR+0xd4>)
 80009d6:	801a      	strh	r2, [r3, #0]
	return roRPID;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <PIDroR+0xec>)
 80009da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009de:	ec44 3b17 	vmov	d7, r3, r4
}
 80009e2:	eeb0 0b47 	vmov.f64	d0, d7
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc90      	pop	{r4, r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	24000730 	.word	0x24000730
 80009f4:	24000448 	.word	0x24000448
 80009f8:	240000d8 	.word	0x240000d8
 80009fc:	24000728 	.word	0x24000728
 8000a00:	240002a0 	.word	0x240002a0
 8000a04:	240005a0 	.word	0x240005a0
 8000a08:	24000668 	.word	0x24000668
 8000a0c:	24000580 	.word	0x24000580
 8000a10:	24000278 	.word	0x24000278

08000a14 <PIDpit>:
	roLPreError = roLError;
	return roLPID;
}

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8000a14:	b490      	push	{r4, r7}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	ee07 3a90 	vmov	s15, r3
 8000a28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <PIDpit+0xb8>)
 8000a2e:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <PIDpit+0xb8>)
 8000a34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a38:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <PIDpit+0xbc>)
 8000a3a:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <PIDpit+0xb8>)
 8000a40:	ed93 6b00 	vldr	d6, [r3]
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <PIDpit+0xc0>)
 8000a46:	ed93 7b00 	vldr	d7, [r3]
 8000a4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <PIDpit+0xc4>)
 8000a50:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <PIDpit+0xb8>)
 8000a56:	ed93 6b00 	vldr	d6, [r3]
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <PIDpit+0xc8>)
 8000a5c:	ed93 7b00 	vldr	d7, [r3]
 8000a60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <PIDpit+0xc8>)
 8000a66:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <PIDpit+0xcc>)
 8000a6c:	ed93 6b00 	vldr	d6, [r3]
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <PIDpit+0xbc>)
 8000a72:	ed93 7b00 	vldr	d7, [r3]
 8000a76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <PIDpit+0xd0>)
 8000a7c:	ed93 5b00 	vldr	d5, [r3]
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <PIDpit+0xc4>)
 8000a82:	ed93 7b00 	vldr	d7, [r3]
 8000a86:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <PIDpit+0xd4>)
 8000a90:	ed93 5b00 	vldr	d5, [r3]
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <PIDpit+0xc8>)
 8000a96:	ed93 7b00 	vldr	d7, [r3]
 8000a9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <PIDpit+0xd8>)
 8000aa4:	ed83 7b00 	vstr	d7, [r3]
	pitPreError = pitError;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <PIDpit+0xb8>)
 8000aaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000aae:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <PIDpit+0xc0>)
 8000ab0:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <PIDpit+0xd8>)
 8000ab6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000aba:	ec44 3b17 	vmov	d7, r3, r4
}
 8000abe:	eeb0 0b47 	vmov.f64	d0, d7
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc90      	pop	{r4, r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	24000280 	.word	0x24000280
 8000ad0:	24000438 	.word	0x24000438
 8000ad4:	240000d0 	.word	0x240000d0
 8000ad8:	24000188 	.word	0x24000188
 8000adc:	24000350 	.word	0x24000350
 8000ae0:	24000020 	.word	0x24000020
 8000ae4:	24000288 	.word	0x24000288
 8000ae8:	24000690 	.word	0x24000690
 8000aec:	24000570 	.word	0x24000570

08000af0 <roL_pit_yaw_mixSpeed>:
	controlMotor4(yawPID);
	// spinalCordTrans();
}

void roL_pit_yaw_mixSpeed(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	ed2d 8b02 	vpush	{d8}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
	double _roL_pit_speed = sqrt(roLPID*roLPID + pitPID*pitPID);
 8000afa:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <roL_pit_yaw_mixSpeed+0x180>)
 8000afc:	ed93 6b00 	vldr	d6, [r3]
 8000b00:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <roL_pit_yaw_mixSpeed+0x180>)
 8000b02:	ed93 7b00 	vldr	d7, [r3]
 8000b06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b0a:	4b5a      	ldr	r3, [pc, #360]	; (8000c74 <roL_pit_yaw_mixSpeed+0x184>)
 8000b0c:	ed93 5b00 	vldr	d5, [r3]
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <roL_pit_yaw_mixSpeed+0x184>)
 8000b12:	ed93 7b00 	vldr	d7, [r3]
 8000b16:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b1e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b22:	f00c fab5 	bl	800d090 <sqrt>
 8000b26:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roL_pit_dir = atan2(pitPID, roLPID);
 8000b2a:	4b52      	ldr	r3, [pc, #328]	; (8000c74 <roL_pit_yaw_mixSpeed+0x184>)
 8000b2c:	ed93 7b00 	vldr	d7, [r3]
 8000b30:	4b4f      	ldr	r3, [pc, #316]	; (8000c70 <roL_pit_yaw_mixSpeed+0x180>)
 8000b32:	ed93 6b00 	vldr	d6, [r3]
 8000b36:	eeb0 1b46 	vmov.f64	d1, d6
 8000b3a:	eeb0 0b47 	vmov.f64	d0, d7
 8000b3e:	f00c faa3 	bl	800d088 <atan2>
 8000b42:	ed87 0b08 	vstr	d0, [r7, #32]
	double _motor1Speed = yawPID + -(_roL_pit_speed *sin(_roL_pit_dir + M_PI/4) + 0);
 8000b46:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <roL_pit_yaw_mixSpeed+0x188>)
 8000b48:	ed93 8b00 	vldr	d8, [r3]
 8000b4c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000b50:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000c60 <roL_pit_yaw_mixSpeed+0x170>
 8000b54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b58:	eeb0 0b47 	vmov.f64	d0, d7
 8000b5c:	f00c fa58 	bl	800d010 <sin>
 8000b60:	eeb0 6b40 	vmov.f64	d6, d0
 8000b64:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000b68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b6c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8000c68 <roL_pit_yaw_mixSpeed+0x178>
 8000b70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b74:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000b78:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID + -(_roL_pit_speed *cos(_roL_pit_dir + M_PI/4) - 0);
 8000b7c:	4b3e      	ldr	r3, [pc, #248]	; (8000c78 <roL_pit_yaw_mixSpeed+0x188>)
 8000b7e:	ed93 8b00 	vldr	d8, [r3]
 8000b82:	ed97 7b08 	vldr	d7, [r7, #32]
 8000b86:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8000c60 <roL_pit_yaw_mixSpeed+0x170>
 8000b8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b8e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b92:	f00c fa01 	bl	800cf98 <cos>
 8000b96:	eeb0 6b40 	vmov.f64	d6, d0
 8000b9a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000b9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ba2:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000ba6:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID +   _roL_pit_speed *sin(_roL_pit_dir + M_PI/4) + 0;
 8000baa:	ed97 7b08 	vldr	d7, [r7, #32]
 8000bae:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000c60 <roL_pit_yaw_mixSpeed+0x170>
 8000bb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bb6:	eeb0 0b47 	vmov.f64	d0, d7
 8000bba:	f00c fa29 	bl	800d010 <sin>
 8000bbe:	eeb0 6b40 	vmov.f64	d6, d0
 8000bc2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000bc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <roL_pit_yaw_mixSpeed+0x188>)
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bd4:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000c68 <roL_pit_yaw_mixSpeed+0x178>
 8000bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bdc:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID +   _roL_pit_speed *cos(_roL_pit_dir + M_PI/4) - 0;
 8000be0:	ed97 7b08 	vldr	d7, [r7, #32]
 8000be4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000c60 <roL_pit_yaw_mixSpeed+0x170>
 8000be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bec:	eeb0 0b47 	vmov.f64	d0, d7
 8000bf0:	f00c f9d2 	bl	800cf98 <cos>
 8000bf4:	eeb0 6b40 	vmov.f64	d6, d0
 8000bf8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000bfc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <roL_pit_yaw_mixSpeed+0x188>)
 8000c02:	ed93 7b00 	vldr	d7, [r3]
 8000c06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c0a:	ed87 7b00 	vstr	d7, [r7]
	controlMotor1(_motor1Speed);
 8000c0e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c16:	ee17 0a90 	vmov	r0, s15
 8000c1a:	f7ff fd4b 	bl	80006b4 <controlMotor1>
	controlMotor2(_motor2Speed);
 8000c1e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c22:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c26:	ee17 0a90 	vmov	r0, s15
 8000c2a:	f7ff fd67 	bl	80006fc <controlMotor2>
	controlMotor3(_motor3Speed);
 8000c2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c36:	ee17 0a90 	vmov	r0, s15
 8000c3a:	f7ff fd83 	bl	8000744 <controlMotor3>
	controlMotor4(_motor4Speed);
 8000c3e:	ed97 7b00 	vldr	d7, [r7]
 8000c42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c46:	ee17 0a90 	vmov	r0, s15
 8000c4a:	f7ff fd9f 	bl	800078c <controlMotor4>
//	spinalCordTrans();
}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	; 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	ecbd 8b02 	vpop	{d8}
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	f3af 8000 	nop.w
 8000c60:	54442d18 	.word	0x54442d18
 8000c64:	3fe921fb 	.word	0x3fe921fb
	...
 8000c70:	24000348 	.word	0x24000348
 8000c74:	24000570 	.word	0x24000570
 8000c78:	240005b8 	.word	0x240005b8

08000c7c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <positionControl_Init+0x1c>)
 8000c82:	f008 fabd 	bl	8009200 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <positionControl_Init+0x20>)
 8000c88:	f008 faba 	bl	8009200 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <positionControl_Init+0x24>)
 8000c8e:	f008 fab7 	bl	8009200 <HAL_TIM_Base_Start_IT>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	240006e0 	.word	0x240006e0
 8000c9c:	24000238 	.word	0x24000238
 8000ca0:	24000698 	.word	0x24000698

08000ca4 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_TxCpltCallback+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d103      	bne.n	8000cc0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_UART_TxCpltCallback+0x68>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 8000cbe:	e01c      	b.n	8000cfa <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_UART_TxCpltCallback+0x6c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d103      	bne.n	8000cd4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_TxCpltCallback+0x70>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
}
 8000cd2:	e012      	b.n	8000cfa <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_UART_TxCpltCallback+0x74>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d103      	bne.n	8000ce8 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_UART_TxCpltCallback+0x78>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
}
 8000ce6:	e008      	b.n	8000cfa <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_UART_TxCpltCallback+0x7c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d102      	bne.n	8000cfa <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_UART_TxCpltCallback+0x80>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	24000450 	.word	0x24000450
 8000d0c:	24000670 	.word	0x24000670
 8000d10:	240001a4 	.word	0x240001a4
 8000d14:	240002a8 	.word	0x240002a8
 8000d18:	240005c0 	.word	0x240005c0
 8000d1c:	240004e8 	.word	0x240004e8
 8000d20:	240000f4 	.word	0x240000f4
 8000d24:	2400058c 	.word	0x2400058c

08000d28 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_UART_RxCpltCallback+0x84>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d103      	bne.n	8000d44 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_UART_RxCpltCallback+0x88>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 8000d42:	e02f      	b.n	8000da4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == PS2.Instance)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_UART_RxCpltCallback+0x8c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d103      	bne.n	8000d58 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_UART_RxCpltCallback+0x90>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	e025      	b.n	8000da4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == spinalCord.Instance)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_UART_RxCpltCallback+0x94>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d116      	bne.n	8000d92 <HAL_UART_RxCpltCallback+0x6a>
		if(spinalCordRxPacket[0]!=0)
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_UART_RxCpltCallback+0x98>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d009      	beq.n	8000d80 <HAL_UART_RxCpltCallback+0x58>
			trackingReceiSpinalCord++;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_RxCpltCallback+0x9c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_UART_RxCpltCallback+0x9c>)
 8000d74:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&spinalCord, spinalCordTxPacket, 9);
 8000d76:	2209      	movs	r2, #9
 8000d78:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d7a:	4810      	ldr	r0, [pc, #64]	; (8000dbc <HAL_UART_RxCpltCallback+0x94>)
 8000d7c:	f008 feb0 	bl	8009ae0 <HAL_UART_Transmit_IT>
		spinalCordRxCplt = 1;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_UART_RxCpltCallback+0xa4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <HAL_UART_RxCpltCallback+0x98>)
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_UART_RxCpltCallback+0x94>)
 8000d8c:	f008 ff2c 	bl	8009be8 <HAL_UART_Receive_IT>
}
 8000d90:	e008      	b.n	8000da4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == manualRobot.Instance)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_UART_RxCpltCallback+0xa8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d102      	bne.n	8000da4 <HAL_UART_RxCpltCallback+0x7c>
		manualRobotRxCplt = 1;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_UART_RxCpltCallback+0xac>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000450 	.word	0x24000450
 8000db0:	24000358 	.word	0x24000358
 8000db4:	240001a4 	.word	0x240001a4
 8000db8:	240004e9 	.word	0x240004e9
 8000dbc:	240005c0 	.word	0x240005c0
 8000dc0:	24000674 	.word	0x24000674
 8000dc4:	240006dc 	.word	0x240006dc
 8000dc8:	2400000c 	.word	0x2400000c
 8000dcc:	240006d8 	.word	0x240006d8
 8000dd0:	240000f4 	.word	0x240000f4
 8000dd4:	240003c8 	.word	0x240003c8

08000dd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4ba3      	ldr	r3, [pc, #652]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8170 	bne.w	80010ce <HAL_TIM_PeriodElapsedCallback+0x2f6>
	{
		if(legEn == 1)
 8000dee:	4ba2      	ldr	r3, [pc, #648]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d16b      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			if(legStatus == legInitShoot)
 8000df6:	4ba1      	ldr	r3, [pc, #644]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d11f      	bne.n	8000e3e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	489e      	ldr	r0, [pc, #632]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e06:	f005 fb51 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0e:	489c      	ldr	r0, [pc, #624]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e10:	f005 fb65 	bl	80064de <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000e14:	4b9b      	ldr	r3, [pc, #620]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a9a      	ldr	r2, [pc, #616]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e1c:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000e1e:	4b9a      	ldr	r3, [pc, #616]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a98      	ldr	r2, [pc, #608]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e26:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000e28:	4b97      	ldr	r3, [pc, #604]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e30:	db05      	blt.n	8000e3e <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					legEn = 0;
 8000e32:	4b91      	ldr	r3, [pc, #580]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000e38:	4b93      	ldr	r3, [pc, #588]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000e3e:	4b8f      	ldr	r3, [pc, #572]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d11f      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	488c      	ldr	r0, [pc, #560]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e4e:	f005 fb2d 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e56:	488a      	ldr	r0, [pc, #552]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e58:	f005 fb41 	bl	80064de <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000e5c:	4b89      	ldr	r3, [pc, #548]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a88      	ldr	r2, [pc, #544]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e64:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000e66:	4b88      	ldr	r3, [pc, #544]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a86      	ldr	r2, [pc, #536]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e6e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000e70:	4b85      	ldr	r3, [pc, #532]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000e78:	db05      	blt.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					legEn = 0;
 8000e7a:	4b7f      	ldr	r3, [pc, #508]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000e80:	4b81      	ldr	r3, [pc, #516]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000e86:	4b7d      	ldr	r3, [pc, #500]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d11f      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e94:	487a      	ldr	r0, [pc, #488]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e96:	f005 fb09 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	4878      	ldr	r0, [pc, #480]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ea0:	f005 fb1d 	bl	80064de <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ea4:	4b77      	ldr	r3, [pc, #476]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a76      	ldr	r2, [pc, #472]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000eac:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000eae:	4b76      	ldr	r3, [pc, #472]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a74      	ldr	r2, [pc, #464]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000eb6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8000eb8:	4b73      	ldr	r3, [pc, #460]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000ec0:	db05      	blt.n	8000ece <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					legEn = 0;
 8000ec2:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000ec8:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(rigtArmEn == 1)
 8000ece:	4b6f      	ldr	r3, [pc, #444]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d16b      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(rigtArmStatus == rigtArmInit)
 8000ed6:	4b6e      	ldr	r3, [pc, #440]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d11f      	bne.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x146>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	486b      	ldr	r0, [pc, #428]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ee6:	f005 fae1 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eee:	4869      	ldr	r0, [pc, #420]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ef0:	f005 faf5 	bl	80064de <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000ef4:	4b68      	ldr	r3, [pc, #416]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a67      	ldr	r2, [pc, #412]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000efc:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a65      	ldr	r2, [pc, #404]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f06:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmInitPulse)
 8000f08:	4b64      	ldr	r3, [pc, #400]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f10:	db05      	blt.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x146>
				{
					rigtArmEn = 0;
 8000f12:	4b5e      	ldr	r3, [pc, #376]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000f18:	4b60      	ldr	r3, [pc, #384]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmSetBall)
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d11f      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	4859      	ldr	r0, [pc, #356]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000f2e:	f005 fabd 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	4857      	ldr	r0, [pc, #348]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000f38:	f005 fad1 	bl	80064de <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000f3c:	4b56      	ldr	r3, [pc, #344]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000f44:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000f46:	4b55      	ldr	r3, [pc, #340]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a53      	ldr	r2, [pc, #332]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f4e:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000f50:	4b52      	ldr	r3, [pc, #328]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f58:	db05      	blt.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x18e>
				{
					rigtArmEn = 0;
 8000f5a:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000f60:	4b4e      	ldr	r3, [pc, #312]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmReturn)
 8000f66:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d11f      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_FCW);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4847      	ldr	r0, [pc, #284]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000f76:	f005 fa99 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7e:	4845      	ldr	r0, [pc, #276]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000f80:	f005 faad 	bl	80064de <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000f84:	4b44      	ldr	r3, [pc, #272]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a43      	ldr	r2, [pc, #268]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000f8c:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f96:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000f98:	4b40      	ldr	r3, [pc, #256]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fa0:	db05      	blt.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x1d6>
				{
					rigtArmEn = 0;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(leftArmEn == 1)
 8000fae:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	f040 808b 	bne.w	80010ce <HAL_TIM_PeriodElapsedCallback+0x2f6>
		{
			if(leftArmStatus == leftArmInit)
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11e      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000fc8:	f005 fa70 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4836      	ldr	r0, [pc, #216]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000fd0:	f005 fa85 	bl	80064de <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000fd4:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a34      	ldr	r2, [pc, #208]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000fdc:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000fe6:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmInitPulse)
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ff0:	db05      	blt.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x226>
				{
					leftArmEn = 0;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmSetBall)
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d11e      	bne.n	8001044 <HAL_TIM_PeriodElapsedCallback+0x26c>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800100e:	f005 fa4d 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8001012:	2102      	movs	r1, #2
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001016:	f005 fa62 	bl	80064de <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001022:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800102c:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001036:	db05      	blt.n	8001044 <HAL_TIM_PeriodElapsedCallback+0x26c>
				{
					leftArmEn = 0;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmReturn)
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d140      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x2f6>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_FCW);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4810      	ldr	r0, [pc, #64]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001054:	f005 fa2a 	bl	80064ac <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8001058:	2102      	movs	r1, #2
 800105a:	4813      	ldr	r0, [pc, #76]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800105c:	f005 fa3f 	bl	80064de <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001068:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	e020      	b.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8001072:	bf00      	nop
 8001074:	240006e0 	.word	0x240006e0
 8001078:	240004e4 	.word	0x240004e4
 800107c:	24000654 	.word	0x24000654
 8001080:	58020c00 	.word	0x58020c00
 8001084:	240004dc 	.word	0x240004dc
 8001088:	24000598 	.word	0x24000598
 800108c:	24000588 	.word	0x24000588
 8001090:	240000f0 	.word	0x240000f0
 8001094:	58021800 	.word	0x58021800
 8001098:	24000658 	.word	0x24000658
 800109c:	240005ac 	.word	0x240005ac
 80010a0:	24000724 	.word	0x24000724
 80010a4:	24000564 	.word	0x24000564
 80010a8:	58021000 	.word	0x58021000
 80010ac:	24000680 	.word	0x24000680
 80010b0:	2400035c 	.word	0x2400035c
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80010b6:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010c0:	db05      	blt.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x2f6>
				{
					leftArmEn = 0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == leftArm.Instance)
	{

	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2400035c 	.word	0x2400035c
 80010dc:	24000724 	.word	0x24000724

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f001 f8ae 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f842 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 fbfe 	bl	80018ec <MX_GPIO_Init>
  MX_DMA_Init();
 80010f0:	f000 fbd4 	bl	800189c <MX_DMA_Init>
  MX_ADC1_Init();
 80010f4:	f000 f8f2 	bl	80012dc <MX_ADC1_Init>
  MX_ADC3_Init();
 80010f8:	f000 f978 	bl	80013ec <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80010fc:	f000 faea 	bl	80016d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001100:	f000 fb34 	bl	800176c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001104:	f000 f9d6 	bl	80014b4 <MX_TIM7_Init>
  MX_TIM12_Init();
 8001108:	f000 fa0c 	bl	8001524 <MX_TIM12_Init>
  MX_TIM15_Init();
 800110c:	f000 fa44 	bl	8001598 <MX_TIM15_Init>
  MX_UART7_Init();
 8001110:	f000 fa94 	bl	800163c <MX_UART7_Init>
  MX_USART6_UART_Init();
 8001114:	f000 fb76 	bl	8001804 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8001118:	f7ff fa7e 	bl	8000618 <peripheralUART_Init>
  compassReset();
 800111c:	f7ff fa8a 	bl	8000634 <compassReset>
  delayUs_Init();
 8001120:	f7ff fa5a 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8001124:	f7ff fdaa 	bl	8000c7c <positionControl_Init>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	480e      	ldr	r0, [pc, #56]	; (8001168 <main+0x88>)
 800112e:	f005 f9bd 	bl	80064ac <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001136:	f001 f917 	bl	8002368 <HAL_Delay>
//	  tracking++;




	  readADC();
 800113a:	f7ff faa5 	bl	8000688 <readADC>
	  PIDpit(0, 2000);
 800113e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fc66 	bl	8000a14 <PIDpit>
	  PIDroR(0, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fbea 	bl	8000924 <PIDroR>
	  PIDyaw(0, 0);
 8001150:	2100      	movs	r1, #0
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fb40 	bl	80007d8 <PIDyaw>
	  roL_pit_yaw_mixSpeed();
 8001158:	f7ff fcca 	bl	8000af0 <roL_pit_yaw_mixSpeed>
	  tracking++;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <main+0x8c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a02      	ldr	r2, [pc, #8]	; (800116c <main+0x8c>)
 8001164:	6013      	str	r3, [r2, #0]
	  readADC();
 8001166:	e7e8      	b.n	800113a <main+0x5a>
 8001168:	58020400 	.word	0x58020400
 800116c:	24000568 	.word	0x24000568

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0cc      	sub	sp, #304	; 0x130
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800117a:	224c      	movs	r2, #76	; 0x4c
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00b ff02 	bl	800cf88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00b fefb 	bl	800cf88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4618      	mov	r0, r3
 8001198:	23bc      	movs	r3, #188	; 0xbc
 800119a:	461a      	mov	r2, r3
 800119c:	2100      	movs	r1, #0
 800119e:	f00b fef3 	bl	800cf88 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011a2:	2002      	movs	r0, #2
 80011a4:	f005 f9b6 	bl	8006514 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <SystemClock_Config+0x164>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <SystemClock_Config+0x164>)
 80011b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <SystemClock_Config+0x164>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <SystemClock_Config+0x168>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <SystemClock_Config+0x168>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <SystemClock_Config+0x168>)
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e2:	bf00      	nop
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <SystemClock_Config+0x164>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011f0:	d1f8      	bne.n	80011e4 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001210:	2304      	movs	r3, #4
 8001212:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001216:	233c      	movs	r3, #60	; 0x3c
 8001218:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800122e:	230c      	movs	r3, #12
 8001230:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001244:	4618      	mov	r0, r3
 8001246:	f005 f99f 	bl	8006588 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001250:	f000 fc54 	bl	8001afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001254:	233f      	movs	r3, #63	; 0x3f
 8001256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2303      	movs	r3, #3
 800125c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001266:	2308      	movs	r3, #8
 8001268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001272:	2340      	movs	r3, #64	; 0x40
 8001274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800128a:	2104      	movs	r1, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fd53 	bl	8006d38 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001298:	f000 fc30 	bl	8001afc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2203      	movs	r2, #3
 80012a2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4618      	mov	r0, r3
 80012ba:	f006 f8c1 	bl	8007440 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80012c4:	f000 fc1a 	bl	8001afc <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	58024800 	.word	0x58024800
 80012d8:	58000400 	.word	0x58000400

080012dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	615a      	str	r2, [r3, #20]
 80012fe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <MX_ADC1_Init+0x100>)
 8001302:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <MX_ADC1_Init+0x104>)
 8001304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_ADC1_Init+0x100>)
 8001308:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800130c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <MX_ADC1_Init+0x100>)
 8001310:	2208      	movs	r2, #8
 8001312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001314:	4b31      	ldr	r3, [pc, #196]	; (80013dc <MX_ADC1_Init+0x100>)
 8001316:	2201      	movs	r2, #1
 8001318:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <MX_ADC1_Init+0x100>)
 800131c:	2204      	movs	r2, #4
 800131e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <MX_ADC1_Init+0x100>)
 8001322:	2200      	movs	r2, #0
 8001324:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_ADC1_Init+0x100>)
 8001328:	2200      	movs	r2, #0
 800132a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <MX_ADC1_Init+0x100>)
 800132e:	2202      	movs	r2, #2
 8001330:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_ADC1_Init+0x100>)
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_ADC1_Init+0x100>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <MX_ADC1_Init+0x100>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <MX_ADC1_Init+0x100>)
 8001346:	2203      	movs	r2, #3
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <MX_ADC1_Init+0x100>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_ADC1_Init+0x100>)
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_ADC1_Init+0x100>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_ADC1_Init+0x100>)
 8001360:	f001 fa22 	bl	80027a8 <HAL_ADC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800136a:	f000 fbc7 	bl	8001afc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4818      	ldr	r0, [pc, #96]	; (80013dc <MX_ADC1_Init+0x100>)
 800137a:	f002 f9e1 	bl	8003740 <HAL_ADCEx_MultiModeConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001384:	f000 fbba 	bl	8001afc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_ADC1_Init+0x108>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138c:	2306      	movs	r3, #6
 800138e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001394:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001398:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139a:	2304      	movs	r3, #4
 800139c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_ADC1_Init+0x100>)
 80013a8:	f001 fc80 	bl	8002cac <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80013b2:	f000 fba3 	bl	8001afc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_ADC1_Init+0x10c>)
 80013b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013ba:	230c      	movs	r3, #12
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_ADC1_Init+0x100>)
 80013c4:	f001 fc72 	bl	8002cac <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80013ce:	f000 fb95 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	24000364 	.word	0x24000364
 80013e0:	40022000 	.word	0x40022000
 80013e4:	2a000400 	.word	0x2a000400
 80013e8:	3ef08000 	.word	0x3ef08000

080013ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <MX_ADC3_Init+0xc0>)
 8001408:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC3_Init+0xbc>)
 800140c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001410:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001414:	2208      	movs	r2, #8
 8001416:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_ADC3_Init+0xbc>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001420:	2204      	movs	r2, #4
 8001422:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001426:	2200      	movs	r2, #0
 8001428:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_ADC3_Init+0xbc>)
 800142c:	2200      	movs	r2, #0
 800142e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001432:	2201      	movs	r2, #1
 8001434:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_ADC3_Init+0xbc>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_ADC3_Init+0xbc>)
 800144a:	2203      	movs	r2, #3
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001456:	2200      	movs	r2, #0
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_ADC3_Init+0xbc>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001462:	4811      	ldr	r0, [pc, #68]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001464:	f001 f9a0 	bl	80027a8 <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800146e:	f000 fb45 	bl	8001afc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_ADC3_Init+0xc4>)
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001476:	2306      	movs	r3, #6
 8001478:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800147e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001482:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001484:	2304      	movs	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_ADC3_Init+0xbc>)
 8001492:	f001 fc0b 	bl	8002cac <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800149c:	f000 fb2e 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	240003d0 	.word	0x240003d0
 80014ac:	58026000 	.word	0x58026000
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_TIM7_Init+0x68>)
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <MX_TIM7_Init+0x6c>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_TIM7_Init+0x68>)
 80014cc:	f640 125f 	movw	r2, #2399	; 0x95f
 80014d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_TIM7_Init+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_TIM7_Init+0x68>)
 80014da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_TIM7_Init+0x68>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM7_Init+0x68>)
 80014e8:	f007 fe5e 	bl	80091a8 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80014f2:	f000 fb03 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_TIM7_Init+0x68>)
 8001504:	f008 f9f6 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800150e:	f000 faf5 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	240006e0 	.word	0x240006e0
 8001520:	40001400 	.word	0x40001400

08001524 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_TIM12_Init+0x6c>)
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <MX_TIM12_Init+0x70>)
 800153a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_TIM12_Init+0x6c>)
 800153e:	f640 125f 	movw	r2, #2399	; 0x95f
 8001542:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_TIM12_Init+0x6c>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_TIM12_Init+0x6c>)
 800154c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001550:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_TIM12_Init+0x6c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <MX_TIM12_Init+0x6c>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_TIM12_Init+0x6c>)
 8001560:	f007 fe22 	bl	80091a8 <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800156a:	f000 fac7 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_TIM12_Init+0x6c>)
 800157a:	f007 ff8b 	bl	8009494 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001584:	f000 faba 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	24000698 	.word	0x24000698
 8001594:	40001800 	.word	0x40001800

08001598 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <MX_TIM15_Init+0xa0>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015be:	f640 125f 	movw	r2, #2399	; 0x95f
 80015c2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_TIM15_Init+0x9c>)
 80015e6:	f007 fddf 	bl	80091a8 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80015f0:	f000 fa84 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_TIM15_Init+0x9c>)
 8001602:	f007 ff47 	bl	8009494 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800160c:	f000 fa76 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_TIM15_Init+0x9c>)
 800161e:	f008 f969 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001628:	f000 fa68 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24000238 	.word	0x24000238
 8001638:	40014000 	.word	0x40014000

0800163c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_UART7_Init+0x90>)
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <MX_UART7_Init+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_UART7_Init+0x90>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_UART7_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_UART7_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_UART7_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_UART7_Init+0x90>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_UART7_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_UART7_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_UART7_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_UART7_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_UART7_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <MX_UART7_Init+0x90>)
 8001686:	f008 f9db 	bl	8009a40 <HAL_UART_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001690:	f000 fa34 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001694:	2100      	movs	r1, #0
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_UART7_Init+0x90>)
 8001698:	f00b fb67 	bl	800cd6a <HAL_UARTEx_SetTxFifoThreshold>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80016a2:	f000 fa2b 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <MX_UART7_Init+0x90>)
 80016aa:	f00b fb9c 	bl	800cde6 <HAL_UARTEx_SetRxFifoThreshold>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f000 fa22 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_UART7_Init+0x90>)
 80016ba:	f00b fb1d 	bl	800ccf8 <HAL_UARTEx_DisableFifoMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f000 fa1a 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	240000f4 	.word	0x240000f4
 80016d0:	40007800 	.word	0x40007800

080016d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <MX_USART1_UART_Init+0x90>)
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <MX_USART1_UART_Init+0x94>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_USART1_UART_Init+0x90>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_USART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_USART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_USART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_USART1_UART_Init+0x90>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_USART1_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <MX_USART1_UART_Init+0x90>)
 800171e:	f008 f98f 	bl	8009a40 <HAL_UART_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001728:	f000 f9e8 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001730:	f00b fb1b 	bl	800cd6a <HAL_UARTEx_SetTxFifoThreshold>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800173a:	f000 f9df 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4808      	ldr	r0, [pc, #32]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001742:	f00b fb50 	bl	800cde6 <HAL_UARTEx_SetRxFifoThreshold>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 f9d6 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_USART1_UART_Init+0x90>)
 8001752:	f00b fad1 	bl	800ccf8 <HAL_UARTEx_DisableFifoMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800175c:	f000 f9ce 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	24000450 	.word	0x24000450
 8001768:	40011000 	.word	0x40011000

0800176c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <MX_USART3_UART_Init+0x90>)
 8001772:	4a23      	ldr	r2, [pc, #140]	; (8001800 <MX_USART3_UART_Init+0x94>)
 8001774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <MX_USART3_UART_Init+0x90>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <MX_USART3_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_USART3_UART_Init+0x90>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_USART3_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_USART3_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017b6:	f008 f943 	bl	8009a40 <HAL_UART_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017c0:	f000 f99c 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017c8:	f00b facf 	bl	800cd6a <HAL_UARTEx_SetTxFifoThreshold>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017d2:	f000 f993 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4808      	ldr	r0, [pc, #32]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017da:	f00b fb04 	bl	800cde6 <HAL_UARTEx_SetRxFifoThreshold>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017e4:	f000 f98a 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_USART3_UART_Init+0x90>)
 80017ea:	f00b fa85 	bl	800ccf8 <HAL_UARTEx_DisableFifoMode>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017f4:	f000 f982 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	240001a4 	.word	0x240001a4
 8001800:	40004800 	.word	0x40004800

08001804 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_USART6_UART_Init+0x90>)
 800180a:	4a23      	ldr	r2, [pc, #140]	; (8001898 <MX_USART6_UART_Init+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_USART6_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_USART6_UART_Init+0x90>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_USART6_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800184c:	4811      	ldr	r0, [pc, #68]	; (8001894 <MX_USART6_UART_Init+0x90>)
 800184e:	f008 f8f7 	bl	8009a40 <HAL_UART_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001858:	f000 f950 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001860:	f00b fa83 	bl	800cd6a <HAL_UARTEx_SetTxFifoThreshold>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800186a:	f000 f947 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001872:	f00b fab8 	bl	800cde6 <HAL_UARTEx_SetRxFifoThreshold>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800187c:	f000 f93e 	bl	8001afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_USART6_UART_Init+0x90>)
 8001882:	f00b fa39 	bl	800ccf8 <HAL_UARTEx_DisableFifoMode>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800188c:	f000 f936 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	240005c0 	.word	0x240005c0
 8001898:	40011400 	.word	0x40011400

0800189c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_DMA_Init+0x4c>)
 80018a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <MX_DMA_Init+0x4c>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <MX_DMA_Init+0x4c>)
 80018b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	200b      	movs	r0, #11
 80018c6:	f002 f8f0 	bl	8003aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80018ca:	200b      	movs	r0, #11
 80018cc:	f002 f907 	bl	8003ade <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	200c      	movs	r0, #12
 80018d6:	f002 f8e8 	bl	8003aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018da:	200c      	movs	r0, #12
 80018dc:	f002 f8ff 	bl	8003ade <HAL_NVIC_EnableIRQ>

}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	58024400 	.word	0x58024400

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a76      	ldr	r2, [pc, #472]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001920:	4b70      	ldr	r3, [pc, #448]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a6f      	ldr	r2, [pc, #444]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b6c      	ldr	r3, [pc, #432]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001944:	4a67      	ldr	r2, [pc, #412]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194e:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199e:	4a51      	ldr	r2, [pc, #324]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a8:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 80019be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <MX_GPIO_Init+0x1f8>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f240 7104 	movw	r1, #1796	; 0x704
 80019da:	4843      	ldr	r0, [pc, #268]	; (8001ae8 <MX_GPIO_Init+0x1fc>)
 80019dc:	f004 fd66 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80019e0:	2200      	movs	r2, #0
 80019e2:	f242 0167 	movw	r1, #8295	; 0x2067
 80019e6:	4841      	ldr	r0, [pc, #260]	; (8001aec <MX_GPIO_Init+0x200>)
 80019e8:	f004 fd60 	bl	80064ac <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2182      	movs	r1, #130	; 0x82
 80019f0:	483f      	ldr	r0, [pc, #252]	; (8001af0 <MX_GPIO_Init+0x204>)
 80019f2:	f004 fd5b 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80019fc:	483d      	ldr	r0, [pc, #244]	; (8001af4 <MX_GPIO_Init+0x208>)
 80019fe:	f004 fd55 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
 8001a08:	483b      	ldr	r0, [pc, #236]	; (8001af8 <MX_GPIO_Init+0x20c>)
 8001a0a:	f004 fd4f 	bl	80064ac <HAL_GPIO_WritePin>
                          |rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001a0e:	f240 7304 	movw	r3, #1796	; 0x704
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <MX_GPIO_Init+0x1fc>)
 8001a28:	f004 fb90 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001a2c:	f242 0367 	movw	r3, #8295	; 0x2067
 8001a30:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4829      	ldr	r0, [pc, #164]	; (8001aec <MX_GPIO_Init+0x200>)
 8001a46:	f004 fb81 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4823      	ldr	r0, [pc, #140]	; (8001af0 <MX_GPIO_Init+0x204>)
 8001a62:	f004 fb73 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 8001a66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481d      	ldr	r0, [pc, #116]	; (8001af4 <MX_GPIO_Init+0x208>)
 8001a80:	f004 fb64 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4815      	ldr	r0, [pc, #84]	; (8001af4 <MX_GPIO_Init+0x208>)
 8001a9e:	f004 fb55 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001aa2:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001aa6:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480f      	ldr	r0, [pc, #60]	; (8001af8 <MX_GPIO_Init+0x20c>)
 8001abc:	f004 fb46 	bl	800614c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MX_GPIO_Init+0x204>)
 8001ad8:	f004 fb38 	bl	800614c <HAL_GPIO_Init>

}
 8001adc:	bf00      	nop
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58020000 	.word	0x58020000
 8001aec:	58020400 	.word	0x58020400
 8001af0:	58021000 	.word	0x58021000
 8001af4:	58020c00 	.word	0x58020c00
 8001af8:	58021800 	.word	0x58021800

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_MspInit+0x30>)
 8001b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_MspInit+0x30>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_MspInit+0x30>)
 8001b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	58024400 	.word	0x58024400

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6a      	ldr	r2, [pc, #424]	; (8001d08 <HAL_ADC_MspInit+0x1c8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d175      	bne.n	8001c4e <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b62:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b68:	4a68      	ldr	r2, [pc, #416]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001b6a:	f043 0320 	orr.w	r3, r3, #32
 8001b6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001b74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b80:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	4a61      	ldr	r2, [pc, #388]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	4a59      	ldr	r2, [pc, #356]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4850      	ldr	r0, [pc, #320]	; (8001d10 <HAL_ADC_MspInit+0x1d0>)
 8001bd0:	f004 fabc 	bl	800614c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	484b      	ldr	r0, [pc, #300]	; (8001d14 <HAL_ADC_MspInit+0x1d4>)
 8001be8:	f004 fab0 	bl	800614c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001bec:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001bee:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_ADC_MspInit+0x1dc>)
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bf2:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001bf4:	2209      	movs	r2, #9
 8001bf6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf8:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfe:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c04:	4b44      	ldr	r3, [pc, #272]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c22:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c30:	4839      	ldr	r0, [pc, #228]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c32:	f001 ff6f 	bl	8003b14 <HAL_DMA_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001c3c:	f7ff ff5e 	bl	8001afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a35      	ldr	r2, [pc, #212]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c44:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <HAL_ADC_MspInit+0x1d8>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c4c:	e058      	b.n	8001d00 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <HAL_ADC_MspInit+0x1e0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d153      	bne.n	8001d00 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	4a2b      	ldr	r2, [pc, #172]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_ADC_MspInit+0x1cc>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001c94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001c98:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c9c:	f000 fb92 	bl	80023c4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_ADC_MspInit+0x1e8>)
 8001ca4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001ca8:	2273      	movs	r2, #115	; 0x73
 8001caa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cce:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ce4:	480f      	ldr	r0, [pc, #60]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001ce6:	f001 ff15 	bl	8003b14 <HAL_DMA_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001cf0:	f7ff ff04 	bl	8001afc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cf8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_ADC_MspInit+0x1e4>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d00:	bf00      	nop
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020800 	.word	0x58020800
 8001d14:	58020000 	.word	0x58020000
 8001d18:	240004ec 	.word	0x240004ec
 8001d1c:	40020010 	.word	0x40020010
 8001d20:	58026000 	.word	0x58026000
 8001d24:	240002b8 	.word	0x240002b8
 8001d28:	40020028 	.word	0x40020028

08001d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d117      	bne.n	8001d6e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d46:	f043 0320 	orr.w	r3, r3, #32
 8001d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2037      	movs	r0, #55	; 0x37
 8001d62:	f001 fea2 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d66:	2037      	movs	r0, #55	; 0x37
 8001d68:	f001 feb9 	bl	8003ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d6c:	e038      	b.n	8001de0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d117      	bne.n	8001da8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	202b      	movs	r0, #43	; 0x2b
 8001d9c:	f001 fe85 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001da0:	202b      	movs	r0, #43	; 0x2b
 8001da2:	f001 fe9c 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001da6:	e01b      	b.n	8001de0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_TIM_Base_MspInit+0xc8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d116      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2074      	movs	r0, #116	; 0x74
 8001dd6:	f001 fe68 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001dda:	2074      	movs	r0, #116	; 0x74
 8001ddc:	f001 fe7f 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40001400 	.word	0x40001400
 8001dec:	58024400 	.word	0x58024400
 8001df0:	40001800 	.word	0x40001800
 8001df4:	40014000 	.word	0x40014000

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b090      	sub	sp, #64	; 0x40
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a79      	ldr	r2, [pc, #484]	; (8001ffc <HAL_UART_MspInit+0x204>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d136      	bne.n	8001e88 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001e1a:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e20:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e2a:	4b75      	ldr	r3, [pc, #468]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e38:	4b71      	ldr	r3, [pc, #452]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	4a70      	ldr	r2, [pc, #448]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001e66:	2307      	movs	r3, #7
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4864      	ldr	r0, [pc, #400]	; (8002004 <HAL_UART_MspInit+0x20c>)
 8001e72:	f004 f96b 	bl	800614c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	2052      	movs	r0, #82	; 0x52
 8001e7c:	f001 fe15 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001e80:	2052      	movs	r0, #82	; 0x52
 8001e82:	f001 fe2c 	bl	8003ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e86:	e0b4      	b.n	8001ff2 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5e      	ldr	r2, [pc, #376]	; (8002008 <HAL_UART_MspInit+0x210>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d137      	bne.n	8001f02 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e92:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e98:	4a59      	ldr	r2, [pc, #356]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ea2:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb6:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001ece:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4848      	ldr	r0, [pc, #288]	; (800200c <HAL_UART_MspInit+0x214>)
 8001eec:	f004 f92e 	bl	800614c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2025      	movs	r0, #37	; 0x25
 8001ef6:	f001 fdd8 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001efa:	2025      	movs	r0, #37	; 0x25
 8001efc:	f001 fdef 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001f00:	e077      	b.n	8001ff2 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a42      	ldr	r2, [pc, #264]	; (8002010 <HAL_UART_MspInit+0x218>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d137      	bne.n	8001f7c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0c:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f12:	4a3b      	ldr	r2, [pc, #236]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001f48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	4829      	ldr	r0, [pc, #164]	; (800200c <HAL_UART_MspInit+0x214>)
 8001f66:	f004 f8f1 	bl	800614c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	2027      	movs	r0, #39	; 0x27
 8001f70:	f001 fd9b 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f74:	2027      	movs	r0, #39	; 0x27
 8001f76:	f001 fdb2 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001f7a:	e03a      	b.n	8001ff2 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_UART_MspInit+0x21c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d135      	bne.n	8001ff2 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_UART_MspInit+0x208>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480e      	ldr	r0, [pc, #56]	; (8002018 <HAL_UART_MspInit+0x220>)
 8001fde:	f004 f8b5 	bl	800614c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	2047      	movs	r0, #71	; 0x47
 8001fe8:	f001 fd5f 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fec:	2047      	movs	r0, #71	; 0x47
 8001fee:	f001 fd76 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3740      	adds	r7, #64	; 0x40
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40007800 	.word	0x40007800
 8002000:	58024400 	.word	0x58024400
 8002004:	58021400 	.word	0x58021400
 8002008:	40011000 	.word	0x40011000
 800200c:	58020400 	.word	0x58020400
 8002010:	40004800 	.word	0x40004800
 8002014:	40011400 	.word	0x40011400
 8002018:	58020800 	.word	0x58020800

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <UsageFault_Handler+0x4>

08002042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 f95a 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <DMA1_Stream0_IRQHandler+0x10>)
 800207e:	f002 fd53 	bl	8004b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	240004ec 	.word	0x240004ec

0800208c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA1_Stream1_IRQHandler+0x10>)
 8002092:	f002 fd49 	bl	8004b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	240002b8 	.word	0x240002b8

080020a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <USART1_IRQHandler+0x10>)
 80020a6:	f007 fe77 	bl	8009d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24000450 	.word	0x24000450

080020b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <USART3_IRQHandler+0x10>)
 80020ba:	f007 fe6d 	bl	8009d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	240001a4 	.word	0x240001a4

080020c8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80020ce:	f007 f8c1 	bl	8009254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	24000698 	.word	0x24000698

080020dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM7_IRQHandler+0x10>)
 80020e2:	f007 f8b7 	bl	8009254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	240006e0 	.word	0x240006e0

080020f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <USART6_IRQHandler+0x10>)
 80020f6:	f007 fe4f 	bl	8009d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	240005c0 	.word	0x240005c0

08002104 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <UART7_IRQHandler+0x10>)
 800210a:	f007 fe45 	bl	8009d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	240000f4 	.word	0x240000f4

08002118 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <TIM15_IRQHandler+0x10>)
 800211e:	f007 f899 	bl	8009254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	24000238 	.word	0x24000238

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <SystemInit+0xac>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <SystemInit+0xac>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <SystemInit+0xb0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a25      	ldr	r2, [pc, #148]	; (80021dc <SystemInit+0xb0>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800214c:	4b23      	ldr	r3, [pc, #140]	; (80021dc <SystemInit+0xb0>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <SystemInit+0xb0>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <SystemInit+0xb0>)
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <SystemInit+0xb4>)
 800215a:	4013      	ands	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <SystemInit+0xb0>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <SystemInit+0xb0>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <SystemInit+0xb0>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <SystemInit+0xb0>)
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <SystemInit+0xb0>)
 8002178:	2200      	movs	r2, #0
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <SystemInit+0xb0>)
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <SystemInit+0xb0>)
 8002184:	2200      	movs	r2, #0
 8002186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <SystemInit+0xb0>)
 800218a:	2200      	movs	r2, #0
 800218c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <SystemInit+0xb0>)
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <SystemInit+0xb0>)
 8002196:	2200      	movs	r2, #0
 8002198:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <SystemInit+0xb0>)
 800219c:	2200      	movs	r2, #0
 800219e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <SystemInit+0xb0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <SystemInit+0xb0>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <SystemInit+0xb0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <SystemInit+0xb8>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <SystemInit+0xbc>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021be:	d202      	bcs.n	80021c6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <SystemInit+0xc0>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SystemInit+0xac>)
 80021c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	58024400 	.word	0x58024400
 80021e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80021e4:	5c001000 	.word	0x5c001000
 80021e8:	ffff0000 	.word	0xffff0000
 80021ec:	51008108 	.word	0x51008108

080021f0 <Reset_Handler>:
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0x14>
 80021f4:	2100      	movs	r1, #0
 80021f6:	e003      	b.n	8002200 <LoopCopyDataInit>

080021f8 <CopyDataInit>:
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <LoopFillZerobss+0x18>)
 80021fa:	585b      	ldr	r3, [r3, r1]
 80021fc:	5043      	str	r3, [r0, r1]
 80021fe:	3104      	adds	r1, #4

08002200 <LoopCopyDataInit>:
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <LoopFillZerobss+0x1c>)
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <LoopFillZerobss+0x20>)
 8002204:	1842      	adds	r2, r0, r1
 8002206:	429a      	cmp	r2, r3
 8002208:	d3f6      	bcc.n	80021f8 <CopyDataInit>
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopFillZerobss+0x24>)
 800220c:	e002      	b.n	8002214 <LoopFillZerobss>

0800220e <FillZerobss>:
 800220e:	2300      	movs	r3, #0
 8002210:	f842 3b04 	str.w	r3, [r2], #4

08002214 <LoopFillZerobss>:
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <LoopFillZerobss+0x28>)
 8002216:	429a      	cmp	r2, r3
 8002218:	d3f9      	bcc.n	800220e <FillZerobss>
 800221a:	f7ff ff87 	bl	800212c <SystemInit>
 800221e:	f00a fe8f 	bl	800cf40 <__libc_init_array>
 8002222:	f7fe ff5d 	bl	80010e0 <main>
 8002226:	4770      	bx	lr
 8002228:	24080000 	.word	0x24080000
 800222c:	0800e2c0 	.word	0x0800e2c0
 8002230:	24000000 	.word	0x24000000
 8002234:	240000a0 	.word	0x240000a0
 8002238:	240000a0 	.word	0x240000a0
 800223c:	2400073c 	.word	0x2400073c

08002240 <ADC3_IRQHandler>:
 8002240:	e7fe      	b.n	8002240 <ADC3_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224a:	2003      	movs	r0, #3
 800224c:	f001 fc22 	bl	8003a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002250:	f004 ff28 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8002254:	4601      	mov	r1, r0
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_Init+0x68>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_Init+0x6c>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa21 f303 	lsr.w	r3, r1, r3
 800226c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_Init+0x68>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_Init+0x6c>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_Init+0x70>)
 8002286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_Init+0x74>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228e:	2000      	movs	r0, #0
 8002290:	f000 f814 	bl	80022bc <HAL_InitTick>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e002      	b.n	80022a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800229e:	f7ff fc35 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	58024400 	.word	0x58024400
 80022b0:	0800e078 	.word	0x0800e078
 80022b4:	2400002c 	.word	0x2400002c
 80022b8:	24000028 	.word	0x24000028

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_InitTick+0x60>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e021      	b.n	8002314 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_InitTick+0x64>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_InitTick+0x60>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 fc07 	bl	8003afa <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f001 fbd1 	bl	8003aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <HAL_InitTick+0x68>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	24000034 	.word	0x24000034
 8002320:	24000028 	.word	0x24000028
 8002324:	24000030 	.word	0x24000030

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x20>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x24>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_IncTick+0x24>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	24000034 	.word	0x24000034
 800234c:	24000738 	.word	0x24000738

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_GetTick+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	24000738 	.word	0x24000738

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff ffee 	bl	8002350 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_Delay+0x40>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffde 	bl	8002350 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	24000034 	.word	0x24000034

080023ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_GetREVID+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0c1b      	lsrs	r3, r3, #16
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	5c001000 	.word	0x5c001000

080023c4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	58000400 	.word	0x58000400

080023f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002458:	b490      	push	{r4, r7}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3360      	adds	r3, #96	; 0x60
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	430b      	orrs	r3, r1
 8002484:	4313      	orrs	r3, r2
 8002486:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bc90      	pop	{r4, r7}
 8002490:	4770      	bx	lr

08002492 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	431a      	orrs	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	611a      	str	r2, [r3, #16]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024c4:	b490      	push	{r4, r7}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	6023      	str	r3, [r4, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc90      	pop	{r4, r7}
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800251a:	b490      	push	{r4, r7}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3330      	adds	r3, #48	; 0x30
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	4413      	add	r3, r2
 8002538:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800253a:	6822      	ldr	r2, [r4, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	211f      	movs	r1, #31
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 011f 	and.w	r1, r3, #31
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bc90      	pop	{r4, r7}
 800256a:	4770      	bx	lr

0800256c <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60da      	str	r2, [r3, #12]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002592:	b490      	push	{r4, r7}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3314      	adds	r3, #20
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	0e5b      	lsrs	r3, r3, #25
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025b2:	6822      	ldr	r2, [r4, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0d1b      	lsrs	r3, r3, #20
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2107      	movs	r1, #7
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0d1b      	lsrs	r3, r3, #20
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc90      	pop	{r4, r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0318 	and.w	r3, r3, #24
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002608:	40d9      	lsrs	r1, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	400b      	ands	r3, r1
 800260e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	000fffff 	.word	0x000fffff

0800262c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 031f 	and.w	r3, r3, #31
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002656:	4013      	ands	r3, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6093      	str	r3, [r2, #8]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	5fffffc0 	.word	0x5fffffc0

0800266c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	6fffffc0 	.word	0x6fffffc0

080026bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <LL_ADC_Enable+0x24>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	7fffffc0 	.word	0x7fffffc0

0800270c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <LL_ADC_IsEnabled+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_IsEnabled+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <LL_ADC_REG_StartConversion+0x24>)
 8002742:	4013      	ands	r3, r2
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	7fffffc0 	.word	0x7fffffc0

0800275c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b04      	cmp	r3, #4
 800276e:	d101      	bne.n	8002774 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b08      	cmp	r3, #8
 8002794:	d101      	bne.n	800279a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e18e      	b.n	8002ae0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff f9b5 	bl	8001b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff3f 	bl	800266c <LL_ADC_IsDeepPowerDownEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff25 	bl	8002648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff5a 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d113      	bne.n	8002836 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff3e 	bl	8002694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002818:	4b9a      	ldr	r3, [pc, #616]	; (8002a84 <HAL_ADC_Init+0x2dc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	4a9a      	ldr	r2, [pc, #616]	; (8002a88 <HAL_ADC_Init+0x2e0>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002828:	e002      	b.n	8002830 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3b01      	subs	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f9      	bne.n	800282a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff3e 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff78 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 800286c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 8129 	bne.w	8002ace <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8125 	bne.w	8002ace <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800288c:	f043 0202 	orr.w	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff37 	bl	800270c <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d136      	bne.n	8002912 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a78      	ldr	r2, [pc, #480]	; (8002a8c <HAL_ADC_Init+0x2e4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_Init+0x110>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_ADC_Init+0x2e8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d10e      	bne.n	80028d6 <HAL_ADC_Init+0x12e>
 80028b8:	4874      	ldr	r0, [pc, #464]	; (8002a8c <HAL_ADC_Init+0x2e4>)
 80028ba:	f7ff ff27 	bl	800270c <LL_ADC_IsEnabled>
 80028be:	4604      	mov	r4, r0
 80028c0:	4873      	ldr	r0, [pc, #460]	; (8002a90 <HAL_ADC_Init+0x2e8>)
 80028c2:	f7ff ff23 	bl	800270c <LL_ADC_IsEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4323      	orrs	r3, r4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_Init+0x140>
 80028d6:	486f      	ldr	r0, [pc, #444]	; (8002a94 <HAL_ADC_Init+0x2ec>)
 80028d8:	f7ff ff18 	bl	800270c <LL_ADC_IsEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a66      	ldr	r2, [pc, #408]	; (8002a8c <HAL_ADC_Init+0x2e4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_ADC_Init+0x158>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_ADC_Init+0x2e8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_Init+0x15c>
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_ADC_Init+0x2f0>)
 8002902:	e000      	b.n	8002906 <HAL_ADC_Init+0x15e>
 8002904:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_ADC_Init+0x2f4>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7ff fd6f 	bl	80023f0 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002912:	f7ff fd4b 	bl	80023ac <HAL_GetREVID>
 8002916:	4602      	mov	r2, r0
 8002918:	f241 0303 	movw	r3, #4099	; 0x1003
 800291c:	429a      	cmp	r2, r3
 800291e:	d914      	bls.n	800294a <HAL_ADC_Init+0x1a2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b10      	cmp	r3, #16
 8002926:	d110      	bne.n	800294a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7d5b      	ldrb	r3, [r3, #21]
 800292c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002932:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002938:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7f1b      	ldrb	r3, [r3, #28]
 800293e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002940:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002942:	f043 030c 	orr.w	r3, r3, #12
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e00d      	b.n	8002966 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7d5b      	ldrb	r3, [r3, #21]
 800294e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002954:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800295a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
 8002960:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7f1b      	ldrb	r3, [r3, #28]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d106      	bne.n	800297c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	3b01      	subs	r3, #1
 8002974:	045b      	lsls	r3, r3, #17
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_ADC_Init+0x2f8>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fed3 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 80029b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fee0 	bl	8002782 <LL_ADC_INJ_IsConversionOngoing>
 80029c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d14a      	bne.n	8002a60 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d147      	bne.n	8002a60 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7d1b      	ldrb	r3, [r3, #20]
 80029d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <HAL_ADC_Init+0x2fc>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	69b9      	ldr	r1, [r7, #24]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d11b      	bne.n	8002a34 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_ADC_Init+0x300>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0411      	lsls	r1, r2, #16
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a24:	430a      	orrs	r2, r1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e007      	b.n	8002a44 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fd52 	bl	8003504 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d121      	bne.n	8002aac <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f023 010f 	bic.w	r1, r3, #15
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a80:	e01c      	b.n	8002abc <HAL_ADC_Init+0x314>
 8002a82:	bf00      	nop
 8002a84:	24000028 	.word	0x24000028
 8002a88:	053e2d63 	.word	0x053e2d63
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022100 	.word	0x40022100
 8002a94:	58026000 	.word	0x58026000
 8002a98:	40022300 	.word	0x40022300
 8002a9c:	58026300 	.word	0x58026300
 8002aa0:	fff0c003 	.word	0xfff0c003
 8002aa4:	ffffbffc 	.word	0xffffbffc
 8002aa8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020f 	bic.w	r2, r2, #15
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f023 0303 	bic.w	r3, r3, #3
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
 8002acc:	e007      	b.n	8002ade <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3724      	adds	r7, #36	; 0x24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a55      	ldr	r2, [pc, #340]	; (8002c50 <HAL_ADC_Start_DMA+0x168>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_Start_DMA+0x20>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <HAL_ADC_Start_DMA+0x16c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_Start_DMA+0x24>
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_ADC_Start_DMA+0x170>)
 8002b0a:	e000      	b.n	8002b0e <HAL_ADC_Start_DMA+0x26>
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_ADC_Start_DMA+0x174>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fd8c 	bl	800262c <LL_ADC_GetMultimode>
 8002b14:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe1e 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 808c 	bne.w	8002c40 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Start_DMA+0x4e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e087      	b.n	8002c46 <HAL_ADC_Start_DMA+0x15e>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d002      	beq.n	8002b50 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d170      	bne.n	8002c32 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fbbf 	bl	80032d4 <ADC_Enable>
 8002b56:	4603      	mov	r3, r0
 8002b58:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d163      	bne.n	8002c28 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b64:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_ADC_Start_DMA+0x178>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a37      	ldr	r2, [pc, #220]	; (8002c54 <HAL_ADC_Start_DMA+0x16c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d002      	beq.n	8002b80 <HAL_ADC_Start_DMA+0x98>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	e000      	b.n	8002b82 <HAL_ADC_Start_DMA+0x9a>
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <HAL_ADC_Start_DMA+0x168>)
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d002      	beq.n	8002b90 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f023 0206 	bic.w	r2, r3, #6
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb4:	e002      	b.n	8002bbc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_ADC_Start_DMA+0x17c>)
 8002bc2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_ADC_Start_DMA+0x180>)
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_ADC_Start_DMA+0x184>)
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	221c      	movs	r2, #28
 8002bda:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0210 	orr.w	r2, r2, #16
 8002bf2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7ff fcb4 	bl	800256c <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3340      	adds	r3, #64	; 0x40
 8002c0e:	4619      	mov	r1, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f001 fada 	bl	80041cc <HAL_DMA_Start_IT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd87 	bl	8002734 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c26:	e00d      	b.n	8002c44 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002c30:	e008      	b.n	8002c44 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c3e:	e001      	b.n	8002c44 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40022100 	.word	0x40022100
 8002c58:	40022300 	.word	0x40022300
 8002c5c:	58026300 	.word	0x58026300
 8002c60:	fffff0fe 	.word	0xfffff0fe
 8002c64:	080033dd 	.word	0x080033dd
 8002c68:	080034b5 	.word	0x080034b5
 8002c6c:	080034d1 	.word	0x080034d1

08002c70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b099      	sub	sp, #100	; 0x64
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a99      	ldr	r2, [pc, #612]	; (8002f2c <HAL_ADC_ConfigChannel+0x280>)
 8002cc6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x2a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e2e6      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5f8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fd3a 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 82cb 	bne.w	8003286 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x62>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2201      	movs	r2, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	e00f      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x82>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2201      	movs	r2, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	69d1      	ldr	r1, [r2, #28]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f7ff fbe6 	bl	800251a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fd02 	bl	800275c <LL_ADC_REG_IsConversionOngoing>
 8002d58:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd0f 	bl	8002782 <LL_ADC_INJ_IsConversionOngoing>
 8002d64:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 80b3 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 80af 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f7ff fc05 	bl	8002592 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <HAL_ADC_ConfigChannel+0x284>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d94:	d10b      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x102>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	e01d      	b.n	8002dea <HAL_ADC_ConfigChannel+0x13e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x128>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	e00a      	b.n	8002dea <HAL_ADC_ConfigChannel+0x13e>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d027      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e02:	f7ff fb29 	bl	8002458 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	7e5b      	ldrb	r3, [r3, #25]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x170>
 8002e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e1a:	e000      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x172>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f7ff fb50 	bl	80024c4 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6919      	ldr	r1, [r3, #16]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	7e1b      	ldrb	r3, [r3, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d102      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x18e>
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	e000      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x190>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f7ff fb28 	bl	8002492 <LL_ADC_SetDataRightShift>
 8002e42:	e047      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	069b      	lsls	r3, r3, #26
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	069b      	lsls	r3, r3, #26
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d107      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fc17 	bl	800270c <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 81d9 	bne.w	8003298 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f7ff fb76 	bl	80025e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <HAL_ADC_ConfigChannel+0x280>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	f040 8101 	bne.w	8003106 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10f      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x288>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e016      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2ae>
 8002f2c:	47ff0000 	.word	0x47ff0000
 8002f30:	5c001000 	.word	0x5c001000
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d064      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x2ce>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f78:	e00e      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x2ec>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x30c>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	e010      	b.n	8002fda <HAL_ADC_ConfigChannel+0x32e>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	ea42 0103 	orr.w	r1, r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x354>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 021f 	and.w	r2, r3, #31
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	051b      	lsls	r3, r3, #20
 8002ffe:	e011      	b.n	8003024 <HAL_ADC_ConfigChannel+0x378>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003024:	430b      	orrs	r3, r1
 8003026:	e069      	b.n	80030fc <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x398>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	3301      	adds	r3, #1
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	e00e      	b.n	8003062 <HAL_ADC_ConfigChannel+0x3b6>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	61fb      	str	r3, [r7, #28]
  return result;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3301      	adds	r3, #1
 800305c:	069b      	lsls	r3, r3, #26
 800305e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x3d6>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	3301      	adds	r3, #1
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	e010      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x3f8>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	617b      	str	r3, [r7, #20]
  return result;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	ea42 0103 	orr.w	r1, r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x424>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ce:	e014      	b.n	80030fa <HAL_ADC_ConfigChannel+0x44e>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	60fb      	str	r3, [r7, #12]
  return result;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	3b1e      	subs	r3, #30
 80030f4:	051b      	lsls	r3, r3, #20
 80030f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fa:	430b      	orrs	r3, r1
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	6892      	ldr	r2, [r2, #8]
 8003100:	4619      	mov	r1, r3
 8003102:	f7ff fa46 	bl	8002592 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f280 80c4 	bge.w	8003298 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_ADC_ConfigChannel+0x600>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x478>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <HAL_ADC_ConfigChannel+0x604>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x47c>
 8003124:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_ADC_ConfigChannel+0x608>)
 8003126:	e000      	b.n	800312a <HAL_ADC_ConfigChannel+0x47e>
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_ADC_ConfigChannel+0x60c>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff f986 	bl	800243c <LL_ADC_GetCommonPathInternalCh>
 8003130:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_ADC_ConfigChannel+0x600>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x49a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_ADC_ConfigChannel+0x604>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10e      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x4b8>
 8003146:	4859      	ldr	r0, [pc, #356]	; (80032ac <HAL_ADC_ConfigChannel+0x600>)
 8003148:	f7ff fae0 	bl	800270c <LL_ADC_IsEnabled>
 800314c:	4604      	mov	r4, r0
 800314e:	4858      	ldr	r0, [pc, #352]	; (80032b0 <HAL_ADC_ConfigChannel+0x604>)
 8003150:	f7ff fadc 	bl	800270c <LL_ADC_IsEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	4323      	orrs	r3, r4
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e008      	b.n	8003176 <HAL_ADC_ConfigChannel+0x4ca>
 8003164:	4855      	ldr	r0, [pc, #340]	; (80032bc <HAL_ADC_ConfigChannel+0x610>)
 8003166:	f7ff fad1 	bl	800270c <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d07b      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a50      	ldr	r2, [pc, #320]	; (80032c0 <HAL_ADC_ConfigChannel+0x614>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d12e      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x536>
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d129      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <HAL_ADC_ConfigChannel+0x610>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d17f      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a43      	ldr	r2, [pc, #268]	; (80032ac <HAL_ADC_ConfigChannel+0x600>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_ADC_ConfigChannel+0x500>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <HAL_ADC_ConfigChannel+0x604>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x504>
 80031ac:	4a41      	ldr	r2, [pc, #260]	; (80032b4 <HAL_ADC_ConfigChannel+0x608>)
 80031ae:	e000      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x506>
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_ADC_ConfigChannel+0x60c>)
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7ff f92b 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80031c0:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_ADC_ConfigChannel+0x618>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <HAL_ADC_ConfigChannel+0x61c>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80031d2:	e002      	b.n	80031da <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f9      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e0:	e05a      	b.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a39      	ldr	r2, [pc, #228]	; (80032cc <HAL_ADC_ConfigChannel+0x620>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d11e      	bne.n	800322a <HAL_ADC_ConfigChannel+0x57e>
 80031ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d119      	bne.n	800322a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_ADC_ConfigChannel+0x610>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d14b      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a29      	ldr	r2, [pc, #164]	; (80032ac <HAL_ADC_ConfigChannel+0x600>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x568>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <HAL_ADC_ConfigChannel+0x604>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x56c>
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_ADC_ConfigChannel+0x608>)
 8003216:	e000      	b.n	800321a <HAL_ADC_ConfigChannel+0x56e>
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_ADC_ConfigChannel+0x60c>)
 800321a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f7ff f8f7 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003228:	e036      	b.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_ADC_ConfigChannel+0x624>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d131      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
 8003234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d12c      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_ADC_ConfigChannel+0x610>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d127      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_ADC_ConfigChannel+0x600>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_ADC_ConfigChannel+0x5b0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <HAL_ADC_ConfigChannel+0x604>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x5b4>
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_ADC_ConfigChannel+0x608>)
 800325e:	e000      	b.n	8003262 <HAL_ADC_ConfigChannel+0x5b6>
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_ADC_ConfigChannel+0x60c>)
 8003262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f7ff f8d3 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
 8003270:	e012      	b.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003284:	e008      	b.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3764      	adds	r7, #100	; 0x64
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40022100 	.word	0x40022100
 80032b4:	40022300 	.word	0x40022300
 80032b8:	58026300 	.word	0x58026300
 80032bc:	58026000 	.word	0x58026000
 80032c0:	cb840000 	.word	0xcb840000
 80032c4:	24000028 	.word	0x24000028
 80032c8:	053e2d63 	.word	0x053e2d63
 80032cc:	c7520000 	.word	0xc7520000
 80032d0:	cfb80000 	.word	0xcfb80000

080032d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fa13 	bl	800270c <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d167      	bne.n	80033bc <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <ADC_Enable+0xf4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e053      	b.n	80033be <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f9e2 	bl	80026e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003320:	f7ff f816 	bl	8002350 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a28      	ldr	r2, [pc, #160]	; (80033cc <ADC_Enable+0xf8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <ADC_Enable+0x66>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <ADC_Enable+0xfc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <ADC_Enable+0x6a>
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <ADC_Enable+0x100>)
 800333c:	e000      	b.n	8003340 <ADC_Enable+0x6c>
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <ADC_Enable+0x104>)
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f973 	bl	800262c <LL_ADC_GetMultimode>
 8003346:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <ADC_Enable+0xfc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d002      	beq.n	8003358 <ADC_Enable+0x84>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e000      	b.n	800335a <ADC_Enable+0x86>
 8003358:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <ADC_Enable+0xf8>)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4293      	cmp	r3, r2
 8003360:	d025      	beq.n	80033ae <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d129      	bne.n	80033bc <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003368:	e021      	b.n	80033ae <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f9cc 	bl	800270c <LL_ADC_IsEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f9b0 	bl	80026e4 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003384:	f7fe ffe4 	bl	8002350 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d90d      	bls.n	80033ae <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d1d6      	bne.n	800336a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	8000003f 	.word	0x8000003f
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40022100 	.word	0x40022100
 80033d4:	40022300 	.word	0x40022300
 80033d8:	58026300 	.word	0x58026300

080033dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d14b      	bne.n	800348e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d021      	beq.n	8003454 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff f86d 	bl	80024f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d032      	beq.n	8003486 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d12b      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11f      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
 8003452:	e018      	b.n	8003486 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d111      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff fbf2 	bl	8002c70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800348c:	e00e      	b.n	80034ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fbfc 	bl	8002c98 <HAL_ADC_ErrorCallback>
}
 80034a0:	e004      	b.n	80034ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fbde 	bl	8002c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fbce 	bl	8002c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <ADC_ConfigureBoostMode+0x1d0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <ADC_ConfigureBoostMode+0x1c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	; (80036d8 <ADC_ConfigureBoostMode+0x1d4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <ADC_ConfigureBoostMode+0x30>
 8003520:	4b6e      	ldr	r3, [pc, #440]	; (80036dc <ADC_ConfigureBoostMode+0x1d8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e008      	b.n	8003546 <ADC_ConfigureBoostMode+0x42>
 8003534:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <ADC_ConfigureBoostMode+0x1dc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01a      	beq.n	8003580 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800354a:	f003 ff1d 	bl	8007388 <HAL_RCC_GetHCLKFreq>
 800354e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003558:	d006      	beq.n	8003568 <ADC_ConfigureBoostMode+0x64>
 800355a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800355e:	d00b      	beq.n	8003578 <ADC_ConfigureBoostMode+0x74>
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d000      	beq.n	8003568 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003566:	e05d      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	60fb      	str	r3, [r7, #12]
        break;
 8003576:	e055      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	60fb      	str	r3, [r7, #12]
        break;
 800357e:	e051      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003580:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003584:	f004 fe3a 	bl	80081fc <HAL_RCCEx_GetPeriphCLKFreq>
 8003588:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003592:	d02a      	beq.n	80035ea <ADC_ConfigureBoostMode+0xe6>
 8003594:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003598:	d813      	bhi.n	80035c2 <ADC_ConfigureBoostMode+0xbe>
 800359a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800359e:	d024      	beq.n	80035ea <ADC_ConfigureBoostMode+0xe6>
 80035a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035a4:	d806      	bhi.n	80035b4 <ADC_ConfigureBoostMode+0xb0>
 80035a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035aa:	d01e      	beq.n	80035ea <ADC_ConfigureBoostMode+0xe6>
 80035ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035b0:	d01b      	beq.n	80035ea <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80035b2:	e037      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80035b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b8:	d017      	beq.n	80035ea <ADC_ConfigureBoostMode+0xe6>
 80035ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035be:	d014      	beq.n	80035ea <ADC_ConfigureBoostMode+0xe6>
        break;
 80035c0:	e030      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80035c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035c6:	d021      	beq.n	800360c <ADC_ConfigureBoostMode+0x108>
 80035c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035cc:	d806      	bhi.n	80035dc <ADC_ConfigureBoostMode+0xd8>
 80035ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035d2:	d013      	beq.n	80035fc <ADC_ConfigureBoostMode+0xf8>
 80035d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d8:	d014      	beq.n	8003604 <ADC_ConfigureBoostMode+0x100>
        break;
 80035da:	e023      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80035dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035e0:	d018      	beq.n	8003614 <ADC_ConfigureBoostMode+0x110>
 80035e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035e6:	d019      	beq.n	800361c <ADC_ConfigureBoostMode+0x118>
        break;
 80035e8:	e01c      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	60fb      	str	r3, [r7, #12]
        break;
 80035fa:	e013      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
      break;
 8003602:	e00f      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	60fb      	str	r3, [r7, #12]
        break;
 800360a:	e00b      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	60fb      	str	r3, [r7, #12]
        break;
 8003612:	e007      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	09db      	lsrs	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
        break;
 800361a:	e003      	b.n	8003624 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	60fb      	str	r3, [r7, #12]
        break;
 8003622:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003624:	f7fe fec2 	bl	80023ac <HAL_GetREVID>
 8003628:	4602      	mov	r2, r0
 800362a:	f241 0303 	movw	r3, #4099	; 0x1003
 800362e:	429a      	cmp	r2, r3
 8003630:	d815      	bhi.n	800365e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <ADC_ConfigureBoostMode+0x1e0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d908      	bls.n	800364c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003648:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800364a:	e03e      	b.n	80036ca <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	e035      	b.n	80036ca <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <ADC_ConfigureBoostMode+0x1e4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d808      	bhi.n	800367e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	e025      	b.n	80036ca <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <ADC_ConfigureBoostMode+0x1e8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d80a      	bhi.n	800369c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003698:	609a      	str	r2, [r3, #8]
}
 800369a:	e016      	b.n	80036ca <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <ADC_ConfigureBoostMode+0x1ec>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d80a      	bhi.n	80036ba <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	e007      	b.n	80036ca <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036c8:	609a      	str	r2, [r3, #8]
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40022100 	.word	0x40022100
 80036dc:	40022300 	.word	0x40022300
 80036e0:	58026300 	.word	0x58026300
 80036e4:	01312d00 	.word	0x01312d00
 80036e8:	005f5e10 	.word	0x005f5e10
 80036ec:	00bebc20 	.word	0x00bebc20
 80036f0:	017d7840 	.word	0x017d7840

080036f4 <LL_ADC_IsEnabled>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <LL_ADC_IsEnabled+0x18>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <LL_ADC_IsEnabled+0x1a>
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_ADC_REG_IsConversionOngoing>:
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d101      	bne.n	8003732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b09f      	sub	sp, #124	; 0x7c
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800375a:	2302      	movs	r3, #2
 800375c:	e0ba      	b.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d102      	bne.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003770:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	e001      	b.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e09d      	b.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ffbd 	bl	800371a <LL_ADC_REG_IsConversionOngoing>
 80037a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ffb7 	bl	800371a <LL_ADC_REG_IsConversionOngoing>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d17f      	bne.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d17c      	bne.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a47      	ldr	r2, [pc, #284]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a46      	ldr	r2, [pc, #280]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80037cc:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037ce:	e000      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d039      	beq.n	8003850 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80037dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a38      	ldr	r2, [pc, #224]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10e      	bne.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003802:	4836      	ldr	r0, [pc, #216]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003804:	f7ff ff76 	bl	80036f4 <LL_ADC_IsEnabled>
 8003808:	4604      	mov	r4, r0
 800380a:	4835      	ldr	r0, [pc, #212]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800380c:	f7ff ff72 	bl	80036f4 <LL_ADC_IsEnabled>
 8003810:	4603      	mov	r3, r0
 8003812:	4323      	orrs	r3, r4
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e008      	b.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003820:	4832      	ldr	r0, [pc, #200]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003822:	f7ff ff67 	bl	80036f4 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d047      	beq.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800383c:	4013      	ands	r3, r2
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	6811      	ldr	r1, [r2, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	6892      	ldr	r2, [r2, #8]
 8003846:	430a      	orrs	r2, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800384e:	e03a      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d10e      	bne.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003870:	481a      	ldr	r0, [pc, #104]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003872:	f7ff ff3f 	bl	80036f4 <LL_ADC_IsEnabled>
 8003876:	4604      	mov	r4, r0
 8003878:	4819      	ldr	r0, [pc, #100]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800387a:	f7ff ff3b 	bl	80036f4 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	4323      	orrs	r3, r4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	e008      	b.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800388e:	4817      	ldr	r0, [pc, #92]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003890:	f7ff ff30 	bl	80036f4 <LL_ADC_IsEnabled>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038b0:	e009      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038c4:	e000      	b.n	80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	377c      	adds	r7, #124	; 0x7c
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40022100 	.word	0x40022100
 80038e4:	40022300 	.word	0x40022300
 80038e8:	58026300 	.word	0x58026300
 80038ec:	58026000 	.word	0x58026000
 80038f0:	fffff0e0 	.word	0xfffff0e0

080038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <__NVIC_SetPriorityGrouping+0x40>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 800391e:	4313      	orrs	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <__NVIC_SetPriorityGrouping+0x40>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00
 8003938:	05fa0000 	.word	0x05fa0000

0800393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <__NVIC_GetPriorityGrouping+0x18>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	f003 0307 	and.w	r3, r3, #7
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003966:	2b00      	cmp	r3, #0
 8003968:	db0b      	blt.n	8003982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	f003 021f 	and.w	r2, r3, #31
 8003970:	4907      	ldr	r1, [pc, #28]	; (8003990 <__NVIC_EnableIRQ+0x38>)
 8003972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2001      	movs	r0, #1
 800397a:	fa00 f202 	lsl.w	r2, r0, r2
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a60:	d301      	bcc.n	8003a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00f      	b.n	8003a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <SysTick_Config+0x40>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6e:	210f      	movs	r1, #15
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	f7ff ff8e 	bl	8003994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <SysTick_Config+0x40>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <SysTick_Config+0x40>)
 8003a80:	2207      	movs	r2, #7
 8003a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	e000e010 	.word	0xe000e010

08003a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff29 	bl	80038f4 <__NVIC_SetPriorityGrouping>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab8:	f7ff ff40 	bl	800393c <__NVIC_GetPriorityGrouping>
 8003abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff90 	bl	80039e8 <NVIC_EncodePriority>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5f 	bl	8003994 <__NVIC_SetPriority>
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff33 	bl	8003958 <__NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffa4 	bl	8003a50 <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7fe fc18 	bl	8002350 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e316      	b.n	800415a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a66      	ldr	r2, [pc, #408]	; (8003ccc <HAL_DMA_Init+0x1b8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a65      	ldr	r2, [pc, #404]	; (8003cd0 <HAL_DMA_Init+0x1bc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <HAL_DMA_Init+0x1c0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a62      	ldr	r2, [pc, #392]	; (8003cd8 <HAL_DMA_Init+0x1c4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a60      	ldr	r2, [pc, #384]	; (8003cdc <HAL_DMA_Init+0x1c8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5f      	ldr	r2, [pc, #380]	; (8003ce0 <HAL_DMA_Init+0x1cc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5d      	ldr	r2, [pc, #372]	; (8003ce4 <HAL_DMA_Init+0x1d0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <HAL_DMA_Init+0x1d4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5a      	ldr	r2, [pc, #360]	; (8003cec <HAL_DMA_Init+0x1d8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a59      	ldr	r2, [pc, #356]	; (8003cf0 <HAL_DMA_Init+0x1dc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a57      	ldr	r2, [pc, #348]	; (8003cf4 <HAL_DMA_Init+0x1e0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a56      	ldr	r2, [pc, #344]	; (8003cf8 <HAL_DMA_Init+0x1e4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a54      	ldr	r2, [pc, #336]	; (8003cfc <HAL_DMA_Init+0x1e8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a53      	ldr	r2, [pc, #332]	; (8003d00 <HAL_DMA_Init+0x1ec>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a51      	ldr	r2, [pc, #324]	; (8003d04 <HAL_DMA_Init+0x1f0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_Init+0xb8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a50      	ldr	r2, [pc, #320]	; (8003d08 <HAL_DMA_Init+0x1f4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_DMA_Init+0xbc>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_DMA_Init+0xbe>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 813b 	beq.w	8003e4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <HAL_DMA_Init+0x1b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d04a      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a36      	ldr	r2, [pc, #216]	; (8003cd0 <HAL_DMA_Init+0x1bc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d045      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a34      	ldr	r2, [pc, #208]	; (8003cd4 <HAL_DMA_Init+0x1c0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d040      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a33      	ldr	r2, [pc, #204]	; (8003cd8 <HAL_DMA_Init+0x1c4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d03b      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a31      	ldr	r2, [pc, #196]	; (8003cdc <HAL_DMA_Init+0x1c8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d036      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a30      	ldr	r2, [pc, #192]	; (8003ce0 <HAL_DMA_Init+0x1cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <HAL_DMA_Init+0x1d0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02c      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <HAL_DMA_Init+0x1d4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d027      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <HAL_DMA_Init+0x1d8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d022      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <HAL_DMA_Init+0x1dc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d01d      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_DMA_Init+0x1e0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d018      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <HAL_DMA_Init+0x1e4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d013      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <HAL_DMA_Init+0x1e8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_DMA_Init+0x1ec>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d009      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <HAL_DMA_Init+0x1f0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_DMA_Init+0x174>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <HAL_DMA_Init+0x1f4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d108      	bne.n	8003c9a <HAL_DMA_Init+0x186>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e007      	b.n	8003caa <HAL_DMA_Init+0x196>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003caa:	e02f      	b.n	8003d0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cac:	f7fe fb50 	bl	8002350 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d928      	bls.n	8003d0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e246      	b.n	800415a <HAL_DMA_Init+0x646>
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1c8      	bne.n	8003cac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4b83      	ldr	r3, [pc, #524]	; (8003f34 <HAL_DMA_Init+0x420>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d107      	bne.n	8003d70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003d70:	4b71      	ldr	r3, [pc, #452]	; (8003f38 <HAL_DMA_Init+0x424>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b71      	ldr	r3, [pc, #452]	; (8003f3c <HAL_DMA_Init+0x428>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7c:	d328      	bcc.n	8003dd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b28      	cmp	r3, #40	; 0x28
 8003d84:	d903      	bls.n	8003d8e <HAL_DMA_Init+0x27a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d8c:	d917      	bls.n	8003dbe <HAL_DMA_Init+0x2aa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b3e      	cmp	r3, #62	; 0x3e
 8003d94:	d903      	bls.n	8003d9e <HAL_DMA_Init+0x28a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b42      	cmp	r3, #66	; 0x42
 8003d9c:	d90f      	bls.n	8003dbe <HAL_DMA_Init+0x2aa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b46      	cmp	r3, #70	; 0x46
 8003da4:	d903      	bls.n	8003dae <HAL_DMA_Init+0x29a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b48      	cmp	r3, #72	; 0x48
 8003dac:	d907      	bls.n	8003dbe <HAL_DMA_Init+0x2aa>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b4e      	cmp	r3, #78	; 0x4e
 8003db4:	d905      	bls.n	8003dc2 <HAL_DMA_Init+0x2ae>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b52      	cmp	r3, #82	; 0x52
 8003dbc:	d801      	bhi.n	8003dc2 <HAL_DMA_Init+0x2ae>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_Init+0x2b0>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d117      	bne.n	8003e2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f002 f813 	bl	8005e38 <DMA_CheckFifoParam>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e197      	b.n	800415a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f001 ff4e 	bl	8005cd4 <DMA_CalcBaseAndBitshift>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	223f      	movs	r2, #63	; 0x3f
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	e0cd      	b.n	8003fea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <HAL_DMA_Init+0x42c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_DMA_Init+0x430>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01d      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a38      	ldr	r2, [pc, #224]	; (8003f48 <HAL_DMA_Init+0x434>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <HAL_DMA_Init+0x438>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a35      	ldr	r2, [pc, #212]	; (8003f50 <HAL_DMA_Init+0x43c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <HAL_DMA_Init+0x440>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a32      	ldr	r2, [pc, #200]	; (8003f58 <HAL_DMA_Init+0x444>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_DMA_Init+0x38a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_DMA_Init+0x448>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DMA_Init+0x38e>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_DMA_Init+0x390>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8097 	beq.w	8003fd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <HAL_DMA_Init+0x42c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d021      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <HAL_DMA_Init+0x430>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01c      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <HAL_DMA_Init+0x434>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d017      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <HAL_DMA_Init+0x438>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d012      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_DMA_Init+0x43c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00d      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_DMA_Init+0x440>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d008      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <HAL_DMA_Init+0x444>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <HAL_DMA_Init+0x3e4>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_DMA_Init+0x448>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_DMA_Init+0x44c>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d020      	beq.n	8003f64 <HAL_DMA_Init+0x450>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b80      	cmp	r3, #128	; 0x80
 8003f28:	d102      	bne.n	8003f30 <HAL_DMA_Init+0x41c>
 8003f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f2e:	e01a      	b.n	8003f66 <HAL_DMA_Init+0x452>
 8003f30:	2300      	movs	r3, #0
 8003f32:	e018      	b.n	8003f66 <HAL_DMA_Init+0x452>
 8003f34:	fe10803f 	.word	0xfe10803f
 8003f38:	5c001000 	.word	0x5c001000
 8003f3c:	ffff0000 	.word	0xffff0000
 8003f40:	58025408 	.word	0x58025408
 8003f44:	5802541c 	.word	0x5802541c
 8003f48:	58025430 	.word	0x58025430
 8003f4c:	58025444 	.word	0x58025444
 8003f50:	58025458 	.word	0x58025458
 8003f54:	5802546c 	.word	0x5802546c
 8003f58:	58025480 	.word	0x58025480
 8003f5c:	58025494 	.word	0x58025494
 8003f60:	fffe000f 	.word	0xfffe000f
 8003f64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68d2      	ldr	r2, [r2, #12]
 8003f6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b6e      	ldr	r3, [pc, #440]	; (8004164 <HAL_DMA_Init+0x650>)
 8003fac:	4413      	add	r3, r2
 8003fae:	4a6e      	ldr	r2, [pc, #440]	; (8004168 <HAL_DMA_Init+0x654>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	009a      	lsls	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f001 fe89 	bl	8005cd4 <DMA_CalcBaseAndBitshift>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2201      	movs	r2, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	e008      	b.n	8003fea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0b7      	b.n	800415a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5f      	ldr	r2, [pc, #380]	; (800416c <HAL_DMA_Init+0x658>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d072      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5d      	ldr	r2, [pc, #372]	; (8004170 <HAL_DMA_Init+0x65c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d06d      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5c      	ldr	r2, [pc, #368]	; (8004174 <HAL_DMA_Init+0x660>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d068      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5a      	ldr	r2, [pc, #360]	; (8004178 <HAL_DMA_Init+0x664>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d063      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a59      	ldr	r2, [pc, #356]	; (800417c <HAL_DMA_Init+0x668>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d05e      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a57      	ldr	r2, [pc, #348]	; (8004180 <HAL_DMA_Init+0x66c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d059      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a56      	ldr	r2, [pc, #344]	; (8004184 <HAL_DMA_Init+0x670>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d054      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a54      	ldr	r2, [pc, #336]	; (8004188 <HAL_DMA_Init+0x674>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04f      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a53      	ldr	r2, [pc, #332]	; (800418c <HAL_DMA_Init+0x678>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d04a      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a51      	ldr	r2, [pc, #324]	; (8004190 <HAL_DMA_Init+0x67c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d045      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a50      	ldr	r2, [pc, #320]	; (8004194 <HAL_DMA_Init+0x680>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d040      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a4e      	ldr	r2, [pc, #312]	; (8004198 <HAL_DMA_Init+0x684>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d03b      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a4d      	ldr	r2, [pc, #308]	; (800419c <HAL_DMA_Init+0x688>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d036      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a4b      	ldr	r2, [pc, #300]	; (80041a0 <HAL_DMA_Init+0x68c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a4a      	ldr	r2, [pc, #296]	; (80041a4 <HAL_DMA_Init+0x690>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d02c      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a48      	ldr	r2, [pc, #288]	; (80041a8 <HAL_DMA_Init+0x694>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d027      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a47      	ldr	r2, [pc, #284]	; (80041ac <HAL_DMA_Init+0x698>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <HAL_DMA_Init+0x69c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a44      	ldr	r2, [pc, #272]	; (80041b4 <HAL_DMA_Init+0x6a0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a42      	ldr	r2, [pc, #264]	; (80041b8 <HAL_DMA_Init+0x6a4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a41      	ldr	r2, [pc, #260]	; (80041bc <HAL_DMA_Init+0x6a8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3f      	ldr	r2, [pc, #252]	; (80041c0 <HAL_DMA_Init+0x6ac>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3e      	ldr	r2, [pc, #248]	; (80041c4 <HAL_DMA_Init+0x6b0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_DMA_Init+0x5c6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <HAL_DMA_Init+0x6b4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <HAL_DMA_Init+0x5ca>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_DMA_Init+0x5cc>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d032      	beq.n	800414a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 ff23 	bl	8005f30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d102      	bne.n	80040f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800410c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <HAL_DMA_Init+0x624>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b08      	cmp	r3, #8
 800411c:	d80c      	bhi.n	8004138 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f001 ffa0 	bl	8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e008      	b.n	800414a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	a7fdabf8 	.word	0xa7fdabf8
 8004168:	cccccccd 	.word	0xcccccccd
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
 80041ac:	58025408 	.word	0x58025408
 80041b0:	5802541c 	.word	0x5802541c
 80041b4:	58025430 	.word	0x58025430
 80041b8:	58025444 	.word	0x58025444
 80041bc:	58025458 	.word	0x58025458
 80041c0:	5802546c 	.word	0x5802546c
 80041c4:	58025480 	.word	0x58025480
 80041c8:	58025494 	.word	0x58025494

080041cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e226      	b.n	8004636 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_Start_IT+0x2a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e21f      	b.n	8004636 <HAL_DMA_Start_IT+0x46a>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	f040 820a 	bne.w	8004620 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a68      	ldr	r2, [pc, #416]	; (80043c0 <HAL_DMA_Start_IT+0x1f4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d04a      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a66      	ldr	r2, [pc, #408]	; (80043c4 <HAL_DMA_Start_IT+0x1f8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d045      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a65      	ldr	r2, [pc, #404]	; (80043c8 <HAL_DMA_Start_IT+0x1fc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d040      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a63      	ldr	r2, [pc, #396]	; (80043cc <HAL_DMA_Start_IT+0x200>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d03b      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a62      	ldr	r2, [pc, #392]	; (80043d0 <HAL_DMA_Start_IT+0x204>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d036      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a60      	ldr	r2, [pc, #384]	; (80043d4 <HAL_DMA_Start_IT+0x208>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d031      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <HAL_DMA_Start_IT+0x20c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d02c      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <HAL_DMA_Start_IT+0x210>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d027      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5c      	ldr	r2, [pc, #368]	; (80043e0 <HAL_DMA_Start_IT+0x214>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d022      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a5a      	ldr	r2, [pc, #360]	; (80043e4 <HAL_DMA_Start_IT+0x218>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a59      	ldr	r2, [pc, #356]	; (80043e8 <HAL_DMA_Start_IT+0x21c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d018      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a57      	ldr	r2, [pc, #348]	; (80043ec <HAL_DMA_Start_IT+0x220>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a56      	ldr	r2, [pc, #344]	; (80043f0 <HAL_DMA_Start_IT+0x224>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a54      	ldr	r2, [pc, #336]	; (80043f4 <HAL_DMA_Start_IT+0x228>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a53      	ldr	r2, [pc, #332]	; (80043f8 <HAL_DMA_Start_IT+0x22c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_DMA_Start_IT+0xee>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a51      	ldr	r2, [pc, #324]	; (80043fc <HAL_DMA_Start_IT+0x230>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d108      	bne.n	80042cc <HAL_DMA_Start_IT+0x100>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e007      	b.n	80042dc <HAL_DMA_Start_IT+0x110>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 fb4a 	bl	800597c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <HAL_DMA_Start_IT+0x1f4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d04a      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <HAL_DMA_Start_IT+0x1f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d045      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <HAL_DMA_Start_IT+0x1fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d040      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a30      	ldr	r2, [pc, #192]	; (80043cc <HAL_DMA_Start_IT+0x200>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d03b      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2e      	ldr	r2, [pc, #184]	; (80043d0 <HAL_DMA_Start_IT+0x204>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d036      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <HAL_DMA_Start_IT+0x208>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d031      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <HAL_DMA_Start_IT+0x20c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02c      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <HAL_DMA_Start_IT+0x210>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <HAL_DMA_Start_IT+0x214>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <HAL_DMA_Start_IT+0x218>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <HAL_DMA_Start_IT+0x21c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a24      	ldr	r2, [pc, #144]	; (80043ec <HAL_DMA_Start_IT+0x220>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <HAL_DMA_Start_IT+0x224>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_DMA_Start_IT+0x228>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_DMA_Start_IT+0x22c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_DMA_Start_IT+0x1bc>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <HAL_DMA_Start_IT+0x230>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <HAL_DMA_Start_IT+0x1c0>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_DMA_Start_IT+0x1c2>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 021e 	bic.w	r2, r3, #30
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0216 	orr.w	r2, r2, #22
 80043a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d03e      	beq.n	800442c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0208 	orr.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e035      	b.n	800442c <HAL_DMA_Start_IT+0x260>
 80043c0:	40020010 	.word	0x40020010
 80043c4:	40020028 	.word	0x40020028
 80043c8:	40020040 	.word	0x40020040
 80043cc:	40020058 	.word	0x40020058
 80043d0:	40020070 	.word	0x40020070
 80043d4:	40020088 	.word	0x40020088
 80043d8:	400200a0 	.word	0x400200a0
 80043dc:	400200b8 	.word	0x400200b8
 80043e0:	40020410 	.word	0x40020410
 80043e4:	40020428 	.word	0x40020428
 80043e8:	40020440 	.word	0x40020440
 80043ec:	40020458 	.word	0x40020458
 80043f0:	40020470 	.word	0x40020470
 80043f4:	40020488 	.word	0x40020488
 80043f8:	400204a0 	.word	0x400204a0
 80043fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 020e 	bic.w	r2, r3, #14
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 020a 	orr.w	r2, r2, #10
 8004412:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0204 	orr.w	r2, r2, #4
 800442a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a83      	ldr	r2, [pc, #524]	; (8004640 <HAL_DMA_Start_IT+0x474>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d072      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a82      	ldr	r2, [pc, #520]	; (8004644 <HAL_DMA_Start_IT+0x478>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d06d      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a80      	ldr	r2, [pc, #512]	; (8004648 <HAL_DMA_Start_IT+0x47c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d068      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a7f      	ldr	r2, [pc, #508]	; (800464c <HAL_DMA_Start_IT+0x480>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d063      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7d      	ldr	r2, [pc, #500]	; (8004650 <HAL_DMA_Start_IT+0x484>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d05e      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7c      	ldr	r2, [pc, #496]	; (8004654 <HAL_DMA_Start_IT+0x488>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d059      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a7a      	ldr	r2, [pc, #488]	; (8004658 <HAL_DMA_Start_IT+0x48c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d054      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a79      	ldr	r2, [pc, #484]	; (800465c <HAL_DMA_Start_IT+0x490>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04f      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <HAL_DMA_Start_IT+0x494>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a76      	ldr	r2, [pc, #472]	; (8004664 <HAL_DMA_Start_IT+0x498>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a74      	ldr	r2, [pc, #464]	; (8004668 <HAL_DMA_Start_IT+0x49c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a73      	ldr	r2, [pc, #460]	; (800466c <HAL_DMA_Start_IT+0x4a0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a71      	ldr	r2, [pc, #452]	; (8004670 <HAL_DMA_Start_IT+0x4a4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a70      	ldr	r2, [pc, #448]	; (8004674 <HAL_DMA_Start_IT+0x4a8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6e      	ldr	r2, [pc, #440]	; (8004678 <HAL_DMA_Start_IT+0x4ac>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6d      	ldr	r2, [pc, #436]	; (800467c <HAL_DMA_Start_IT+0x4b0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6b      	ldr	r2, [pc, #428]	; (8004680 <HAL_DMA_Start_IT+0x4b4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6a      	ldr	r2, [pc, #424]	; (8004684 <HAL_DMA_Start_IT+0x4b8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a68      	ldr	r2, [pc, #416]	; (8004688 <HAL_DMA_Start_IT+0x4bc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a67      	ldr	r2, [pc, #412]	; (800468c <HAL_DMA_Start_IT+0x4c0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a65      	ldr	r2, [pc, #404]	; (8004690 <HAL_DMA_Start_IT+0x4c4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a64      	ldr	r2, [pc, #400]	; (8004694 <HAL_DMA_Start_IT+0x4c8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a62      	ldr	r2, [pc, #392]	; (8004698 <HAL_DMA_Start_IT+0x4cc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_DMA_Start_IT+0x350>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_DMA_Start_IT+0x4d0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_DMA_Start_IT+0x354>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_DMA_Start_IT+0x356>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01a      	beq.n	800455c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004542:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a37      	ldr	r2, [pc, #220]	; (8004640 <HAL_DMA_Start_IT+0x474>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d04a      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a36      	ldr	r2, [pc, #216]	; (8004644 <HAL_DMA_Start_IT+0x478>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d045      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_DMA_Start_IT+0x47c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d040      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a33      	ldr	r2, [pc, #204]	; (800464c <HAL_DMA_Start_IT+0x480>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d03b      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a31      	ldr	r2, [pc, #196]	; (8004650 <HAL_DMA_Start_IT+0x484>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d036      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <HAL_DMA_Start_IT+0x488>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d031      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <HAL_DMA_Start_IT+0x48c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d02c      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_DMA_Start_IT+0x490>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d027      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <HAL_DMA_Start_IT+0x494>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d022      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <HAL_DMA_Start_IT+0x498>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d01d      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_DMA_Start_IT+0x49c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d018      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a27      	ldr	r2, [pc, #156]	; (800466c <HAL_DMA_Start_IT+0x4a0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <HAL_DMA_Start_IT+0x4a4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00e      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a24      	ldr	r2, [pc, #144]	; (8004674 <HAL_DMA_Start_IT+0x4a8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_DMA_Start_IT+0x4ac>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_DMA_Start_IT+0x430>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_DMA_Start_IT+0x4b0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d108      	bne.n	800460e <HAL_DMA_Start_IT+0x442>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e012      	b.n	8004634 <HAL_DMA_Start_IT+0x468>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e009      	b.n	8004634 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	58025408 	.word	0x58025408
 8004684:	5802541c 	.word	0x5802541c
 8004688:	58025430 	.word	0x58025430
 800468c:	58025444 	.word	0x58025444
 8004690:	58025458 	.word	0x58025458
 8004694:	5802546c 	.word	0x5802546c
 8004698:	58025480 	.word	0x58025480
 800469c:	58025494 	.word	0x58025494

080046a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e205      	b.n	8004abe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e1fa      	b.n	8004abe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a8c      	ldr	r2, [pc, #560]	; (8004900 <HAL_DMA_Abort_IT+0x260>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d04a      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a8b      	ldr	r2, [pc, #556]	; (8004904 <HAL_DMA_Abort_IT+0x264>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d045      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a89      	ldr	r2, [pc, #548]	; (8004908 <HAL_DMA_Abort_IT+0x268>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d040      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a88      	ldr	r2, [pc, #544]	; (800490c <HAL_DMA_Abort_IT+0x26c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d03b      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a86      	ldr	r2, [pc, #536]	; (8004910 <HAL_DMA_Abort_IT+0x270>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d036      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a85      	ldr	r2, [pc, #532]	; (8004914 <HAL_DMA_Abort_IT+0x274>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d031      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a83      	ldr	r2, [pc, #524]	; (8004918 <HAL_DMA_Abort_IT+0x278>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d02c      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a82      	ldr	r2, [pc, #520]	; (800491c <HAL_DMA_Abort_IT+0x27c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d027      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a80      	ldr	r2, [pc, #512]	; (8004920 <HAL_DMA_Abort_IT+0x280>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7f      	ldr	r2, [pc, #508]	; (8004924 <HAL_DMA_Abort_IT+0x284>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01d      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a7d      	ldr	r2, [pc, #500]	; (8004928 <HAL_DMA_Abort_IT+0x288>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7c      	ldr	r2, [pc, #496]	; (800492c <HAL_DMA_Abort_IT+0x28c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a7a      	ldr	r2, [pc, #488]	; (8004930 <HAL_DMA_Abort_IT+0x290>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a79      	ldr	r2, [pc, #484]	; (8004934 <HAL_DMA_Abort_IT+0x294>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a77      	ldr	r2, [pc, #476]	; (8004938 <HAL_DMA_Abort_IT+0x298>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a76      	ldr	r2, [pc, #472]	; (800493c <HAL_DMA_Abort_IT+0x29c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_DMA_Abort_IT+0xcc>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_DMA_Abort_IT+0xce>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d065      	beq.n	800483e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a60      	ldr	r2, [pc, #384]	; (8004900 <HAL_DMA_Abort_IT+0x260>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d04a      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a5e      	ldr	r2, [pc, #376]	; (8004904 <HAL_DMA_Abort_IT+0x264>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d045      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <HAL_DMA_Abort_IT+0x268>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d040      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5b      	ldr	r2, [pc, #364]	; (800490c <HAL_DMA_Abort_IT+0x26c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5a      	ldr	r2, [pc, #360]	; (8004910 <HAL_DMA_Abort_IT+0x270>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d036      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_DMA_Abort_IT+0x274>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d031      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_DMA_Abort_IT+0x278>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d02c      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a55      	ldr	r2, [pc, #340]	; (800491c <HAL_DMA_Abort_IT+0x27c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d027      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_DMA_Abort_IT+0x280>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a52      	ldr	r2, [pc, #328]	; (8004924 <HAL_DMA_Abort_IT+0x284>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a51      	ldr	r2, [pc, #324]	; (8004928 <HAL_DMA_Abort_IT+0x288>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a4f      	ldr	r2, [pc, #316]	; (800492c <HAL_DMA_Abort_IT+0x28c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a4e      	ldr	r2, [pc, #312]	; (8004930 <HAL_DMA_Abort_IT+0x290>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a4c      	ldr	r2, [pc, #304]	; (8004934 <HAL_DMA_Abort_IT+0x294>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a4b      	ldr	r2, [pc, #300]	; (8004938 <HAL_DMA_Abort_IT+0x298>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_DMA_Abort_IT+0x17a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a49      	ldr	r2, [pc, #292]	; (800493c <HAL_DMA_Abort_IT+0x29c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d108      	bne.n	800482c <HAL_DMA_Abort_IT+0x18c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e147      	b.n	8004abc <HAL_DMA_Abort_IT+0x41c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e13e      	b.n	8004abc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 020e 	bic.w	r2, r2, #14
 800484c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_DMA_Abort_IT+0x260>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a29      	ldr	r2, [pc, #164]	; (8004904 <HAL_DMA_Abort_IT+0x264>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_DMA_Abort_IT+0x268>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <HAL_DMA_Abort_IT+0x26c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a25      	ldr	r2, [pc, #148]	; (8004910 <HAL_DMA_Abort_IT+0x270>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	; (8004914 <HAL_DMA_Abort_IT+0x274>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_DMA_Abort_IT+0x278>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <HAL_DMA_Abort_IT+0x27c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_DMA_Abort_IT+0x280>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <HAL_DMA_Abort_IT+0x284>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_DMA_Abort_IT+0x288>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_DMA_Abort_IT+0x28c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_DMA_Abort_IT+0x290>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_DMA_Abort_IT+0x294>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a16      	ldr	r2, [pc, #88]	; (8004938 <HAL_DMA_Abort_IT+0x298>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_Abort_IT+0x24e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a14      	ldr	r2, [pc, #80]	; (800493c <HAL_DMA_Abort_IT+0x29c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d128      	bne.n	8004940 <HAL_DMA_Abort_IT+0x2a0>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e027      	b.n	8004950 <HAL_DMA_Abort_IT+0x2b0>
 8004900:	40020010 	.word	0x40020010
 8004904:	40020028 	.word	0x40020028
 8004908:	40020040 	.word	0x40020040
 800490c:	40020058 	.word	0x40020058
 8004910:	40020070 	.word	0x40020070
 8004914:	40020088 	.word	0x40020088
 8004918:	400200a0 	.word	0x400200a0
 800491c:	400200b8 	.word	0x400200b8
 8004920:	40020410 	.word	0x40020410
 8004924:	40020428 	.word	0x40020428
 8004928:	40020440 	.word	0x40020440
 800492c:	40020458 	.word	0x40020458
 8004930:	40020470 	.word	0x40020470
 8004934:	40020488 	.word	0x40020488
 8004938:	400204a0 	.word	0x400204a0
 800493c:	400204b8 	.word	0x400204b8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5c      	ldr	r2, [pc, #368]	; (8004ac8 <HAL_DMA_Abort_IT+0x428>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d072      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5b      	ldr	r2, [pc, #364]	; (8004acc <HAL_DMA_Abort_IT+0x42c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d06d      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a59      	ldr	r2, [pc, #356]	; (8004ad0 <HAL_DMA_Abort_IT+0x430>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d068      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a58      	ldr	r2, [pc, #352]	; (8004ad4 <HAL_DMA_Abort_IT+0x434>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d063      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a56      	ldr	r2, [pc, #344]	; (8004ad8 <HAL_DMA_Abort_IT+0x438>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d05e      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a55      	ldr	r2, [pc, #340]	; (8004adc <HAL_DMA_Abort_IT+0x43c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d059      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a53      	ldr	r2, [pc, #332]	; (8004ae0 <HAL_DMA_Abort_IT+0x440>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d054      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a52      	ldr	r2, [pc, #328]	; (8004ae4 <HAL_DMA_Abort_IT+0x444>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04f      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a50      	ldr	r2, [pc, #320]	; (8004ae8 <HAL_DMA_Abort_IT+0x448>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4f      	ldr	r2, [pc, #316]	; (8004aec <HAL_DMA_Abort_IT+0x44c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a4d      	ldr	r2, [pc, #308]	; (8004af0 <HAL_DMA_Abort_IT+0x450>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a4c      	ldr	r2, [pc, #304]	; (8004af4 <HAL_DMA_Abort_IT+0x454>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a4a      	ldr	r2, [pc, #296]	; (8004af8 <HAL_DMA_Abort_IT+0x458>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a49      	ldr	r2, [pc, #292]	; (8004afc <HAL_DMA_Abort_IT+0x45c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a47      	ldr	r2, [pc, #284]	; (8004b00 <HAL_DMA_Abort_IT+0x460>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a46      	ldr	r2, [pc, #280]	; (8004b04 <HAL_DMA_Abort_IT+0x464>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a44      	ldr	r2, [pc, #272]	; (8004b08 <HAL_DMA_Abort_IT+0x468>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a43      	ldr	r2, [pc, #268]	; (8004b0c <HAL_DMA_Abort_IT+0x46c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a41      	ldr	r2, [pc, #260]	; (8004b10 <HAL_DMA_Abort_IT+0x470>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a40      	ldr	r2, [pc, #256]	; (8004b14 <HAL_DMA_Abort_IT+0x474>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a3e      	ldr	r2, [pc, #248]	; (8004b18 <HAL_DMA_Abort_IT+0x478>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <HAL_DMA_Abort_IT+0x47c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a3b      	ldr	r2, [pc, #236]	; (8004b20 <HAL_DMA_Abort_IT+0x480>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x3a0>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <HAL_DMA_Abort_IT+0x484>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_DMA_Abort_IT+0x3a4>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_DMA_Abort_IT+0x3a6>
 8004a44:	2300      	movs	r3, #0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d028      	beq.n	8004a9c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2201      	movs	r2, #1
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40020010 	.word	0x40020010
 8004acc:	40020028 	.word	0x40020028
 8004ad0:	40020040 	.word	0x40020040
 8004ad4:	40020058 	.word	0x40020058
 8004ad8:	40020070 	.word	0x40020070
 8004adc:	40020088 	.word	0x40020088
 8004ae0:	400200a0 	.word	0x400200a0
 8004ae4:	400200b8 	.word	0x400200b8
 8004ae8:	40020410 	.word	0x40020410
 8004aec:	40020428 	.word	0x40020428
 8004af0:	40020440 	.word	0x40020440
 8004af4:	40020458 	.word	0x40020458
 8004af8:	40020470 	.word	0x40020470
 8004afc:	40020488 	.word	0x40020488
 8004b00:	400204a0 	.word	0x400204a0
 8004b04:	400204b8 	.word	0x400204b8
 8004b08:	58025408 	.word	0x58025408
 8004b0c:	5802541c 	.word	0x5802541c
 8004b10:	58025430 	.word	0x58025430
 8004b14:	58025444 	.word	0x58025444
 8004b18:	58025458 	.word	0x58025458
 8004b1c:	5802546c 	.word	0x5802546c
 8004b20:	58025480 	.word	0x58025480
 8004b24:	58025494 	.word	0x58025494

08004b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b34:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <HAL_DMA_IRQHandler+0x1ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <HAL_DMA_IRQHandler+0x1b0>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5f      	ldr	r2, [pc, #380]	; (8004cdc <HAL_DMA_IRQHandler+0x1b4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d04a      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d045      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5c      	ldr	r2, [pc, #368]	; (8004ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d040      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a59      	ldr	r2, [pc, #356]	; (8004cec <HAL_DMA_IRQHandler+0x1c4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d036      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a56      	ldr	r2, [pc, #344]	; (8004cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d02c      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a54      	ldr	r2, [pc, #336]	; (8004cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a53      	ldr	r2, [pc, #332]	; (8004cfc <HAL_DMA_IRQHandler+0x1d4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a51      	ldr	r2, [pc, #324]	; (8004d00 <HAL_DMA_IRQHandler+0x1d8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a50      	ldr	r2, [pc, #320]	; (8004d04 <HAL_DMA_IRQHandler+0x1dc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a4e      	ldr	r2, [pc, #312]	; (8004d08 <HAL_DMA_IRQHandler+0x1e0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4d      	ldr	r2, [pc, #308]	; (8004d0c <HAL_DMA_IRQHandler+0x1e4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <HAL_DMA_IRQHandler+0x1e8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <HAL_DMA_IRQHandler+0x1ec>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a48      	ldr	r2, [pc, #288]	; (8004d18 <HAL_DMA_IRQHandler+0x1f0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_IRQHandler+0xd6>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_DMA_IRQHandler+0xd8>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 842b 	beq.w	800545c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2208      	movs	r2, #8
 8004c10:	409a      	lsls	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80a2 	beq.w	8004d60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2e      	ldr	r2, [pc, #184]	; (8004cdc <HAL_DMA_IRQHandler+0x1b4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <HAL_DMA_IRQHandler+0x1c4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_DMA_IRQHandler+0x1d4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_DMA_IRQHandler+0x1d8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_DMA_IRQHandler+0x1dc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_DMA_IRQHandler+0x1e0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_DMA_IRQHandler+0x1e4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_DMA_IRQHandler+0x1e8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_DMA_IRQHandler+0x1ec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_DMA_IRQHandler+0x1f0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d12f      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x1f4>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e02e      	b.n	8004d30 <HAL_DMA_IRQHandler+0x208>
 8004cd2:	bf00      	nop
 8004cd4:	24000028 	.word	0x24000028
 8004cd8:	1b4e81b5 	.word	0x1b4e81b5
 8004cdc:	40020010 	.word	0x40020010
 8004ce0:	40020028 	.word	0x40020028
 8004ce4:	40020040 	.word	0x40020040
 8004ce8:	40020058 	.word	0x40020058
 8004cec:	40020070 	.word	0x40020070
 8004cf0:	40020088 	.word	0x40020088
 8004cf4:	400200a0 	.word	0x400200a0
 8004cf8:	400200b8 	.word	0x400200b8
 8004cfc:	40020410 	.word	0x40020410
 8004d00:	40020428 	.word	0x40020428
 8004d04:	40020440 	.word	0x40020440
 8004d08:	40020458 	.word	0x40020458
 8004d0c:	40020470 	.word	0x40020470
 8004d10:	40020488 	.word	0x40020488
 8004d14:	400204a0 	.word	0x400204a0
 8004d18:	400204b8 	.word	0x400204b8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf14      	ite	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	2300      	moveq	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d015      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0204 	bic.w	r2, r2, #4
 8004d42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f043 0201 	orr.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06e      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a69      	ldr	r2, [pc, #420]	; (8004f20 <HAL_DMA_IRQHandler+0x3f8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d04a      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a67      	ldr	r2, [pc, #412]	; (8004f24 <HAL_DMA_IRQHandler+0x3fc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d045      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a66      	ldr	r2, [pc, #408]	; (8004f28 <HAL_DMA_IRQHandler+0x400>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d040      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a64      	ldr	r2, [pc, #400]	; (8004f2c <HAL_DMA_IRQHandler+0x404>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03b      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a63      	ldr	r2, [pc, #396]	; (8004f30 <HAL_DMA_IRQHandler+0x408>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d036      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a61      	ldr	r2, [pc, #388]	; (8004f34 <HAL_DMA_IRQHandler+0x40c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d031      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a60      	ldr	r2, [pc, #384]	; (8004f38 <HAL_DMA_IRQHandler+0x410>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d02c      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <HAL_DMA_IRQHandler+0x414>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d027      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5d      	ldr	r2, [pc, #372]	; (8004f40 <HAL_DMA_IRQHandler+0x418>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5b      	ldr	r2, [pc, #364]	; (8004f44 <HAL_DMA_IRQHandler+0x41c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_DMA_IRQHandler+0x420>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a58      	ldr	r2, [pc, #352]	; (8004f4c <HAL_DMA_IRQHandler+0x424>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_DMA_IRQHandler+0x428>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a55      	ldr	r2, [pc, #340]	; (8004f54 <HAL_DMA_IRQHandler+0x42c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_DMA_IRQHandler+0x430>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_DMA_IRQHandler+0x434>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10a      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x304>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e003      	b.n	8004e34 <HAL_DMA_IRQHandler+0x30c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	2201      	movs	r2, #1
 8004e42:	409a      	lsls	r2, r3
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	f043 0202 	orr.w	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 808f 	beq.w	8004f88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <HAL_DMA_IRQHandler+0x3f8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <HAL_DMA_IRQHandler+0x3fc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <HAL_DMA_IRQHandler+0x400>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	; (8004f2c <HAL_DMA_IRQHandler+0x404>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_DMA_IRQHandler+0x408>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <HAL_DMA_IRQHandler+0x40c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <HAL_DMA_IRQHandler+0x410>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <HAL_DMA_IRQHandler+0x414>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_DMA_IRQHandler+0x418>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <HAL_DMA_IRQHandler+0x41c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <HAL_DMA_IRQHandler+0x420>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <HAL_DMA_IRQHandler+0x424>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <HAL_DMA_IRQHandler+0x428>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_DMA_IRQHandler+0x42c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_DMA_IRQHandler+0x430>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <HAL_DMA_IRQHandler+0x434>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d12a      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x438>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e023      	b.n	8004f68 <HAL_DMA_IRQHandler+0x440>
 8004f20:	40020010 	.word	0x40020010
 8004f24:	40020028 	.word	0x40020028
 8004f28:	40020040 	.word	0x40020040
 8004f2c:	40020058 	.word	0x40020058
 8004f30:	40020070 	.word	0x40020070
 8004f34:	40020088 	.word	0x40020088
 8004f38:	400200a0 	.word	0x400200a0
 8004f3c:	400200b8 	.word	0x400200b8
 8004f40:	40020410 	.word	0x40020410
 8004f44:	40020428 	.word	0x40020428
 8004f48:	40020440 	.word	0x40020440
 8004f4c:	40020458 	.word	0x40020458
 8004f50:	40020470 	.word	0x40020470
 8004f54:	40020488 	.word	0x40020488
 8004f58:	400204a0 	.word	0x400204a0
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2204      	movs	r2, #4
 8004f76:	409a      	lsls	r2, r3
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	2210      	movs	r2, #16
 8004f92:	409a      	lsls	r2, r3
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80a6 	beq.w	80050ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a85      	ldr	r2, [pc, #532]	; (80051b8 <HAL_DMA_IRQHandler+0x690>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d04a      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a83      	ldr	r2, [pc, #524]	; (80051bc <HAL_DMA_IRQHandler+0x694>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d045      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a82      	ldr	r2, [pc, #520]	; (80051c0 <HAL_DMA_IRQHandler+0x698>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d040      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a80      	ldr	r2, [pc, #512]	; (80051c4 <HAL_DMA_IRQHandler+0x69c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d03b      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a7f      	ldr	r2, [pc, #508]	; (80051c8 <HAL_DMA_IRQHandler+0x6a0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d036      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7d      	ldr	r2, [pc, #500]	; (80051cc <HAL_DMA_IRQHandler+0x6a4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d031      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7c      	ldr	r2, [pc, #496]	; (80051d0 <HAL_DMA_IRQHandler+0x6a8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d02c      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a7a      	ldr	r2, [pc, #488]	; (80051d4 <HAL_DMA_IRQHandler+0x6ac>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d027      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a79      	ldr	r2, [pc, #484]	; (80051d8 <HAL_DMA_IRQHandler+0x6b0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a77      	ldr	r2, [pc, #476]	; (80051dc <HAL_DMA_IRQHandler+0x6b4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a76      	ldr	r2, [pc, #472]	; (80051e0 <HAL_DMA_IRQHandler+0x6b8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a74      	ldr	r2, [pc, #464]	; (80051e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a73      	ldr	r2, [pc, #460]	; (80051e8 <HAL_DMA_IRQHandler+0x6c0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a71      	ldr	r2, [pc, #452]	; (80051ec <HAL_DMA_IRQHandler+0x6c4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a70      	ldr	r2, [pc, #448]	; (80051f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_DMA_IRQHandler+0x6cc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10a      	bne.n	8005054 <HAL_DMA_IRQHandler+0x52c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e009      	b.n	8005068 <HAL_DMA_IRQHandler+0x540>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf14      	ite	ne
 8005062:	2301      	movne	r3, #1
 8005064:	2300      	moveq	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03e      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2210      	movs	r2, #16
 8005076:	409a      	lsls	r2, r3
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d018      	beq.n	80050bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d024      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
 80050a8:	e01f      	b.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01b      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	e016      	b.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0208 	bic.w	r2, r2, #8
 80050d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2220      	movs	r2, #32
 80050f4:	409a      	lsls	r2, r3
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8110 	beq.w	8005320 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2c      	ldr	r2, [pc, #176]	; (80051b8 <HAL_DMA_IRQHandler+0x690>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_DMA_IRQHandler+0x694>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <HAL_DMA_IRQHandler+0x698>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <HAL_DMA_IRQHandler+0x69c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <HAL_DMA_IRQHandler+0x6a0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a25      	ldr	r2, [pc, #148]	; (80051cc <HAL_DMA_IRQHandler+0x6a4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <HAL_DMA_IRQHandler+0x6a8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <HAL_DMA_IRQHandler+0x6ac>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <HAL_DMA_IRQHandler+0x6b0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <HAL_DMA_IRQHandler+0x6b4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <HAL_DMA_IRQHandler+0x6b8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_DMA_IRQHandler+0x6c0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_DMA_IRQHandler+0x6c4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_DMA_IRQHandler+0x6cc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d12b      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x6d0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	e02a      	b.n	800520c <HAL_DMA_IRQHandler+0x6e4>
 80051b6:	bf00      	nop
 80051b8:	40020010 	.word	0x40020010
 80051bc:	40020028 	.word	0x40020028
 80051c0:	40020040 	.word	0x40020040
 80051c4:	40020058 	.word	0x40020058
 80051c8:	40020070 	.word	0x40020070
 80051cc:	40020088 	.word	0x40020088
 80051d0:	400200a0 	.word	0x400200a0
 80051d4:	400200b8 	.word	0x400200b8
 80051d8:	40020410 	.word	0x40020410
 80051dc:	40020428 	.word	0x40020428
 80051e0:	40020440 	.word	0x40020440
 80051e4:	40020458 	.word	0x40020458
 80051e8:	40020470 	.word	0x40020470
 80051ec:	40020488 	.word	0x40020488
 80051f0:	400204a0 	.word	0x400204a0
 80051f4:	400204b8 	.word	0x400204b8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8087 	beq.w	8005320 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2220      	movs	r2, #32
 800521c:	409a      	lsls	r2, r3
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b04      	cmp	r3, #4
 800522c:	d139      	bne.n	80052a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0216 	bic.w	r2, r2, #22
 800523c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800524c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_DMA_IRQHandler+0x736>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0208 	bic.w	r2, r2, #8
 800526c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	223f      	movs	r2, #63	; 0x3f
 8005278:	409a      	lsls	r2, r3
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 834a 	beq.w	800592c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
          }
          return;
 80052a0:	e344      	b.n	800592c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d018      	beq.n	80052e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
 80052ce:	e027      	b.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d023      	beq.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
 80052e0:	e01e      	b.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0210 	bic.w	r2, r2, #16
 80052fe:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8306 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8088 	beq.w	8005448 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2204      	movs	r2, #4
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a7a      	ldr	r2, [pc, #488]	; (8005530 <HAL_DMA_IRQHandler+0xa08>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d04a      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a79      	ldr	r2, [pc, #484]	; (8005534 <HAL_DMA_IRQHandler+0xa0c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d045      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a77      	ldr	r2, [pc, #476]	; (8005538 <HAL_DMA_IRQHandler+0xa10>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d040      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a76      	ldr	r2, [pc, #472]	; (800553c <HAL_DMA_IRQHandler+0xa14>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d03b      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a74      	ldr	r2, [pc, #464]	; (8005540 <HAL_DMA_IRQHandler+0xa18>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d036      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_DMA_IRQHandler+0xa1c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d031      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a71      	ldr	r2, [pc, #452]	; (8005548 <HAL_DMA_IRQHandler+0xa20>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02c      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a70      	ldr	r2, [pc, #448]	; (800554c <HAL_DMA_IRQHandler+0xa24>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d027      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a6e      	ldr	r2, [pc, #440]	; (8005550 <HAL_DMA_IRQHandler+0xa28>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6d      	ldr	r2, [pc, #436]	; (8005554 <HAL_DMA_IRQHandler+0xa2c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01d      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6b      	ldr	r2, [pc, #428]	; (8005558 <HAL_DMA_IRQHandler+0xa30>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6a      	ldr	r2, [pc, #424]	; (800555c <HAL_DMA_IRQHandler+0xa34>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_DMA_IRQHandler+0xa38>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a67      	ldr	r2, [pc, #412]	; (8005564 <HAL_DMA_IRQHandler+0xa3c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a65      	ldr	r2, [pc, #404]	; (8005568 <HAL_DMA_IRQHandler+0xa40>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a64      	ldr	r2, [pc, #400]	; (800556c <HAL_DMA_IRQHandler+0xa44>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <HAL_DMA_IRQHandler+0x8ca>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e007      	b.n	8005402 <HAL_DMA_IRQHandler+0x8da>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	429a      	cmp	r2, r3
 800540c:	d307      	bcc.n	800541e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f2      	bne.n	8005402 <HAL_DMA_IRQHandler+0x8da>
 800541c:	e000      	b.n	8005420 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800541e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2203      	movs	r2, #3
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800543e:	e003      	b.n	8005448 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8272 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
 800545a:	e26c      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a43      	ldr	r2, [pc, #268]	; (8005570 <HAL_DMA_IRQHandler+0xa48>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a42      	ldr	r2, [pc, #264]	; (8005574 <HAL_DMA_IRQHandler+0xa4c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01d      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a40      	ldr	r2, [pc, #256]	; (8005578 <HAL_DMA_IRQHandler+0xa50>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3f      	ldr	r2, [pc, #252]	; (800557c <HAL_DMA_IRQHandler+0xa54>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3d      	ldr	r2, [pc, #244]	; (8005580 <HAL_DMA_IRQHandler+0xa58>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3c      	ldr	r2, [pc, #240]	; (8005584 <HAL_DMA_IRQHandler+0xa5c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a3a      	ldr	r2, [pc, #232]	; (8005588 <HAL_DMA_IRQHandler+0xa60>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a39      	ldr	r2, [pc, #228]	; (800558c <HAL_DMA_IRQHandler+0xa64>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x988>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <HAL_DMA_IRQHandler+0x98a>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 823f 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2204      	movs	r2, #4
 80054ca:	409a      	lsls	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80cd 	beq.w	8005670 <HAL_DMA_IRQHandler+0xb48>
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80c7 	beq.w	8005670 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2204      	movs	r2, #4
 80054ec:	409a      	lsls	r2, r3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d049      	beq.n	8005590 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8210 	beq.w	8005930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005518:	e20a      	b.n	8005930 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8206 	beq.w	8005930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800552c:	e200      	b.n	8005930 <HAL_DMA_IRQHandler+0xe08>
 800552e:	bf00      	nop
 8005530:	40020010 	.word	0x40020010
 8005534:	40020028 	.word	0x40020028
 8005538:	40020040 	.word	0x40020040
 800553c:	40020058 	.word	0x40020058
 8005540:	40020070 	.word	0x40020070
 8005544:	40020088 	.word	0x40020088
 8005548:	400200a0 	.word	0x400200a0
 800554c:	400200b8 	.word	0x400200b8
 8005550:	40020410 	.word	0x40020410
 8005554:	40020428 	.word	0x40020428
 8005558:	40020440 	.word	0x40020440
 800555c:	40020458 	.word	0x40020458
 8005560:	40020470 	.word	0x40020470
 8005564:	40020488 	.word	0x40020488
 8005568:	400204a0 	.word	0x400204a0
 800556c:	400204b8 	.word	0x400204b8
 8005570:	58025408 	.word	0x58025408
 8005574:	5802541c 	.word	0x5802541c
 8005578:	58025430 	.word	0x58025430
 800557c:	58025444 	.word	0x58025444
 8005580:	58025458 	.word	0x58025458
 8005584:	5802546c 	.word	0x5802546c
 8005588:	58025480 	.word	0x58025480
 800558c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d160      	bne.n	800565c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a8c      	ldr	r2, [pc, #560]	; (80057d0 <HAL_DMA_IRQHandler+0xca8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d04a      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a8a      	ldr	r2, [pc, #552]	; (80057d4 <HAL_DMA_IRQHandler+0xcac>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d045      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a89      	ldr	r2, [pc, #548]	; (80057d8 <HAL_DMA_IRQHandler+0xcb0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d040      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a87      	ldr	r2, [pc, #540]	; (80057dc <HAL_DMA_IRQHandler+0xcb4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d03b      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a86      	ldr	r2, [pc, #536]	; (80057e0 <HAL_DMA_IRQHandler+0xcb8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d036      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a84      	ldr	r2, [pc, #528]	; (80057e4 <HAL_DMA_IRQHandler+0xcbc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d031      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a83      	ldr	r2, [pc, #524]	; (80057e8 <HAL_DMA_IRQHandler+0xcc0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d02c      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a81      	ldr	r2, [pc, #516]	; (80057ec <HAL_DMA_IRQHandler+0xcc4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d027      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a80      	ldr	r2, [pc, #512]	; (80057f0 <HAL_DMA_IRQHandler+0xcc8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d022      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a7e      	ldr	r2, [pc, #504]	; (80057f4 <HAL_DMA_IRQHandler+0xccc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01d      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7d      	ldr	r2, [pc, #500]	; (80057f8 <HAL_DMA_IRQHandler+0xcd0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d018      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7b      	ldr	r2, [pc, #492]	; (80057fc <HAL_DMA_IRQHandler+0xcd4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7a      	ldr	r2, [pc, #488]	; (8005800 <HAL_DMA_IRQHandler+0xcd8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00e      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a78      	ldr	r2, [pc, #480]	; (8005804 <HAL_DMA_IRQHandler+0xcdc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d009      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a77      	ldr	r2, [pc, #476]	; (8005808 <HAL_DMA_IRQHandler+0xce0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d004      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a75      	ldr	r2, [pc, #468]	; (800580c <HAL_DMA_IRQHandler+0xce4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <HAL_DMA_IRQHandler+0xb24>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0208 	bic.w	r2, r2, #8
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e007      	b.n	800565c <HAL_DMA_IRQHandler+0xb34>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8165 	beq.w	8005930 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800566e:	e15f      	b.n	8005930 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2202      	movs	r2, #2
 800567a:	409a      	lsls	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80c5 	beq.w	8005810 <HAL_DMA_IRQHandler+0xce8>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80bf 	beq.w	8005810 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2202      	movs	r2, #2
 800569c:	409a      	lsls	r2, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d018      	beq.n	80056de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 813a 	beq.w	8005934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056c8:	e134      	b.n	8005934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8130 	beq.w	8005934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056dc:	e12a      	b.n	8005934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d168      	bne.n	80057ba <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a38      	ldr	r2, [pc, #224]	; (80057d0 <HAL_DMA_IRQHandler+0xca8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d04a      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a37      	ldr	r2, [pc, #220]	; (80057d4 <HAL_DMA_IRQHandler+0xcac>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d045      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a35      	ldr	r2, [pc, #212]	; (80057d8 <HAL_DMA_IRQHandler+0xcb0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d040      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a34      	ldr	r2, [pc, #208]	; (80057dc <HAL_DMA_IRQHandler+0xcb4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d03b      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a32      	ldr	r2, [pc, #200]	; (80057e0 <HAL_DMA_IRQHandler+0xcb8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d036      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a31      	ldr	r2, [pc, #196]	; (80057e4 <HAL_DMA_IRQHandler+0xcbc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d031      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2f      	ldr	r2, [pc, #188]	; (80057e8 <HAL_DMA_IRQHandler+0xcc0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02c      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2e      	ldr	r2, [pc, #184]	; (80057ec <HAL_DMA_IRQHandler+0xcc4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d027      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <HAL_DMA_IRQHandler+0xcc8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <HAL_DMA_IRQHandler+0xccc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a29      	ldr	r2, [pc, #164]	; (80057f8 <HAL_DMA_IRQHandler+0xcd0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a28      	ldr	r2, [pc, #160]	; (80057fc <HAL_DMA_IRQHandler+0xcd4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_DMA_IRQHandler+0xcd8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a25      	ldr	r2, [pc, #148]	; (8005804 <HAL_DMA_IRQHandler+0xcdc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a23      	ldr	r2, [pc, #140]	; (8005808 <HAL_DMA_IRQHandler+0xce0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_DMA_IRQHandler+0xc60>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a22      	ldr	r2, [pc, #136]	; (800580c <HAL_DMA_IRQHandler+0xce4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d108      	bne.n	800579a <HAL_DMA_IRQHandler+0xc72>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0214 	bic.w	r2, r2, #20
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e007      	b.n	80057aa <HAL_DMA_IRQHandler+0xc82>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 020a 	bic.w	r2, r2, #10
 80057a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80b8 	beq.w	8005934 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057cc:	e0b2      	b.n	8005934 <HAL_DMA_IRQHandler+0xe0c>
 80057ce:	bf00      	nop
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2208      	movs	r2, #8
 800581a:	409a      	lsls	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8088 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8082 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a41      	ldr	r2, [pc, #260]	; (800593c <HAL_DMA_IRQHandler+0xe14>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d04a      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <HAL_DMA_IRQHandler+0xe18>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d045      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3e      	ldr	r2, [pc, #248]	; (8005944 <HAL_DMA_IRQHandler+0xe1c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d040      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <HAL_DMA_IRQHandler+0xe20>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d03b      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3b      	ldr	r2, [pc, #236]	; (800594c <HAL_DMA_IRQHandler+0xe24>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d036      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a39      	ldr	r2, [pc, #228]	; (8005950 <HAL_DMA_IRQHandler+0xe28>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d031      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a38      	ldr	r2, [pc, #224]	; (8005954 <HAL_DMA_IRQHandler+0xe2c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d02c      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a36      	ldr	r2, [pc, #216]	; (8005958 <HAL_DMA_IRQHandler+0xe30>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d027      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a35      	ldr	r2, [pc, #212]	; (800595c <HAL_DMA_IRQHandler+0xe34>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d022      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_DMA_IRQHandler+0xe38>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01d      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a32      	ldr	r2, [pc, #200]	; (8005964 <HAL_DMA_IRQHandler+0xe3c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d018      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_DMA_IRQHandler+0xe40>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2f      	ldr	r2, [pc, #188]	; (800596c <HAL_DMA_IRQHandler+0xe44>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00e      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <HAL_DMA_IRQHandler+0xe48>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <HAL_DMA_IRQHandler+0xe4c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <HAL_DMA_IRQHandler+0xe50>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <HAL_DMA_IRQHandler+0xdbc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 021c 	bic.w	r2, r2, #28
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e007      	b.n	80058f4 <HAL_DMA_IRQHandler+0xdcc>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 020e 	bic.w	r2, r2, #14
 80058f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
 800592a:	e004      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800592c:	bf00      	nop
 800592e:	e002      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005934:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8

0800597c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005994:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a84      	ldr	r2, [pc, #528]	; (8005bac <DMA_SetConfig+0x230>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d072      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a82      	ldr	r2, [pc, #520]	; (8005bb0 <DMA_SetConfig+0x234>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d06d      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a81      	ldr	r2, [pc, #516]	; (8005bb4 <DMA_SetConfig+0x238>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d068      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7f      	ldr	r2, [pc, #508]	; (8005bb8 <DMA_SetConfig+0x23c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d063      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a7e      	ldr	r2, [pc, #504]	; (8005bbc <DMA_SetConfig+0x240>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d05e      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7c      	ldr	r2, [pc, #496]	; (8005bc0 <DMA_SetConfig+0x244>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d059      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a7b      	ldr	r2, [pc, #492]	; (8005bc4 <DMA_SetConfig+0x248>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d054      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a79      	ldr	r2, [pc, #484]	; (8005bc8 <DMA_SetConfig+0x24c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d04f      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a78      	ldr	r2, [pc, #480]	; (8005bcc <DMA_SetConfig+0x250>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d04a      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a76      	ldr	r2, [pc, #472]	; (8005bd0 <DMA_SetConfig+0x254>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d045      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a75      	ldr	r2, [pc, #468]	; (8005bd4 <DMA_SetConfig+0x258>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d040      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a73      	ldr	r2, [pc, #460]	; (8005bd8 <DMA_SetConfig+0x25c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d03b      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a72      	ldr	r2, [pc, #456]	; (8005bdc <DMA_SetConfig+0x260>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d036      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a70      	ldr	r2, [pc, #448]	; (8005be0 <DMA_SetConfig+0x264>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d031      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6f      	ldr	r2, [pc, #444]	; (8005be4 <DMA_SetConfig+0x268>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d02c      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a6d      	ldr	r2, [pc, #436]	; (8005be8 <DMA_SetConfig+0x26c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d027      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6c      	ldr	r2, [pc, #432]	; (8005bec <DMA_SetConfig+0x270>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a6a      	ldr	r2, [pc, #424]	; (8005bf0 <DMA_SetConfig+0x274>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a69      	ldr	r2, [pc, #420]	; (8005bf4 <DMA_SetConfig+0x278>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a67      	ldr	r2, [pc, #412]	; (8005bf8 <DMA_SetConfig+0x27c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a66      	ldr	r2, [pc, #408]	; (8005bfc <DMA_SetConfig+0x280>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a64      	ldr	r2, [pc, #400]	; (8005c00 <DMA_SetConfig+0x284>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a63      	ldr	r2, [pc, #396]	; (8005c04 <DMA_SetConfig+0x288>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <DMA_SetConfig+0x10a>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a61      	ldr	r2, [pc, #388]	; (8005c08 <DMA_SetConfig+0x28c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d101      	bne.n	8005a8a <DMA_SetConfig+0x10e>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <DMA_SetConfig+0x110>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aaa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a3e      	ldr	r2, [pc, #248]	; (8005bac <DMA_SetConfig+0x230>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d04a      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a3d      	ldr	r2, [pc, #244]	; (8005bb0 <DMA_SetConfig+0x234>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d045      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <DMA_SetConfig+0x238>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d040      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <DMA_SetConfig+0x23c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d03b      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a38      	ldr	r2, [pc, #224]	; (8005bbc <DMA_SetConfig+0x240>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d036      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a37      	ldr	r2, [pc, #220]	; (8005bc0 <DMA_SetConfig+0x244>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d031      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a35      	ldr	r2, [pc, #212]	; (8005bc4 <DMA_SetConfig+0x248>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d02c      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a34      	ldr	r2, [pc, #208]	; (8005bc8 <DMA_SetConfig+0x24c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d027      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a32      	ldr	r2, [pc, #200]	; (8005bcc <DMA_SetConfig+0x250>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d022      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a31      	ldr	r2, [pc, #196]	; (8005bd0 <DMA_SetConfig+0x254>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01d      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <DMA_SetConfig+0x258>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d018      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2e      	ldr	r2, [pc, #184]	; (8005bd8 <DMA_SetConfig+0x25c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2c      	ldr	r2, [pc, #176]	; (8005bdc <DMA_SetConfig+0x260>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00e      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2b      	ldr	r2, [pc, #172]	; (8005be0 <DMA_SetConfig+0x264>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <DMA_SetConfig+0x268>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <DMA_SetConfig+0x1d0>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a28      	ldr	r2, [pc, #160]	; (8005be8 <DMA_SetConfig+0x26c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <DMA_SetConfig+0x1d4>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <DMA_SetConfig+0x1d6>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d05a      	beq.n	8005c0c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	223f      	movs	r2, #63	; 0x3f
 8005b60:	409a      	lsls	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d108      	bne.n	8005b98 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b96:	e087      	b.n	8005ca8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
}
 8005ba8:	e07e      	b.n	8005ca8 <DMA_SetConfig+0x32c>
 8005baa:	bf00      	nop
 8005bac:	40020010 	.word	0x40020010
 8005bb0:	40020028 	.word	0x40020028
 8005bb4:	40020040 	.word	0x40020040
 8005bb8:	40020058 	.word	0x40020058
 8005bbc:	40020070 	.word	0x40020070
 8005bc0:	40020088 	.word	0x40020088
 8005bc4:	400200a0 	.word	0x400200a0
 8005bc8:	400200b8 	.word	0x400200b8
 8005bcc:	40020410 	.word	0x40020410
 8005bd0:	40020428 	.word	0x40020428
 8005bd4:	40020440 	.word	0x40020440
 8005bd8:	40020458 	.word	0x40020458
 8005bdc:	40020470 	.word	0x40020470
 8005be0:	40020488 	.word	0x40020488
 8005be4:	400204a0 	.word	0x400204a0
 8005be8:	400204b8 	.word	0x400204b8
 8005bec:	58025408 	.word	0x58025408
 8005bf0:	5802541c 	.word	0x5802541c
 8005bf4:	58025430 	.word	0x58025430
 8005bf8:	58025444 	.word	0x58025444
 8005bfc:	58025458 	.word	0x58025458
 8005c00:	5802546c 	.word	0x5802546c
 8005c04:	58025480 	.word	0x58025480
 8005c08:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a28      	ldr	r2, [pc, #160]	; (8005cb4 <DMA_SetConfig+0x338>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d022      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <DMA_SetConfig+0x33c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d01d      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <DMA_SetConfig+0x340>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d018      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <DMA_SetConfig+0x344>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <DMA_SetConfig+0x348>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <DMA_SetConfig+0x34c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1f      	ldr	r2, [pc, #124]	; (8005ccc <DMA_SetConfig+0x350>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <DMA_SetConfig+0x2e0>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <DMA_SetConfig+0x354>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <DMA_SetConfig+0x2e4>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <DMA_SetConfig+0x2e6>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2201      	movs	r2, #1
 8005c70:	409a      	lsls	r2, r3
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d108      	bne.n	8005c98 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	60da      	str	r2, [r3, #12]
}
 8005c96:	e007      	b.n	8005ca8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	58025408 	.word	0x58025408
 8005cb8:	5802541c 	.word	0x5802541c
 8005cbc:	58025430 	.word	0x58025430
 8005cc0:	58025444 	.word	0x58025444
 8005cc4:	58025458 	.word	0x58025458
 8005cc8:	5802546c 	.word	0x5802546c
 8005ccc:	58025480 	.word	0x58025480
 8005cd0:	58025494 	.word	0x58025494

08005cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a42      	ldr	r2, [pc, #264]	; (8005dec <DMA_CalcBaseAndBitshift+0x118>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d04a      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a41      	ldr	r2, [pc, #260]	; (8005df0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d045      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a3f      	ldr	r2, [pc, #252]	; (8005df4 <DMA_CalcBaseAndBitshift+0x120>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d040      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3e      	ldr	r2, [pc, #248]	; (8005df8 <DMA_CalcBaseAndBitshift+0x124>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d03b      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3c      	ldr	r2, [pc, #240]	; (8005dfc <DMA_CalcBaseAndBitshift+0x128>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d036      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3b      	ldr	r2, [pc, #236]	; (8005e00 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d031      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a39      	ldr	r2, [pc, #228]	; (8005e04 <DMA_CalcBaseAndBitshift+0x130>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02c      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <DMA_CalcBaseAndBitshift+0x134>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d027      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a36      	ldr	r2, [pc, #216]	; (8005e0c <DMA_CalcBaseAndBitshift+0x138>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d022      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a35      	ldr	r2, [pc, #212]	; (8005e10 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01d      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a33      	ldr	r2, [pc, #204]	; (8005e14 <DMA_CalcBaseAndBitshift+0x140>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a32      	ldr	r2, [pc, #200]	; (8005e18 <DMA_CalcBaseAndBitshift+0x144>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a30      	ldr	r2, [pc, #192]	; (8005e1c <DMA_CalcBaseAndBitshift+0x148>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2f      	ldr	r2, [pc, #188]	; (8005e20 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	; (8005e24 <DMA_CalcBaseAndBitshift+0x150>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <DMA_CalcBaseAndBitshift+0xa8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <DMA_CalcBaseAndBitshift+0x154>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d101      	bne.n	8005d80 <DMA_CalcBaseAndBitshift+0xac>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <DMA_CalcBaseAndBitshift+0xae>
 8005d80:	2300      	movs	r3, #0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d024      	beq.n	8005dd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	3b10      	subs	r3, #16
 8005d8e:	4a27      	ldr	r2, [pc, #156]	; (8005e2c <DMA_CalcBaseAndBitshift+0x158>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <DMA_CalcBaseAndBitshift+0x15c>)
 8005da0:	5cd3      	ldrb	r3, [r2, r3]
 8005da2:	461a      	mov	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d908      	bls.n	8005dc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <DMA_CalcBaseAndBitshift+0x160>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8005dbe:	e00d      	b.n	8005ddc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <DMA_CalcBaseAndBitshift+0x160>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8005dce:	e005      	b.n	8005ddc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	aaaaaaab 	.word	0xaaaaaaab
 8005e30:	0800e088 	.word	0x0800e088
 8005e34:	fffffc00 	.word	0xfffffc00

08005e38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d120      	bne.n	8005e8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d858      	bhi.n	8005f06 <DMA_CheckFifoParam+0xce>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <DMA_CheckFifoParam+0x24>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e6d 	.word	0x08005e6d
 8005e60:	08005e7f 	.word	0x08005e7f
 8005e64:	08005e6d 	.word	0x08005e6d
 8005e68:	08005f07 	.word	0x08005f07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d048      	beq.n	8005f0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e7c:	e045      	b.n	8005f0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e86:	d142      	bne.n	8005f0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e8c:	e03f      	b.n	8005f0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e96:	d123      	bne.n	8005ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d838      	bhi.n	8005f12 <DMA_CheckFifoParam+0xda>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <DMA_CheckFifoParam+0x70>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005eb9 	.word	0x08005eb9
 8005eac:	08005ebf 	.word	0x08005ebf
 8005eb0:	08005eb9 	.word	0x08005eb9
 8005eb4:	08005ed1 	.word	0x08005ed1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
        break;
 8005ebc:	e030      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d025      	beq.n	8005f16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ece:	e022      	b.n	8005f16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ed8:	d11f      	bne.n	8005f1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ede:	e01c      	b.n	8005f1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d902      	bls.n	8005eee <DMA_CheckFifoParam+0xb6>
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d003      	beq.n	8005ef4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005eec:	e018      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ef2:	e015      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
    break;
 8005f04:	e00b      	b.n	8005f1e <DMA_CheckFifoParam+0xe6>
        break;
 8005f06:	bf00      	nop
 8005f08:	e00a      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e008      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e006      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e004      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <DMA_CheckFifoParam+0xe8>
    break;
 8005f1e:	bf00      	nop
    }
  }

  return status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop

08005f30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a38      	ldr	r2, [pc, #224]	; (8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a36      	ldr	r2, [pc, #216]	; (8006028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a35      	ldr	r2, [pc, #212]	; (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a33      	ldr	r2, [pc, #204]	; (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a32      	ldr	r2, [pc, #200]	; (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a30      	ldr	r2, [pc, #192]	; (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2f      	ldr	r2, [pc, #188]	; (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2d      	ldr	r2, [pc, #180]	; (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01a      	beq.n	8005fce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	3b08      	subs	r3, #8
 8005fa0:	4a28      	ldr	r2, [pc, #160]	; (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4b26      	ldr	r3, [pc, #152]	; (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a24      	ldr	r2, [pc, #144]	; (800604c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fcc:	e024      	b.n	8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	3b10      	subs	r3, #16
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d806      	bhi.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d902      	bls.n	8005ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4b18      	ldr	r3, [pc, #96]	; (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a16      	ldr	r2, [pc, #88]	; (8006060 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006008:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	2201      	movs	r2, #1
 8006012:	409a      	lsls	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	58025408 	.word	0x58025408
 8006028:	5802541c 	.word	0x5802541c
 800602c:	58025430 	.word	0x58025430
 8006030:	58025444 	.word	0x58025444
 8006034:	58025458 	.word	0x58025458
 8006038:	5802546c 	.word	0x5802546c
 800603c:	58025480 	.word	0x58025480
 8006040:	58025494 	.word	0x58025494
 8006044:	cccccccd 	.word	0xcccccccd
 8006048:	16009600 	.word	0x16009600
 800604c:	58025880 	.word	0x58025880
 8006050:	aaaaaaab 	.word	0xaaaaaaab
 8006054:	400204b8 	.word	0x400204b8
 8006058:	4002040f 	.word	0x4002040f
 800605c:	10008200 	.word	0x10008200
 8006060:	40020880 	.word	0x40020880

08006064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04a      	beq.n	8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d847      	bhi.n	8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a25      	ldr	r2, [pc, #148]	; (800611c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a24      	ldr	r2, [pc, #144]	; (8006120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01d      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a22      	ldr	r2, [pc, #136]	; (8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a21      	ldr	r2, [pc, #132]	; (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	; (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d101      	bne.n	80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4b17      	ldr	r3, [pc, #92]	; (800613c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a15      	ldr	r2, [pc, #84]	; (8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060ec:	671a      	str	r2, [r3, #112]	; 0x70
 80060ee:	e009      	b.n	8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a11      	ldr	r2, [pc, #68]	; (8006148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006102:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3b01      	subs	r3, #1
 8006108:	2201      	movs	r2, #1
 800610a:	409a      	lsls	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	58025408 	.word	0x58025408
 8006120:	5802541c 	.word	0x5802541c
 8006124:	58025430 	.word	0x58025430
 8006128:	58025444 	.word	0x58025444
 800612c:	58025458 	.word	0x58025458
 8006130:	5802546c 	.word	0x5802546c
 8006134:	58025480 	.word	0x58025480
 8006138:	58025494 	.word	0x58025494
 800613c:	1600963f 	.word	0x1600963f
 8006140:	58025940 	.word	0x58025940
 8006144:	1000823f 	.word	0x1000823f
 8006148:	40020940 	.word	0x40020940

0800614c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800614c:	b480      	push	{r7}
 800614e:	b089      	sub	sp, #36	; 0x24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800615a:	4b89      	ldr	r3, [pc, #548]	; (8006380 <HAL_GPIO_Init+0x234>)
 800615c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800615e:	e194      	b.n	800648a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	2101      	movs	r1, #1
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa01 f303 	lsl.w	r3, r1, r3
 800616c:	4013      	ands	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8186 	beq.w	8006484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d00b      	beq.n	8006198 <HAL_GPIO_Init+0x4c>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d007      	beq.n	8006198 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800618c:	2b11      	cmp	r3, #17
 800618e:	d003      	beq.n	8006198 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b12      	cmp	r3, #18
 8006196:	d130      	bne.n	80061fa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ce:	2201      	movs	r2, #1
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	f003 0201 	and.w	r2, r3, #1
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	2203      	movs	r2, #3
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4313      	orrs	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d003      	beq.n	800623a <HAL_GPIO_Init+0xee>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b12      	cmp	r3, #18
 8006238:	d123      	bne.n	8006282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	08da      	lsrs	r2, r3, #3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3208      	adds	r2, #8
 8006242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	220f      	movs	r2, #15
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	08da      	lsrs	r2, r3, #3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3208      	adds	r2, #8
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	2203      	movs	r2, #3
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 0203 	and.w	r2, r3, #3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80e0 	beq.w	8006484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062c4:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <HAL_GPIO_Init+0x238>)
 80062c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062ca:	4a2e      	ldr	r2, [pc, #184]	; (8006384 <HAL_GPIO_Init+0x238>)
 80062cc:	f043 0302 	orr.w	r3, r3, #2
 80062d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_GPIO_Init+0x238>)
 80062d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e2:	4a29      	ldr	r2, [pc, #164]	; (8006388 <HAL_GPIO_Init+0x23c>)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	3302      	adds	r3, #2
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	220f      	movs	r2, #15
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_GPIO_Init+0x240>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d052      	beq.n	80063b4 <HAL_GPIO_Init+0x268>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <HAL_GPIO_Init+0x244>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_GPIO_Init+0x22e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_GPIO_Init+0x248>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02b      	beq.n	8006376 <HAL_GPIO_Init+0x22a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_GPIO_Init+0x24c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d025      	beq.n	8006372 <HAL_GPIO_Init+0x226>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1c      	ldr	r2, [pc, #112]	; (800639c <HAL_GPIO_Init+0x250>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01f      	beq.n	800636e <HAL_GPIO_Init+0x222>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a1b      	ldr	r2, [pc, #108]	; (80063a0 <HAL_GPIO_Init+0x254>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d019      	beq.n	800636a <HAL_GPIO_Init+0x21e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_GPIO_Init+0x258>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_GPIO_Init+0x21a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_GPIO_Init+0x25c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00d      	beq.n	8006362 <HAL_GPIO_Init+0x216>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_GPIO_Init+0x260>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <HAL_GPIO_Init+0x212>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_GPIO_Init+0x264>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_GPIO_Init+0x20e>
 8006356:	2309      	movs	r3, #9
 8006358:	e02d      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800635a:	230a      	movs	r3, #10
 800635c:	e02b      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800635e:	2308      	movs	r3, #8
 8006360:	e029      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006362:	2307      	movs	r3, #7
 8006364:	e027      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006366:	2306      	movs	r3, #6
 8006368:	e025      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800636a:	2305      	movs	r3, #5
 800636c:	e023      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800636e:	2304      	movs	r3, #4
 8006370:	e021      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006372:	2303      	movs	r3, #3
 8006374:	e01f      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 8006376:	2302      	movs	r3, #2
 8006378:	e01d      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800637a:	2301      	movs	r3, #1
 800637c:	e01b      	b.n	80063b6 <HAL_GPIO_Init+0x26a>
 800637e:	bf00      	nop
 8006380:	58000080 	.word	0x58000080
 8006384:	58024400 	.word	0x58024400
 8006388:	58000400 	.word	0x58000400
 800638c:	58020000 	.word	0x58020000
 8006390:	58020400 	.word	0x58020400
 8006394:	58020800 	.word	0x58020800
 8006398:	58020c00 	.word	0x58020c00
 800639c:	58021000 	.word	0x58021000
 80063a0:	58021400 	.word	0x58021400
 80063a4:	58021800 	.word	0x58021800
 80063a8:	58021c00 	.word	0x58021c00
 80063ac:	58022000 	.word	0x58022000
 80063b0:	58022400 	.word	0x58022400
 80063b4:	2300      	movs	r3, #0
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	f002 0203 	and.w	r2, r2, #3
 80063bc:	0092      	lsls	r2, r2, #2
 80063be:	4093      	lsls	r3, r2
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063c6:	4938      	ldr	r1, [pc, #224]	; (80064a8 <HAL_GPIO_Init+0x35c>)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	3302      	adds	r3, #2
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	43db      	mvns	r3, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4013      	ands	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	43db      	mvns	r3, r3
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	4013      	ands	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800644e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	43db      	mvns	r3, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4013      	ands	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800647c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	f47f ae63 	bne.w	8006160 <HAL_GPIO_Init+0x14>
  }
}
 800649a:	bf00      	nop
 800649c:	3724      	adds	r7, #36	; 0x24
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	58000400 	.word	0x58000400

080064ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
 80064b8:	4613      	mov	r3, r2
 80064ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064bc:	787b      	ldrb	r3, [r7, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064c8:	e003      	b.n	80064d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	041a      	lsls	r2, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	619a      	str	r2, [r3, #24]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	887b      	ldrh	r3, [r7, #2]
 80064f0:	401a      	ands	r2, r3
 80064f2:	887b      	ldrh	r3, [r7, #2]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d104      	bne.n	8006502 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064f8:	887b      	ldrh	r3, [r7, #2]
 80064fa:	041a      	lsls	r2, r3, #16
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006500:	e002      	b.n	8006508 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800651c:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_PWREx_ConfigSupply+0x70>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d00a      	beq.n	800653e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <HAL_PWREx_ConfigSupply+0x70>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d001      	beq.n	800653a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e01f      	b.n	800657a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e01d      	b.n	800657a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800653e:	4b11      	ldr	r3, [pc, #68]	; (8006584 <HAL_PWREx_ConfigSupply+0x70>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f023 0207 	bic.w	r2, r3, #7
 8006546:	490f      	ldr	r1, [pc, #60]	; (8006584 <HAL_PWREx_ConfigSupply+0x70>)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4313      	orrs	r3, r2
 800654c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800654e:	f7fb feff 	bl	8002350 <HAL_GetTick>
 8006552:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006554:	e009      	b.n	800656a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006556:	f7fb fefb 	bl	8002350 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006564:	d901      	bls.n	800656a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e007      	b.n	800657a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_PWREx_ConfigSupply+0x70>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006576:	d1ee      	bne.n	8006556 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	58024800 	.word	0x58024800

08006588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	; 0x30
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e3c4      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8087 	beq.w	80066b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065a8:	4ba2      	ldr	r3, [pc, #648]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065b2:	4ba0      	ldr	r3, [pc, #640]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d007      	beq.n	80065ce <HAL_RCC_OscConfig+0x46>
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b18      	cmp	r3, #24
 80065c2:	d110      	bne.n	80065e6 <HAL_RCC_OscConfig+0x5e>
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d10b      	bne.n	80065e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ce:	4b99      	ldr	r3, [pc, #612]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d06c      	beq.n	80066b4 <HAL_RCC_OscConfig+0x12c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d168      	bne.n	80066b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e39e      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ee:	d106      	bne.n	80065fe <HAL_RCC_OscConfig+0x76>
 80065f0:	4b90      	ldr	r3, [pc, #576]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a8f      	ldr	r2, [pc, #572]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80065f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e02e      	b.n	800665c <HAL_RCC_OscConfig+0xd4>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10c      	bne.n	8006620 <HAL_RCC_OscConfig+0x98>
 8006606:	4b8b      	ldr	r3, [pc, #556]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a8a      	ldr	r2, [pc, #552]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800660c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a87      	ldr	r2, [pc, #540]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e01d      	b.n	800665c <HAL_RCC_OscConfig+0xd4>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0xbc>
 800662a:	4b82      	ldr	r3, [pc, #520]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a81      	ldr	r2, [pc, #516]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b7f      	ldr	r3, [pc, #508]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a7e      	ldr	r2, [pc, #504]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e00b      	b.n	800665c <HAL_RCC_OscConfig+0xd4>
 8006644:	4b7b      	ldr	r3, [pc, #492]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7a      	ldr	r2, [pc, #488]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800664a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b78      	ldr	r3, [pc, #480]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a77      	ldr	r2, [pc, #476]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fb fe74 	bl	8002350 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800666c:	f7fb fe70 	bl	8002350 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	; 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e352      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800667e:	4b6d      	ldr	r3, [pc, #436]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0xe4>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fb fe60 	bl	8002350 <HAL_GetTick>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006694:	f7fb fe5c 	bl	8002350 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	; 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e33e      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066a6:	4b63      	ldr	r3, [pc, #396]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0x10c>
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8092 	beq.w	80067e8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c4:	4b5b      	ldr	r3, [pc, #364]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066ce:	4b59      	ldr	r3, [pc, #356]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_RCC_OscConfig+0x162>
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b18      	cmp	r3, #24
 80066de:	d12d      	bne.n	800673c <HAL_RCC_OscConfig+0x1b4>
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d128      	bne.n	800673c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ea:	4b52      	ldr	r3, [pc, #328]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCC_OscConfig+0x17a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e310      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006702:	f7fb fe53 	bl	80023ac <HAL_GetREVID>
 8006706:	4602      	mov	r2, r0
 8006708:	f241 0303 	movw	r3, #4099	; 0x1003
 800670c:	429a      	cmp	r2, r3
 800670e:	d80a      	bhi.n	8006726 <HAL_RCC_OscConfig+0x19e>
 8006710:	4b48      	ldr	r3, [pc, #288]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	4945      	ldr	r1, [pc, #276]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006720:	4313      	orrs	r3, r2
 8006722:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006724:	e060      	b.n	80067e8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006726:	4b43      	ldr	r3, [pc, #268]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	061b      	lsls	r3, r3, #24
 8006734:	493f      	ldr	r1, [pc, #252]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006736:	4313      	orrs	r3, r2
 8006738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800673a:	e055      	b.n	80067e8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d038      	beq.n	80067b6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006744:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f023 0219 	bic.w	r2, r3, #25
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4938      	ldr	r1, [pc, #224]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006756:	f7fb fdfb 	bl	8002350 <HAL_GetTick>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800675e:	f7fb fdf7 	bl	8002350 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e2d9      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006770:	4b30      	ldr	r3, [pc, #192]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	f7fb fe16 	bl	80023ac <HAL_GetREVID>
 8006780:	4602      	mov	r2, r0
 8006782:	f241 0303 	movw	r3, #4099	; 0x1003
 8006786:	429a      	cmp	r2, r3
 8006788:	d80a      	bhi.n	80067a0 <HAL_RCC_OscConfig+0x218>
 800678a:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	031b      	lsls	r3, r3, #12
 8006798:	4926      	ldr	r1, [pc, #152]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800679a:	4313      	orrs	r3, r2
 800679c:	604b      	str	r3, [r1, #4]
 800679e:	e023      	b.n	80067e8 <HAL_RCC_OscConfig+0x260>
 80067a0:	4b24      	ldr	r3, [pc, #144]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	4921      	ldr	r1, [pc, #132]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]
 80067b4:	e018      	b.n	80067e8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b6:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fb fdc5 	bl	8002350 <HAL_GetTick>
 80067c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ca:	f7fb fdc1 	bl	8002350 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e2a3      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8091 	beq.w	8006918 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b08      	cmp	r3, #8
 800680a:	d007      	beq.n	800681c <HAL_RCC_OscConfig+0x294>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b18      	cmp	r3, #24
 8006810:	d12f      	bne.n	8006872 <HAL_RCC_OscConfig+0x2ea>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	2b01      	cmp	r3, #1
 800681a:	d12a      	bne.n	8006872 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_RCC_OscConfig+0x2ac>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <HAL_RCC_OscConfig+0x2b0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	2b80      	cmp	r3, #128	; 0x80
 800682e:	d003      	beq.n	8006838 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e277      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
 8006834:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006838:	f7fb fdb8 	bl	80023ac <HAL_GetREVID>
 800683c:	4602      	mov	r2, r0
 800683e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006842:	429a      	cmp	r2, r3
 8006844:	d80a      	bhi.n	800685c <HAL_RCC_OscConfig+0x2d4>
 8006846:	4ba2      	ldr	r3, [pc, #648]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	069b      	lsls	r3, r3, #26
 8006854:	499e      	ldr	r1, [pc, #632]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006856:	4313      	orrs	r3, r2
 8006858:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800685a:	e05d      	b.n	8006918 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800685c:	4b9c      	ldr	r3, [pc, #624]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	061b      	lsls	r3, r3, #24
 800686a:	4999      	ldr	r1, [pc, #612]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 800686c:	4313      	orrs	r3, r2
 800686e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006870:	e052      	b.n	8006918 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d035      	beq.n	80068e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800687a:	4b95      	ldr	r3, [pc, #596]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a94      	ldr	r2, [pc, #592]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fb fd63 	bl	8002350 <HAL_GetTick>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800688e:	f7fb fd5f 	bl	8002350 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e241      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068a0:	4b8b      	ldr	r3, [pc, #556]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068ac:	f7fb fd7e 	bl	80023ac <HAL_GetREVID>
 80068b0:	4602      	mov	r2, r0
 80068b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d80a      	bhi.n	80068d0 <HAL_RCC_OscConfig+0x348>
 80068ba:	4b85      	ldr	r3, [pc, #532]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	069b      	lsls	r3, r3, #26
 80068c8:	4981      	ldr	r1, [pc, #516]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	604b      	str	r3, [r1, #4]
 80068ce:	e023      	b.n	8006918 <HAL_RCC_OscConfig+0x390>
 80068d0:	4b7f      	ldr	r3, [pc, #508]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	061b      	lsls	r3, r3, #24
 80068de:	497c      	ldr	r1, [pc, #496]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60cb      	str	r3, [r1, #12]
 80068e4:	e018      	b.n	8006918 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068e6:	4b7a      	ldr	r3, [pc, #488]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a79      	ldr	r2, [pc, #484]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80068ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f2:	f7fb fd2d 	bl	8002350 <HAL_GetTick>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068fa:	f7fb fd29 	bl	8002350 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e20b      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800690c:	4b70      	ldr	r3, [pc, #448]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d036      	beq.n	8006992 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d019      	beq.n	8006960 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800692c:	4b68      	ldr	r3, [pc, #416]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 800692e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006930:	4a67      	ldr	r2, [pc, #412]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006938:	f7fb fd0a 	bl	8002350 <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006940:	f7fb fd06 	bl	8002350 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e1e8      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006952:	4b5f      	ldr	r3, [pc, #380]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x3b8>
 800695e:	e018      	b.n	8006992 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006960:	4b5b      	ldr	r3, [pc, #364]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006964:	4a5a      	ldr	r2, [pc, #360]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fb fcf0 	bl	8002350 <HAL_GetTick>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006974:	f7fb fcec 	bl	8002350 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e1ce      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006986:	4b52      	ldr	r3, [pc, #328]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d036      	beq.n	8006a0c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d019      	beq.n	80069da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069a6:	4b4a      	ldr	r3, [pc, #296]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a49      	ldr	r2, [pc, #292]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80069ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069b2:	f7fb fccd 	bl	8002350 <HAL_GetTick>
 80069b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069ba:	f7fb fcc9 	bl	8002350 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e1ab      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069cc:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_RCC_OscConfig+0x432>
 80069d8:	e018      	b.n	8006a0c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069da:	4b3d      	ldr	r3, [pc, #244]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3c      	ldr	r2, [pc, #240]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 80069e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069e6:	f7fb fcb3 	bl	8002350 <HAL_GetTick>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069ee:	f7fb fcaf 	bl	8002350 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e191      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a00:	4b33      	ldr	r3, [pc, #204]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f0      	bne.n	80069ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8086 	beq.w	8006b26 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ad4 <HAL_RCC_OscConfig+0x54c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a2d      	ldr	r2, [pc, #180]	; (8006ad4 <HAL_RCC_OscConfig+0x54c>)
 8006a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a26:	f7fb fc93 	bl	8002350 <HAL_GetTick>
 8006a2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a2e:	f7fb fc8f 	bl	8002350 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b64      	cmp	r3, #100	; 0x64
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e171      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a40:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <HAL_RCC_OscConfig+0x54c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d106      	bne.n	8006a62 <HAL_RCC_OscConfig+0x4da>
 8006a54:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a60:	e02d      	b.n	8006abe <HAL_RCC_OscConfig+0x536>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0x4fc>
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	6713      	str	r3, [r2, #112]	; 0x70
 8006a76:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	6713      	str	r3, [r2, #112]	; 0x70
 8006a82:	e01c      	b.n	8006abe <HAL_RCC_OscConfig+0x536>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x51e>
 8006a8c:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	6713      	str	r3, [r2, #112]	; 0x70
 8006a98:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa4:	e00b      	b.n	8006abe <HAL_RCC_OscConfig+0x536>
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <HAL_RCC_OscConfig+0x548>)
 8006ab8:	f023 0304 	bic.w	r3, r3, #4
 8006abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d01a      	beq.n	8006afc <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac6:	f7fb fc43 	bl	8002350 <HAL_GetTick>
 8006aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006acc:	e00f      	b.n	8006aee <HAL_RCC_OscConfig+0x566>
 8006ace:	bf00      	nop
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ad8:	f7fb fc3a 	bl	8002350 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e11a      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aee:	4b8f      	ldr	r3, [pc, #572]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0ee      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x550>
 8006afa:	e014      	b.n	8006b26 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afc:	f7fb fc28 	bl	8002350 <HAL_GetTick>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b02:	e00a      	b.n	8006b1a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b04:	f7fb fc24 	bl	8002350 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e104      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b1a:	4b84      	ldr	r3, [pc, #528]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1ee      	bne.n	8006b04 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80f9 	beq.w	8006d22 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b30:	4b7e      	ldr	r3, [pc, #504]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b38:	2b18      	cmp	r3, #24
 8006b3a:	f000 80b4 	beq.w	8006ca6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	f040 8095 	bne.w	8006c72 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b48:	4b78      	ldr	r3, [pc, #480]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a77      	ldr	r2, [pc, #476]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b54:	f7fb fbfc 	bl	8002350 <HAL_GetTick>
 8006b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fb fbf8 	bl	8002350 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e0da      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b6e:	4b6f      	ldr	r3, [pc, #444]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b7a:	4b6c      	ldr	r3, [pc, #432]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b7e:	4b6c      	ldr	r3, [pc, #432]	; (8006d30 <HAL_RCC_OscConfig+0x7a8>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b8a:	0112      	lsls	r2, r2, #4
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	4967      	ldr	r1, [pc, #412]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	628b      	str	r3, [r1, #40]	; 0x28
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	025b      	lsls	r3, r3, #9
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bc4:	4959      	ldr	r1, [pc, #356]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006bca:	4b58      	ldr	r3, [pc, #352]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	4a57      	ldr	r2, [pc, #348]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bd6:	4b55      	ldr	r3, [pc, #340]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bda:	4b56      	ldr	r3, [pc, #344]	; (8006d34 <HAL_RCC_OscConfig+0x7ac>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006be2:	00d2      	lsls	r2, r2, #3
 8006be4:	4951      	ldr	r1, [pc, #324]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bea:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	f023 020c 	bic.w	r2, r3, #12
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	494d      	ldr	r1, [pc, #308]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bfc:	4b4b      	ldr	r3, [pc, #300]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	f023 0202 	bic.w	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	4948      	ldr	r1, [pc, #288]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c0e:	4b47      	ldr	r3, [pc, #284]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	4a46      	ldr	r2, [pc, #280]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c1a:	4b44      	ldr	r3, [pc, #272]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	4a43      	ldr	r2, [pc, #268]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c26:	4b41      	ldr	r3, [pc, #260]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	4a40      	ldr	r2, [pc, #256]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c32:	4b3e      	ldr	r3, [pc, #248]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	4a3d      	ldr	r2, [pc, #244]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3a      	ldr	r2, [pc, #232]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4a:	f7fb fb81 	bl	8002350 <HAL_GetTick>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c52:	f7fb fb7d 	bl	8002350 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e05f      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c64:	4b31      	ldr	r3, [pc, #196]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCC_OscConfig+0x6ca>
 8006c70:	e057      	b.n	8006d22 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2d      	ldr	r2, [pc, #180]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7e:	f7fb fb67 	bl	8002350 <HAL_GetTick>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c86:	f7fb fb63 	bl	8002350 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e045      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c98:	4b24      	ldr	r3, [pc, #144]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f0      	bne.n	8006c86 <HAL_RCC_OscConfig+0x6fe>
 8006ca4:	e03d      	b.n	8006d22 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ca6:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cac:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <HAL_RCC_OscConfig+0x7a4>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d031      	beq.n	8006d1e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f003 0203 	and.w	r2, r3, #3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d12a      	bne.n	8006d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	091b      	lsrs	r3, r3, #4
 8006ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d122      	bne.n	8006d1e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d11a      	bne.n	8006d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	0a5b      	lsrs	r3, r3, #9
 8006cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d111      	bne.n	8006d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d108      	bne.n	8006d1e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	0e1b      	lsrs	r3, r3, #24
 8006d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d001      	beq.n	8006d22 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3730      	adds	r7, #48	; 0x30
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	58024400 	.word	0x58024400
 8006d30:	fffffc0c 	.word	0xfffffc0c
 8006d34:	ffff0007 	.word	0xffff0007

08006d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e19c      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d4c:	4b8a      	ldr	r3, [pc, #552]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d910      	bls.n	8006d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d5a:	4b87      	ldr	r3, [pc, #540]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f023 020f 	bic.w	r2, r3, #15
 8006d62:	4985      	ldr	r1, [pc, #532]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d6a:	4b83      	ldr	r3, [pc, #524]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e184      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d010      	beq.n	8006daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	4b7b      	ldr	r3, [pc, #492]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d908      	bls.n	8006daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d98:	4b78      	ldr	r3, [pc, #480]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	4975      	ldr	r1, [pc, #468]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d010      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	4b70      	ldr	r3, [pc, #448]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d908      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dc6:	4b6d      	ldr	r3, [pc, #436]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	496a      	ldr	r1, [pc, #424]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	4b64      	ldr	r3, [pc, #400]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d908      	bls.n	8006e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006df4:	4b61      	ldr	r3, [pc, #388]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	495e      	ldr	r1, [pc, #376]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d010      	beq.n	8006e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69da      	ldr	r2, [r3, #28]
 8006e16:	4b59      	ldr	r3, [pc, #356]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d908      	bls.n	8006e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e22:	4b56      	ldr	r3, [pc, #344]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	4953      	ldr	r1, [pc, #332]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	4b4d      	ldr	r3, [pc, #308]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d908      	bls.n	8006e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e50:	4b4a      	ldr	r3, [pc, #296]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f023 020f 	bic.w	r2, r3, #15
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4947      	ldr	r1, [pc, #284]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d055      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e6e:	4b43      	ldr	r3, [pc, #268]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	4940      	ldr	r1, [pc, #256]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e88:	4b3c      	ldr	r3, [pc, #240]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d121      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0f6      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ea0:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d115      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0ea      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eb8:	4b30      	ldr	r3, [pc, #192]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0de      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ec8:	4b2c      	ldr	r3, [pc, #176]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0d6      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ed8:	4b28      	ldr	r3, [pc, #160]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f023 0207 	bic.w	r2, r3, #7
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4925      	ldr	r1, [pc, #148]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fb fa31 	bl	8002350 <HAL_GetTick>
 8006eee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef0:	e00a      	b.n	8006f08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef2:	f7fb fa2d 	bl	8002350 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e0be      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f08:	4b1c      	ldr	r3, [pc, #112]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d1eb      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d010      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d208      	bcs.n	8006f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f36:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f023 020f 	bic.w	r2, r3, #15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	490e      	ldr	r1, [pc, #56]	; (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d214      	bcs.n	8006f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 020f 	bic.w	r2, r3, #15
 8006f5e:	4906      	ldr	r1, [pc, #24]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d005      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e086      	b.n	8007086 <HAL_RCC_ClockConfig+0x34e>
 8006f78:	52002000 	.word	0x52002000
 8006f7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d010      	beq.n	8006fae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	4b3f      	ldr	r3, [pc, #252]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d208      	bcs.n	8006fae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f9c:	4b3c      	ldr	r3, [pc, #240]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	4939      	ldr	r1, [pc, #228]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d010      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	4b34      	ldr	r3, [pc, #208]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d208      	bcs.n	8006fdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	492e      	ldr	r1, [pc, #184]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d010      	beq.n	800700a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d208      	bcs.n	800700a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ff8:	4b25      	ldr	r3, [pc, #148]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	4922      	ldr	r1, [pc, #136]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8007006:	4313      	orrs	r3, r2
 8007008:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d010      	beq.n	8007038 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007022:	429a      	cmp	r2, r3
 8007024:	d208      	bcs.n	8007038 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007026:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4917      	ldr	r1, [pc, #92]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8007034:	4313      	orrs	r3, r2
 8007036:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007038:	f000 f834 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 800703c:	4601      	mov	r1, r0
 800703e:	4b14      	ldr	r3, [pc, #80]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	f003 030f 	and.w	r3, r3, #15
 8007048:	4a12      	ldr	r2, [pc, #72]	; (8007094 <HAL_RCC_ClockConfig+0x35c>)
 800704a:	5cd3      	ldrb	r3, [r2, r3]
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	fa21 f303 	lsr.w	r3, r1, r3
 8007054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007056:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <HAL_RCC_ClockConfig+0x358>)
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <HAL_RCC_ClockConfig+0x35c>)
 8007060:	5cd3      	ldrb	r3, [r2, r3]
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	fa22 f303 	lsr.w	r3, r2, r3
 800706c:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <HAL_RCC_ClockConfig+0x360>)
 800706e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <HAL_RCC_ClockConfig+0x364>)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007076:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <HAL_RCC_ClockConfig+0x368>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f7fb f91e 	bl	80022bc <HAL_InitTick>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	58024400 	.word	0x58024400
 8007094:	0800e078 	.word	0x0800e078
 8007098:	2400002c 	.word	0x2400002c
 800709c:	24000028 	.word	0x24000028
 80070a0:	24000030 	.word	0x24000030

080070a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b089      	sub	sp, #36	; 0x24
 80070a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070aa:	4baf      	ldr	r3, [pc, #700]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070b2:	2b18      	cmp	r3, #24
 80070b4:	f200 814e 	bhi.w	8007354 <HAL_RCC_GetSysClockFreq+0x2b0>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	08007125 	.word	0x08007125
 80070c4:	08007355 	.word	0x08007355
 80070c8:	08007355 	.word	0x08007355
 80070cc:	08007355 	.word	0x08007355
 80070d0:	08007355 	.word	0x08007355
 80070d4:	08007355 	.word	0x08007355
 80070d8:	08007355 	.word	0x08007355
 80070dc:	08007355 	.word	0x08007355
 80070e0:	0800714b 	.word	0x0800714b
 80070e4:	08007355 	.word	0x08007355
 80070e8:	08007355 	.word	0x08007355
 80070ec:	08007355 	.word	0x08007355
 80070f0:	08007355 	.word	0x08007355
 80070f4:	08007355 	.word	0x08007355
 80070f8:	08007355 	.word	0x08007355
 80070fc:	08007355 	.word	0x08007355
 8007100:	08007151 	.word	0x08007151
 8007104:	08007355 	.word	0x08007355
 8007108:	08007355 	.word	0x08007355
 800710c:	08007355 	.word	0x08007355
 8007110:	08007355 	.word	0x08007355
 8007114:	08007355 	.word	0x08007355
 8007118:	08007355 	.word	0x08007355
 800711c:	08007355 	.word	0x08007355
 8007120:	08007157 	.word	0x08007157
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007124:	4b90      	ldr	r3, [pc, #576]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d009      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007130:	4b8d      	ldr	r3, [pc, #564]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	08db      	lsrs	r3, r3, #3
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	4a8c      	ldr	r2, [pc, #560]	; (800736c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
 8007140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007142:	e10a      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007144:	4b89      	ldr	r3, [pc, #548]	; (800736c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007146:	61bb      	str	r3, [r7, #24]
    break;
 8007148:	e107      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800714a:	4b89      	ldr	r3, [pc, #548]	; (8007370 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800714c:	61bb      	str	r3, [r7, #24]
    break;
 800714e:	e104      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007150:	4b88      	ldr	r3, [pc, #544]	; (8007374 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007152:	61bb      	str	r3, [r7, #24]
    break;
 8007154:	e101      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007156:	4b84      	ldr	r3, [pc, #528]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007160:	4b81      	ldr	r3, [pc, #516]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800716a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800716c:	4b7e      	ldr	r3, [pc, #504]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007176:	4b7c      	ldr	r3, [pc, #496]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	08db      	lsrs	r3, r3, #3
 800717c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	fb02 f303 	mul.w	r3, r2, r3
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80da 	beq.w	800734e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d05a      	beq.n	8007256 <HAL_RCC_GetSysClockFreq+0x1b2>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d302      	bcc.n	80071aa <HAL_RCC_GetSysClockFreq+0x106>
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d078      	beq.n	800729a <HAL_RCC_GetSysClockFreq+0x1f6>
 80071a8:	e099      	b.n	80072de <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071aa:	4b6f      	ldr	r3, [pc, #444]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02d      	beq.n	8007212 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071b6:	4b6c      	ldr	r3, [pc, #432]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	08db      	lsrs	r3, r3, #3
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	4a6a      	ldr	r2, [pc, #424]	; (800736c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80071c2:	fa22 f303 	lsr.w	r3, r2, r3
 80071c6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e0:	4b61      	ldr	r3, [pc, #388]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007378 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007210:	e087      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800737c <HAL_RCC_GetSysClockFreq+0x2d8>
 8007220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007224:	4b50      	ldr	r3, [pc, #320]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	ed97 6a02 	vldr	s12, [r7, #8]
 8007238:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007378 <HAL_RCC_GetSysClockFreq+0x2d4>
 800723c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007254:	e065      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007260:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007380 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007268:	4b3f      	ldr	r3, [pc, #252]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007278:	ed97 6a02 	vldr	s12, [r7, #8]
 800727c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007378 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007298:	e043      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007384 <HAL_RCC_GetSysClockFreq+0x2e0>
 80072a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ac:	4b2e      	ldr	r3, [pc, #184]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007378 <HAL_RCC_GetSysClockFreq+0x2d4>
 80072c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072dc:	e021      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007380 <HAL_RCC_GetSysClockFreq+0x2dc>
 80072ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f0:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007300:	ed97 6a02 	vldr	s12, [r7, #8]
 8007304:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007378 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007320:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007322:	4b11      	ldr	r3, [pc, #68]	; (8007368 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	0a5b      	lsrs	r3, r3, #9
 8007328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732c:	3301      	adds	r3, #1
 800732e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800733a:	edd7 6a07 	vldr	s13, [r7, #28]
 800733e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007346:	ee17 3a90 	vmov	r3, s15
 800734a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800734c:	e005      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	61bb      	str	r3, [r7, #24]
    break;
 8007352:	e002      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007356:	61bb      	str	r3, [r7, #24]
    break;
 8007358:	bf00      	nop
  }

  return sysclockfreq;
 800735a:	69bb      	ldr	r3, [r7, #24]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3724      	adds	r7, #36	; 0x24
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	58024400 	.word	0x58024400
 800736c:	03d09000 	.word	0x03d09000
 8007370:	003d0900 	.word	0x003d0900
 8007374:	017d7840 	.word	0x017d7840
 8007378:	46000000 	.word	0x46000000
 800737c:	4c742400 	.word	0x4c742400
 8007380:	4a742400 	.word	0x4a742400
 8007384:	4bbebc20 	.word	0x4bbebc20

08007388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800738e:	f7ff fe89 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8007392:	4601      	mov	r1, r0
 8007394:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	4a0f      	ldr	r2, [pc, #60]	; (80073dc <HAL_RCC_GetHCLKFreq+0x54>)
 80073a0:	5cd3      	ldrb	r3, [r2, r3]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	fa21 f303 	lsr.w	r3, r1, r3
 80073aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	4a09      	ldr	r2, [pc, #36]	; (80073dc <HAL_RCC_GetHCLKFreq+0x54>)
 80073b6:	5cd3      	ldrb	r3, [r2, r3]
 80073b8:	f003 031f 	and.w	r3, r3, #31
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	fa22 f303 	lsr.w	r3, r2, r3
 80073c2:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80073c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073c6:	4a07      	ldr	r2, [pc, #28]	; (80073e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80073ce:	681b      	ldr	r3, [r3, #0]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	58024400 	.word	0x58024400
 80073dc:	0800e078 	.word	0x0800e078
 80073e0:	2400002c 	.word	0x2400002c
 80073e4:	24000028 	.word	0x24000028

080073e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073ec:	f7ff ffcc 	bl	8007388 <HAL_RCC_GetHCLKFreq>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <HAL_RCC_GetPCLK1Freq+0x24>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	4a04      	ldr	r2, [pc, #16]	; (8007410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073fe:	5cd3      	ldrb	r3, [r2, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	58024400 	.word	0x58024400
 8007410:	0800e078 	.word	0x0800e078

08007414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007418:	f7ff ffb6 	bl	8007388 <HAL_RCC_GetHCLKFreq>
 800741c:	4601      	mov	r1, r0
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	4a04      	ldr	r2, [pc, #16]	; (800743c <HAL_RCC_GetPCLK2Freq+0x28>)
 800742a:	5cd3      	ldrb	r3, [r2, r3]
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	58024400 	.word	0x58024400
 800743c:	0800e078 	.word	0x0800e078

08007440 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800744c:	2300      	movs	r3, #0
 800744e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d03d      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007464:	d013      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746a:	d802      	bhi.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007470:	e01f      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007476:	d013      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800747c:	d01c      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800747e:	e018      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007480:	4baf      	ldr	r3, [pc, #700]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	4aae      	ldr	r2, [pc, #696]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800748a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800748c:	e015      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	2102      	movs	r1, #2
 8007494:	4618      	mov	r0, r3
 8007496:	f001 fd23 	bl	8008ee0 <RCCEx_PLL2_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800749e:	e00c      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 fdcc 	bl	8009044 <RCCEx_PLL3_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	75fb      	strb	r3, [r7, #23]
      break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80074b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074c0:	4b9f      	ldr	r3, [pc, #636]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074cc:	499c      	ldr	r1, [pc, #624]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	650b      	str	r3, [r1, #80]	; 0x50
 80074d2:	e001      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d03d      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d826      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007509 	.word	0x08007509
 80074f8:	08007517 	.word	0x08007517
 80074fc:	08007529 	.word	0x08007529
 8007500:	08007541 	.word	0x08007541
 8007504:	08007541 	.word	0x08007541
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007508:	4b8d      	ldr	r3, [pc, #564]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	4a8c      	ldr	r2, [pc, #560]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800750e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007514:	e015      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fcdf 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007526:	e00c      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3324      	adds	r3, #36	; 0x24
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fd88 	bl	8009044 <RCCEx_PLL3_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	e000      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007548:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	f023 0207 	bic.w	r2, r3, #7
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	497a      	ldr	r1, [pc, #488]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007556:	4313      	orrs	r3, r2
 8007558:	650b      	str	r3, [r1, #80]	; 0x50
 800755a:	e001      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03e      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007570:	2b80      	cmp	r3, #128	; 0x80
 8007572:	d01c      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007574:	2b80      	cmp	r3, #128	; 0x80
 8007576:	d804      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d00d      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007580:	e01e      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007582:	2bc0      	cmp	r3, #192	; 0xc0
 8007584:	d01f      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758a:	d01e      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800758c:	e018      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758e:	4b6c      	ldr	r3, [pc, #432]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	4a6b      	ldr	r2, [pc, #428]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800759a:	e017      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3304      	adds	r3, #4
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fc9c 	bl	8008ee0 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075ac:	e00e      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3324      	adds	r3, #36	; 0x24
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 fd45 	bl	8009044 <RCCEx_PLL3_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075be:	e005      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
      break;
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80075ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075d2:	4b5b      	ldr	r3, [pc, #364]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	4958      	ldr	r1, [pc, #352]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	650b      	str	r3, [r1, #80]	; 0x50
 80075e4:	e001      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d044      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007600:	d01f      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007606:	d805      	bhi.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800760c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007610:	d00e      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007612:	e01f      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007614:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007618:	d01f      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800761a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800761e:	d01e      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007620:	e018      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007622:	4b47      	ldr	r3, [pc, #284]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	4a46      	ldr	r2, [pc, #280]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800762c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800762e:	e017      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3304      	adds	r3, #4
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fc52 	bl	8008ee0 <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007640:	e00e      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fcfb 	bl	8009044 <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007652:	e005      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	e002      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800765e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007666:	4b36      	ldr	r3, [pc, #216]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007674:	4932      	ldr	r1, [pc, #200]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007676:	4313      	orrs	r3, r2
 8007678:	658b      	str	r3, [r1, #88]	; 0x58
 800767a:	e001      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007688:	2b00      	cmp	r3, #0
 800768a:	d044      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007696:	d01f      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800769c:	d805      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80076a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076a6:	d00e      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80076a8:	e01f      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80076aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076ae:	d01f      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80076b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076b4:	d01e      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80076b6:	e018      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b8:	4b21      	ldr	r3, [pc, #132]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4a20      	ldr	r2, [pc, #128]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076c4:	e017      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3304      	adds	r3, #4
 80076ca:	2100      	movs	r1, #0
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fc07 	bl	8008ee0 <RCCEx_PLL2_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076d6:	e00e      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3324      	adds	r3, #36	; 0x24
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fcb0 	bl	8009044 <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076e8:	e005      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
      break;
 80076ee:	e002      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80076f0:	bf00      	nop
 80076f2:	e000      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80076f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800770a:	490d      	ldr	r1, [pc, #52]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800770c:	4313      	orrs	r3, r2
 800770e:	658b      	str	r3, [r1, #88]	; 0x58
 8007710:	e001      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d035      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007726:	2b10      	cmp	r3, #16
 8007728:	d00c      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800772a:	2b10      	cmp	r3, #16
 800772c:	d802      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01b      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007732:	e017      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007734:	2b20      	cmp	r3, #32
 8007736:	d00c      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007738:	2b30      	cmp	r3, #48	; 0x30
 800773a:	d018      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800773c:	e012      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007744:	4baf      	ldr	r3, [pc, #700]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4aae      	ldr	r2, [pc, #696]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800774a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007750:	e00e      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
 8007756:	2102      	movs	r1, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fbc1 	bl	8008ee0 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007762:	e005      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
      break;
 8007768:	e002      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800776e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007776:	4ba3      	ldr	r3, [pc, #652]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007782:	49a0      	ldr	r1, [pc, #640]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007784:	4313      	orrs	r3, r2
 8007786:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007788:	e001      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d042      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d01f      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a8:	d805      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80077ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b2:	d00e      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80077b4:	e01f      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80077b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077ba:	d01f      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80077bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c0:	d01e      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80077c2:	e018      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c4:	4b8f      	ldr	r3, [pc, #572]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	4a8e      	ldr	r2, [pc, #568]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077d0:	e017      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fb81 	bl	8008ee0 <RCCEx_PLL2_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077e2:	e00e      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 fc2a 	bl	8009044 <RCCEx_PLL3_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077f4:	e005      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
      break;
 80077fa:	e002      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007808:	4b7e      	ldr	r3, [pc, #504]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007814:	497b      	ldr	r1, [pc, #492]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	650b      	str	r3, [r1, #80]	; 0x50
 800781a:	e001      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d042      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007834:	d01b      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800783a:	d805      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d022      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007844:	d00a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007846:	e01b      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007848:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800784c:	d01d      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800784e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007852:	d01c      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007854:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007858:	d01b      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800785a:	e011      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3304      	adds	r3, #4
 8007860:	2101      	movs	r1, #1
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fb3c 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800786c:	e012      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3324      	adds	r3, #36	; 0x24
 8007872:	2101      	movs	r1, #1
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fbe5 	bl	8009044 <RCCEx_PLL3_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800787e:	e009      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
      break;
 8007884:	e006      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007886:	bf00      	nop
 8007888:	e004      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800788a:	bf00      	nop
 800788c:	e002      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800789a:	4b5a      	ldr	r3, [pc, #360]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800789c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a6:	4957      	ldr	r1, [pc, #348]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	650b      	str	r3, [r1, #80]	; 0x50
 80078ac:	e001      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d044      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c8:	d01b      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80078ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ce:	d805      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d022      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80078d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078d8:	d00a      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80078da:	e01b      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d01d      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80078e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078e6:	d01c      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80078e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078ec:	d01b      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80078ee:	e011      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	2101      	movs	r1, #1
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 faf2 	bl	8008ee0 <RCCEx_PLL2_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007900:	e012      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3324      	adds	r3, #36	; 0x24
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fb9b 	bl	8009044 <RCCEx_PLL3_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007912:	e009      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
      break;
 8007918:	e006      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800791a:	bf00      	nop
 800791c:	e004      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800791e:	bf00      	nop
 8007920:	e002      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007922:	bf00      	nop
 8007924:	e000      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800792e:	4b35      	ldr	r3, [pc, #212]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800793c:	4931      	ldr	r1, [pc, #196]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800793e:	4313      	orrs	r3, r2
 8007940:	658b      	str	r3, [r1, #88]	; 0x58
 8007942:	e001      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d02d      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795c:	d005      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800795e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007962:	d009      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d013      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007968:	e00f      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796a:	4b26      	ldr	r3, [pc, #152]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007976:	e00c      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3304      	adds	r3, #4
 800797c:	2101      	movs	r1, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f001 faae 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007988:	e003      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	75fb      	strb	r3, [r7, #23]
      break;
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007998:	4b1a      	ldr	r3, [pc, #104]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800799a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a4:	4917      	ldr	r1, [pc, #92]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	650b      	str	r3, [r1, #80]	; 0x50
 80079aa:	e001      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d035      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d81b      	bhi.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a09 	.word	0x08007a09
 80079d0:	080079dd 	.word	0x080079dd
 80079d4:	080079eb 	.word	0x080079eb
 80079d8:	08007a09 	.word	0x08007a09
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079e8:	e00f      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3304      	adds	r3, #4
 80079ee:	2102      	movs	r1, #2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 fa75 	bl	8008ee0 <RCCEx_PLL2_Config>
 80079f6:	4603      	mov	r3, r0
 80079f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079fa:	e006      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
      break;
 8007a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a10:	4bba      	ldr	r3, [pc, #744]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a14:	f023 0203 	bic.w	r2, r3, #3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	49b7      	ldr	r1, [pc, #732]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a22:	e001      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8086 	beq.w	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a36:	4bb2      	ldr	r3, [pc, #712]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4ab1      	ldr	r2, [pc, #708]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a42:	f7fa fc85 	bl	8002350 <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a48:	e009      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a4a:	f7fa fc81 	bl	8002350 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b64      	cmp	r3, #100	; 0x64
 8007a56:	d902      	bls.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	75fb      	strb	r3, [r7, #23]
        break;
 8007a5c:	e005      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5e:	4ba8      	ldr	r3, [pc, #672]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ef      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d166      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a70:	4ba2      	ldr	r3, [pc, #648]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a7a:	4053      	eors	r3, r2
 8007a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d013      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a84:	4b9d      	ldr	r3, [pc, #628]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a8e:	4b9b      	ldr	r3, [pc, #620]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	4a9a      	ldr	r2, [pc, #616]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a9a:	4b98      	ldr	r3, [pc, #608]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	4a97      	ldr	r2, [pc, #604]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007aa6:	4a95      	ldr	r2, [pc, #596]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab6:	d115      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fa fc4a 	bl	8002350 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac0:	f7fa fc46 	bl	8002350 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d902      	bls.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	75fb      	strb	r3, [r7, #23]
            break;
 8007ad6:	e005      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ad8:	4b88      	ldr	r3, [pc, #544]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0ed      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d126      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af8:	d10d      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007afa:	4b80      	ldr	r3, [pc, #512]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b08:	0919      	lsrs	r1, r3, #4
 8007b0a:	4b7e      	ldr	r3, [pc, #504]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007b0c:	400b      	ands	r3, r1
 8007b0e:	497b      	ldr	r1, [pc, #492]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	610b      	str	r3, [r1, #16]
 8007b14:	e005      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007b16:	4b79      	ldr	r3, [pc, #484]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	4a78      	ldr	r2, [pc, #480]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b20:	6113      	str	r3, [r2, #16]
 8007b22:	4b76      	ldr	r3, [pc, #472]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b30:	4972      	ldr	r1, [pc, #456]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	670b      	str	r3, [r1, #112]	; 0x70
 8007b36:	e004      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	75bb      	strb	r3, [r7, #22]
 8007b3c:	e001      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d07d      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b52:	2b28      	cmp	r3, #40	; 0x28
 8007b54:	d866      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007c2b 	.word	0x08007c2b
 8007b60:	08007c25 	.word	0x08007c25
 8007b64:	08007c25 	.word	0x08007c25
 8007b68:	08007c25 	.word	0x08007c25
 8007b6c:	08007c25 	.word	0x08007c25
 8007b70:	08007c25 	.word	0x08007c25
 8007b74:	08007c25 	.word	0x08007c25
 8007b78:	08007c25 	.word	0x08007c25
 8007b7c:	08007c01 	.word	0x08007c01
 8007b80:	08007c25 	.word	0x08007c25
 8007b84:	08007c25 	.word	0x08007c25
 8007b88:	08007c25 	.word	0x08007c25
 8007b8c:	08007c25 	.word	0x08007c25
 8007b90:	08007c25 	.word	0x08007c25
 8007b94:	08007c25 	.word	0x08007c25
 8007b98:	08007c25 	.word	0x08007c25
 8007b9c:	08007c13 	.word	0x08007c13
 8007ba0:	08007c25 	.word	0x08007c25
 8007ba4:	08007c25 	.word	0x08007c25
 8007ba8:	08007c25 	.word	0x08007c25
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007c25 	.word	0x08007c25
 8007bb4:	08007c25 	.word	0x08007c25
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007c2b 	.word	0x08007c2b
 8007bc0:	08007c25 	.word	0x08007c25
 8007bc4:	08007c25 	.word	0x08007c25
 8007bc8:	08007c25 	.word	0x08007c25
 8007bcc:	08007c25 	.word	0x08007c25
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007c25 	.word	0x08007c25
 8007bd8:	08007c25 	.word	0x08007c25
 8007bdc:	08007c2b 	.word	0x08007c2b
 8007be0:	08007c25 	.word	0x08007c25
 8007be4:	08007c25 	.word	0x08007c25
 8007be8:	08007c25 	.word	0x08007c25
 8007bec:	08007c25 	.word	0x08007c25
 8007bf0:	08007c25 	.word	0x08007c25
 8007bf4:	08007c25 	.word	0x08007c25
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	08007c2b 	.word	0x08007c2b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3304      	adds	r3, #4
 8007c04:	2101      	movs	r1, #1
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f96a 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c10:	e00c      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3324      	adds	r3, #36	; 0x24
 8007c16:	2101      	movs	r1, #1
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 fa13 	bl	8009044 <RCCEx_PLL3_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c22:	e003      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
      break;
 8007c28:	e000      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c32:	4b32      	ldr	r3, [pc, #200]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3e:	492f      	ldr	r1, [pc, #188]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	654b      	str	r3, [r1, #84]	; 0x54
 8007c44:	e001      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d037      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	d820      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007ca7 	.word	0x08007ca7
 8007c68:	08007c7d 	.word	0x08007c7d
 8007c6c:	08007c8f 	.word	0x08007c8f
 8007c70:	08007ca7 	.word	0x08007ca7
 8007c74:	08007ca7 	.word	0x08007ca7
 8007c78:	08007ca7 	.word	0x08007ca7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	2101      	movs	r1, #1
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f92c 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c8c:	e00c      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3324      	adds	r3, #36	; 0x24
 8007c92:	2101      	movs	r1, #1
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f9d5 	bl	8009044 <RCCEx_PLL3_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c9e:	e003      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	f023 0207 	bic.w	r2, r3, #7
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cba:	4910      	ldr	r1, [pc, #64]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	654b      	str	r3, [r1, #84]	; 0x54
 8007cc0:	e001      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d040      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	d827      	bhi.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d33 	.word	0x08007d33
 8007ce8:	08007d09 	.word	0x08007d09
 8007cec:	08007d1b 	.word	0x08007d1b
 8007cf0:	08007d33 	.word	0x08007d33
 8007cf4:	08007d33 	.word	0x08007d33
 8007cf8:	08007d33 	.word	0x08007d33
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	58024800 	.word	0x58024800
 8007d04:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f8e6 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d18:	e00c      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3324      	adds	r3, #36	; 0x24
 8007d1e:	2101      	movs	r1, #1
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f98f 	bl	8009044 <RCCEx_PLL3_Config>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d2a:	e003      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d30:	e000      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d3a:	4bb2      	ldr	r3, [pc, #712]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3e:	f023 0207 	bic.w	r2, r3, #7
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d48:	49ae      	ldr	r1, [pc, #696]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8007d4e:	e001      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d044      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6a:	d01b      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d70:	d805      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d022      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d7a:	d00a      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007d7c:	e01b      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d82:	d01d      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d88:	d01c      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d8e:	d01b      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007d90:	e011      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3304      	adds	r3, #4
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 f8a1 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007da2:	e012      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3324      	adds	r3, #36	; 0x24
 8007da8:	2102      	movs	r1, #2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 f94a 	bl	8009044 <RCCEx_PLL3_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007db4:	e009      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
      break;
 8007dba:	e006      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dd0:	4b8c      	ldr	r3, [pc, #560]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dde:	4989      	ldr	r1, [pc, #548]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	654b      	str	r3, [r1, #84]	; 0x54
 8007de4:	e001      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d044      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e00:	d01b      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e06:	d805      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d022      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e10:	d00a      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007e12:	e01b      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e18:	d01d      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007e1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e1e:	d01c      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e24:	d01b      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007e26:	e011      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 f856 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e38:	e012      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3324      	adds	r3, #36	; 0x24
 8007e3e:	2102      	movs	r1, #2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 f8ff 	bl	8009044 <RCCEx_PLL3_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e4a:	e009      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e50:	e006      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e52:	bf00      	nop
 8007e54:	e004      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e56:	bf00      	nop
 8007e58:	e002      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e000      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e66:	4b67      	ldr	r3, [pc, #412]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e74:	4963      	ldr	r1, [pc, #396]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	658b      	str	r3, [r1, #88]	; 0x58
 8007e7a:	e001      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d044      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e96:	d01b      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e9c:	d805      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d022      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	d00a      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ea8:	e01b      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eae:	d01d      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007eb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007eb4:	d01c      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007eb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007eba:	d01b      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007ebc:	e011      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 f80b 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ece:	e012      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3324      	adds	r3, #36	; 0x24
 8007ed4:	2102      	movs	r1, #2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 f8b4 	bl	8009044 <RCCEx_PLL3_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ee0:	e009      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee6:	e006      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ee8:	bf00      	nop
 8007eea:	e004      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007eec:	bf00      	nop
 8007eee:	e002      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ef0:	bf00      	nop
 8007ef2:	e000      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007efc:	4b41      	ldr	r3, [pc, #260]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f0a:	493e      	ldr	r1, [pc, #248]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	658b      	str	r3, [r1, #88]	; 0x58
 8007f10:	e001      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d01a      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2c:	d10a      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3324      	adds	r3, #36	; 0x24
 8007f32:	2102      	movs	r1, #2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f885 	bl	8009044 <RCCEx_PLL3_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f44:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f52:	492c      	ldr	r1, [pc, #176]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6e:	d10a      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3324      	adds	r3, #36	; 0x24
 8007f74:	2102      	movs	r1, #2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f864 	bl	8009044 <RCCEx_PLL3_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f86:	4b1f      	ldr	r3, [pc, #124]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f94:	491b      	ldr	r1, [pc, #108]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d032      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb0:	d00d      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb6:	d016      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d111      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 ff8c 	bl	8008ee0 <RCCEx_PLL2_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fcc:	e00c      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3324      	adds	r3, #36	; 0x24
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 f835 	bl	8009044 <RCCEx_PLL3_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fde:	e003      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10c      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ffc:	4901      	ldr	r1, [pc, #4]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	658b      	str	r3, [r1, #88]	; 0x58
 8008002:	e003      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d02f      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800801e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008022:	d00c      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008024:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008028:	d015      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800802a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800802e:	d10f      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4b71      	ldr	r3, [pc, #452]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	4a70      	ldr	r2, [pc, #448]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800803c:	e00c      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3324      	adds	r3, #36	; 0x24
 8008042:	2101      	movs	r1, #1
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fffd 	bl	8009044 <RCCEx_PLL3_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800804e:	e003      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
      break;
 8008054:	e000      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10a      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800805e:	4b66      	ldr	r3, [pc, #408]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806c:	4962      	ldr	r1, [pc, #392]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800806e:	4313      	orrs	r3, r2
 8008070:	654b      	str	r3, [r1, #84]	; 0x54
 8008072:	e001      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d029      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008090:	d007      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008092:	e00f      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008094:	4b58      	ldr	r3, [pc, #352]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	4a57      	ldr	r2, [pc, #348]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800809a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080a0:	e00b      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3304      	adds	r3, #4
 80080a6:	2102      	movs	r1, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 ff19 	bl	8008ee0 <RCCEx_PLL2_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080b2:	e002      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
      break;
 80080b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080c0:	4b4d      	ldr	r3, [pc, #308]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080cc:	494a      	ldr	r1, [pc, #296]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080d2:	e001      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3324      	adds	r3, #36	; 0x24
 80080e8:	2102      	movs	r1, #2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 ffaa 	bl	8009044 <RCCEx_PLL3_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d02f      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800810a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810e:	d00c      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008114:	d802      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d011      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800811a:	e00d      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800811c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008120:	d00f      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008126:	d00e      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008128:	e006      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800812a:	4b33      	ldr	r3, [pc, #204]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	4a32      	ldr	r2, [pc, #200]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008136:	e007      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
      break;
 800813c:	e004      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800814e:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800815a:	4927      	ldr	r1, [pc, #156]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800815c:	4313      	orrs	r3, r2
 800815e:	654b      	str	r3, [r1, #84]	; 0x54
 8008160:	e001      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d008      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008172:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817e:	491e      	ldr	r1, [pc, #120]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008180:	4313      	orrs	r3, r2
 8008182:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d008      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008190:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008194:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800819c:	4916      	ldr	r1, [pc, #88]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	4a11      	ldr	r2, [pc, #68]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081b8:	6113      	str	r3, [r2, #16]
 80081ba:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081c4:	490c      	ldr	r1, [pc, #48]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da08      	bge.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081de:	4906      	ldr	r1, [pc, #24]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80081e4:	7dbb      	ldrb	r3, [r7, #22]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	58024400 	.word	0x58024400

080081fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b090      	sub	sp, #64	; 0x40
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800820a:	d150      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800820c:	4ba1      	ldr	r3, [pc, #644]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	2b04      	cmp	r3, #4
 800821a:	d844      	bhi.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008239 	.word	0x08008239
 8008228:	08008249 	.word	0x08008249
 800822c:	08008259 	.word	0x08008259
 8008230:	080082a1 	.word	0x080082a1
 8008234:	08008269 	.word	0x08008269
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fd03 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008246:	e241      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008248:	f107 0318 	add.w	r3, r7, #24
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fa63 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008256:	e239      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008258:	f107 030c 	add.w	r3, r7, #12
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fba7 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008266:	e231      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008268:	4b8a      	ldr	r3, [pc, #552]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800826a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008270:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008278:	4b87      	ldr	r3, [pc, #540]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800827c:	e226      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008284:	d102      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008286:	4b85      	ldr	r3, [pc, #532]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828a:	e21f      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800828c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008292:	d102      	bne.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008294:	4b82      	ldr	r3, [pc, #520]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008298:	e218      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829e:	e215      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082a0:	4b80      	ldr	r3, [pc, #512]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082a4:	e212      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082aa:	bf00      	nop
 80082ac:	e20e      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b4:	d14f      	bne.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80082b6:	4b77      	ldr	r3, [pc, #476]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80082be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	2b80      	cmp	r3, #128	; 0x80
 80082c4:	d01c      	beq.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80082c6:	2b80      	cmp	r3, #128	; 0x80
 80082c8:	d804      	bhi.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d00e      	beq.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80082d2:	e03c      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80082d4:	2bc0      	cmp	r3, #192	; 0xc0
 80082d6:	d037      	beq.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80082d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082dc:	d018      	beq.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80082de:	e036      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fcaf 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ee:	e1ed      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082f0:	f107 0318 	add.w	r3, r7, #24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fa0f 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fe:	e1e5      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008300:	f107 030c 	add.w	r3, r7, #12
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fb53 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800830e:	e1dd      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008310:	4b60      	ldr	r3, [pc, #384]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008318:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008320:	4b5d      	ldr	r3, [pc, #372]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008324:	e1d2      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800832c:	d102      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800832e:	4b5b      	ldr	r3, [pc, #364]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008332:	e1cb      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833a:	d102      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800833c:	4b58      	ldr	r3, [pc, #352]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008340:	e1c4      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008346:	e1c1      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008348:	4b56      	ldr	r3, [pc, #344]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834c:	e1be      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008352:	bf00      	nop
 8008354:	e1ba      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835c:	d153      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800835e:	4b4d      	ldr	r3, [pc, #308]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008366:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800836e:	d01f      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008374:	d805      	bhi.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800837a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800837e:	d00f      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008380:	e03d      	b.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008382:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008386:	d037      	beq.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800838c:	d018      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800838e:	e036      	b.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fc57 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839e:	e195      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a0:	f107 0318 	add.w	r3, r7, #24
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f9b7 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ae:	e18d      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b0:	f107 030c 	add.w	r3, r7, #12
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fafb 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083be:	e185      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083c0:	4b34      	ldr	r3, [pc, #208]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80083ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083d0:	4b31      	ldr	r3, [pc, #196]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083d4:	e17a      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083dc:	d102      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80083de:	4b2f      	ldr	r3, [pc, #188]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e2:	e173      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ea:	d102      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80083ec:	4b2c      	ldr	r3, [pc, #176]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f0:	e16c      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f6:	e169      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083f8:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083fc:	e166      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008402:	bf00      	nop
 8008404:	e162      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800840c:	d15d      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800840e:	4b21      	ldr	r3, [pc, #132]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008416:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841e:	d01f      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008424:	d805      	bhi.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800842a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800842e:	d00f      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008430:	e047      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008432:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008436:	d041      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800843c:	d018      	beq.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800843e:	e040      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fbff 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800844e:	e13d      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008450:	f107 0318 	add.w	r3, r7, #24
 8008454:	4618      	mov	r0, r3
 8008456:	f000 f95f 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800845e:	e135      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008460:	f107 030c 	add.w	r3, r7, #12
 8008464:	4618      	mov	r0, r3
 8008466:	f000 faa3 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800846e:	e12d      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008470:	4b08      	ldr	r3, [pc, #32]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008478:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800847a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008484:	e122      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800848c:	d10c      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800848e:	4b03      	ldr	r3, [pc, #12]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008492:	e11b      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008494:	58024400 	.word	0x58024400
 8008498:	03d09000 	.word	0x03d09000
 800849c:	003d0900 	.word	0x003d0900
 80084a0:	017d7840 	.word	0x017d7840
 80084a4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ae:	d102      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80084b0:	4b89      	ldr	r3, [pc, #548]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b4:	e10a      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ba:	e107      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084bc:	4b87      	ldr	r3, [pc, #540]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c0:	e104      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c6:	bf00      	nop
 80084c8:	e100      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d0:	d153      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80084d2:	4b83      	ldr	r3, [pc, #524]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e2:	d01f      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80084e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e8:	d805      	bhi.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f2:	d00f      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80084f4:	e03d      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80084f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084fa:	d037      	beq.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80084fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008500:	d018      	beq.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008502:	e036      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fb9d 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008512:	e0db      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008514:	f107 0318 	add.w	r3, r7, #24
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f8fd 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008522:	e0d3      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fa41 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008532:	e0cb      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008534:	4b6a      	ldr	r3, [pc, #424]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800853c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008544:	4b67      	ldr	r3, [pc, #412]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008548:	e0c0      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008550:	d102      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008552:	4b65      	ldr	r3, [pc, #404]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008556:	e0b9      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800855e:	d102      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008560:	4b5d      	ldr	r3, [pc, #372]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008564:	e0b2      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800856a:	e0af      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800856c:	4b5b      	ldr	r3, [pc, #364]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008570:	e0ac      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008576:	bf00      	nop
 8008578:	e0a8      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008580:	d13d      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008582:	4b57      	ldr	r3, [pc, #348]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800858a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008592:	d00c      	beq.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008598:	d011      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d12b      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859e:	f107 0318 	add.w	r3, r7, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f8b8 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ac:	e08e      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ae:	f107 030c 	add.w	r3, r7, #12
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f9fc 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085bc:	e086      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085be:	4b48      	ldr	r3, [pc, #288]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80085c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80085c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80085ce:	4b45      	ldr	r3, [pc, #276]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80085d2:	e07b      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80085dc:	4b42      	ldr	r3, [pc, #264]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e0:	e074      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e8:	d102      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80085ea:	4b3b      	ldr	r3, [pc, #236]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ee:	e06d      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085f4:	e06a      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085fa:	bf00      	nop
 80085fc:	e066      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008604:	d11f      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008606:	4b36      	ldr	r3, [pc, #216]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800861a:	d008      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800861c:	e00f      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800861e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fb10 	bl	8008c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800862c:	e04e      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862e:	f107 0318 	add.w	r3, r7, #24
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f870 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800863c:	e046      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008642:	bf00      	nop
 8008644:	e042      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800864c:	d13c      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800864e:	4b24      	ldr	r3, [pc, #144]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008652:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008656:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865e:	d01e      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008664:	d805      	bhi.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00d      	beq.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800866a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800866e:	d00e      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008670:	e026      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008676:	d01d      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800867c:	d01d      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800867e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008682:	d014      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008684:	e01c      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008686:	f000 f831 	bl	80086ec <HAL_RCCEx_GetD3PCLK1Freq>
 800868a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800868c:	e01e      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868e:	f107 0318 	add.w	r3, r7, #24
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f840 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800869c:	e016      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f984 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ac:	e00e      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b2:	e00b      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80086b4:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b8:	e008      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086be:	e005      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086c4:	bf00      	nop
 80086c6:	e001      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80086cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3740      	adds	r7, #64	; 0x40
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	017d7840 	.word	0x017d7840
 80086dc:	00bb8000 	.word	0x00bb8000
 80086e0:	58024400 	.word	0x58024400
 80086e4:	03d09000 	.word	0x03d09000
 80086e8:	003d0900 	.word	0x003d0900

080086ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086f0:	f7fe fe4a 	bl	8007388 <HAL_RCC_GetHCLKFreq>
 80086f4:	4601      	mov	r1, r0
 80086f6:	4b06      	ldr	r3, [pc, #24]	; (8008710 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	091b      	lsrs	r3, r3, #4
 80086fc:	f003 0307 	and.w	r3, r3, #7
 8008700:	4a04      	ldr	r2, [pc, #16]	; (8008714 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008702:	5cd3      	ldrb	r3, [r2, r3]
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800870c:	4618      	mov	r0, r3
 800870e:	bd80      	pop	{r7, pc}
 8008710:	58024400 	.word	0x58024400
 8008714:	0800e078 	.word	0x0800e078

08008718 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008718:	b480      	push	{r7}
 800871a:	b089      	sub	sp, #36	; 0x24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008720:	4b9d      	ldr	r3, [pc, #628]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	f003 0303 	and.w	r3, r3, #3
 8008728:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800872a:	4b9b      	ldr	r3, [pc, #620]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872e:	0b1b      	lsrs	r3, r3, #12
 8008730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008734:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008736:	4b98      	ldr	r3, [pc, #608]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	091b      	lsrs	r3, r3, #4
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008742:	4b95      	ldr	r3, [pc, #596]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	fb02 f303 	mul.w	r3, r2, r3
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 810a 	beq.w	800897a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d05a      	beq.n	8008822 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800876c:	2b01      	cmp	r3, #1
 800876e:	d302      	bcc.n	8008776 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008770:	2b02      	cmp	r3, #2
 8008772:	d078      	beq.n	8008866 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008774:	e099      	b.n	80088aa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008776:	4b88      	ldr	r3, [pc, #544]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d02d      	beq.n	80087de <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008782:	4b85      	ldr	r3, [pc, #532]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	08db      	lsrs	r3, r3, #3
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	4a83      	ldr	r2, [pc, #524]	; (800899c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800878e:	fa22 f303 	lsr.w	r3, r2, r3
 8008792:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ac:	4b7a      	ldr	r3, [pc, #488]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80087c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087dc:	e087      	b.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80087ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f0:	4b69      	ldr	r3, [pc, #420]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008800:	ed97 6a03 	vldr	s12, [r7, #12]
 8008804:	eddf 5a66 	vldr	s11, [pc, #408]	; 80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008820:	e065      	b.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008834:	4b58      	ldr	r3, [pc, #352]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883c:	ee07 3a90 	vmov	s15, r3
 8008840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008844:	ed97 6a03 	vldr	s12, [r7, #12]
 8008848:	eddf 5a55 	vldr	s11, [pc, #340]	; 80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800884c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008864:	e043      	b.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008870:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008878:	4b47      	ldr	r3, [pc, #284]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008888:	ed97 6a03 	vldr	s12, [r7, #12]
 800888c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800889c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088a8:	e021      	b.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80088b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c4:	ee07 3a90 	vmov	s15, r3
 80088c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80089a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80088d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088ec:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80088ee:	4b2a      	ldr	r3, [pc, #168]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	0a5b      	lsrs	r3, r3, #9
 80088f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008908:	edd7 6a07 	vldr	s13, [r7, #28]
 800890c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008914:	ee17 2a90 	vmov	r2, s15
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800891c:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	0c1b      	lsrs	r3, r3, #16
 8008922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008936:	edd7 6a07 	vldr	s13, [r7, #28]
 800893a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800893e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008942:	ee17 2a90 	vmov	r2, s15
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800894a:	4b13      	ldr	r3, [pc, #76]	; (8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	0e1b      	lsrs	r3, r3, #24
 8008950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008964:	edd7 6a07 	vldr	s13, [r7, #28]
 8008968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008970:	ee17 2a90 	vmov	r2, s15
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008978:	e008      	b.n	800898c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	609a      	str	r2, [r3, #8]
}
 800898c:	bf00      	nop
 800898e:	3724      	adds	r7, #36	; 0x24
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	58024400 	.word	0x58024400
 800899c:	03d09000 	.word	0x03d09000
 80089a0:	46000000 	.word	0x46000000
 80089a4:	4c742400 	.word	0x4c742400
 80089a8:	4a742400 	.word	0x4a742400
 80089ac:	4bbebc20 	.word	0x4bbebc20

080089b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089b8:	4b9d      	ldr	r3, [pc, #628]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80089c2:	4b9b      	ldr	r3, [pc, #620]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	0d1b      	lsrs	r3, r3, #20
 80089c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089ce:	4b98      	ldr	r3, [pc, #608]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80089da:	4b95      	ldr	r3, [pc, #596]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	08db      	lsrs	r3, r3, #3
 80089e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	fb02 f303 	mul.w	r3, r2, r3
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 810a 	beq.w	8008c12 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d05a      	beq.n	8008aba <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d302      	bcc.n	8008a0e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d078      	beq.n	8008afe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008a0c:	e099      	b.n	8008b42 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a0e:	4b88      	ldr	r3, [pc, #544]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d02d      	beq.n	8008a76 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a1a:	4b85      	ldr	r3, [pc, #532]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	08db      	lsrs	r3, r3, #3
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	4a83      	ldr	r2, [pc, #524]	; (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008a26:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a44:	4b7a      	ldr	r3, [pc, #488]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4c:	ee07 3a90 	vmov	s15, r3
 8008a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a58:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a70:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a74:	e087      	b.n	8008b86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	ee07 3a90 	vmov	s15, r3
 8008a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a80:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a88:	4b69      	ldr	r3, [pc, #420]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a90:	ee07 3a90 	vmov	s15, r3
 8008a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a98:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab8:	e065      	b.n	8008b86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008acc:	4b58      	ldr	r3, [pc, #352]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad4:	ee07 3a90 	vmov	s15, r3
 8008ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afc:	e043      	b.n	8008b86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	ee07 3a90 	vmov	s15, r3
 8008b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b10:	4b47      	ldr	r3, [pc, #284]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b18:	ee07 3a90 	vmov	s15, r3
 8008b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b24:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b40:	e021      	b.n	8008b86 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	ee07 3a90 	vmov	s15, r3
 8008b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b54:	4b36      	ldr	r3, [pc, #216]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5c:	ee07 3a90 	vmov	s15, r3
 8008b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b68:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b84:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008b86:	4b2a      	ldr	r3, [pc, #168]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	0a5b      	lsrs	r3, r3, #9
 8008b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bac:	ee17 2a90 	vmov	r2, s15
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008bb4:	4b1e      	ldr	r3, [pc, #120]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	0c1b      	lsrs	r3, r3, #16
 8008bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bda:	ee17 2a90 	vmov	r2, s15
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008be2:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	0e1b      	lsrs	r3, r3, #24
 8008be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c08:	ee17 2a90 	vmov	r2, s15
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c10:	e008      	b.n	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
}
 8008c24:	bf00      	nop
 8008c26:	3724      	adds	r7, #36	; 0x24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	58024400 	.word	0x58024400
 8008c34:	03d09000 	.word	0x03d09000
 8008c38:	46000000 	.word	0x46000000
 8008c3c:	4c742400 	.word	0x4c742400
 8008c40:	4a742400 	.word	0x4a742400
 8008c44:	4bbebc20 	.word	0x4bbebc20

08008c48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c50:	4b9d      	ldr	r3, [pc, #628]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008c5a:	4b9b      	ldr	r3, [pc, #620]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	091b      	lsrs	r3, r3, #4
 8008c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c66:	4b98      	ldr	r3, [pc, #608]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c70:	4b95      	ldr	r3, [pc, #596]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	fb02 f303 	mul.w	r3, r2, r3
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 810a 	beq.w	8008ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d05a      	beq.n	8008d50 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d302      	bcc.n	8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d078      	beq.n	8008d94 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008ca2:	e099      	b.n	8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca4:	4b88      	ldr	r3, [pc, #544]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02d      	beq.n	8008d0c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cb0:	4b85      	ldr	r3, [pc, #532]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	08db      	lsrs	r3, r3, #3
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	4a84      	ldr	r2, [pc, #528]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b7b      	ldr	r3, [pc, #492]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d0a:	e087      	b.n	8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b6a      	ldr	r3, [pc, #424]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d4e:	e065      	b.n	8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b59      	ldr	r3, [pc, #356]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d92:	e043      	b.n	8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b48      	ldr	r3, [pc, #288]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dd6:	e021      	b.n	8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b37      	ldr	r3, [pc, #220]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e1a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008e1c:	4b2a      	ldr	r3, [pc, #168]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	0a5b      	lsrs	r3, r3, #9
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e42:	ee17 2a90 	vmov	r2, s15
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008e4a:	4b1f      	ldr	r3, [pc, #124]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	0c1b      	lsrs	r3, r3, #16
 8008e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e70:	ee17 2a90 	vmov	r2, s15
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008e78:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7c:	0e1b      	lsrs	r3, r3, #24
 8008e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e9e:	ee17 2a90 	vmov	r2, s15
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008ea6:	e008      	b.n	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	609a      	str	r2, [r3, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	3724      	adds	r7, #36	; 0x24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	46000000 	.word	0x46000000
 8008ed4:	4c742400 	.word	0x4c742400
 8008ed8:	4a742400 	.word	0x4a742400
 8008edc:	4bbebc20 	.word	0x4bbebc20

08008ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eee:	4b53      	ldr	r3, [pc, #332]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d101      	bne.n	8008efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e099      	b.n	8009032 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008efe:	4b4f      	ldr	r3, [pc, #316]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a4e      	ldr	r2, [pc, #312]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0a:	f7f9 fa21 	bl	8002350 <HAL_GetTick>
 8008f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f10:	e008      	b.n	8008f24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f12:	f7f9 fa1d 	bl	8002350 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d901      	bls.n	8008f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e086      	b.n	8009032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f24:	4b45      	ldr	r3, [pc, #276]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1f0      	bne.n	8008f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f30:	4b42      	ldr	r3, [pc, #264]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	031b      	lsls	r3, r3, #12
 8008f3e:	493f      	ldr	r1, [pc, #252]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	628b      	str	r3, [r1, #40]	; 0x28
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	025b      	lsls	r3, r3, #9
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	061b      	lsls	r3, r3, #24
 8008f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f74:	4931      	ldr	r1, [pc, #196]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f7a:	4b30      	ldr	r3, [pc, #192]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	492d      	ldr	r1, [pc, #180]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f8c:	4b2b      	ldr	r3, [pc, #172]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	f023 0220 	bic.w	r2, r3, #32
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	4928      	ldr	r1, [pc, #160]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f9e:	4b27      	ldr	r3, [pc, #156]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	4a26      	ldr	r2, [pc, #152]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fa4:	f023 0310 	bic.w	r3, r3, #16
 8008fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008faa:	4b24      	ldr	r3, [pc, #144]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fae:	4b24      	ldr	r3, [pc, #144]	; (8009040 <RCCEx_PLL2_Config+0x160>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	69d2      	ldr	r2, [r2, #28]
 8008fb6:	00d2      	lsls	r2, r2, #3
 8008fb8:	4920      	ldr	r1, [pc, #128]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008fbe:	4b1f      	ldr	r3, [pc, #124]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	4a1e      	ldr	r2, [pc, #120]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f043 0310 	orr.w	r3, r3, #16
 8008fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008fd0:	4b1a      	ldr	r3, [pc, #104]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	4a19      	ldr	r2, [pc, #100]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fdc:	e00f      	b.n	8008ffe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d106      	bne.n	8008ff2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	4a14      	ldr	r2, [pc, #80]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ff0:	e005      	b.n	8008ffe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	4a11      	ldr	r2, [pc, #68]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8008ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a0e      	ldr	r2, [pc, #56]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8009004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900a:	f7f9 f9a1 	bl	8002350 <HAL_GetTick>
 800900e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009010:	e008      	b.n	8009024 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009012:	f7f9 f99d 	bl	8002350 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d901      	bls.n	8009024 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e006      	b.n	8009032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <RCCEx_PLL2_Config+0x15c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0f0      	beq.n	8009012 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	58024400 	.word	0x58024400
 8009040:	ffff0007 	.word	0xffff0007

08009044 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009052:	4b53      	ldr	r3, [pc, #332]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	2b03      	cmp	r3, #3
 800905c:	d101      	bne.n	8009062 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e099      	b.n	8009196 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009062:	4b4f      	ldr	r3, [pc, #316]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a4e      	ldr	r2, [pc, #312]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800906c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800906e:	f7f9 f96f 	bl	8002350 <HAL_GetTick>
 8009072:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009074:	e008      	b.n	8009088 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009076:	f7f9 f96b 	bl	8002350 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d901      	bls.n	8009088 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e086      	b.n	8009196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009088:	4b45      	ldr	r3, [pc, #276]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1f0      	bne.n	8009076 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009094:	4b42      	ldr	r3, [pc, #264]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009098:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	051b      	lsls	r3, r3, #20
 80090a2:	493f      	ldr	r1, [pc, #252]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	628b      	str	r3, [r1, #40]	; 0x28
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	025b      	lsls	r3, r3, #9
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	431a      	orrs	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	061b      	lsls	r3, r3, #24
 80090d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090d8:	4931      	ldr	r1, [pc, #196]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090de:	4b30      	ldr	r3, [pc, #192]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	492d      	ldr	r1, [pc, #180]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090f0:	4b2b      	ldr	r3, [pc, #172]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	4928      	ldr	r1, [pc, #160]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009102:	4b27      	ldr	r3, [pc, #156]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	4a26      	ldr	r2, [pc, #152]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800910c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800910e:	4b24      	ldr	r3, [pc, #144]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009112:	4b24      	ldr	r3, [pc, #144]	; (80091a4 <RCCEx_PLL3_Config+0x160>)
 8009114:	4013      	ands	r3, r2
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	69d2      	ldr	r2, [r2, #28]
 800911a:	00d2      	lsls	r2, r2, #3
 800911c:	4920      	ldr	r1, [pc, #128]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800911e:	4313      	orrs	r3, r2
 8009120:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009122:	4b1f      	ldr	r3, [pc, #124]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	4a1e      	ldr	r2, [pc, #120]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800912c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009134:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	4a19      	ldr	r2, [pc, #100]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800913a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800913e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009140:	e00f      	b.n	8009162 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d106      	bne.n	8009156 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009148:	4b15      	ldr	r3, [pc, #84]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	4a14      	ldr	r2, [pc, #80]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800914e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009154:	e005      	b.n	8009162 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009156:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	4a11      	ldr	r2, [pc, #68]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800915c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009162:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a0e      	ldr	r2, [pc, #56]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 8009168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800916c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800916e:	f7f9 f8ef 	bl	8002350 <HAL_GetTick>
 8009172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009174:	e008      	b.n	8009188 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009176:	f7f9 f8eb 	bl	8002350 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e006      	b.n	8009196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <RCCEx_PLL3_Config+0x15c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009194:	7bfb      	ldrb	r3, [r7, #15]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
 80091a4:	ffff0007 	.word	0xffff0007

080091a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e01d      	b.n	80091f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f8 fdac 	bl	8001d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3304      	adds	r3, #4
 80091e4:	4619      	mov	r1, r3
 80091e6:	4610      	mov	r0, r2
 80091e8:	f000 fa4c 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	4b0c      	ldr	r3, [pc, #48]	; (8009250 <HAL_TIM_Base_Start_IT+0x50>)
 8009220:	4013      	ands	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b06      	cmp	r3, #6
 8009228:	d00b      	beq.n	8009242 <HAL_TIM_Base_Start_IT+0x42>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009230:	d007      	beq.n	8009242 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0201 	orr.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	00010007 	.word	0x00010007

08009254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	2b02      	cmp	r3, #2
 8009268:	d122      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b02      	cmp	r3, #2
 8009276:	d11b      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0202 	mvn.w	r2, #2
 8009280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f9d6 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 800929c:	e005      	b.n	80092aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9c8 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f9d9 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d122      	bne.n	8009304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d11b      	bne.n	8009304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0204 	mvn.w	r2, #4
 80092d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f9ac 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 80092f0:	e005      	b.n	80092fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f99e 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f9af 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b08      	cmp	r3, #8
 8009310:	d122      	bne.n	8009358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b08      	cmp	r3, #8
 800931e:	d11b      	bne.n	8009358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0208 	mvn.w	r2, #8
 8009328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2204      	movs	r2, #4
 800932e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f982 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 8009344:	e005      	b.n	8009352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f974 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f985 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b10      	cmp	r3, #16
 8009364:	d122      	bne.n	80093ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f003 0310 	and.w	r3, r3, #16
 8009370:	2b10      	cmp	r3, #16
 8009372:	d11b      	bne.n	80093ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0210 	mvn.w	r2, #16
 800937c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2208      	movs	r2, #8
 8009382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f958 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 8009398:	e005      	b.n	80093a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f94a 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f95b 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d10e      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d107      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f06f 0201 	mvn.w	r2, #1
 80093d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f7 fd00 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d10e      	bne.n	8009404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f0:	2b80      	cmp	r3, #128	; 0x80
 80093f2:	d107      	bne.n	8009404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fb0a 	bl	8009a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009412:	d10e      	bne.n	8009432 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d107      	bne.n	8009432 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800942a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fafd 	bl	8009a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d10e      	bne.n	800945e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b40      	cmp	r3, #64	; 0x40
 800944c:	d107      	bne.n	800945e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f909 	bl	8009670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b20      	cmp	r3, #32
 800946a:	d10e      	bne.n	800948a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b20      	cmp	r3, #32
 8009478:	d107      	bne.n	800948a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f06f 0220 	mvn.w	r2, #32
 8009482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fabd 	bl	8009a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d101      	bne.n	80094ac <HAL_TIM_ConfigClockSource+0x18>
 80094a8:	2302      	movs	r3, #2
 80094aa:	e0b7      	b.n	800961c <HAL_TIM_ConfigClockSource+0x188>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4b57      	ldr	r3, [pc, #348]	; (8009624 <HAL_TIM_ConfigClockSource+0x190>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b70      	cmp	r3, #112	; 0x70
 80094e2:	d02e      	beq.n	8009542 <HAL_TIM_ConfigClockSource+0xae>
 80094e4:	2b70      	cmp	r3, #112	; 0x70
 80094e6:	d812      	bhi.n	800950e <HAL_TIM_ConfigClockSource+0x7a>
 80094e8:	2b30      	cmp	r3, #48	; 0x30
 80094ea:	f000 8084 	beq.w	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 80094ee:	2b30      	cmp	r3, #48	; 0x30
 80094f0:	d806      	bhi.n	8009500 <HAL_TIM_ConfigClockSource+0x6c>
 80094f2:	2b10      	cmp	r3, #16
 80094f4:	d07f      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d07d      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d07b      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80094fe:	e084      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009500:	2b50      	cmp	r3, #80	; 0x50
 8009502:	d048      	beq.n	8009596 <HAL_TIM_ConfigClockSource+0x102>
 8009504:	2b60      	cmp	r3, #96	; 0x60
 8009506:	d056      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x122>
 8009508:	2b40      	cmp	r3, #64	; 0x40
 800950a:	d064      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800950c:	e07d      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800950e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009512:	d070      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 8009514:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009518:	d809      	bhi.n	800952e <HAL_TIM_ConfigClockSource+0x9a>
 800951a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800951e:	d027      	beq.n	8009570 <HAL_TIM_ConfigClockSource+0xdc>
 8009520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009524:	d067      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 8009526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952a:	d06d      	beq.n	8009608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800952c:	e06d      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800952e:	4a3e      	ldr	r2, [pc, #248]	; (8009628 <HAL_TIM_ConfigClockSource+0x194>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d060      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 8009534:	4a3d      	ldr	r2, [pc, #244]	; (800962c <HAL_TIM_ConfigClockSource+0x198>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d05d      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
 800953a:	4a3d      	ldr	r2, [pc, #244]	; (8009630 <HAL_TIM_ConfigClockSource+0x19c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d05a      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009540:	e063      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6899      	ldr	r1, [r3, #8]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f000 f9af 	bl	80098b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009564:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	609a      	str	r2, [r3, #8]
      break;
 800956e:	e04c      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	6899      	ldr	r1, [r3, #8]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f000 f998 	bl	80098b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009592:	609a      	str	r2, [r3, #8]
      break;
 8009594:	e039      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f000 f908 	bl	80097b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2150      	movs	r1, #80	; 0x50
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f962 	bl	8009878 <TIM_ITRx_SetConfig>
      break;
 80095b4:	e029      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6859      	ldr	r1, [r3, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f000 f927 	bl	8009816 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2160      	movs	r1, #96	; 0x60
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f952 	bl	8009878 <TIM_ITRx_SetConfig>
      break;
 80095d4:	e019      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	6859      	ldr	r1, [r3, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f000 f8e8 	bl	80097b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2140      	movs	r1, #64	; 0x40
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f942 	bl	8009878 <TIM_ITRx_SetConfig>
      break;
 80095f4:	e009      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f000 f939 	bl	8009878 <TIM_ITRx_SetConfig>
      break;
 8009606:	e000      	b.n	800960a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009608:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	ffceff88 	.word	0xffceff88
 8009628:	00100030 	.word	0x00100030
 800962c:	00100040 	.word	0x00100040
 8009630:	00100020 	.word	0x00100020

08009634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a40      	ldr	r2, [pc, #256]	; (8009798 <TIM_Base_SetConfig+0x114>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d013      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a2:	d00f      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a3d      	ldr	r2, [pc, #244]	; (800979c <TIM_Base_SetConfig+0x118>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a3c      	ldr	r2, [pc, #240]	; (80097a0 <TIM_Base_SetConfig+0x11c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a3b      	ldr	r2, [pc, #236]	; (80097a4 <TIM_Base_SetConfig+0x120>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a3a      	ldr	r2, [pc, #232]	; (80097a8 <TIM_Base_SetConfig+0x124>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d108      	bne.n	80096d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a2f      	ldr	r2, [pc, #188]	; (8009798 <TIM_Base_SetConfig+0x114>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d01f      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e4:	d01b      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2c      	ldr	r2, [pc, #176]	; (800979c <TIM_Base_SetConfig+0x118>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d017      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a2b      	ldr	r2, [pc, #172]	; (80097a0 <TIM_Base_SetConfig+0x11c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d013      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2a      	ldr	r2, [pc, #168]	; (80097a4 <TIM_Base_SetConfig+0x120>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00f      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a29      	ldr	r2, [pc, #164]	; (80097a8 <TIM_Base_SetConfig+0x124>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d00b      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a28      	ldr	r2, [pc, #160]	; (80097ac <TIM_Base_SetConfig+0x128>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d007      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <TIM_Base_SetConfig+0x12c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d003      	beq.n	800971e <TIM_Base_SetConfig+0x9a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a26      	ldr	r2, [pc, #152]	; (80097b4 <TIM_Base_SetConfig+0x130>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d108      	bne.n	8009730 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4313      	orrs	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a10      	ldr	r2, [pc, #64]	; (8009798 <TIM_Base_SetConfig+0x114>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d00f      	beq.n	800977c <TIM_Base_SetConfig+0xf8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a12      	ldr	r2, [pc, #72]	; (80097a8 <TIM_Base_SetConfig+0x124>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00b      	beq.n	800977c <TIM_Base_SetConfig+0xf8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a11      	ldr	r2, [pc, #68]	; (80097ac <TIM_Base_SetConfig+0x128>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d007      	beq.n	800977c <TIM_Base_SetConfig+0xf8>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a10      	ldr	r2, [pc, #64]	; (80097b0 <TIM_Base_SetConfig+0x12c>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_Base_SetConfig+0xf8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a0f      	ldr	r2, [pc, #60]	; (80097b4 <TIM_Base_SetConfig+0x130>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d103      	bne.n	8009784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	615a      	str	r2, [r3, #20]
}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40010000 	.word	0x40010000
 800979c:	40000400 	.word	0x40000400
 80097a0:	40000800 	.word	0x40000800
 80097a4:	40000c00 	.word	0x40000c00
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f023 0201 	bic.w	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f023 030a 	bic.w	r3, r3, #10
 80097f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009816:	b480      	push	{r7}
 8009818:	b087      	sub	sp, #28
 800981a:	af00      	add	r7, sp, #0
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	60b9      	str	r1, [r7, #8]
 8009820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f023 0210 	bic.w	r2, r3, #16
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	4313      	orrs	r3, r2
 800984a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009852:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	621a      	str	r2, [r3, #32]
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
	...

08009878 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <TIM_ITRx_SetConfig+0x38>)
 800988c:	4013      	ands	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4313      	orrs	r3, r2
 8009896:	f043 0307 	orr.w	r3, r3, #7
 800989a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	609a      	str	r2, [r3, #8]
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	ffcfff8f 	.word	0xffcfff8f

080098b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	021a      	lsls	r2, r3, #8
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	431a      	orrs	r2, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4313      	orrs	r3, r2
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	4313      	orrs	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	609a      	str	r2, [r3, #8]
}
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009908:	2302      	movs	r3, #2
 800990a:	e068      	b.n	80099de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a2e      	ldr	r2, [pc, #184]	; (80099ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a2d      	ldr	r2, [pc, #180]	; (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d108      	bne.n	8009952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a1e      	ldr	r2, [pc, #120]	; (80099ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d01d      	beq.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997e:	d018      	beq.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1b      	ldr	r2, [pc, #108]	; (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d013      	beq.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a1a      	ldr	r2, [pc, #104]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00e      	beq.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a18      	ldr	r2, [pc, #96]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d009      	beq.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a13      	ldr	r2, [pc, #76]	; (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d004      	beq.n	80099b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a14      	ldr	r2, [pc, #80]	; (8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d10c      	bne.n	80099cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40010000 	.word	0x40010000
 80099f0:	40010400 	.word	0x40010400
 80099f4:	40000400 	.word	0x40000400
 80099f8:	40000800 	.word	0x40000800
 80099fc:	40000c00 	.word	0x40000c00
 8009a00:	40001800 	.word	0x40001800

08009a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e042      	b.n	8009ad8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7f8 f9c7 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2224      	movs	r2, #36	; 0x24
 8009a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fb14 	bl	800a0b0 <UART_SetConfig>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d101      	bne.n	8009a92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e022      	b.n	8009ad8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f002 fc86 	bl	800c3ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689a      	ldr	r2, [r3, #8]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 0201 	orr.w	r2, r2, #1
 8009ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f002 fd0d 	bl	800c4f0 <UART_CheckIdleState>
 8009ad6:	4603      	mov	r3, r0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	4613      	mov	r3, r2
 8009aec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	d168      	bne.n	8009bca <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_UART_Transmit_IT+0x24>
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e061      	b.n	8009bcc <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Transmit_IT+0x36>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e05a      	b.n	8009bcc <HAL_UART_Transmit_IT+0xec>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	88fa      	ldrh	r2, [r7, #6]
 8009b30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2221      	movs	r2, #33	; 0x21
 8009b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b52:	d11c      	bne.n	8009b8e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5c:	d107      	bne.n	8009b6e <HAL_UART_Transmit_IT+0x8e>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d103      	bne.n	8009b6e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <HAL_UART_Transmit_IT+0xf8>)
 8009b6a:	671a      	str	r2, [r3, #112]	; 0x70
 8009b6c:	e002      	b.n	8009b74 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4a1a      	ldr	r2, [pc, #104]	; (8009bdc <HAL_UART_Transmit_IT+0xfc>)
 8009b72:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689a      	ldr	r2, [r3, #8]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009b8a:	609a      	str	r2, [r3, #8]
 8009b8c:	e01b      	b.n	8009bc6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b96:	d107      	bne.n	8009ba8 <HAL_UART_Transmit_IT+0xc8>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d103      	bne.n	8009ba8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4a0f      	ldr	r2, [pc, #60]	; (8009be0 <HAL_UART_Transmit_IT+0x100>)
 8009ba4:	671a      	str	r2, [r3, #112]	; 0x70
 8009ba6:	e002      	b.n	8009bae <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <HAL_UART_Transmit_IT+0x104>)
 8009bac:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009bc4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e000      	b.n	8009bcc <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009bca:	2302      	movs	r3, #2
  }
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	0800c881 	.word	0x0800c881
 8009bdc:	0800c7e7 	.word	0x0800c7e7
 8009be0:	0800c769 	.word	0x0800c769
 8009be4:	0800c6f5 	.word	0x0800c6f5

08009be8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	f040 80bc 	bne.w	8009d7a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <HAL_UART_Receive_IT+0x26>
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e0b4      	b.n	8009d7c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <HAL_UART_Receive_IT+0x38>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0ad      	b.n	8009d7c <HAL_UART_Receive_IT+0x194>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	88fa      	ldrh	r2, [r7, #6]
 8009c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	88fa      	ldrh	r2, [r7, #6]
 8009c3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4c:	d10e      	bne.n	8009c6c <HAL_UART_Receive_IT+0x84>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d105      	bne.n	8009c62 <HAL_UART_Receive_IT+0x7a>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c60:	e02d      	b.n	8009cbe <HAL_UART_Receive_IT+0xd6>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	22ff      	movs	r2, #255	; 0xff
 8009c66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c6a:	e028      	b.n	8009cbe <HAL_UART_Receive_IT+0xd6>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10d      	bne.n	8009c90 <HAL_UART_Receive_IT+0xa8>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d104      	bne.n	8009c86 <HAL_UART_Receive_IT+0x9e>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	22ff      	movs	r2, #255	; 0xff
 8009c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c84:	e01b      	b.n	8009cbe <HAL_UART_Receive_IT+0xd6>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	227f      	movs	r2, #127	; 0x7f
 8009c8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c8e:	e016      	b.n	8009cbe <HAL_UART_Receive_IT+0xd6>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c98:	d10d      	bne.n	8009cb6 <HAL_UART_Receive_IT+0xce>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <HAL_UART_Receive_IT+0xc4>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	227f      	movs	r2, #127	; 0x7f
 8009ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009caa:	e008      	b.n	8009cbe <HAL_UART_Receive_IT+0xd6>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	223f      	movs	r2, #63	; 0x3f
 8009cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009cb4:	e003      	b.n	8009cbe <HAL_UART_Receive_IT+0xd6>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2222      	movs	r2, #34	; 0x22
 8009cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f042 0201 	orr.w	r2, r2, #1
 8009cdc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ce6:	d12a      	bne.n	8009d3e <HAL_UART_Receive_IT+0x156>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cee:	88fa      	ldrh	r2, [r7, #6]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d324      	bcc.n	8009d3e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfc:	d107      	bne.n	8009d0e <HAL_UART_Receive_IT+0x126>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4a1f      	ldr	r2, [pc, #124]	; (8009d88 <HAL_UART_Receive_IT+0x1a0>)
 8009d0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d0c:	e002      	b.n	8009d14 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	4a1e      	ldr	r2, [pc, #120]	; (8009d8c <HAL_UART_Receive_IT+0x1a4>)
 8009d12:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d2a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009d3a:	609a      	str	r2, [r3, #8]
 8009d3c:	e01b      	b.n	8009d76 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d46:	d107      	bne.n	8009d58 <HAL_UART_Receive_IT+0x170>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d103      	bne.n	8009d58 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a0f      	ldr	r2, [pc, #60]	; (8009d90 <HAL_UART_Receive_IT+0x1a8>)
 8009d54:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d56:	e002      	b.n	8009d5e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a0e      	ldr	r2, [pc, #56]	; (8009d94 <HAL_UART_Receive_IT+0x1ac>)
 8009d5c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009d74:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	e000      	b.n	8009d7c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009d7a:	2302      	movs	r3, #2
  }
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	0800cbb5 	.word	0x0800cbb5
 8009d8c:	0800caad 	.word	0x0800caad
 8009d90:	0800ca03 	.word	0x0800ca03
 8009d94:	0800c959 	.word	0x0800c959

08009d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009db8:	69fa      	ldr	r2, [r7, #28]
 8009dba:	f640 030f 	movw	r3, #2063	; 0x80f
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d118      	bne.n	8009dfa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d013      	beq.n	8009dfa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d009      	beq.n	8009dfa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8145 	beq.w	800a07a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
      }
      return;
 8009df8:	e13f      	b.n	800a07a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 80e8 	beq.w	8009fd2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4ba1      	ldr	r3, [pc, #644]	; (800a08c <HAL_UART_IRQHandler+0x2f4>)
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d105      	bne.n	8009e18 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	4ba0      	ldr	r3, [pc, #640]	; (800a090 <HAL_UART_IRQHandler+0x2f8>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 80dd 	beq.w	8009fd2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d010      	beq.n	8009e44 <HAL_UART_IRQHandler+0xac>
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2201      	movs	r2, #1
 8009e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3a:	f043 0201 	orr.w	r2, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d010      	beq.n	8009e70 <HAL_UART_IRQHandler+0xd8>
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e66:	f043 0204 	orr.w	r2, r3, #4
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d010      	beq.n	8009e9c <HAL_UART_IRQHandler+0x104>
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2204      	movs	r2, #4
 8009e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e92:	f043 0202 	orr.w	r2, r3, #2
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	f003 0308 	and.w	r3, r3, #8
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d015      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	4b76      	ldr	r3, [pc, #472]	; (800a08c <HAL_UART_IRQHandler+0x2f4>)
 8009eb4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00b      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2208      	movs	r2, #8
 8009ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec8:	f043 0208 	orr.w	r2, r3, #8
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d011      	beq.n	8009f00 <HAL_UART_IRQHandler+0x168>
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00c      	beq.n	8009f00 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef6:	f043 0220 	orr.w	r2, r3, #32
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 80b9 	beq.w	800a07e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d011      	beq.n	8009f3a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	f003 0320 	and.w	r3, r3, #32
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d104      	bne.n	8009f2a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4c:	2b40      	cmp	r3, #64	; 0x40
 8009f4e:	d004      	beq.n	8009f5a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d031      	beq.n	8009fbe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f002 fb90 	bl	800c680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d123      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d013      	beq.n	8009fae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f8a:	4a42      	ldr	r2, [pc, #264]	; (800a094 <HAL_UART_IRQHandler+0x2fc>)
 8009f8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fa fb84 	bl	80046a0 <HAL_DMA_Abort_IT>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d017      	beq.n	8009fce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fac:	e00f      	b.n	8009fce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f872 	bl	800a098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb4:	e00b      	b.n	8009fce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f86e 	bl	800a098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fbc:	e007      	b.n	8009fce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f86a 	bl	800a098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009fcc:	e057      	b.n	800a07e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fce:	bf00      	nop
    return;
 8009fd0:	e055      	b.n	800a07e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x260>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d008      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009fee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f002 fe63 	bl	800ccbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ff6:	e045      	b.n	800a084 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d012      	beq.n	800a028 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d031      	beq.n	800a082 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
    }
    return;
 800a026:	e02c      	b.n	800a082 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d008      	beq.n	800a044 <HAL_UART_IRQHandler+0x2ac>
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f002 fc71 	bl	800c924 <UART_EndTransmit_IT>
    return;
 800a042:	e01f      	b.n	800a084 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d008      	beq.n	800a060 <HAL_UART_IRQHandler+0x2c8>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f002 fe43 	bl	800cce4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a05e:	e011      	b.n	800a084 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00c      	beq.n	800a084 <HAL_UART_IRQHandler+0x2ec>
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	da09      	bge.n	800a084 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f002 fe2d 	bl	800ccd0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a076:	bf00      	nop
 800a078:	e004      	b.n	800a084 <HAL_UART_IRQHandler+0x2ec>
      return;
 800a07a:	bf00      	nop
 800a07c:	e002      	b.n	800a084 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a07e:	bf00      	nop
 800a080:	e000      	b.n	800a084 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a082:	bf00      	nop
  }
}
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	10000001 	.word	0x10000001
 800a090:	04000120 	.word	0x04000120
 800a094:	0800c6c9 	.word	0x0800c6c9

0800a098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	0000      	movs	r0, r0
	...

0800a0b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a0b4:	b090      	sub	sp, #64	; 0x40
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	4bc1      	ldr	r3, [pc, #772]	; (800a3f8 <UART_SetConfig+0x348>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	6812      	ldr	r2, [r2, #0]
 800a0f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0fa:	430b      	orrs	r3, r1
 800a0fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68da      	ldr	r2, [r3, #12]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4ab7      	ldr	r2, [pc, #732]	; (800a3fc <UART_SetConfig+0x34c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d004      	beq.n	800a12e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a12a:	4313      	orrs	r3, r2
 800a12c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	4bb2      	ldr	r3, [pc, #712]	; (800a400 <UART_SetConfig+0x350>)
 800a136:	4013      	ands	r3, r2
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a13e:	430b      	orrs	r3, r1
 800a140:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	f023 010f 	bic.w	r1, r3, #15
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4aa9      	ldr	r2, [pc, #676]	; (800a404 <UART_SetConfig+0x354>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d177      	bne.n	800a252 <UART_SetConfig+0x1a2>
 800a162:	4ba9      	ldr	r3, [pc, #676]	; (800a408 <UART_SetConfig+0x358>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a16a:	2b28      	cmp	r3, #40	; 0x28
 800a16c:	d86c      	bhi.n	800a248 <UART_SetConfig+0x198>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0xc4>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a219 	.word	0x0800a219
 800a178:	0800a249 	.word	0x0800a249
 800a17c:	0800a249 	.word	0x0800a249
 800a180:	0800a249 	.word	0x0800a249
 800a184:	0800a249 	.word	0x0800a249
 800a188:	0800a249 	.word	0x0800a249
 800a18c:	0800a249 	.word	0x0800a249
 800a190:	0800a249 	.word	0x0800a249
 800a194:	0800a221 	.word	0x0800a221
 800a198:	0800a249 	.word	0x0800a249
 800a19c:	0800a249 	.word	0x0800a249
 800a1a0:	0800a249 	.word	0x0800a249
 800a1a4:	0800a249 	.word	0x0800a249
 800a1a8:	0800a249 	.word	0x0800a249
 800a1ac:	0800a249 	.word	0x0800a249
 800a1b0:	0800a249 	.word	0x0800a249
 800a1b4:	0800a229 	.word	0x0800a229
 800a1b8:	0800a249 	.word	0x0800a249
 800a1bc:	0800a249 	.word	0x0800a249
 800a1c0:	0800a249 	.word	0x0800a249
 800a1c4:	0800a249 	.word	0x0800a249
 800a1c8:	0800a249 	.word	0x0800a249
 800a1cc:	0800a249 	.word	0x0800a249
 800a1d0:	0800a249 	.word	0x0800a249
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a249 	.word	0x0800a249
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a249 	.word	0x0800a249
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	0800a249 	.word	0x0800a249
 800a1f0:	0800a249 	.word	0x0800a249
 800a1f4:	0800a239 	.word	0x0800a239
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a249 	.word	0x0800a249
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a249 	.word	0x0800a249
 800a208:	0800a249 	.word	0x0800a249
 800a20c:	0800a249 	.word	0x0800a249
 800a210:	0800a249 	.word	0x0800a249
 800a214:	0800a241 	.word	0x0800a241
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	e233      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a220:	2304      	movs	r3, #4
 800a222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a226:	e22f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a228:	2308      	movs	r3, #8
 800a22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a22e:	e22b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a230:	2310      	movs	r3, #16
 800a232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a236:	e227      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a238:	2320      	movs	r3, #32
 800a23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a23e:	e223      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a246:	e21f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a248:	2380      	movs	r3, #128	; 0x80
 800a24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a24e:	bf00      	nop
 800a250:	e21a      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a6d      	ldr	r2, [pc, #436]	; (800a40c <UART_SetConfig+0x35c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d132      	bne.n	800a2c2 <UART_SetConfig+0x212>
 800a25c:	4b6a      	ldr	r3, [pc, #424]	; (800a408 <UART_SetConfig+0x358>)
 800a25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	2b05      	cmp	r3, #5
 800a266:	d827      	bhi.n	800a2b8 <UART_SetConfig+0x208>
 800a268:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x1c0>)
 800a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26e:	bf00      	nop
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a9 	.word	0x0800a2a9
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a28e:	e1fb      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a290:	2304      	movs	r3, #4
 800a292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a296:	e1f7      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a298:	2308      	movs	r3, #8
 800a29a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a29e:	e1f3      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2a6:	e1ef      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ae:	e1eb      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2b6:	e1e7      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a2b8:	2380      	movs	r3, #128	; 0x80
 800a2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2be:	bf00      	nop
 800a2c0:	e1e2      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a52      	ldr	r2, [pc, #328]	; (800a410 <UART_SetConfig+0x360>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d132      	bne.n	800a332 <UART_SetConfig+0x282>
 800a2cc:	4b4e      	ldr	r3, [pc, #312]	; (800a408 <UART_SetConfig+0x358>)
 800a2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	2b05      	cmp	r3, #5
 800a2d6:	d827      	bhi.n	800a328 <UART_SetConfig+0x278>
 800a2d8:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <UART_SetConfig+0x230>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a2f9 	.word	0x0800a2f9
 800a2e4:	0800a301 	.word	0x0800a301
 800a2e8:	0800a309 	.word	0x0800a309
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a319 	.word	0x0800a319
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2fe:	e1c3      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a306:	e1bf      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a30e:	e1bb      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a316:	e1b7      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a318:	2320      	movs	r3, #32
 800a31a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a31e:	e1b3      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a326:	e1af      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a328:	2380      	movs	r3, #128	; 0x80
 800a32a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a32e:	bf00      	nop
 800a330:	e1aa      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a37      	ldr	r2, [pc, #220]	; (800a414 <UART_SetConfig+0x364>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d132      	bne.n	800a3a2 <UART_SetConfig+0x2f2>
 800a33c:	4b32      	ldr	r3, [pc, #200]	; (800a408 <UART_SetConfig+0x358>)
 800a33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a340:	f003 0307 	and.w	r3, r3, #7
 800a344:	2b05      	cmp	r3, #5
 800a346:	d827      	bhi.n	800a398 <UART_SetConfig+0x2e8>
 800a348:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <UART_SetConfig+0x2a0>)
 800a34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34e:	bf00      	nop
 800a350:	0800a369 	.word	0x0800a369
 800a354:	0800a371 	.word	0x0800a371
 800a358:	0800a379 	.word	0x0800a379
 800a35c:	0800a381 	.word	0x0800a381
 800a360:	0800a389 	.word	0x0800a389
 800a364:	0800a391 	.word	0x0800a391
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a36e:	e18b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a370:	2304      	movs	r3, #4
 800a372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a376:	e187      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a378:	2308      	movs	r3, #8
 800a37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a37e:	e183      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a380:	2310      	movs	r3, #16
 800a382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a386:	e17f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a388:	2320      	movs	r3, #32
 800a38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a38e:	e17b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a390:	2340      	movs	r3, #64	; 0x40
 800a392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a396:	e177      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a398:	2380      	movs	r3, #128	; 0x80
 800a39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a39e:	bf00      	nop
 800a3a0:	e172      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a1c      	ldr	r2, [pc, #112]	; (800a418 <UART_SetConfig+0x368>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d144      	bne.n	800a436 <UART_SetConfig+0x386>
 800a3ac:	4b16      	ldr	r3, [pc, #88]	; (800a408 <UART_SetConfig+0x358>)
 800a3ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b0:	f003 0307 	and.w	r3, r3, #7
 800a3b4:	2b05      	cmp	r3, #5
 800a3b6:	d839      	bhi.n	800a42c <UART_SetConfig+0x37c>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <UART_SetConfig+0x310>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3d9 	.word	0x0800a3d9
 800a3c4:	0800a3e1 	.word	0x0800a3e1
 800a3c8:	0800a3e9 	.word	0x0800a3e9
 800a3cc:	0800a3f1 	.word	0x0800a3f1
 800a3d0:	0800a41d 	.word	0x0800a41d
 800a3d4:	0800a425 	.word	0x0800a425
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3de:	e153      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a3e0:	2304      	movs	r3, #4
 800a3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3e6:	e14f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ee:	e14b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a3f0:	2310      	movs	r3, #16
 800a3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3f6:	e147      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a3f8:	cfff69f3 	.word	0xcfff69f3
 800a3fc:	58000c00 	.word	0x58000c00
 800a400:	11fff4ff 	.word	0x11fff4ff
 800a404:	40011000 	.word	0x40011000
 800a408:	58024400 	.word	0x58024400
 800a40c:	40004400 	.word	0x40004400
 800a410:	40004800 	.word	0x40004800
 800a414:	40004c00 	.word	0x40004c00
 800a418:	40005000 	.word	0x40005000
 800a41c:	2320      	movs	r3, #32
 800a41e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a422:	e131      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a42a:	e12d      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a42c:	2380      	movs	r3, #128	; 0x80
 800a42e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a432:	bf00      	nop
 800a434:	e128      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4ac3      	ldr	r2, [pc, #780]	; (800a748 <UART_SetConfig+0x698>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d178      	bne.n	800a532 <UART_SetConfig+0x482>
 800a440:	4bc2      	ldr	r3, [pc, #776]	; (800a74c <UART_SetConfig+0x69c>)
 800a442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a448:	2b28      	cmp	r3, #40	; 0x28
 800a44a:	d86d      	bhi.n	800a528 <UART_SetConfig+0x478>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <UART_SetConfig+0x3a4>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a4f9 	.word	0x0800a4f9
 800a458:	0800a529 	.word	0x0800a529
 800a45c:	0800a529 	.word	0x0800a529
 800a460:	0800a529 	.word	0x0800a529
 800a464:	0800a529 	.word	0x0800a529
 800a468:	0800a529 	.word	0x0800a529
 800a46c:	0800a529 	.word	0x0800a529
 800a470:	0800a529 	.word	0x0800a529
 800a474:	0800a501 	.word	0x0800a501
 800a478:	0800a529 	.word	0x0800a529
 800a47c:	0800a529 	.word	0x0800a529
 800a480:	0800a529 	.word	0x0800a529
 800a484:	0800a529 	.word	0x0800a529
 800a488:	0800a529 	.word	0x0800a529
 800a48c:	0800a529 	.word	0x0800a529
 800a490:	0800a529 	.word	0x0800a529
 800a494:	0800a509 	.word	0x0800a509
 800a498:	0800a529 	.word	0x0800a529
 800a49c:	0800a529 	.word	0x0800a529
 800a4a0:	0800a529 	.word	0x0800a529
 800a4a4:	0800a529 	.word	0x0800a529
 800a4a8:	0800a529 	.word	0x0800a529
 800a4ac:	0800a529 	.word	0x0800a529
 800a4b0:	0800a529 	.word	0x0800a529
 800a4b4:	0800a511 	.word	0x0800a511
 800a4b8:	0800a529 	.word	0x0800a529
 800a4bc:	0800a529 	.word	0x0800a529
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a529 	.word	0x0800a529
 800a4c8:	0800a529 	.word	0x0800a529
 800a4cc:	0800a529 	.word	0x0800a529
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a519 	.word	0x0800a519
 800a4d8:	0800a529 	.word	0x0800a529
 800a4dc:	0800a529 	.word	0x0800a529
 800a4e0:	0800a529 	.word	0x0800a529
 800a4e4:	0800a529 	.word	0x0800a529
 800a4e8:	0800a529 	.word	0x0800a529
 800a4ec:	0800a529 	.word	0x0800a529
 800a4f0:	0800a529 	.word	0x0800a529
 800a4f4:	0800a521 	.word	0x0800a521
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4fe:	e0c3      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a500:	2304      	movs	r3, #4
 800a502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a506:	e0bf      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a508:	2308      	movs	r3, #8
 800a50a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a50e:	e0bb      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a510:	2310      	movs	r3, #16
 800a512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a516:	e0b7      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a518:	2320      	movs	r3, #32
 800a51a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a51e:	e0b3      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a520:	2340      	movs	r3, #64	; 0x40
 800a522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a526:	e0af      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a528:	2380      	movs	r3, #128	; 0x80
 800a52a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a52e:	bf00      	nop
 800a530:	e0aa      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a86      	ldr	r2, [pc, #536]	; (800a750 <UART_SetConfig+0x6a0>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d132      	bne.n	800a5a2 <UART_SetConfig+0x4f2>
 800a53c:	4b83      	ldr	r3, [pc, #524]	; (800a74c <UART_SetConfig+0x69c>)
 800a53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	2b05      	cmp	r3, #5
 800a546:	d827      	bhi.n	800a598 <UART_SetConfig+0x4e8>
 800a548:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <UART_SetConfig+0x4a0>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a571 	.word	0x0800a571
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a589 	.word	0x0800a589
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2300      	movs	r3, #0
 800a56a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a56e:	e08b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a576:	e087      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a57e:	e083      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a586:	e07f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a58e:	e07b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a590:	2340      	movs	r3, #64	; 0x40
 800a592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a596:	e077      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a598:	2380      	movs	r3, #128	; 0x80
 800a59a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a59e:	bf00      	nop
 800a5a0:	e072      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a6b      	ldr	r2, [pc, #428]	; (800a754 <UART_SetConfig+0x6a4>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d132      	bne.n	800a612 <UART_SetConfig+0x562>
 800a5ac:	4b67      	ldr	r3, [pc, #412]	; (800a74c <UART_SetConfig+0x69c>)
 800a5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	2b05      	cmp	r3, #5
 800a5b6:	d827      	bhi.n	800a608 <UART_SetConfig+0x558>
 800a5b8:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <UART_SetConfig+0x510>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a5d9 	.word	0x0800a5d9
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5e9 	.word	0x0800a5e9
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5de:	e053      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5e6:	e04f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5ee:	e04b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5f6:	e047      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a5f8:	2320      	movs	r3, #32
 800a5fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5fe:	e043      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a600:	2340      	movs	r3, #64	; 0x40
 800a602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a606:	e03f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a60e:	bf00      	nop
 800a610:	e03a      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a50      	ldr	r2, [pc, #320]	; (800a758 <UART_SetConfig+0x6a8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d132      	bne.n	800a682 <UART_SetConfig+0x5d2>
 800a61c:	4b4b      	ldr	r3, [pc, #300]	; (800a74c <UART_SetConfig+0x69c>)
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	f003 0307 	and.w	r3, r3, #7
 800a624:	2b05      	cmp	r3, #5
 800a626:	d827      	bhi.n	800a678 <UART_SetConfig+0x5c8>
 800a628:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <UART_SetConfig+0x580>)
 800a62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62e:	bf00      	nop
 800a630:	0800a649 	.word	0x0800a649
 800a634:	0800a651 	.word	0x0800a651
 800a638:	0800a659 	.word	0x0800a659
 800a63c:	0800a661 	.word	0x0800a661
 800a640:	0800a669 	.word	0x0800a669
 800a644:	0800a671 	.word	0x0800a671
 800a648:	2302      	movs	r3, #2
 800a64a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a64e:	e01b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a650:	2304      	movs	r3, #4
 800a652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a656:	e017      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a658:	2308      	movs	r3, #8
 800a65a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a65e:	e013      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a660:	2310      	movs	r3, #16
 800a662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a666:	e00f      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a668:	2320      	movs	r3, #32
 800a66a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a66e:	e00b      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a670:	2340      	movs	r3, #64	; 0x40
 800a672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a676:	e007      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a678:	2380      	movs	r3, #128	; 0x80
 800a67a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a67e:	bf00      	nop
 800a680:	e002      	b.n	800a688 <UART_SetConfig+0x5d8>
 800a682:	2380      	movs	r3, #128	; 0x80
 800a684:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a32      	ldr	r2, [pc, #200]	; (800a758 <UART_SetConfig+0x6a8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	f040 86f7 	bne.w	800b482 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a694:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a698:	2b08      	cmp	r3, #8
 800a69a:	f000 80c0 	beq.w	800a81e <UART_SetConfig+0x76e>
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	dc04      	bgt.n	800a6ac <UART_SetConfig+0x5fc>
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d00c      	beq.n	800a6c0 <UART_SetConfig+0x610>
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d065      	beq.n	800a776 <UART_SetConfig+0x6c6>
 800a6aa:	e27a      	b.n	800aba2 <UART_SetConfig+0xaf2>
 800a6ac:	2b20      	cmp	r3, #32
 800a6ae:	f000 81b0 	beq.w	800aa12 <UART_SetConfig+0x962>
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	f000 821e 	beq.w	800aaf4 <UART_SetConfig+0xa44>
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	f000 8104 	beq.w	800a8c6 <UART_SetConfig+0x816>
 800a6be:	e270      	b.n	800aba2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a6c0:	f7fe f814 	bl	80086ec <HAL_RCCEx_GetD3PCLK1Freq>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d04e      	beq.n	800a76c <UART_SetConfig+0x6bc>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d048      	beq.n	800a768 <UART_SetConfig+0x6b8>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d042      	beq.n	800a764 <UART_SetConfig+0x6b4>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d03c      	beq.n	800a760 <UART_SetConfig+0x6b0>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d036      	beq.n	800a75c <UART_SetConfig+0x6ac>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	d026      	beq.n	800a744 <UART_SetConfig+0x694>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fa:	2b06      	cmp	r3, #6
 800a6fc:	d020      	beq.n	800a740 <UART_SetConfig+0x690>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	2b07      	cmp	r3, #7
 800a704:	d01a      	beq.n	800a73c <UART_SetConfig+0x68c>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70a:	2b08      	cmp	r3, #8
 800a70c:	d014      	beq.n	800a738 <UART_SetConfig+0x688>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	2b09      	cmp	r3, #9
 800a714:	d00e      	beq.n	800a734 <UART_SetConfig+0x684>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	2b0a      	cmp	r3, #10
 800a71c:	d008      	beq.n	800a730 <UART_SetConfig+0x680>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b0b      	cmp	r3, #11
 800a724:	d102      	bne.n	800a72c <UART_SetConfig+0x67c>
 800a726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a72a:	e020      	b.n	800a76e <UART_SetConfig+0x6be>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e01e      	b.n	800a76e <UART_SetConfig+0x6be>
 800a730:	2380      	movs	r3, #128	; 0x80
 800a732:	e01c      	b.n	800a76e <UART_SetConfig+0x6be>
 800a734:	2340      	movs	r3, #64	; 0x40
 800a736:	e01a      	b.n	800a76e <UART_SetConfig+0x6be>
 800a738:	2320      	movs	r3, #32
 800a73a:	e018      	b.n	800a76e <UART_SetConfig+0x6be>
 800a73c:	2310      	movs	r3, #16
 800a73e:	e016      	b.n	800a76e <UART_SetConfig+0x6be>
 800a740:	230c      	movs	r3, #12
 800a742:	e014      	b.n	800a76e <UART_SetConfig+0x6be>
 800a744:	230a      	movs	r3, #10
 800a746:	e012      	b.n	800a76e <UART_SetConfig+0x6be>
 800a748:	40011400 	.word	0x40011400
 800a74c:	58024400 	.word	0x58024400
 800a750:	40007800 	.word	0x40007800
 800a754:	40007c00 	.word	0x40007c00
 800a758:	58000c00 	.word	0x58000c00
 800a75c:	2308      	movs	r3, #8
 800a75e:	e006      	b.n	800a76e <UART_SetConfig+0x6be>
 800a760:	2306      	movs	r3, #6
 800a762:	e004      	b.n	800a76e <UART_SetConfig+0x6be>
 800a764:	2304      	movs	r3, #4
 800a766:	e002      	b.n	800a76e <UART_SetConfig+0x6be>
 800a768:	2302      	movs	r3, #2
 800a76a:	e000      	b.n	800a76e <UART_SetConfig+0x6be>
 800a76c:	2301      	movs	r3, #1
 800a76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a774:	e219      	b.n	800abaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a776:	f107 0318 	add.w	r3, r7, #24
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fd ffcc 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b00      	cmp	r3, #0
 800a788:	d044      	beq.n	800a814 <UART_SetConfig+0x764>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d03e      	beq.n	800a810 <UART_SetConfig+0x760>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b02      	cmp	r3, #2
 800a798:	d038      	beq.n	800a80c <UART_SetConfig+0x75c>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d032      	beq.n	800a808 <UART_SetConfig+0x758>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d02c      	beq.n	800a804 <UART_SetConfig+0x754>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d026      	beq.n	800a800 <UART_SetConfig+0x750>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2b06      	cmp	r3, #6
 800a7b8:	d020      	beq.n	800a7fc <UART_SetConfig+0x74c>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	d01a      	beq.n	800a7f8 <UART_SetConfig+0x748>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b08      	cmp	r3, #8
 800a7c8:	d014      	beq.n	800a7f4 <UART_SetConfig+0x744>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d00e      	beq.n	800a7f0 <UART_SetConfig+0x740>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	2b0a      	cmp	r3, #10
 800a7d8:	d008      	beq.n	800a7ec <UART_SetConfig+0x73c>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b0b      	cmp	r3, #11
 800a7e0:	d102      	bne.n	800a7e8 <UART_SetConfig+0x738>
 800a7e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7e6:	e016      	b.n	800a816 <UART_SetConfig+0x766>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e014      	b.n	800a816 <UART_SetConfig+0x766>
 800a7ec:	2380      	movs	r3, #128	; 0x80
 800a7ee:	e012      	b.n	800a816 <UART_SetConfig+0x766>
 800a7f0:	2340      	movs	r3, #64	; 0x40
 800a7f2:	e010      	b.n	800a816 <UART_SetConfig+0x766>
 800a7f4:	2320      	movs	r3, #32
 800a7f6:	e00e      	b.n	800a816 <UART_SetConfig+0x766>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	e00c      	b.n	800a816 <UART_SetConfig+0x766>
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	e00a      	b.n	800a816 <UART_SetConfig+0x766>
 800a800:	230a      	movs	r3, #10
 800a802:	e008      	b.n	800a816 <UART_SetConfig+0x766>
 800a804:	2308      	movs	r3, #8
 800a806:	e006      	b.n	800a816 <UART_SetConfig+0x766>
 800a808:	2306      	movs	r3, #6
 800a80a:	e004      	b.n	800a816 <UART_SetConfig+0x766>
 800a80c:	2304      	movs	r3, #4
 800a80e:	e002      	b.n	800a816 <UART_SetConfig+0x766>
 800a810:	2302      	movs	r3, #2
 800a812:	e000      	b.n	800a816 <UART_SetConfig+0x766>
 800a814:	2301      	movs	r3, #1
 800a816:	fbb2 f3f3 	udiv	r3, r2, r3
 800a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a81c:	e1c5      	b.n	800abaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe f8c4 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d044      	beq.n	800a8bc <UART_SetConfig+0x80c>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b01      	cmp	r3, #1
 800a838:	d03e      	beq.n	800a8b8 <UART_SetConfig+0x808>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d038      	beq.n	800a8b4 <UART_SetConfig+0x804>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	2b03      	cmp	r3, #3
 800a848:	d032      	beq.n	800a8b0 <UART_SetConfig+0x800>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d02c      	beq.n	800a8ac <UART_SetConfig+0x7fc>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	2b05      	cmp	r3, #5
 800a858:	d026      	beq.n	800a8a8 <UART_SetConfig+0x7f8>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	2b06      	cmp	r3, #6
 800a860:	d020      	beq.n	800a8a4 <UART_SetConfig+0x7f4>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b07      	cmp	r3, #7
 800a868:	d01a      	beq.n	800a8a0 <UART_SetConfig+0x7f0>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	2b08      	cmp	r3, #8
 800a870:	d014      	beq.n	800a89c <UART_SetConfig+0x7ec>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b09      	cmp	r3, #9
 800a878:	d00e      	beq.n	800a898 <UART_SetConfig+0x7e8>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b0a      	cmp	r3, #10
 800a880:	d008      	beq.n	800a894 <UART_SetConfig+0x7e4>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b0b      	cmp	r3, #11
 800a888:	d102      	bne.n	800a890 <UART_SetConfig+0x7e0>
 800a88a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a88e:	e016      	b.n	800a8be <UART_SetConfig+0x80e>
 800a890:	2301      	movs	r3, #1
 800a892:	e014      	b.n	800a8be <UART_SetConfig+0x80e>
 800a894:	2380      	movs	r3, #128	; 0x80
 800a896:	e012      	b.n	800a8be <UART_SetConfig+0x80e>
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	e010      	b.n	800a8be <UART_SetConfig+0x80e>
 800a89c:	2320      	movs	r3, #32
 800a89e:	e00e      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	e00c      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8a4:	230c      	movs	r3, #12
 800a8a6:	e00a      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8a8:	230a      	movs	r3, #10
 800a8aa:	e008      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	e006      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8b0:	2306      	movs	r3, #6
 800a8b2:	e004      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	e002      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e000      	b.n	800a8be <UART_SetConfig+0x80e>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c4:	e171      	b.n	800abaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8c6:	4b7a      	ldr	r3, [pc, #488]	; (800aab0 <UART_SetConfig+0xa00>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d054      	beq.n	800a97c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8d2:	4b77      	ldr	r3, [pc, #476]	; (800aab0 <UART_SetConfig+0xa00>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	4a75      	ldr	r2, [pc, #468]	; (800aab4 <UART_SetConfig+0xa04>)
 800a8de:	40da      	lsrs	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d044      	beq.n	800a972 <UART_SetConfig+0x8c2>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d03e      	beq.n	800a96e <UART_SetConfig+0x8be>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d038      	beq.n	800a96a <UART_SetConfig+0x8ba>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d032      	beq.n	800a966 <UART_SetConfig+0x8b6>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b04      	cmp	r3, #4
 800a906:	d02c      	beq.n	800a962 <UART_SetConfig+0x8b2>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2b05      	cmp	r3, #5
 800a90e:	d026      	beq.n	800a95e <UART_SetConfig+0x8ae>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b06      	cmp	r3, #6
 800a916:	d020      	beq.n	800a95a <UART_SetConfig+0x8aa>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2b07      	cmp	r3, #7
 800a91e:	d01a      	beq.n	800a956 <UART_SetConfig+0x8a6>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	2b08      	cmp	r3, #8
 800a926:	d014      	beq.n	800a952 <UART_SetConfig+0x8a2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	2b09      	cmp	r3, #9
 800a92e:	d00e      	beq.n	800a94e <UART_SetConfig+0x89e>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	2b0a      	cmp	r3, #10
 800a936:	d008      	beq.n	800a94a <UART_SetConfig+0x89a>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	2b0b      	cmp	r3, #11
 800a93e:	d102      	bne.n	800a946 <UART_SetConfig+0x896>
 800a940:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a944:	e016      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a946:	2301      	movs	r3, #1
 800a948:	e014      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a94a:	2380      	movs	r3, #128	; 0x80
 800a94c:	e012      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	e010      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a952:	2320      	movs	r3, #32
 800a954:	e00e      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a956:	2310      	movs	r3, #16
 800a958:	e00c      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a95a:	230c      	movs	r3, #12
 800a95c:	e00a      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a95e:	230a      	movs	r3, #10
 800a960:	e008      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a962:	2308      	movs	r3, #8
 800a964:	e006      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a966:	2306      	movs	r3, #6
 800a968:	e004      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a96a:	2304      	movs	r3, #4
 800a96c:	e002      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a96e:	2302      	movs	r3, #2
 800a970:	e000      	b.n	800a974 <UART_SetConfig+0x8c4>
 800a972:	2301      	movs	r3, #1
 800a974:	fbb2 f3f3 	udiv	r3, r2, r3
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a97a:	e116      	b.n	800abaa <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	d043      	beq.n	800aa0c <UART_SetConfig+0x95c>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d03d      	beq.n	800aa08 <UART_SetConfig+0x958>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b02      	cmp	r3, #2
 800a992:	d037      	beq.n	800aa04 <UART_SetConfig+0x954>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d031      	beq.n	800aa00 <UART_SetConfig+0x950>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d02b      	beq.n	800a9fc <UART_SetConfig+0x94c>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b05      	cmp	r3, #5
 800a9aa:	d025      	beq.n	800a9f8 <UART_SetConfig+0x948>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b06      	cmp	r3, #6
 800a9b2:	d01f      	beq.n	800a9f4 <UART_SetConfig+0x944>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	2b07      	cmp	r3, #7
 800a9ba:	d019      	beq.n	800a9f0 <UART_SetConfig+0x940>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	2b08      	cmp	r3, #8
 800a9c2:	d013      	beq.n	800a9ec <UART_SetConfig+0x93c>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b09      	cmp	r3, #9
 800a9ca:	d00d      	beq.n	800a9e8 <UART_SetConfig+0x938>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b0a      	cmp	r3, #10
 800a9d2:	d007      	beq.n	800a9e4 <UART_SetConfig+0x934>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b0b      	cmp	r3, #11
 800a9da:	d101      	bne.n	800a9e0 <UART_SetConfig+0x930>
 800a9dc:	4b36      	ldr	r3, [pc, #216]	; (800aab8 <UART_SetConfig+0xa08>)
 800a9de:	e016      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9e0:	4b34      	ldr	r3, [pc, #208]	; (800aab4 <UART_SetConfig+0xa04>)
 800a9e2:	e014      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9e4:	4b35      	ldr	r3, [pc, #212]	; (800aabc <UART_SetConfig+0xa0c>)
 800a9e6:	e012      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9e8:	4b35      	ldr	r3, [pc, #212]	; (800aac0 <UART_SetConfig+0xa10>)
 800a9ea:	e010      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9ec:	4b35      	ldr	r3, [pc, #212]	; (800aac4 <UART_SetConfig+0xa14>)
 800a9ee:	e00e      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9f0:	4b35      	ldr	r3, [pc, #212]	; (800aac8 <UART_SetConfig+0xa18>)
 800a9f2:	e00c      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9f4:	4b35      	ldr	r3, [pc, #212]	; (800aacc <UART_SetConfig+0xa1c>)
 800a9f6:	e00a      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9f8:	4b35      	ldr	r3, [pc, #212]	; (800aad0 <UART_SetConfig+0xa20>)
 800a9fa:	e008      	b.n	800aa0e <UART_SetConfig+0x95e>
 800a9fc:	4b35      	ldr	r3, [pc, #212]	; (800aad4 <UART_SetConfig+0xa24>)
 800a9fe:	e006      	b.n	800aa0e <UART_SetConfig+0x95e>
 800aa00:	4b35      	ldr	r3, [pc, #212]	; (800aad8 <UART_SetConfig+0xa28>)
 800aa02:	e004      	b.n	800aa0e <UART_SetConfig+0x95e>
 800aa04:	4b35      	ldr	r3, [pc, #212]	; (800aadc <UART_SetConfig+0xa2c>)
 800aa06:	e002      	b.n	800aa0e <UART_SetConfig+0x95e>
 800aa08:	4b35      	ldr	r3, [pc, #212]	; (800aae0 <UART_SetConfig+0xa30>)
 800aa0a:	e000      	b.n	800aa0e <UART_SetConfig+0x95e>
 800aa0c:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <UART_SetConfig+0xa04>)
 800aa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa10:	e0cb      	b.n	800abaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d046      	beq.n	800aaa8 <UART_SetConfig+0x9f8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d040      	beq.n	800aaa4 <UART_SetConfig+0x9f4>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d03a      	beq.n	800aaa0 <UART_SetConfig+0x9f0>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d034      	beq.n	800aa9c <UART_SetConfig+0x9ec>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d02e      	beq.n	800aa98 <UART_SetConfig+0x9e8>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	d028      	beq.n	800aa94 <UART_SetConfig+0x9e4>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b06      	cmp	r3, #6
 800aa48:	d022      	beq.n	800aa90 <UART_SetConfig+0x9e0>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4e:	2b07      	cmp	r3, #7
 800aa50:	d01c      	beq.n	800aa8c <UART_SetConfig+0x9dc>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d016      	beq.n	800aa88 <UART_SetConfig+0x9d8>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b09      	cmp	r3, #9
 800aa60:	d00f      	beq.n	800aa82 <UART_SetConfig+0x9d2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	2b0a      	cmp	r3, #10
 800aa68:	d008      	beq.n	800aa7c <UART_SetConfig+0x9cc>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b0b      	cmp	r3, #11
 800aa70:	d102      	bne.n	800aa78 <UART_SetConfig+0x9c8>
 800aa72:	f643 5309 	movw	r3, #15625	; 0x3d09
 800aa76:	e018      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa78:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <UART_SetConfig+0xa18>)
 800aa7a:	e016      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa7c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800aa80:	e013      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa82:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aa86:	e010      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa88:	4b16      	ldr	r3, [pc, #88]	; (800aae4 <UART_SetConfig+0xa34>)
 800aa8a:	e00e      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa8c:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <UART_SetConfig+0xa08>)
 800aa8e:	e00c      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa90:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <UART_SetConfig+0xa38>)
 800aa92:	e00a      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa94:	4b15      	ldr	r3, [pc, #84]	; (800aaec <UART_SetConfig+0xa3c>)
 800aa96:	e008      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa98:	4b08      	ldr	r3, [pc, #32]	; (800aabc <UART_SetConfig+0xa0c>)
 800aa9a:	e006      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aa9c:	4b14      	ldr	r3, [pc, #80]	; (800aaf0 <UART_SetConfig+0xa40>)
 800aa9e:	e004      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <UART_SetConfig+0xa10>)
 800aaa2:	e002      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <UART_SetConfig+0xa14>)
 800aaa6:	e000      	b.n	800aaaa <UART_SetConfig+0x9fa>
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <UART_SetConfig+0xa18>)
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaac:	e07d      	b.n	800abaa <UART_SetConfig+0xafa>
 800aaae:	bf00      	nop
 800aab0:	58024400 	.word	0x58024400
 800aab4:	03d09000 	.word	0x03d09000
 800aab8:	0003d090 	.word	0x0003d090
 800aabc:	0007a120 	.word	0x0007a120
 800aac0:	000f4240 	.word	0x000f4240
 800aac4:	001e8480 	.word	0x001e8480
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	00516155 	.word	0x00516155
 800aad0:	0061a800 	.word	0x0061a800
 800aad4:	007a1200 	.word	0x007a1200
 800aad8:	00a2c2aa 	.word	0x00a2c2aa
 800aadc:	00f42400 	.word	0x00f42400
 800aae0:	01e84800 	.word	0x01e84800
 800aae4:	0001e848 	.word	0x0001e848
 800aae8:	00051615 	.word	0x00051615
 800aaec:	00061a80 	.word	0x00061a80
 800aaf0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d04e      	beq.n	800ab9a <UART_SetConfig+0xaea>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d047      	beq.n	800ab94 <UART_SetConfig+0xae4>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d040      	beq.n	800ab8e <UART_SetConfig+0xade>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d039      	beq.n	800ab88 <UART_SetConfig+0xad8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d032      	beq.n	800ab82 <UART_SetConfig+0xad2>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b05      	cmp	r3, #5
 800ab22:	d02b      	beq.n	800ab7c <UART_SetConfig+0xacc>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b06      	cmp	r3, #6
 800ab2a:	d024      	beq.n	800ab76 <UART_SetConfig+0xac6>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b07      	cmp	r3, #7
 800ab32:	d01d      	beq.n	800ab70 <UART_SetConfig+0xac0>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d016      	beq.n	800ab6a <UART_SetConfig+0xaba>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b09      	cmp	r3, #9
 800ab42:	d00f      	beq.n	800ab64 <UART_SetConfig+0xab4>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b0a      	cmp	r3, #10
 800ab4a:	d008      	beq.n	800ab5e <UART_SetConfig+0xaae>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	2b0b      	cmp	r3, #11
 800ab52:	d101      	bne.n	800ab58 <UART_SetConfig+0xaa8>
 800ab54:	2380      	movs	r3, #128	; 0x80
 800ab56:	e022      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5c:	e01f      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab62:	e01c      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab68:	e019      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6e:	e016      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab74:	e013      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ab7a:	e010      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ab80:	e00d      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab86:	e00a      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab88:	f241 5355 	movw	r3, #5461	; 0x1555
 800ab8c:	e007      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab92:	e004      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab98:	e001      	b.n	800ab9e <UART_SetConfig+0xaee>
 800ab9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aba0:	e003      	b.n	800abaa <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aba8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f001 83e8 	beq.w	800c382 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d305      	bcc.n	800abce <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abca:	429a      	cmp	r2, r3
 800abcc:	d904      	bls.n	800abd8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd4:	f001 bbd5 	b.w	800c382 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800abd8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abdc:	2b08      	cmp	r3, #8
 800abde:	f000 8154 	beq.w	800ae8a <UART_SetConfig+0xdda>
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	dc06      	bgt.n	800abf4 <UART_SetConfig+0xb44>
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d00f      	beq.n	800ac0a <UART_SetConfig+0xb5a>
 800abea:	2b04      	cmp	r3, #4
 800abec:	f000 80ac 	beq.w	800ad48 <UART_SetConfig+0xc98>
 800abf0:	f000 bc30 	b.w	800b454 <UART_SetConfig+0x13a4>
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	f000 832d 	beq.w	800b254 <UART_SetConfig+0x11a4>
 800abfa:	2b40      	cmp	r3, #64	; 0x40
 800abfc:	f000 83a5 	beq.w	800b34a <UART_SetConfig+0x129a>
 800ac00:	2b10      	cmp	r3, #16
 800ac02:	f000 81e3 	beq.w	800afcc <UART_SetConfig+0xf1c>
 800ac06:	f000 bc25 	b.w	800b454 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac0a:	f7fd fd6f 	bl	80086ec <HAL_RCCEx_GetD3PCLK1Freq>
 800ac0e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	4618      	mov	r0, r3
 800ac14:	f04f 0100 	mov.w	r1, #0
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d067      	beq.n	800acf0 <UART_SetConfig+0xc40>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d05e      	beq.n	800ace6 <UART_SetConfig+0xc36>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d055      	beq.n	800acdc <UART_SetConfig+0xc2c>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d04c      	beq.n	800acd2 <UART_SetConfig+0xc22>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	2b04      	cmp	r3, #4
 800ac3e:	d043      	beq.n	800acc8 <UART_SetConfig+0xc18>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	2b05      	cmp	r3, #5
 800ac46:	d03a      	beq.n	800acbe <UART_SetConfig+0xc0e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	2b06      	cmp	r3, #6
 800ac4e:	d031      	beq.n	800acb4 <UART_SetConfig+0xc04>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	2b07      	cmp	r3, #7
 800ac56:	d028      	beq.n	800acaa <UART_SetConfig+0xbfa>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d01f      	beq.n	800aca0 <UART_SetConfig+0xbf0>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	2b09      	cmp	r3, #9
 800ac66:	d016      	beq.n	800ac96 <UART_SetConfig+0xbe6>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	2b0a      	cmp	r3, #10
 800ac6e:	d00d      	beq.n	800ac8c <UART_SetConfig+0xbdc>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b0b      	cmp	r3, #11
 800ac76:	d104      	bne.n	800ac82 <UART_SetConfig+0xbd2>
 800ac78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac7c:	f04f 0400 	mov.w	r4, #0
 800ac80:	e03a      	b.n	800acf8 <UART_SetConfig+0xc48>
 800ac82:	f04f 0301 	mov.w	r3, #1
 800ac86:	f04f 0400 	mov.w	r4, #0
 800ac8a:	e035      	b.n	800acf8 <UART_SetConfig+0xc48>
 800ac8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac90:	f04f 0400 	mov.w	r4, #0
 800ac94:	e030      	b.n	800acf8 <UART_SetConfig+0xc48>
 800ac96:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac9a:	f04f 0400 	mov.w	r4, #0
 800ac9e:	e02b      	b.n	800acf8 <UART_SetConfig+0xc48>
 800aca0:	f04f 0320 	mov.w	r3, #32
 800aca4:	f04f 0400 	mov.w	r4, #0
 800aca8:	e026      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acaa:	f04f 0310 	mov.w	r3, #16
 800acae:	f04f 0400 	mov.w	r4, #0
 800acb2:	e021      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acb4:	f04f 030c 	mov.w	r3, #12
 800acb8:	f04f 0400 	mov.w	r4, #0
 800acbc:	e01c      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acbe:	f04f 030a 	mov.w	r3, #10
 800acc2:	f04f 0400 	mov.w	r4, #0
 800acc6:	e017      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acc8:	f04f 0308 	mov.w	r3, #8
 800accc:	f04f 0400 	mov.w	r4, #0
 800acd0:	e012      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acd2:	f04f 0306 	mov.w	r3, #6
 800acd6:	f04f 0400 	mov.w	r4, #0
 800acda:	e00d      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acdc:	f04f 0304 	mov.w	r3, #4
 800ace0:	f04f 0400 	mov.w	r4, #0
 800ace4:	e008      	b.n	800acf8 <UART_SetConfig+0xc48>
 800ace6:	f04f 0302 	mov.w	r3, #2
 800acea:	f04f 0400 	mov.w	r4, #0
 800acee:	e003      	b.n	800acf8 <UART_SetConfig+0xc48>
 800acf0:	f04f 0301 	mov.w	r3, #1
 800acf4:	f04f 0400 	mov.w	r4, #0
 800acf8:	461a      	mov	r2, r3
 800acfa:	4623      	mov	r3, r4
 800acfc:	f7f5 faec 	bl	80002d8 <__aeabi_uldivmod>
 800ad00:	4603      	mov	r3, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	4619      	mov	r1, r3
 800ad06:	4622      	mov	r2, r4
 800ad08:	f04f 0300 	mov.w	r3, #0
 800ad0c:	f04f 0400 	mov.w	r4, #0
 800ad10:	0214      	lsls	r4, r2, #8
 800ad12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad16:	020b      	lsls	r3, r1, #8
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6852      	ldr	r2, [r2, #4]
 800ad1c:	0852      	lsrs	r2, r2, #1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	f04f 0200 	mov.w	r2, #0
 800ad24:	eb13 0b01 	adds.w	fp, r3, r1
 800ad28:	eb44 0c02 	adc.w	ip, r4, r2
 800ad2c:	4658      	mov	r0, fp
 800ad2e:	4661      	mov	r1, ip
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f04f 0400 	mov.w	r4, #0
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	f7f5 facc 	bl	80002d8 <__aeabi_uldivmod>
 800ad40:	4603      	mov	r3, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad46:	e389      	b.n	800b45c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad48:	f107 0318 	add.w	r3, r7, #24
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fd fce3 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f04f 0100 	mov.w	r1, #0
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d067      	beq.n	800ae32 <UART_SetConfig+0xd82>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d05e      	beq.n	800ae28 <UART_SetConfig+0xd78>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d055      	beq.n	800ae1e <UART_SetConfig+0xd6e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d04c      	beq.n	800ae14 <UART_SetConfig+0xd64>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d043      	beq.n	800ae0a <UART_SetConfig+0xd5a>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d03a      	beq.n	800ae00 <UART_SetConfig+0xd50>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	2b06      	cmp	r3, #6
 800ad90:	d031      	beq.n	800adf6 <UART_SetConfig+0xd46>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b07      	cmp	r3, #7
 800ad98:	d028      	beq.n	800adec <UART_SetConfig+0xd3c>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d01f      	beq.n	800ade2 <UART_SetConfig+0xd32>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b09      	cmp	r3, #9
 800ada8:	d016      	beq.n	800add8 <UART_SetConfig+0xd28>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b0a      	cmp	r3, #10
 800adb0:	d00d      	beq.n	800adce <UART_SetConfig+0xd1e>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b0b      	cmp	r3, #11
 800adb8:	d104      	bne.n	800adc4 <UART_SetConfig+0xd14>
 800adba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adbe:	f04f 0400 	mov.w	r4, #0
 800adc2:	e03a      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800adc4:	f04f 0301 	mov.w	r3, #1
 800adc8:	f04f 0400 	mov.w	r4, #0
 800adcc:	e035      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800adce:	f04f 0380 	mov.w	r3, #128	; 0x80
 800add2:	f04f 0400 	mov.w	r4, #0
 800add6:	e030      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800add8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800addc:	f04f 0400 	mov.w	r4, #0
 800ade0:	e02b      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ade2:	f04f 0320 	mov.w	r3, #32
 800ade6:	f04f 0400 	mov.w	r4, #0
 800adea:	e026      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800adec:	f04f 0310 	mov.w	r3, #16
 800adf0:	f04f 0400 	mov.w	r4, #0
 800adf4:	e021      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800adf6:	f04f 030c 	mov.w	r3, #12
 800adfa:	f04f 0400 	mov.w	r4, #0
 800adfe:	e01c      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ae00:	f04f 030a 	mov.w	r3, #10
 800ae04:	f04f 0400 	mov.w	r4, #0
 800ae08:	e017      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ae0a:	f04f 0308 	mov.w	r3, #8
 800ae0e:	f04f 0400 	mov.w	r4, #0
 800ae12:	e012      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ae14:	f04f 0306 	mov.w	r3, #6
 800ae18:	f04f 0400 	mov.w	r4, #0
 800ae1c:	e00d      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ae1e:	f04f 0304 	mov.w	r3, #4
 800ae22:	f04f 0400 	mov.w	r4, #0
 800ae26:	e008      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ae28:	f04f 0302 	mov.w	r3, #2
 800ae2c:	f04f 0400 	mov.w	r4, #0
 800ae30:	e003      	b.n	800ae3a <UART_SetConfig+0xd8a>
 800ae32:	f04f 0301 	mov.w	r3, #1
 800ae36:	f04f 0400 	mov.w	r4, #0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	f7f5 fa4b 	bl	80002d8 <__aeabi_uldivmod>
 800ae42:	4603      	mov	r3, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	4619      	mov	r1, r3
 800ae48:	4622      	mov	r2, r4
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	f04f 0400 	mov.w	r4, #0
 800ae52:	0214      	lsls	r4, r2, #8
 800ae54:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ae58:	020b      	lsls	r3, r1, #8
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	6852      	ldr	r2, [r2, #4]
 800ae5e:	0852      	lsrs	r2, r2, #1
 800ae60:	4611      	mov	r1, r2
 800ae62:	f04f 0200 	mov.w	r2, #0
 800ae66:	eb13 0b01 	adds.w	fp, r3, r1
 800ae6a:	eb44 0c02 	adc.w	ip, r4, r2
 800ae6e:	4658      	mov	r0, fp
 800ae70:	4661      	mov	r1, ip
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f04f 0400 	mov.w	r4, #0
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4623      	mov	r3, r4
 800ae7e:	f7f5 fa2b 	bl	80002d8 <__aeabi_uldivmod>
 800ae82:	4603      	mov	r3, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae88:	e2e8      	b.n	800b45c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae8a:	f107 030c 	add.w	r3, r7, #12
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fd fd8e 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f04f 0100 	mov.w	r1, #0
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d067      	beq.n	800af74 <UART_SetConfig+0xec4>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d05e      	beq.n	800af6a <UART_SetConfig+0xeba>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d055      	beq.n	800af60 <UART_SetConfig+0xeb0>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d04c      	beq.n	800af56 <UART_SetConfig+0xea6>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	2b04      	cmp	r3, #4
 800aec2:	d043      	beq.n	800af4c <UART_SetConfig+0xe9c>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	2b05      	cmp	r3, #5
 800aeca:	d03a      	beq.n	800af42 <UART_SetConfig+0xe92>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	2b06      	cmp	r3, #6
 800aed2:	d031      	beq.n	800af38 <UART_SetConfig+0xe88>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b07      	cmp	r3, #7
 800aeda:	d028      	beq.n	800af2e <UART_SetConfig+0xe7e>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d01f      	beq.n	800af24 <UART_SetConfig+0xe74>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	2b09      	cmp	r3, #9
 800aeea:	d016      	beq.n	800af1a <UART_SetConfig+0xe6a>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	2b0a      	cmp	r3, #10
 800aef2:	d00d      	beq.n	800af10 <UART_SetConfig+0xe60>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef8:	2b0b      	cmp	r3, #11
 800aefa:	d104      	bne.n	800af06 <UART_SetConfig+0xe56>
 800aefc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af00:	f04f 0400 	mov.w	r4, #0
 800af04:	e03a      	b.n	800af7c <UART_SetConfig+0xecc>
 800af06:	f04f 0301 	mov.w	r3, #1
 800af0a:	f04f 0400 	mov.w	r4, #0
 800af0e:	e035      	b.n	800af7c <UART_SetConfig+0xecc>
 800af10:	f04f 0380 	mov.w	r3, #128	; 0x80
 800af14:	f04f 0400 	mov.w	r4, #0
 800af18:	e030      	b.n	800af7c <UART_SetConfig+0xecc>
 800af1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800af1e:	f04f 0400 	mov.w	r4, #0
 800af22:	e02b      	b.n	800af7c <UART_SetConfig+0xecc>
 800af24:	f04f 0320 	mov.w	r3, #32
 800af28:	f04f 0400 	mov.w	r4, #0
 800af2c:	e026      	b.n	800af7c <UART_SetConfig+0xecc>
 800af2e:	f04f 0310 	mov.w	r3, #16
 800af32:	f04f 0400 	mov.w	r4, #0
 800af36:	e021      	b.n	800af7c <UART_SetConfig+0xecc>
 800af38:	f04f 030c 	mov.w	r3, #12
 800af3c:	f04f 0400 	mov.w	r4, #0
 800af40:	e01c      	b.n	800af7c <UART_SetConfig+0xecc>
 800af42:	f04f 030a 	mov.w	r3, #10
 800af46:	f04f 0400 	mov.w	r4, #0
 800af4a:	e017      	b.n	800af7c <UART_SetConfig+0xecc>
 800af4c:	f04f 0308 	mov.w	r3, #8
 800af50:	f04f 0400 	mov.w	r4, #0
 800af54:	e012      	b.n	800af7c <UART_SetConfig+0xecc>
 800af56:	f04f 0306 	mov.w	r3, #6
 800af5a:	f04f 0400 	mov.w	r4, #0
 800af5e:	e00d      	b.n	800af7c <UART_SetConfig+0xecc>
 800af60:	f04f 0304 	mov.w	r3, #4
 800af64:	f04f 0400 	mov.w	r4, #0
 800af68:	e008      	b.n	800af7c <UART_SetConfig+0xecc>
 800af6a:	f04f 0302 	mov.w	r3, #2
 800af6e:	f04f 0400 	mov.w	r4, #0
 800af72:	e003      	b.n	800af7c <UART_SetConfig+0xecc>
 800af74:	f04f 0301 	mov.w	r3, #1
 800af78:	f04f 0400 	mov.w	r4, #0
 800af7c:	461a      	mov	r2, r3
 800af7e:	4623      	mov	r3, r4
 800af80:	f7f5 f9aa 	bl	80002d8 <__aeabi_uldivmod>
 800af84:	4603      	mov	r3, r0
 800af86:	460c      	mov	r4, r1
 800af88:	4619      	mov	r1, r3
 800af8a:	4622      	mov	r2, r4
 800af8c:	f04f 0300 	mov.w	r3, #0
 800af90:	f04f 0400 	mov.w	r4, #0
 800af94:	0214      	lsls	r4, r2, #8
 800af96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af9a:	020b      	lsls	r3, r1, #8
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6852      	ldr	r2, [r2, #4]
 800afa0:	0852      	lsrs	r2, r2, #1
 800afa2:	4611      	mov	r1, r2
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	eb13 0b01 	adds.w	fp, r3, r1
 800afac:	eb44 0c02 	adc.w	ip, r4, r2
 800afb0:	4658      	mov	r0, fp
 800afb2:	4661      	mov	r1, ip
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	f04f 0400 	mov.w	r4, #0
 800afbc:	461a      	mov	r2, r3
 800afbe:	4623      	mov	r3, r4
 800afc0:	f7f5 f98a 	bl	80002d8 <__aeabi_uldivmod>
 800afc4:	4603      	mov	r3, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800afca:	e247      	b.n	800b45c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afcc:	4b96      	ldr	r3, [pc, #600]	; (800b228 <UART_SetConfig+0x1178>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0320 	and.w	r3, r3, #32
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 80a3 	beq.w	800b120 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afda:	4b93      	ldr	r3, [pc, #588]	; (800b228 <UART_SetConfig+0x1178>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	08db      	lsrs	r3, r3, #3
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	4a91      	ldr	r2, [pc, #580]	; (800b22c <UART_SetConfig+0x117c>)
 800afe6:	fa22 f303 	lsr.w	r3, r2, r3
 800afea:	4618      	mov	r0, r3
 800afec:	f04f 0100 	mov.w	r1, #0
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d067      	beq.n	800b0c8 <UART_SetConfig+0x1018>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	2b01      	cmp	r3, #1
 800affe:	d05e      	beq.n	800b0be <UART_SetConfig+0x100e>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	2b02      	cmp	r3, #2
 800b006:	d055      	beq.n	800b0b4 <UART_SetConfig+0x1004>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d04c      	beq.n	800b0aa <UART_SetConfig+0xffa>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	2b04      	cmp	r3, #4
 800b016:	d043      	beq.n	800b0a0 <UART_SetConfig+0xff0>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b05      	cmp	r3, #5
 800b01e:	d03a      	beq.n	800b096 <UART_SetConfig+0xfe6>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b024:	2b06      	cmp	r3, #6
 800b026:	d031      	beq.n	800b08c <UART_SetConfig+0xfdc>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	2b07      	cmp	r3, #7
 800b02e:	d028      	beq.n	800b082 <UART_SetConfig+0xfd2>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b08      	cmp	r3, #8
 800b036:	d01f      	beq.n	800b078 <UART_SetConfig+0xfc8>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d016      	beq.n	800b06e <UART_SetConfig+0xfbe>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	2b0a      	cmp	r3, #10
 800b046:	d00d      	beq.n	800b064 <UART_SetConfig+0xfb4>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	2b0b      	cmp	r3, #11
 800b04e:	d104      	bne.n	800b05a <UART_SetConfig+0xfaa>
 800b050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b054:	f04f 0400 	mov.w	r4, #0
 800b058:	e03a      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b05a:	f04f 0301 	mov.w	r3, #1
 800b05e:	f04f 0400 	mov.w	r4, #0
 800b062:	e035      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b064:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b068:	f04f 0400 	mov.w	r4, #0
 800b06c:	e030      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b06e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b072:	f04f 0400 	mov.w	r4, #0
 800b076:	e02b      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b078:	f04f 0320 	mov.w	r3, #32
 800b07c:	f04f 0400 	mov.w	r4, #0
 800b080:	e026      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b082:	f04f 0310 	mov.w	r3, #16
 800b086:	f04f 0400 	mov.w	r4, #0
 800b08a:	e021      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b08c:	f04f 030c 	mov.w	r3, #12
 800b090:	f04f 0400 	mov.w	r4, #0
 800b094:	e01c      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b096:	f04f 030a 	mov.w	r3, #10
 800b09a:	f04f 0400 	mov.w	r4, #0
 800b09e:	e017      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b0a0:	f04f 0308 	mov.w	r3, #8
 800b0a4:	f04f 0400 	mov.w	r4, #0
 800b0a8:	e012      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b0aa:	f04f 0306 	mov.w	r3, #6
 800b0ae:	f04f 0400 	mov.w	r4, #0
 800b0b2:	e00d      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b0b4:	f04f 0304 	mov.w	r3, #4
 800b0b8:	f04f 0400 	mov.w	r4, #0
 800b0bc:	e008      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b0be:	f04f 0302 	mov.w	r3, #2
 800b0c2:	f04f 0400 	mov.w	r4, #0
 800b0c6:	e003      	b.n	800b0d0 <UART_SetConfig+0x1020>
 800b0c8:	f04f 0301 	mov.w	r3, #1
 800b0cc:	f04f 0400 	mov.w	r4, #0
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	f7f5 f900 	bl	80002d8 <__aeabi_uldivmod>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4622      	mov	r2, r4
 800b0e0:	f04f 0300 	mov.w	r3, #0
 800b0e4:	f04f 0400 	mov.w	r4, #0
 800b0e8:	0214      	lsls	r4, r2, #8
 800b0ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b0ee:	020b      	lsls	r3, r1, #8
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6852      	ldr	r2, [r2, #4]
 800b0f4:	0852      	lsrs	r2, r2, #1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	eb13 0b01 	adds.w	fp, r3, r1
 800b100:	eb44 0c02 	adc.w	ip, r4, r2
 800b104:	4658      	mov	r0, fp
 800b106:	4661      	mov	r1, ip
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	f04f 0400 	mov.w	r4, #0
 800b110:	461a      	mov	r2, r3
 800b112:	4623      	mov	r3, r4
 800b114:	f7f5 f8e0 	bl	80002d8 <__aeabi_uldivmod>
 800b118:	4603      	mov	r3, r0
 800b11a:	460c      	mov	r4, r1
 800b11c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800b11e:	e19d      	b.n	800b45c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d05b      	beq.n	800b1e0 <UART_SetConfig+0x1130>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d053      	beq.n	800b1d8 <UART_SetConfig+0x1128>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b02      	cmp	r3, #2
 800b136:	d04b      	beq.n	800b1d0 <UART_SetConfig+0x1120>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d043      	beq.n	800b1c8 <UART_SetConfig+0x1118>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	2b04      	cmp	r3, #4
 800b146:	d03b      	beq.n	800b1c0 <UART_SetConfig+0x1110>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b05      	cmp	r3, #5
 800b14e:	d033      	beq.n	800b1b8 <UART_SetConfig+0x1108>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b06      	cmp	r3, #6
 800b156:	d02b      	beq.n	800b1b0 <UART_SetConfig+0x1100>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	2b07      	cmp	r3, #7
 800b15e:	d023      	beq.n	800b1a8 <UART_SetConfig+0x10f8>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	2b08      	cmp	r3, #8
 800b166:	d01b      	beq.n	800b1a0 <UART_SetConfig+0x10f0>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	2b09      	cmp	r3, #9
 800b16e:	d013      	beq.n	800b198 <UART_SetConfig+0x10e8>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b0a      	cmp	r3, #10
 800b176:	d00b      	beq.n	800b190 <UART_SetConfig+0x10e0>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	2b0b      	cmp	r3, #11
 800b17e:	d103      	bne.n	800b188 <UART_SetConfig+0x10d8>
 800b180:	4b2a      	ldr	r3, [pc, #168]	; (800b22c <UART_SetConfig+0x117c>)
 800b182:	f04f 0400 	mov.w	r4, #0
 800b186:	e02e      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b188:	4b29      	ldr	r3, [pc, #164]	; (800b230 <UART_SetConfig+0x1180>)
 800b18a:	f04f 0403 	mov.w	r4, #3
 800b18e:	e02a      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b190:	4b28      	ldr	r3, [pc, #160]	; (800b234 <UART_SetConfig+0x1184>)
 800b192:	f04f 0400 	mov.w	r4, #0
 800b196:	e026      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b198:	4b27      	ldr	r3, [pc, #156]	; (800b238 <UART_SetConfig+0x1188>)
 800b19a:	f04f 0400 	mov.w	r4, #0
 800b19e:	e022      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1a0:	4b26      	ldr	r3, [pc, #152]	; (800b23c <UART_SetConfig+0x118c>)
 800b1a2:	f04f 0400 	mov.w	r4, #0
 800b1a6:	e01e      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1a8:	4b25      	ldr	r3, [pc, #148]	; (800b240 <UART_SetConfig+0x1190>)
 800b1aa:	f04f 0400 	mov.w	r4, #0
 800b1ae:	e01a      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1b0:	a419      	add	r4, pc, #100	; (adr r4, 800b218 <UART_SetConfig+0x1168>)
 800b1b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b1b6:	e016      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1b8:	4b22      	ldr	r3, [pc, #136]	; (800b244 <UART_SetConfig+0x1194>)
 800b1ba:	f04f 0400 	mov.w	r4, #0
 800b1be:	e012      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1c0:	4b21      	ldr	r3, [pc, #132]	; (800b248 <UART_SetConfig+0x1198>)
 800b1c2:	f04f 0400 	mov.w	r4, #0
 800b1c6:	e00e      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1c8:	a415      	add	r4, pc, #84	; (adr r4, 800b220 <UART_SetConfig+0x1170>)
 800b1ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b1ce:	e00a      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1d0:	4b1e      	ldr	r3, [pc, #120]	; (800b24c <UART_SetConfig+0x119c>)
 800b1d2:	f04f 0400 	mov.w	r4, #0
 800b1d6:	e006      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1d8:	4b1d      	ldr	r3, [pc, #116]	; (800b250 <UART_SetConfig+0x11a0>)
 800b1da:	f04f 0401 	mov.w	r4, #1
 800b1de:	e002      	b.n	800b1e6 <UART_SetConfig+0x1136>
 800b1e0:	4b13      	ldr	r3, [pc, #76]	; (800b230 <UART_SetConfig+0x1180>)
 800b1e2:	f04f 0403 	mov.w	r4, #3
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	6852      	ldr	r2, [r2, #4]
 800b1ea:	0852      	lsrs	r2, r2, #1
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	eb13 0b01 	adds.w	fp, r3, r1
 800b1f6:	eb44 0c02 	adc.w	ip, r4, r2
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	4661      	mov	r1, ip
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	f04f 0400 	mov.w	r4, #0
 800b206:	461a      	mov	r2, r3
 800b208:	4623      	mov	r3, r4
 800b20a:	f7f5 f865 	bl	80002d8 <__aeabi_uldivmod>
 800b20e:	4603      	mov	r3, r0
 800b210:	460c      	mov	r4, r1
 800b212:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b214:	e122      	b.n	800b45c <UART_SetConfig+0x13ac>
 800b216:	bf00      	nop
 800b218:	51615500 	.word	0x51615500
 800b21c:	00000000 	.word	0x00000000
 800b220:	a2c2aa00 	.word	0xa2c2aa00
 800b224:	00000000 	.word	0x00000000
 800b228:	58024400 	.word	0x58024400
 800b22c:	03d09000 	.word	0x03d09000
 800b230:	d0900000 	.word	0xd0900000
 800b234:	07a12000 	.word	0x07a12000
 800b238:	0f424000 	.word	0x0f424000
 800b23c:	1e848000 	.word	0x1e848000
 800b240:	3d090000 	.word	0x3d090000
 800b244:	61a80000 	.word	0x61a80000
 800b248:	7a120000 	.word	0x7a120000
 800b24c:	f4240000 	.word	0xf4240000
 800b250:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d05b      	beq.n	800b314 <UART_SetConfig+0x1264>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	2b01      	cmp	r3, #1
 800b262:	d053      	beq.n	800b30c <UART_SetConfig+0x125c>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d04b      	beq.n	800b304 <UART_SetConfig+0x1254>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b03      	cmp	r3, #3
 800b272:	d043      	beq.n	800b2fc <UART_SetConfig+0x124c>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d03b      	beq.n	800b2f4 <UART_SetConfig+0x1244>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	2b05      	cmp	r3, #5
 800b282:	d033      	beq.n	800b2ec <UART_SetConfig+0x123c>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b06      	cmp	r3, #6
 800b28a:	d02b      	beq.n	800b2e4 <UART_SetConfig+0x1234>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b07      	cmp	r3, #7
 800b292:	d023      	beq.n	800b2dc <UART_SetConfig+0x122c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d01b      	beq.n	800b2d4 <UART_SetConfig+0x1224>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b09      	cmp	r3, #9
 800b2a2:	d013      	beq.n	800b2cc <UART_SetConfig+0x121c>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2b0a      	cmp	r3, #10
 800b2aa:	d00b      	beq.n	800b2c4 <UART_SetConfig+0x1214>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b0:	2b0b      	cmp	r3, #11
 800b2b2:	d103      	bne.n	800b2bc <UART_SetConfig+0x120c>
 800b2b4:	4bc0      	ldr	r3, [pc, #768]	; (800b5b8 <UART_SetConfig+0x1508>)
 800b2b6:	f04f 0400 	mov.w	r4, #0
 800b2ba:	e02e      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2bc:	4bbf      	ldr	r3, [pc, #764]	; (800b5bc <UART_SetConfig+0x150c>)
 800b2be:	f04f 0400 	mov.w	r4, #0
 800b2c2:	e02a      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2c4:	4bbe      	ldr	r3, [pc, #760]	; (800b5c0 <UART_SetConfig+0x1510>)
 800b2c6:	f04f 0400 	mov.w	r4, #0
 800b2ca:	e026      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2cc:	4bbd      	ldr	r3, [pc, #756]	; (800b5c4 <UART_SetConfig+0x1514>)
 800b2ce:	f04f 0400 	mov.w	r4, #0
 800b2d2:	e022      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2d4:	4bbc      	ldr	r3, [pc, #752]	; (800b5c8 <UART_SetConfig+0x1518>)
 800b2d6:	f04f 0400 	mov.w	r4, #0
 800b2da:	e01e      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2dc:	4bbb      	ldr	r3, [pc, #748]	; (800b5cc <UART_SetConfig+0x151c>)
 800b2de:	f04f 0400 	mov.w	r4, #0
 800b2e2:	e01a      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2e4:	a4b0      	add	r4, pc, #704	; (adr r4, 800b5a8 <UART_SetConfig+0x14f8>)
 800b2e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b2ea:	e016      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2ec:	4bb8      	ldr	r3, [pc, #736]	; (800b5d0 <UART_SetConfig+0x1520>)
 800b2ee:	f04f 0400 	mov.w	r4, #0
 800b2f2:	e012      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2f4:	4bb7      	ldr	r3, [pc, #732]	; (800b5d4 <UART_SetConfig+0x1524>)
 800b2f6:	f04f 0400 	mov.w	r4, #0
 800b2fa:	e00e      	b.n	800b31a <UART_SetConfig+0x126a>
 800b2fc:	a4ac      	add	r4, pc, #688	; (adr r4, 800b5b0 <UART_SetConfig+0x1500>)
 800b2fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b302:	e00a      	b.n	800b31a <UART_SetConfig+0x126a>
 800b304:	4bb4      	ldr	r3, [pc, #720]	; (800b5d8 <UART_SetConfig+0x1528>)
 800b306:	f04f 0400 	mov.w	r4, #0
 800b30a:	e006      	b.n	800b31a <UART_SetConfig+0x126a>
 800b30c:	4bb3      	ldr	r3, [pc, #716]	; (800b5dc <UART_SetConfig+0x152c>)
 800b30e:	f04f 0400 	mov.w	r4, #0
 800b312:	e002      	b.n	800b31a <UART_SetConfig+0x126a>
 800b314:	4ba9      	ldr	r3, [pc, #676]	; (800b5bc <UART_SetConfig+0x150c>)
 800b316:	f04f 0400 	mov.w	r4, #0
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	6852      	ldr	r2, [r2, #4]
 800b31e:	0852      	lsrs	r2, r2, #1
 800b320:	4611      	mov	r1, r2
 800b322:	f04f 0200 	mov.w	r2, #0
 800b326:	eb13 0b01 	adds.w	fp, r3, r1
 800b32a:	eb44 0c02 	adc.w	ip, r4, r2
 800b32e:	4658      	mov	r0, fp
 800b330:	4661      	mov	r1, ip
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f04f 0400 	mov.w	r4, #0
 800b33a:	461a      	mov	r2, r3
 800b33c:	4623      	mov	r3, r4
 800b33e:	f7f4 ffcb 	bl	80002d8 <__aeabi_uldivmod>
 800b342:	4603      	mov	r3, r0
 800b344:	460c      	mov	r4, r1
 800b346:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b348:	e088      	b.n	800b45c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d064      	beq.n	800b41c <UART_SetConfig+0x136c>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	2b01      	cmp	r3, #1
 800b358:	d05b      	beq.n	800b412 <UART_SetConfig+0x1362>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d052      	beq.n	800b408 <UART_SetConfig+0x1358>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	2b03      	cmp	r3, #3
 800b368:	d04a      	beq.n	800b400 <UART_SetConfig+0x1350>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d041      	beq.n	800b3f6 <UART_SetConfig+0x1346>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	2b05      	cmp	r3, #5
 800b378:	d039      	beq.n	800b3ee <UART_SetConfig+0x133e>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	2b06      	cmp	r3, #6
 800b380:	d031      	beq.n	800b3e6 <UART_SetConfig+0x1336>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	2b07      	cmp	r3, #7
 800b388:	d028      	beq.n	800b3dc <UART_SetConfig+0x132c>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	2b08      	cmp	r3, #8
 800b390:	d01f      	beq.n	800b3d2 <UART_SetConfig+0x1322>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	2b09      	cmp	r3, #9
 800b398:	d016      	beq.n	800b3c8 <UART_SetConfig+0x1318>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	2b0a      	cmp	r3, #10
 800b3a0:	d00d      	beq.n	800b3be <UART_SetConfig+0x130e>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	2b0b      	cmp	r3, #11
 800b3a8:	d104      	bne.n	800b3b4 <UART_SetConfig+0x1304>
 800b3aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3ae:	f04f 0400 	mov.w	r4, #0
 800b3b2:	e037      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b3b8:	f04f 0400 	mov.w	r4, #0
 800b3bc:	e032      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3c2:	f04f 0400 	mov.w	r4, #0
 800b3c6:	e02d      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b3cc:	f04f 0400 	mov.w	r4, #0
 800b3d0:	e028      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3d6:	f04f 0400 	mov.w	r4, #0
 800b3da:	e023      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b3e0:	f04f 0400 	mov.w	r4, #0
 800b3e4:	e01e      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3e6:	4b7e      	ldr	r3, [pc, #504]	; (800b5e0 <UART_SetConfig+0x1530>)
 800b3e8:	f04f 0400 	mov.w	r4, #0
 800b3ec:	e01a      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3ee:	4b7d      	ldr	r3, [pc, #500]	; (800b5e4 <UART_SetConfig+0x1534>)
 800b3f0:	f04f 0400 	mov.w	r4, #0
 800b3f4:	e016      	b.n	800b424 <UART_SetConfig+0x1374>
 800b3f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b3fa:	f04f 0400 	mov.w	r4, #0
 800b3fe:	e011      	b.n	800b424 <UART_SetConfig+0x1374>
 800b400:	4b79      	ldr	r3, [pc, #484]	; (800b5e8 <UART_SetConfig+0x1538>)
 800b402:	f04f 0400 	mov.w	r4, #0
 800b406:	e00d      	b.n	800b424 <UART_SetConfig+0x1374>
 800b408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b40c:	f04f 0400 	mov.w	r4, #0
 800b410:	e008      	b.n	800b424 <UART_SetConfig+0x1374>
 800b412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b416:	f04f 0400 	mov.w	r4, #0
 800b41a:	e003      	b.n	800b424 <UART_SetConfig+0x1374>
 800b41c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b420:	f04f 0400 	mov.w	r4, #0
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	6852      	ldr	r2, [r2, #4]
 800b428:	0852      	lsrs	r2, r2, #1
 800b42a:	4611      	mov	r1, r2
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	eb13 0b01 	adds.w	fp, r3, r1
 800b434:	eb44 0c02 	adc.w	ip, r4, r2
 800b438:	4658      	mov	r0, fp
 800b43a:	4661      	mov	r1, ip
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	f04f 0400 	mov.w	r4, #0
 800b444:	461a      	mov	r2, r3
 800b446:	4623      	mov	r3, r4
 800b448:	f7f4 ff46 	bl	80002d8 <__aeabi_uldivmod>
 800b44c:	4603      	mov	r3, r0
 800b44e:	460c      	mov	r4, r1
 800b450:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b452:	e003      	b.n	800b45c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b45a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b462:	d309      	bcc.n	800b478 <UART_SetConfig+0x13c8>
 800b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b46a:	d205      	bcs.n	800b478 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b472:	60da      	str	r2, [r3, #12]
 800b474:	f000 bf85 	b.w	800c382 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47e:	f000 bf80 	b.w	800c382 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b48a:	f040 83da 	bne.w	800bc42 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b48e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b492:	2b40      	cmp	r3, #64	; 0x40
 800b494:	f200 83b3 	bhi.w	800bbfe <UART_SetConfig+0x1b4e>
 800b498:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <UART_SetConfig+0x13f0>)
 800b49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49e:	bf00      	nop
 800b4a0:	0800b5ed 	.word	0x0800b5ed
 800b4a4:	0800b6a5 	.word	0x0800b6a5
 800b4a8:	0800bbff 	.word	0x0800bbff
 800b4ac:	0800bbff 	.word	0x0800bbff
 800b4b0:	0800b75d 	.word	0x0800b75d
 800b4b4:	0800bbff 	.word	0x0800bbff
 800b4b8:	0800bbff 	.word	0x0800bbff
 800b4bc:	0800bbff 	.word	0x0800bbff
 800b4c0:	0800b819 	.word	0x0800b819
 800b4c4:	0800bbff 	.word	0x0800bbff
 800b4c8:	0800bbff 	.word	0x0800bbff
 800b4cc:	0800bbff 	.word	0x0800bbff
 800b4d0:	0800bbff 	.word	0x0800bbff
 800b4d4:	0800bbff 	.word	0x0800bbff
 800b4d8:	0800bbff 	.word	0x0800bbff
 800b4dc:	0800bbff 	.word	0x0800bbff
 800b4e0:	0800b8d5 	.word	0x0800b8d5
 800b4e4:	0800bbff 	.word	0x0800bbff
 800b4e8:	0800bbff 	.word	0x0800bbff
 800b4ec:	0800bbff 	.word	0x0800bbff
 800b4f0:	0800bbff 	.word	0x0800bbff
 800b4f4:	0800bbff 	.word	0x0800bbff
 800b4f8:	0800bbff 	.word	0x0800bbff
 800b4fc:	0800bbff 	.word	0x0800bbff
 800b500:	0800bbff 	.word	0x0800bbff
 800b504:	0800bbff 	.word	0x0800bbff
 800b508:	0800bbff 	.word	0x0800bbff
 800b50c:	0800bbff 	.word	0x0800bbff
 800b510:	0800bbff 	.word	0x0800bbff
 800b514:	0800bbff 	.word	0x0800bbff
 800b518:	0800bbff 	.word	0x0800bbff
 800b51c:	0800bbff 	.word	0x0800bbff
 800b520:	0800ba47 	.word	0x0800ba47
 800b524:	0800bbff 	.word	0x0800bbff
 800b528:	0800bbff 	.word	0x0800bbff
 800b52c:	0800bbff 	.word	0x0800bbff
 800b530:	0800bbff 	.word	0x0800bbff
 800b534:	0800bbff 	.word	0x0800bbff
 800b538:	0800bbff 	.word	0x0800bbff
 800b53c:	0800bbff 	.word	0x0800bbff
 800b540:	0800bbff 	.word	0x0800bbff
 800b544:	0800bbff 	.word	0x0800bbff
 800b548:	0800bbff 	.word	0x0800bbff
 800b54c:	0800bbff 	.word	0x0800bbff
 800b550:	0800bbff 	.word	0x0800bbff
 800b554:	0800bbff 	.word	0x0800bbff
 800b558:	0800bbff 	.word	0x0800bbff
 800b55c:	0800bbff 	.word	0x0800bbff
 800b560:	0800bbff 	.word	0x0800bbff
 800b564:	0800bbff 	.word	0x0800bbff
 800b568:	0800bbff 	.word	0x0800bbff
 800b56c:	0800bbff 	.word	0x0800bbff
 800b570:	0800bbff 	.word	0x0800bbff
 800b574:	0800bbff 	.word	0x0800bbff
 800b578:	0800bbff 	.word	0x0800bbff
 800b57c:	0800bbff 	.word	0x0800bbff
 800b580:	0800bbff 	.word	0x0800bbff
 800b584:	0800bbff 	.word	0x0800bbff
 800b588:	0800bbff 	.word	0x0800bbff
 800b58c:	0800bbff 	.word	0x0800bbff
 800b590:	0800bbff 	.word	0x0800bbff
 800b594:	0800bbff 	.word	0x0800bbff
 800b598:	0800bbff 	.word	0x0800bbff
 800b59c:	0800bbff 	.word	0x0800bbff
 800b5a0:	0800bb3d 	.word	0x0800bb3d
 800b5a4:	f3af 8000 	nop.w
 800b5a8:	05161500 	.word	0x05161500
 800b5ac:	00000000 	.word	0x00000000
 800b5b0:	0a2c2a00 	.word	0x0a2c2a00
 800b5b4:	00000000 	.word	0x00000000
 800b5b8:	003d0900 	.word	0x003d0900
 800b5bc:	3d090000 	.word	0x3d090000
 800b5c0:	007a1200 	.word	0x007a1200
 800b5c4:	00f42400 	.word	0x00f42400
 800b5c8:	01e84800 	.word	0x01e84800
 800b5cc:	03d09000 	.word	0x03d09000
 800b5d0:	061a8000 	.word	0x061a8000
 800b5d4:	07a12000 	.word	0x07a12000
 800b5d8:	0f424000 	.word	0x0f424000
 800b5dc:	1e848000 	.word	0x1e848000
 800b5e0:	000aaa00 	.word	0x000aaa00
 800b5e4:	000ccc00 	.word	0x000ccc00
 800b5e8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5ec:	f7fb fefc 	bl	80073e8 <HAL_RCC_GetPCLK1Freq>
 800b5f0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d044      	beq.n	800b684 <UART_SetConfig+0x15d4>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d03e      	beq.n	800b680 <UART_SetConfig+0x15d0>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	2b02      	cmp	r3, #2
 800b608:	d038      	beq.n	800b67c <UART_SetConfig+0x15cc>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d032      	beq.n	800b678 <UART_SetConfig+0x15c8>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	2b04      	cmp	r3, #4
 800b618:	d02c      	beq.n	800b674 <UART_SetConfig+0x15c4>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	2b05      	cmp	r3, #5
 800b620:	d026      	beq.n	800b670 <UART_SetConfig+0x15c0>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	2b06      	cmp	r3, #6
 800b628:	d020      	beq.n	800b66c <UART_SetConfig+0x15bc>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	2b07      	cmp	r3, #7
 800b630:	d01a      	beq.n	800b668 <UART_SetConfig+0x15b8>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	2b08      	cmp	r3, #8
 800b638:	d014      	beq.n	800b664 <UART_SetConfig+0x15b4>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d00e      	beq.n	800b660 <UART_SetConfig+0x15b0>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	2b0a      	cmp	r3, #10
 800b648:	d008      	beq.n	800b65c <UART_SetConfig+0x15ac>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	2b0b      	cmp	r3, #11
 800b650:	d102      	bne.n	800b658 <UART_SetConfig+0x15a8>
 800b652:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b656:	e016      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b658:	2301      	movs	r3, #1
 800b65a:	e014      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b65c:	2380      	movs	r3, #128	; 0x80
 800b65e:	e012      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b660:	2340      	movs	r3, #64	; 0x40
 800b662:	e010      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b664:	2320      	movs	r3, #32
 800b666:	e00e      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b668:	2310      	movs	r3, #16
 800b66a:	e00c      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b66c:	230c      	movs	r3, #12
 800b66e:	e00a      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b670:	230a      	movs	r3, #10
 800b672:	e008      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b674:	2308      	movs	r3, #8
 800b676:	e006      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b678:	2306      	movs	r3, #6
 800b67a:	e004      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b67c:	2304      	movs	r3, #4
 800b67e:	e002      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b680:	2302      	movs	r3, #2
 800b682:	e000      	b.n	800b686 <UART_SetConfig+0x15d6>
 800b684:	2301      	movs	r3, #1
 800b686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b688:	fbb2 f3f3 	udiv	r3, r2, r3
 800b68c:	005a      	lsls	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	085b      	lsrs	r3, r3, #1
 800b694:	441a      	add	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6a2:	e2b0      	b.n	800bc06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6a4:	f7fb feb6 	bl	8007414 <HAL_RCC_GetPCLK2Freq>
 800b6a8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d044      	beq.n	800b73c <UART_SetConfig+0x168c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d03e      	beq.n	800b738 <UART_SetConfig+0x1688>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d038      	beq.n	800b734 <UART_SetConfig+0x1684>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d032      	beq.n	800b730 <UART_SetConfig+0x1680>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d02c      	beq.n	800b72c <UART_SetConfig+0x167c>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d6:	2b05      	cmp	r3, #5
 800b6d8:	d026      	beq.n	800b728 <UART_SetConfig+0x1678>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6de:	2b06      	cmp	r3, #6
 800b6e0:	d020      	beq.n	800b724 <UART_SetConfig+0x1674>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	2b07      	cmp	r3, #7
 800b6e8:	d01a      	beq.n	800b720 <UART_SetConfig+0x1670>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ee:	2b08      	cmp	r3, #8
 800b6f0:	d014      	beq.n	800b71c <UART_SetConfig+0x166c>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	2b09      	cmp	r3, #9
 800b6f8:	d00e      	beq.n	800b718 <UART_SetConfig+0x1668>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	2b0a      	cmp	r3, #10
 800b700:	d008      	beq.n	800b714 <UART_SetConfig+0x1664>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	2b0b      	cmp	r3, #11
 800b708:	d102      	bne.n	800b710 <UART_SetConfig+0x1660>
 800b70a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b70e:	e016      	b.n	800b73e <UART_SetConfig+0x168e>
 800b710:	2301      	movs	r3, #1
 800b712:	e014      	b.n	800b73e <UART_SetConfig+0x168e>
 800b714:	2380      	movs	r3, #128	; 0x80
 800b716:	e012      	b.n	800b73e <UART_SetConfig+0x168e>
 800b718:	2340      	movs	r3, #64	; 0x40
 800b71a:	e010      	b.n	800b73e <UART_SetConfig+0x168e>
 800b71c:	2320      	movs	r3, #32
 800b71e:	e00e      	b.n	800b73e <UART_SetConfig+0x168e>
 800b720:	2310      	movs	r3, #16
 800b722:	e00c      	b.n	800b73e <UART_SetConfig+0x168e>
 800b724:	230c      	movs	r3, #12
 800b726:	e00a      	b.n	800b73e <UART_SetConfig+0x168e>
 800b728:	230a      	movs	r3, #10
 800b72a:	e008      	b.n	800b73e <UART_SetConfig+0x168e>
 800b72c:	2308      	movs	r3, #8
 800b72e:	e006      	b.n	800b73e <UART_SetConfig+0x168e>
 800b730:	2306      	movs	r3, #6
 800b732:	e004      	b.n	800b73e <UART_SetConfig+0x168e>
 800b734:	2304      	movs	r3, #4
 800b736:	e002      	b.n	800b73e <UART_SetConfig+0x168e>
 800b738:	2302      	movs	r3, #2
 800b73a:	e000      	b.n	800b73e <UART_SetConfig+0x168e>
 800b73c:	2301      	movs	r3, #1
 800b73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b740:	fbb2 f3f3 	udiv	r3, r2, r3
 800b744:	005a      	lsls	r2, r3, #1
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	441a      	add	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	fbb2 f3f3 	udiv	r3, r2, r3
 800b756:	b29b      	uxth	r3, r3
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b75a:	e254      	b.n	800bc06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b75c:	f107 0318 	add.w	r3, r7, #24
 800b760:	4618      	mov	r0, r3
 800b762:	f7fc ffd9 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b766:	69fa      	ldr	r2, [r7, #28]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d044      	beq.n	800b7fa <UART_SetConfig+0x174a>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2b01      	cmp	r3, #1
 800b776:	d03e      	beq.n	800b7f6 <UART_SetConfig+0x1746>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d038      	beq.n	800b7f2 <UART_SetConfig+0x1742>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	2b03      	cmp	r3, #3
 800b786:	d032      	beq.n	800b7ee <UART_SetConfig+0x173e>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	2b04      	cmp	r3, #4
 800b78e:	d02c      	beq.n	800b7ea <UART_SetConfig+0x173a>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	2b05      	cmp	r3, #5
 800b796:	d026      	beq.n	800b7e6 <UART_SetConfig+0x1736>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	2b06      	cmp	r3, #6
 800b79e:	d020      	beq.n	800b7e2 <UART_SetConfig+0x1732>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	2b07      	cmp	r3, #7
 800b7a6:	d01a      	beq.n	800b7de <UART_SetConfig+0x172e>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d014      	beq.n	800b7da <UART_SetConfig+0x172a>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d00e      	beq.n	800b7d6 <UART_SetConfig+0x1726>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	2b0a      	cmp	r3, #10
 800b7be:	d008      	beq.n	800b7d2 <UART_SetConfig+0x1722>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	2b0b      	cmp	r3, #11
 800b7c6:	d102      	bne.n	800b7ce <UART_SetConfig+0x171e>
 800b7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7cc:	e016      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e014      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7d2:	2380      	movs	r3, #128	; 0x80
 800b7d4:	e012      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7d6:	2340      	movs	r3, #64	; 0x40
 800b7d8:	e010      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7da:	2320      	movs	r3, #32
 800b7dc:	e00e      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7de:	2310      	movs	r3, #16
 800b7e0:	e00c      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	e00a      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7e6:	230a      	movs	r3, #10
 800b7e8:	e008      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7ea:	2308      	movs	r3, #8
 800b7ec:	e006      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7ee:	2306      	movs	r3, #6
 800b7f0:	e004      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	e002      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e000      	b.n	800b7fc <UART_SetConfig+0x174c>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b800:	005a      	lsls	r2, r3, #1
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	085b      	lsrs	r3, r3, #1
 800b808:	441a      	add	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b812:	b29b      	uxth	r3, r3
 800b814:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b816:	e1f6      	b.n	800bc06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b818:	f107 030c 	add.w	r3, r7, #12
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fd f8c7 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d044      	beq.n	800b8b6 <UART_SetConfig+0x1806>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b830:	2b01      	cmp	r3, #1
 800b832:	d03e      	beq.n	800b8b2 <UART_SetConfig+0x1802>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d038      	beq.n	800b8ae <UART_SetConfig+0x17fe>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	2b03      	cmp	r3, #3
 800b842:	d032      	beq.n	800b8aa <UART_SetConfig+0x17fa>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	2b04      	cmp	r3, #4
 800b84a:	d02c      	beq.n	800b8a6 <UART_SetConfig+0x17f6>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	2b05      	cmp	r3, #5
 800b852:	d026      	beq.n	800b8a2 <UART_SetConfig+0x17f2>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	2b06      	cmp	r3, #6
 800b85a:	d020      	beq.n	800b89e <UART_SetConfig+0x17ee>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	2b07      	cmp	r3, #7
 800b862:	d01a      	beq.n	800b89a <UART_SetConfig+0x17ea>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	2b08      	cmp	r3, #8
 800b86a:	d014      	beq.n	800b896 <UART_SetConfig+0x17e6>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	2b09      	cmp	r3, #9
 800b872:	d00e      	beq.n	800b892 <UART_SetConfig+0x17e2>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2b0a      	cmp	r3, #10
 800b87a:	d008      	beq.n	800b88e <UART_SetConfig+0x17de>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b0b      	cmp	r3, #11
 800b882:	d102      	bne.n	800b88a <UART_SetConfig+0x17da>
 800b884:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b888:	e016      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e014      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b88e:	2380      	movs	r3, #128	; 0x80
 800b890:	e012      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b892:	2340      	movs	r3, #64	; 0x40
 800b894:	e010      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b896:	2320      	movs	r3, #32
 800b898:	e00e      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b89a:	2310      	movs	r3, #16
 800b89c:	e00c      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b89e:	230c      	movs	r3, #12
 800b8a0:	e00a      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b8a2:	230a      	movs	r3, #10
 800b8a4:	e008      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b8a6:	2308      	movs	r3, #8
 800b8a8:	e006      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b8aa:	2306      	movs	r3, #6
 800b8ac:	e004      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b8ae:	2304      	movs	r3, #4
 800b8b0:	e002      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	e000      	b.n	800b8b8 <UART_SetConfig+0x1808>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8bc:	005a      	lsls	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	085b      	lsrs	r3, r3, #1
 800b8c4:	441a      	add	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8d2:	e198      	b.n	800bc06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8d4:	4b87      	ldr	r3, [pc, #540]	; (800baf4 <UART_SetConfig+0x1a44>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0320 	and.w	r3, r3, #32
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d05e      	beq.n	800b99e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8e0:	4b84      	ldr	r3, [pc, #528]	; (800baf4 <UART_SetConfig+0x1a44>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	08db      	lsrs	r3, r3, #3
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	4a83      	ldr	r2, [pc, #524]	; (800baf8 <UART_SetConfig+0x1a48>)
 800b8ec:	40da      	lsrs	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d044      	beq.n	800b980 <UART_SetConfig+0x18d0>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d03e      	beq.n	800b97c <UART_SetConfig+0x18cc>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b02      	cmp	r3, #2
 800b904:	d038      	beq.n	800b978 <UART_SetConfig+0x18c8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	d032      	beq.n	800b974 <UART_SetConfig+0x18c4>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2b04      	cmp	r3, #4
 800b914:	d02c      	beq.n	800b970 <UART_SetConfig+0x18c0>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d026      	beq.n	800b96c <UART_SetConfig+0x18bc>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	2b06      	cmp	r3, #6
 800b924:	d020      	beq.n	800b968 <UART_SetConfig+0x18b8>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	2b07      	cmp	r3, #7
 800b92c:	d01a      	beq.n	800b964 <UART_SetConfig+0x18b4>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	2b08      	cmp	r3, #8
 800b934:	d014      	beq.n	800b960 <UART_SetConfig+0x18b0>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93a:	2b09      	cmp	r3, #9
 800b93c:	d00e      	beq.n	800b95c <UART_SetConfig+0x18ac>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	2b0a      	cmp	r3, #10
 800b944:	d008      	beq.n	800b958 <UART_SetConfig+0x18a8>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	2b0b      	cmp	r3, #11
 800b94c:	d102      	bne.n	800b954 <UART_SetConfig+0x18a4>
 800b94e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b952:	e016      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b954:	2301      	movs	r3, #1
 800b956:	e014      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b958:	2380      	movs	r3, #128	; 0x80
 800b95a:	e012      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b95c:	2340      	movs	r3, #64	; 0x40
 800b95e:	e010      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b960:	2320      	movs	r3, #32
 800b962:	e00e      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b964:	2310      	movs	r3, #16
 800b966:	e00c      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b968:	230c      	movs	r3, #12
 800b96a:	e00a      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b96c:	230a      	movs	r3, #10
 800b96e:	e008      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b970:	2308      	movs	r3, #8
 800b972:	e006      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b974:	2306      	movs	r3, #6
 800b976:	e004      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b978:	2304      	movs	r3, #4
 800b97a:	e002      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b97c:	2302      	movs	r3, #2
 800b97e:	e000      	b.n	800b982 <UART_SetConfig+0x18d2>
 800b980:	2301      	movs	r3, #1
 800b982:	fbb2 f3f3 	udiv	r3, r2, r3
 800b986:	005a      	lsls	r2, r3, #1
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	085b      	lsrs	r3, r3, #1
 800b98e:	441a      	add	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	fbb2 f3f3 	udiv	r3, r2, r3
 800b998:	b29b      	uxth	r3, r3
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b99c:	e133      	b.n	800bc06 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d043      	beq.n	800ba2e <UART_SetConfig+0x197e>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d03d      	beq.n	800ba2a <UART_SetConfig+0x197a>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d037      	beq.n	800ba26 <UART_SetConfig+0x1976>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d031      	beq.n	800ba22 <UART_SetConfig+0x1972>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	2b04      	cmp	r3, #4
 800b9c4:	d02b      	beq.n	800ba1e <UART_SetConfig+0x196e>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	d025      	beq.n	800ba1a <UART_SetConfig+0x196a>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b06      	cmp	r3, #6
 800b9d4:	d01f      	beq.n	800ba16 <UART_SetConfig+0x1966>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	2b07      	cmp	r3, #7
 800b9dc:	d019      	beq.n	800ba12 <UART_SetConfig+0x1962>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	2b08      	cmp	r3, #8
 800b9e4:	d013      	beq.n	800ba0e <UART_SetConfig+0x195e>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ea:	2b09      	cmp	r3, #9
 800b9ec:	d00d      	beq.n	800ba0a <UART_SetConfig+0x195a>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	2b0a      	cmp	r3, #10
 800b9f4:	d007      	beq.n	800ba06 <UART_SetConfig+0x1956>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	2b0b      	cmp	r3, #11
 800b9fc:	d101      	bne.n	800ba02 <UART_SetConfig+0x1952>
 800b9fe:	4b3f      	ldr	r3, [pc, #252]	; (800bafc <UART_SetConfig+0x1a4c>)
 800ba00:	e016      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba02:	4b3f      	ldr	r3, [pc, #252]	; (800bb00 <UART_SetConfig+0x1a50>)
 800ba04:	e014      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba06:	4b3f      	ldr	r3, [pc, #252]	; (800bb04 <UART_SetConfig+0x1a54>)
 800ba08:	e012      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba0a:	4b3f      	ldr	r3, [pc, #252]	; (800bb08 <UART_SetConfig+0x1a58>)
 800ba0c:	e010      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba0e:	4b3f      	ldr	r3, [pc, #252]	; (800bb0c <UART_SetConfig+0x1a5c>)
 800ba10:	e00e      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba12:	4b3f      	ldr	r3, [pc, #252]	; (800bb10 <UART_SetConfig+0x1a60>)
 800ba14:	e00c      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba16:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <UART_SetConfig+0x1a64>)
 800ba18:	e00a      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba1a:	4b3f      	ldr	r3, [pc, #252]	; (800bb18 <UART_SetConfig+0x1a68>)
 800ba1c:	e008      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba1e:	4b3f      	ldr	r3, [pc, #252]	; (800bb1c <UART_SetConfig+0x1a6c>)
 800ba20:	e006      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba22:	4b3f      	ldr	r3, [pc, #252]	; (800bb20 <UART_SetConfig+0x1a70>)
 800ba24:	e004      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba26:	4b3f      	ldr	r3, [pc, #252]	; (800bb24 <UART_SetConfig+0x1a74>)
 800ba28:	e002      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba2a:	4b33      	ldr	r3, [pc, #204]	; (800baf8 <UART_SetConfig+0x1a48>)
 800ba2c:	e000      	b.n	800ba30 <UART_SetConfig+0x1980>
 800ba2e:	4b34      	ldr	r3, [pc, #208]	; (800bb00 <UART_SetConfig+0x1a50>)
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	6852      	ldr	r2, [r2, #4]
 800ba34:	0852      	lsrs	r2, r2, #1
 800ba36:	441a      	add	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba44:	e0df      	b.n	800bc06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d045      	beq.n	800bada <UART_SetConfig+0x1a2a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d03f      	beq.n	800bad6 <UART_SetConfig+0x1a26>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d039      	beq.n	800bad2 <UART_SetConfig+0x1a22>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d033      	beq.n	800bace <UART_SetConfig+0x1a1e>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	d02d      	beq.n	800baca <UART_SetConfig+0x1a1a>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	2b05      	cmp	r3, #5
 800ba74:	d027      	beq.n	800bac6 <UART_SetConfig+0x1a16>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	2b06      	cmp	r3, #6
 800ba7c:	d021      	beq.n	800bac2 <UART_SetConfig+0x1a12>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	2b07      	cmp	r3, #7
 800ba84:	d01b      	beq.n	800babe <UART_SetConfig+0x1a0e>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	2b08      	cmp	r3, #8
 800ba8c:	d015      	beq.n	800baba <UART_SetConfig+0x1a0a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	2b09      	cmp	r3, #9
 800ba94:	d00f      	beq.n	800bab6 <UART_SetConfig+0x1a06>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	2b0a      	cmp	r3, #10
 800ba9c:	d008      	beq.n	800bab0 <UART_SetConfig+0x1a00>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	2b0b      	cmp	r3, #11
 800baa4:	d102      	bne.n	800baac <UART_SetConfig+0x19fc>
 800baa6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800baaa:	e017      	b.n	800badc <UART_SetConfig+0x1a2c>
 800baac:	4b18      	ldr	r3, [pc, #96]	; (800bb10 <UART_SetConfig+0x1a60>)
 800baae:	e015      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bab0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bab4:	e012      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bab6:	4b1c      	ldr	r3, [pc, #112]	; (800bb28 <UART_SetConfig+0x1a78>)
 800bab8:	e010      	b.n	800badc <UART_SetConfig+0x1a2c>
 800baba:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <UART_SetConfig+0x1a7c>)
 800babc:	e00e      	b.n	800badc <UART_SetConfig+0x1a2c>
 800babe:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <UART_SetConfig+0x1a4c>)
 800bac0:	e00c      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bac2:	4b1b      	ldr	r3, [pc, #108]	; (800bb30 <UART_SetConfig+0x1a80>)
 800bac4:	e00a      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bac6:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <UART_SetConfig+0x1a84>)
 800bac8:	e008      	b.n	800badc <UART_SetConfig+0x1a2c>
 800baca:	4b0e      	ldr	r3, [pc, #56]	; (800bb04 <UART_SetConfig+0x1a54>)
 800bacc:	e006      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bace:	4b1a      	ldr	r3, [pc, #104]	; (800bb38 <UART_SetConfig+0x1a88>)
 800bad0:	e004      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bad2:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <UART_SetConfig+0x1a58>)
 800bad4:	e002      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <UART_SetConfig+0x1a5c>)
 800bad8:	e000      	b.n	800badc <UART_SetConfig+0x1a2c>
 800bada:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <UART_SetConfig+0x1a60>)
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6852      	ldr	r2, [r2, #4]
 800bae0:	0852      	lsrs	r2, r2, #1
 800bae2:	441a      	add	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800baec:	b29b      	uxth	r3, r3
 800baee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baf0:	e089      	b.n	800bc06 <UART_SetConfig+0x1b56>
 800baf2:	bf00      	nop
 800baf4:	58024400 	.word	0x58024400
 800baf8:	03d09000 	.word	0x03d09000
 800bafc:	0007a120 	.word	0x0007a120
 800bb00:	07a12000 	.word	0x07a12000
 800bb04:	000f4240 	.word	0x000f4240
 800bb08:	001e8480 	.word	0x001e8480
 800bb0c:	003d0900 	.word	0x003d0900
 800bb10:	007a1200 	.word	0x007a1200
 800bb14:	00a2c2aa 	.word	0x00a2c2aa
 800bb18:	00c35000 	.word	0x00c35000
 800bb1c:	00f42400 	.word	0x00f42400
 800bb20:	01458554 	.word	0x01458554
 800bb24:	01e84800 	.word	0x01e84800
 800bb28:	0001e848 	.word	0x0001e848
 800bb2c:	0003d090 	.word	0x0003d090
 800bb30:	000a2c2a 	.word	0x000a2c2a
 800bb34:	000c3500 	.word	0x000c3500
 800bb38:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d04f      	beq.n	800bbe4 <UART_SetConfig+0x1b34>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d048      	beq.n	800bbde <UART_SetConfig+0x1b2e>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d041      	beq.n	800bbd8 <UART_SetConfig+0x1b28>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d03a      	beq.n	800bbd2 <UART_SetConfig+0x1b22>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb60:	2b04      	cmp	r3, #4
 800bb62:	d033      	beq.n	800bbcc <UART_SetConfig+0x1b1c>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	2b05      	cmp	r3, #5
 800bb6a:	d02c      	beq.n	800bbc6 <UART_SetConfig+0x1b16>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	2b06      	cmp	r3, #6
 800bb72:	d025      	beq.n	800bbc0 <UART_SetConfig+0x1b10>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	2b07      	cmp	r3, #7
 800bb7a:	d01e      	beq.n	800bbba <UART_SetConfig+0x1b0a>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d017      	beq.n	800bbb4 <UART_SetConfig+0x1b04>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb88:	2b09      	cmp	r3, #9
 800bb8a:	d010      	beq.n	800bbae <UART_SetConfig+0x1afe>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	2b0a      	cmp	r3, #10
 800bb92:	d009      	beq.n	800bba8 <UART_SetConfig+0x1af8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	2b0b      	cmp	r3, #11
 800bb9a:	d102      	bne.n	800bba2 <UART_SetConfig+0x1af2>
 800bb9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bba0:	e022      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bba6:	e01f      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbac:	e01c      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb2:	e019      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbb8:	e016      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbbe:	e013      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbc0:	f241 5354 	movw	r3, #5460	; 0x1554
 800bbc4:	e010      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbc6:	f641 1398 	movw	r3, #6552	; 0x1998
 800bbca:	e00d      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbd0:	e00a      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbd2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800bbd6:	e007      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbdc:	e004      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbe2:	e001      	b.n	800bbe8 <UART_SetConfig+0x1b38>
 800bbe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	6852      	ldr	r2, [r2, #4]
 800bbec:	0852      	lsrs	r2, r2, #1
 800bbee:	441a      	add	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbfc:	e003      	b.n	800bc06 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bc04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc08:	2b0f      	cmp	r3, #15
 800bc0a:	d916      	bls.n	800bc3a <UART_SetConfig+0x1b8a>
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc12:	d212      	bcs.n	800bc3a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f023 030f 	bic.w	r3, r3, #15
 800bc1c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	085b      	lsrs	r3, r3, #1
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	f003 0307 	and.w	r3, r3, #7
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bc36:	60da      	str	r2, [r3, #12]
 800bc38:	e3a3      	b.n	800c382 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc40:	e39f      	b.n	800c382 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bc42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc46:	2b40      	cmp	r3, #64	; 0x40
 800bc48:	f200 8388 	bhi.w	800c35c <UART_SetConfig+0x22ac>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <UART_SetConfig+0x1ba4>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bd59 	.word	0x0800bd59
 800bc58:	0800be0f 	.word	0x0800be0f
 800bc5c:	0800c35d 	.word	0x0800c35d
 800bc60:	0800c35d 	.word	0x0800c35d
 800bc64:	0800bec5 	.word	0x0800bec5
 800bc68:	0800c35d 	.word	0x0800c35d
 800bc6c:	0800c35d 	.word	0x0800c35d
 800bc70:	0800c35d 	.word	0x0800c35d
 800bc74:	0800bf7f 	.word	0x0800bf7f
 800bc78:	0800c35d 	.word	0x0800c35d
 800bc7c:	0800c35d 	.word	0x0800c35d
 800bc80:	0800c35d 	.word	0x0800c35d
 800bc84:	0800c35d 	.word	0x0800c35d
 800bc88:	0800c35d 	.word	0x0800c35d
 800bc8c:	0800c35d 	.word	0x0800c35d
 800bc90:	0800c35d 	.word	0x0800c35d
 800bc94:	0800c039 	.word	0x0800c039
 800bc98:	0800c35d 	.word	0x0800c35d
 800bc9c:	0800c35d 	.word	0x0800c35d
 800bca0:	0800c35d 	.word	0x0800c35d
 800bca4:	0800c35d 	.word	0x0800c35d
 800bca8:	0800c35d 	.word	0x0800c35d
 800bcac:	0800c35d 	.word	0x0800c35d
 800bcb0:	0800c35d 	.word	0x0800c35d
 800bcb4:	0800c35d 	.word	0x0800c35d
 800bcb8:	0800c35d 	.word	0x0800c35d
 800bcbc:	0800c35d 	.word	0x0800c35d
 800bcc0:	0800c35d 	.word	0x0800c35d
 800bcc4:	0800c35d 	.word	0x0800c35d
 800bcc8:	0800c35d 	.word	0x0800c35d
 800bccc:	0800c35d 	.word	0x0800c35d
 800bcd0:	0800c35d 	.word	0x0800c35d
 800bcd4:	0800c1a9 	.word	0x0800c1a9
 800bcd8:	0800c35d 	.word	0x0800c35d
 800bcdc:	0800c35d 	.word	0x0800c35d
 800bce0:	0800c35d 	.word	0x0800c35d
 800bce4:	0800c35d 	.word	0x0800c35d
 800bce8:	0800c35d 	.word	0x0800c35d
 800bcec:	0800c35d 	.word	0x0800c35d
 800bcf0:	0800c35d 	.word	0x0800c35d
 800bcf4:	0800c35d 	.word	0x0800c35d
 800bcf8:	0800c35d 	.word	0x0800c35d
 800bcfc:	0800c35d 	.word	0x0800c35d
 800bd00:	0800c35d 	.word	0x0800c35d
 800bd04:	0800c35d 	.word	0x0800c35d
 800bd08:	0800c35d 	.word	0x0800c35d
 800bd0c:	0800c35d 	.word	0x0800c35d
 800bd10:	0800c35d 	.word	0x0800c35d
 800bd14:	0800c35d 	.word	0x0800c35d
 800bd18:	0800c35d 	.word	0x0800c35d
 800bd1c:	0800c35d 	.word	0x0800c35d
 800bd20:	0800c35d 	.word	0x0800c35d
 800bd24:	0800c35d 	.word	0x0800c35d
 800bd28:	0800c35d 	.word	0x0800c35d
 800bd2c:	0800c35d 	.word	0x0800c35d
 800bd30:	0800c35d 	.word	0x0800c35d
 800bd34:	0800c35d 	.word	0x0800c35d
 800bd38:	0800c35d 	.word	0x0800c35d
 800bd3c:	0800c35d 	.word	0x0800c35d
 800bd40:	0800c35d 	.word	0x0800c35d
 800bd44:	0800c35d 	.word	0x0800c35d
 800bd48:	0800c35d 	.word	0x0800c35d
 800bd4c:	0800c35d 	.word	0x0800c35d
 800bd50:	0800c35d 	.word	0x0800c35d
 800bd54:	0800c29d 	.word	0x0800c29d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd58:	f7fb fb46 	bl	80073e8 <HAL_RCC_GetPCLK1Freq>
 800bd5c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d044      	beq.n	800bdf0 <UART_SetConfig+0x1d40>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d03e      	beq.n	800bdec <UART_SetConfig+0x1d3c>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d038      	beq.n	800bde8 <UART_SetConfig+0x1d38>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d032      	beq.n	800bde4 <UART_SetConfig+0x1d34>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d02c      	beq.n	800bde0 <UART_SetConfig+0x1d30>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8a:	2b05      	cmp	r3, #5
 800bd8c:	d026      	beq.n	800bddc <UART_SetConfig+0x1d2c>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd92:	2b06      	cmp	r3, #6
 800bd94:	d020      	beq.n	800bdd8 <UART_SetConfig+0x1d28>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	2b07      	cmp	r3, #7
 800bd9c:	d01a      	beq.n	800bdd4 <UART_SetConfig+0x1d24>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	2b08      	cmp	r3, #8
 800bda4:	d014      	beq.n	800bdd0 <UART_SetConfig+0x1d20>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	d00e      	beq.n	800bdcc <UART_SetConfig+0x1d1c>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	2b0a      	cmp	r3, #10
 800bdb4:	d008      	beq.n	800bdc8 <UART_SetConfig+0x1d18>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	2b0b      	cmp	r3, #11
 800bdbc:	d102      	bne.n	800bdc4 <UART_SetConfig+0x1d14>
 800bdbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdc2:	e016      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e014      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdc8:	2380      	movs	r3, #128	; 0x80
 800bdca:	e012      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdcc:	2340      	movs	r3, #64	; 0x40
 800bdce:	e010      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdd0:	2320      	movs	r3, #32
 800bdd2:	e00e      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdd4:	2310      	movs	r3, #16
 800bdd6:	e00c      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	e00a      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bddc:	230a      	movs	r3, #10
 800bdde:	e008      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bde0:	2308      	movs	r3, #8
 800bde2:	e006      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bde4:	2306      	movs	r3, #6
 800bde6:	e004      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bde8:	2304      	movs	r3, #4
 800bdea:	e002      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdec:	2302      	movs	r3, #2
 800bdee:	e000      	b.n	800bdf2 <UART_SetConfig+0x1d42>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdf4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	441a      	add	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	fbb2 f3f3 	udiv	r3, r2, r3
 800be08:	b29b      	uxth	r3, r3
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be0c:	e2aa      	b.n	800c364 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be0e:	f7fb fb01 	bl	8007414 <HAL_RCC_GetPCLK2Freq>
 800be12:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d044      	beq.n	800bea6 <UART_SetConfig+0x1df6>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b01      	cmp	r3, #1
 800be22:	d03e      	beq.n	800bea2 <UART_SetConfig+0x1df2>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d038      	beq.n	800be9e <UART_SetConfig+0x1dee>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be30:	2b03      	cmp	r3, #3
 800be32:	d032      	beq.n	800be9a <UART_SetConfig+0x1dea>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d02c      	beq.n	800be96 <UART_SetConfig+0x1de6>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	2b05      	cmp	r3, #5
 800be42:	d026      	beq.n	800be92 <UART_SetConfig+0x1de2>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	2b06      	cmp	r3, #6
 800be4a:	d020      	beq.n	800be8e <UART_SetConfig+0x1dde>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	2b07      	cmp	r3, #7
 800be52:	d01a      	beq.n	800be8a <UART_SetConfig+0x1dda>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	2b08      	cmp	r3, #8
 800be5a:	d014      	beq.n	800be86 <UART_SetConfig+0x1dd6>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	2b09      	cmp	r3, #9
 800be62:	d00e      	beq.n	800be82 <UART_SetConfig+0x1dd2>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	2b0a      	cmp	r3, #10
 800be6a:	d008      	beq.n	800be7e <UART_SetConfig+0x1dce>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be70:	2b0b      	cmp	r3, #11
 800be72:	d102      	bne.n	800be7a <UART_SetConfig+0x1dca>
 800be74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be78:	e016      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e014      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be7e:	2380      	movs	r3, #128	; 0x80
 800be80:	e012      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be82:	2340      	movs	r3, #64	; 0x40
 800be84:	e010      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be86:	2320      	movs	r3, #32
 800be88:	e00e      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be8a:	2310      	movs	r3, #16
 800be8c:	e00c      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be8e:	230c      	movs	r3, #12
 800be90:	e00a      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be92:	230a      	movs	r3, #10
 800be94:	e008      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be96:	2308      	movs	r3, #8
 800be98:	e006      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be9a:	2306      	movs	r3, #6
 800be9c:	e004      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800be9e:	2304      	movs	r3, #4
 800bea0:	e002      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800bea2:	2302      	movs	r3, #2
 800bea4:	e000      	b.n	800bea8 <UART_SetConfig+0x1df8>
 800bea6:	2301      	movs	r3, #1
 800bea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beaa:	fbb2 f2f3 	udiv	r2, r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	085b      	lsrs	r3, r3, #1
 800beb4:	441a      	add	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	fbb2 f3f3 	udiv	r3, r2, r3
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bec2:	e24f      	b.n	800c364 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bec4:	f107 0318 	add.w	r3, r7, #24
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fc fc25 	bl	8008718 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d044      	beq.n	800bf62 <UART_SetConfig+0x1eb2>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d03e      	beq.n	800bf5e <UART_SetConfig+0x1eae>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d038      	beq.n	800bf5a <UART_SetConfig+0x1eaa>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2b03      	cmp	r3, #3
 800beee:	d032      	beq.n	800bf56 <UART_SetConfig+0x1ea6>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	d02c      	beq.n	800bf52 <UART_SetConfig+0x1ea2>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	2b05      	cmp	r3, #5
 800befe:	d026      	beq.n	800bf4e <UART_SetConfig+0x1e9e>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf04:	2b06      	cmp	r3, #6
 800bf06:	d020      	beq.n	800bf4a <UART_SetConfig+0x1e9a>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	2b07      	cmp	r3, #7
 800bf0e:	d01a      	beq.n	800bf46 <UART_SetConfig+0x1e96>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf14:	2b08      	cmp	r3, #8
 800bf16:	d014      	beq.n	800bf42 <UART_SetConfig+0x1e92>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d00e      	beq.n	800bf3e <UART_SetConfig+0x1e8e>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf24:	2b0a      	cmp	r3, #10
 800bf26:	d008      	beq.n	800bf3a <UART_SetConfig+0x1e8a>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	2b0b      	cmp	r3, #11
 800bf2e:	d102      	bne.n	800bf36 <UART_SetConfig+0x1e86>
 800bf30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf34:	e016      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e014      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf3a:	2380      	movs	r3, #128	; 0x80
 800bf3c:	e012      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf3e:	2340      	movs	r3, #64	; 0x40
 800bf40:	e010      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf42:	2320      	movs	r3, #32
 800bf44:	e00e      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf46:	2310      	movs	r3, #16
 800bf48:	e00c      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	e00a      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf4e:	230a      	movs	r3, #10
 800bf50:	e008      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf52:	2308      	movs	r3, #8
 800bf54:	e006      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf56:	2306      	movs	r3, #6
 800bf58:	e004      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf5a:	2304      	movs	r3, #4
 800bf5c:	e002      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e000      	b.n	800bf64 <UART_SetConfig+0x1eb4>
 800bf62:	2301      	movs	r3, #1
 800bf64:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	085b      	lsrs	r3, r3, #1
 800bf6e:	441a      	add	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf7c:	e1f2      	b.n	800c364 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf7e:	f107 030c 	add.w	r3, r7, #12
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fc fd14 	bl	80089b0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d044      	beq.n	800c01c <UART_SetConfig+0x1f6c>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d03e      	beq.n	800c018 <UART_SetConfig+0x1f68>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d038      	beq.n	800c014 <UART_SetConfig+0x1f64>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d032      	beq.n	800c010 <UART_SetConfig+0x1f60>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d02c      	beq.n	800c00c <UART_SetConfig+0x1f5c>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb6:	2b05      	cmp	r3, #5
 800bfb8:	d026      	beq.n	800c008 <UART_SetConfig+0x1f58>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	2b06      	cmp	r3, #6
 800bfc0:	d020      	beq.n	800c004 <UART_SetConfig+0x1f54>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	2b07      	cmp	r3, #7
 800bfc8:	d01a      	beq.n	800c000 <UART_SetConfig+0x1f50>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfce:	2b08      	cmp	r3, #8
 800bfd0:	d014      	beq.n	800bffc <UART_SetConfig+0x1f4c>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd6:	2b09      	cmp	r3, #9
 800bfd8:	d00e      	beq.n	800bff8 <UART_SetConfig+0x1f48>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfde:	2b0a      	cmp	r3, #10
 800bfe0:	d008      	beq.n	800bff4 <UART_SetConfig+0x1f44>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe6:	2b0b      	cmp	r3, #11
 800bfe8:	d102      	bne.n	800bff0 <UART_SetConfig+0x1f40>
 800bfea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfee:	e016      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e014      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800bff4:	2380      	movs	r3, #128	; 0x80
 800bff6:	e012      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800bff8:	2340      	movs	r3, #64	; 0x40
 800bffa:	e010      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800bffc:	2320      	movs	r3, #32
 800bffe:	e00e      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c000:	2310      	movs	r3, #16
 800c002:	e00c      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c004:	230c      	movs	r3, #12
 800c006:	e00a      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c008:	230a      	movs	r3, #10
 800c00a:	e008      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c00c:	2308      	movs	r3, #8
 800c00e:	e006      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c010:	2306      	movs	r3, #6
 800c012:	e004      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c014:	2304      	movs	r3, #4
 800c016:	e002      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c018:	2302      	movs	r3, #2
 800c01a:	e000      	b.n	800c01e <UART_SetConfig+0x1f6e>
 800c01c:	2301      	movs	r3, #1
 800c01e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	085b      	lsrs	r3, r3, #1
 800c028:	441a      	add	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c032:	b29b      	uxth	r3, r3
 800c034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c036:	e195      	b.n	800c364 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c038:	4b87      	ldr	r3, [pc, #540]	; (800c258 <UART_SetConfig+0x21a8>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0320 	and.w	r3, r3, #32
 800c040:	2b00      	cmp	r3, #0
 800c042:	d05d      	beq.n	800c100 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c044:	4b84      	ldr	r3, [pc, #528]	; (800c258 <UART_SetConfig+0x21a8>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	08db      	lsrs	r3, r3, #3
 800c04a:	f003 0303 	and.w	r3, r3, #3
 800c04e:	4a83      	ldr	r2, [pc, #524]	; (800c25c <UART_SetConfig+0x21ac>)
 800c050:	40da      	lsrs	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	2b00      	cmp	r3, #0
 800c058:	d044      	beq.n	800c0e4 <UART_SetConfig+0x2034>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d03e      	beq.n	800c0e0 <UART_SetConfig+0x2030>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	2b02      	cmp	r3, #2
 800c068:	d038      	beq.n	800c0dc <UART_SetConfig+0x202c>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d032      	beq.n	800c0d8 <UART_SetConfig+0x2028>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	2b04      	cmp	r3, #4
 800c078:	d02c      	beq.n	800c0d4 <UART_SetConfig+0x2024>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	2b05      	cmp	r3, #5
 800c080:	d026      	beq.n	800c0d0 <UART_SetConfig+0x2020>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c086:	2b06      	cmp	r3, #6
 800c088:	d020      	beq.n	800c0cc <UART_SetConfig+0x201c>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08e:	2b07      	cmp	r3, #7
 800c090:	d01a      	beq.n	800c0c8 <UART_SetConfig+0x2018>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	2b08      	cmp	r3, #8
 800c098:	d014      	beq.n	800c0c4 <UART_SetConfig+0x2014>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09e:	2b09      	cmp	r3, #9
 800c0a0:	d00e      	beq.n	800c0c0 <UART_SetConfig+0x2010>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a6:	2b0a      	cmp	r3, #10
 800c0a8:	d008      	beq.n	800c0bc <UART_SetConfig+0x200c>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ae:	2b0b      	cmp	r3, #11
 800c0b0:	d102      	bne.n	800c0b8 <UART_SetConfig+0x2008>
 800c0b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0b6:	e016      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e014      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0bc:	2380      	movs	r3, #128	; 0x80
 800c0be:	e012      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0c0:	2340      	movs	r3, #64	; 0x40
 800c0c2:	e010      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	e00e      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0c8:	2310      	movs	r3, #16
 800c0ca:	e00c      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0cc:	230c      	movs	r3, #12
 800c0ce:	e00a      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0d0:	230a      	movs	r3, #10
 800c0d2:	e008      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0d4:	2308      	movs	r3, #8
 800c0d6:	e006      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0d8:	2306      	movs	r3, #6
 800c0da:	e004      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0dc:	2304      	movs	r3, #4
 800c0de:	e002      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	e000      	b.n	800c0e6 <UART_SetConfig+0x2036>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	085b      	lsrs	r3, r3, #1
 800c0f0:	441a      	add	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800c0fe:	e131      	b.n	800c364 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	2b00      	cmp	r3, #0
 800c106:	d043      	beq.n	800c190 <UART_SetConfig+0x20e0>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d03d      	beq.n	800c18c <UART_SetConfig+0x20dc>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	2b02      	cmp	r3, #2
 800c116:	d037      	beq.n	800c188 <UART_SetConfig+0x20d8>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d031      	beq.n	800c184 <UART_SetConfig+0x20d4>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c124:	2b04      	cmp	r3, #4
 800c126:	d02b      	beq.n	800c180 <UART_SetConfig+0x20d0>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b05      	cmp	r3, #5
 800c12e:	d025      	beq.n	800c17c <UART_SetConfig+0x20cc>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	2b06      	cmp	r3, #6
 800c136:	d01f      	beq.n	800c178 <UART_SetConfig+0x20c8>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	2b07      	cmp	r3, #7
 800c13e:	d019      	beq.n	800c174 <UART_SetConfig+0x20c4>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c144:	2b08      	cmp	r3, #8
 800c146:	d013      	beq.n	800c170 <UART_SetConfig+0x20c0>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	2b09      	cmp	r3, #9
 800c14e:	d00d      	beq.n	800c16c <UART_SetConfig+0x20bc>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c154:	2b0a      	cmp	r3, #10
 800c156:	d007      	beq.n	800c168 <UART_SetConfig+0x20b8>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15c:	2b0b      	cmp	r3, #11
 800c15e:	d101      	bne.n	800c164 <UART_SetConfig+0x20b4>
 800c160:	4b3f      	ldr	r3, [pc, #252]	; (800c260 <UART_SetConfig+0x21b0>)
 800c162:	e016      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c164:	4b3d      	ldr	r3, [pc, #244]	; (800c25c <UART_SetConfig+0x21ac>)
 800c166:	e014      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c168:	4b3e      	ldr	r3, [pc, #248]	; (800c264 <UART_SetConfig+0x21b4>)
 800c16a:	e012      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c16c:	4b3e      	ldr	r3, [pc, #248]	; (800c268 <UART_SetConfig+0x21b8>)
 800c16e:	e010      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c170:	4b3e      	ldr	r3, [pc, #248]	; (800c26c <UART_SetConfig+0x21bc>)
 800c172:	e00e      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c174:	4b3e      	ldr	r3, [pc, #248]	; (800c270 <UART_SetConfig+0x21c0>)
 800c176:	e00c      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c178:	4b3e      	ldr	r3, [pc, #248]	; (800c274 <UART_SetConfig+0x21c4>)
 800c17a:	e00a      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c17c:	4b3e      	ldr	r3, [pc, #248]	; (800c278 <UART_SetConfig+0x21c8>)
 800c17e:	e008      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c180:	4b3e      	ldr	r3, [pc, #248]	; (800c27c <UART_SetConfig+0x21cc>)
 800c182:	e006      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c184:	4b3e      	ldr	r3, [pc, #248]	; (800c280 <UART_SetConfig+0x21d0>)
 800c186:	e004      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c188:	4b3e      	ldr	r3, [pc, #248]	; (800c284 <UART_SetConfig+0x21d4>)
 800c18a:	e002      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c18c:	4b3e      	ldr	r3, [pc, #248]	; (800c288 <UART_SetConfig+0x21d8>)
 800c18e:	e000      	b.n	800c192 <UART_SetConfig+0x20e2>
 800c190:	4b32      	ldr	r3, [pc, #200]	; (800c25c <UART_SetConfig+0x21ac>)
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	6852      	ldr	r2, [r2, #4]
 800c196:	0852      	lsrs	r2, r2, #1
 800c198:	441a      	add	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1a6:	e0dd      	b.n	800c364 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d046      	beq.n	800c23e <UART_SetConfig+0x218e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d040      	beq.n	800c23a <UART_SetConfig+0x218a>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d03a      	beq.n	800c236 <UART_SetConfig+0x2186>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d034      	beq.n	800c232 <UART_SetConfig+0x2182>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1cc:	2b04      	cmp	r3, #4
 800c1ce:	d02e      	beq.n	800c22e <UART_SetConfig+0x217e>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d4:	2b05      	cmp	r3, #5
 800c1d6:	d028      	beq.n	800c22a <UART_SetConfig+0x217a>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	2b06      	cmp	r3, #6
 800c1de:	d022      	beq.n	800c226 <UART_SetConfig+0x2176>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e4:	2b07      	cmp	r3, #7
 800c1e6:	d01c      	beq.n	800c222 <UART_SetConfig+0x2172>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	d016      	beq.n	800c21e <UART_SetConfig+0x216e>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	2b09      	cmp	r3, #9
 800c1f6:	d00f      	beq.n	800c218 <UART_SetConfig+0x2168>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	2b0a      	cmp	r3, #10
 800c1fe:	d008      	beq.n	800c212 <UART_SetConfig+0x2162>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	2b0b      	cmp	r3, #11
 800c206:	d102      	bne.n	800c20e <UART_SetConfig+0x215e>
 800c208:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c20c:	e018      	b.n	800c240 <UART_SetConfig+0x2190>
 800c20e:	4b18      	ldr	r3, [pc, #96]	; (800c270 <UART_SetConfig+0x21c0>)
 800c210:	e016      	b.n	800c240 <UART_SetConfig+0x2190>
 800c212:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c216:	e013      	b.n	800c240 <UART_SetConfig+0x2190>
 800c218:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c21c:	e010      	b.n	800c240 <UART_SetConfig+0x2190>
 800c21e:	4b1b      	ldr	r3, [pc, #108]	; (800c28c <UART_SetConfig+0x21dc>)
 800c220:	e00e      	b.n	800c240 <UART_SetConfig+0x2190>
 800c222:	4b0f      	ldr	r3, [pc, #60]	; (800c260 <UART_SetConfig+0x21b0>)
 800c224:	e00c      	b.n	800c240 <UART_SetConfig+0x2190>
 800c226:	4b1a      	ldr	r3, [pc, #104]	; (800c290 <UART_SetConfig+0x21e0>)
 800c228:	e00a      	b.n	800c240 <UART_SetConfig+0x2190>
 800c22a:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <UART_SetConfig+0x21e4>)
 800c22c:	e008      	b.n	800c240 <UART_SetConfig+0x2190>
 800c22e:	4b0d      	ldr	r3, [pc, #52]	; (800c264 <UART_SetConfig+0x21b4>)
 800c230:	e006      	b.n	800c240 <UART_SetConfig+0x2190>
 800c232:	4b19      	ldr	r3, [pc, #100]	; (800c298 <UART_SetConfig+0x21e8>)
 800c234:	e004      	b.n	800c240 <UART_SetConfig+0x2190>
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <UART_SetConfig+0x21b8>)
 800c238:	e002      	b.n	800c240 <UART_SetConfig+0x2190>
 800c23a:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <UART_SetConfig+0x21bc>)
 800c23c:	e000      	b.n	800c240 <UART_SetConfig+0x2190>
 800c23e:	4b0c      	ldr	r3, [pc, #48]	; (800c270 <UART_SetConfig+0x21c0>)
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	6852      	ldr	r2, [r2, #4]
 800c244:	0852      	lsrs	r2, r2, #1
 800c246:	441a      	add	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c250:	b29b      	uxth	r3, r3
 800c252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c254:	e086      	b.n	800c364 <UART_SetConfig+0x22b4>
 800c256:	bf00      	nop
 800c258:	58024400 	.word	0x58024400
 800c25c:	03d09000 	.word	0x03d09000
 800c260:	0003d090 	.word	0x0003d090
 800c264:	0007a120 	.word	0x0007a120
 800c268:	000f4240 	.word	0x000f4240
 800c26c:	001e8480 	.word	0x001e8480
 800c270:	003d0900 	.word	0x003d0900
 800c274:	00516155 	.word	0x00516155
 800c278:	0061a800 	.word	0x0061a800
 800c27c:	007a1200 	.word	0x007a1200
 800c280:	00a2c2aa 	.word	0x00a2c2aa
 800c284:	00f42400 	.word	0x00f42400
 800c288:	01e84800 	.word	0x01e84800
 800c28c:	0001e848 	.word	0x0001e848
 800c290:	00051615 	.word	0x00051615
 800c294:	00061a80 	.word	0x00061a80
 800c298:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d04e      	beq.n	800c342 <UART_SetConfig+0x2292>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d047      	beq.n	800c33c <UART_SetConfig+0x228c>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d040      	beq.n	800c336 <UART_SetConfig+0x2286>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d039      	beq.n	800c330 <UART_SetConfig+0x2280>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c0:	2b04      	cmp	r3, #4
 800c2c2:	d032      	beq.n	800c32a <UART_SetConfig+0x227a>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c8:	2b05      	cmp	r3, #5
 800c2ca:	d02b      	beq.n	800c324 <UART_SetConfig+0x2274>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	2b06      	cmp	r3, #6
 800c2d2:	d024      	beq.n	800c31e <UART_SetConfig+0x226e>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d8:	2b07      	cmp	r3, #7
 800c2da:	d01d      	beq.n	800c318 <UART_SetConfig+0x2268>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	d016      	beq.n	800c312 <UART_SetConfig+0x2262>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e8:	2b09      	cmp	r3, #9
 800c2ea:	d00f      	beq.n	800c30c <UART_SetConfig+0x225c>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	2b0a      	cmp	r3, #10
 800c2f2:	d008      	beq.n	800c306 <UART_SetConfig+0x2256>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	2b0b      	cmp	r3, #11
 800c2fa:	d101      	bne.n	800c300 <UART_SetConfig+0x2250>
 800c2fc:	2380      	movs	r3, #128	; 0x80
 800c2fe:	e022      	b.n	800c346 <UART_SetConfig+0x2296>
 800c300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c304:	e01f      	b.n	800c346 <UART_SetConfig+0x2296>
 800c306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c30a:	e01c      	b.n	800c346 <UART_SetConfig+0x2296>
 800c30c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c310:	e019      	b.n	800c346 <UART_SetConfig+0x2296>
 800c312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c316:	e016      	b.n	800c346 <UART_SetConfig+0x2296>
 800c318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c31c:	e013      	b.n	800c346 <UART_SetConfig+0x2296>
 800c31e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c322:	e010      	b.n	800c346 <UART_SetConfig+0x2296>
 800c324:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c328:	e00d      	b.n	800c346 <UART_SetConfig+0x2296>
 800c32a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c32e:	e00a      	b.n	800c346 <UART_SetConfig+0x2296>
 800c330:	f241 5355 	movw	r3, #5461	; 0x1555
 800c334:	e007      	b.n	800c346 <UART_SetConfig+0x2296>
 800c336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c33a:	e004      	b.n	800c346 <UART_SetConfig+0x2296>
 800c33c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c340:	e001      	b.n	800c346 <UART_SetConfig+0x2296>
 800c342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	6852      	ldr	r2, [r2, #4]
 800c34a:	0852      	lsrs	r2, r2, #1
 800c34c:	441a      	add	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	fbb2 f3f3 	udiv	r3, r2, r3
 800c356:	b29b      	uxth	r3, r3
 800c358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c35a:	e003      	b.n	800c364 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c366:	2b0f      	cmp	r3, #15
 800c368:	d908      	bls.n	800c37c <UART_SetConfig+0x22cc>
 800c36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c370:	d204      	bcs.n	800c37c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c378:	60da      	str	r2, [r3, #12]
 800c37a:	e002      	b.n	800c382 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2201      	movs	r2, #1
 800c38e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c39e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3740      	adds	r7, #64	; 0x40
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00a      	beq.n	800c3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00a      	beq.n	800c3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	430a      	orrs	r2, r1
 800c3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fc:	f003 0304 	and.w	r3, r3, #4
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00a      	beq.n	800c41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	430a      	orrs	r2, r1
 800c418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41e:	f003 0308 	and.w	r3, r3, #8
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00a      	beq.n	800c43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	430a      	orrs	r2, r1
 800c43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c440:	f003 0310 	and.w	r3, r3, #16
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00a      	beq.n	800c45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c462:	f003 0320 	and.w	r3, r3, #32
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	430a      	orrs	r2, r1
 800c47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d01a      	beq.n	800c4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4aa:	d10a      	bne.n	800c4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00a      	beq.n	800c4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	605a      	str	r2, [r3, #4]
  }
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af02      	add	r7, sp, #8
 800c4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c500:	f7f5 ff26 	bl	8002350 <HAL_GetTick>
 800c504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0308 	and.w	r3, r3, #8
 800c510:	2b08      	cmp	r3, #8
 800c512:	d10e      	bne.n	800c532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f82c 	bl	800c580 <UART_WaitOnFlagUntilTimeout>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e022      	b.n	800c578 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 0304 	and.w	r3, r3, #4
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d10e      	bne.n	800c55e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f816 	bl	800c580 <UART_WaitOnFlagUntilTimeout>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e00c      	b.n	800c578 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2220      	movs	r2, #32
 800c562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	4613      	mov	r3, r2
 800c58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c590:	e062      	b.n	800c658 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d05e      	beq.n	800c658 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c59a:	f7f5 fed9 	bl	8002350 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d302      	bcc.n	800c5b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d11d      	bne.n	800c5ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689a      	ldr	r2, [r3, #8]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 0201 	bic.w	r2, r2, #1
 800c5ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e045      	b.n	800c678 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 0304 	and.w	r3, r3, #4
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d02e      	beq.n	800c658 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c608:	d126      	bne.n	800c658 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c612:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c622:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689a      	ldr	r2, [r3, #8]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 0201 	bic.w	r2, r2, #1
 800c632:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2220      	movs	r2, #32
 800c638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2220      	movs	r2, #32
 800c640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2220      	movs	r2, #32
 800c648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e00f      	b.n	800c678 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	69da      	ldr	r2, [r3, #28]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	4013      	ands	r3, r2
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	429a      	cmp	r2, r3
 800c666:	bf0c      	ite	eq
 800c668:	2301      	moveq	r3, #1
 800c66a:	2300      	movne	r3, #0
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	79fb      	ldrb	r3, [r7, #7]
 800c672:	429a      	cmp	r2, r3
 800c674:	d08d      	beq.n	800c592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c696:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6899      	ldr	r1, [r3, #8]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <UART_EndRxTransfer+0x44>)
 800c6a4:	400b      	ands	r3, r1
 800c6a6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c6b6:	bf00      	nop
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	effffffe 	.word	0xeffffffe

0800c6c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f7fd fcd6 	bl	800a098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c702:	2b21      	cmp	r3, #33	; 0x21
 800c704:	d12a      	bne.n	800c75c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d110      	bne.n	800c734 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c720:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c730:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c732:	e013      	b.n	800c75c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c738:	781a      	ldrb	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c744:	1c5a      	adds	r2, r3, #1
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c750:	b29b      	uxth	r3, r3
 800c752:	3b01      	subs	r3, #1
 800c754:	b29a      	uxth	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c776:	2b21      	cmp	r3, #33	; 0x21
 800c778:	d12f      	bne.n	800c7da <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c780:	b29b      	uxth	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d110      	bne.n	800c7a8 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c794:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7a4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c7a6:	e018      	b.n	800c7da <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7c2:	1c9a      	adds	r2, r3, #2
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c7da:	bf00      	nop
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b085      	sub	sp, #20
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7f4:	2b21      	cmp	r3, #33	; 0x21
 800c7f6:	d13d      	bne.n	800c874 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7fe:	81fb      	strh	r3, [r7, #14]
 800c800:	e035      	b.n	800c86e <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d111      	bne.n	800c832 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	689a      	ldr	r2, [r3, #8]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c81c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c82c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c82e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c830:	e020      	b.n	800c874 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d013      	beq.n	800c868 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	3b01      	subs	r3, #1
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c868:	89fb      	ldrh	r3, [r7, #14]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	81fb      	strh	r3, [r7, #14]
 800c86e:	89fb      	ldrh	r3, [r7, #14]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1c6      	bne.n	800c802 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c874:	bf00      	nop
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c88e:	2b21      	cmp	r3, #33	; 0x21
 800c890:	d142      	bne.n	800c918 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c898:	81fb      	strh	r3, [r7, #14]
 800c89a:	e03a      	b.n	800c912 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d111      	bne.n	800c8cc <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c8b6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8c6:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c8c8:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c8ca:	e025      	b.n	800c918 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d018      	beq.n	800c90c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8de:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8ee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f4:	1c9a      	adds	r2, r3, #2
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c900:	b29b      	uxth	r3, r3
 800c902:	3b01      	subs	r3, #1
 800c904:	b29a      	uxth	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c90c:	89fb      	ldrh	r3, [r7, #14]
 800c90e:	3b01      	subs	r3, #1
 800c910:	81fb      	strh	r3, [r7, #14]
 800c912:	89fb      	ldrh	r3, [r7, #14]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1c1      	bne.n	800c89c <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c918:	bf00      	nop
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c93a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2220      	movs	r2, #32
 800c940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7f4 f9aa 	bl	8000ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c966:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c96e:	2b22      	cmp	r3, #34	; 0x22
 800c970:	d13b      	bne.n	800c9ea <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c978:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c97a:	89bb      	ldrh	r3, [r7, #12]
 800c97c:	b2d9      	uxtb	r1, r3
 800c97e:	89fb      	ldrh	r3, [r7, #14]
 800c980:	b2da      	uxtb	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c986:	400a      	ands	r2, r1
 800c988:	b2d2      	uxtb	r2, r2
 800c98a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d122      	bne.n	800c9fa <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c9c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689a      	ldr	r2, [r3, #8]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f022 0201 	bic.w	r2, r2, #1
 800c9d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2220      	movs	r2, #32
 800c9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7f4 f9a0 	bl	8000d28 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9e8:	e007      	b.n	800c9fa <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	699a      	ldr	r2, [r3, #24]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f042 0208 	orr.w	r2, r2, #8
 800c9f8:	619a      	str	r2, [r3, #24]
}
 800c9fa:	bf00      	nop
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca10:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca18:	2b22      	cmp	r3, #34	; 0x22
 800ca1a:	d13b      	bne.n	800ca94 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca22:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca28:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ca2a:	89ba      	ldrh	r2, [r7, #12]
 800ca2c:	89fb      	ldrh	r3, [r7, #14]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca3a:	1c9a      	adds	r2, r3, #2
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d122      	bne.n	800caa4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca6c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 0201 	bic.w	r2, r2, #1
 800ca7c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7f4 f94b 	bl	8000d28 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca92:	e007      	b.n	800caa4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	699a      	ldr	r2, [r3, #24]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f042 0208 	orr.w	r2, r2, #8
 800caa2:	619a      	str	r2, [r3, #24]
}
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caba:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cac2:	2b22      	cmp	r3, #34	; 0x22
 800cac4:	d166      	bne.n	800cb94 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cacc:	81fb      	strh	r3, [r7, #14]
 800cace:	e03d      	b.n	800cb4c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cad8:	893b      	ldrh	r3, [r7, #8]
 800cada:	b2d9      	uxtb	r1, r3
 800cadc:	89bb      	ldrh	r3, [r7, #12]
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae4:	400a      	ands	r2, r1
 800cae6:	b2d2      	uxtb	r2, r2
 800cae8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caee:	1c5a      	adds	r2, r3, #1
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	3b01      	subs	r3, #1
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d119      	bne.n	800cb46 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb20:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6899      	ldr	r1, [r3, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	4b1f      	ldr	r3, [pc, #124]	; (800cbac <UART_RxISR_8BIT_FIFOEN+0x100>)
 800cb2e:	400b      	ands	r3, r1
 800cb30:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2220      	movs	r2, #32
 800cb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7f4 f8f1 	bl	8000d28 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb46:	89fb      	ldrh	r3, [r7, #14]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	81fb      	strh	r3, [r7, #14]
 800cb4c:	89fb      	ldrh	r3, [r7, #14]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1be      	bne.n	800cad0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb58:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb5a:	897b      	ldrh	r3, [r7, #10]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d021      	beq.n	800cba4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb66:	897a      	ldrh	r2, [r7, #10]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d21b      	bcs.n	800cba4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb7a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a0c      	ldr	r2, [pc, #48]	; (800cbb0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800cb80:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f042 0220 	orr.w	r2, r2, #32
 800cb90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb92:	e007      	b.n	800cba4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0208 	orr.w	r2, r2, #8
 800cba2:	619a      	str	r2, [r3, #24]
}
 800cba4:	bf00      	nop
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	effffffe 	.word	0xeffffffe
 800cbb0:	0800c959 	.word	0x0800c959

0800cbb4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbc2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbca:	2b22      	cmp	r3, #34	; 0x22
 800cbcc:	d166      	bne.n	800cc9c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbd4:	82fb      	strh	r3, [r7, #22]
 800cbd6:	e03d      	b.n	800cc54 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbde:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbe4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cbe6:	8a3a      	ldrh	r2, [r7, #16]
 800cbe8:	8abb      	ldrh	r3, [r7, #20]
 800cbea:	4013      	ands	r3, r2
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbf6:	1c9a      	adds	r2, r3, #2
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	3b01      	subs	r3, #1
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d119      	bne.n	800cc4e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc28:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6899      	ldr	r1, [r3, #8]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	4b1f      	ldr	r3, [pc, #124]	; (800ccb4 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cc36:	400b      	ands	r3, r1
 800cc38:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7f4 f86d 	bl	8000d28 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cc4e:	8afb      	ldrh	r3, [r7, #22]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	82fb      	strh	r3, [r7, #22]
 800cc54:	8afb      	ldrh	r3, [r7, #22]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1be      	bne.n	800cbd8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc60:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc62:	8a7b      	ldrh	r3, [r7, #18]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d021      	beq.n	800ccac <UART_RxISR_16BIT_FIFOEN+0xf8>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc6e:	8a7a      	ldrh	r2, [r7, #18]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d21b      	bcs.n	800ccac <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cc82:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a0c      	ldr	r2, [pc, #48]	; (800ccb8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800cc88:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f042 0220 	orr.w	r2, r2, #32
 800cc98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc9a:	e007      	b.n	800ccac <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f042 0208 	orr.w	r2, r2, #8
 800ccaa:	619a      	str	r2, [r3, #24]
}
 800ccac:	bf00      	nop
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	effffffe 	.word	0xeffffffe
 800ccb8:	0800ca03 	.word	0x0800ca03

0800ccbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d101      	bne.n	800cd0e <HAL_UARTEx_DisableFifoMode+0x16>
 800cd0a:	2302      	movs	r3, #2
 800cd0c:	e027      	b.n	800cd5e <HAL_UARTEx_DisableFifoMode+0x66>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2224      	movs	r2, #36	; 0x24
 800cd1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 0201 	bic.w	r2, r2, #1
 800cd34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2220      	movs	r2, #32
 800cd50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d101      	bne.n	800cd82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd7e:	2302      	movs	r3, #2
 800cd80:	e02d      	b.n	800cdde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2224      	movs	r2, #36	; 0x24
 800cd8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0201 	bic.w	r2, r2, #1
 800cda8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f850 	bl	800ce64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d101      	bne.n	800cdfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e02d      	b.n	800ce5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2224      	movs	r2, #36	; 0x24
 800ce0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f022 0201 	bic.w	r2, r2, #1
 800ce24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f812 	bl	800ce64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2220      	movs	r2, #32
 800ce4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b089      	sub	sp, #36	; 0x24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ce6c:	4a2f      	ldr	r2, [pc, #188]	; (800cf2c <UARTEx_SetNbDataToProcess+0xc8>)
 800ce6e:	f107 0314 	add.w	r3, r7, #20
 800ce72:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce76:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ce7a:	4a2d      	ldr	r2, [pc, #180]	; (800cf30 <UARTEx_SetNbDataToProcess+0xcc>)
 800ce7c:	f107 030c 	add.w	r3, r7, #12
 800ce80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce84:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d108      	bne.n	800cea2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cea0:	e03d      	b.n	800cf1e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cea2:	2308      	movs	r3, #8
 800cea4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cea6:	2308      	movs	r3, #8
 800cea8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	0e5b      	lsrs	r3, r3, #25
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0307 	and.w	r3, r3, #7
 800ceb8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	0f5b      	lsrs	r3, r3, #29
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	f003 0307 	and.w	r3, r3, #7
 800cec8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ceca:	7fbb      	ldrb	r3, [r7, #30]
 800cecc:	7f3a      	ldrb	r2, [r7, #28]
 800cece:	f107 0120 	add.w	r1, r7, #32
 800ced2:	440a      	add	r2, r1
 800ced4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ced8:	fb02 f303 	mul.w	r3, r2, r3
 800cedc:	7f3a      	ldrb	r2, [r7, #28]
 800cede:	f107 0120 	add.w	r1, r7, #32
 800cee2:	440a      	add	r2, r1
 800cee4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cef4:	7ffb      	ldrb	r3, [r7, #31]
 800cef6:	7f7a      	ldrb	r2, [r7, #29]
 800cef8:	f107 0120 	add.w	r1, r7, #32
 800cefc:	440a      	add	r2, r1
 800cefe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cf02:	fb02 f303 	mul.w	r3, r2, r3
 800cf06:	7f7a      	ldrb	r2, [r7, #29]
 800cf08:	f107 0120 	add.w	r1, r7, #32
 800cf0c:	440a      	add	r2, r1
 800cf0e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cf12:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf1e:	bf00      	nop
 800cf20:	3724      	adds	r7, #36	; 0x24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	0800e068 	.word	0x0800e068
 800cf30:	0800e070 	.word	0x0800e070

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	; (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	24000038 	.word	0x24000038

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4e0d      	ldr	r6, [pc, #52]	; (800cf78 <__libc_init_array+0x38>)
 800cf44:	4c0d      	ldr	r4, [pc, #52]	; (800cf7c <__libc_init_array+0x3c>)
 800cf46:	1ba4      	subs	r4, r4, r6
 800cf48:	10a4      	asrs	r4, r4, #2
 800cf4a:	2500      	movs	r5, #0
 800cf4c:	42a5      	cmp	r5, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	4e0b      	ldr	r6, [pc, #44]	; (800cf80 <__libc_init_array+0x40>)
 800cf52:	4c0c      	ldr	r4, [pc, #48]	; (800cf84 <__libc_init_array+0x44>)
 800cf54:	f001 f87a 	bl	800e04c <_init>
 800cf58:	1ba4      	subs	r4, r4, r6
 800cf5a:	10a4      	asrs	r4, r4, #2
 800cf5c:	2500      	movs	r5, #0
 800cf5e:	42a5      	cmp	r5, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf68:	4798      	blx	r3
 800cf6a:	3501      	adds	r5, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf72:	4798      	blx	r3
 800cf74:	3501      	adds	r5, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800e2b8 	.word	0x0800e2b8
 800cf7c:	0800e2b8 	.word	0x0800e2b8
 800cf80:	0800e2b8 	.word	0x0800e2b8
 800cf84:	0800e2bc 	.word	0x0800e2bc

0800cf88 <memset>:
 800cf88:	4402      	add	r2, r0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d100      	bne.n	800cf92 <memset+0xa>
 800cf90:	4770      	bx	lr
 800cf92:	f803 1b01 	strb.w	r1, [r3], #1
 800cf96:	e7f9      	b.n	800cf8c <memset+0x4>

0800cf98 <cos>:
 800cf98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf9a:	eeb0 7b40 	vmov.f64	d7, d0
 800cf9e:	ee17 3a90 	vmov	r3, s15
 800cfa2:	4a19      	ldr	r2, [pc, #100]	; (800d008 <cos+0x70>)
 800cfa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	dc04      	bgt.n	800cfb6 <cos+0x1e>
 800cfac:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d000 <cos+0x68>
 800cfb0:	f000 fade 	bl	800d570 <__kernel_cos>
 800cfb4:	e004      	b.n	800cfc0 <cos+0x28>
 800cfb6:	4a15      	ldr	r2, [pc, #84]	; (800d00c <cos+0x74>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	dd04      	ble.n	800cfc6 <cos+0x2e>
 800cfbc:	ee30 0b40 	vsub.f64	d0, d0, d0
 800cfc0:	b005      	add	sp, #20
 800cfc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfc6:	4668      	mov	r0, sp
 800cfc8:	f000 f992 	bl	800d2f0 <__ieee754_rem_pio2>
 800cfcc:	f000 0003 	and.w	r0, r0, #3
 800cfd0:	2801      	cmp	r0, #1
 800cfd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfd6:	ed9d 0b00 	vldr	d0, [sp]
 800cfda:	d007      	beq.n	800cfec <cos+0x54>
 800cfdc:	2802      	cmp	r0, #2
 800cfde:	d00a      	beq.n	800cff6 <cos+0x5e>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d0e5      	beq.n	800cfb0 <cos+0x18>
 800cfe4:	2001      	movs	r0, #1
 800cfe6:	f000 fdcb 	bl	800db80 <__kernel_sin>
 800cfea:	e7e9      	b.n	800cfc0 <cos+0x28>
 800cfec:	f000 fdc8 	bl	800db80 <__kernel_sin>
 800cff0:	eeb1 0b40 	vneg.f64	d0, d0
 800cff4:	e7e4      	b.n	800cfc0 <cos+0x28>
 800cff6:	f000 fabb 	bl	800d570 <__kernel_cos>
 800cffa:	e7f9      	b.n	800cff0 <cos+0x58>
 800cffc:	f3af 8000 	nop.w
	...
 800d008:	3fe921fb 	.word	0x3fe921fb
 800d00c:	7fefffff 	.word	0x7fefffff

0800d010 <sin>:
 800d010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d012:	eeb0 7b40 	vmov.f64	d7, d0
 800d016:	ee17 3a90 	vmov	r3, s15
 800d01a:	4a19      	ldr	r2, [pc, #100]	; (800d080 <sin+0x70>)
 800d01c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d020:	4293      	cmp	r3, r2
 800d022:	dc05      	bgt.n	800d030 <sin+0x20>
 800d024:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d078 <sin+0x68>
 800d028:	2000      	movs	r0, #0
 800d02a:	f000 fda9 	bl	800db80 <__kernel_sin>
 800d02e:	e004      	b.n	800d03a <sin+0x2a>
 800d030:	4a14      	ldr	r2, [pc, #80]	; (800d084 <sin+0x74>)
 800d032:	4293      	cmp	r3, r2
 800d034:	dd04      	ble.n	800d040 <sin+0x30>
 800d036:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d03a:	b005      	add	sp, #20
 800d03c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d040:	4668      	mov	r0, sp
 800d042:	f000 f955 	bl	800d2f0 <__ieee754_rem_pio2>
 800d046:	f000 0003 	and.w	r0, r0, #3
 800d04a:	2801      	cmp	r0, #1
 800d04c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d050:	ed9d 0b00 	vldr	d0, [sp]
 800d054:	d004      	beq.n	800d060 <sin+0x50>
 800d056:	2802      	cmp	r0, #2
 800d058:	d005      	beq.n	800d066 <sin+0x56>
 800d05a:	b950      	cbnz	r0, 800d072 <sin+0x62>
 800d05c:	2001      	movs	r0, #1
 800d05e:	e7e4      	b.n	800d02a <sin+0x1a>
 800d060:	f000 fa86 	bl	800d570 <__kernel_cos>
 800d064:	e7e9      	b.n	800d03a <sin+0x2a>
 800d066:	2001      	movs	r0, #1
 800d068:	f000 fd8a 	bl	800db80 <__kernel_sin>
 800d06c:	eeb1 0b40 	vneg.f64	d0, d0
 800d070:	e7e3      	b.n	800d03a <sin+0x2a>
 800d072:	f000 fa7d 	bl	800d570 <__kernel_cos>
 800d076:	e7f9      	b.n	800d06c <sin+0x5c>
	...
 800d080:	3fe921fb 	.word	0x3fe921fb
 800d084:	7fefffff 	.word	0x7fefffff

0800d088 <atan2>:
 800d088:	f000 b84e 	b.w	800d128 <__ieee754_atan2>
 800d08c:	0000      	movs	r0, r0
	...

0800d090 <sqrt>:
 800d090:	b500      	push	{lr}
 800d092:	ed2d 8b02 	vpush	{d8}
 800d096:	eeb0 8b40 	vmov.f64	d8, d0
 800d09a:	b08b      	sub	sp, #44	; 0x2c
 800d09c:	f000 fa64 	bl	800d568 <__ieee754_sqrt>
 800d0a0:	4b1f      	ldr	r3, [pc, #124]	; (800d120 <sqrt+0x90>)
 800d0a2:	f993 3000 	ldrsb.w	r3, [r3]
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	d024      	beq.n	800d0f4 <sqrt+0x64>
 800d0aa:	eeb4 8b48 	vcmp.f64	d8, d8
 800d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b2:	d61f      	bvs.n	800d0f4 <sqrt+0x64>
 800d0b4:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800d118 <sqrt+0x88>
 800d0b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c0:	d518      	bpl.n	800d0f4 <sqrt+0x64>
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	9200      	str	r2, [sp, #0]
 800d0c6:	4a17      	ldr	r2, [pc, #92]	; (800d124 <sqrt+0x94>)
 800d0c8:	9201      	str	r2, [sp, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	9208      	str	r2, [sp, #32]
 800d0ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d0d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d0d6:	b993      	cbnz	r3, 800d0fe <sqrt+0x6e>
 800d0d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0dc:	4668      	mov	r0, sp
 800d0de:	f000 ff23 	bl	800df28 <matherr>
 800d0e2:	b190      	cbz	r0, 800d10a <sqrt+0x7a>
 800d0e4:	9b08      	ldr	r3, [sp, #32]
 800d0e6:	b11b      	cbz	r3, 800d0f0 <sqrt+0x60>
 800d0e8:	f7ff ff24 	bl	800cf34 <__errno>
 800d0ec:	9b08      	ldr	r3, [sp, #32]
 800d0ee:	6003      	str	r3, [r0, #0]
 800d0f0:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d0f4:	b00b      	add	sp, #44	; 0x2c
 800d0f6:	ecbd 8b02 	vpop	{d8}
 800d0fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d104:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d108:	d1e8      	bne.n	800d0dc <sqrt+0x4c>
 800d10a:	f7ff ff13 	bl	800cf34 <__errno>
 800d10e:	2321      	movs	r3, #33	; 0x21
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	e7e7      	b.n	800d0e4 <sqrt+0x54>
 800d114:	f3af 8000 	nop.w
	...
 800d120:	2400009c 	.word	0x2400009c
 800d124:	0800e090 	.word	0x0800e090

0800d128 <__ieee754_atan2>:
 800d128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d12a:	ee11 6a10 	vmov	r6, s2
 800d12e:	ee11 0a90 	vmov	r0, s3
 800d132:	4273      	negs	r3, r6
 800d134:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d138:	4333      	orrs	r3, r6
 800d13a:	4f6b      	ldr	r7, [pc, #428]	; (800d2e8 <__ieee754_atan2+0x1c0>)
 800d13c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d140:	42bb      	cmp	r3, r7
 800d142:	ed8d 0b00 	vstr	d0, [sp]
 800d146:	d80b      	bhi.n	800d160 <__ieee754_atan2+0x38>
 800d148:	e9dd c500 	ldrd	ip, r5, [sp]
 800d14c:	f1cc 0100 	rsb	r1, ip, #0
 800d150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d154:	ea41 010c 	orr.w	r1, r1, ip
 800d158:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800d15c:	42b9      	cmp	r1, r7
 800d15e:	d906      	bls.n	800d16e <__ieee754_atan2+0x46>
 800d160:	ed9d 7b00 	vldr	d7, [sp]
 800d164:	ee37 7b01 	vadd.f64	d7, d7, d1
 800d168:	ed8d 7b00 	vstr	d7, [sp]
 800d16c:	e063      	b.n	800d236 <__ieee754_atan2+0x10e>
 800d16e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800d172:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800d176:	4331      	orrs	r1, r6
 800d178:	d104      	bne.n	800d184 <__ieee754_atan2+0x5c>
 800d17a:	b003      	add	sp, #12
 800d17c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d180:	f000 bd56 	b.w	800dc30 <atan>
 800d184:	1784      	asrs	r4, r0, #30
 800d186:	f004 0402 	and.w	r4, r4, #2
 800d18a:	ea53 010c 	orrs.w	r1, r3, ip
 800d18e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800d192:	d109      	bne.n	800d1a8 <__ieee754_atan2+0x80>
 800d194:	2c02      	cmp	r4, #2
 800d196:	d078      	beq.n	800d28a <__ieee754_atan2+0x162>
 800d198:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800d290 <__ieee754_atan2+0x168>
 800d19c:	ed9d 6b00 	vldr	d6, [sp]
 800d1a0:	2c03      	cmp	r4, #3
 800d1a2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d1a6:	e7df      	b.n	800d168 <__ieee754_atan2+0x40>
 800d1a8:	ea52 0106 	orrs.w	r1, r2, r6
 800d1ac:	d107      	bne.n	800d1be <__ieee754_atan2+0x96>
 800d1ae:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800d298 <__ieee754_atan2+0x170>
 800d1b2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800d2a0 <__ieee754_atan2+0x178>
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	fe26 7b07 	vselge.f64	d7, d6, d7
 800d1bc:	e7d4      	b.n	800d168 <__ieee754_atan2+0x40>
 800d1be:	42ba      	cmp	r2, r7
 800d1c0:	d120      	bne.n	800d204 <__ieee754_atan2+0xdc>
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d111      	bne.n	800d1ea <__ieee754_atan2+0xc2>
 800d1c6:	2c02      	cmp	r4, #2
 800d1c8:	d009      	beq.n	800d1de <__ieee754_atan2+0xb6>
 800d1ca:	2c03      	cmp	r4, #3
 800d1cc:	d00a      	beq.n	800d1e4 <__ieee754_atan2+0xbc>
 800d1ce:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d2a8 <__ieee754_atan2+0x180>
 800d1d2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800d2b0 <__ieee754_atan2+0x188>
 800d1d6:	2c01      	cmp	r4, #1
 800d1d8:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d1dc:	e7c4      	b.n	800d168 <__ieee754_atan2+0x40>
 800d1de:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d2b8 <__ieee754_atan2+0x190>
 800d1e2:	e7c1      	b.n	800d168 <__ieee754_atan2+0x40>
 800d1e4:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d2c0 <__ieee754_atan2+0x198>
 800d1e8:	e7be      	b.n	800d168 <__ieee754_atan2+0x40>
 800d1ea:	2c02      	cmp	r4, #2
 800d1ec:	d04d      	beq.n	800d28a <__ieee754_atan2+0x162>
 800d1ee:	2c03      	cmp	r4, #3
 800d1f0:	d005      	beq.n	800d1fe <__ieee754_atan2+0xd6>
 800d1f2:	2c01      	cmp	r4, #1
 800d1f4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800d2c8 <__ieee754_atan2+0x1a0>
 800d1f8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d2d0 <__ieee754_atan2+0x1a8>
 800d1fc:	e7ec      	b.n	800d1d8 <__ieee754_atan2+0xb0>
 800d1fe:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800d290 <__ieee754_atan2+0x168>
 800d202:	e7b1      	b.n	800d168 <__ieee754_atan2+0x40>
 800d204:	42bb      	cmp	r3, r7
 800d206:	d0d2      	beq.n	800d1ae <__ieee754_atan2+0x86>
 800d208:	1a9b      	subs	r3, r3, r2
 800d20a:	151b      	asrs	r3, r3, #20
 800d20c:	2b3c      	cmp	r3, #60	; 0x3c
 800d20e:	dc16      	bgt.n	800d23e <__ieee754_atan2+0x116>
 800d210:	2800      	cmp	r0, #0
 800d212:	da01      	bge.n	800d218 <__ieee754_atan2+0xf0>
 800d214:	333c      	adds	r3, #60	; 0x3c
 800d216:	db17      	blt.n	800d248 <__ieee754_atan2+0x120>
 800d218:	ed9d 7b00 	vldr	d7, [sp]
 800d21c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800d220:	f000 fe00 	bl	800de24 <fabs>
 800d224:	f000 fd04 	bl	800dc30 <atan>
 800d228:	ed8d 0b00 	vstr	d0, [sp]
 800d22c:	2c01      	cmp	r4, #1
 800d22e:	d00e      	beq.n	800d24e <__ieee754_atan2+0x126>
 800d230:	2c02      	cmp	r4, #2
 800d232:	d014      	beq.n	800d25e <__ieee754_atan2+0x136>
 800d234:	b9f4      	cbnz	r4, 800d274 <__ieee754_atan2+0x14c>
 800d236:	ed9d 0b00 	vldr	d0, [sp]
 800d23a:	b003      	add	sp, #12
 800d23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d23e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d298 <__ieee754_atan2+0x170>
 800d242:	ed8d 7b00 	vstr	d7, [sp]
 800d246:	e7f1      	b.n	800d22c <__ieee754_atan2+0x104>
 800d248:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d2d0 <__ieee754_atan2+0x1a8>
 800d24c:	e7f9      	b.n	800d242 <__ieee754_atan2+0x11a>
 800d24e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d252:	9901      	ldr	r1, [sp, #4]
 800d254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d258:	e9cd 2300 	strd	r2, r3, [sp]
 800d25c:	e7eb      	b.n	800d236 <__ieee754_atan2+0x10e>
 800d25e:	ed9d 6b00 	vldr	d6, [sp]
 800d262:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800d2d8 <__ieee754_atan2+0x1b0>
 800d266:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d26a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800d2e0 <__ieee754_atan2+0x1b8>
 800d26e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d272:	e779      	b.n	800d168 <__ieee754_atan2+0x40>
 800d274:	ed9d 6b00 	vldr	d6, [sp]
 800d278:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d2d8 <__ieee754_atan2+0x1b0>
 800d27c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d280:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800d2e0 <__ieee754_atan2+0x1b8>
 800d284:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d288:	e76e      	b.n	800d168 <__ieee754_atan2+0x40>
 800d28a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d2e0 <__ieee754_atan2+0x1b8>
 800d28e:	e76b      	b.n	800d168 <__ieee754_atan2+0x40>
 800d290:	54442d18 	.word	0x54442d18
 800d294:	c00921fb 	.word	0xc00921fb
 800d298:	54442d18 	.word	0x54442d18
 800d29c:	3ff921fb 	.word	0x3ff921fb
 800d2a0:	54442d18 	.word	0x54442d18
 800d2a4:	bff921fb 	.word	0xbff921fb
 800d2a8:	54442d18 	.word	0x54442d18
 800d2ac:	bfe921fb 	.word	0xbfe921fb
 800d2b0:	54442d18 	.word	0x54442d18
 800d2b4:	3fe921fb 	.word	0x3fe921fb
 800d2b8:	7f3321d2 	.word	0x7f3321d2
 800d2bc:	4002d97c 	.word	0x4002d97c
 800d2c0:	7f3321d2 	.word	0x7f3321d2
 800d2c4:	c002d97c 	.word	0xc002d97c
 800d2c8:	00000000 	.word	0x00000000
 800d2cc:	80000000 	.word	0x80000000
	...
 800d2d8:	33145c07 	.word	0x33145c07
 800d2dc:	3ca1a626 	.word	0x3ca1a626
 800d2e0:	54442d18 	.word	0x54442d18
 800d2e4:	400921fb 	.word	0x400921fb
 800d2e8:	7ff00000 	.word	0x7ff00000
 800d2ec:	00000000 	.word	0x00000000

0800d2f0 <__ieee754_rem_pio2>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	eeb0 7b40 	vmov.f64	d7, d0
 800d2f6:	ee17 5a90 	vmov	r5, s15
 800d2fa:	4b95      	ldr	r3, [pc, #596]	; (800d550 <__ieee754_rem_pio2+0x260>)
 800d2fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d300:	429e      	cmp	r6, r3
 800d302:	b088      	sub	sp, #32
 800d304:	4604      	mov	r4, r0
 800d306:	dc07      	bgt.n	800d318 <__ieee754_rem_pio2+0x28>
 800d308:	2200      	movs	r2, #0
 800d30a:	2300      	movs	r3, #0
 800d30c:	ed84 0b00 	vstr	d0, [r4]
 800d310:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d314:	2000      	movs	r0, #0
 800d316:	e01b      	b.n	800d350 <__ieee754_rem_pio2+0x60>
 800d318:	4b8e      	ldr	r3, [pc, #568]	; (800d554 <__ieee754_rem_pio2+0x264>)
 800d31a:	429e      	cmp	r6, r3
 800d31c:	dc3b      	bgt.n	800d396 <__ieee754_rem_pio2+0xa6>
 800d31e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d322:	2d00      	cmp	r5, #0
 800d324:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d510 <__ieee754_rem_pio2+0x220>
 800d328:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d32c:	dd19      	ble.n	800d362 <__ieee754_rem_pio2+0x72>
 800d32e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d332:	429e      	cmp	r6, r3
 800d334:	d00e      	beq.n	800d354 <__ieee754_rem_pio2+0x64>
 800d336:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d518 <__ieee754_rem_pio2+0x228>
 800d33a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d33e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d342:	ed84 5b00 	vstr	d5, [r4]
 800d346:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d34a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d34e:	2001      	movs	r0, #1
 800d350:	b008      	add	sp, #32
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d520 <__ieee754_rem_pio2+0x230>
 800d358:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d35c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d528 <__ieee754_rem_pio2+0x238>
 800d360:	e7eb      	b.n	800d33a <__ieee754_rem_pio2+0x4a>
 800d362:	429e      	cmp	r6, r3
 800d364:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d368:	d00e      	beq.n	800d388 <__ieee754_rem_pio2+0x98>
 800d36a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d518 <__ieee754_rem_pio2+0x228>
 800d36e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d372:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d376:	ed84 5b00 	vstr	d5, [r4]
 800d37a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	ed84 7b02 	vstr	d7, [r4, #8]
 800d386:	e7e3      	b.n	800d350 <__ieee754_rem_pio2+0x60>
 800d388:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d520 <__ieee754_rem_pio2+0x230>
 800d38c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d390:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d528 <__ieee754_rem_pio2+0x238>
 800d394:	e7eb      	b.n	800d36e <__ieee754_rem_pio2+0x7e>
 800d396:	4b70      	ldr	r3, [pc, #448]	; (800d558 <__ieee754_rem_pio2+0x268>)
 800d398:	429e      	cmp	r6, r3
 800d39a:	dc6c      	bgt.n	800d476 <__ieee754_rem_pio2+0x186>
 800d39c:	f000 fd42 	bl	800de24 <fabs>
 800d3a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d3a4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d530 <__ieee754_rem_pio2+0x240>
 800d3a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d3ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d3b0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d3b4:	ee17 0a90 	vmov	r0, s15
 800d3b8:	eeb1 5b44 	vneg.f64	d5, d4
 800d3bc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d510 <__ieee754_rem_pio2+0x220>
 800d3c0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d3c4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d518 <__ieee754_rem_pio2+0x228>
 800d3c8:	281f      	cmp	r0, #31
 800d3ca:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d3ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d3d2:	dc08      	bgt.n	800d3e6 <__ieee754_rem_pio2+0xf6>
 800d3d4:	1e42      	subs	r2, r0, #1
 800d3d6:	4b61      	ldr	r3, [pc, #388]	; (800d55c <__ieee754_rem_pio2+0x26c>)
 800d3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3dc:	42b3      	cmp	r3, r6
 800d3de:	d002      	beq.n	800d3e6 <__ieee754_rem_pio2+0xf6>
 800d3e0:	ed84 6b00 	vstr	d6, [r4]
 800d3e4:	e022      	b.n	800d42c <__ieee754_rem_pio2+0x13c>
 800d3e6:	ee16 3a90 	vmov	r3, s13
 800d3ea:	1536      	asrs	r6, r6, #20
 800d3ec:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d3f0:	1af3      	subs	r3, r6, r3
 800d3f2:	2b10      	cmp	r3, #16
 800d3f4:	ddf4      	ble.n	800d3e0 <__ieee754_rem_pio2+0xf0>
 800d3f6:	eeb0 6b40 	vmov.f64	d6, d0
 800d3fa:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d520 <__ieee754_rem_pio2+0x230>
 800d3fe:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d402:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d406:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d40a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d528 <__ieee754_rem_pio2+0x238>
 800d40e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d412:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d416:	ee13 3a90 	vmov	r3, s7
 800d41a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d41e:	1af6      	subs	r6, r6, r3
 800d420:	2e31      	cmp	r6, #49	; 0x31
 800d422:	dc17      	bgt.n	800d454 <__ieee754_rem_pio2+0x164>
 800d424:	eeb0 0b46 	vmov.f64	d0, d6
 800d428:	ed84 3b00 	vstr	d3, [r4]
 800d42c:	ed94 6b00 	vldr	d6, [r4]
 800d430:	2d00      	cmp	r5, #0
 800d432:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d436:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d43a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d43e:	da87      	bge.n	800d350 <__ieee754_rem_pio2+0x60>
 800d440:	eeb1 6b46 	vneg.f64	d6, d6
 800d444:	ed84 6b00 	vstr	d6, [r4]
 800d448:	eeb1 7b47 	vneg.f64	d7, d7
 800d44c:	4240      	negs	r0, r0
 800d44e:	ed84 7b02 	vstr	d7, [r4, #8]
 800d452:	e77d      	b.n	800d350 <__ieee754_rem_pio2+0x60>
 800d454:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d538 <__ieee754_rem_pio2+0x248>
 800d458:	eeb0 0b46 	vmov.f64	d0, d6
 800d45c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d460:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d464:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d540 <__ieee754_rem_pio2+0x250>
 800d468:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d46c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d470:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d474:	e7b4      	b.n	800d3e0 <__ieee754_rem_pio2+0xf0>
 800d476:	4b3a      	ldr	r3, [pc, #232]	; (800d560 <__ieee754_rem_pio2+0x270>)
 800d478:	429e      	cmp	r6, r3
 800d47a:	dd06      	ble.n	800d48a <__ieee754_rem_pio2+0x19a>
 800d47c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d480:	ed80 7b02 	vstr	d7, [r0, #8]
 800d484:	ed80 7b00 	vstr	d7, [r0]
 800d488:	e744      	b.n	800d314 <__ieee754_rem_pio2+0x24>
 800d48a:	1532      	asrs	r2, r6, #20
 800d48c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d490:	ee10 0a10 	vmov	r0, s0
 800d494:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d498:	ec41 0b17 	vmov	d7, r0, r1
 800d49c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d4a0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d548 <__ieee754_rem_pio2+0x258>
 800d4a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d4a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d4b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d4b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d4b8:	a908      	add	r1, sp, #32
 800d4ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d4be:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d4c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d4ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	ed31 7b02 	vldmdb	r1!, {d7}
 800d4d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4dc:	f103 30ff 	add.w	r0, r3, #4294967295
 800d4e0:	d013      	beq.n	800d50a <__ieee754_rem_pio2+0x21a>
 800d4e2:	4920      	ldr	r1, [pc, #128]	; (800d564 <__ieee754_rem_pio2+0x274>)
 800d4e4:	9101      	str	r1, [sp, #4]
 800d4e6:	2102      	movs	r1, #2
 800d4e8:	9100      	str	r1, [sp, #0]
 800d4ea:	a802      	add	r0, sp, #8
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	f000 f8ab 	bl	800d648 <__kernel_rem_pio2>
 800d4f2:	2d00      	cmp	r5, #0
 800d4f4:	f6bf af2c 	bge.w	800d350 <__ieee754_rem_pio2+0x60>
 800d4f8:	ed94 7b00 	vldr	d7, [r4]
 800d4fc:	eeb1 7b47 	vneg.f64	d7, d7
 800d500:	ed84 7b00 	vstr	d7, [r4]
 800d504:	ed94 7b02 	vldr	d7, [r4, #8]
 800d508:	e79e      	b.n	800d448 <__ieee754_rem_pio2+0x158>
 800d50a:	4603      	mov	r3, r0
 800d50c:	e7e0      	b.n	800d4d0 <__ieee754_rem_pio2+0x1e0>
 800d50e:	bf00      	nop
 800d510:	54400000 	.word	0x54400000
 800d514:	3ff921fb 	.word	0x3ff921fb
 800d518:	1a626331 	.word	0x1a626331
 800d51c:	3dd0b461 	.word	0x3dd0b461
 800d520:	1a600000 	.word	0x1a600000
 800d524:	3dd0b461 	.word	0x3dd0b461
 800d528:	2e037073 	.word	0x2e037073
 800d52c:	3ba3198a 	.word	0x3ba3198a
 800d530:	6dc9c883 	.word	0x6dc9c883
 800d534:	3fe45f30 	.word	0x3fe45f30
 800d538:	2e000000 	.word	0x2e000000
 800d53c:	3ba3198a 	.word	0x3ba3198a
 800d540:	252049c1 	.word	0x252049c1
 800d544:	397b839a 	.word	0x397b839a
 800d548:	00000000 	.word	0x00000000
 800d54c:	41700000 	.word	0x41700000
 800d550:	3fe921fb 	.word	0x3fe921fb
 800d554:	4002d97b 	.word	0x4002d97b
 800d558:	413921fb 	.word	0x413921fb
 800d55c:	0800e098 	.word	0x0800e098
 800d560:	7fefffff 	.word	0x7fefffff
 800d564:	0800e118 	.word	0x0800e118

0800d568 <__ieee754_sqrt>:
 800d568:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d56c:	4770      	bx	lr
	...

0800d570 <__kernel_cos>:
 800d570:	ee10 1a90 	vmov	r1, s1
 800d574:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d57c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d580:	da05      	bge.n	800d58e <__kernel_cos+0x1e>
 800d582:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d586:	ee16 3a90 	vmov	r3, s13
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d03d      	beq.n	800d60a <__kernel_cos+0x9a>
 800d58e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d592:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d596:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d610 <__kernel_cos+0xa0>
 800d59a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d59e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d5a2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d618 <__kernel_cos+0xa8>
 800d5a6:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d5aa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d620 <__kernel_cos+0xb0>
 800d5ae:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d5b2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d628 <__kernel_cos+0xb8>
 800d5b6:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d5ba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d630 <__kernel_cos+0xc0>
 800d5be:	4b20      	ldr	r3, [pc, #128]	; (800d640 <__kernel_cos+0xd0>)
 800d5c0:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d5c4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d638 <__kernel_cos+0xc8>
 800d5c8:	4299      	cmp	r1, r3
 800d5ca:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d5ce:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d5d2:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d5d6:	dc04      	bgt.n	800d5e2 <__kernel_cos+0x72>
 800d5d8:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d5dc:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d5e0:	4770      	bx	lr
 800d5e2:	4b18      	ldr	r3, [pc, #96]	; (800d644 <__kernel_cos+0xd4>)
 800d5e4:	4299      	cmp	r1, r3
 800d5e6:	dc0d      	bgt.n	800d604 <__kernel_cos+0x94>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d5ee:	ec43 2b15 	vmov	d5, r2, r3
 800d5f2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d5f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d5fa:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d5fe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d602:	4770      	bx	lr
 800d604:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d608:	e7f3      	b.n	800d5f2 <__kernel_cos+0x82>
 800d60a:	eeb0 0b47 	vmov.f64	d0, d7
 800d60e:	4770      	bx	lr
 800d610:	be8838d4 	.word	0xbe8838d4
 800d614:	bda8fae9 	.word	0xbda8fae9
 800d618:	bdb4b1c4 	.word	0xbdb4b1c4
 800d61c:	3e21ee9e 	.word	0x3e21ee9e
 800d620:	809c52ad 	.word	0x809c52ad
 800d624:	be927e4f 	.word	0xbe927e4f
 800d628:	19cb1590 	.word	0x19cb1590
 800d62c:	3efa01a0 	.word	0x3efa01a0
 800d630:	16c15177 	.word	0x16c15177
 800d634:	bf56c16c 	.word	0xbf56c16c
 800d638:	5555554c 	.word	0x5555554c
 800d63c:	3fa55555 	.word	0x3fa55555
 800d640:	3fd33332 	.word	0x3fd33332
 800d644:	3fe90000 	.word	0x3fe90000

0800d648 <__kernel_rem_pio2>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	ed2d 8b06 	vpush	{d8-d10}
 800d650:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d654:	469b      	mov	fp, r3
 800d656:	460e      	mov	r6, r1
 800d658:	4bc7      	ldr	r3, [pc, #796]	; (800d978 <__kernel_rem_pio2+0x330>)
 800d65a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d65c:	9002      	str	r0, [sp, #8]
 800d65e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d662:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d664:	1ed1      	subs	r1, r2, #3
 800d666:	2318      	movs	r3, #24
 800d668:	f06f 0417 	mvn.w	r4, #23
 800d66c:	fb91 f1f3 	sdiv	r1, r1, r3
 800d670:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d674:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d678:	fb01 4404 	mla	r4, r1, r4, r4
 800d67c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d960 <__kernel_rem_pio2+0x318>
 800d680:	4414      	add	r4, r2
 800d682:	eba1 050a 	sub.w	r5, r1, sl
 800d686:	aa1a      	add	r2, sp, #104	; 0x68
 800d688:	eb09 070a 	add.w	r7, r9, sl
 800d68c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d690:	4696      	mov	lr, r2
 800d692:	2300      	movs	r3, #0
 800d694:	42bb      	cmp	r3, r7
 800d696:	dd0f      	ble.n	800d6b8 <__kernel_rem_pio2+0x70>
 800d698:	af6a      	add	r7, sp, #424	; 0x1a8
 800d69a:	2200      	movs	r2, #0
 800d69c:	454a      	cmp	r2, r9
 800d69e:	dc28      	bgt.n	800d6f2 <__kernel_rem_pio2+0xaa>
 800d6a0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d6a4:	eb0b 0302 	add.w	r3, fp, r2
 800d6a8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d6ac:	9d02      	ldr	r5, [sp, #8]
 800d6ae:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d960 <__kernel_rem_pio2+0x318>
 800d6b2:	f04f 0c00 	mov.w	ip, #0
 800d6b6:	e016      	b.n	800d6e6 <__kernel_rem_pio2+0x9e>
 800d6b8:	42dd      	cmn	r5, r3
 800d6ba:	d409      	bmi.n	800d6d0 <__kernel_rem_pio2+0x88>
 800d6bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d6c0:	ee07 2a90 	vmov	s15, r2
 800d6c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6c8:	ecae 7b02 	vstmia	lr!, {d7}
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	e7e1      	b.n	800d694 <__kernel_rem_pio2+0x4c>
 800d6d0:	eeb0 7b46 	vmov.f64	d7, d6
 800d6d4:	e7f8      	b.n	800d6c8 <__kernel_rem_pio2+0x80>
 800d6d6:	ecb5 5b02 	vldmia	r5!, {d5}
 800d6da:	ed33 6b02 	vldmdb	r3!, {d6}
 800d6de:	f10c 0c01 	add.w	ip, ip, #1
 800d6e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d6e6:	45d4      	cmp	ip, sl
 800d6e8:	ddf5      	ble.n	800d6d6 <__kernel_rem_pio2+0x8e>
 800d6ea:	eca7 7b02 	vstmia	r7!, {d7}
 800d6ee:	3201      	adds	r2, #1
 800d6f0:	e7d4      	b.n	800d69c <__kernel_rem_pio2+0x54>
 800d6f2:	ab06      	add	r3, sp, #24
 800d6f4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d6f8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d968 <__kernel_rem_pio2+0x320>
 800d6fc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d970 <__kernel_rem_pio2+0x328>
 800d700:	9304      	str	r3, [sp, #16]
 800d702:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d706:	9303      	str	r3, [sp, #12]
 800d708:	464d      	mov	r5, r9
 800d70a:	ab92      	add	r3, sp, #584	; 0x248
 800d70c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d710:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d714:	3f01      	subs	r7, #1
 800d716:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d71a:	00ff      	lsls	r7, r7, #3
 800d71c:	ab92      	add	r3, sp, #584	; 0x248
 800d71e:	19da      	adds	r2, r3, r7
 800d720:	3a98      	subs	r2, #152	; 0x98
 800d722:	2300      	movs	r3, #0
 800d724:	1ae9      	subs	r1, r5, r3
 800d726:	2900      	cmp	r1, #0
 800d728:	dc4e      	bgt.n	800d7c8 <__kernel_rem_pio2+0x180>
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fc00 	bl	800df30 <scalbn>
 800d730:	eeb0 8b40 	vmov.f64	d8, d0
 800d734:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d738:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d73c:	f000 fb7c 	bl	800de38 <floor>
 800d740:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d744:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d748:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d74c:	2c00      	cmp	r4, #0
 800d74e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d752:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d756:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d75a:	dd4a      	ble.n	800d7f2 <__kernel_rem_pio2+0x1aa>
 800d75c:	1e69      	subs	r1, r5, #1
 800d75e:	ab06      	add	r3, sp, #24
 800d760:	f1c4 0018 	rsb	r0, r4, #24
 800d764:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d768:	9a01      	ldr	r2, [sp, #4]
 800d76a:	fa4c f300 	asr.w	r3, ip, r0
 800d76e:	441a      	add	r2, r3
 800d770:	4083      	lsls	r3, r0
 800d772:	9201      	str	r2, [sp, #4]
 800d774:	ebac 0203 	sub.w	r2, ip, r3
 800d778:	ab06      	add	r3, sp, #24
 800d77a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d77e:	f1c4 0317 	rsb	r3, r4, #23
 800d782:	fa42 f803 	asr.w	r8, r2, r3
 800d786:	f1b8 0f00 	cmp.w	r8, #0
 800d78a:	dd43      	ble.n	800d814 <__kernel_rem_pio2+0x1cc>
 800d78c:	9b01      	ldr	r3, [sp, #4]
 800d78e:	2000      	movs	r0, #0
 800d790:	3301      	adds	r3, #1
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	4601      	mov	r1, r0
 800d796:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d79a:	4285      	cmp	r5, r0
 800d79c:	dc6e      	bgt.n	800d87c <__kernel_rem_pio2+0x234>
 800d79e:	2c00      	cmp	r4, #0
 800d7a0:	dd04      	ble.n	800d7ac <__kernel_rem_pio2+0x164>
 800d7a2:	2c01      	cmp	r4, #1
 800d7a4:	d07f      	beq.n	800d8a6 <__kernel_rem_pio2+0x25e>
 800d7a6:	2c02      	cmp	r4, #2
 800d7a8:	f000 8087 	beq.w	800d8ba <__kernel_rem_pio2+0x272>
 800d7ac:	f1b8 0f02 	cmp.w	r8, #2
 800d7b0:	d130      	bne.n	800d814 <__kernel_rem_pio2+0x1cc>
 800d7b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d7b6:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d7ba:	b359      	cbz	r1, 800d814 <__kernel_rem_pio2+0x1cc>
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f000 fbb7 	bl	800df30 <scalbn>
 800d7c2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d7c6:	e025      	b.n	800d814 <__kernel_rem_pio2+0x1cc>
 800d7c8:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d7cc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d7d0:	a806      	add	r0, sp, #24
 800d7d2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d7d6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d7da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d7de:	ee10 1a10 	vmov	r1, s0
 800d7e2:	ed32 0b02 	vldmdb	r2!, {d0}
 800d7e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d7ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	e798      	b.n	800d724 <__kernel_rem_pio2+0xdc>
 800d7f2:	d106      	bne.n	800d802 <__kernel_rem_pio2+0x1ba>
 800d7f4:	1e6b      	subs	r3, r5, #1
 800d7f6:	aa06      	add	r2, sp, #24
 800d7f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d7fc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d800:	e7c1      	b.n	800d786 <__kernel_rem_pio2+0x13e>
 800d802:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d806:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80e:	da32      	bge.n	800d876 <__kernel_rem_pio2+0x22e>
 800d810:	f04f 0800 	mov.w	r8, #0
 800d814:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d81c:	f040 80b0 	bne.w	800d980 <__kernel_rem_pio2+0x338>
 800d820:	1e6b      	subs	r3, r5, #1
 800d822:	4618      	mov	r0, r3
 800d824:	2200      	movs	r2, #0
 800d826:	4548      	cmp	r0, r9
 800d828:	da4e      	bge.n	800d8c8 <__kernel_rem_pio2+0x280>
 800d82a:	2a00      	cmp	r2, #0
 800d82c:	f000 8088 	beq.w	800d940 <__kernel_rem_pio2+0x2f8>
 800d830:	aa06      	add	r2, sp, #24
 800d832:	3c18      	subs	r4, #24
 800d834:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d838:	2900      	cmp	r1, #0
 800d83a:	f000 808e 	beq.w	800d95a <__kernel_rem_pio2+0x312>
 800d83e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d842:	4620      	mov	r0, r4
 800d844:	9302      	str	r3, [sp, #8]
 800d846:	f000 fb73 	bl	800df30 <scalbn>
 800d84a:	9b02      	ldr	r3, [sp, #8]
 800d84c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d84e:	00d9      	lsls	r1, r3, #3
 800d850:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d968 <__kernel_rem_pio2+0x320>
 800d854:	1850      	adds	r0, r2, r1
 800d856:	f100 0508 	add.w	r5, r0, #8
 800d85a:	461c      	mov	r4, r3
 800d85c:	2c00      	cmp	r4, #0
 800d85e:	f280 80bd 	bge.w	800d9dc <__kernel_rem_pio2+0x394>
 800d862:	2500      	movs	r5, #0
 800d864:	1b5c      	subs	r4, r3, r5
 800d866:	2c00      	cmp	r4, #0
 800d868:	f2c0 80dd 	blt.w	800da26 <__kernel_rem_pio2+0x3de>
 800d86c:	4f43      	ldr	r7, [pc, #268]	; (800d97c <__kernel_rem_pio2+0x334>)
 800d86e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d960 <__kernel_rem_pio2+0x318>
 800d872:	2400      	movs	r4, #0
 800d874:	e0cb      	b.n	800da0e <__kernel_rem_pio2+0x3c6>
 800d876:	f04f 0802 	mov.w	r8, #2
 800d87a:	e787      	b.n	800d78c <__kernel_rem_pio2+0x144>
 800d87c:	ab06      	add	r3, sp, #24
 800d87e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d882:	b949      	cbnz	r1, 800d898 <__kernel_rem_pio2+0x250>
 800d884:	b12b      	cbz	r3, 800d892 <__kernel_rem_pio2+0x24a>
 800d886:	aa06      	add	r2, sp, #24
 800d888:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d88c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d890:	2301      	movs	r3, #1
 800d892:	3001      	adds	r0, #1
 800d894:	4619      	mov	r1, r3
 800d896:	e780      	b.n	800d79a <__kernel_rem_pio2+0x152>
 800d898:	aa06      	add	r2, sp, #24
 800d89a:	ebac 0303 	sub.w	r3, ip, r3
 800d89e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	e7f5      	b.n	800d892 <__kernel_rem_pio2+0x24a>
 800d8a6:	1e68      	subs	r0, r5, #1
 800d8a8:	ab06      	add	r3, sp, #24
 800d8aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d8ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d8b2:	aa06      	add	r2, sp, #24
 800d8b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d8b8:	e778      	b.n	800d7ac <__kernel_rem_pio2+0x164>
 800d8ba:	1e68      	subs	r0, r5, #1
 800d8bc:	ab06      	add	r3, sp, #24
 800d8be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d8c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8c6:	e7f4      	b.n	800d8b2 <__kernel_rem_pio2+0x26a>
 800d8c8:	a906      	add	r1, sp, #24
 800d8ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d8ce:	3801      	subs	r0, #1
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	e7a8      	b.n	800d826 <__kernel_rem_pio2+0x1de>
 800d8d4:	f10c 0c01 	add.w	ip, ip, #1
 800d8d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8dc:	2a00      	cmp	r2, #0
 800d8de:	d0f9      	beq.n	800d8d4 <__kernel_rem_pio2+0x28c>
 800d8e0:	eb0b 0305 	add.w	r3, fp, r5
 800d8e4:	aa1a      	add	r2, sp, #104	; 0x68
 800d8e6:	00db      	lsls	r3, r3, #3
 800d8e8:	1898      	adds	r0, r3, r2
 800d8ea:	3008      	adds	r0, #8
 800d8ec:	1c69      	adds	r1, r5, #1
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	4465      	add	r5, ip
 800d8f4:	9005      	str	r0, [sp, #20]
 800d8f6:	428d      	cmp	r5, r1
 800d8f8:	f6ff af07 	blt.w	800d70a <__kernel_rem_pio2+0xc2>
 800d8fc:	a81a      	add	r0, sp, #104	; 0x68
 800d8fe:	eb02 0c03 	add.w	ip, r2, r3
 800d902:	4484      	add	ip, r0
 800d904:	9803      	ldr	r0, [sp, #12]
 800d906:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d90a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d90e:	9001      	str	r0, [sp, #4]
 800d910:	ee07 0a90 	vmov	s15, r0
 800d914:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d918:	9805      	ldr	r0, [sp, #20]
 800d91a:	ed8c 7b00 	vstr	d7, [ip]
 800d91e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d960 <__kernel_rem_pio2+0x318>
 800d922:	eb00 0802 	add.w	r8, r0, r2
 800d926:	f04f 0c00 	mov.w	ip, #0
 800d92a:	45d4      	cmp	ip, sl
 800d92c:	dd0c      	ble.n	800d948 <__kernel_rem_pio2+0x300>
 800d92e:	eb02 0c07 	add.w	ip, r2, r7
 800d932:	a86a      	add	r0, sp, #424	; 0x1a8
 800d934:	4484      	add	ip, r0
 800d936:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d93a:	3101      	adds	r1, #1
 800d93c:	3208      	adds	r2, #8
 800d93e:	e7da      	b.n	800d8f6 <__kernel_rem_pio2+0x2ae>
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	f04f 0c01 	mov.w	ip, #1
 800d946:	e7c7      	b.n	800d8d8 <__kernel_rem_pio2+0x290>
 800d948:	ecbe 5b02 	vldmia	lr!, {d5}
 800d94c:	ed38 6b02 	vldmdb	r8!, {d6}
 800d950:	f10c 0c01 	add.w	ip, ip, #1
 800d954:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d958:	e7e7      	b.n	800d92a <__kernel_rem_pio2+0x2e2>
 800d95a:	3b01      	subs	r3, #1
 800d95c:	e768      	b.n	800d830 <__kernel_rem_pio2+0x1e8>
 800d95e:	bf00      	nop
	...
 800d96c:	3e700000 	.word	0x3e700000
 800d970:	00000000 	.word	0x00000000
 800d974:	41700000 	.word	0x41700000
 800d978:	0800e260 	.word	0x0800e260
 800d97c:	0800e220 	.word	0x0800e220
 800d980:	4260      	negs	r0, r4
 800d982:	eeb0 0b48 	vmov.f64	d0, d8
 800d986:	f000 fad3 	bl	800df30 <scalbn>
 800d98a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800db68 <__kernel_rem_pio2+0x520>
 800d98e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d996:	db18      	blt.n	800d9ca <__kernel_rem_pio2+0x382>
 800d998:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800db70 <__kernel_rem_pio2+0x528>
 800d99c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d9a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d9a4:	aa06      	add	r2, sp, #24
 800d9a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d9aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d9ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d9b2:	a906      	add	r1, sp, #24
 800d9b4:	ee10 3a10 	vmov	r3, s0
 800d9b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d9bc:	1c6b      	adds	r3, r5, #1
 800d9be:	ee17 2a10 	vmov	r2, s14
 800d9c2:	3418      	adds	r4, #24
 800d9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d9c8:	e739      	b.n	800d83e <__kernel_rem_pio2+0x1f6>
 800d9ca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d9ce:	aa06      	add	r2, sp, #24
 800d9d0:	ee10 3a10 	vmov	r3, s0
 800d9d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d9d8:	462b      	mov	r3, r5
 800d9da:	e730      	b.n	800d83e <__kernel_rem_pio2+0x1f6>
 800d9dc:	aa06      	add	r2, sp, #24
 800d9de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d9e2:	9202      	str	r2, [sp, #8]
 800d9e4:	ee07 2a90 	vmov	s15, r2
 800d9e8:	3c01      	subs	r4, #1
 800d9ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d9f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d9f6:	ed25 7b02 	vstmdb	r5!, {d7}
 800d9fa:	e72f      	b.n	800d85c <__kernel_rem_pio2+0x214>
 800d9fc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800da00:	ecb7 5b02 	vldmia	r7!, {d5}
 800da04:	ed9c 6b00 	vldr	d6, [ip]
 800da08:	3401      	adds	r4, #1
 800da0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800da0e:	454c      	cmp	r4, r9
 800da10:	dc01      	bgt.n	800da16 <__kernel_rem_pio2+0x3ce>
 800da12:	42a5      	cmp	r5, r4
 800da14:	daf2      	bge.n	800d9fc <__kernel_rem_pio2+0x3b4>
 800da16:	aa42      	add	r2, sp, #264	; 0x108
 800da18:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800da1c:	ed84 7b00 	vstr	d7, [r4]
 800da20:	3501      	adds	r5, #1
 800da22:	3808      	subs	r0, #8
 800da24:	e71e      	b.n	800d864 <__kernel_rem_pio2+0x21c>
 800da26:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800da28:	2a03      	cmp	r2, #3
 800da2a:	d84e      	bhi.n	800daca <__kernel_rem_pio2+0x482>
 800da2c:	e8df f002 	tbb	[pc, r2]
 800da30:	021f1f3e 	.word	0x021f1f3e
 800da34:	3108      	adds	r1, #8
 800da36:	aa42      	add	r2, sp, #264	; 0x108
 800da38:	4411      	add	r1, r2
 800da3a:	4608      	mov	r0, r1
 800da3c:	461c      	mov	r4, r3
 800da3e:	2c00      	cmp	r4, #0
 800da40:	dc61      	bgt.n	800db06 <__kernel_rem_pio2+0x4be>
 800da42:	4608      	mov	r0, r1
 800da44:	461c      	mov	r4, r3
 800da46:	2c01      	cmp	r4, #1
 800da48:	dc6d      	bgt.n	800db26 <__kernel_rem_pio2+0x4de>
 800da4a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800db78 <__kernel_rem_pio2+0x530>
 800da4e:	2b01      	cmp	r3, #1
 800da50:	dc79      	bgt.n	800db46 <__kernel_rem_pio2+0x4fe>
 800da52:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800da56:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800da5a:	f1b8 0f00 	cmp.w	r8, #0
 800da5e:	d178      	bne.n	800db52 <__kernel_rem_pio2+0x50a>
 800da60:	ed86 5b00 	vstr	d5, [r6]
 800da64:	ed86 6b02 	vstr	d6, [r6, #8]
 800da68:	ed86 7b04 	vstr	d7, [r6, #16]
 800da6c:	e02d      	b.n	800daca <__kernel_rem_pio2+0x482>
 800da6e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800db78 <__kernel_rem_pio2+0x530>
 800da72:	3108      	adds	r1, #8
 800da74:	aa42      	add	r2, sp, #264	; 0x108
 800da76:	4411      	add	r1, r2
 800da78:	4618      	mov	r0, r3
 800da7a:	2800      	cmp	r0, #0
 800da7c:	da34      	bge.n	800dae8 <__kernel_rem_pio2+0x4a0>
 800da7e:	f1b8 0f00 	cmp.w	r8, #0
 800da82:	d037      	beq.n	800daf4 <__kernel_rem_pio2+0x4ac>
 800da84:	eeb1 7b46 	vneg.f64	d7, d6
 800da88:	ed86 7b00 	vstr	d7, [r6]
 800da8c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800da90:	a844      	add	r0, sp, #272	; 0x110
 800da92:	2101      	movs	r1, #1
 800da94:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da98:	428b      	cmp	r3, r1
 800da9a:	da2e      	bge.n	800dafa <__kernel_rem_pio2+0x4b2>
 800da9c:	f1b8 0f00 	cmp.w	r8, #0
 800daa0:	d001      	beq.n	800daa6 <__kernel_rem_pio2+0x45e>
 800daa2:	eeb1 7b47 	vneg.f64	d7, d7
 800daa6:	ed86 7b02 	vstr	d7, [r6, #8]
 800daaa:	e00e      	b.n	800daca <__kernel_rem_pio2+0x482>
 800daac:	aa92      	add	r2, sp, #584	; 0x248
 800daae:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800db78 <__kernel_rem_pio2+0x530>
 800dab2:	4411      	add	r1, r2
 800dab4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800dab8:	2b00      	cmp	r3, #0
 800daba:	da0f      	bge.n	800dadc <__kernel_rem_pio2+0x494>
 800dabc:	f1b8 0f00 	cmp.w	r8, #0
 800dac0:	d001      	beq.n	800dac6 <__kernel_rem_pio2+0x47e>
 800dac2:	eeb1 7b47 	vneg.f64	d7, d7
 800dac6:	ed86 7b00 	vstr	d7, [r6]
 800daca:	9b01      	ldr	r3, [sp, #4]
 800dacc:	f003 0007 	and.w	r0, r3, #7
 800dad0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800dad4:	ecbd 8b06 	vpop	{d8-d10}
 800dad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dadc:	ed31 6b02 	vldmdb	r1!, {d6}
 800dae0:	3b01      	subs	r3, #1
 800dae2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dae6:	e7e7      	b.n	800dab8 <__kernel_rem_pio2+0x470>
 800dae8:	ed31 7b02 	vldmdb	r1!, {d7}
 800daec:	3801      	subs	r0, #1
 800daee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800daf2:	e7c2      	b.n	800da7a <__kernel_rem_pio2+0x432>
 800daf4:	eeb0 7b46 	vmov.f64	d7, d6
 800daf8:	e7c6      	b.n	800da88 <__kernel_rem_pio2+0x440>
 800dafa:	ecb0 6b02 	vldmia	r0!, {d6}
 800dafe:	3101      	adds	r1, #1
 800db00:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db04:	e7c8      	b.n	800da98 <__kernel_rem_pio2+0x450>
 800db06:	ed10 7b04 	vldr	d7, [r0, #-16]
 800db0a:	ed30 5b02 	vldmdb	r0!, {d5}
 800db0e:	3c01      	subs	r4, #1
 800db10:	ee37 6b05 	vadd.f64	d6, d7, d5
 800db14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db18:	ed00 6b02 	vstr	d6, [r0, #-8]
 800db1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800db20:	ed80 7b00 	vstr	d7, [r0]
 800db24:	e78b      	b.n	800da3e <__kernel_rem_pio2+0x3f6>
 800db26:	ed10 7b04 	vldr	d7, [r0, #-16]
 800db2a:	ed30 5b02 	vldmdb	r0!, {d5}
 800db2e:	3c01      	subs	r4, #1
 800db30:	ee37 6b05 	vadd.f64	d6, d7, d5
 800db34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800db38:	ed00 6b02 	vstr	d6, [r0, #-8]
 800db3c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800db40:	ed80 7b00 	vstr	d7, [r0]
 800db44:	e77f      	b.n	800da46 <__kernel_rem_pio2+0x3fe>
 800db46:	ed31 6b02 	vldmdb	r1!, {d6}
 800db4a:	3b01      	subs	r3, #1
 800db4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800db50:	e77d      	b.n	800da4e <__kernel_rem_pio2+0x406>
 800db52:	eeb1 5b45 	vneg.f64	d5, d5
 800db56:	eeb1 6b46 	vneg.f64	d6, d6
 800db5a:	ed86 5b00 	vstr	d5, [r6]
 800db5e:	eeb1 7b47 	vneg.f64	d7, d7
 800db62:	ed86 6b02 	vstr	d6, [r6, #8]
 800db66:	e77f      	b.n	800da68 <__kernel_rem_pio2+0x420>
 800db68:	00000000 	.word	0x00000000
 800db6c:	41700000 	.word	0x41700000
 800db70:	00000000 	.word	0x00000000
 800db74:	3e700000 	.word	0x3e700000
	...

0800db80 <__kernel_sin>:
 800db80:	ee10 3a90 	vmov	r3, s1
 800db84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db88:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800db8c:	da04      	bge.n	800db98 <__kernel_sin+0x18>
 800db8e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800db92:	ee17 3a90 	vmov	r3, s15
 800db96:	b35b      	cbz	r3, 800dbf0 <__kernel_sin+0x70>
 800db98:	ee20 6b00 	vmul.f64	d6, d0, d0
 800db9c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800dba0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800dbf8 <__kernel_sin+0x78>
 800dba4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dc00 <__kernel_sin+0x80>
 800dba8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dbac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dc08 <__kernel_sin+0x88>
 800dbb0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dbb4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dc10 <__kernel_sin+0x90>
 800dbb8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dbbc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dc18 <__kernel_sin+0x98>
 800dbc0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dbc4:	b930      	cbnz	r0, 800dbd4 <__kernel_sin+0x54>
 800dbc6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dc20 <__kernel_sin+0xa0>
 800dbca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dbce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800dbd2:	4770      	bx	lr
 800dbd4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800dbd8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dbdc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800dbe0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800dbe4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800dc28 <__kernel_sin+0xa8>
 800dbe8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800dbec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	f3af 8000 	nop.w
 800dbf8:	5acfd57c 	.word	0x5acfd57c
 800dbfc:	3de5d93a 	.word	0x3de5d93a
 800dc00:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc04:	be5ae5e6 	.word	0xbe5ae5e6
 800dc08:	57b1fe7d 	.word	0x57b1fe7d
 800dc0c:	3ec71de3 	.word	0x3ec71de3
 800dc10:	19c161d5 	.word	0x19c161d5
 800dc14:	bf2a01a0 	.word	0xbf2a01a0
 800dc18:	1110f8a6 	.word	0x1110f8a6
 800dc1c:	3f811111 	.word	0x3f811111
 800dc20:	55555549 	.word	0x55555549
 800dc24:	bfc55555 	.word	0xbfc55555
 800dc28:	55555549 	.word	0x55555549
 800dc2c:	3fc55555 	.word	0x3fc55555

0800dc30 <atan>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	eeb0 7b40 	vmov.f64	d7, d0
 800dc36:	ee17 5a90 	vmov	r5, s15
 800dc3a:	4b73      	ldr	r3, [pc, #460]	; (800de08 <atan+0x1d8>)
 800dc3c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dc40:	429c      	cmp	r4, r3
 800dc42:	dd13      	ble.n	800dc6c <atan+0x3c>
 800dc44:	4b71      	ldr	r3, [pc, #452]	; (800de0c <atan+0x1dc>)
 800dc46:	429c      	cmp	r4, r3
 800dc48:	dc03      	bgt.n	800dc52 <atan+0x22>
 800dc4a:	d107      	bne.n	800dc5c <atan+0x2c>
 800dc4c:	ee10 3a10 	vmov	r3, s0
 800dc50:	b123      	cbz	r3, 800dc5c <atan+0x2c>
 800dc52:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dc56:	eeb0 0b47 	vmov.f64	d0, d7
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800dd98 <atan+0x168>
 800dc60:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800dda0 <atan+0x170>
 800dc64:	2d00      	cmp	r5, #0
 800dc66:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800dc6a:	e7f4      	b.n	800dc56 <atan+0x26>
 800dc6c:	4b68      	ldr	r3, [pc, #416]	; (800de10 <atan+0x1e0>)
 800dc6e:	429c      	cmp	r4, r3
 800dc70:	dc11      	bgt.n	800dc96 <atan+0x66>
 800dc72:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dc76:	429c      	cmp	r4, r3
 800dc78:	dc0a      	bgt.n	800dc90 <atan+0x60>
 800dc7a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800dc7e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800dda8 <atan+0x178>
 800dc82:	ee30 6b06 	vadd.f64	d6, d0, d6
 800dc86:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8e:	dce2      	bgt.n	800dc56 <atan+0x26>
 800dc90:	f04f 33ff 	mov.w	r3, #4294967295
 800dc94:	e013      	b.n	800dcbe <atan+0x8e>
 800dc96:	f000 f8c5 	bl	800de24 <fabs>
 800dc9a:	4b5e      	ldr	r3, [pc, #376]	; (800de14 <atan+0x1e4>)
 800dc9c:	429c      	cmp	r4, r3
 800dc9e:	dc4f      	bgt.n	800dd40 <atan+0x110>
 800dca0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dca4:	429c      	cmp	r4, r3
 800dca6:	dc41      	bgt.n	800dd2c <atan+0xfc>
 800dca8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800dcac:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dcb6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dcba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dcbe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ddb0 <atan+0x180>
 800dcc2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800dcc6:	ee24 5b04 	vmul.f64	d5, d4, d4
 800dcca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ddb8 <atan+0x188>
 800dcce:	eea5 3b06 	vfma.f64	d3, d5, d6
 800dcd2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800ddc0 <atan+0x190>
 800dcd6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dcda:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ddc8 <atan+0x198>
 800dcde:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dce2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800ddd0 <atan+0x1a0>
 800dce6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dcea:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800ddd8 <atan+0x1a8>
 800dcee:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dde0 <atan+0x1b0>
 800dcf2:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dcf6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dde8 <atan+0x1b8>
 800dcfa:	eea5 2b06 	vfma.f64	d2, d5, d6
 800dcfe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ddf0 <atan+0x1c0>
 800dd02:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dd06:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800ddf8 <atan+0x1c8>
 800dd0a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800dd0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800de00 <atan+0x1d0>
 800dd12:	1c5a      	adds	r2, r3, #1
 800dd14:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dd18:	ee26 6b05 	vmul.f64	d6, d6, d5
 800dd1c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800dd20:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dd24:	d121      	bne.n	800dd6a <atan+0x13a>
 800dd26:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd2a:	e794      	b.n	800dc56 <atan+0x26>
 800dd2c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dd30:	2301      	movs	r3, #1
 800dd32:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dd36:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dd3a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dd3e:	e7be      	b.n	800dcbe <atan+0x8e>
 800dd40:	4b35      	ldr	r3, [pc, #212]	; (800de18 <atan+0x1e8>)
 800dd42:	429c      	cmp	r4, r3
 800dd44:	dc0b      	bgt.n	800dd5e <atan+0x12e>
 800dd46:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dd4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dd4e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800dd52:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dd56:	2302      	movs	r3, #2
 800dd58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dd5c:	e7af      	b.n	800dcbe <atan+0x8e>
 800dd5e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dd62:	2303      	movs	r3, #3
 800dd64:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dd68:	e7a9      	b.n	800dcbe <atan+0x8e>
 800dd6a:	4a2c      	ldr	r2, [pc, #176]	; (800de1c <atan+0x1ec>)
 800dd6c:	492c      	ldr	r1, [pc, #176]	; (800de20 <atan+0x1f0>)
 800dd6e:	00db      	lsls	r3, r3, #3
 800dd70:	441a      	add	r2, r3
 800dd72:	440b      	add	r3, r1
 800dd74:	ed93 5b00 	vldr	d5, [r3]
 800dd78:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd80:	ed92 6b00 	vldr	d6, [r2]
 800dd84:	2d00      	cmp	r5, #0
 800dd86:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd8a:	bfb8      	it	lt
 800dd8c:	eeb1 7b47 	vneglt.f64	d7, d7
 800dd90:	e761      	b.n	800dc56 <atan+0x26>
 800dd92:	bf00      	nop
 800dd94:	f3af 8000 	nop.w
 800dd98:	54442d18 	.word	0x54442d18
 800dd9c:	bff921fb 	.word	0xbff921fb
 800dda0:	54442d18 	.word	0x54442d18
 800dda4:	3ff921fb 	.word	0x3ff921fb
 800dda8:	8800759c 	.word	0x8800759c
 800ddac:	7e37e43c 	.word	0x7e37e43c
 800ddb0:	e322da11 	.word	0xe322da11
 800ddb4:	3f90ad3a 	.word	0x3f90ad3a
 800ddb8:	24760deb 	.word	0x24760deb
 800ddbc:	3fa97b4b 	.word	0x3fa97b4b
 800ddc0:	a0d03d51 	.word	0xa0d03d51
 800ddc4:	3fb10d66 	.word	0x3fb10d66
 800ddc8:	c54c206e 	.word	0xc54c206e
 800ddcc:	3fb745cd 	.word	0x3fb745cd
 800ddd0:	920083ff 	.word	0x920083ff
 800ddd4:	3fc24924 	.word	0x3fc24924
 800ddd8:	5555550d 	.word	0x5555550d
 800dddc:	3fd55555 	.word	0x3fd55555
 800dde0:	52defd9a 	.word	0x52defd9a
 800dde4:	bfadde2d 	.word	0xbfadde2d
 800dde8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ddec:	bfa2b444 	.word	0xbfa2b444
 800ddf0:	af749a6d 	.word	0xaf749a6d
 800ddf4:	bfb3b0f2 	.word	0xbfb3b0f2
 800ddf8:	fe231671 	.word	0xfe231671
 800ddfc:	bfbc71c6 	.word	0xbfbc71c6
 800de00:	9998ebc4 	.word	0x9998ebc4
 800de04:	bfc99999 	.word	0xbfc99999
 800de08:	440fffff 	.word	0x440fffff
 800de0c:	7ff00000 	.word	0x7ff00000
 800de10:	3fdbffff 	.word	0x3fdbffff
 800de14:	3ff2ffff 	.word	0x3ff2ffff
 800de18:	40037fff 	.word	0x40037fff
 800de1c:	0800e270 	.word	0x0800e270
 800de20:	0800e290 	.word	0x0800e290

0800de24 <fabs>:
 800de24:	ec51 0b10 	vmov	r0, r1, d0
 800de28:	ee10 2a10 	vmov	r2, s0
 800de2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de30:	ec43 2b10 	vmov	d0, r2, r3
 800de34:	4770      	bx	lr
	...

0800de38 <floor>:
 800de38:	ee10 1a90 	vmov	r1, s1
 800de3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de40:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800de44:	2b13      	cmp	r3, #19
 800de46:	b530      	push	{r4, r5, lr}
 800de48:	ee10 0a10 	vmov	r0, s0
 800de4c:	ee10 5a10 	vmov	r5, s0
 800de50:	dc33      	bgt.n	800deba <floor+0x82>
 800de52:	2b00      	cmp	r3, #0
 800de54:	da17      	bge.n	800de86 <floor+0x4e>
 800de56:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800df18 <floor+0xe0>
 800de5a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de5e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de66:	dd09      	ble.n	800de7c <floor+0x44>
 800de68:	2900      	cmp	r1, #0
 800de6a:	da50      	bge.n	800df0e <floor+0xd6>
 800de6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de70:	4a2b      	ldr	r2, [pc, #172]	; (800df20 <floor+0xe8>)
 800de72:	4303      	orrs	r3, r0
 800de74:	2000      	movs	r0, #0
 800de76:	4283      	cmp	r3, r0
 800de78:	bf18      	it	ne
 800de7a:	4611      	movne	r1, r2
 800de7c:	460b      	mov	r3, r1
 800de7e:	4602      	mov	r2, r0
 800de80:	ec43 2b10 	vmov	d0, r2, r3
 800de84:	e020      	b.n	800dec8 <floor+0x90>
 800de86:	4a27      	ldr	r2, [pc, #156]	; (800df24 <floor+0xec>)
 800de88:	411a      	asrs	r2, r3
 800de8a:	ea01 0402 	and.w	r4, r1, r2
 800de8e:	4304      	orrs	r4, r0
 800de90:	d01a      	beq.n	800dec8 <floor+0x90>
 800de92:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800df18 <floor+0xe0>
 800de96:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de9a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea2:	ddeb      	ble.n	800de7c <floor+0x44>
 800dea4:	2900      	cmp	r1, #0
 800dea6:	bfbe      	ittt	lt
 800dea8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800deac:	fa40 f303 	asrlt.w	r3, r0, r3
 800deb0:	18c9      	addlt	r1, r1, r3
 800deb2:	ea21 0102 	bic.w	r1, r1, r2
 800deb6:	2000      	movs	r0, #0
 800deb8:	e7e0      	b.n	800de7c <floor+0x44>
 800deba:	2b33      	cmp	r3, #51	; 0x33
 800debc:	dd05      	ble.n	800deca <floor+0x92>
 800debe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dec2:	d101      	bne.n	800dec8 <floor+0x90>
 800dec4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dec8:	bd30      	pop	{r4, r5, pc}
 800deca:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	40e2      	lsrs	r2, r4
 800ded4:	4202      	tst	r2, r0
 800ded6:	d0f7      	beq.n	800dec8 <floor+0x90>
 800ded8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800df18 <floor+0xe0>
 800dedc:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dee0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee8:	ddc8      	ble.n	800de7c <floor+0x44>
 800deea:	2900      	cmp	r1, #0
 800deec:	da02      	bge.n	800def4 <floor+0xbc>
 800deee:	2b14      	cmp	r3, #20
 800def0:	d103      	bne.n	800defa <floor+0xc2>
 800def2:	3101      	adds	r1, #1
 800def4:	ea20 0002 	bic.w	r0, r0, r2
 800def8:	e7c0      	b.n	800de7c <floor+0x44>
 800defa:	2401      	movs	r4, #1
 800defc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800df00:	fa04 f303 	lsl.w	r3, r4, r3
 800df04:	4418      	add	r0, r3
 800df06:	42a8      	cmp	r0, r5
 800df08:	bf38      	it	cc
 800df0a:	1909      	addcc	r1, r1, r4
 800df0c:	e7f2      	b.n	800def4 <floor+0xbc>
 800df0e:	2000      	movs	r0, #0
 800df10:	4601      	mov	r1, r0
 800df12:	e7b3      	b.n	800de7c <floor+0x44>
 800df14:	f3af 8000 	nop.w
 800df18:	8800759c 	.word	0x8800759c
 800df1c:	7e37e43c 	.word	0x7e37e43c
 800df20:	bff00000 	.word	0xbff00000
 800df24:	000fffff 	.word	0x000fffff

0800df28 <matherr>:
 800df28:	2000      	movs	r0, #0
 800df2a:	4770      	bx	lr
 800df2c:	0000      	movs	r0, r0
	...

0800df30 <scalbn>:
 800df30:	b500      	push	{lr}
 800df32:	ed2d 8b02 	vpush	{d8}
 800df36:	b083      	sub	sp, #12
 800df38:	ed8d 0b00 	vstr	d0, [sp]
 800df3c:	9b01      	ldr	r3, [sp, #4]
 800df3e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800df42:	b9a2      	cbnz	r2, 800df6e <scalbn+0x3e>
 800df44:	9a00      	ldr	r2, [sp, #0]
 800df46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df4a:	4313      	orrs	r3, r2
 800df4c:	d03a      	beq.n	800dfc4 <scalbn+0x94>
 800df4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e008 <scalbn+0xd8>
 800df52:	4b35      	ldr	r3, [pc, #212]	; (800e028 <scalbn+0xf8>)
 800df54:	ee20 7b07 	vmul.f64	d7, d0, d7
 800df58:	4298      	cmp	r0, r3
 800df5a:	ed8d 7b00 	vstr	d7, [sp]
 800df5e:	da11      	bge.n	800df84 <scalbn+0x54>
 800df60:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e010 <scalbn+0xe0>
 800df64:	ed9d 6b00 	vldr	d6, [sp]
 800df68:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df6c:	e007      	b.n	800df7e <scalbn+0x4e>
 800df6e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800df72:	428a      	cmp	r2, r1
 800df74:	d10a      	bne.n	800df8c <scalbn+0x5c>
 800df76:	ed9d 7b00 	vldr	d7, [sp]
 800df7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800df7e:	ed8d 7b00 	vstr	d7, [sp]
 800df82:	e01f      	b.n	800dfc4 <scalbn+0x94>
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800df8a:	3a36      	subs	r2, #54	; 0x36
 800df8c:	4402      	add	r2, r0
 800df8e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800df92:	428a      	cmp	r2, r1
 800df94:	dd0a      	ble.n	800dfac <scalbn+0x7c>
 800df96:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800e018 <scalbn+0xe8>
 800df9a:	eeb0 0b48 	vmov.f64	d0, d8
 800df9e:	ed9d 1b00 	vldr	d1, [sp]
 800dfa2:	f000 f843 	bl	800e02c <copysign>
 800dfa6:	ee20 7b08 	vmul.f64	d7, d0, d8
 800dfaa:	e7e8      	b.n	800df7e <scalbn+0x4e>
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	dd10      	ble.n	800dfd2 <scalbn+0xa2>
 800dfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfbc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dfc0:	e9cd 0100 	strd	r0, r1, [sp]
 800dfc4:	ed9d 0b00 	vldr	d0, [sp]
 800dfc8:	b003      	add	sp, #12
 800dfca:	ecbd 8b02 	vpop	{d8}
 800dfce:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfd2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dfd6:	da06      	bge.n	800dfe6 <scalbn+0xb6>
 800dfd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dfdc:	4298      	cmp	r0, r3
 800dfde:	dcda      	bgt.n	800df96 <scalbn+0x66>
 800dfe0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800e010 <scalbn+0xe0>
 800dfe4:	e7d9      	b.n	800df9a <scalbn+0x6a>
 800dfe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfee:	3236      	adds	r2, #54	; 0x36
 800dff0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dff4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dff8:	ec41 0b17 	vmov	d7, r0, r1
 800dffc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800e020 <scalbn+0xf0>
 800e000:	e7b2      	b.n	800df68 <scalbn+0x38>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	00000000 	.word	0x00000000
 800e00c:	43500000 	.word	0x43500000
 800e010:	c2f8f359 	.word	0xc2f8f359
 800e014:	01a56e1f 	.word	0x01a56e1f
 800e018:	8800759c 	.word	0x8800759c
 800e01c:	7e37e43c 	.word	0x7e37e43c
 800e020:	00000000 	.word	0x00000000
 800e024:	3c900000 	.word	0x3c900000
 800e028:	ffff3cb0 	.word	0xffff3cb0

0800e02c <copysign>:
 800e02c:	ec51 0b10 	vmov	r0, r1, d0
 800e030:	ee11 0a90 	vmov	r0, s3
 800e034:	ee10 2a10 	vmov	r2, s0
 800e038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e03c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e040:	ea41 0300 	orr.w	r3, r1, r0
 800e044:	ec43 2b10 	vmov	d0, r2, r3
 800e048:	4770      	bx	lr
	...

0800e04c <_init>:
 800e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04e:	bf00      	nop
 800e050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e052:	bc08      	pop	{r3}
 800e054:	469e      	mov	lr, r3
 800e056:	4770      	bx	lr

0800e058 <_fini>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	bf00      	nop
 800e05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05e:	bc08      	pop	{r3}
 800e060:	469e      	mov	lr, r3
 800e062:	4770      	bx	lr
