
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080121b8  080121b8  000221b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012690  08012690  00030170  2**0
                  CONTENTS
  4 .ARM          00000008  08012690  08012690  00022690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012698  08012698  00030170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012698  08012698  00022698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801269c  0801269c  0002269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  24000000  080126a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c84  24000170  08012810  00030170  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000df4  08012810  00030df4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226b6  00000000  00000000  0003019e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003486  00000000  00000000  00052854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  00055ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  000573c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003934d  00000000  00000000  00058990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013633  00000000  00000000  00091cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001759ef  00000000  00000000  000a5310  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021acff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006880  00000000  00000000  0021ad7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801219c 	.word	0x0801219c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	0801219c 	.word	0x0801219c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <delayUs_Init+0x38>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10e      	bne.n	80006ae <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delayUs_Init+0x38>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <delayUs_Init+0x38>)
 8000696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <delayUs_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <delayUs_Init+0x3c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <delayUs_Init+0x3c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
    }
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000edf0 	.word	0xe000edf0
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <delayUs+0x40>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <delayUs+0x44>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <delayUs+0x48>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	0c9a      	lsrs	r2, r3, #18
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80006e2:	bf00      	nop
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <delayUs+0x40>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d8f8      	bhi.n	80006e4 <delayUs+0x24>
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0001000 	.word	0xe0001000
 8000704:	240000f8 	.word	0x240000f8
 8000708:	431bde83 	.word	0x431bde83

0800070c <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <peripheralUART_Init+0x50>)
 8000712:	22aa      	movs	r2, #170	; 0xaa
 8000714:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <peripheralUART_Init+0x50>)
 8000718:	22aa      	movs	r2, #170	; 0xaa
 800071a:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <peripheralUART_Init+0x50>)
 800071e:	22aa      	movs	r2, #170	; 0xaa
 8000720:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <peripheralUART_Init+0x50>)
 8000724:	22aa      	movs	r2, #170	; 0xaa
 8000726:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <peripheralUART_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	490b      	ldr	r1, [pc, #44]	; (8000760 <peripheralUART_Init+0x54>)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <peripheralUART_Init+0x58>)
 8000734:	f00c fe02 	bl	800d33c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	490b      	ldr	r1, [pc, #44]	; (8000768 <peripheralUART_Init+0x5c>)
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <peripheralUART_Init+0x60>)
 800073e:	f00c fed5 	bl	800d4ec <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000742:	2202      	movs	r2, #2
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <peripheralUART_Init+0x64>)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <peripheralUART_Init+0x68>)
 8000748:	f00c fed0 	bl	800d4ec <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&zmanual, zmanualRxPacket, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <peripheralUART_Init+0x6c>)
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <peripheralUART_Init+0x70>)
 8000752:	f00c fecb 	bl	800d4ec <HAL_UART_Receive_DMA>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000014 	.word	0x24000014
 8000760:	24000cf0 	.word	0x24000cf0
 8000764:	24000c24 	.word	0x24000c24
 8000768:	24000cb0 	.word	0x24000cb0
 800076c:	2400038c 	.word	0x2400038c
 8000770:	24000858 	.word	0x24000858
 8000774:	24000b10 	.word	0x24000b10
 8000778:	24000928 	.word	0x24000928
 800077c:	24000234 	.word	0x24000234

08000780 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_TxCpltCallback+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d103      	bne.n	800079c <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_UART_TxCpltCallback+0x68>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 800079a:	e01c      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_UART_TxCpltCallback+0x6c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d103      	bne.n	80007b0 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_TxCpltCallback+0x70>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	e012      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_UART_TxCpltCallback+0x74>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d103      	bne.n	80007c4 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_TxCpltCallback+0x78>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	e008      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_UART_TxCpltCallback+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d102      	bne.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_TxCpltCallback+0x80>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000b10 	.word	0x24000b10
 80007e8:	24000427 	.word	0x24000427
 80007ec:	2400038c 	.word	0x2400038c
 80007f0:	24000c02 	.word	0x24000c02
 80007f4:	24000c24 	.word	0x24000c24
 80007f8:	24000940 	.word	0x24000940
 80007fc:	24000234 	.word	0x24000234
 8000800:	240002e9 	.word	0x240002e9

08000804 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_RxCpltCallback+0x7c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d103      	bne.n	8000820 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_UART_RxCpltCallback+0x80>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 800081e:	e02b      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_RxCpltCallback+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d103      	bne.n	8000834 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_UART_RxCpltCallback+0x88>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	e021      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d112      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b74      	cmp	r3, #116	; 0x74
 8000846:	d105      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2209      	movs	r2, #9
 800084c:	4912      	ldr	r1, [pc, #72]	; (8000898 <HAL_UART_RxCpltCallback+0x94>)
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000850:	f00c fc5a 	bl	800d108 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_RxCpltCallback+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	490d      	ldr	r1, [pc, #52]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000860:	f00c fd6c 	bl	800d33c <HAL_UART_Receive_IT>
}
 8000864:	e008      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_UART_RxCpltCallback+0x9c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d102      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000b10 	.word	0x24000b10
 8000884:	240001f2 	.word	0x240001f2
 8000888:	2400038c 	.word	0x2400038c
 800088c:	24000c02 	.word	0x24000c02
 8000890:	24000c24 	.word	0x24000c24
 8000894:	24000cf0 	.word	0x24000cf0
 8000898:	24000014 	.word	0x24000014
 800089c:	24000d78 	.word	0x24000d78
 80008a0:	24000234 	.word	0x24000234
 80008a4:	24000c08 	.word	0x24000c08

080008a8 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <compassReset+0x24>)
 80008ae:	2261      	movs	r2, #97	; 0x61
 80008b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <compassReset+0x24>)
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <compassReset+0x28>)
 80008b8:	f00c fcbc 	bl	800d234 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80008bc:	f000 f818 	bl	80008f0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <compassReset+0x24>)
 80008c2:	227a      	movs	r2, #122	; 0x7a
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24000000 	.word	0x24000000
 80008d0:	24000b10 	.word	0x24000b10

080008d4 <compassRequest>:
void compassRequest(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	4903      	ldr	r1, [pc, #12]	; (80008e8 <compassRequest+0x14>)
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <compassRequest+0x18>)
 80008de:	f00c fca9 	bl	800d234 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24000b10 	.word	0x24000b10

080008f0 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 80008f4:	bf00      	nop
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <wait4CompassTx+0x20>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0fb      	beq.n	80008f6 <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <wait4CompassTx+0x20>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	24000427 	.word	0x24000427

08000914 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000918:	2209      	movs	r2, #9
 800091a:	4904      	ldr	r1, [pc, #16]	; (800092c <spinalCordTrans+0x18>)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <spinalCordTrans+0x1c>)
 800091e:	f00c fc89 	bl	800d234 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000922:	f000 f807 	bl	8000934 <wait4SpinalCordTx>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000014 	.word	0x24000014
 8000930:	24000c24 	.word	0x24000c24

08000934 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 8000938:	bf00      	nop
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <wait4SpinalCordTx+0x20>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0fb      	beq.n	800093a <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <wait4SpinalCordTx+0x20>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	24000940 	.word	0x24000940

08000958 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e01f      	b.n	80009a8 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <SendByteSPI+0x60>)
 800097e:	f009 fa17 	bl	8009db0 <HAL_GPIO_WritePin>
 8000982:	e004      	b.n	800098e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000984:	2200      	movs	r2, #0
 8000986:	2120      	movs	r1, #32
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <SendByteSPI+0x60>)
 800098a:	f009 fa11 	bl	8009db0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <SendByteSPI+0x60>)
 8000994:	f009 fa0c 	bl	8009db0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <SendByteSPI+0x60>)
 800099e:	f009 fa07 	bl	8009db0 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	dddc      	ble.n	8000968 <SendByteSPI+0x10>

	}
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58021800 	.word	0x58021800

080009bc <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <ST7920_SendCmd+0x50>)
 80009ce:	f009 f9ef 	bl	8009db0 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 80009d2:	20f8      	movs	r0, #248	; 0xf8
 80009d4:	f7ff ffc0 	bl	8000958 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f023 030f 	bic.w	r3, r3, #15
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffb9 	bl	8000958 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffb3 	bl	8000958 <SendByteSPI>
	delayUs(50);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f7ff fe64 	bl	80006c0 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <ST7920_SendCmd+0x50>)
 8000a00:	f009 f9d6 	bl	8009db0 <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58021800 	.word	0x58021800

08000a10 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <ST7920_SendData+0x50>)
 8000a22:	f009 f9c5 	bl	8009db0 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	f7ff ff96 	bl	8000958 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f023 030f 	bic.w	r3, r3, #15
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff8f 	bl	8000958 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff89 	bl	8000958 <SendByteSPI>
	delayUs(50);
 8000a46:	2032      	movs	r0, #50	; 0x32
 8000a48:	f7ff fe3a 	bl	80006c0 <delayUs>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <ST7920_SendData+0x50>)
 8000a54:	f009 f9ac 	bl	8009db0 <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58021800 	.word	0x58021800

08000a64 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
    switch (row)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d81e      	bhi.n	8000ab4 <ST7920_SendString+0x50>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <ST7920_SendString+0x18>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000a8d 	.word	0x08000a8d
 8000a80:	08000a97 	.word	0x08000a97
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aab 	.word	0x08000aab
    {
        case 0:
            col |= 0x80;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	60bb      	str	r3, [r7, #8]
            break;
 8000a94:	e013      	b.n	8000abe <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000a9c:	60bb      	str	r3, [r7, #8]
            break;
 8000a9e:	e00e      	b.n	8000abe <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000aa6:	60bb      	str	r3, [r7, #8]
            break;
 8000aa8:	e009      	b.n	8000abe <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8000ab0:	60bb      	str	r3, [r7, #8]
            break;
 8000ab2:	e004      	b.n	8000abe <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
            break;
 8000abc:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff7a 	bl	80009bc <ST7920_SendCmd>

    while (*string)
 8000ac8:	e006      	b.n	8000ad8 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff9c 	bl	8000a10 <ST7920_SendData>
    while (*string)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <ST7920_SendString+0x66>
    	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <ST7920_Clear>:
}



void ST7920_Clear()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <ST7920_Clear+0x8c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d134      	bne.n	8000b60 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	e02d      	b.n	8000b58 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b1f      	cmp	r3, #31
 8000b00:	d80a      	bhi.n	8000b18 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff56 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	f7ff ff53 	bl	80009bc <ST7920_SendCmd>
 8000b16:	e00d      	b.n	8000b34 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	3b20      	subs	r3, #32
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff47 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000b2e:	2088      	movs	r0, #136	; 0x88
 8000b30:	f7ff ff44 	bl	80009bc <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	e008      	b.n	8000b4c <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff68 	bl	8000a10 <ST7920_SendData>
				ST7920_SendData(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff65 	bl	8000a10 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d9f3      	bls.n	8000b3a <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	3301      	adds	r3, #1
 8000b56:	71bb      	strb	r3, [r7, #6]
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5c:	d9ce      	bls.n	8000afc <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000b5e:	e005      	b.n	8000b6c <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff2b 	bl	80009bc <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8000b66:	2002      	movs	r0, #2
 8000b68:	f004 fe74 	bl	8005854 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2400018d 	.word	0x2400018d

08000b78 <ST7920_Init>:


void ST7920_Init (void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b82:	f009 f915 	bl	8009db0 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000b86:	200a      	movs	r0, #10
 8000b88:	f004 fe64 	bl	8005854 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b92:	f009 f90d 	bl	8009db0 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f004 fe5c 	bl	8005854 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000b9c:	2030      	movs	r0, #48	; 0x30
 8000b9e:	f7ff ff0d 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000ba2:	206e      	movs	r0, #110	; 0x6e
 8000ba4:	f7ff fd8c 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000ba8:	2030      	movs	r0, #48	; 0x30
 8000baa:	f7ff ff07 	bl	80009bc <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f7ff fd86 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f7ff ff01 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000bba:	206e      	movs	r0, #110	; 0x6e
 8000bbc:	f7ff fd80 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fefb 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f004 fe44 	bl	8005854 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f7ff fef5 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f004 fe3e 	bl	8005854 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff feef 	bl	80009bc <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000bde:	2001      	movs	r0, #1
 8000be0:	f004 fe38 	bl	8005854 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fee9 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bea:	2001      	movs	r0, #1
 8000bec:	f004 fe32 	bl	8005854 <HAL_Delay>

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58021800 	.word	0x58021800

08000bf8 <peripheralADC_Init>:
//uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
//uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4903      	ldr	r1, [pc, #12]	; (8000c0c <peripheralADC_Init+0x14>)
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <peripheralADC_Init+0x18>)
 8000c02:	f005 f9e7 	bl	8005fd4 <HAL_ADC_Start_DMA>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24000d0c 	.word	0x24000d0c
 8000c10:	24000a00 	.word	0x24000a00

08000c14 <controlMotor1>:
#ifdef SPINAL_CORD_MODE_ONEWAY



void controlMotor1(int _speed)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2bfa      	cmp	r3, #250	; 0xfa
 8000c20:	dd02      	ble.n	8000c28 <controlMotor1+0x14>
		_speed = 250;
 8000c22:	23fa      	movs	r3, #250	; 0xfa
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e00f      	b.n	8000c48 <controlMotor1+0x34>
	else if(_speed<-250)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000c2e:	da03      	bge.n	8000c38 <controlMotor1+0x24>
		_speed = -250;
 8000c30:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e007      	b.n	8000c48 <controlMotor1+0x34>
	else if((_speed<1)&&(_speed>-1))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dc04      	bgt.n	8000c48 <controlMotor1+0x34>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db01      	blt.n	8000c48 <controlMotor1+0x34>
		_speed = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bfb8      	it	lt
 8000c4e:	425b      	neglt	r3, r3
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <controlMotor1+0x74>)
 8000c54:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db07      	blt.n	8000c6c <controlMotor1+0x58>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <controlMotor1+0x74>)
 8000c5e:	7a1b      	ldrb	r3, [r3, #8]
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <controlMotor1+0x74>)
 8000c68:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
	else
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
//		spinalCordTxPacket[motorDir] |= (1UL << 0);
}
 8000c6a:	e006      	b.n	8000c7a <controlMotor1+0x66>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <controlMotor1+0x74>)
 8000c6e:	7a1b      	ldrb	r3, [r3, #8]
 8000c70:	f023 0301 	bic.w	r3, r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <controlMotor1+0x74>)
 8000c78:	721a      	strb	r2, [r3, #8]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	24000014 	.word	0x24000014

08000c8c <controlMotor2>:
void controlMotor2(int _speed)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2bfa      	cmp	r3, #250	; 0xfa
 8000c98:	dd02      	ble.n	8000ca0 <controlMotor2+0x14>
			_speed = 250;
 8000c9a:	23fa      	movs	r3, #250	; 0xfa
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	e00f      	b.n	8000cc0 <controlMotor2+0x34>
		else if(_speed<-250)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000ca6:	da03      	bge.n	8000cb0 <controlMotor2+0x24>
			_speed = -250;
 8000ca8:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e007      	b.n	8000cc0 <controlMotor2+0x34>
		else if((_speed<1)&&(_speed>-1))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dc04      	bgt.n	8000cc0 <controlMotor2+0x34>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db01      	blt.n	8000cc0 <controlMotor2+0x34>
			_speed = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <controlMotor2+0x74>)
 8000ccc:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db07      	blt.n	8000ce4 <controlMotor2+0x58>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <controlMotor2+0x74>)
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <controlMotor2+0x74>)
 8000ce0:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
	else
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
//		spinalCordTxPacket[motorDir] |= (1UL << 1);

}
 8000ce2:	e006      	b.n	8000cf2 <controlMotor2+0x66>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <controlMotor2+0x74>)
 8000ce6:	7a1b      	ldrb	r3, [r3, #8]
 8000ce8:	f023 0302 	bic.w	r3, r3, #2
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <controlMotor2+0x74>)
 8000cf0:	721a      	strb	r2, [r3, #8]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	24000014 	.word	0x24000014

08000d04 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2bfa      	cmp	r3, #250	; 0xfa
 8000d10:	dd02      	ble.n	8000d18 <controlMotor3+0x14>
			_speed = 250;
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e00f      	b.n	8000d38 <controlMotor3+0x34>
		else if(_speed<-250)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d1e:	da03      	bge.n	8000d28 <controlMotor3+0x24>
			_speed = -250;
 8000d20:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	e007      	b.n	8000d38 <controlMotor3+0x34>
		else if((_speed<1)&&(_speed>-1))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dc04      	bgt.n	8000d38 <controlMotor3+0x34>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db01      	blt.n	8000d38 <controlMotor3+0x34>
			_speed = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bfb8      	it	lt
 8000d3e:	425b      	neglt	r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <controlMotor3+0x74>)
 8000d44:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db07      	blt.n	8000d5c <controlMotor3+0x58>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <controlMotor3+0x74>)
 8000d4e:	7a1b      	ldrb	r3, [r3, #8]
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <controlMotor3+0x74>)
 8000d58:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 2);

	else
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
//		spinalCordTxPacket[motorDir] |= (1UL << 2);
}
 8000d5a:	e006      	b.n	8000d6a <controlMotor3+0x66>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <controlMotor3+0x74>)
 8000d5e:	7a1b      	ldrb	r3, [r3, #8]
 8000d60:	f023 0304 	bic.w	r3, r3, #4
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <controlMotor3+0x74>)
 8000d68:	721a      	strb	r2, [r3, #8]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	24000014 	.word	0x24000014

08000d7c <controlMotor4>:
void controlMotor4(int _speed)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2bfa      	cmp	r3, #250	; 0xfa
 8000d88:	dd02      	ble.n	8000d90 <controlMotor4+0x14>
			_speed = 250;
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e00f      	b.n	8000db0 <controlMotor4+0x34>
		else if(_speed<-250)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d96:	da03      	bge.n	8000da0 <controlMotor4+0x24>
			_speed = -250;
 8000d98:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	e007      	b.n	8000db0 <controlMotor4+0x34>
		else if((_speed<1)&&(_speed>-1))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dc04      	bgt.n	8000db0 <controlMotor4+0x34>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db01      	blt.n	8000db0 <controlMotor4+0x34>
			_speed = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bfb8      	it	lt
 8000db6:	425b      	neglt	r3, r3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <controlMotor4+0x74>)
 8000dbc:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db07      	blt.n	8000dd4 <controlMotor4+0x58>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <controlMotor4+0x74>)
 8000dc6:	7a1b      	ldrb	r3, [r3, #8]
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <controlMotor4+0x74>)
 8000dd0:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
	else
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
//		spinalCordTxPacket[motorDir] |= (1UL << 3);
}
 8000dd2:	e006      	b.n	8000de2 <controlMotor4+0x66>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <controlMotor4+0x74>)
 8000dd6:	7a1b      	ldrb	r3, [r3, #8]
 8000dd8:	f023 0308 	bic.w	r3, r3, #8
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <controlMotor4+0x74>)
 8000de0:	721a      	strb	r2, [r3, #8]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000014 	.word	0x24000014
 8000df4:	00000000 	.word	0x00000000

08000df8 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <PIDyaw+0x120>)
 8000e12:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <PIDyaw+0x120>)
 8000e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <PIDyaw+0x124>)
 8000e24:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <PIDyaw+0x120>)
 8000e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <PIDyaw+0x128>)
 8000e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e40:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <PIDyaw+0x12c>)
 8000e42:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <PIDyaw+0x120>)
 8000e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <PIDyaw+0x130>)
 8000e56:	ed93 7b00 	vldr	d7, [r3]
 8000e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <PIDyaw+0x130>)
 8000e60:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000e64:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <PIDyaw+0x134>)
 8000e66:	ed93 6b00 	vldr	d6, [r3]
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <PIDyaw+0x124>)
 8000e6c:	ed93 7b00 	vldr	d7, [r3]
 8000e70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <PIDyaw+0x138>)
 8000e76:	ed93 5b00 	vldr	d5, [r3]
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <PIDyaw+0x12c>)
 8000e7c:	ed93 7b00 	vldr	d7, [r3]
 8000e80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <PIDyaw+0x13c>)
 8000e8a:	ed93 5b00 	vldr	d5, [r3]
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <PIDyaw+0x130>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <PIDyaw+0x140>)
 8000e9e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <PIDyaw+0x140>)
 8000ea4:	ed93 7b00 	vldr	d7, [r3]
 8000ea8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000f08 <PIDyaw+0x110>
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd05      	ble.n	8000ec2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <PIDyaw+0x140>)
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	4c1f      	ldr	r4, [pc, #124]	; (8000f3c <PIDyaw+0x144>)
 8000ebe:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <PIDyaw+0x140>)
 8000ec4:	ed93 7b00 	vldr	d7, [r3]
 8000ec8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000f10 <PIDyaw+0x118>
 8000ecc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	d505      	bpl.n	8000ee2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <PIDyaw+0x140>)
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	4c18      	ldr	r4, [pc, #96]	; (8000f40 <PIDyaw+0x148>)
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <PIDyaw+0x120>)
 8000ee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <PIDyaw+0x128>)
 8000eea:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <PIDyaw+0x140>)
 8000eee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ef2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ef6:	eeb0 0b47 	vmov.f64	d0, d7
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc90      	pop	{r4, r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	405e0000 	.word	0x405e0000
 8000f10:	00000000 	.word	0x00000000
 8000f14:	c05e0000 	.word	0xc05e0000
 8000f18:	24000918 	.word	0x24000918
 8000f1c:	24000938 	.word	0x24000938
 8000f20:	24000388 	.word	0x24000388
 8000f24:	24000210 	.word	0x24000210
 8000f28:	24000910 	.word	0x24000910
 8000f2c:	24000028 	.word	0x24000028
 8000f30:	24000030 	.word	0x24000030
 8000f34:	24000038 	.word	0x24000038
 8000f38:	24000c18 	.word	0x24000c18
 8000f3c:	405e0000 	.word	0x405e0000
 8000f40:	c05e0000 	.word	0xc05e0000

08000f44 <PIDroR>:

double PIDroR(int _roRValue, int _roRSetpoint)
{
 8000f44:	b490      	push	{r4, r7}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	roRError = _roRSetpoint - _roRValue;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b44      	ldr	r3, [pc, #272]	; (8001070 <PIDroR+0x12c>)
 8000f5e:	801a      	strh	r2, [r3, #0]
	roRP = roRError;
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <PIDroR+0x12c>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <PIDroR+0x130>)
 8000f70:	ed83 7b00 	vstr	d7, [r3]
	roRD = roRError - roRPreError;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <PIDroR+0x12c>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <PIDroR+0x134>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <PIDroR+0x138>)
 8000f8e:	ed83 7b00 	vstr	d7, [r3]
	roRI = roRError + roRI;
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <PIDroR+0x12c>)
 8000f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <PIDroR+0x13c>)
 8000fa2:	ed93 7b00 	vldr	d7, [r3]
 8000fa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <PIDroR+0x13c>)
 8000fac:	ed83 7b00 	vstr	d7, [r3]
	roRPID = roRKp*roRP + roRKd*roRD + roRKi*roRI;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <PIDroR+0x140>)
 8000fb2:	ed93 6b00 	vldr	d6, [r3]
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <PIDroR+0x130>)
 8000fb8:	ed93 7b00 	vldr	d7, [r3]
 8000fbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <PIDroR+0x144>)
 8000fc2:	ed93 5b00 	vldr	d5, [r3]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <PIDroR+0x138>)
 8000fc8:	ed93 7b00 	vldr	d7, [r3]
 8000fcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <PIDroR+0x148>)
 8000fd6:	ed93 5b00 	vldr	d5, [r3]
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <PIDroR+0x13c>)
 8000fdc:	ed93 7b00 	vldr	d7, [r3]
 8000fe0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <PIDroR+0x14c>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
	if(roRPID > MAX_ROR_PID)
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <PIDroR+0x150>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <PIDroR+0x14c>)
 8000ffc:	ed93 7b00 	vldr	d7, [r3]
 8001000:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	d508      	bpl.n	800101c <PIDroR+0xd8>
	{
		roRPID = MAX_ROR_PID;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <PIDroR+0x150>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <PIDroR+0x14c>)
 8001018:	ed83 7b00 	vstr	d7, [r3]
	}
	if(roRPID < MIN_ROR_PID)
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <PIDroR+0x150>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	425b      	negs	r3, r3
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <PIDroR+0x14c>)
 800102c:	ed93 7b00 	vldr	d7, [r3]
 8001030:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	dd09      	ble.n	800104e <PIDroR+0x10a>
	{
		roRPID = MIN_ROR_PID;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <PIDroR+0x150>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	425b      	negs	r3, r3
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <PIDroR+0x14c>)
 800104a:	ed83 7b00 	vstr	d7, [r3]
	}
	roRPreError = roRError;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <PIDroR+0x12c>)
 8001050:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <PIDroR+0x134>)
 8001056:	801a      	strh	r2, [r3, #0]
	return roRPID;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <PIDroR+0x14c>)
 800105a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800105e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001062:	eeb0 0b47 	vmov.f64	d0, d7
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bc90      	pop	{r4, r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	24000d88 	.word	0x24000d88
 8001074:	24000b00 	.word	0x24000b00
 8001078:	24000208 	.word	0x24000208
 800107c:	24000d70 	.word	0x24000d70
 8001080:	24000868 	.word	0x24000868
 8001084:	24000048 	.word	0x24000048
 8001088:	24000cd8 	.word	0x24000cd8
 800108c:	24000190 	.word	0x24000190
 8001090:	24000430 	.word	0x24000430
 8001094:	24000040 	.word	0x24000040

08001098 <PIDroL>:

double PIDroL(int _roLValue, int _roLSetpoint)
{
 8001098:	b490      	push	{r4, r7}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	roLError = _roLSetpoint - _roLValue;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <PIDroL+0x12c>)
 80010b2:	801a      	strh	r2, [r3, #0]
	roLP = roLError;
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <PIDroL+0x12c>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <PIDroL+0x130>)
 80010c4:	ed83 7b00 	vstr	d7, [r3]
	roLD = roLError - roLPreError;
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <PIDroL+0x12c>)
 80010ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <PIDroL+0x134>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <PIDroL+0x138>)
 80010e2:	ed83 7b00 	vstr	d7, [r3]
	roLI = roLError + roLI;
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <PIDroL+0x12c>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <PIDroL+0x13c>)
 80010f6:	ed93 7b00 	vldr	d7, [r3]
 80010fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <PIDroL+0x13c>)
 8001100:	ed83 7b00 	vstr	d7, [r3]
	roLPID = roLKp*roLP + roLKd*roLD + roLKi*roLI;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <PIDroL+0x140>)
 8001106:	ed93 6b00 	vldr	d6, [r3]
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <PIDroL+0x130>)
 800110c:	ed93 7b00 	vldr	d7, [r3]
 8001110:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <PIDroL+0x144>)
 8001116:	ed93 5b00 	vldr	d5, [r3]
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <PIDroL+0x138>)
 800111c:	ed93 7b00 	vldr	d7, [r3]
 8001120:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001124:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <PIDroL+0x148>)
 800112a:	ed93 5b00 	vldr	d5, [r3]
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <PIDroL+0x13c>)
 8001130:	ed93 7b00 	vldr	d7, [r3]
 8001134:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001138:	ee36 7b07 	vadd.f64	d7, d6, d7
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <PIDroL+0x14c>)
 800113e:	ed83 7b00 	vstr	d7, [r3]
	if(roLPID > MAX_ROL_PID)
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <PIDroL+0x150>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <PIDroL+0x14c>)
 8001150:	ed93 7b00 	vldr	d7, [r3]
 8001154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d508      	bpl.n	8001170 <PIDroL+0xd8>
	{
		roLPID = MAX_ROL_PID;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <PIDroL+0x150>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <PIDroL+0x14c>)
 800116c:	ed83 7b00 	vstr	d7, [r3]
	}
	if(roLPID < MIN_ROL_PID)
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <PIDroL+0x150>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	425b      	negs	r3, r3
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <PIDroL+0x14c>)
 8001180:	ed93 7b00 	vldr	d7, [r3]
 8001184:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	dd09      	ble.n	80011a2 <PIDroL+0x10a>
	{
		roLPID = MIN_ROL_PID;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <PIDroL+0x150>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	425b      	negs	r3, r3
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <PIDroL+0x14c>)
 800119e:	ed83 7b00 	vstr	d7, [r3]
	}
	roLPreError = roLError;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <PIDroL+0x12c>)
 80011a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <PIDroL+0x134>)
 80011aa:	801a      	strh	r2, [r3, #0]
	return roLPID;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <PIDroL+0x14c>)
 80011ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011b2:	ec44 3b17 	vmov	d7, r3, r4
}
 80011b6:	eeb0 0b47 	vmov.f64	d0, d7
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc90      	pop	{r4, r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2400091a 	.word	0x2400091a
 80011c8:	24000bf8 	.word	0x24000bf8
 80011cc:	24000ba4 	.word	0x24000ba4
 80011d0:	240002f8 	.word	0x240002f8
 80011d4:	24000380 	.word	0x24000380
 80011d8:	24000058 	.word	0x24000058
 80011dc:	24000878 	.word	0x24000878
 80011e0:	24000198 	.word	0x24000198
 80011e4:	24000948 	.word	0x24000948
 80011e8:	24000050 	.word	0x24000050

080011ec <PIDpit>:

double PIDpit(int _pitValue, int _pitSetpoint)
{
 80011ec:	b490      	push	{r4, r7}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <PIDpit+0x118>)
 8001206:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <PIDpit+0x118>)
 800120c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001210:	4a3d      	ldr	r2, [pc, #244]	; (8001308 <PIDpit+0x11c>)
 8001212:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <PIDpit+0x118>)
 8001218:	ed93 6b00 	vldr	d6, [r3]
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <PIDpit+0x120>)
 800121e:	ed93 7b00 	vldr	d7, [r3]
 8001222:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <PIDpit+0x124>)
 8001228:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <PIDpit+0x118>)
 800122e:	ed93 6b00 	vldr	d6, [r3]
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <PIDpit+0x128>)
 8001234:	ed93 7b00 	vldr	d7, [r3]
 8001238:	ee36 7b07 	vadd.f64	d7, d6, d7
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <PIDpit+0x128>)
 800123e:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <PIDpit+0x12c>)
 8001244:	ed93 6b00 	vldr	d6, [r3]
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <PIDpit+0x11c>)
 800124a:	ed93 7b00 	vldr	d7, [r3]
 800124e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <PIDpit+0x130>)
 8001254:	ed93 5b00 	vldr	d5, [r3]
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <PIDpit+0x124>)
 800125a:	ed93 7b00 	vldr	d7, [r3]
 800125e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001262:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <PIDpit+0x134>)
 8001268:	ed93 5b00 	vldr	d5, [r3]
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <PIDpit+0x128>)
 800126e:	ed93 7b00 	vldr	d7, [r3]
 8001272:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001276:	ee36 7b07 	vadd.f64	d7, d6, d7
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <PIDpit+0x138>)
 800127c:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <PIDpit+0x13c>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <PIDpit+0x138>)
 800128e:	ed93 7b00 	vldr	d7, [r3]
 8001292:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d508      	bpl.n	80012ae <PIDpit+0xc2>
	{
		pitPID = MAX_PIT_PID;
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <PIDpit+0x13c>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <PIDpit+0x138>)
 80012aa:	ed83 7b00 	vstr	d7, [r3]
	}
	if(pitPID < MIN_PIT_PID)
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <PIDpit+0x13c>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	425b      	negs	r3, r3
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <PIDpit+0x138>)
 80012be:	ed93 7b00 	vldr	d7, [r3]
 80012c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	dd09      	ble.n	80012e0 <PIDpit+0xf4>
	{
		pitPID = MIN_PIT_PID;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <PIDpit+0x13c>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	425b      	negs	r3, r3
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <PIDpit+0x138>)
 80012dc:	ed83 7b00 	vstr	d7, [r3]
	}
	pitPreError = pitError;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <PIDpit+0x118>)
 80012e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <PIDpit+0x120>)
 80012e8:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <PIDpit+0x138>)
 80012ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012f2:	ec44 3b17 	vmov	d7, r3, r4
}
 80012f6:	eeb0 0b47 	vmov.f64	d0, d7
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc90      	pop	{r4, r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	24000438 	.word	0x24000438
 8001308:	24000ae8 	.word	0x24000ae8
 800130c:	24000200 	.word	0x24000200
 8001310:	240002f0 	.word	0x240002f0
 8001314:	24000950 	.word	0x24000950
 8001318:	24000068 	.word	0x24000068
 800131c:	24000440 	.word	0x24000440
 8001320:	240001a0 	.word	0x240001a0
 8001324:	24000bd8 	.word	0x24000bd8
 8001328:	24000060 	.word	0x24000060
 800132c:	00000000 	.word	0x00000000

08001330 <roL_pit_yaw_mixSpeed>:
	controlMotor4(yawPID);
	// spinalCordTrans();
}

void roL_pit_yaw_mixSpeed(void)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	ed2d 8b02 	vpush	{d8}
 8001336:	b08d      	sub	sp, #52	; 0x34
 8001338:	af00      	add	r7, sp, #0
	double _roL_pit_speed = sqrt(roLPID*roLPID + pitPID*pitPID);
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <roL_pit_yaw_mixSpeed+0x1d8>)
 800133c:	ed93 6b00 	vldr	d6, [r3]
 8001340:	4b71      	ldr	r3, [pc, #452]	; (8001508 <roL_pit_yaw_mixSpeed+0x1d8>)
 8001342:	ed93 7b00 	vldr	d7, [r3]
 8001346:	ee26 6b07 	vmul.f64	d6, d6, d7
 800134a:	4b70      	ldr	r3, [pc, #448]	; (800150c <roL_pit_yaw_mixSpeed+0x1dc>)
 800134c:	ed93 5b00 	vldr	d5, [r3]
 8001350:	4b6e      	ldr	r3, [pc, #440]	; (800150c <roL_pit_yaw_mixSpeed+0x1dc>)
 8001352:	ed93 7b00 	vldr	d7, [r3]
 8001356:	ee25 7b07 	vmul.f64	d7, d5, d7
 800135a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800135e:	eeb0 0b47 	vmov.f64	d0, d7
 8001362:	f00f ff3d 	bl	80111e0 <sqrt>
 8001366:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roL_pit_dir = atan2(roLPID, pitPID);
 800136a:	4b67      	ldr	r3, [pc, #412]	; (8001508 <roL_pit_yaw_mixSpeed+0x1d8>)
 800136c:	ed93 7b00 	vldr	d7, [r3]
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <roL_pit_yaw_mixSpeed+0x1dc>)
 8001372:	ed93 6b00 	vldr	d6, [r3]
 8001376:	eeb0 1b46 	vmov.f64	d1, d6
 800137a:	eeb0 0b47 	vmov.f64	d0, d7
 800137e:	f00f ff2b 	bl	80111d8 <atan2>
 8001382:	ed87 0b08 	vstr	d0, [r7, #32]

	double _motor1Speed = yawPID*factorYawPID + (_roL_pit_speed *cos(3.0*M_PI/4.0 - _roL_pit_dir) + 0.0);
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <roL_pit_yaw_mixSpeed+0x1e0>)
 8001388:	ed93 6b00 	vldr	d6, [r3]
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <roL_pit_yaw_mixSpeed+0x1e4>)
 800138e:	ed93 7b00 	vldr	d7, [r3]
 8001392:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001396:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80014f0 <roL_pit_yaw_mixSpeed+0x1c0>
 800139a:	ed97 7b08 	vldr	d7, [r7, #32]
 800139e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013a2:	eeb0 0b47 	vmov.f64	d0, d7
 80013a6:	f00f fedb 	bl	8011160 <cos>
 80013aa:	eeb0 6b40 	vmov.f64	d6, d0
 80013ae:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80013b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013b6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80014f8 <roL_pit_yaw_mixSpeed+0x1c8>
 80013ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013be:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013c2:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID*factorYawPID + (_roL_pit_speed *cos(3.0*M_PI/4.0 + _roL_pit_dir) - 0.0);
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <roL_pit_yaw_mixSpeed+0x1e0>)
 80013c8:	ed93 6b00 	vldr	d6, [r3]
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <roL_pit_yaw_mixSpeed+0x1e4>)
 80013ce:	ed93 7b00 	vldr	d7, [r3]
 80013d2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80013d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80013da:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80014f0 <roL_pit_yaw_mixSpeed+0x1c0>
 80013de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013e2:	eeb0 0b47 	vmov.f64	d0, d7
 80013e6:	f00f febb 	bl	8011160 <cos>
 80013ea:	eeb0 6b40 	vmov.f64	d6, d0
 80013ee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80013f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013fa:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID*factorYawPID +  _roL_pit_speed *cos(    M_PI/4.0 + _roL_pit_dir) + 0.0;
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <roL_pit_yaw_mixSpeed+0x1e0>)
 8001400:	ed93 6b00 	vldr	d6, [r3]
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <roL_pit_yaw_mixSpeed+0x1e4>)
 8001406:	ed93 7b00 	vldr	d7, [r3]
 800140a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800140e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001412:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001500 <roL_pit_yaw_mixSpeed+0x1d0>
 8001416:	ee37 7b06 	vadd.f64	d7, d7, d6
 800141a:	eeb0 0b47 	vmov.f64	d0, d7
 800141e:	f00f fe9f 	bl	8011160 <cos>
 8001422:	eeb0 6b40 	vmov.f64	d6, d0
 8001426:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800142a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800142e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001432:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80014f8 <roL_pit_yaw_mixSpeed+0x1c8>
 8001436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800143a:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID*factorYawPID +  _roL_pit_speed *cos(    M_PI/4.0 - _roL_pit_dir) - 0.0;
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <roL_pit_yaw_mixSpeed+0x1e0>)
 8001440:	ed93 6b00 	vldr	d6, [r3]
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <roL_pit_yaw_mixSpeed+0x1e4>)
 8001446:	ed93 7b00 	vldr	d7, [r3]
 800144a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800144e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001500 <roL_pit_yaw_mixSpeed+0x1d0>
 8001452:	ed97 7b08 	vldr	d7, [r7, #32]
 8001456:	ee36 7b47 	vsub.f64	d7, d6, d7
 800145a:	eeb0 0b47 	vmov.f64	d0, d7
 800145e:	f00f fe7f 	bl	8011160 <cos>
 8001462:	eeb0 6b40 	vmov.f64	d6, d0
 8001466:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800146a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800146e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001472:	ed87 7b00 	vstr	d7, [r7]
//	b = 1.0 - _motor3Speed;
//	absSpeed = _roL_pit_speed;
//	dir = _roL_pit_dir;
//	cos_ = cos(3*M_PI/4 - _roL_pit_dir);
//	motor1_debug = absSpeed*cos_;
	motor1Speed_ = _motor1Speed;
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <roL_pit_yaw_mixSpeed+0x1e8>)
 8001478:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800147c:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <roL_pit_yaw_mixSpeed+0x1ec>)
 8001482:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001486:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 800148a:	4a25      	ldr	r2, [pc, #148]	; (8001520 <roL_pit_yaw_mixSpeed+0x1f0>)
 800148c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001490:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8001494:	4a23      	ldr	r2, [pc, #140]	; (8001524 <roL_pit_yaw_mixSpeed+0x1f4>)
 8001496:	e9d7 3400 	ldrd	r3, r4, [r7]
 800149a:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 800149e:	ed97 7b06 	vldr	d7, [r7, #24]
 80014a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80014a6:	ee17 0a90 	vmov	r0, s15
 80014aa:	f7ff fbb3 	bl	8000c14 <controlMotor1>
	controlMotor2(_motor2Speed);
 80014ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80014b2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7ff fbe7 	bl	8000c8c <controlMotor2>
	controlMotor3(_motor3Speed);
 80014be:	ed97 7b02 	vldr	d7, [r7, #8]
 80014c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80014c6:	ee17 0a90 	vmov	r0, s15
 80014ca:	f7ff fc1b 	bl	8000d04 <controlMotor3>
	controlMotor4(_motor4Speed);
 80014ce:	ed97 7b00 	vldr	d7, [r7]
 80014d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80014d6:	ee17 0a90 	vmov	r0, s15
 80014da:	f7ff fc4f 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 80014de:	f7ff fa19 	bl	8000914 <spinalCordTrans>
}
 80014e2:	bf00      	nop
 80014e4:	3734      	adds	r7, #52	; 0x34
 80014e6:	46bd      	mov	sp, r7
 80014e8:	ecbd 8b02 	vpop	{d8}
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	7f3321d2 	.word	0x7f3321d2
 80014f4:	4002d97c 	.word	0x4002d97c
	...
 8001500:	54442d18 	.word	0x54442d18
 8001504:	3fe921fb 	.word	0x3fe921fb
 8001508:	24000948 	.word	0x24000948
 800150c:	24000bd8 	.word	0x24000bd8
 8001510:	24000c18 	.word	0x24000c18
 8001514:	24000078 	.word	0x24000078
 8001518:	240001f8 	.word	0x240001f8
 800151c:	24000ce8 	.word	0x24000ce8
 8001520:	24000be0 	.word	0x24000be0
 8001524:	24000920 	.word	0x24000920

08001528 <roR_pit_yaw_mixSpeed>:

void roR_pit_yaw_mixSpeed(void)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	ed2d 8b02 	vpush	{d8}
 800152e:	b08d      	sub	sp, #52	; 0x34
 8001530:	af00      	add	r7, sp, #0
	double _roR_pit_speed = sqrt(roRPID*roRPID + pitPID*pitPID);
 8001532:	4b75      	ldr	r3, [pc, #468]	; (8001708 <roR_pit_yaw_mixSpeed+0x1e0>)
 8001534:	ed93 6b00 	vldr	d6, [r3]
 8001538:	4b73      	ldr	r3, [pc, #460]	; (8001708 <roR_pit_yaw_mixSpeed+0x1e0>)
 800153a:	ed93 7b00 	vldr	d7, [r3]
 800153e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001542:	4b72      	ldr	r3, [pc, #456]	; (800170c <roR_pit_yaw_mixSpeed+0x1e4>)
 8001544:	ed93 5b00 	vldr	d5, [r3]
 8001548:	4b70      	ldr	r3, [pc, #448]	; (800170c <roR_pit_yaw_mixSpeed+0x1e4>)
 800154a:	ed93 7b00 	vldr	d7, [r3]
 800154e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001552:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001556:	eeb0 0b47 	vmov.f64	d0, d7
 800155a:	f00f fe41 	bl	80111e0 <sqrt>
 800155e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roR_pit_dir = atan2(-roRPID, pitPID);
 8001562:	4b69      	ldr	r3, [pc, #420]	; (8001708 <roR_pit_yaw_mixSpeed+0x1e0>)
 8001564:	ed93 7b00 	vldr	d7, [r3]
 8001568:	eeb1 7b47 	vneg.f64	d7, d7
 800156c:	4b67      	ldr	r3, [pc, #412]	; (800170c <roR_pit_yaw_mixSpeed+0x1e4>)
 800156e:	ed93 6b00 	vldr	d6, [r3]
 8001572:	eeb0 1b46 	vmov.f64	d1, d6
 8001576:	eeb0 0b47 	vmov.f64	d0, d7
 800157a:	f00f fe2d 	bl	80111d8 <atan2>
 800157e:	ed87 0b08 	vstr	d0, [r7, #32]
//	double _motor1Speed = yawPID + -(_roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0);
//	double _motor2Speed = yawPID + -(_roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0);
//	double _motor3Speed = yawPID +   _roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0;
//	double _motor4Speed = yawPID +   _roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0;

	double _motor1Speed = yawPID*factorYawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 - _roR_pit_dir) + 0.0);
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <roR_pit_yaw_mixSpeed+0x1e8>)
 8001584:	ed93 6b00 	vldr	d6, [r3]
 8001588:	4b62      	ldr	r3, [pc, #392]	; (8001714 <roR_pit_yaw_mixSpeed+0x1ec>)
 800158a:	ed93 7b00 	vldr	d7, [r3]
 800158e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001592:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80016f0 <roR_pit_yaw_mixSpeed+0x1c8>
 8001596:	ed97 7b08 	vldr	d7, [r7, #32]
 800159a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800159e:	eeb0 0b47 	vmov.f64	d0, d7
 80015a2:	f00f fddd 	bl	8011160 <cos>
 80015a6:	eeb0 6b40 	vmov.f64	d6, d0
 80015aa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80015ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015b2:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80016f8 <roR_pit_yaw_mixSpeed+0x1d0>
 80015b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015ba:	ee38 7b07 	vadd.f64	d7, d8, d7
 80015be:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID*factorYawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 + _roR_pit_dir) - 0.0);
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <roR_pit_yaw_mixSpeed+0x1e8>)
 80015c4:	ed93 6b00 	vldr	d6, [r3]
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <roR_pit_yaw_mixSpeed+0x1ec>)
 80015ca:	ed93 7b00 	vldr	d7, [r3]
 80015ce:	ee26 8b07 	vmul.f64	d8, d6, d7
 80015d2:	ed97 7b08 	vldr	d7, [r7, #32]
 80015d6:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80016f0 <roR_pit_yaw_mixSpeed+0x1c8>
 80015da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015de:	eeb0 0b47 	vmov.f64	d0, d7
 80015e2:	f00f fdbd 	bl	8011160 <cos>
 80015e6:	eeb0 6b40 	vmov.f64	d6, d0
 80015ea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80015ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015f2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80015f6:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID*factorYawPID +  _roR_pit_speed *cos(    M_PI/4.0 + _roR_pit_dir) + 0.0;
 80015fa:	4b45      	ldr	r3, [pc, #276]	; (8001710 <roR_pit_yaw_mixSpeed+0x1e8>)
 80015fc:	ed93 6b00 	vldr	d6, [r3]
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <roR_pit_yaw_mixSpeed+0x1ec>)
 8001602:	ed93 7b00 	vldr	d7, [r3]
 8001606:	ee26 8b07 	vmul.f64	d8, d6, d7
 800160a:	ed97 7b08 	vldr	d7, [r7, #32]
 800160e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001700 <roR_pit_yaw_mixSpeed+0x1d8>
 8001612:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001616:	eeb0 0b47 	vmov.f64	d0, d7
 800161a:	f00f fda1 	bl	8011160 <cos>
 800161e:	eeb0 6b40 	vmov.f64	d6, d0
 8001622:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800162a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800162e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80016f8 <roR_pit_yaw_mixSpeed+0x1d0>
 8001632:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001636:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID*factorYawPID +  _roR_pit_speed *cos(    M_PI/4.0 - _roR_pit_dir) - 0.0;
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <roR_pit_yaw_mixSpeed+0x1e8>)
 800163c:	ed93 6b00 	vldr	d6, [r3]
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <roR_pit_yaw_mixSpeed+0x1ec>)
 8001642:	ed93 7b00 	vldr	d7, [r3]
 8001646:	ee26 8b07 	vmul.f64	d8, d6, d7
 800164a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001700 <roR_pit_yaw_mixSpeed+0x1d8>
 800164e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001652:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001656:	eeb0 0b47 	vmov.f64	d0, d7
 800165a:	f00f fd81 	bl	8011160 <cos>
 800165e:	eeb0 6b40 	vmov.f64	d6, d0
 8001662:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001666:	ee26 7b07 	vmul.f64	d7, d6, d7
 800166a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800166e:	ed87 7b00 	vstr	d7, [r7]
//	b = 1.0 - _motor3Speed;
//	absSpeed = _roR_pit_speed;
//	dir = _roR_pit_dir;
//	cos_ = cos(3*M_PI/4 - _roR_pit_dir);
//	motor1_debug = absSpeed*cos_;
	motor1Speed_ = _motor1Speed;
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <roR_pit_yaw_mixSpeed+0x1f0>)
 8001674:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001678:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <roR_pit_yaw_mixSpeed+0x1f4>)
 800167e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001682:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <roR_pit_yaw_mixSpeed+0x1f8>)
 8001688:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800168c:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <roR_pit_yaw_mixSpeed+0x1fc>)
 8001692:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001696:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 800169a:	ed97 7b06 	vldr	d7, [r7, #24]
 800169e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7ff fab5 	bl	8000c14 <controlMotor1>
	controlMotor2(_motor2Speed);
 80016aa:	ed97 7b04 	vldr	d7, [r7, #16]
 80016ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7ff fae9 	bl	8000c8c <controlMotor2>
	controlMotor3(_motor3Speed);
 80016ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80016be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016c2:	ee17 0a90 	vmov	r0, s15
 80016c6:	f7ff fb1d 	bl	8000d04 <controlMotor3>
	controlMotor4(_motor4Speed);
 80016ca:	ed97 7b00 	vldr	d7, [r7]
 80016ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016d2:	ee17 0a90 	vmov	r0, s15
 80016d6:	f7ff fb51 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 80016da:	f7ff f91b 	bl	8000914 <spinalCordTrans>
}
 80016de:	bf00      	nop
 80016e0:	3734      	adds	r7, #52	; 0x34
 80016e2:	46bd      	mov	sp, r7
 80016e4:	ecbd 8b02 	vpop	{d8}
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	7f3321d2 	.word	0x7f3321d2
 80016f4:	4002d97c 	.word	0x4002d97c
	...
 8001700:	54442d18 	.word	0x54442d18
 8001704:	3fe921fb 	.word	0x3fe921fb
 8001708:	24000430 	.word	0x24000430
 800170c:	24000bd8 	.word	0x24000bd8
 8001710:	24000c18 	.word	0x24000c18
 8001714:	24000078 	.word	0x24000078
 8001718:	240001f8 	.word	0x240001f8
 800171c:	24000ce8 	.word	0x24000ce8
 8001720:	24000be0 	.word	0x24000be0
 8001724:	24000920 	.word	0x24000920

08001728 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fa71 	bl	8000c14 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8001732:	f04f 30ff 	mov.w	r0, #4294967295
 8001736:	f7ff faa9 	bl	8000c8c <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fae2 	bl	8000d04 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff fb1a 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 8001748:	f7ff f8e4 	bl	8000914 <spinalCordTrans>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <freeMotor>:

void freeMotor(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	controlMotor1(0);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fa5d 	bl	8000c14 <controlMotor1>
	controlMotor2(0);
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fa96 	bl	8000c8c <controlMotor2>
	controlMotor3(0);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff facf 	bl	8000d04 <controlMotor3>
	controlMotor4(0);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fb08 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 800176c:	f7ff f8d2 	bl	8000914 <spinalCordTrans>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <roL_Pit_Yaw_GoTo>:
//	PIDpit(pitchDistance, posPit);
//	roL_pit_yaw_mixSpeed();
//}

void roL_Pit_Yaw_GoTo(uint32_t posRoL, uint32_t posPit, uint32_t posYaw)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
	PIDyaw(compassData, posYaw);
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <roL_Pit_Yaw_GoTo+0x58>)
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f7ff fb33 	bl	8000df8 <PIDyaw>
	PIDroL(leftDistance, posRoL);
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <roL_Pit_Yaw_GoTo+0x5c>)
 8001794:	ed93 7b00 	vldr	d7, [r3]
 8001798:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4619      	mov	r1, r3
 80017a0:	ee17 0a90 	vmov	r0, s15
 80017a4:	f7ff fc78 	bl	8001098 <PIDroL>
	PIDpit(pitchDistance, posPit);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <roL_Pit_Yaw_GoTo+0x60>)
 80017aa:	ed93 7b00 	vldr	d7, [r3]
 80017ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4619      	mov	r1, r3
 80017b6:	ee17 0a90 	vmov	r0, s15
 80017ba:	f7ff fd17 	bl	80011ec <PIDpit>
	roL_pit_yaw_mixSpeed();
 80017be:	f7ff fdb7 	bl	8001330 <roL_pit_yaw_mixSpeed>
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24000930 	.word	0x24000930
 80017d0:	24000bc0 	.word	0x24000bc0
 80017d4:	24000d00 	.word	0x24000d00

080017d8 <roR_Pit_Yaw_GoTo>:


void roR_Pit_Yaw_GoTo(uint32_t posRoR, uint32_t posPit, uint32_t posYaw)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	PIDyaw(compassData, posYaw);
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <roR_Pit_Yaw_GoTo+0x58>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f7ff fb01 	bl	8000df8 <PIDyaw>
	PIDroR(rigtDistance, posRoR);
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <roR_Pit_Yaw_GoTo+0x5c>)
 80017f8:	ed93 7b00 	vldr	d7, [r3]
 80017fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4619      	mov	r1, r3
 8001804:	ee17 0a90 	vmov	r0, s15
 8001808:	f7ff fb9c 	bl	8000f44 <PIDroR>
	PIDpit(pitchDistance, posPit);
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <roR_Pit_Yaw_GoTo+0x60>)
 800180e:	ed93 7b00 	vldr	d7, [r3]
 8001812:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4619      	mov	r1, r3
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7ff fce5 	bl	80011ec <PIDpit>
	roR_pit_yaw_mixSpeed();
 8001822:	f7ff fe81 	bl	8001528 <roR_pit_yaw_mixSpeed>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	24000930 	.word	0x24000930
 8001834:	24000970 	.word	0x24000970
 8001838:	24000d00 	.word	0x24000d00

0800183c <goCross>:
	roR_pit_yaw_mixSpeed();
}


void goCross(uint8_t _speed, int cross, int posYaw)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	73fb      	strb	r3, [r7, #15]
	if(cross == 1)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d13a      	bne.n	80018c6 <goCross+0x8a>
	{
		PIDyaw(compassData, posYaw);
 8001850:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <goCross+0x208>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff facd 	bl	8000df8 <PIDyaw>
		controlMotor1(_speed+yawPID);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001868:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <goCross+0x20c>)
 800186a:	ed93 7b00 	vldr	d7, [r3]
 800186e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001872:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001876:	ee17 0a90 	vmov	r0, s15
 800187a:	f7ff f9cb 	bl	8000c14 <controlMotor1>
		controlMotor2(yawPID);
 800187e:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <goCross+0x20c>)
 8001880:	ed93 7b00 	vldr	d7, [r3]
 8001884:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001888:	ee17 0a90 	vmov	r0, s15
 800188c:	f7ff f9fe 	bl	8000c8c <controlMotor2>
		controlMotor3(-_speed + yawPID);
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	425b      	negs	r3, r3
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <goCross+0x20c>)
 800189e:	ed93 7b00 	vldr	d7, [r3]
 80018a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80018aa:	ee17 0a90 	vmov	r0, s15
 80018ae:	f7ff fa29 	bl	8000d04 <controlMotor3>
		controlMotor4(yawPID);
 80018b2:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <goCross+0x20c>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80018bc:	ee17 0a90 	vmov	r0, s15
 80018c0:	f7ff fa5c 	bl	8000d7c <controlMotor4>
 80018c4:	e0b8      	b.n	8001a38 <goCross+0x1fc>
	}
	else if(cross == 2)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d13a      	bne.n	8001942 <goCross+0x106>
	{
		PIDyaw(compassData, posYaw);
 80018cc:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <goCross+0x208>)
 80018ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa8f 	bl	8000df8 <PIDyaw>
		controlMotor1(yawPID);
 80018da:	4b5b      	ldr	r3, [pc, #364]	; (8001a48 <goCross+0x20c>)
 80018dc:	ed93 7b00 	vldr	d7, [r3]
 80018e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80018e4:	ee17 0a90 	vmov	r0, s15
 80018e8:	f7ff f994 	bl	8000c14 <controlMotor1>
		controlMotor2(_speed+yawPID);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018f6:	4b54      	ldr	r3, [pc, #336]	; (8001a48 <goCross+0x20c>)
 80018f8:	ed93 7b00 	vldr	d7, [r3]
 80018fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001900:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7ff f9c0 	bl	8000c8c <controlMotor2>
		controlMotor3(yawPID);
 800190c:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <goCross+0x20c>)
 800190e:	ed93 7b00 	vldr	d7, [r3]
 8001912:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001916:	ee17 0a90 	vmov	r0, s15
 800191a:	f7ff f9f3 	bl	8000d04 <controlMotor3>
		controlMotor4(-_speed + yawPID);
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	425b      	negs	r3, r3
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <goCross+0x20c>)
 800192c:	ed93 7b00 	vldr	d7, [r3]
 8001930:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001934:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001938:	ee17 0a90 	vmov	r0, s15
 800193c:	f7ff fa1e 	bl	8000d7c <controlMotor4>
 8001940:	e07a      	b.n	8001a38 <goCross+0x1fc>
	}
	else if(cross == 3)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d13a      	bne.n	80019be <goCross+0x182>
	{
		PIDyaw(compassData, posYaw);
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <goCross+0x208>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fa51 	bl	8000df8 <PIDyaw>
		controlMotor1(-_speed + yawPID);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	425b      	negs	r3, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <goCross+0x20c>)
 8001964:	ed93 7b00 	vldr	d7, [r3]
 8001968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800196c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001970:	ee17 0a90 	vmov	r0, s15
 8001974:	f7ff f94e 	bl	8000c14 <controlMotor1>
		controlMotor2(yawPID);
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <goCross+0x20c>)
 800197a:	ed93 7b00 	vldr	d7, [r3]
 800197e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001982:	ee17 0a90 	vmov	r0, s15
 8001986:	f7ff f981 	bl	8000c8c <controlMotor2>
		controlMotor3(_speed + yawPID);
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <goCross+0x20c>)
 8001996:	ed93 7b00 	vldr	d7, [r3]
 800199a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800199e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7ff f9ad 	bl	8000d04 <controlMotor3>
		controlMotor4(yawPID);
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <goCross+0x20c>)
 80019ac:	ed93 7b00 	vldr	d7, [r3]
 80019b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019b4:	ee17 0a90 	vmov	r0, s15
 80019b8:	f7ff f9e0 	bl	8000d7c <controlMotor4>
 80019bc:	e03c      	b.n	8001a38 <goCross+0x1fc>
	}
	else if(cross == 4)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d139      	bne.n	8001a38 <goCross+0x1fc>
	{
		PIDyaw(compassData, posYaw);
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <goCross+0x208>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa13 	bl	8000df8 <PIDyaw>
		controlMotor1(yawPID);
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <goCross+0x20c>)
 80019d4:	ed93 7b00 	vldr	d7, [r3]
 80019d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019dc:	ee17 0a90 	vmov	r0, s15
 80019e0:	f7ff f918 	bl	8000c14 <controlMotor1>
		controlMotor2(-_speed+yawPID);
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	425b      	negs	r3, r3
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <goCross+0x20c>)
 80019f2:	ed93 7b00 	vldr	d7, [r3]
 80019f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019fe:	ee17 0a90 	vmov	r0, s15
 8001a02:	f7ff f943 	bl	8000c8c <controlMotor2>
		controlMotor3(yawPID);
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <goCross+0x20c>)
 8001a08:	ed93 7b00 	vldr	d7, [r3]
 8001a0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a10:	ee17 0a90 	vmov	r0, s15
 8001a14:	f7ff f976 	bl	8000d04 <controlMotor3>
		controlMotor4(_speed + yawPID);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <goCross+0x20c>)
 8001a24:	ed93 7b00 	vldr	d7, [r3]
 8001a28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7ff f9a2 	bl	8000d7c <controlMotor4>
	}
	spinalCordTrans();
 8001a38:	f7fe ff6c 	bl	8000914 <spinalCordTrans>
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	24000930 	.word	0x24000930
 8001a48:	24000c18 	.word	0x24000c18

08001a4c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <positionControl_Init+0x18>)
 8001a52:	f00b f857 	bl	800cb04 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <positionControl_Init+0x1c>)
 8001a5c:	f008 f9a8 	bl	8009db0 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000d14 	.word	0x24000d14
 8001a68:	58021000 	.word	0x58021000

08001a6c <legShoot>:
//
void legShoot()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8001a72:	2032      	movs	r0, #50	; 0x32
 8001a74:	f003 feee 	bl	8005854 <HAL_Delay>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);	//enable legEn Pin
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <legShoot+0x74>)
 8001a7e:	f008 f997 	bl	8009db0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a88:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <legShoot+0x78>)
 8001a8a:	f008 f991 	bl	8009db0 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001a8e:	2032      	movs	r0, #50	; 0x32
 8001a90:	f003 fee0 	bl	8005854 <HAL_Delay>
	  for(int i = 0; i < LEG_PUL_SHOOT; ++i)
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	e019      	b.n	8001ace <legShoot+0x62>
	  {
		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <legShoot+0x78>)
 8001aa2:	f008 f985 	bl	8009db0 <HAL_GPIO_WritePin>
		  delayUs(LEG_DELAYUS_SHOOT);
 8001aa6:	2008      	movs	r0, #8
 8001aa8:	f7fe fe0a 	bl	80006c0 <delayUs>
		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab2:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <legShoot+0x78>)
 8001ab4:	f008 f97c 	bl	8009db0 <HAL_GPIO_WritePin>
		  delayUs(LEG_DELAYUS_SHOOT);
 8001ab8:	2008      	movs	r0, #8
 8001aba:	f7fe fe01 	bl	80006c0 <delayUs>
		  trackingLegShoot++;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <legShoot+0x7c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <legShoot+0x7c>)
 8001ac6:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < LEG_PUL_SHOOT; ++i)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3301      	adds	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f240 5213 	movw	r2, #1299	; 0x513
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	dde0      	ble.n	8001a9a <legShoot+0x2e>
	  }
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58021000 	.word	0x58021000
 8001ae4:	58020c00 	.word	0x58020c00
 8001ae8:	2400097c 	.word	0x2400097c

08001aec <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d16e      	bne.n	8001bde <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d16a      	bne.n	8001bde <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11e      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b16:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b18:	f008 f94a 	bl	8009db0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b20:	4834      	ldr	r0, [pc, #208]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b22:	f008 f95e 	bl	8009de2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b2e:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a31      	ldr	r2, [pc, #196]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b38:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2bc7      	cmp	r3, #199	; 0xc7
 8001b40:	dd05      	ble.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d11f      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5c:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b5e:	f008 f927 	bl	8009db0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b66:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b68:	f008 f93b 	bl	8009de2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b74:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b7e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001b88:	db05      	blt.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d11f      	bne.n	8001bde <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ba6:	f008 f903 	bl	8009db0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bb0:	f008 f917 	bl	8009de2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bbc:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bc6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001bd0:	db05      	blt.n	8001bde <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	24000d14 	.word	0x24000d14
 8001bec:	24000bb0 	.word	0x24000bb0
 8001bf0:	24000cc0 	.word	0x24000cc0
 8001bf4:	58020c00 	.word	0x58020c00
 8001bf8:	24000ba0 	.word	0x24000ba0
 8001bfc:	24000c04 	.word	0x24000c04

08001c00 <GetSector>:
void solveDT50_Left(uint16_t a1, uint16_t a2);
void solveDT50_Rigt(uint16_t a1, uint16_t a2);
void solveDT50_Pitch(uint16_t a1, uint16_t a2);

uint32_t GetSector(uint32_t Address)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <GetSector+0x150>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d803      	bhi.n	8001c1c <GetSector+0x1c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c1a:	d207      	bcs.n	8001c2c <GetSector+0x2c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <GetSector+0x154>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d806      	bhi.n	8001c32 <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001c2a:	d302      	bcc.n	8001c32 <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e086      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <GetSector+0x158>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d803      	bhi.n	8001c42 <GetSector+0x42>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a44      	ldr	r2, [pc, #272]	; (8001d50 <GetSector+0x150>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d807      	bhi.n	8001c52 <GetSector+0x52>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <GetSector+0x15c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d806      	bhi.n	8001c58 <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a41      	ldr	r2, [pc, #260]	; (8001d54 <GetSector+0x154>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d902      	bls.n	8001c58 <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e073      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a41      	ldr	r2, [pc, #260]	; (8001d60 <GetSector+0x160>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d803      	bhi.n	8001c68 <GetSector+0x68>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3d      	ldr	r2, [pc, #244]	; (8001d58 <GetSector+0x158>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d807      	bhi.n	8001c78 <GetSector+0x78>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3e      	ldr	r2, [pc, #248]	; (8001d64 <GetSector+0x164>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d806      	bhi.n	8001c7e <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <GetSector+0x15c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d902      	bls.n	8001c7e <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e060      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <GetSector+0x168>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d803      	bhi.n	8001c8e <GetSector+0x8e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a35      	ldr	r2, [pc, #212]	; (8001d60 <GetSector+0x160>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d807      	bhi.n	8001c9e <GetSector+0x9e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <GetSector+0x16c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d806      	bhi.n	8001ca4 <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <GetSector+0x164>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d902      	bls.n	8001ca4 <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e04d      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <GetSector+0x170>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d803      	bhi.n	8001cb4 <GetSector+0xb4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <GetSector+0x168>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d807      	bhi.n	8001cc4 <GetSector+0xc4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <GetSector+0x174>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d806      	bhi.n	8001cca <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <GetSector+0x16c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d902      	bls.n	8001cca <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e03a      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <GetSector+0x178>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d803      	bhi.n	8001cda <GetSector+0xda>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <GetSector+0x170>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d807      	bhi.n	8001cea <GetSector+0xea>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <GetSector+0x17c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d806      	bhi.n	8001cf0 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <GetSector+0x174>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d902      	bls.n	8001cf0 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8001cea:	2305      	movs	r3, #5
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e027      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <GetSector+0x180>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d803      	bhi.n	8001d00 <GetSector+0x100>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <GetSector+0x178>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d807      	bhi.n	8001d10 <GetSector+0x110>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <GetSector+0x184>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d806      	bhi.n	8001d16 <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <GetSector+0x17c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d902      	bls.n	8001d16 <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 8001d10:	2306      	movs	r3, #6
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e014      	b.n	8001d40 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001d1c:	d203      	bcs.n	8001d26 <GetSector+0x126>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <GetSector+0x180>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d807      	bhi.n	8001d36 <GetSector+0x136>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <GetSector+0x188>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d806      	bhi.n	8001d3c <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <GetSector+0x184>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d902      	bls.n	8001d3c <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 8001d36:	2307      	movs	r3, #7
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e001      	b.n	8001d40 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8001d40:	68fb      	ldr	r3, [r7, #12]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	0801ffff 	.word	0x0801ffff
 8001d54:	0811ffff 	.word	0x0811ffff
 8001d58:	0803ffff 	.word	0x0803ffff
 8001d5c:	0813ffff 	.word	0x0813ffff
 8001d60:	0805ffff 	.word	0x0805ffff
 8001d64:	0815ffff 	.word	0x0815ffff
 8001d68:	0807ffff 	.word	0x0807ffff
 8001d6c:	0817ffff 	.word	0x0817ffff
 8001d70:	0809ffff 	.word	0x0809ffff
 8001d74:	0819ffff 	.word	0x0819ffff
 8001d78:	080bffff 	.word	0x080bffff
 8001d7c:	081bffff 	.word	0x081bffff
 8001d80:	080dffff 	.word	0x080dffff
 8001d84:	081dffff 	.word	0x081dffff
 8001d88:	081ffffe 	.word	0x081ffffe

08001d8c <writeFLASH>:

void writeFLASH()
{
 8001d8c:	b598      	push	{r3, r4, r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	FlashWord[0] = (adcLeft_2000<<0)|(adcLeft_1000<<16);
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <writeFLASH+0x108>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <writeFLASH+0x10c>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <writeFLASH+0x110>)
 8001da4:	e9c2 3400 	strd	r3, r4, [r2]
	FlashWord[1] = (adcPitc_2000<<0)|(adcPitc_1000<<16);
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <writeFLASH+0x114>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <writeFLASH+0x118>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	4313      	orrs	r3, r2
 8001db6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001dba:	4a38      	ldr	r2, [pc, #224]	; (8001e9c <writeFLASH+0x110>)
 8001dbc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	FlashWord[2] = (adcRigt_2000<<0)|(adcRigt_1000<<16);
 8001dc0:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <writeFLASH+0x11c>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <writeFLASH+0x120>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001dd2:	4a32      	ldr	r2, [pc, #200]	; (8001e9c <writeFLASH+0x110>)
 8001dd4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	FlashWord[3] = 0xFFFFFFFF;
 8001dd8:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <writeFLASH+0x110>)
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	f04f 0400 	mov.w	r4, #0
 8001de2:	e9c2 3406 	strd	r3, r4, [r2, #24]
//	FlashWord[0] = 0;
//	FlashWord[1] = 0;
//	FlashWord[2] = 0;

	HAL_FLASH_Unlock();
 8001de6:	f007 fba9 	bl	800953c <HAL_FLASH_Unlock>
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 8001dea:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <writeFLASH+0x124>)
 8001dec:	f7ff ff08 	bl	8001c00 <GetSector>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <writeFLASH+0x128>)
 8001df4:	601a      	str	r2, [r3, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8001df6:	4830      	ldr	r0, [pc, #192]	; (8001eb8 <writeFLASH+0x12c>)
 8001df8:	f7ff ff02 	bl	8001c00 <GetSector>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <writeFLASH+0x128>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <writeFLASH+0x130>)
 8001e08:	6013      	str	r3, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <writeFLASH+0x134>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <writeFLASH+0x134>)
 8001e12:	2220      	movs	r2, #32
 8001e14:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks         = FLASH_BANK_2;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <writeFLASH+0x134>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector        = FirstSector;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <writeFLASH+0x128>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <writeFLASH+0x134>)
 8001e22:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <writeFLASH+0x130>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <writeFLASH+0x134>)
 8001e2a:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001e2c:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <writeFLASH+0x138>)
 8001e2e:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <writeFLASH+0x134>)
 8001e30:	f007 fc84 	bl	800973c <HAL_FLASHEx_Erase>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <writeFLASH+0xbe>
	  user can call function 'HAL_FLASH_GetError()'
	*/
	/* Infinite loop */
		while (1)
		{
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4822      	ldr	r0, [pc, #136]	; (8001ec8 <writeFLASH+0x13c>)
 8001e3e:	f007 ffd0 	bl	8009de2 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001e42:	2064      	movs	r0, #100	; 0x64
 8001e44:	f003 fd06 	bl	8005854 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001e48:	e7f7      	b.n	8001e3a <writeFLASH+0xae>
		}
	}

	Address = FLASH_USER_START_ADDR;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <writeFLASH+0x140>)
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <writeFLASH+0x124>)
 8001e4e:	601a      	str	r2, [r3, #0]

	while (Address < FLASH_USER_END_ADDR)
 8001e50:	e017      	b.n	8001e82 <writeFLASH+0xf6>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <writeFLASH+0x140>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <writeFLASH+0x110>)
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f007 faec 	bl	8009438 <HAL_FLASH_Program>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <writeFLASH+0xe6>
		{
			Address = Address + 32; /* increment for the next Flash word*/
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <writeFLASH+0x140>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <writeFLASH+0x140>)
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e007      	b.n	8001e82 <writeFLASH+0xf6>
		{
		  /* Error occurred while writing data in Flash memory.
			 User can add here some code to deal with this error */
		  while (1)
		  {
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001e72:	2102      	movs	r1, #2
 8001e74:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <writeFLASH+0x13c>)
 8001e76:	f007 ffb4 	bl	8009de2 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001e7a:	2064      	movs	r0, #100	; 0x64
 8001e7c:	f003 fcea 	bl	8005854 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001e80:	e7f7      	b.n	8001e72 <writeFLASH+0xe6>
	while (Address < FLASH_USER_END_ADDR)
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <writeFLASH+0x140>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <writeFLASH+0x144>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d9e2      	bls.n	8001e52 <writeFLASH+0xc6>
		  }
		}
	}
	HAL_FLASH_Lock();
 8001e8c:	f007 fb90 	bl	80095b0 <HAL_FLASH_Lock>
}
 8001e90:	bf00      	nop
 8001e92:	bd98      	pop	{r3, r4, r7, pc}
 8001e94:	24000082 	.word	0x24000082
 8001e98:	24000080 	.word	0x24000080
 8001e9c:	240002c0 	.word	0x240002c0
 8001ea0:	24000086 	.word	0x24000086
 8001ea4:	24000084 	.word	0x24000084
 8001ea8:	2400008a 	.word	0x2400008a
 8001eac:	24000088 	.word	0x24000088
 8001eb0:	081e0000 	.word	0x081e0000
 8001eb4:	240001a8 	.word	0x240001a8
 8001eb8:	081ffffe 	.word	0x081ffffe
 8001ebc:	240001ac 	.word	0x240001ac
 8001ec0:	24000958 	.word	0x24000958
 8001ec4:	240001b4 	.word	0x240001b4
 8001ec8:	58021000 	.word	0x58021000
 8001ecc:	240001b0 	.word	0x240001b0
 8001ed0:	081ffffd 	.word	0x081ffffd

08001ed4 <readFLASH>:

void readFLASH()
{
 8001ed4:	b598      	push	{r3, r4, r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	Address = FLASH_USER_START_ADDR;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <readFLASH+0xec>)
 8001eda:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <readFLASH+0xf0>)
 8001edc:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <readFLASH+0xf4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

	DT50Left = *(uint64_t*) FLASH_USER_START_ADDR;
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <readFLASH+0xf0>)
 8001ee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eea:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <readFLASH+0xf8>)
 8001eec:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Left_2000 = (DT50Left>>0)&0xFFFF;
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <readFLASH+0xf8>)
 8001ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <readFLASH+0xfc>)
 8001efa:	801a      	strh	r2, [r3, #0]
	DT50Left_1000 = (DT50Left>>16)&0xFFFF;
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <readFLASH+0xf8>)
 8001efe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f04f 0400 	mov.w	r4, #0
 8001f0a:	0c0b      	lsrs	r3, r1, #16
 8001f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f10:	0c14      	lsrs	r4, r2, #16
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <readFLASH+0x100>)
 8001f16:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f18:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Pitc = *(uint64_t*) (FLASH_USER_START_ADDR+8);
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <readFLASH+0x104>)
 8001f1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f22:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <readFLASH+0x108>)
 8001f24:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Pitc_2000 = (DT50Pitc>>0)&0xFFFF;
 8001f28:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <readFLASH+0x108>)
 8001f2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <readFLASH+0x10c>)
 8001f32:	801a      	strh	r2, [r3, #0]
	DT50Pitc_1000 = (DT50Pitc>>16)&0xFFFF;
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <readFLASH+0x108>)
 8001f36:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	f04f 0400 	mov.w	r4, #0
 8001f42:	0c0b      	lsrs	r3, r1, #16
 8001f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f48:	0c14      	lsrs	r4, r2, #16
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <readFLASH+0x110>)
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Rigt = *(uint64_t*) (FLASH_USER_START_ADDR+16);
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <readFLASH+0x114>)
 8001f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f5a:	4a24      	ldr	r2, [pc, #144]	; (8001fec <readFLASH+0x118>)
 8001f5c:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Rigt_2000 = (DT50Rigt>>0)&0xFFFF;
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <readFLASH+0x118>)
 8001f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <readFLASH+0x11c>)
 8001f6a:	801a      	strh	r2, [r3, #0]
	DT50Rigt_1000 = (DT50Rigt>>16)&0xFFFF;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <readFLASH+0x118>)
 8001f6e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	0c0b      	lsrs	r3, r1, #16
 8001f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f80:	0c14      	lsrs	r4, r2, #16
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <readFLASH+0x120>)
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	f3bf 8f4f 	dsb	sy
	__DSB();

	solveDT50_Left(DT50Left_1000, DT50Left_2000);
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <readFLASH+0x100>)
 8001f8e:	881a      	ldrh	r2, [r3, #0]
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <readFLASH+0xfc>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 fa20 	bl	80023dc <solveDT50_Left>
	solveDT50_Pitch(DT50Pitc_1000, DT50Pitc_2000);
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <readFLASH+0x110>)
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <readFLASH+0x10c>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f000 fab4 	bl	8002514 <solveDT50_Pitch>
	solveDT50_Rigt(DT50Rigt_1000, DT50Rigt_2000);
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <readFLASH+0x120>)
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <readFLASH+0x11c>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f000 fb48 	bl	800264c <solveDT50_Rigt>
//		MemoryProgramStatus++;
//	  }
//	  Address +=8;
//		}
//	}
}
 8001fbc:	bf00      	nop
 8001fbe:	bd98      	pop	{r3, r4, r7, pc}
 8001fc0:	240001b0 	.word	0x240001b0
 8001fc4:	081e0000 	.word	0x081e0000
 8001fc8:	240001b8 	.word	0x240001b8
 8001fcc:	240001c0 	.word	0x240001c0
 8001fd0:	24000c20 	.word	0x24000c20
 8001fd4:	24000bb6 	.word	0x24000bb6
 8001fd8:	081e0008 	.word	0x081e0008
 8001fdc:	240001c8 	.word	0x240001c8
 8001fe0:	24000870 	.word	0x24000870
 8001fe4:	24000cfe 	.word	0x24000cfe
 8001fe8:	081e0010 	.word	0x081e0010
 8001fec:	240001d0 	.word	0x240001d0
 8001ff0:	2400084c 	.word	0x2400084c
 8001ff4:	24000888 	.word	0x24000888

08001ff8 <getSample>:
void getSample()
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b096      	sub	sp, #88	; 0x58
 8001ffc:	af00      	add	r7, sp, #0
	int sumADC_Left, sumADC_Pitc, sumADC_Rigt;

	//lấy mẫu left 1000
	sumADC_Left = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8002002:	e014      	b.n	800202e <getSample+0x36>
	{
		ST7920_SendString(0,4, "LEFT 1");
 8002004:	4aba      	ldr	r2, [pc, #744]	; (80022f0 <getSample+0x2f8>)
 8002006:	2104      	movs	r1, #4
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe fd2b 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2102      	movs	r1, #2
 8002012:	48b8      	ldr	r0, [pc, #736]	; (80022f4 <getSample+0x2fc>)
 8002014:	f007 fecc 	bl	8009db0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002018:	2064      	movs	r0, #100	; 0x64
 800201a:	f003 fc1b 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	2102      	movs	r1, #2
 8002022:	48b4      	ldr	r0, [pc, #720]	; (80022f4 <getSample+0x2fc>)
 8002024:	f007 fec4 	bl	8009db0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002028:	2064      	movs	r0, #100	; 0x64
 800202a:	f003 fc13 	bl	8005854 <HAL_Delay>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 800202e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002032:	48b0      	ldr	r0, [pc, #704]	; (80022f4 <getSample+0x2fc>)
 8002034:	f007 fea4 	bl	8009d80 <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0e2      	beq.n	8002004 <getSample+0xc>
	}
	//đã gạt phải
	for(int i = 0; i < 100; ++i)
 800203e:	2300      	movs	r3, #0
 8002040:	64bb      	str	r3, [r7, #72]	; 0x48
 8002042:	e010      	b.n	8002066 <getSample+0x6e>
	{
		HAL_Delay(10);
 8002044:	200a      	movs	r0, #10
 8002046:	f003 fc05 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2102      	movs	r1, #2
 800204e:	48a9      	ldr	r0, [pc, #676]	; (80022f4 <getSample+0x2fc>)
 8002050:	f007 feae 	bl	8009db0 <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 8002054:	4ba8      	ldr	r3, [pc, #672]	; (80022f8 <getSample+0x300>)
 8002056:	885b      	ldrh	r3, [r3, #2]
 8002058:	461a      	mov	r2, r3
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	4413      	add	r3, r2
 800205e:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 8002060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002062:	3301      	adds	r3, #1
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	2b63      	cmp	r3, #99	; 0x63
 800206a:	ddeb      	ble.n	8002044 <getSample+0x4c>
	}
	adcLeft_1000 = sumADC_Left/100;
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	4aa3      	ldr	r2, [pc, #652]	; (80022fc <getSample+0x304>)
 8002070:	fb82 1203 	smull	r1, r2, r2, r3
 8002074:	1152      	asrs	r2, r2, #5
 8002076:	17db      	asrs	r3, r3, #31
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29a      	uxth	r2, r3
 800207c:	4ba0      	ldr	r3, [pc, #640]	; (8002300 <getSample+0x308>)
 800207e:	801a      	strh	r2, [r3, #0]
	char snum_left1000[5];
	sprintf(snum_left1000, "%d", adcLeft_1000);
 8002080:	4b9f      	ldr	r3, [pc, #636]	; (8002300 <getSample+0x308>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208a:	499e      	ldr	r1, [pc, #632]	; (8002304 <getSample+0x30c>)
 800208c:	4618      	mov	r0, r3
 800208e:	f00e fc5f 	bl	8010950 <siprintf>
//	itoa(adcLeft_1000, snum_left1000, 5);
	ST7920_SendString(1,0, snum_left1000);
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	461a      	mov	r2, r3
 8002098:	2100      	movs	r1, #0
 800209a:	2001      	movs	r0, #1
 800209c:	f7fe fce2 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu left 2000
	sumADC_Left = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 80020a4:	e009      	b.n	80020ba <getSample+0xc2>
	{
		ST7920_SendString(0,4, "LEFT 2");
 80020a6:	4a98      	ldr	r2, [pc, #608]	; (8002308 <getSample+0x310>)
 80020a8:	2104      	movs	r1, #4
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe fcda 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2102      	movs	r1, #2
 80020b4:	488f      	ldr	r0, [pc, #572]	; (80022f4 <getSample+0x2fc>)
 80020b6:	f007 fe7b 	bl	8009db0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 80020ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020be:	488d      	ldr	r0, [pc, #564]	; (80022f4 <getSample+0x2fc>)
 80020c0:	f007 fe5e 	bl	8009d80 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d0ed      	beq.n	80020a6 <getSample+0xae>
	}
	//đã gạt trái
	HAL_Delay(100);
 80020ca:	2064      	movs	r0, #100	; 0x64
 80020cc:	f003 fbc2 	bl	8005854 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 80020d0:	2300      	movs	r3, #0
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	e010      	b.n	80020f8 <getSample+0x100>
	{
		HAL_Delay(10);
 80020d6:	200a      	movs	r0, #10
 80020d8:	f003 fbbc 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 80020dc:	2201      	movs	r2, #1
 80020de:	2102      	movs	r1, #2
 80020e0:	4884      	ldr	r0, [pc, #528]	; (80022f4 <getSample+0x2fc>)
 80020e2:	f007 fe65 	bl	8009db0 <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 80020e6:	4b84      	ldr	r3, [pc, #528]	; (80022f8 <getSample+0x300>)
 80020e8:	885b      	ldrh	r3, [r3, #2]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ee:	4413      	add	r3, r2
 80020f0:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 80020f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f4:	3301      	adds	r3, #1
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	2b63      	cmp	r3, #99	; 0x63
 80020fc:	ddeb      	ble.n	80020d6 <getSample+0xde>
	}
	adcLeft_2000 = sumADC_Left/100;
 80020fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002100:	4a7e      	ldr	r2, [pc, #504]	; (80022fc <getSample+0x304>)
 8002102:	fb82 1203 	smull	r1, r2, r2, r3
 8002106:	1152      	asrs	r2, r2, #5
 8002108:	17db      	asrs	r3, r3, #31
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b7f      	ldr	r3, [pc, #508]	; (800230c <getSample+0x314>)
 8002110:	801a      	strh	r2, [r3, #0]
	char snum_left2000[5];
	sprintf(snum_left2000, "%d", adcLeft_2000);
 8002112:	4b7e      	ldr	r3, [pc, #504]	; (800230c <getSample+0x314>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4979      	ldr	r1, [pc, #484]	; (8002304 <getSample+0x30c>)
 800211e:	4618      	mov	r0, r3
 8002120:	f00e fc16 	bl	8010950 <siprintf>
//	itoa(adcLeft_2000, snum_left2000, 5);
	ST7920_SendString(1,5, snum_left2000);
 8002124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002128:	461a      	mov	r2, r3
 800212a:	2105      	movs	r1, #5
 800212c:	2001      	movs	r0, #1
 800212e:	f7fe fc99 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 1000
	sumADC_Pitc = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8002136:	e009      	b.n	800214c <getSample+0x154>
	{
		ST7920_SendString(0,4, "PITC 1");
 8002138:	4a75      	ldr	r2, [pc, #468]	; (8002310 <getSample+0x318>)
 800213a:	2104      	movs	r1, #4
 800213c:	2000      	movs	r0, #0
 800213e:	f7fe fc91 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2102      	movs	r1, #2
 8002146:	486b      	ldr	r0, [pc, #428]	; (80022f4 <getSample+0x2fc>)
 8002148:	f007 fe32 	bl	8009db0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 800214c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002150:	4868      	ldr	r0, [pc, #416]	; (80022f4 <getSample+0x2fc>)
 8002152:	f007 fe15 	bl	8009d80 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ed      	beq.n	8002138 <getSample+0x140>
	}
	//đã gạt phải
	HAL_Delay(100);
 800215c:	2064      	movs	r0, #100	; 0x64
 800215e:	f003 fb79 	bl	8005854 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8002162:	2300      	movs	r3, #0
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
 8002166:	e010      	b.n	800218a <getSample+0x192>
	{
		HAL_Delay(10);
 8002168:	200a      	movs	r0, #10
 800216a:	f003 fb73 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2102      	movs	r1, #2
 8002172:	4860      	ldr	r0, [pc, #384]	; (80022f4 <getSample+0x2fc>)
 8002174:	f007 fe1c 	bl	8009db0 <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8002178:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <getSample+0x300>)
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	461a      	mov	r2, r3
 800217e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002180:	4413      	add	r3, r2
 8002182:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8002184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002186:	3301      	adds	r3, #1
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
 800218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218c:	2b63      	cmp	r3, #99	; 0x63
 800218e:	ddeb      	ble.n	8002168 <getSample+0x170>
	}
	adcPitc_1000 = sumADC_Pitc/100;
 8002190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002192:	4a5a      	ldr	r2, [pc, #360]	; (80022fc <getSample+0x304>)
 8002194:	fb82 1203 	smull	r1, r2, r2, r3
 8002198:	1152      	asrs	r2, r2, #5
 800219a:	17db      	asrs	r3, r3, #31
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <getSample+0x31c>)
 80021a2:	801a      	strh	r2, [r3, #0]
	char snum_pitc1000[5];
	sprintf(snum_pitc1000, "%d", adcPitc_1000);
 80021a4:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <getSample+0x31c>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4955      	ldr	r1, [pc, #340]	; (8002304 <getSample+0x30c>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00e fbcd 	bl	8010950 <siprintf>
//	itoa(adcPitc_1000, snum_pitc1000, 5);
	ST7920_SendString(2,0, snum_pitc1000);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	461a      	mov	r2, r3
 80021bc:	2100      	movs	r1, #0
 80021be:	2002      	movs	r0, #2
 80021c0:	f7fe fc50 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 2000
	sumADC_Pitc = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 80021c8:	e009      	b.n	80021de <getSample+0x1e6>
	{
		ST7920_SendString(0,4, "PITC 2");
 80021ca:	4a53      	ldr	r2, [pc, #332]	; (8002318 <getSample+0x320>)
 80021cc:	2104      	movs	r1, #4
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7fe fc48 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2102      	movs	r1, #2
 80021d8:	4846      	ldr	r0, [pc, #280]	; (80022f4 <getSample+0x2fc>)
 80021da:	f007 fde9 	bl	8009db0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 80021de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e2:	4844      	ldr	r0, [pc, #272]	; (80022f4 <getSample+0x2fc>)
 80021e4:	f007 fdcc 	bl	8009d80 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d0ed      	beq.n	80021ca <getSample+0x1d2>
	}
	//đã gạt trái
	HAL_Delay(100);
 80021ee:	2064      	movs	r0, #100	; 0x64
 80021f0:	f003 fb30 	bl	8005854 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f8:	e010      	b.n	800221c <getSample+0x224>
	{
		HAL_Delay(10);
 80021fa:	200a      	movs	r0, #10
 80021fc:	f003 fb2a 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8002200:	2201      	movs	r2, #1
 8002202:	2102      	movs	r1, #2
 8002204:	483b      	ldr	r0, [pc, #236]	; (80022f4 <getSample+0x2fc>)
 8002206:	f007 fdd3 	bl	8009db0 <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <getSample+0x300>)
 800220c:	889b      	ldrh	r3, [r3, #4]
 800220e:	461a      	mov	r2, r3
 8002210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002212:	4413      	add	r3, r2
 8002214:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8002216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002218:	3301      	adds	r3, #1
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	2b63      	cmp	r3, #99	; 0x63
 8002220:	ddeb      	ble.n	80021fa <getSample+0x202>
	}
	adcPitc_2000 = sumADC_Pitc/100;
 8002222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002224:	4a35      	ldr	r2, [pc, #212]	; (80022fc <getSample+0x304>)
 8002226:	fb82 1203 	smull	r1, r2, r2, r3
 800222a:	1152      	asrs	r2, r2, #5
 800222c:	17db      	asrs	r3, r3, #31
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <getSample+0x324>)
 8002234:	801a      	strh	r2, [r3, #0]
	char snum_pitc2000[5];
	sprintf(snum_pitc2000, "%d", adcPitc_2000);
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <getSample+0x324>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4930      	ldr	r1, [pc, #192]	; (8002304 <getSample+0x30c>)
 8002242:	4618      	mov	r0, r3
 8002244:	f00e fb84 	bl	8010950 <siprintf>
//	itoa(adcPitc_1000, snum_pitc2000, 5);
	ST7920_SendString(2,5, snum_pitc2000);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	461a      	mov	r2, r3
 800224e:	2105      	movs	r1, #5
 8002250:	2002      	movs	r0, #2
 8002252:	f7fe fc07 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu rigt 1000
	sumADC_Rigt = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 800225a:	e009      	b.n	8002270 <getSample+0x278>
	{
		ST7920_SendString(0,4, "RIGT 1");
 800225c:	4a30      	ldr	r2, [pc, #192]	; (8002320 <getSample+0x328>)
 800225e:	2104      	movs	r1, #4
 8002260:	2000      	movs	r0, #0
 8002262:	f7fe fbff 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	4822      	ldr	r0, [pc, #136]	; (80022f4 <getSample+0x2fc>)
 800226c:	f007 fda0 	bl	8009db0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8002270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002274:	481f      	ldr	r0, [pc, #124]	; (80022f4 <getSample+0x2fc>)
 8002276:	f007 fd83 	bl	8009d80 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ed      	beq.n	800225c <getSample+0x264>
	}
	//đã gạt phải
	HAL_Delay(100);
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	f003 fae7 	bl	8005854 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8002286:	2300      	movs	r3, #0
 8002288:	63bb      	str	r3, [r7, #56]	; 0x38
 800228a:	e010      	b.n	80022ae <getSample+0x2b6>
	{
		HAL_Delay(10);
 800228c:	200a      	movs	r0, #10
 800228e:	f003 fae1 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	2102      	movs	r1, #2
 8002296:	4817      	ldr	r0, [pc, #92]	; (80022f4 <getSample+0x2fc>)
 8002298:	f007 fd8a 	bl	8009db0 <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <getSample+0x300>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a4:	4413      	add	r3, r2
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 80022a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022aa:	3301      	adds	r3, #1
 80022ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b0:	2b63      	cmp	r3, #99	; 0x63
 80022b2:	ddeb      	ble.n	800228c <getSample+0x294>
	}
	adcRigt_1000 = sumADC_Rigt/100;
 80022b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <getSample+0x304>)
 80022b8:	fb82 1203 	smull	r1, r2, r2, r3
 80022bc:	1152      	asrs	r2, r2, #5
 80022be:	17db      	asrs	r3, r3, #31
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <getSample+0x32c>)
 80022c6:	801a      	strh	r2, [r3, #0]
	char snum_rigt1000[5];
	sprintf(snum_rigt1000, "%d", adcRigt_1000);
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <getSample+0x32c>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	490c      	ldr	r1, [pc, #48]	; (8002304 <getSample+0x30c>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00e fb3b 	bl	8010950 <siprintf>
//	itoa(adcRigt_1000, snum_rigt1000, 5);
	ST7920_SendString(3,0, snum_rigt1000);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	461a      	mov	r2, r3
 80022e0:	2100      	movs	r1, #0
 80022e2:	2003      	movs	r0, #3
 80022e4:	f7fe fbbe 	bl	8000a64 <ST7920_SendString>


	//lấy mẫu rigt 2000
	sumADC_Rigt = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 80022ec:	e026      	b.n	800233c <getSample+0x344>
 80022ee:	bf00      	nop
 80022f0:	080121b8 	.word	0x080121b8
 80022f4:	58021000 	.word	0x58021000
 80022f8:	24000d0c 	.word	0x24000d0c
 80022fc:	51eb851f 	.word	0x51eb851f
 8002300:	24000080 	.word	0x24000080
 8002304:	080121c0 	.word	0x080121c0
 8002308:	080121c4 	.word	0x080121c4
 800230c:	24000082 	.word	0x24000082
 8002310:	080121cc 	.word	0x080121cc
 8002314:	24000084 	.word	0x24000084
 8002318:	080121d4 	.word	0x080121d4
 800231c:	24000086 	.word	0x24000086
 8002320:	080121dc 	.word	0x080121dc
 8002324:	24000088 	.word	0x24000088
	{
		ST7920_SendString(0,4, "RIGT 2");
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <getSample+0x3cc>)
 800232a:	2104      	movs	r1, #4
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fb99 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2102      	movs	r1, #2
 8002336:	4824      	ldr	r0, [pc, #144]	; (80023c8 <getSample+0x3d0>)
 8002338:	f007 fd3a 	bl	8009db0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 800233c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002340:	4821      	ldr	r0, [pc, #132]	; (80023c8 <getSample+0x3d0>)
 8002342:	f007 fd1d 	bl	8009d80 <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d0ed      	beq.n	8002328 <getSample+0x330>
	}
	HAL_Delay(100);
 800234c:	2064      	movs	r0, #100	; 0x64
 800234e:	f003 fa81 	bl	8005854 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8002352:	2300      	movs	r3, #0
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
 8002356:	e010      	b.n	800237a <getSample+0x382>
	{
		HAL_Delay(10);
 8002358:	200a      	movs	r0, #10
 800235a:	f003 fa7b 	bl	8005854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	2102      	movs	r1, #2
 8002362:	4819      	ldr	r0, [pc, #100]	; (80023c8 <getSample+0x3d0>)
 8002364:	f007 fd24 	bl	8009db0 <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <getSample+0x3d4>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002370:	4413      	add	r3, r2
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	3301      	adds	r3, #1
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
 800237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237c:	2b63      	cmp	r3, #99	; 0x63
 800237e:	ddeb      	ble.n	8002358 <getSample+0x360>
	}
	adcRigt_2000 = sumADC_Rigt/100;
 8002380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <getSample+0x3d8>)
 8002384:	fb82 1203 	smull	r1, r2, r2, r3
 8002388:	1152      	asrs	r2, r2, #5
 800238a:	17db      	asrs	r3, r3, #31
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <getSample+0x3dc>)
 8002392:	801a      	strh	r2, [r3, #0]
	char snum_rigt2000[5];
	sprintf(snum_rigt2000, "%d", adcRigt_2000);
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <getSample+0x3dc>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <getSample+0x3e0>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f00e fad6 	bl	8010950 <siprintf>
//	itoa(adcRigt_2000, snum_rigt2000, 5);
	ST7920_SendString(3,5, snum_rigt2000);
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	461a      	mov	r2, r3
 80023a8:	2105      	movs	r1, #5
 80023aa:	2003      	movs	r0, #3
 80023ac:	f7fe fb5a 	bl	8000a64 <ST7920_SendString>

	HAL_Delay(500);
 80023b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b4:	f003 fa4e 	bl	8005854 <HAL_Delay>
	//ghi vào flash
	writeFLASH();
 80023b8:	f7ff fce8 	bl	8001d8c <writeFLASH>
}
 80023bc:	bf00      	nop
 80023be:	3758      	adds	r7, #88	; 0x58
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	080121e4 	.word	0x080121e4
 80023c8:	58021000 	.word	0x58021000
 80023cc:	24000d0c 	.word	0x24000d0c
 80023d0:	51eb851f 	.word	0x51eb851f
 80023d4:	2400008a 	.word	0x2400008a
 80023d8:	080121c0 	.word	0x080121c0

080023dc <solveDT50_Left>:

void solveDT50_Left(uint16_t a1, uint16_t a2)
{
 80023dc:	b490      	push	{r4, r7}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	80fb      	strh	r3, [r7, #6]
 80023e8:	4613      	mov	r3, r2
 80023ea:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 80023f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f8:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 80023fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023fe:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03d      	beq.n	8002482 <solveDT50_Left+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8002406:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	fb02 f203 	mul.w	r2, r2, r3
 800240e:	88bb      	ldrh	r3, [r7, #4]
 8002410:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	1ad2      	subs	r2, r2, r3
 8002418:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800241a:	88f9      	ldrh	r1, [r7, #6]
 800241c:	fb01 f103 	mul.w	r1, r1, r3
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8002424:	fb00 f303 	mul.w	r3, r0, r3
 8002428:	1acb      	subs	r3, r1, r3
 800242a:	fb92 f3f3 	sdiv	r3, r2, r3
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002436:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 800243a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800244e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002452:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002456:	ee36 5b47 	vsub.f64	d5, d6, d7
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002464:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002468:	ed87 7b02 	vstr	d7, [r7, #8]
    aLeft_Linear = x;	//
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <solveDT50_Left+0x130>)
 800246e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002472:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8002476:	4a26      	ldr	r2, [pc, #152]	; (8002510 <solveDT50_Left+0x134>)
 8002478:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800247c:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aLeft_Linear = x;	//
    bLeft_Linear = y;	//
  }
}
 8002480:	e03f      	b.n	8002502 <solveDT50_Left+0x126>
  else if ( a2 != 0 )
 8002482:	88bb      	ldrh	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03c      	beq.n	8002502 <solveDT50_Left+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8002488:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800248a:	88ba      	ldrh	r2, [r7, #4]
 800248c:	fb02 f203 	mul.w	r2, r2, r3
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	1ad2      	subs	r2, r2, r3
 800249a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800249c:	88b9      	ldrh	r1, [r7, #4]
 800249e:	fb01 f103 	mul.w	r1, r1, r3
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80024a6:	fb00 f303 	mul.w	r3, r0, r3
 80024aa:	1acb      	subs	r3, r1, r3
 80024ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024b8:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 80024bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80024c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80024d0:	ed97 7b08 	vldr	d7, [r7, #32]
 80024d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024d8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80024e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024ea:	ed87 7b06 	vstr	d7, [r7, #24]
    aLeft_Linear = x;	//
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <solveDT50_Left+0x130>)
 80024f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024f4:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <solveDT50_Left+0x134>)
 80024fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80024fe:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002502:	bf00      	nop
 8002504:	3730      	adds	r7, #48	; 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bc90      	pop	{r4, r7}
 800250a:	4770      	bx	lr
 800250c:	24000cb8 	.word	0x24000cb8
 8002510:	24000880 	.word	0x24000880

08002514 <solveDT50_Pitch>:

void solveDT50_Pitch(uint16_t a1, uint16_t a2)
{
 8002514:	b490      	push	{r4, r7}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	460a      	mov	r2, r1
 800251e:	80fb      	strh	r3, [r7, #6]
 8002520:	4613      	mov	r3, r2
 8002522:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8002524:	2301      	movs	r3, #1
 8002526:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8002528:	2301      	movs	r3, #1
 800252a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 800252c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002530:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8002532:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002536:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03d      	beq.n	80025ba <solveDT50_Pitch+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 800253e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	fb02 f203 	mul.w	r2, r2, r3
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	1ad2      	subs	r2, r2, r3
 8002550:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002552:	88f9      	ldrh	r1, [r7, #6]
 8002554:	fb01 f103 	mul.w	r1, r1, r3
 8002558:	88bb      	ldrh	r3, [r7, #4]
 800255a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800255c:	fb00 f303 	mul.w	r3, r0, r3
 8002560:	1acb      	subs	r3, r1, r3
 8002562:	fb92 f3f3 	sdiv	r3, r2, r3
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800256e:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8002572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800257c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002586:	ed97 7b04 	vldr	d7, [r7, #16]
 800258a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800258e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800259c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025a0:	ed87 7b02 	vstr	d7, [r7, #8]
    aPitch_Linear = x;	//
 80025a4:	4a27      	ldr	r2, [pc, #156]	; (8002644 <solveDT50_Pitch+0x130>)
 80025a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025aa:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 80025ae:	4a26      	ldr	r2, [pc, #152]	; (8002648 <solveDT50_Pitch+0x134>)
 80025b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80025b4:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aPitch_Linear = x;	//
    bPitch_Linear = y;	//
  }
}
 80025b8:	e03f      	b.n	800263a <solveDT50_Pitch+0x126>
  else if ( a2 != 0 )
 80025ba:	88bb      	ldrh	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d03c      	beq.n	800263a <solveDT50_Pitch+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 80025c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025c2:	88ba      	ldrh	r2, [r7, #4]
 80025c4:	fb02 f203 	mul.w	r2, r2, r3
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	1ad2      	subs	r2, r2, r3
 80025d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025d4:	88b9      	ldrh	r1, [r7, #4]
 80025d6:	fb01 f103 	mul.w	r1, r1, r3
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80025de:	fb00 f303 	mul.w	r3, r0, r3
 80025e2:	1acb      	subs	r3, r1, r3
 80025e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025f0:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 80025f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80025fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002608:	ed97 7b08 	vldr	d7, [r7, #32]
 800260c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002610:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002614:	88bb      	ldrh	r3, [r7, #4]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800261e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002622:	ed87 7b06 	vstr	d7, [r7, #24]
    aPitch_Linear = x;	//
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <solveDT50_Pitch+0x130>)
 8002628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800262c:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8002630:	4a05      	ldr	r2, [pc, #20]	; (8002648 <solveDT50_Pitch+0x134>)
 8002632:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002636:	e9c2 3400 	strd	r3, r4, [r2]
}
 800263a:	bf00      	nop
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bc90      	pop	{r4, r7}
 8002642:	4770      	bx	lr
 8002644:	24000ae0 	.word	0x24000ae0
 8002648:	24000cc8 	.word	0x24000cc8

0800264c <solveDT50_Rigt>:

void solveDT50_Rigt(uint16_t a1, uint16_t a2)
{
 800264c:	b490      	push	{r4, r7}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	460a      	mov	r2, r1
 8002656:	80fb      	strh	r3, [r7, #6]
 8002658:	4613      	mov	r3, r2
 800265a:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 800265c:	2301      	movs	r3, #1
 800265e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8002664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002668:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 800266a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800266e:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03d      	beq.n	80026f2 <solveDT50_Rigt+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8002676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	fb02 f203 	mul.w	r2, r2, r3
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800268a:	88f9      	ldrh	r1, [r7, #6]
 800268c:	fb01 f103 	mul.w	r1, r1, r3
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8002694:	fb00 f303 	mul.w	r3, r0, r3
 8002698:	1acb      	subs	r3, r1, r3
 800269a:	fb92 f3f3 	sdiv	r3, r2, r3
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026a6:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 80026aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80026b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80026be:	ed97 7b04 	vldr	d7, [r7, #16]
 80026c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026c6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80026d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80026d8:	ed87 7b02 	vstr	d7, [r7, #8]
    aRigt_Linear = x;	//
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <solveDT50_Rigt+0x130>)
 80026de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80026e2:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 80026e6:	4a26      	ldr	r2, [pc, #152]	; (8002780 <solveDT50_Rigt+0x134>)
 80026e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026ec:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aRigt_Linear = x;	//
    bRigt_Linear = y;	//
  }
}
 80026f0:	e03f      	b.n	8002772 <solveDT50_Rigt+0x126>
  else if ( a2 != 0 )
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d03c      	beq.n	8002772 <solveDT50_Rigt+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 80026f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026fa:	88ba      	ldrh	r2, [r7, #4]
 80026fc:	fb02 f203 	mul.w	r2, r2, r3
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800270c:	88b9      	ldrh	r1, [r7, #4]
 800270e:	fb01 f103 	mul.w	r1, r1, r3
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8002716:	fb00 f303 	mul.w	r3, r0, r3
 800271a:	1acb      	subs	r3, r1, r3
 800271c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002728:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 800272c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002736:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002740:	ed97 7b08 	vldr	d7, [r7, #32]
 8002744:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002748:	ee36 5b47 	vsub.f64	d5, d6, d7
 800274c:	88bb      	ldrh	r3, [r7, #4]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002756:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800275a:	ed87 7b06 	vstr	d7, [r7, #24]
    aRigt_Linear = x;	//
 800275e:	4a07      	ldr	r2, [pc, #28]	; (800277c <solveDT50_Rigt+0x130>)
 8002760:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002764:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <solveDT50_Rigt+0x134>)
 800276a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800276e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002772:	bf00      	nop
 8002774:	3730      	adds	r7, #48	; 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bc90      	pop	{r4, r7}
 800277a:	4770      	bx	lr
 800277c:	24000418 	.word	0x24000418
 8002780:	24000228 	.word	0x24000228

08002784 <cylinder_Init>:

#define putQ(PUTQ_STATUS) (HAL_GPIO_WritePin(putQ_GPIO_Port, putQ_Pin, PUTQ_STATUS))
#define putE(PUTE_STATUS) (HAL_GPIO_WritePin(putE_GPIO_Port, putE_Pin, PUTE_STATUS))

void cylinder_Init()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	gripperE(GRIPPERE_CLOSE);
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800278e:	4810      	ldr	r0, [pc, #64]	; (80027d0 <cylinder_Init+0x4c>)
 8002790:	f007 fb0e 	bl	8009db0 <HAL_GPIO_WritePin>
	gripperQ(GRIPPERQ_CLOSE);
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800279a:	480d      	ldr	r0, [pc, #52]	; (80027d0 <cylinder_Init+0x4c>)
 800279c:	f007 fb08 	bl	8009db0 <HAL_GPIO_WritePin>
	putQ(PUTQ_UP);
 80027a0:	2201      	movs	r2, #1
 80027a2:	2120      	movs	r1, #32
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <cylinder_Init+0x50>)
 80027a6:	f007 fb03 	bl	8009db0 <HAL_GPIO_WritePin>
	putE(PUTE_UP);
 80027aa:	2201      	movs	r2, #1
 80027ac:	2140      	movs	r1, #64	; 0x40
 80027ae:	4809      	ldr	r0, [pc, #36]	; (80027d4 <cylinder_Init+0x50>)
 80027b0:	f007 fafe 	bl	8009db0 <HAL_GPIO_WritePin>
	passArm(PASSARM_UP);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2104      	movs	r1, #4
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <cylinder_Init+0x4c>)
 80027ba:	f007 faf9 	bl	8009db0 <HAL_GPIO_WritePin>
	passHand(PASSHAND_OPEN);
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <cylinder_Init+0x4c>)
 80027c6:	f007 faf3 	bl	8009db0 <HAL_GPIO_WritePin>
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	58020000 	.word	0x58020000
 80027d4:	58020400 	.word	0x58020400

080027d8 <wait4SelectMode>:
uint16_t ball1[4] = {1156,1156,270,600};

uint16_t ball_temp[4] = {0,0,0,0};

void wait4SelectMode()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	  ST7920_Clear();
 80027dc:	f7fe f984 	bl	8000ae8 <ST7920_Clear>
	  brake();
 80027e0:	f7fe ffa2 	bl	8001728 <brake>
	  HAL_Delay(300);
 80027e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027e8:	f003 f834 	bl	8005854 <HAL_Delay>
	  while((btn_Q == 1)&&(btn_E == 1)&&(btn_joyRigt == 1)&&(btn_joyLeft == 1)&&(btn_Sta == 1)&&(btn_W == 1)&&(btn_D == 1)&&(btn_A==1))	//khi chưa chọn vị trí
 80027ec:	e010      	b.n	8002810 <wait4SelectMode+0x38>
	  {
		  ST7920_SendString(0,0, "QECZ:Ball");
 80027ee:	4a69      	ldr	r2, [pc, #420]	; (8002994 <wait4SelectMode+0x1bc>)
 80027f0:	2100      	movs	r1, #0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f936 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(1,0, "W:load");
 80027f8:	4a67      	ldr	r2, [pc, #412]	; (8002998 <wait4SelectMode+0x1c0>)
 80027fa:	2100      	movs	r1, #0
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7fe f931 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2,0, "Sta:Shoot");
 8002802:	4a66      	ldr	r2, [pc, #408]	; (800299c <wait4SelectMode+0x1c4>)
 8002804:	2100      	movs	r1, #0
 8002806:	2002      	movs	r0, #2
 8002808:	f7fe f92c 	bl	8000a64 <ST7920_SendString>
		  freeMotor();
 800280c:	f7fe ffa0 	bl	8001750 <freeMotor>
	  while((btn_Q == 1)&&(btn_E == 1)&&(btn_joyRigt == 1)&&(btn_joyLeft == 1)&&(btn_Sta == 1)&&(btn_W == 1)&&(btn_D == 1)&&(btn_A==1))	//khi chưa chọn vị trí
 8002810:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <wait4SelectMode+0x1c8>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d11b      	bne.n	8002850 <wait4SelectMode+0x78>
 8002818:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <wait4SelectMode+0x1cc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d117      	bne.n	8002850 <wait4SelectMode+0x78>
 8002820:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <wait4SelectMode+0x1d0>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d113      	bne.n	8002850 <wait4SelectMode+0x78>
 8002828:	4b60      	ldr	r3, [pc, #384]	; (80029ac <wait4SelectMode+0x1d4>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10f      	bne.n	8002850 <wait4SelectMode+0x78>
 8002830:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <wait4SelectMode+0x1d8>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10b      	bne.n	8002850 <wait4SelectMode+0x78>
 8002838:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <wait4SelectMode+0x1dc>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <wait4SelectMode+0x78>
 8002840:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <wait4SelectMode+0x1e0>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d103      	bne.n	8002850 <wait4SelectMode+0x78>
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <wait4SelectMode+0x1e4>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d0ce      	beq.n	80027ee <wait4SelectMode+0x16>
	  }
	  ST7920_Clear();
 8002850:	f7fe f94a 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(1,0, 	 "      ");
 8002854:	4a5a      	ldr	r2, [pc, #360]	; (80029c0 <wait4SelectMode+0x1e8>)
 8002856:	2100      	movs	r1, #0
 8002858:	2001      	movs	r0, #1
 800285a:	f7fe f903 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(1,0, "RUNNING");
 800285e:	4a59      	ldr	r2, [pc, #356]	; (80029c4 <wait4SelectMode+0x1ec>)
 8002860:	2100      	movs	r1, #0
 8002862:	2001      	movs	r0, #1
 8002864:	f7fe f8fe 	bl	8000a64 <ST7920_SendString>
	  if(btn_Sta == 0)
 8002868:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <wait4SelectMode+0x1d8>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <wait4SelectMode+0xb4>
	  {
		  startMode = TO_SHOOT;
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <wait4SelectMode+0x1f0>)
 8002872:	2205      	movs	r2, #5
 8002874:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 8002876:	4a55      	ldr	r2, [pc, #340]	; (80029cc <wait4SelectMode+0x1f4>)
 8002878:	2100      	movs	r1, #0
 800287a:	2003      	movs	r0, #3
 800287c:	f7fe f8f2 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "TO SHOOT");
 8002880:	4a53      	ldr	r2, [pc, #332]	; (80029d0 <wait4SelectMode+0x1f8>)
 8002882:	2100      	movs	r1, #0
 8002884:	2003      	movs	r0, #3
 8002886:	f7fe f8ed 	bl	8000a64 <ST7920_SendString>
 800288a:	e07c      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_E == 0)	//lấy ball2
 800288c:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <wait4SelectMode+0x1cc>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <wait4SelectMode+0xd8>
	  {
		  startMode = BALL2;
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <wait4SelectMode+0x1f0>)
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 800289a:	4a4c      	ldr	r2, [pc, #304]	; (80029cc <wait4SelectMode+0x1f4>)
 800289c:	2100      	movs	r1, #0
 800289e:	2003      	movs	r0, #3
 80028a0:	f7fe f8e0 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL2");
 80028a4:	4a4b      	ldr	r2, [pc, #300]	; (80029d4 <wait4SelectMode+0x1fc>)
 80028a6:	2100      	movs	r1, #0
 80028a8:	2003      	movs	r0, #3
 80028aa:	f7fe f8db 	bl	8000a64 <ST7920_SendString>
 80028ae:	e06a      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_joyRigt == 0)	//lấy ball3
 80028b0:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <wait4SelectMode+0x1d0>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10d      	bne.n	80028d4 <wait4SelectMode+0xfc>
	  {
		  startMode = BALL3;
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <wait4SelectMode+0x1f0>)
 80028ba:	2203      	movs	r2, #3
 80028bc:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 80028be:	4a43      	ldr	r2, [pc, #268]	; (80029cc <wait4SelectMode+0x1f4>)
 80028c0:	2100      	movs	r1, #0
 80028c2:	2003      	movs	r0, #3
 80028c4:	f7fe f8ce 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL3");
 80028c8:	4a43      	ldr	r2, [pc, #268]	; (80029d8 <wait4SelectMode+0x200>)
 80028ca:	2100      	movs	r1, #0
 80028cc:	2003      	movs	r0, #3
 80028ce:	f7fe f8c9 	bl	8000a64 <ST7920_SendString>
 80028d2:	e058      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_joyLeft == 0)	//lấy ball4
 80028d4:	4b35      	ldr	r3, [pc, #212]	; (80029ac <wait4SelectMode+0x1d4>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <wait4SelectMode+0x120>
	  {
		  startMode = BALL4;
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <wait4SelectMode+0x1f0>)
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 80028e2:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <wait4SelectMode+0x1f4>)
 80028e4:	2100      	movs	r1, #0
 80028e6:	2003      	movs	r0, #3
 80028e8:	f7fe f8bc 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL4");
 80028ec:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <wait4SelectMode+0x204>)
 80028ee:	2100      	movs	r1, #0
 80028f0:	2003      	movs	r0, #3
 80028f2:	f7fe f8b7 	bl	8000a64 <ST7920_SendString>
 80028f6:	e046      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_Q == 0)	//lấy ball1
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <wait4SelectMode+0x1c8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <wait4SelectMode+0x144>
	  {
		  startMode = BALL1;
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <wait4SelectMode+0x1f0>)
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 8002906:	4a31      	ldr	r2, [pc, #196]	; (80029cc <wait4SelectMode+0x1f4>)
 8002908:	2100      	movs	r1, #0
 800290a:	2003      	movs	r0, #3
 800290c:	f7fe f8aa 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL1");
 8002910:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <wait4SelectMode+0x208>)
 8002912:	2100      	movs	r1, #0
 8002914:	2003      	movs	r0, #3
 8002916:	f7fe f8a5 	bl	8000a64 <ST7920_SendString>
 800291a:	e034      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_W == 0)	//về vị trí load ball
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <wait4SelectMode+0x1dc>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <wait4SelectMode+0x168>
	  {
		  startMode = LOAD_BALL;
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <wait4SelectMode+0x1f0>)
 8002926:	2206      	movs	r2, #6
 8002928:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 800292a:	4a28      	ldr	r2, [pc, #160]	; (80029cc <wait4SelectMode+0x1f4>)
 800292c:	2100      	movs	r1, #0
 800292e:	2003      	movs	r0, #3
 8002930:	f7fe f898 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "LOAD BALL");
 8002934:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <wait4SelectMode+0x20c>)
 8002936:	2100      	movs	r1, #0
 8002938:	2003      	movs	r0, #3
 800293a:	f7fe f893 	bl	8000a64 <ST7920_SendString>
 800293e:	e022      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_D == 0)
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <wait4SelectMode+0x1e0>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <wait4SelectMode+0x18c>
	  {
		  startMode = MANUAL_MODE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <wait4SelectMode+0x1f0>)
 800294a:	2207      	movs	r2, #7
 800294c:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <wait4SelectMode+0x1f4>)
 8002950:	2100      	movs	r1, #0
 8002952:	2003      	movs	r0, #3
 8002954:	f7fe f886 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "MANUAL MODE");
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <wait4SelectMode+0x210>)
 800295a:	2100      	movs	r1, #0
 800295c:	2003      	movs	r0, #3
 800295e:	f7fe f881 	bl	8000a64 <ST7920_SendString>
 8002962:	e010      	b.n	8002986 <wait4SelectMode+0x1ae>
	  }
	  else if(btn_A == 0)
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <wait4SelectMode+0x1e4>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <wait4SelectMode+0x1ae>
	  {
		  startMode = SHOOT_BALL_1;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <wait4SelectMode+0x1f0>)
 800296e:	2208      	movs	r2, #8
 8002970:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 8002972:	4a16      	ldr	r2, [pc, #88]	; (80029cc <wait4SelectMode+0x1f4>)
 8002974:	2100      	movs	r1, #0
 8002976:	2003      	movs	r0, #3
 8002978:	f7fe f874 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "SHOOT BALL 1");
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <wait4SelectMode+0x214>)
 800297e:	2100      	movs	r1, #0
 8002980:	2003      	movs	r0, #3
 8002982:	f7fe f86f 	bl	8000a64 <ST7920_SendString>

	  }
	  ST7920_SendString(2,0, "START");
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <wait4SelectMode+0x218>)
 8002988:	2100      	movs	r1, #0
 800298a:	2002      	movs	r0, #2
 800298c:	f7fe f86a 	bl	8000a64 <ST7920_SendString>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	080121ec 	.word	0x080121ec
 8002998:	080121f8 	.word	0x080121f8
 800299c:	08012200 	.word	0x08012200
 80029a0:	24000c03 	.word	0x24000c03
 80029a4:	24000428 	.word	0x24000428
 80029a8:	24000c09 	.word	0x24000c09
 80029ac:	24000d13 	.word	0x24000d13
 80029b0:	24000bee 	.word	0x24000bee
 80029b4:	2400091d 	.word	0x2400091d
 80029b8:	24000426 	.word	0x24000426
 80029bc:	24000bcc 	.word	0x24000bcc
 80029c0:	0801220c 	.word	0x0801220c
 80029c4:	08012214 	.word	0x08012214
 80029c8:	24000bb8 	.word	0x24000bb8
 80029cc:	0801221c 	.word	0x0801221c
 80029d0:	08012228 	.word	0x08012228
 80029d4:	08012234 	.word	0x08012234
 80029d8:	0801223c 	.word	0x0801223c
 80029dc:	08012244 	.word	0x08012244
 80029e0:	0801224c 	.word	0x0801224c
 80029e4:	08012254 	.word	0x08012254
 80029e8:	08012260 	.word	0x08012260
 80029ec:	0801226c 	.word	0x0801226c
 80029f0:	0801227c 	.word	0x0801227c
 80029f4:	00000000 	.word	0x00000000

080029f8 <goToBallRigt>:
	  passHand(PASSHAND_OPEN);
	  startMode = 0;
	  ball_temp[_Rigt] = 0;
}
void goToBallRigt(uint16_t *ball)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	ed2d 8b04 	vpush	{d8-d9}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	roLKp=0.2;
 8002a04:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <goToBallRigt+0x1c8>)
 8002a06:	a46c      	add	r4, pc, #432	; (adr r4, 8002bb8 <goToBallRigt+0x1c0>)
 8002a08:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002a0c:	e9c2 3400 	strd	r3, r4, [r2]
	roRKp=0.2;
 8002a10:	4a6c      	ldr	r2, [pc, #432]	; (8002bc4 <goToBallRigt+0x1cc>)
 8002a12:	a469      	add	r4, pc, #420	; (adr r4, 8002bb8 <goToBallRigt+0x1c0>)
 8002a14:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002a18:	e9c2 3400 	strd	r3, r4, [r2]
	pitKp=0.2;
 8002a1c:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <goToBallRigt+0x1d0>)
 8002a1e:	a466      	add	r4, pc, #408	; (adr r4, 8002bb8 <goToBallRigt+0x1c0>)
 8002a20:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002a24:	e9c2 3400 	strd	r3, r4, [r2]
	  startTime = HAL_GetTick();
 8002a28:	f002 ff08 	bl	800583c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <goToBallRigt+0x1d4>)
 8002a30:	601a      	str	r2, [r3, #0]
	  if(ball!=ball1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <goToBallRigt+0x1d8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00a      	beq.n	8002a50 <goToBallRigt+0x58>
	  {
		  passArm(PASSARM_DOWN);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	4865      	ldr	r0, [pc, #404]	; (8002bd4 <goToBallRigt+0x1dc>)
 8002a40:	f007 f9b6 	bl	8009db0 <HAL_GPIO_WritePin>
		  passHand(PASSHAND_OPEN);
 8002a44:	2201      	movs	r2, #1
 8002a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a4a:	4862      	ldr	r0, [pc, #392]	; (8002bd4 <goToBallRigt+0x1dc>)
 8002a4c:	f007 f9b0 	bl	8009db0 <HAL_GPIO_WritePin>
	  }

	  ST7920_Clear();
 8002a50:	f7fe f84a 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "Btn_Sel waiting");
 8002a54:	4a60      	ldr	r2, [pc, #384]	; (8002bd8 <goToBallRigt+0x1e0>)
 8002a56:	2100      	movs	r1, #0
 8002a58:	2002      	movs	r0, #2
 8002a5a:	f7fe f803 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "autoTuning");
 8002a5e:	4a5f      	ldr	r2, [pc, #380]	; (8002bdc <goToBallRigt+0x1e4>)
 8002a60:	2100      	movs	r1, #0
 8002a62:	2003      	movs	r0, #3
 8002a64:	f7fd fffe 	bl	8000a64 <ST7920_SendString>
	  while(((abs(rigtDistance-ball[_Rigt])>10)||(abs(pitchDistance-ball[_PitcWait])>10))&&btn_Sel==1)
 8002a68:	e056      	b.n	8002b18 <goToBallRigt+0x120>
	  {
		  roR_Pit_Yaw_GoTo(ball[_Rigt], ball[_PitcWait], 0);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3306      	adds	r3, #6
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7fe fead 	bl	80017d8 <roR_Pit_Yaw_GoTo>
//		  roR_Pit_Yaw_GoTo(ball[_Rigt], ball[_PitcWait], 0);
		  if((abs(rigtDistance-ball[_Rigt])<10)&&(abs(pitchDistance-ball[_PitcWait])<10))
 8002a7e:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <goToBallRigt+0x1e8>)
 8002a80:	ed93 6b00 	vldr	d6, [r3]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002a98:	ee17 3a90 	vmov	r3, s15
 8002a9c:	f113 0f09 	cmn.w	r3, #9
 8002aa0:	db3a      	blt.n	8002b18 <goToBallRigt+0x120>
 8002aa2:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <goToBallRigt+0x1e8>)
 8002aa4:	ed93 6b00 	vldr	d6, [r3]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ab4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ab8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002abc:	ee17 3a90 	vmov	r3, s15
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	dc29      	bgt.n	8002b18 <goToBallRigt+0x120>
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <goToBallRigt+0x1ec>)
 8002ac6:	ed93 6b00 	vldr	d6, [r3]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3306      	adds	r3, #6
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ad8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002adc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002ae0:	ee17 3a90 	vmov	r3, s15
 8002ae4:	f113 0f09 	cmn.w	r3, #9
 8002ae8:	db16      	blt.n	8002b18 <goToBallRigt+0x120>
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <goToBallRigt+0x1ec>)
 8002aec:	ed93 6b00 	vldr	d6, [r3]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3306      	adds	r3, #6
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002afe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b02:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002b06:	ee17 3a90 	vmov	r3, s15
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	dc04      	bgt.n	8002b18 <goToBallRigt+0x120>
		  {
			  brake();
 8002b0e:	f7fe fe0b 	bl	8001728 <brake>
			  HAL_Delay(DEBOUNCE_MOVING_TIME);
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f002 fe9e 	bl	8005854 <HAL_Delay>
	  while(((abs(rigtDistance-ball[_Rigt])>10)||(abs(pitchDistance-ball[_PitcWait])>10))&&btn_Sel==1)
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <goToBallRigt+0x1e8>)
 8002b1a:	ed93 6b00 	vldr	d6, [r3]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002b32:	ee17 3a90 	vmov	r3, s15
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfb8      	it	lt
 8002b3a:	425b      	neglt	r3, r3
 8002b3c:	2b0a      	cmp	r3, #10
 8002b3e:	dc14      	bgt.n	8002b6a <goToBallRigt+0x172>
 8002b40:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <goToBallRigt+0x1ec>)
 8002b42:	ed93 6b00 	vldr	d6, [r3]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3306      	adds	r3, #6
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002b5c:	ee17 3a90 	vmov	r3, s15
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bfb8      	it	lt
 8002b64:	425b      	neglt	r3, r3
 8002b66:	2b0a      	cmp	r3, #10
 8002b68:	dd04      	ble.n	8002b74 <goToBallRigt+0x17c>
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <goToBallRigt+0x1f0>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f43f af7b 	beq.w	8002a6a <goToBallRigt+0x72>
		  }
	  }
	  brake();
 8002b74:	f7fe fdd8 	bl	8001728 <brake>
	  HAL_Delay(30);
 8002b78:	201e      	movs	r0, #30
 8002b7a:	f002 fe6b 	bl	8005854 <HAL_Delay>
	  freeMotor();
 8002b7e:	f7fe fde7 	bl	8001750 <freeMotor>
	  passArm(PASSARM_DOWN);
 8002b82:	2201      	movs	r2, #1
 8002b84:	2104      	movs	r1, #4
 8002b86:	4813      	ldr	r0, [pc, #76]	; (8002bd4 <goToBallRigt+0x1dc>)
 8002b88:	f007 f912 	bl	8009db0 <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b92:	4810      	ldr	r0, [pc, #64]	; (8002bd4 <goToBallRigt+0x1dc>)
 8002b94:	f007 f90c 	bl	8009db0 <HAL_GPIO_WritePin>
	  ST7920_Clear();
 8002b98:	f7fd ffa6 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "Btn_X waiting");
 8002b9c:	4a13      	ldr	r2, [pc, #76]	; (8002bec <goToBallRigt+0x1f4>)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7fd ff5f 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "manualTuning");
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <goToBallRigt+0x1f8>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2003      	movs	r0, #3
 8002bac:	f7fd ff5a 	bl	8000a64 <ST7920_SendString>
	  while(btn_X == 1)	//ch�? nhấn nút X -> tinh chỉnh
 8002bb0:	e14d      	b.n	8002e4e <goToBallRigt+0x456>
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	3fc99999 	.word	0x3fc99999
 8002bc0:	24000058 	.word	0x24000058
 8002bc4:	24000048 	.word	0x24000048
 8002bc8:	24000068 	.word	0x24000068
 8002bcc:	24000d58 	.word	0x24000d58
 8002bd0:	240000a4 	.word	0x240000a4
 8002bd4:	58020000 	.word	0x58020000
 8002bd8:	08012284 	.word	0x08012284
 8002bdc:	08012294 	.word	0x08012294
 8002be0:	24000970 	.word	0x24000970
 8002be4:	24000d00 	.word	0x24000d00
 8002be8:	2400091c 	.word	0x2400091c
 8002bec:	080122a0 	.word	0x080122a0
 8002bf0:	080122b0 	.word	0x080122b0
	  {
		  PIDyaw(compassData, 0);
 8002bf4:	4bba      	ldr	r3, [pc, #744]	; (8002ee0 <goToBallRigt+0x4e8>)
 8002bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f8fb 	bl	8000df8 <PIDyaw>
		  leftVer = !btn_leftUp - !btn_leftDown;
 8002c02:	4bb8      	ldr	r3, [pc, #736]	; (8002ee4 <goToBallRigt+0x4ec>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	4bb5      	ldr	r3, [pc, #724]	; (8002ee8 <goToBallRigt+0x4f0>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	4bb0      	ldr	r3, [pc, #704]	; (8002eec <goToBallRigt+0x4f4>)
 8002c2a:	801a      	strh	r2, [r3, #0]
		  leftHor = -!btn_leftLeft + !btn_leftRigt;
 8002c2c:	4bb0      	ldr	r3, [pc, #704]	; (8002ef0 <goToBallRigt+0x4f8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4bad      	ldr	r3, [pc, #692]	; (8002ef4 <goToBallRigt+0x4fc>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	b21a      	sxth	r2, r3
 8002c52:	4ba9      	ldr	r3, [pc, #676]	; (8002ef8 <goToBallRigt+0x500>)
 8002c54:	801a      	strh	r2, [r3, #0]
		  _dir = atan2(leftHor, -leftVer);
 8002c56:	4ba8      	ldr	r3, [pc, #672]	; (8002ef8 <goToBallRigt+0x500>)
 8002c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c64:	4ba1      	ldr	r3, [pc, #644]	; (8002eec <goToBallRigt+0x4f4>)
 8002c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6a:	425b      	negs	r3, r3
 8002c6c:	ee06 3a90 	vmov	s13, r3
 8002c70:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002c74:	eeb0 1b46 	vmov.f64	d1, d6
 8002c78:	eeb0 0b47 	vmov.f64	d0, d7
 8002c7c:	f00e faac 	bl	80111d8 <atan2>
 8002c80:	eeb0 7b40 	vmov.f64	d7, d0
 8002c84:	4b9d      	ldr	r3, [pc, #628]	; (8002efc <goToBallRigt+0x504>)
 8002c86:	ed83 7b00 	vstr	d7, [r3]
		  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 8002c8a:	4b98      	ldr	r3, [pc, #608]	; (8002eec <goToBallRigt+0x4f4>)
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b96      	ldr	r3, [pc, #600]	; (8002eec <goToBallRigt+0x4f4>)
 8002c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c98:	fb03 f202 	mul.w	r2, r3, r2
 8002c9c:	4b96      	ldr	r3, [pc, #600]	; (8002ef8 <goToBallRigt+0x500>)
 8002c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4b94      	ldr	r3, [pc, #592]	; (8002ef8 <goToBallRigt+0x500>)
 8002ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002caa:	fb03 f301 	mul.w	r3, r3, r1
 8002cae:	4413      	add	r3, r2
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cb8:	eeb0 0b47 	vmov.f64	d0, d7
 8002cbc:	f00e fa90 	bl	80111e0 <sqrt>
 8002cc0:	eeb0 7b40 	vmov.f64	d7, d0
 8002cc4:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <goToBallRigt+0x508>)
 8002cc6:	ed83 7b00 	vstr	d7, [r3]
		  _motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8002cca:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <goToBallRigt+0x50c>)
 8002ccc:	ed93 6b00 	vldr	d6, [r3]
 8002cd0:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <goToBallRigt+0x510>)
 8002cd2:	ed93 7b00 	vldr	d7, [r3]
 8002cd6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002cda:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <goToBallRigt+0x514>)
 8002cdc:	ed93 6b00 	vldr	d6, [r3]
 8002ce0:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <goToBallRigt+0x508>)
 8002ce2:	ed93 7b00 	vldr	d7, [r3]
 8002ce6:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002cea:	4b84      	ldr	r3, [pc, #528]	; (8002efc <goToBallRigt+0x504>)
 8002cec:	ed93 7b00 	vldr	d7, [r3]
 8002cf0:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8002ec0 <goToBallRigt+0x4c8>
 8002cf4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8002cfc:	f00e fa30 	bl	8011160 <cos>
 8002d00:	eeb0 7b40 	vmov.f64	d7, d0
 8002d04:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002d08:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8002ec8 <goToBallRigt+0x4d0>
 8002d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d10:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002d14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d18:	ee17 3a90 	vmov	r3, s15
 8002d1c:	b21a      	sxth	r2, r3
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	; (8002f10 <goToBallRigt+0x518>)
 8002d20:	801a      	strh	r2, [r3, #0]
		  _motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8002d22:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <goToBallRigt+0x50c>)
 8002d24:	ed93 6b00 	vldr	d6, [r3]
 8002d28:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <goToBallRigt+0x510>)
 8002d2a:	ed93 7b00 	vldr	d7, [r3]
 8002d2e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <goToBallRigt+0x514>)
 8002d34:	ed93 6b00 	vldr	d6, [r3]
 8002d38:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <goToBallRigt+0x508>)
 8002d3a:	ed93 7b00 	vldr	d7, [r3]
 8002d3e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002d42:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <goToBallRigt+0x504>)
 8002d44:	ed93 7b00 	vldr	d7, [r3]
 8002d48:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8002ec0 <goToBallRigt+0x4c8>
 8002d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d50:	eeb0 0b47 	vmov.f64	d0, d7
 8002d54:	f00e fa04 	bl	8011160 <cos>
 8002d58:	eeb0 7b40 	vmov.f64	d7, d0
 8002d5c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002d60:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002d64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d68:	ee17 3a90 	vmov	r3, s15
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	4b69      	ldr	r3, [pc, #420]	; (8002f14 <goToBallRigt+0x51c>)
 8002d70:	801a      	strh	r2, [r3, #0]
		  _motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8002d72:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <goToBallRigt+0x50c>)
 8002d74:	ed93 6b00 	vldr	d6, [r3]
 8002d78:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <goToBallRigt+0x510>)
 8002d7a:	ed93 7b00 	vldr	d7, [r3]
 8002d7e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <goToBallRigt+0x514>)
 8002d84:	ed93 6b00 	vldr	d6, [r3]
 8002d88:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <goToBallRigt+0x508>)
 8002d8a:	ed93 7b00 	vldr	d7, [r3]
 8002d8e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002d92:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <goToBallRigt+0x504>)
 8002d94:	ed93 7b00 	vldr	d7, [r3]
 8002d98:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8002ed0 <goToBallRigt+0x4d8>
 8002d9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002da0:	eeb0 0b47 	vmov.f64	d0, d7
 8002da4:	f00e f9dc 	bl	8011160 <cos>
 8002da8:	eeb0 7b40 	vmov.f64	d7, d0
 8002dac:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002db0:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002db4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002ec8 <goToBallRigt+0x4d0>
 8002db8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dbc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002dc0:	ee17 3a90 	vmov	r3, s15
 8002dc4:	b21a      	sxth	r2, r3
 8002dc6:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <goToBallRigt+0x520>)
 8002dc8:	801a      	strh	r2, [r3, #0]
		  _motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8002dca:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <goToBallRigt+0x50c>)
 8002dcc:	ed93 6b00 	vldr	d6, [r3]
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <goToBallRigt+0x510>)
 8002dd2:	ed93 7b00 	vldr	d7, [r3]
 8002dd6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002dda:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <goToBallRigt+0x514>)
 8002ddc:	ed93 6b00 	vldr	d6, [r3]
 8002de0:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <goToBallRigt+0x508>)
 8002de2:	ed93 7b00 	vldr	d7, [r3]
 8002de6:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002dea:	4b44      	ldr	r3, [pc, #272]	; (8002efc <goToBallRigt+0x504>)
 8002dec:	ed93 7b00 	vldr	d7, [r3]
 8002df0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002ed0 <goToBallRigt+0x4d8>
 8002df4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002df8:	eeb0 0b47 	vmov.f64	d0, d7
 8002dfc:	f00e f9b0 	bl	8011160 <cos>
 8002e00:	eeb0 7b40 	vmov.f64	d7, d0
 8002e04:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002e08:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002e0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002e10:	ee17 3a90 	vmov	r3, s15
 8002e14:	b21a      	sxth	r2, r3
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <goToBallRigt+0x524>)
 8002e18:	801a      	strh	r2, [r3, #0]
		  controlMotor1(_motor1Speed);
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <goToBallRigt+0x518>)
 8002e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fef7 	bl	8000c14 <controlMotor1>
		  controlMotor2(_motor2Speed);
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <goToBallRigt+0x51c>)
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd ff2d 	bl	8000c8c <controlMotor2>
		  controlMotor3(_motor3Speed);
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <goToBallRigt+0x520>)
 8002e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd ff63 	bl	8000d04 <controlMotor3>
		  controlMotor4(_motor4Speed);
 8002e3e:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <goToBallRigt+0x524>)
 8002e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ff99 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8002e4a:	f7fd fd63 	bl	8000914 <spinalCordTrans>
	  while(btn_X == 1)	//ch�? nhấn nút X -> tinh chỉnh
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <goToBallRigt+0x528>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f43f aece 	beq.w	8002bf4 <goToBallRigt+0x1fc>
	  }
	  brake();
 8002e58:	f7fe fc66 	bl	8001728 <brake>
	  HAL_Delay(30);
 8002e5c:	201e      	movs	r0, #30
 8002e5e:	f002 fcf9 	bl	8005854 <HAL_Delay>
	  freeMotor();
 8002e62:	f7fe fc75 	bl	8001750 <freeMotor>
	  passArm(PASSARM_DOWN);
 8002e66:	2201      	movs	r2, #1
 8002e68:	2104      	movs	r1, #4
 8002e6a:	482e      	ldr	r0, [pc, #184]	; (8002f24 <goToBallRigt+0x52c>)
 8002e6c:	f006 ffa0 	bl	8009db0 <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 8002e70:	2201      	movs	r2, #1
 8002e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e76:	482b      	ldr	r0, [pc, #172]	; (8002f24 <goToBallRigt+0x52c>)
 8002e78:	f006 ff9a 	bl	8009db0 <HAL_GPIO_WritePin>
	  ball_temp[_Rigt] = rigtDistance;
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <goToBallRigt+0x530>)
 8002e7e:	ed93 7b00 	vldr	d7, [r3]
 8002e82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e86:	ee17 3a90 	vmov	r3, s15
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <goToBallRigt+0x534>)
 8002e8e:	801a      	strh	r2, [r3, #0]
	  startTime = HAL_GetTick();
 8002e90:	f002 fcd4 	bl	800583c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <goToBallRigt+0x538>)
 8002e98:	601a      	str	r2, [r3, #0]
	  roLKp=0.1;
 8002e9a:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <goToBallRigt+0x53c>)
 8002e9c:	a40e      	add	r4, pc, #56	; (adr r4, 8002ed8 <goToBallRigt+0x4e0>)
 8002e9e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ea2:	e9c2 3400 	strd	r3, r4, [r2]
	roRKp=0.1;
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <goToBallRigt+0x540>)
 8002ea8:	a40b      	add	r4, pc, #44	; (adr r4, 8002ed8 <goToBallRigt+0x4e0>)
 8002eaa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002eae:	e9c2 3400 	strd	r3, r4, [r2]
	pitKp=0.1;
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <goToBallRigt+0x544>)
 8002eb4:	a408      	add	r4, pc, #32	; (adr r4, 8002ed8 <goToBallRigt+0x4e0>)
 8002eb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002eba:	e9c2 3400 	strd	r3, r4, [r2]
	  while(((HAL_GetTick()-startTime)<10000)&&(btn_Sel==1))	//gắp bóng
 8002ebe:	e049      	b.n	8002f54 <goToBallRigt+0x55c>
 8002ec0:	7f3321d2 	.word	0x7f3321d2
 8002ec4:	4002d97c 	.word	0x4002d97c
	...
 8002ed0:	54442d18 	.word	0x54442d18
 8002ed4:	3fe921fb 	.word	0x3fe921fb
 8002ed8:	9999999a 	.word	0x9999999a
 8002edc:	3fb99999 	.word	0x3fb99999
 8002ee0:	24000930 	.word	0x24000930
 8002ee4:	24000cd0 	.word	0x24000cd0
 8002ee8:	24000bc8 	.word	0x24000bc8
 8002eec:	24000c00 	.word	0x24000c00
 8002ef0:	24000bb9 	.word	0x24000bb9
 8002ef4:	24000425 	.word	0x24000425
 8002ef8:	2400084e 	.word	0x2400084e
 8002efc:	24000890 	.word	0x24000890
 8002f00:	24000ba8 	.word	0x24000ba8
 8002f04:	24000c18 	.word	0x24000c18
 8002f08:	24000078 	.word	0x24000078
 8002f0c:	24000070 	.word	0x24000070
 8002f10:	24000afa 	.word	0x24000afa
 8002f14:	24000bf0 	.word	0x24000bf0
 8002f18:	24000cd4 	.word	0x24000cd4
 8002f1c:	24000422 	.word	0x24000422
 8002f20:	240001f1 	.word	0x240001f1
 8002f24:	58020000 	.word	0x58020000
 8002f28:	24000970 	.word	0x24000970
 8002f2c:	240001d8 	.word	0x240001d8
 8002f30:	24000d58 	.word	0x24000d58
 8002f34:	24000058 	.word	0x24000058
 8002f38:	24000048 	.word	0x24000048
 8002f3c:	24000068 	.word	0x24000068
	  {
		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_Pitc], 0);
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <goToBallRigt+0x670>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f7fe fc42 	bl	80017d8 <roR_Pit_Yaw_GoTo>
	  while(((HAL_GetTick()-startTime)<10000)&&(btn_Sel==1))	//gắp bóng
 8002f54:	f002 fc72 	bl	800583c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b44      	ldr	r3, [pc, #272]	; (800306c <goToBallRigt+0x674>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d803      	bhi.n	8002f70 <goToBallRigt+0x578>
 8002f68:	4b41      	ldr	r3, [pc, #260]	; (8003070 <goToBallRigt+0x678>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d0e7      	beq.n	8002f40 <goToBallRigt+0x548>
	  }
	  brake();
 8002f70:	f7fe fbda 	bl	8001728 <brake>
	  HAL_Delay(30);
 8002f74:	201e      	movs	r0, #30
 8002f76:	f002 fc6d 	bl	8005854 <HAL_Delay>
	  freeMotor();
 8002f7a:	f7fe fbe9 	bl	8001750 <freeMotor>
	  passHand(PASSHAND_CLOSE);	//gắp bóng
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f84:	483b      	ldr	r0, [pc, #236]	; (8003074 <goToBallRigt+0x67c>)
 8002f86:	f006 ff13 	bl	8009db0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002f8a:	2064      	movs	r0, #100	; 0x64
 8002f8c:	f002 fc62 	bl	8005854 <HAL_Delay>
	  ST7920_Clear();
 8002f90:	f7fd fdaa 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "btn_D waiting");
 8002f94:	4a38      	ldr	r2, [pc, #224]	; (8003078 <goToBallRigt+0x680>)
 8002f96:	2100      	movs	r1, #0
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f7fd fd63 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "readyToPass");
 8002f9e:	4a37      	ldr	r2, [pc, #220]	; (800307c <goToBallRigt+0x684>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	f7fd fd5e 	bl	8000a64 <ST7920_SendString>
	  startTime = HAL_GetTick();
 8002fa8:	f002 fc48 	bl	800583c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <goToBallRigt+0x674>)
 8002fb0:	601a      	str	r2, [r3, #0]
	  while(((HAL_GetTick()-startTime)<100))
 8002fb2:	e00f      	b.n	8002fd4 <goToBallRigt+0x5dc>
	  {
		  controlMotor1(-20);
 8002fb4:	f06f 0013 	mvn.w	r0, #19
 8002fb8:	f7fd fe2c 	bl	8000c14 <controlMotor1>
		  controlMotor2(-20);
 8002fbc:	f06f 0013 	mvn.w	r0, #19
 8002fc0:	f7fd fe64 	bl	8000c8c <controlMotor2>
		  controlMotor3(20);
 8002fc4:	2014      	movs	r0, #20
 8002fc6:	f7fd fe9d 	bl	8000d04 <controlMotor3>
		  controlMotor4(20);
 8002fca:	2014      	movs	r0, #20
 8002fcc:	f7fd fed6 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8002fd0:	f7fd fca0 	bl	8000914 <spinalCordTrans>
	  while(((HAL_GetTick()-startTime)<100))
 8002fd4:	f002 fc32 	bl	800583c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <goToBallRigt+0x674>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b63      	cmp	r3, #99	; 0x63
 8002fe2:	d9e7      	bls.n	8002fb4 <goToBallRigt+0x5bc>
	  }
	  brake();
 8002fe4:	f7fe fba0 	bl	8001728 <brake>
	  HAL_Delay(300);
 8002fe8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fec:	f002 fc32 	bl	8005854 <HAL_Delay>
	  freeMotor();
 8002ff0:	f7fe fbae 	bl	8001750 <freeMotor>
	  while(zmanualRxPacket[0] != 'D'&&btn_D!=0)	//chờ manual nhấn nút
 8002ff4:	e009      	b.n	800300a <goToBallRigt+0x612>
	  {
		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_PitcWait], 0);
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <goToBallRigt+0x670>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3306      	adds	r3, #6
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	4619      	mov	r1, r3
 8003006:	f7fe fbe7 	bl	80017d8 <roR_Pit_Yaw_GoTo>
	  while(zmanualRxPacket[0] != 'D'&&btn_D!=0)	//chờ manual nhấn nút
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <goToBallRigt+0x688>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b44      	cmp	r3, #68	; 0x44
 8003010:	d003      	beq.n	800301a <goToBallRigt+0x622>
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <goToBallRigt+0x68c>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ed      	bne.n	8002ff6 <goToBallRigt+0x5fe>
//		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_PitcWait], 0);
	  }
	  brake();
 800301a:	f7fe fb85 	bl	8001728 <brake>
	  HAL_Delay(30);
 800301e:	201e      	movs	r0, #30
 8003020:	f002 fc18 	bl	8005854 <HAL_Delay>
	  freeMotor();
 8003024:	f7fe fb94 	bl	8001750 <freeMotor>
	  passArm(PASSARM_UP);
 8003028:	2200      	movs	r2, #0
 800302a:	2104      	movs	r1, #4
 800302c:	4811      	ldr	r0, [pc, #68]	; (8003074 <goToBallRigt+0x67c>)
 800302e:	f006 febf 	bl	8009db0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8003032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003036:	f002 fc0d 	bl	8005854 <HAL_Delay>
	  passArm(PASSARM_DOWN);
 800303a:	2201      	movs	r2, #1
 800303c:	2104      	movs	r1, #4
 800303e:	480d      	ldr	r0, [pc, #52]	; (8003074 <goToBallRigt+0x67c>)
 8003040:	f006 feb6 	bl	8009db0 <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800304a:	480a      	ldr	r0, [pc, #40]	; (8003074 <goToBallRigt+0x67c>)
 800304c:	f006 feb0 	bl	8009db0 <HAL_GPIO_WritePin>
	  startMode = 0;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <goToBallRigt+0x690>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
	  ball_temp[_Rigt] = 0;
 8003056:	4b04      	ldr	r3, [pc, #16]	; (8003068 <goToBallRigt+0x670>)
 8003058:	2200      	movs	r2, #0
 800305a:	801a      	strh	r2, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	ecbd 8b04 	vpop	{d8-d9}
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	240001d8 	.word	0x240001d8
 800306c:	24000d58 	.word	0x24000d58
 8003070:	2400091c 	.word	0x2400091c
 8003074:	58020000 	.word	0x58020000
 8003078:	080122c0 	.word	0x080122c0
 800307c:	080122d0 	.word	0x080122d0
 8003080:	24000928 	.word	0x24000928
 8003084:	24000426 	.word	0x24000426
 8003088:	24000bb8 	.word	0x24000bb8
 800308c:	00000000 	.word	0x00000000

08003090 <manualMode>:

void manualMode()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	ed2d 8b04 	vpush	{d8-d9}
 8003096:	af00      	add	r7, sp, #0
	passArm(PASSARM_DOWN);
 8003098:	2201      	movs	r2, #1
 800309a:	2104      	movs	r1, #4
 800309c:	48b0      	ldr	r0, [pc, #704]	; (8003360 <manualMode+0x2d0>)
 800309e:	f006 fe87 	bl	8009db0 <HAL_GPIO_WritePin>
	passHand(PASSHAND_OPEN);
 80030a2:	2201      	movs	r2, #1
 80030a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030a8:	48ad      	ldr	r0, [pc, #692]	; (8003360 <manualMode+0x2d0>)
 80030aa:	f006 fe81 	bl	8009db0 <HAL_GPIO_WritePin>
	while(btn_Sel == 1)
 80030ae:	e138      	b.n	8003322 <manualMode+0x292>
	{
		  PIDyaw(compassData, 0);
 80030b0:	4bac      	ldr	r3, [pc, #688]	; (8003364 <manualMode+0x2d4>)
 80030b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fe9d 	bl	8000df8 <PIDyaw>
		  leftVer = !btn_leftUp - !btn_leftDown;
 80030be:	4baa      	ldr	r3, [pc, #680]	; (8003368 <manualMode+0x2d8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	4ba7      	ldr	r3, [pc, #668]	; (800336c <manualMode+0x2dc>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	4ba2      	ldr	r3, [pc, #648]	; (8003370 <manualMode+0x2e0>)
 80030e6:	801a      	strh	r2, [r3, #0]
		  leftHor = -!btn_leftLeft + !btn_leftRigt;
 80030e8:	4ba2      	ldr	r3, [pc, #648]	; (8003374 <manualMode+0x2e4>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b9f      	ldr	r3, [pc, #636]	; (8003378 <manualMode+0x2e8>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	b29b      	uxth	r3, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	b21a      	sxth	r2, r3
 800310e:	4b9b      	ldr	r3, [pc, #620]	; (800337c <manualMode+0x2ec>)
 8003110:	801a      	strh	r2, [r3, #0]
		  _dir = atan2(leftHor, -leftVer);
 8003112:	4b9a      	ldr	r3, [pc, #616]	; (800337c <manualMode+0x2ec>)
 8003114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003120:	4b93      	ldr	r3, [pc, #588]	; (8003370 <manualMode+0x2e0>)
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	425b      	negs	r3, r3
 8003128:	ee06 3a90 	vmov	s13, r3
 800312c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003130:	eeb0 1b46 	vmov.f64	d1, d6
 8003134:	eeb0 0b47 	vmov.f64	d0, d7
 8003138:	f00e f84e 	bl	80111d8 <atan2>
 800313c:	eeb0 7b40 	vmov.f64	d7, d0
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <manualMode+0x2f0>)
 8003142:	ed83 7b00 	vstr	d7, [r3]
		  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 8003146:	4b8a      	ldr	r3, [pc, #552]	; (8003370 <manualMode+0x2e0>)
 8003148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314c:	461a      	mov	r2, r3
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <manualMode+0x2e0>)
 8003150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003154:	fb03 f202 	mul.w	r2, r3, r2
 8003158:	4b88      	ldr	r3, [pc, #544]	; (800337c <manualMode+0x2ec>)
 800315a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315e:	4619      	mov	r1, r3
 8003160:	4b86      	ldr	r3, [pc, #536]	; (800337c <manualMode+0x2ec>)
 8003162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003166:	fb03 f301 	mul.w	r3, r3, r1
 800316a:	4413      	add	r3, r2
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003174:	eeb0 0b47 	vmov.f64	d0, d7
 8003178:	f00e f832 	bl	80111e0 <sqrt>
 800317c:	eeb0 7b40 	vmov.f64	d7, d0
 8003180:	4b80      	ldr	r3, [pc, #512]	; (8003384 <manualMode+0x2f4>)
 8003182:	ed83 7b00 	vstr	d7, [r3]
		  _motor1Speed = joyRigtHor*0.07 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8003186:	4b80      	ldr	r3, [pc, #512]	; (8003388 <manualMode+0x2f8>)
 8003188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003194:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003340 <manualMode+0x2b0>
 8003198:	ee27 8b06 	vmul.f64	d8, d7, d6
 800319c:	4b7b      	ldr	r3, [pc, #492]	; (800338c <manualMode+0x2fc>)
 800319e:	ed93 6b00 	vldr	d6, [r3]
 80031a2:	4b78      	ldr	r3, [pc, #480]	; (8003384 <manualMode+0x2f4>)
 80031a4:	ed93 7b00 	vldr	d7, [r3]
 80031a8:	ee26 9b07 	vmul.f64	d9, d6, d7
 80031ac:	4b74      	ldr	r3, [pc, #464]	; (8003380 <manualMode+0x2f0>)
 80031ae:	ed93 7b00 	vldr	d7, [r3]
 80031b2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8003348 <manualMode+0x2b8>
 80031b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80031ba:	eeb0 0b47 	vmov.f64	d0, d7
 80031be:	f00d ffcf 	bl	8011160 <cos>
 80031c2:	eeb0 7b40 	vmov.f64	d7, d0
 80031c6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80031ca:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8003350 <manualMode+0x2c0>
 80031ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031d2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80031d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80031da:	ee17 3a90 	vmov	r3, s15
 80031de:	b21a      	sxth	r2, r3
 80031e0:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <manualMode+0x300>)
 80031e2:	801a      	strh	r2, [r3, #0]
		  _motor2Speed = joyRigtHor*0.07 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <manualMode+0x2f8>)
 80031e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80031f2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8003340 <manualMode+0x2b0>
 80031f6:	ee27 8b06 	vmul.f64	d8, d7, d6
 80031fa:	4b64      	ldr	r3, [pc, #400]	; (800338c <manualMode+0x2fc>)
 80031fc:	ed93 6b00 	vldr	d6, [r3]
 8003200:	4b60      	ldr	r3, [pc, #384]	; (8003384 <manualMode+0x2f4>)
 8003202:	ed93 7b00 	vldr	d7, [r3]
 8003206:	ee26 9b07 	vmul.f64	d9, d6, d7
 800320a:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <manualMode+0x2f0>)
 800320c:	ed93 7b00 	vldr	d7, [r3]
 8003210:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8003348 <manualMode+0x2b8>
 8003214:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003218:	eeb0 0b47 	vmov.f64	d0, d7
 800321c:	f00d ffa0 	bl	8011160 <cos>
 8003220:	eeb0 7b40 	vmov.f64	d7, d0
 8003224:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003228:	ee38 7b07 	vadd.f64	d7, d8, d7
 800322c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003230:	ee17 3a90 	vmov	r3, s15
 8003234:	b21a      	sxth	r2, r3
 8003236:	4b57      	ldr	r3, [pc, #348]	; (8003394 <manualMode+0x304>)
 8003238:	801a      	strh	r2, [r3, #0]
		  _motor3Speed = joyRigtHor*0.07 +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <manualMode+0x2f8>)
 800323c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003248:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8003340 <manualMode+0x2b0>
 800324c:	ee27 8b06 	vmul.f64	d8, d7, d6
 8003250:	4b4e      	ldr	r3, [pc, #312]	; (800338c <manualMode+0x2fc>)
 8003252:	ed93 6b00 	vldr	d6, [r3]
 8003256:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <manualMode+0x2f4>)
 8003258:	ed93 7b00 	vldr	d7, [r3]
 800325c:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003260:	4b47      	ldr	r3, [pc, #284]	; (8003380 <manualMode+0x2f0>)
 8003262:	ed93 7b00 	vldr	d7, [r3]
 8003266:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8003358 <manualMode+0x2c8>
 800326a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800326e:	eeb0 0b47 	vmov.f64	d0, d7
 8003272:	f00d ff75 	bl	8011160 <cos>
 8003276:	eeb0 7b40 	vmov.f64	d7, d0
 800327a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800327e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003282:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8003350 <manualMode+0x2c0>
 8003286:	ee37 7b06 	vadd.f64	d7, d7, d6
 800328a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800328e:	ee17 3a90 	vmov	r3, s15
 8003292:	b21a      	sxth	r2, r3
 8003294:	4b40      	ldr	r3, [pc, #256]	; (8003398 <manualMode+0x308>)
 8003296:	801a      	strh	r2, [r3, #0]
		  _motor4Speed = joyRigtHor*0.07 +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8003298:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <manualMode+0x2f8>)
 800329a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80032a6:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8003340 <manualMode+0x2b0>
 80032aa:	ee27 8b06 	vmul.f64	d8, d7, d6
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <manualMode+0x2fc>)
 80032b0:	ed93 6b00 	vldr	d6, [r3]
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <manualMode+0x2f4>)
 80032b6:	ed93 7b00 	vldr	d7, [r3]
 80032ba:	ee26 9b07 	vmul.f64	d9, d6, d7
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <manualMode+0x2f0>)
 80032c0:	ed93 7b00 	vldr	d7, [r3]
 80032c4:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8003358 <manualMode+0x2c8>
 80032c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80032cc:	eeb0 0b47 	vmov.f64	d0, d7
 80032d0:	f00d ff46 	bl	8011160 <cos>
 80032d4:	eeb0 7b40 	vmov.f64	d7, d0
 80032d8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80032dc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80032e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80032e4:	ee17 3a90 	vmov	r3, s15
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	4b2c      	ldr	r3, [pc, #176]	; (800339c <manualMode+0x30c>)
 80032ec:	801a      	strh	r2, [r3, #0]
		  controlMotor1(_motor1Speed);
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <manualMode+0x300>)
 80032f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fc8d 	bl	8000c14 <controlMotor1>
		  controlMotor2(_motor2Speed);
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <manualMode+0x304>)
 80032fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fcc3 	bl	8000c8c <controlMotor2>
		  controlMotor3(_motor3Speed);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <manualMode+0x308>)
 8003308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd fcf9 	bl	8000d04 <controlMotor3>
		  controlMotor4(_motor4Speed);
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <manualMode+0x30c>)
 8003314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fd2f 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 800331e:	f7fd faf9 	bl	8000914 <spinalCordTrans>
	while(btn_Sel == 1)
 8003322:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <manualMode+0x310>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	f43f aec2 	beq.w	80030b0 <manualMode+0x20>
	}
	passHand(PASSHAND_CLOSE);
 800332c:	2200      	movs	r2, #0
 800332e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003332:	480b      	ldr	r0, [pc, #44]	; (8003360 <manualMode+0x2d0>)
 8003334:	f006 fd3c 	bl	8009db0 <HAL_GPIO_WritePin>
	while(btn_X == 1)
 8003338:	e16d      	b.n	8003616 <manualMode+0x586>
 800333a:	bf00      	nop
 800333c:	f3af 8000 	nop.w
 8003340:	1eb851ec 	.word	0x1eb851ec
 8003344:	3fb1eb85 	.word	0x3fb1eb85
 8003348:	7f3321d2 	.word	0x7f3321d2
 800334c:	4002d97c 	.word	0x4002d97c
	...
 8003358:	54442d18 	.word	0x54442d18
 800335c:	3fe921fb 	.word	0x3fe921fb
 8003360:	58020000 	.word	0x58020000
 8003364:	24000930 	.word	0x24000930
 8003368:	24000cd0 	.word	0x24000cd0
 800336c:	24000bc8 	.word	0x24000bc8
 8003370:	24000c00 	.word	0x24000c00
 8003374:	24000bb9 	.word	0x24000bb9
 8003378:	24000425 	.word	0x24000425
 800337c:	2400084e 	.word	0x2400084e
 8003380:	24000890 	.word	0x24000890
 8003384:	24000ba8 	.word	0x24000ba8
 8003388:	24000448 	.word	0x24000448
 800338c:	24000070 	.word	0x24000070
 8003390:	24000afa 	.word	0x24000afa
 8003394:	24000bf0 	.word	0x24000bf0
 8003398:	24000cd4 	.word	0x24000cd4
 800339c:	24000422 	.word	0x24000422
 80033a0:	2400091c 	.word	0x2400091c
	{
		  PIDyaw(compassData, 0);
 80033a4:	4bb8      	ldr	r3, [pc, #736]	; (8003688 <manualMode+0x5f8>)
 80033a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd fd23 	bl	8000df8 <PIDyaw>
		  leftVer = !btn_leftUp - !btn_leftDown;
 80033b2:	4bb6      	ldr	r3, [pc, #728]	; (800368c <manualMode+0x5fc>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4bb3      	ldr	r3, [pc, #716]	; (8003690 <manualMode+0x600>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	4bae      	ldr	r3, [pc, #696]	; (8003694 <manualMode+0x604>)
 80033da:	801a      	strh	r2, [r3, #0]
		  leftHor = -!btn_leftLeft + !btn_leftRigt;
 80033dc:	4bae      	ldr	r3, [pc, #696]	; (8003698 <manualMode+0x608>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	4bab      	ldr	r3, [pc, #684]	; (800369c <manualMode+0x60c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	b21a      	sxth	r2, r3
 8003402:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <manualMode+0x610>)
 8003404:	801a      	strh	r2, [r3, #0]
		  _dir = atan2(leftHor, -leftVer);
 8003406:	4ba6      	ldr	r3, [pc, #664]	; (80036a0 <manualMode+0x610>)
 8003408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003414:	4b9f      	ldr	r3, [pc, #636]	; (8003694 <manualMode+0x604>)
 8003416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341a:	425b      	negs	r3, r3
 800341c:	ee06 3a90 	vmov	s13, r3
 8003420:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003424:	eeb0 1b46 	vmov.f64	d1, d6
 8003428:	eeb0 0b47 	vmov.f64	d0, d7
 800342c:	f00d fed4 	bl	80111d8 <atan2>
 8003430:	eeb0 7b40 	vmov.f64	d7, d0
 8003434:	4b9b      	ldr	r3, [pc, #620]	; (80036a4 <manualMode+0x614>)
 8003436:	ed83 7b00 	vstr	d7, [r3]
		  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 800343a:	4b96      	ldr	r3, [pc, #600]	; (8003694 <manualMode+0x604>)
 800343c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003440:	461a      	mov	r2, r3
 8003442:	4b94      	ldr	r3, [pc, #592]	; (8003694 <manualMode+0x604>)
 8003444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003448:	fb03 f202 	mul.w	r2, r3, r2
 800344c:	4b94      	ldr	r3, [pc, #592]	; (80036a0 <manualMode+0x610>)
 800344e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003452:	4619      	mov	r1, r3
 8003454:	4b92      	ldr	r3, [pc, #584]	; (80036a0 <manualMode+0x610>)
 8003456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345a:	fb03 f301 	mul.w	r3, r3, r1
 800345e:	4413      	add	r3, r2
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003468:	eeb0 0b47 	vmov.f64	d0, d7
 800346c:	f00d feb8 	bl	80111e0 <sqrt>
 8003470:	eeb0 7b40 	vmov.f64	d7, d0
 8003474:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <manualMode+0x618>)
 8003476:	ed83 7b00 	vstr	d7, [r3]
		  _motor1Speed = joyRigtHor*0.07 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 800347a:	4b8c      	ldr	r3, [pc, #560]	; (80036ac <manualMode+0x61c>)
 800347c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003488:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8003668 <manualMode+0x5d8>
 800348c:	ee27 8b06 	vmul.f64	d8, d7, d6
 8003490:	4b87      	ldr	r3, [pc, #540]	; (80036b0 <manualMode+0x620>)
 8003492:	ed93 6b00 	vldr	d6, [r3]
 8003496:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <manualMode+0x618>)
 8003498:	ed93 7b00 	vldr	d7, [r3]
 800349c:	ee26 9b07 	vmul.f64	d9, d6, d7
 80034a0:	4b80      	ldr	r3, [pc, #512]	; (80036a4 <manualMode+0x614>)
 80034a2:	ed93 7b00 	vldr	d7, [r3]
 80034a6:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003670 <manualMode+0x5e0>
 80034aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80034ae:	eeb0 0b47 	vmov.f64	d0, d7
 80034b2:	f00d fe55 	bl	8011160 <cos>
 80034b6:	eeb0 7b40 	vmov.f64	d7, d0
 80034ba:	ee29 7b07 	vmul.f64	d7, d9, d7
 80034be:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8003678 <manualMode+0x5e8>
 80034c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034c6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80034ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034ce:	ee17 3a90 	vmov	r3, s15
 80034d2:	b21a      	sxth	r2, r3
 80034d4:	4b77      	ldr	r3, [pc, #476]	; (80036b4 <manualMode+0x624>)
 80034d6:	801a      	strh	r2, [r3, #0]
		  _motor2Speed = joyRigtHor*0.07 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 80034d8:	4b74      	ldr	r3, [pc, #464]	; (80036ac <manualMode+0x61c>)
 80034da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034e6:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8003668 <manualMode+0x5d8>
 80034ea:	ee27 8b06 	vmul.f64	d8, d7, d6
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <manualMode+0x620>)
 80034f0:	ed93 6b00 	vldr	d6, [r3]
 80034f4:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <manualMode+0x618>)
 80034f6:	ed93 7b00 	vldr	d7, [r3]
 80034fa:	ee26 9b07 	vmul.f64	d9, d6, d7
 80034fe:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <manualMode+0x614>)
 8003500:	ed93 7b00 	vldr	d7, [r3]
 8003504:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003670 <manualMode+0x5e0>
 8003508:	ee37 7b06 	vadd.f64	d7, d7, d6
 800350c:	eeb0 0b47 	vmov.f64	d0, d7
 8003510:	f00d fe26 	bl	8011160 <cos>
 8003514:	eeb0 7b40 	vmov.f64	d7, d0
 8003518:	ee29 7b07 	vmul.f64	d7, d9, d7
 800351c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003520:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003524:	ee17 3a90 	vmov	r3, s15
 8003528:	b21a      	sxth	r2, r3
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <manualMode+0x628>)
 800352c:	801a      	strh	r2, [r3, #0]
		  _motor3Speed = joyRigtHor*0.07 +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <manualMode+0x61c>)
 8003530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800353c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8003668 <manualMode+0x5d8>
 8003540:	ee27 8b06 	vmul.f64	d8, d7, d6
 8003544:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <manualMode+0x620>)
 8003546:	ed93 6b00 	vldr	d6, [r3]
 800354a:	4b57      	ldr	r3, [pc, #348]	; (80036a8 <manualMode+0x618>)
 800354c:	ed93 7b00 	vldr	d7, [r3]
 8003550:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <manualMode+0x614>)
 8003556:	ed93 7b00 	vldr	d7, [r3]
 800355a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8003680 <manualMode+0x5f0>
 800355e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003562:	eeb0 0b47 	vmov.f64	d0, d7
 8003566:	f00d fdfb 	bl	8011160 <cos>
 800356a:	eeb0 7b40 	vmov.f64	d7, d0
 800356e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003572:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003576:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8003678 <manualMode+0x5e8>
 800357a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800357e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003582:	ee17 3a90 	vmov	r3, s15
 8003586:	b21a      	sxth	r2, r3
 8003588:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <manualMode+0x62c>)
 800358a:	801a      	strh	r2, [r3, #0]
		  _motor4Speed = joyRigtHor*0.07 +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 800358c:	4b47      	ldr	r3, [pc, #284]	; (80036ac <manualMode+0x61c>)
 800358e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800359a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8003668 <manualMode+0x5d8>
 800359e:	ee27 8b06 	vmul.f64	d8, d7, d6
 80035a2:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <manualMode+0x620>)
 80035a4:	ed93 6b00 	vldr	d6, [r3]
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <manualMode+0x618>)
 80035aa:	ed93 7b00 	vldr	d7, [r3]
 80035ae:	ee26 9b07 	vmul.f64	d9, d6, d7
 80035b2:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <manualMode+0x614>)
 80035b4:	ed93 7b00 	vldr	d7, [r3]
 80035b8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8003680 <manualMode+0x5f0>
 80035bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80035c0:	eeb0 0b47 	vmov.f64	d0, d7
 80035c4:	f00d fdcc 	bl	8011160 <cos>
 80035c8:	eeb0 7b40 	vmov.f64	d7, d0
 80035cc:	ee29 7b07 	vmul.f64	d7, d9, d7
 80035d0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80035d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035d8:	ee17 3a90 	vmov	r3, s15
 80035dc:	b21a      	sxth	r2, r3
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <manualMode+0x630>)
 80035e0:	801a      	strh	r2, [r3, #0]
		  controlMotor1(_motor1Speed);
 80035e2:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <manualMode+0x624>)
 80035e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fb13 	bl	8000c14 <controlMotor1>
		  controlMotor2(_motor2Speed);
 80035ee:	4b32      	ldr	r3, [pc, #200]	; (80036b8 <manualMode+0x628>)
 80035f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fb49 	bl	8000c8c <controlMotor2>
		  controlMotor3(_motor3Speed);
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <manualMode+0x62c>)
 80035fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fb7f 	bl	8000d04 <controlMotor3>
		  controlMotor4(_motor4Speed);
 8003606:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <manualMode+0x630>)
 8003608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fbb5 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8003612:	f7fd f97f 	bl	8000914 <spinalCordTrans>
	while(btn_X == 1)
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <manualMode+0x634>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	f43f aec2 	beq.w	80033a4 <manualMode+0x314>
	}
	while((zmanualRxPacket[0]!='D')&&(btn_D == 1));
 8003620:	bf00      	nop
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <manualMode+0x638>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b44      	cmp	r3, #68	; 0x44
 8003628:	d003      	beq.n	8003632 <manualMode+0x5a2>
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <manualMode+0x63c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d0f7      	beq.n	8003622 <manualMode+0x592>
	passArm(PASSARM_UP);
 8003632:	2200      	movs	r2, #0
 8003634:	2104      	movs	r1, #4
 8003636:	4826      	ldr	r0, [pc, #152]	; (80036d0 <manualMode+0x640>)
 8003638:	f006 fbba 	bl	8009db0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800363c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003640:	f002 f908 	bl	8005854 <HAL_Delay>
	passArm(PASSARM_DOWN);
 8003644:	2201      	movs	r2, #1
 8003646:	2104      	movs	r1, #4
 8003648:	4821      	ldr	r0, [pc, #132]	; (80036d0 <manualMode+0x640>)
 800364a:	f006 fbb1 	bl	8009db0 <HAL_GPIO_WritePin>
	passHand(PASSHAND_OPEN);
 800364e:	2201      	movs	r2, #1
 8003650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003654:	481e      	ldr	r0, [pc, #120]	; (80036d0 <manualMode+0x640>)
 8003656:	f006 fbab 	bl	8009db0 <HAL_GPIO_WritePin>
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	ecbd 8b04 	vpop	{d8-d9}
 8003662:	bd80      	pop	{r7, pc}
 8003664:	f3af 8000 	nop.w
 8003668:	1eb851ec 	.word	0x1eb851ec
 800366c:	3fb1eb85 	.word	0x3fb1eb85
 8003670:	7f3321d2 	.word	0x7f3321d2
 8003674:	4002d97c 	.word	0x4002d97c
	...
 8003680:	54442d18 	.word	0x54442d18
 8003684:	3fe921fb 	.word	0x3fe921fb
 8003688:	24000930 	.word	0x24000930
 800368c:	24000cd0 	.word	0x24000cd0
 8003690:	24000bc8 	.word	0x24000bc8
 8003694:	24000c00 	.word	0x24000c00
 8003698:	24000bb9 	.word	0x24000bb9
 800369c:	24000425 	.word	0x24000425
 80036a0:	2400084e 	.word	0x2400084e
 80036a4:	24000890 	.word	0x24000890
 80036a8:	24000ba8 	.word	0x24000ba8
 80036ac:	24000448 	.word	0x24000448
 80036b0:	24000070 	.word	0x24000070
 80036b4:	24000afa 	.word	0x24000afa
 80036b8:	24000bf0 	.word	0x24000bf0
 80036bc:	24000cd4 	.word	0x24000cd4
 80036c0:	24000422 	.word	0x24000422
 80036c4:	240001f1 	.word	0x240001f1
 80036c8:	24000928 	.word	0x24000928
 80036cc:	24000426 	.word	0x24000426
 80036d0:	58020000 	.word	0x58020000
 80036d4:	00000000 	.word	0x00000000

080036d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	ed2d 8b04 	vpush	{d8-d9}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036e0:	f002 f826 	bl	8005730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036e4:	f000 fd26 	bl	8004134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036e8:	f001 f80e 	bl	8004708 <MX_GPIO_Init>
  MX_DMA_Init();
 80036ec:	f000 ffc4 	bl	8004678 <MX_DMA_Init>
  MX_ADC3_Init();
 80036f0:	f000 fdd6 	bl	80042a0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80036f4:	f000 fedc 	bl	80044b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80036f8:	f000 ff26 	bl	8004548 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80036fc:	f000 fe54 	bl	80043a8 <MX_TIM7_Init>
  MX_UART7_Init();
 8003700:	f000 fe8a 	bl	8004418 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8003704:	f000 ff6c 	bl	80045e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8003708:	f7fc ffba 	bl	8000680 <delayUs_Init>
  peripheralUART_Init();
 800370c:	f7fc fffe 	bl	800070c <peripheralUART_Init>
  peripheralADC_Init();
 8003710:	f7fd fa72 	bl	8000bf8 <peripheralADC_Init>
  positionControl_Init();
 8003714:	f7fe f99a 	bl	8001a4c <positionControl_Init>
  cylinder_Init();
 8003718:	f7ff f834 	bl	8002784 <cylinder_Init>
  ST7920_Init();
 800371c:	f7fd fa2c 	bl	8000b78 <ST7920_Init>
  brake();
 8003720:	f7fe f802 	bl	8001728 <brake>
  freeMotor();
 8003724:	f7fe f814 	bl	8001750 <freeMotor>
  compassReset();
 8003728:	f7fd f8be 	bl	80008a8 <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800372c:	2200      	movs	r2, #0
 800372e:	2101      	movs	r1, #1
 8003730:	48bb      	ldr	r0, [pc, #748]	; (8003a20 <main+0x348>)
 8003732:	f006 fb3d 	bl	8009db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8003736:	2201      	movs	r2, #1
 8003738:	2102      	movs	r1, #2
 800373a:	48ba      	ldr	r0, [pc, #744]	; (8003a24 <main+0x34c>)
 800373c:	f006 fb38 	bl	8009db0 <HAL_GPIO_WritePin>

  if(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//nếu như gạt phải khởi động
 8003740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003744:	48b7      	ldr	r0, [pc, #732]	; (8003a24 <main+0x34c>)
 8003746:	f006 fb1b 	bl	8009d80 <HAL_GPIO_ReadPin>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d137      	bne.n	80037c0 <main+0xe8>
  {
	  ST7920_SendString(0,0, "SAMPLE:");
 8003750:	4ab5      	ldr	r2, [pc, #724]	; (8003a28 <main+0x350>)
 8003752:	2100      	movs	r1, #0
 8003754:	2000      	movs	r0, #0
 8003756:	f7fd f985 	bl	8000a64 <ST7920_SendString>
	  getSample();
 800375a:	f7fe fc4d 	bl	8001ff8 <getSample>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 800375e:	e00e      	b.n	800377e <main+0xa6>
	  {
		  ST7920_SendString(0,0, "PLEASE SWITCH");
 8003760:	4ab2      	ldr	r2, [pc, #712]	; (8003a2c <main+0x354>)
 8003762:	2100      	movs	r1, #0
 8003764:	2000      	movs	r0, #0
 8003766:	f7fd f97d 	bl	8000a64 <ST7920_SendString>
		  HAL_Delay(1000);
 800376a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800376e:	f002 f871 	bl	8005854 <HAL_Delay>
		  ST7920_Clear();
 8003772:	f7fd f9b9 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(1000);
 8003776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800377a:	f002 f86b 	bl	8005854 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 800377e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003782:	48a8      	ldr	r0, [pc, #672]	; (8003a24 <main+0x34c>)
 8003784:	f006 fafc 	bl	8009d80 <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0e8      	beq.n	8003760 <main+0x88>
	  }
	  while(1)
	  {
		  tracking++;
 800378e:	4ba8      	ldr	r3, [pc, #672]	; (8003a30 <main+0x358>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	4aa6      	ldr	r2, [pc, #664]	; (8003a30 <main+0x358>)
 8003796:	6013      	str	r3, [r2, #0]
		  ST7920_SendString(0,0, "PLEASE RESET");
 8003798:	4aa6      	ldr	r2, [pc, #664]	; (8003a34 <main+0x35c>)
 800379a:	2100      	movs	r1, #0
 800379c:	2000      	movs	r0, #0
 800379e:	f7fd f961 	bl	8000a64 <ST7920_SendString>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80037a2:	2102      	movs	r1, #2
 80037a4:	489f      	ldr	r0, [pc, #636]	; (8003a24 <main+0x34c>)
 80037a6:	f006 fb1c 	bl	8009de2 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80037aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037ae:	f002 f851 	bl	8005854 <HAL_Delay>
		  ST7920_Clear();
 80037b2:	f7fd f999 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(500);
 80037b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037ba:	f002 f84b 	bl	8005854 <HAL_Delay>
		  tracking++;
 80037be:	e7e6      	b.n	800378e <main+0xb6>
	  }
  }
  else	// nếu như gạt trái HAL_Read == 1
  {
	  ST7920_SendString(0,0, "FREE MODE");
 80037c0:	4a9d      	ldr	r2, [pc, #628]	; (8003a38 <main+0x360>)
 80037c2:	2100      	movs	r1, #0
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fd f94d 	bl	8000a64 <ST7920_SendString>
	  tracking = 148;
 80037ca:	4b99      	ldr	r3, [pc, #612]	; (8003a30 <main+0x358>)
 80037cc:	2294      	movs	r2, #148	; 0x94
 80037ce:	601a      	str	r2, [r3, #0]
	  readFLASH();
 80037d0:	f7fe fb80 	bl	8001ed4 <readFLASH>
	  tracking = 150;
 80037d4:	4b96      	ldr	r3, [pc, #600]	; (8003a30 <main+0x358>)
 80037d6:	2296      	movs	r2, #150	; 0x96
 80037d8:	601a      	str	r2, [r3, #0]
  }
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80037da:	2200      	movs	r2, #0
 80037dc:	2102      	movs	r1, #2
 80037de:	4891      	ldr	r0, [pc, #580]	; (8003a24 <main+0x34c>)
 80037e0:	f006 fae6 	bl	8009db0 <HAL_GPIO_WritePin>
  HAL_Delay(INIT_TIME);
 80037e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037e8:	f002 f834 	bl	8005854 <HAL_Delay>
  if(btn_Sta == 0)
 80037ec:	4b93      	ldr	r3, [pc, #588]	; (8003a3c <main+0x364>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d114      	bne.n	800381e <main+0x146>
  {
	  while(1)
	  {
		  ST7920_SendString(0, 0, "disconBluetooth");
 80037f4:	4a92      	ldr	r2, [pc, #584]	; (8003a40 <main+0x368>)
 80037f6:	2100      	movs	r1, #0
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7fd f933 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(1, 0, "pleaseReset");
 80037fe:	4a91      	ldr	r2, [pc, #580]	; (8003a44 <main+0x36c>)
 8003800:	2100      	movs	r1, #0
 8003802:	2001      	movs	r0, #1
 8003804:	f7fd f92e 	bl	8000a64 <ST7920_SendString>
		  HAL_Delay(500);
 8003808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800380c:	f002 f822 	bl	8005854 <HAL_Delay>
		  ST7920_Clear();
 8003810:	f7fd f96a 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(500);
 8003814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003818:	f002 f81c 	bl	8005854 <HAL_Delay>
		  ST7920_SendString(0, 0, "disconBluetooth");
 800381c:	e7ea      	b.n	80037f4 <main+0x11c>

#ifdef REDFIELD
while (1)
{
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  wait4SelectMode();
 800381e:	f7fe ffdb 	bl	80027d8 <wait4SelectMode>
  if(startMode == TO_SHOOT)
 8003822:	4b89      	ldr	r3, [pc, #548]	; (8003a48 <main+0x370>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b05      	cmp	r3, #5
 8003828:	f040 81f3 	bne.w	8003c12 <main+0x53a>
  {

	  passArm(PASSARM_UP);
 800382c:	2200      	movs	r2, #0
 800382e:	2104      	movs	r1, #4
 8003830:	4886      	ldr	r0, [pc, #536]	; (8003a4c <main+0x374>)
 8003832:	f006 fabd 	bl	8009db0 <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 8003836:	2201      	movs	r2, #1
 8003838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800383c:	4883      	ldr	r0, [pc, #524]	; (8003a4c <main+0x374>)
 800383e:	f006 fab7 	bl	8009db0 <HAL_GPIO_WritePin>
	  startTime = HAL_GetTick();
 8003842:	f001 fffb 	bl	800583c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <main+0x378>)
 800384a:	601a      	str	r2, [r3, #0]
	  ST7920_SendString(0,0, "btn_Sel waiting");
 800384c:	4a81      	ldr	r2, [pc, #516]	; (8003a54 <main+0x37c>)
 800384e:	2100      	movs	r1, #0
 8003850:	2000      	movs	r0, #0
 8003852:	f7fd f907 	bl	8000a64 <ST7920_SendString>
	  while((btn_Sel==1)&&(HAL_GetTick()-startTime<4700))
 8003856:	e00d      	b.n	8003874 <main+0x19c>
	  {
		  ST7920_Clear();
 8003858:	f7fd f946 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(0, 0, "autotuning");
 800385c:	4a7e      	ldr	r2, [pc, #504]	; (8003a58 <main+0x380>)
 800385e:	2100      	movs	r1, #0
 8003860:	2000      	movs	r0, #0
 8003862:	f7fd f8ff 	bl	8000a64 <ST7920_SendString>
		  roR_Pit_Yaw_GoTo(1400, 3500, -900);
 8003866:	4a7d      	ldr	r2, [pc, #500]	; (8003a5c <main+0x384>)
 8003868:	f640 51ac 	movw	r1, #3500	; 0xdac
 800386c:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8003870:	f7fd ffb2 	bl	80017d8 <roR_Pit_Yaw_GoTo>
	  while((btn_Sel==1)&&(HAL_GetTick()-startTime<4700))
 8003874:	4b7a      	ldr	r3, [pc, #488]	; (8003a60 <main+0x388>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d109      	bne.n	8003890 <main+0x1b8>
 800387c:	f001 ffde 	bl	800583c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <main+0x378>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 225b 	movw	r2, #4699	; 0x125b
 800388c:	4293      	cmp	r3, r2
 800388e:	d9e3      	bls.n	8003858 <main+0x180>
	  }
	  startTime = HAL_GetTick();
 8003890:	f001 ffd4 	bl	800583c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	4b6e      	ldr	r3, [pc, #440]	; (8003a50 <main+0x378>)
 8003898:	601a      	str	r2, [r3, #0]
	  while(HAL_GetTick()-startTime<1000)
 800389a:	e009      	b.n	80038b0 <main+0x1d8>
	  {
		  ST7920_SendString(0, 0, "cross");
 800389c:	4a71      	ldr	r2, [pc, #452]	; (8003a64 <main+0x38c>)
 800389e:	2100      	movs	r1, #0
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fd f8df 	bl	8000a64 <ST7920_SendString>
		  goCross(100, 1, -900);
 80038a6:	4a6d      	ldr	r2, [pc, #436]	; (8003a5c <main+0x384>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	2064      	movs	r0, #100	; 0x64
 80038ac:	f7fd ffc6 	bl	800183c <goCross>
	  while(HAL_GetTick()-startTime<1000)
 80038b0:	f001 ffc4 	bl	800583c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <main+0x378>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c0:	d3ec      	bcc.n	800389c <main+0x1c4>
	  }
	  ST7920_SendString(0,0, "btn_X   waiting");
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <main+0x390>)
 80038c4:	2100      	movs	r1, #0
 80038c6:	2000      	movs	r0, #0
 80038c8:	f7fd f8cc 	bl	8000a64 <ST7920_SendString>
	  while(btn_X==1)
 80038cc:	e00d      	b.n	80038ea <main+0x212>
	  {
		  ST7920_Clear();
 80038ce:	f7fd f90b 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(0, 0, "finish");
 80038d2:	4a66      	ldr	r2, [pc, #408]	; (8003a6c <main+0x394>)
 80038d4:	2100      	movs	r1, #0
 80038d6:	2000      	movs	r0, #0
 80038d8:	f7fd f8c4 	bl	8000a64 <ST7920_SendString>
		  roL_Pit_Yaw_GoTo(1300,1600,-900);
 80038dc:	4a5f      	ldr	r2, [pc, #380]	; (8003a5c <main+0x384>)
 80038de:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80038e2:	f240 5014 	movw	r0, #1300	; 0x514
 80038e6:	f7fd ff45 	bl	8001774 <roL_Pit_Yaw_GoTo>
	  while(btn_X==1)
 80038ea:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <main+0x398>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d0ed      	beq.n	80038ce <main+0x1f6>
	  }
	  while(btn_Sel == 1)
 80038f2:	e00d      	b.n	8003910 <main+0x238>
	  {
//		  PIDyaw(compassData, -1200);
		  controlMotor1(8);
 80038f4:	2008      	movs	r0, #8
 80038f6:	f7fd f98d 	bl	8000c14 <controlMotor1>
		  controlMotor2(8);
 80038fa:	2008      	movs	r0, #8
 80038fc:	f7fd f9c6 	bl	8000c8c <controlMotor2>
		  controlMotor3(8);
 8003900:	2008      	movs	r0, #8
 8003902:	f7fd f9ff 	bl	8000d04 <controlMotor3>
		  controlMotor4(8);
 8003906:	2008      	movs	r0, #8
 8003908:	f7fd fa38 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 800390c:	f7fd f802 	bl	8000914 <spinalCordTrans>
	  while(btn_Sel == 1)
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <main+0x388>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d0ed      	beq.n	80038f4 <main+0x21c>
	  }
	  ST7920_Clear();
 8003918:	f7fd f8e6 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(0, 0, "ready2Put Q");
 800391c:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <main+0x39c>)
 800391e:	2100      	movs	r1, #0
 8003920:	2000      	movs	r0, #0
 8003922:	f7fd f89f 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(1, 0, "AIMING");
 8003926:	4a54      	ldr	r2, [pc, #336]	; (8003a78 <main+0x3a0>)
 8003928:	2100      	movs	r1, #0
 800392a:	2001      	movs	r0, #1
 800392c:	f7fd f89a 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(2, 0, "btn_Q waiting");
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <main+0x3a4>)
 8003932:	2100      	movs	r1, #0
 8003934:	2002      	movs	r0, #2
 8003936:	f7fd f895 	bl	8000a64 <ST7920_SendString>
	  while(btn_E==1)	//khi chưa nhấn E
 800393a:	e052      	b.n	80039e2 <main+0x30a>
	  {

		  if((btn_leftLeft==1)&&(btn_leftRigt==1))	//khi chưa nhấn 2 nút < và >
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <main+0x3a8>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10c      	bne.n	800395e <main+0x286>
 8003944:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <main+0x3ac>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d108      	bne.n	800395e <main+0x286>
		  {
			  brake();
 800394c:	f7fd feec 	bl	8001728 <brake>
			  HAL_Delay(300);
 8003950:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003954:	f001 ff7e 	bl	8005854 <HAL_Delay>
			  freeMotor();
 8003958:	f7fd fefa 	bl	8001750 <freeMotor>
 800395c:	e041      	b.n	80039e2 <main+0x30a>
		  }
		  else if((btn_leftLeft==0)&&(btn_leftRigt==0))	//khi nhấn < + >
 800395e:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <main+0x3a8>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <main+0x2a8>
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <main+0x3ac>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <main+0x2a8>
		  {
			  brake();
 800396e:	f7fd fedb 	bl	8001728 <brake>
			  HAL_Delay(300);
 8003972:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003976:	f001 ff6d 	bl	8005854 <HAL_Delay>
			  freeMotor();
 800397a:	f7fd fee9 	bl	8001750 <freeMotor>
 800397e:	e030      	b.n	80039e2 <main+0x30a>
		  }
		  else if((btn_leftLeft==0)&&(btn_leftRigt==1))	//khi nhấn <
 8003980:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <main+0x3a8>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <main+0x2de>
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <main+0x3ac>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d112      	bne.n	80039b6 <main+0x2de>
		  {
			  controlMotor1(turnSpeed);
 8003990:	f06f 0005 	mvn.w	r0, #5
 8003994:	f7fd f93e 	bl	8000c14 <controlMotor1>
			  controlMotor2(turnSpeed);
 8003998:	f06f 0005 	mvn.w	r0, #5
 800399c:	f7fd f976 	bl	8000c8c <controlMotor2>
			  controlMotor3(turnSpeed);
 80039a0:	f06f 0005 	mvn.w	r0, #5
 80039a4:	f7fd f9ae 	bl	8000d04 <controlMotor3>
			  controlMotor4(turnSpeed);
 80039a8:	f06f 0005 	mvn.w	r0, #5
 80039ac:	f7fd f9e6 	bl	8000d7c <controlMotor4>
			  spinalCordTrans();
 80039b0:	f7fc ffb0 	bl	8000914 <spinalCordTrans>
 80039b4:	e015      	b.n	80039e2 <main+0x30a>
		  }
		  else if((btn_leftLeft==1)&&(btn_leftRigt==0))	//khi nhấn >
 80039b6:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <main+0x3a8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d111      	bne.n	80039e2 <main+0x30a>
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <main+0x3ac>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <main+0x30a>
		  {
			  controlMotor1(-turnSpeed);
 80039c6:	2006      	movs	r0, #6
 80039c8:	f7fd f924 	bl	8000c14 <controlMotor1>
			  controlMotor2(-turnSpeed);
 80039cc:	2006      	movs	r0, #6
 80039ce:	f7fd f95d 	bl	8000c8c <controlMotor2>
			  controlMotor3(-turnSpeed);
 80039d2:	2006      	movs	r0, #6
 80039d4:	f7fd f996 	bl	8000d04 <controlMotor3>
			  controlMotor4(-turnSpeed);
 80039d8:	2006      	movs	r0, #6
 80039da:	f7fd f9cf 	bl	8000d7c <controlMotor4>
			  spinalCordTrans();
 80039de:	f7fc ff99 	bl	8000914 <spinalCordTrans>
	  while(btn_E==1)	//khi chưa nhấn E
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <main+0x3b0>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d0a8      	beq.n	800393c <main+0x264>
		  }
	  }
	  ST7920_SendString(2,0,"              ");
 80039ea:	4a28      	ldr	r2, [pc, #160]	; (8003a8c <main+0x3b4>)
 80039ec:	2100      	movs	r1, #0
 80039ee:	2002      	movs	r0, #2
 80039f0:	f7fd f838 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(2,0,"PUTTING E");
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <main+0x3b8>)
 80039f6:	2100      	movs	r1, #0
 80039f8:	2002      	movs	r0, #2
 80039fa:	f7fd f833 	bl	8000a64 <ST7920_SendString>
	  putE(PUTE_DOWN);//hạ putE
 80039fe:	2200      	movs	r2, #0
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	4807      	ldr	r0, [pc, #28]	; (8003a20 <main+0x348>)
 8003a04:	f006 f9d4 	bl	8009db0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);//ch�? ...s
 8003a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a0c:	f001 ff22 	bl	8005854 <HAL_Delay>
	  gripperE(GRIPPERE_OPEN);//mở gripperE
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a16:	480d      	ldr	r0, [pc, #52]	; (8003a4c <main+0x374>)
 8003a18:	f006 f9ca 	bl	8009db0 <HAL_GPIO_WritePin>
//		  HAL_Delay(500);//ch�? ...s
	  while((btn_A == 1)&&(btn_Q == 1))
 8003a1c:	e049      	b.n	8003ab2 <main+0x3da>
 8003a1e:	bf00      	nop
 8003a20:	58020400 	.word	0x58020400
 8003a24:	58021000 	.word	0x58021000
 8003a28:	080122dc 	.word	0x080122dc
 8003a2c:	080122e4 	.word	0x080122e4
 8003a30:	24000bd4 	.word	0x24000bd4
 8003a34:	080122f4 	.word	0x080122f4
 8003a38:	08012304 	.word	0x08012304
 8003a3c:	24000bee 	.word	0x24000bee
 8003a40:	08012310 	.word	0x08012310
 8003a44:	08012320 	.word	0x08012320
 8003a48:	24000bb8 	.word	0x24000bb8
 8003a4c:	58020000 	.word	0x58020000
 8003a50:	24000d58 	.word	0x24000d58
 8003a54:	0801232c 	.word	0x0801232c
 8003a58:	0801233c 	.word	0x0801233c
 8003a5c:	fffffc7c 	.word	0xfffffc7c
 8003a60:	2400091c 	.word	0x2400091c
 8003a64:	08012348 	.word	0x08012348
 8003a68:	08012350 	.word	0x08012350
 8003a6c:	08012360 	.word	0x08012360
 8003a70:	240001f1 	.word	0x240001f1
 8003a74:	08012368 	.word	0x08012368
 8003a78:	08012374 	.word	0x08012374
 8003a7c:	0801237c 	.word	0x0801237c
 8003a80:	24000425 	.word	0x24000425
 8003a84:	24000bb9 	.word	0x24000bb9
 8003a88:	24000428 	.word	0x24000428
 8003a8c:	0801238c 	.word	0x0801238c
 8003a90:	0801239c 	.word	0x0801239c
	  {
		  ST7920_SendString(1, 0, "                ");
 8003a94:	4ac1      	ldr	r2, [pc, #772]	; (8003d9c <main+0x6c4>)
 8003a96:	2100      	movs	r1, #0
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fc ffe3 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2, 0, "                ");
 8003a9e:	4abf      	ldr	r2, [pc, #764]	; (8003d9c <main+0x6c4>)
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f7fc ffde 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2, 0, "A or E");
 8003aa8:	4abd      	ldr	r2, [pc, #756]	; (8003da0 <main+0x6c8>)
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2002      	movs	r0, #2
 8003aae:	f7fc ffd9 	bl	8000a64 <ST7920_SendString>
	  while((btn_A == 1)&&(btn_Q == 1))
 8003ab2:	4bbc      	ldr	r3, [pc, #752]	; (8003da4 <main+0x6cc>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d103      	bne.n	8003ac2 <main+0x3ea>
 8003aba:	4bbb      	ldr	r3, [pc, #748]	; (8003da8 <main+0x6d0>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d0e8      	beq.n	8003a94 <main+0x3bc>
	  }
	  if(btn_A == 0)
 8003ac2:	4bb8      	ldr	r3, [pc, #736]	; (8003da4 <main+0x6cc>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <main+0x40c>
	  {
		  ST7920_Clear();
 8003aca:	f7fd f80d 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(0,0,"SHOOT!!!!");
 8003ace:	4ab7      	ldr	r2, [pc, #732]	; (8003dac <main+0x6d4>)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fc ffc6 	bl	8000a64 <ST7920_SendString>
		  legShoot();//shoot
 8003ad8:	f7fd ffc8 	bl	8001a6c <legShoot>
		  HAL_Delay(500);
 8003adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ae0:	f001 feb8 	bl	8005854 <HAL_Delay>
	  }
	  else if(btn_E == 0)
	  {
	  }
	  ST7920_Clear();
 8003ae4:	f7fd f800 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(0,0,"SHOOTED");
 8003ae8:	4ab1      	ldr	r2, [pc, #708]	; (8003db0 <main+0x6d8>)
 8003aea:	2100      	movs	r1, #0
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7fc ffb9 	bl	8000a64 <ST7920_SendString>
	  putE(PUTE_UP);//nâng putE
 8003af2:	2201      	movs	r2, #1
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	48af      	ldr	r0, [pc, #700]	; (8003db4 <main+0x6dc>)
 8003af8:	f006 f95a 	bl	8009db0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8003afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b00:	f001 fea8 	bl	8005854 <HAL_Delay>
	  gripperE(GRIPPERE_CLOSE);//đóng gripperE
 8003b04:	2201      	movs	r2, #1
 8003b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b0a:	48ab      	ldr	r0, [pc, #684]	; (8003db8 <main+0x6e0>)
 8003b0c:	f006 f950 	bl	8009db0 <HAL_GPIO_WritePin>
//		  while(btn_Sel==1)//khi chưa nhấn Sel
//		  {
//			  roL_Pit_Yaw_Goto(posRoL, posPit, -900);
//		  }
	  MAX_PIT_PID = 100;
 8003b10:	4baa      	ldr	r3, [pc, #680]	; (8003dbc <main+0x6e4>)
 8003b12:	2264      	movs	r2, #100	; 0x64
 8003b14:	801a      	strh	r2, [r3, #0]
	  MAX_ROL_PID = 100;
 8003b16:	4baa      	ldr	r3, [pc, #680]	; (8003dc0 <main+0x6e8>)
 8003b18:	2264      	movs	r2, #100	; 0x64
 8003b1a:	801a      	strh	r2, [r3, #0]
	  MAX_ROR_PID = 100;
 8003b1c:	4ba9      	ldr	r3, [pc, #676]	; (8003dc4 <main+0x6ec>)
 8003b1e:	2264      	movs	r2, #100	; 0x64
 8003b20:	801a      	strh	r2, [r3, #0]
	  startTime = HAL_GetTick();
 8003b22:	f001 fe8b 	bl	800583c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4ba7      	ldr	r3, [pc, #668]	; (8003dc8 <main+0x6f0>)
 8003b2a:	601a      	str	r2, [r3, #0]
//		  controlMotor2(yawPID);
//		  controlMotor3(yawPID);
//		  controlMotor4(yawPID);
//		  spinalCordTrans();
//	  }
	  while(btn_Sel == 1)
 8003b2c:	e006      	b.n	8003b3c <main+0x464>
	  {
		  roL_Pit_Yaw_GoTo(1200, 3700, -900);
 8003b2e:	4aa7      	ldr	r2, [pc, #668]	; (8003dcc <main+0x6f4>)
 8003b30:	f640 6174 	movw	r1, #3700	; 0xe74
 8003b34:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003b38:	f7fd fe1c 	bl	8001774 <roL_Pit_Yaw_GoTo>
	  while(btn_Sel == 1)
 8003b3c:	4ba4      	ldr	r3, [pc, #656]	; (8003dd0 <main+0x6f8>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d0f4      	beq.n	8003b2e <main+0x456>
	  }
	  startTime = HAL_GetTick();
 8003b44:	f001 fe7a 	bl	800583c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b9f      	ldr	r3, [pc, #636]	; (8003dc8 <main+0x6f0>)
 8003b4c:	601a      	str	r2, [r3, #0]
	  while(HAL_GetTick() - startTime < 500)
 8003b4e:	e004      	b.n	8003b5a <main+0x482>
	  {
		  goCross(100, 2, -900);
 8003b50:	4a9e      	ldr	r2, [pc, #632]	; (8003dcc <main+0x6f4>)
 8003b52:	2102      	movs	r1, #2
 8003b54:	2064      	movs	r0, #100	; 0x64
 8003b56:	f7fd fe71 	bl	800183c <goCross>
	  while(HAL_GetTick() - startTime < 500)
 8003b5a:	f001 fe6f 	bl	800583c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b99      	ldr	r3, [pc, #612]	; (8003dc8 <main+0x6f0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b6a:	d3f1      	bcc.n	8003b50 <main+0x478>
	  }
	  startTime = HAL_GetTick();
 8003b6c:	f001 fe66 	bl	800583c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b95      	ldr	r3, [pc, #596]	; (8003dc8 <main+0x6f0>)
 8003b74:	601a      	str	r2, [r3, #0]
	  while(HAL_GetTick()-startTime<300)
 8003b76:	e006      	b.n	8003b86 <main+0x4ae>
	  {
		  roR_Pit_Yaw_GoTo(1000, 400, -900);
 8003b78:	4a94      	ldr	r2, [pc, #592]	; (8003dcc <main+0x6f4>)
 8003b7a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b82:	f7fd fe29 	bl	80017d8 <roR_Pit_Yaw_GoTo>
	  while(HAL_GetTick()-startTime<300)
 8003b86:	f001 fe59 	bl	800583c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b8e      	ldr	r3, [pc, #568]	; (8003dc8 <main+0x6f0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b96:	d3ef      	bcc.n	8003b78 <main+0x4a0>
	  }
	  startTime = HAL_GetTick();
 8003b98:	f001 fe50 	bl	800583c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <main+0x6f0>)
 8003ba0:	601a      	str	r2, [r3, #0]
	  while(HAL_GetTick() - startTime <800)
 8003ba2:	e02c      	b.n	8003bfe <main+0x526>
	  {
		  PIDyaw(compassData,0);
 8003ba4:	4b8b      	ldr	r3, [pc, #556]	; (8003dd4 <main+0x6fc>)
 8003ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd f923 	bl	8000df8 <PIDyaw>
		  controlMotor1(yawPID);
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <main+0x700>)
 8003bb4:	ed93 7b00 	vldr	d7, [r3]
 8003bb8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003bbc:	ee17 0a90 	vmov	r0, s15
 8003bc0:	f7fd f828 	bl	8000c14 <controlMotor1>
		  controlMotor2(yawPID);
 8003bc4:	4b84      	ldr	r3, [pc, #528]	; (8003dd8 <main+0x700>)
 8003bc6:	ed93 7b00 	vldr	d7, [r3]
 8003bca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003bce:	ee17 0a90 	vmov	r0, s15
 8003bd2:	f7fd f85b 	bl	8000c8c <controlMotor2>
		  controlMotor3(yawPID);
 8003bd6:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <main+0x700>)
 8003bd8:	ed93 7b00 	vldr	d7, [r3]
 8003bdc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003be0:	ee17 0a90 	vmov	r0, s15
 8003be4:	f7fd f88e 	bl	8000d04 <controlMotor3>
		  controlMotor4(yawPID);
 8003be8:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <main+0x700>)
 8003bea:	ed93 7b00 	vldr	d7, [r3]
 8003bee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003bf2:	ee17 0a90 	vmov	r0, s15
 8003bf6:	f7fd f8c1 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8003bfa:	f7fc fe8b 	bl	8000914 <spinalCordTrans>
	  while(HAL_GetTick() - startTime <800)
 8003bfe:	f001 fe1d 	bl	800583c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <main+0x6f0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003c0e:	d3c9      	bcc.n	8003ba4 <main+0x4cc>
 8003c10:	e605      	b.n	800381e <main+0x146>
	  }
  }
  else if(startMode == BALL1)
 8003c12:	4b72      	ldr	r3, [pc, #456]	; (8003ddc <main+0x704>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d103      	bne.n	8003c22 <main+0x54a>
  {
	  goToBallRigt(ball1);
 8003c1a:	4871      	ldr	r0, [pc, #452]	; (8003de0 <main+0x708>)
 8003c1c:	f7fe feec 	bl	80029f8 <goToBallRigt>
 8003c20:	e5fd      	b.n	800381e <main+0x146>
  }
  else if(startMode == BALL2)
 8003c22:	4b6e      	ldr	r3, [pc, #440]	; (8003ddc <main+0x704>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d103      	bne.n	8003c32 <main+0x55a>
  {
	  goToBallRigt(ball2);
 8003c2a:	486e      	ldr	r0, [pc, #440]	; (8003de4 <main+0x70c>)
 8003c2c:	f7fe fee4 	bl	80029f8 <goToBallRigt>
 8003c30:	e5f5      	b.n	800381e <main+0x146>
  }
  else if(startMode == BALL3)
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <main+0x704>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d103      	bne.n	8003c42 <main+0x56a>
  {
	  goToBallRigt(ball3);
 8003c3a:	486b      	ldr	r0, [pc, #428]	; (8003de8 <main+0x710>)
 8003c3c:	f7fe fedc 	bl	80029f8 <goToBallRigt>
 8003c40:	e5ed      	b.n	800381e <main+0x146>
  }
  else if(startMode == BALL4)
 8003c42:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <main+0x704>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d103      	bne.n	8003c52 <main+0x57a>
  {
	  goToBallRigt(ball4);
 8003c4a:	4868      	ldr	r0, [pc, #416]	; (8003dec <main+0x714>)
 8003c4c:	f7fe fed4 	bl	80029f8 <goToBallRigt>
 8003c50:	e5e5      	b.n	800381e <main+0x146>
  }
  else if(startMode == LOAD_BALL)	//v�? vị trí load ball
 8003c52:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <main+0x704>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	f040 8227 	bne.w	80040aa <main+0x9d2>
  {
	  passArm(PASSARM_UP);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2104      	movs	r1, #4
 8003c60:	4855      	ldr	r0, [pc, #340]	; (8003db8 <main+0x6e0>)
 8003c62:	f006 f8a5 	bl	8009db0 <HAL_GPIO_WritePin>
	  startTime = HAL_GetTick();
 8003c66:	f001 fde9 	bl	800583c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <main+0x6f0>)
 8003c6e:	601a      	str	r2, [r3, #0]
	  while(HAL_GetTick()-startTime<2000)
 8003c70:	e006      	b.n	8003c80 <main+0x5a8>
	  {
		  roR_Pit_Yaw_GoTo(600, 500, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c78:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003c7c:	f7fd fdac 	bl	80017d8 <roR_Pit_Yaw_GoTo>
	  while(HAL_GetTick()-startTime<2000)
 8003c80:	f001 fddc 	bl	800583c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <main+0x6f0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c90:	d3ef      	bcc.n	8003c72 <main+0x59a>
	  }
	  ST7920_SendString(3, 0, "                ");
 8003c92:	4a42      	ldr	r2, [pc, #264]	; (8003d9c <main+0x6c4>)
 8003c94:	2100      	movs	r1, #0
 8003c96:	2003      	movs	r0, #3
 8003c98:	f7fc fee4 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "returning2-900d");
 8003c9c:	4a54      	ldr	r2, [pc, #336]	; (8003df0 <main+0x718>)
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	f7fc fedf 	bl	8000a64 <ST7920_SendString>
	  startTime = HAL_GetTick();
 8003ca6:	f001 fdc9 	bl	800583c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <main+0x6f0>)
 8003cae:	601a      	str	r2, [r3, #0]
	  while(((compassData-(900))>=10)&&((HAL_GetTick()-startTime)<800))//chưa đủ góc->hiệu chỉnh xoay đến -900
 8003cb0:	e040      	b.n	8003d34 <main+0x65c>
	  {
		  PIDyaw(compassData, -900);
 8003cb2:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <main+0x6fc>)
 8003cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb8:	4944      	ldr	r1, [pc, #272]	; (8003dcc <main+0x6f4>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd f89c 	bl	8000df8 <PIDyaw>
		  controlMotor1(yawPID);
 8003cc0:	4b45      	ldr	r3, [pc, #276]	; (8003dd8 <main+0x700>)
 8003cc2:	ed93 7b00 	vldr	d7, [r3]
 8003cc6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003cca:	ee17 0a90 	vmov	r0, s15
 8003cce:	f7fc ffa1 	bl	8000c14 <controlMotor1>
		  controlMotor2(yawPID);
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <main+0x700>)
 8003cd4:	ed93 7b00 	vldr	d7, [r3]
 8003cd8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003cdc:	ee17 0a90 	vmov	r0, s15
 8003ce0:	f7fc ffd4 	bl	8000c8c <controlMotor2>
		  controlMotor3(yawPID);
 8003ce4:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <main+0x700>)
 8003ce6:	ed93 7b00 	vldr	d7, [r3]
 8003cea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003cee:	ee17 0a90 	vmov	r0, s15
 8003cf2:	f7fd f807 	bl	8000d04 <controlMotor3>
		  controlMotor4(yawPID);
 8003cf6:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <main+0x700>)
 8003cf8:	ed93 7b00 	vldr	d7, [r3]
 8003cfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003d00:	ee17 0a90 	vmov	r0, s15
 8003d04:	f7fd f83a 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8003d08:	f7fc fe04 	bl	8000914 <spinalCordTrans>
		  if(abs(compassData-(-900))<10)
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <main+0x6fc>)
 8003d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d12:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8003d16:	f113 0f09 	cmn.w	r3, #9
 8003d1a:	db0b      	blt.n	8003d34 <main+0x65c>
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <main+0x6fc>)
 8003d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d22:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8003d26:	2b09      	cmp	r3, #9
 8003d28:	dc04      	bgt.n	8003d34 <main+0x65c>
		  {
			  brake();
 8003d2a:	f7fd fcfd 	bl	8001728 <brake>
			  HAL_Delay(DEBOUNCE_MOVING_TIME);
 8003d2e:	2064      	movs	r0, #100	; 0x64
 8003d30:	f001 fd90 	bl	8005854 <HAL_Delay>
	  while(((compassData-(900))>=10)&&((HAL_GetTick()-startTime)<800))//chưa đủ góc->hiệu chỉnh xoay đến -900
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <main+0x6fc>)
 8003d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d3a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	dd08      	ble.n	8003d54 <main+0x67c>
 8003d42:	f001 fd7b 	bl	800583c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <main+0x6f0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003d52:	d3ae      	bcc.n	8003cb2 <main+0x5da>
		  }
	  }
	  ST7920_Clear();
 8003d54:	f7fc fec8 	bl	8000ae8 <ST7920_Clear>

	  ST7920_SendString(2, 0, "Sel");
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <main+0x71c>)
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	2002      	movs	r0, #2
 8003d5e:	f7fc fe81 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "autTningStaPoint");
 8003d62:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <main+0x720>)
 8003d64:	2100      	movs	r1, #0
 8003d66:	2003      	movs	r0, #3
 8003d68:	f7fc fe7c 	bl	8000a64 <ST7920_SendString>
	  while(btn_Sel!= 0)//chưa nhấn nút Sel -> hiệu chỉnh tự động
 8003d6c:	e005      	b.n	8003d7a <main+0x6a2>
	  {
		  roR_Pit_Yaw_GoTo(350, 250, -900);
 8003d6e:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <main+0x6f4>)
 8003d70:	21fa      	movs	r1, #250	; 0xfa
 8003d72:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003d76:	f7fd fd2f 	bl	80017d8 <roR_Pit_Yaw_GoTo>
	  while(btn_Sel!= 0)//chưa nhấn nút Sel -> hiệu chỉnh tự động
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <main+0x6f8>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f5      	bne.n	8003d6e <main+0x696>
	  }
	  ST7920_Clear();
 8003d82:	f7fc feb1 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "btnX ");
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <main+0x724>)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f7fc fe6a 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "manualTuning");
 8003d90:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <main+0x728>)
 8003d92:	2100      	movs	r1, #0
 8003d94:	2003      	movs	r0, #3
 8003d96:	f7fc fe65 	bl	8000a64 <ST7920_SendString>
	  while(btn_X!=0)//chưa nhấn nút X	->hiệu chỉnh vị trí
 8003d9a:	e160      	b.n	800405e <main+0x986>
 8003d9c:	080123a8 	.word	0x080123a8
 8003da0:	080123bc 	.word	0x080123bc
 8003da4:	24000bcc 	.word	0x24000bcc
 8003da8:	24000c03 	.word	0x24000c03
 8003dac:	080123c4 	.word	0x080123c4
 8003db0:	080123d0 	.word	0x080123d0
 8003db4:	58020400 	.word	0x58020400
 8003db8:	58020000 	.word	0x58020000
 8003dbc:	24000060 	.word	0x24000060
 8003dc0:	24000050 	.word	0x24000050
 8003dc4:	24000040 	.word	0x24000040
 8003dc8:	24000d58 	.word	0x24000d58
 8003dcc:	fffffc7c 	.word	0xfffffc7c
 8003dd0:	2400091c 	.word	0x2400091c
 8003dd4:	24000930 	.word	0x24000930
 8003dd8:	24000c18 	.word	0x24000c18
 8003ddc:	24000bb8 	.word	0x24000bb8
 8003de0:	240000a4 	.word	0x240000a4
 8003de4:	2400009c 	.word	0x2400009c
 8003de8:	24000094 	.word	0x24000094
 8003dec:	2400008c 	.word	0x2400008c
 8003df0:	080123d8 	.word	0x080123d8
 8003df4:	080123e8 	.word	0x080123e8
 8003df8:	080123ec 	.word	0x080123ec
 8003dfc:	08012400 	.word	0x08012400
 8003e00:	080122b0 	.word	0x080122b0
	  {
		  PIDyaw(compassData, -900);
 8003e04:	4bb4      	ldr	r3, [pc, #720]	; (80040d8 <main+0xa00>)
 8003e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0a:	49b4      	ldr	r1, [pc, #720]	; (80040dc <main+0xa04>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc fff3 	bl	8000df8 <PIDyaw>
		  leftVer = !btn_leftUp - !btn_leftDown;
 8003e12:	4bb3      	ldr	r3, [pc, #716]	; (80040e0 <main+0xa08>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	4bb0      	ldr	r3, [pc, #704]	; (80040e4 <main+0xa0c>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b21a      	sxth	r2, r3
 8003e38:	4bab      	ldr	r3, [pc, #684]	; (80040e8 <main+0xa10>)
 8003e3a:	801a      	strh	r2, [r3, #0]
		  leftHor = -!btn_leftLeft + !btn_leftRigt;
 8003e3c:	4bab      	ldr	r3, [pc, #684]	; (80040ec <main+0xa14>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4ba8      	ldr	r3, [pc, #672]	; (80040f0 <main+0xa18>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	4ba4      	ldr	r3, [pc, #656]	; (80040f4 <main+0xa1c>)
 8003e64:	801a      	strh	r2, [r3, #0]
		  _dir = atan2(leftHor, -leftVer);
 8003e66:	4ba3      	ldr	r3, [pc, #652]	; (80040f4 <main+0xa1c>)
 8003e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e74:	4b9c      	ldr	r3, [pc, #624]	; (80040e8 <main+0xa10>)
 8003e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7a:	425b      	negs	r3, r3
 8003e7c:	ee06 3a90 	vmov	s13, r3
 8003e80:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003e84:	eeb0 1b46 	vmov.f64	d1, d6
 8003e88:	eeb0 0b47 	vmov.f64	d0, d7
 8003e8c:	f00d f9a4 	bl	80111d8 <atan2>
 8003e90:	eeb0 7b40 	vmov.f64	d7, d0
 8003e94:	4b98      	ldr	r3, [pc, #608]	; (80040f8 <main+0xa20>)
 8003e96:	ed83 7b00 	vstr	d7, [r3]
		  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 8003e9a:	4b93      	ldr	r3, [pc, #588]	; (80040e8 <main+0xa10>)
 8003e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b91      	ldr	r3, [pc, #580]	; (80040e8 <main+0xa10>)
 8003ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea8:	fb03 f202 	mul.w	r2, r3, r2
 8003eac:	4b91      	ldr	r3, [pc, #580]	; (80040f4 <main+0xa1c>)
 8003eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4b8f      	ldr	r3, [pc, #572]	; (80040f4 <main+0xa1c>)
 8003eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eba:	fb03 f301 	mul.w	r3, r3, r1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ec8:	eeb0 0b47 	vmov.f64	d0, d7
 8003ecc:	f00d f988 	bl	80111e0 <sqrt>
 8003ed0:	eeb0 7b40 	vmov.f64	d7, d0
 8003ed4:	4b89      	ldr	r3, [pc, #548]	; (80040fc <main+0xa24>)
 8003ed6:	ed83 7b00 	vstr	d7, [r3]
		  _motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8003eda:	4b89      	ldr	r3, [pc, #548]	; (8004100 <main+0xa28>)
 8003edc:	ed93 6b00 	vldr	d6, [r3]
 8003ee0:	4b88      	ldr	r3, [pc, #544]	; (8004104 <main+0xa2c>)
 8003ee2:	ed93 7b00 	vldr	d7, [r3]
 8003ee6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003eea:	4b87      	ldr	r3, [pc, #540]	; (8004108 <main+0xa30>)
 8003eec:	ed93 6b00 	vldr	d6, [r3]
 8003ef0:	4b82      	ldr	r3, [pc, #520]	; (80040fc <main+0xa24>)
 8003ef2:	ed93 7b00 	vldr	d7, [r3]
 8003ef6:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <main+0xa20>)
 8003efc:	ed93 7b00 	vldr	d7, [r3]
 8003f00:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80040c0 <main+0x9e8>
 8003f04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003f08:	eeb0 0b47 	vmov.f64	d0, d7
 8003f0c:	f00d f928 	bl	8011160 <cos>
 8003f10:	eeb0 7b40 	vmov.f64	d7, d0
 8003f14:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003f18:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80040c8 <main+0x9f0>
 8003f1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f20:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003f24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003f28:	ee17 3a90 	vmov	r3, s15
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	4b77      	ldr	r3, [pc, #476]	; (800410c <main+0xa34>)
 8003f30:	801a      	strh	r2, [r3, #0]
		  _motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8003f32:	4b73      	ldr	r3, [pc, #460]	; (8004100 <main+0xa28>)
 8003f34:	ed93 6b00 	vldr	d6, [r3]
 8003f38:	4b72      	ldr	r3, [pc, #456]	; (8004104 <main+0xa2c>)
 8003f3a:	ed93 7b00 	vldr	d7, [r3]
 8003f3e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003f42:	4b71      	ldr	r3, [pc, #452]	; (8004108 <main+0xa30>)
 8003f44:	ed93 6b00 	vldr	d6, [r3]
 8003f48:	4b6c      	ldr	r3, [pc, #432]	; (80040fc <main+0xa24>)
 8003f4a:	ed93 7b00 	vldr	d7, [r3]
 8003f4e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003f52:	4b69      	ldr	r3, [pc, #420]	; (80040f8 <main+0xa20>)
 8003f54:	ed93 7b00 	vldr	d7, [r3]
 8003f58:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80040c0 <main+0x9e8>
 8003f5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f60:	eeb0 0b47 	vmov.f64	d0, d7
 8003f64:	f00d f8fc 	bl	8011160 <cos>
 8003f68:	eeb0 7b40 	vmov.f64	d7, d0
 8003f6c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003f70:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003f74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003f78:	ee17 3a90 	vmov	r3, s15
 8003f7c:	b21a      	sxth	r2, r3
 8003f7e:	4b64      	ldr	r3, [pc, #400]	; (8004110 <main+0xa38>)
 8003f80:	801a      	strh	r2, [r3, #0]
		  _motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8003f82:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <main+0xa28>)
 8003f84:	ed93 6b00 	vldr	d6, [r3]
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <main+0xa2c>)
 8003f8a:	ed93 7b00 	vldr	d7, [r3]
 8003f8e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003f92:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <main+0xa30>)
 8003f94:	ed93 6b00 	vldr	d6, [r3]
 8003f98:	4b58      	ldr	r3, [pc, #352]	; (80040fc <main+0xa24>)
 8003f9a:	ed93 7b00 	vldr	d7, [r3]
 8003f9e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003fa2:	4b55      	ldr	r3, [pc, #340]	; (80040f8 <main+0xa20>)
 8003fa4:	ed93 7b00 	vldr	d7, [r3]
 8003fa8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80040d0 <main+0x9f8>
 8003fac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8003fb4:	f00d f8d4 	bl	8011160 <cos>
 8003fb8:	eeb0 7b40 	vmov.f64	d7, d0
 8003fbc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003fc0:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003fc4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80040c8 <main+0x9f0>
 8003fc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fcc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003fd0:	ee17 3a90 	vmov	r3, s15
 8003fd4:	b21a      	sxth	r2, r3
 8003fd6:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <main+0xa3c>)
 8003fd8:	801a      	strh	r2, [r3, #0]
		  _motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8003fda:	4b49      	ldr	r3, [pc, #292]	; (8004100 <main+0xa28>)
 8003fdc:	ed93 6b00 	vldr	d6, [r3]
 8003fe0:	4b48      	ldr	r3, [pc, #288]	; (8004104 <main+0xa2c>)
 8003fe2:	ed93 7b00 	vldr	d7, [r3]
 8003fe6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <main+0xa30>)
 8003fec:	ed93 6b00 	vldr	d6, [r3]
 8003ff0:	4b42      	ldr	r3, [pc, #264]	; (80040fc <main+0xa24>)
 8003ff2:	ed93 7b00 	vldr	d7, [r3]
 8003ff6:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <main+0xa20>)
 8003ffc:	ed93 7b00 	vldr	d7, [r3]
 8004000:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80040d0 <main+0x9f8>
 8004004:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004008:	eeb0 0b47 	vmov.f64	d0, d7
 800400c:	f00d f8a8 	bl	8011160 <cos>
 8004010:	eeb0 7b40 	vmov.f64	d7, d0
 8004014:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004018:	ee38 7b07 	vadd.f64	d7, d8, d7
 800401c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	b21a      	sxth	r2, r3
 8004026:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <main+0xa40>)
 8004028:	801a      	strh	r2, [r3, #0]
		  controlMotor1(_motor1Speed);
 800402a:	4b38      	ldr	r3, [pc, #224]	; (800410c <main+0xa34>)
 800402c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc fdef 	bl	8000c14 <controlMotor1>
		  controlMotor2(_motor2Speed);
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <main+0xa38>)
 8004038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fe25 	bl	8000c8c <controlMotor2>
		  controlMotor3(_motor3Speed);
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <main+0xa3c>)
 8004044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fe5b 	bl	8000d04 <controlMotor3>
		  controlMotor4(_motor4Speed);
 800404e:	4b32      	ldr	r3, [pc, #200]	; (8004118 <main+0xa40>)
 8004050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fe91 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 800405a:	f7fc fc5b 	bl	8000914 <spinalCordTrans>
	  while(btn_X!=0)//chưa nhấn nút X	->hiệu chỉnh vị trí
 800405e:	4b2f      	ldr	r3, [pc, #188]	; (800411c <main+0xa44>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f47f aece 	bne.w	8003e04 <main+0x72c>
	  }
	  brake();
 8004068:	f7fd fb5e 	bl	8001728 <brake>
	  ST7920_Clear();
 800406c:	f7fc fd3c 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "Sel");
 8004070:	4a2b      	ldr	r2, [pc, #172]	; (8004120 <main+0xa48>)
 8004072:	2100      	movs	r1, #0
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc fcf5 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "loadingBall");
 800407a:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <main+0xa4c>)
 800407c:	2100      	movs	r1, #0
 800407e:	2003      	movs	r0, #3
 8004080:	f7fc fcf0 	bl	8000a64 <ST7920_SendString>
	  while(btn_Sel == 1)	//khi chưa nhấn nút Sel
 8004084:	e00b      	b.n	800409e <main+0x9c6>
	  {
		  gripperE(GRIPPERE_CLOSE);
 8004086:	2201      	movs	r2, #1
 8004088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800408c:	4826      	ldr	r0, [pc, #152]	; (8004128 <main+0xa50>)
 800408e:	f005 fe8f 	bl	8009db0 <HAL_GPIO_WritePin>
		  gripperQ(GRIPPERQ_CLOSE);
 8004092:	2201      	movs	r2, #1
 8004094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004098:	4823      	ldr	r0, [pc, #140]	; (8004128 <main+0xa50>)
 800409a:	f005 fe89 	bl	8009db0 <HAL_GPIO_WritePin>
	  while(btn_Sel == 1)	//khi chưa nhấn nút Sel
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <main+0xa54>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d0ef      	beq.n	8004086 <main+0x9ae>
 80040a6:	f7ff bbba 	b.w	800381e <main+0x146>
	  }

  }
  else if(startMode == MANUAL_MODE)
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <main+0xa58>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b07      	cmp	r3, #7
 80040b0:	f47f abb5 	bne.w	800381e <main+0x146>
  {
	  manualMode();
 80040b4:	f7fe ffec 	bl	8003090 <manualMode>
  wait4SelectMode();
 80040b8:	f7ff bbb1 	b.w	800381e <main+0x146>
 80040bc:	f3af 8000 	nop.w
 80040c0:	7f3321d2 	.word	0x7f3321d2
 80040c4:	4002d97c 	.word	0x4002d97c
	...
 80040d0:	54442d18 	.word	0x54442d18
 80040d4:	3fe921fb 	.word	0x3fe921fb
 80040d8:	24000930 	.word	0x24000930
 80040dc:	fffffc7c 	.word	0xfffffc7c
 80040e0:	24000cd0 	.word	0x24000cd0
 80040e4:	24000bc8 	.word	0x24000bc8
 80040e8:	24000c00 	.word	0x24000c00
 80040ec:	24000bb9 	.word	0x24000bb9
 80040f0:	24000425 	.word	0x24000425
 80040f4:	2400084e 	.word	0x2400084e
 80040f8:	24000890 	.word	0x24000890
 80040fc:	24000ba8 	.word	0x24000ba8
 8004100:	24000c18 	.word	0x24000c18
 8004104:	24000078 	.word	0x24000078
 8004108:	24000070 	.word	0x24000070
 800410c:	24000afa 	.word	0x24000afa
 8004110:	24000bf0 	.word	0x24000bf0
 8004114:	24000cd4 	.word	0x24000cd4
 8004118:	24000422 	.word	0x24000422
 800411c:	240001f1 	.word	0x240001f1
 8004120:	080123e8 	.word	0x080123e8
 8004124:	08012408 	.word	0x08012408
 8004128:	58020000 	.word	0x58020000
 800412c:	2400091c 	.word	0x2400091c
 8004130:	24000bb8 	.word	0x24000bb8

08004134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0cc      	sub	sp, #304	; 0x130
 8004138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800413a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800413e:	224c      	movs	r2, #76	; 0x4c
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f00c fbfc 	bl	8010940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004148:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800414c:	2220      	movs	r2, #32
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f00c fbf5 	bl	8010940 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	4618      	mov	r0, r3
 800415c:	23bc      	movs	r3, #188	; 0xbc
 800415e:	461a      	mov	r2, r3
 8004160:	2100      	movs	r1, #0
 8004162:	f00c fbed 	bl	8010940 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004166:	2002      	movs	r0, #2
 8004168:	f005 fe56 	bl	8009e18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <SystemClock_Config+0x164>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	4a48      	ldr	r2, [pc, #288]	; (8004298 <SystemClock_Config+0x164>)
 8004178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800417c:	6193      	str	r3, [r2, #24]
 800417e:	4b46      	ldr	r3, [pc, #280]	; (8004298 <SystemClock_Config+0x164>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	4b44      	ldr	r3, [pc, #272]	; (800429c <SystemClock_Config+0x168>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	4a43      	ldr	r2, [pc, #268]	; (800429c <SystemClock_Config+0x168>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <SystemClock_Config+0x168>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	f003 0201 	and.w	r2, r3, #1
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80041a6:	bf00      	nop
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <SystemClock_Config+0x164>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d1f8      	bne.n	80041a8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041b6:	2302      	movs	r3, #2
 80041b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80041bc:	2301      	movs	r3, #1
 80041be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041c2:	2340      	movs	r3, #64	; 0x40
 80041c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041c8:	2302      	movs	r3, #2
 80041ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041d4:	2304      	movs	r3, #4
 80041d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80041da:	233c      	movs	r3, #60	; 0x3c
 80041dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80041e0:	2302      	movs	r3, #2
 80041e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80041e6:	2302      	movs	r3, #2
 80041e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80041ec:	2302      	movs	r3, #2
 80041ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80041f2:	230c      	movs	r3, #12
 80041f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004204:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004208:	4618      	mov	r0, r3
 800420a:	f005 fe3f 	bl	8009e8c <HAL_RCC_OscConfig>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004214:	f000 fbd8 	bl	80049c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004218:	233f      	movs	r3, #63	; 0x3f
 800421a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800421e:	2303      	movs	r3, #3
 8004220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800422a:	2308      	movs	r3, #8
 800422c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004236:	2340      	movs	r3, #64	; 0x40
 8004238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800423c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004240:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800424a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800424e:	2104      	movs	r1, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f006 f9f3 	bl	800a63c <HAL_RCC_ClockConfig>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800425c:	f000 fbb4 	bl	80049c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8004260:	f107 0308 	add.w	r3, r7, #8
 8004264:	2203      	movs	r2, #3
 8004266:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004268:	f107 0308 	add.w	r3, r7, #8
 800426c:	2200      	movs	r2, #0
 800426e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	2200      	movs	r2, #0
 8004276:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004278:	f107 0308 	add.w	r3, r7, #8
 800427c:	4618      	mov	r0, r3
 800427e:	f006 fd61 	bl	800ad44 <HAL_RCCEx_PeriphCLKConfig>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8004288:	f000 fb9e 	bl	80049c8 <Error_Handler>
  }
}
 800428c:	bf00      	nop
 800428e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	58024800 	.word	0x58024800
 800429c:	58000400 	.word	0x58000400

080042a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
 80042b4:	615a      	str	r2, [r3, #20]
 80042b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80042b8:	4b36      	ldr	r3, [pc, #216]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042ba:	4a37      	ldr	r2, [pc, #220]	; (8004398 <MX_ADC3_Init+0xf8>)
 80042bc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80042be:	4b35      	ldr	r3, [pc, #212]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80042c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80042c6:	4b33      	ldr	r3, [pc, #204]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042c8:	2208      	movs	r2, #8
 80042ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042cc:	4b31      	ldr	r3, [pc, #196]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042d4:	2204      	movs	r2, #4
 80042d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80042d8:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042da:	2200      	movs	r2, #0
 80042dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80042de:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042e6:	2203      	movs	r2, #3
 80042e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042f0:	4b28      	ldr	r3, [pc, #160]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042f6:	4b27      	ldr	r3, [pc, #156]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <MX_ADC3_Init+0xf4>)
 80042fe:	2203      	movs	r2, #3
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <MX_ADC3_Init+0xf4>)
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <MX_ADC3_Init+0xf4>)
 800430a:	2200      	movs	r2, #0
 800430c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <MX_ADC3_Init+0xf4>)
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004316:	481f      	ldr	r0, [pc, #124]	; (8004394 <MX_ADC3_Init+0xf4>)
 8004318:	f001 fcbc 	bl	8005c94 <HAL_ADC_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8004322:	f000 fb51 	bl	80049c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <MX_ADC3_Init+0xfc>)
 8004328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800432a:	2306      	movs	r3, #6
 800432c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800432e:	2306      	movs	r3, #6
 8004330:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004332:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004336:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004338:	2304      	movs	r3, #4
 800433a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004340:	1d3b      	adds	r3, r7, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4813      	ldr	r0, [pc, #76]	; (8004394 <MX_ADC3_Init+0xf4>)
 8004346:	f001 ff27 	bl	8006198 <HAL_ADC_ConfigChannel>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8004350:	f000 fb3a 	bl	80049c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <MX_ADC3_Init+0x100>)
 8004356:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004358:	230c      	movs	r3, #12
 800435a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	4619      	mov	r1, r3
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <MX_ADC3_Init+0xf4>)
 8004362:	f001 ff19 	bl	8006198 <HAL_ADC_ConfigChannel>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800436c:	f000 fb2c 	bl	80049c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <MX_ADC3_Init+0x104>)
 8004372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004374:	2312      	movs	r3, #18
 8004376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_ADC3_Init+0xf4>)
 800437e:	f001 ff0b 	bl	8006198 <HAL_ADC_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8004388:	f000 fb1e 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800438c:	bf00      	nop
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	24000a00 	.word	0x24000a00
 8004398:	58026000 	.word	0x58026000
 800439c:	04300002 	.word	0x04300002
 80043a0:	2a000400 	.word	0x2a000400
 80043a4:	2e300800 	.word	0x2e300800

080043a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <MX_TIM7_Init+0x68>)
 80043ba:	4a16      	ldr	r2, [pc, #88]	; (8004414 <MX_TIM7_Init+0x6c>)
 80043bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <MX_TIM7_Init+0x68>)
 80043c0:	f640 125f 	movw	r2, #2399	; 0x95f
 80043c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <MX_TIM7_Init+0x68>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <MX_TIM7_Init+0x68>)
 80043ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <MX_TIM7_Init+0x68>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043da:	480d      	ldr	r0, [pc, #52]	; (8004410 <MX_TIM7_Init+0x68>)
 80043dc:	f008 fb66 	bl	800caac <HAL_TIM_Base_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80043e6:	f000 faef 	bl	80049c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4806      	ldr	r0, [pc, #24]	; (8004410 <MX_TIM7_Init+0x68>)
 80043f8:	f008 fd90 	bl	800cf1c <HAL_TIMEx_MasterConfigSynchronization>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004402:	f000 fae1 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	24000d14 	.word	0x24000d14
 8004414:	40001400 	.word	0x40001400

08004418 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800441c:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <MX_UART7_Init+0x90>)
 800441e:	4a23      	ldr	r2, [pc, #140]	; (80044ac <MX_UART7_Init+0x94>)
 8004420:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004422:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <MX_UART7_Init+0x90>)
 8004424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004428:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <MX_UART7_Init+0x90>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <MX_UART7_Init+0x90>)
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <MX_UART7_Init+0x90>)
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <MX_UART7_Init+0x90>)
 800443e:	220c      	movs	r2, #12
 8004440:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <MX_UART7_Init+0x90>)
 8004444:	2200      	movs	r2, #0
 8004446:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <MX_UART7_Init+0x90>)
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <MX_UART7_Init+0x90>)
 8004450:	2200      	movs	r2, #0
 8004452:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <MX_UART7_Init+0x90>)
 8004456:	2200      	movs	r2, #0
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <MX_UART7_Init+0x90>)
 800445c:	2200      	movs	r2, #0
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004460:	4811      	ldr	r0, [pc, #68]	; (80044a8 <MX_UART7_Init+0x90>)
 8004462:	f008 fe01 	bl	800d068 <HAL_UART_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800446c:	f000 faac 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004470:	2100      	movs	r1, #0
 8004472:	480d      	ldr	r0, [pc, #52]	; (80044a8 <MX_UART7_Init+0x90>)
 8004474:	f00c f955 	bl	8010722 <HAL_UARTEx_SetTxFifoThreshold>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800447e:	f000 faa3 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004482:	2100      	movs	r1, #0
 8004484:	4808      	ldr	r0, [pc, #32]	; (80044a8 <MX_UART7_Init+0x90>)
 8004486:	f00c f98a 	bl	801079e <HAL_UARTEx_SetRxFifoThreshold>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8004490:	f000 fa9a 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8004494:	4804      	ldr	r0, [pc, #16]	; (80044a8 <MX_UART7_Init+0x90>)
 8004496:	f00c f90b 	bl	80106b0 <HAL_UARTEx_DisableFifoMode>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80044a0:	f000 fa92 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	24000234 	.word	0x24000234
 80044ac:	40007800 	.word	0x40007800

080044b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044b4:	4b22      	ldr	r3, [pc, #136]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044b6:	4a23      	ldr	r2, [pc, #140]	; (8004544 <MX_USART1_UART_Init+0x94>)
 80044b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044ba:	4b21      	ldr	r3, [pc, #132]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044c2:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044d6:	220c      	movs	r2, #12
 80044d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044f2:	4b13      	ldr	r3, [pc, #76]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044f8:	4811      	ldr	r0, [pc, #68]	; (8004540 <MX_USART1_UART_Init+0x90>)
 80044fa:	f008 fdb5 	bl	800d068 <HAL_UART_Init>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004504:	f000 fa60 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004508:	2100      	movs	r1, #0
 800450a:	480d      	ldr	r0, [pc, #52]	; (8004540 <MX_USART1_UART_Init+0x90>)
 800450c:	f00c f909 	bl	8010722 <HAL_UARTEx_SetTxFifoThreshold>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004516:	f000 fa57 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800451a:	2100      	movs	r1, #0
 800451c:	4808      	ldr	r0, [pc, #32]	; (8004540 <MX_USART1_UART_Init+0x90>)
 800451e:	f00c f93e 	bl	801079e <HAL_UARTEx_SetRxFifoThreshold>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004528:	f000 fa4e 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800452c:	4804      	ldr	r0, [pc, #16]	; (8004540 <MX_USART1_UART_Init+0x90>)
 800452e:	f00c f8bf 	bl	80106b0 <HAL_UARTEx_DisableFifoMode>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004538:	f000 fa46 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}
 8004540:	24000b10 	.word	0x24000b10
 8004544:	40011000 	.word	0x40011000

08004548 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800454c:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 800454e:	4a23      	ldr	r2, [pc, #140]	; (80045dc <MX_USART3_UART_Init+0x94>)
 8004550:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004554:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004558:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 800455c:	2200      	movs	r2, #0
 800455e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004562:	2200      	movs	r2, #0
 8004564:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 800456e:	220c      	movs	r2, #12
 8004570:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004572:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004574:	2200      	movs	r2, #0
 8004576:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 800457a:	2200      	movs	r2, #0
 800457c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004580:	2200      	movs	r2, #0
 8004582:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004586:	2200      	movs	r2, #0
 8004588:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004590:	4811      	ldr	r0, [pc, #68]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 8004592:	f008 fd69 	bl	800d068 <HAL_UART_Init>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800459c:	f000 fa14 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045a0:	2100      	movs	r1, #0
 80045a2:	480d      	ldr	r0, [pc, #52]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 80045a4:	f00c f8bd 	bl	8010722 <HAL_UARTEx_SetTxFifoThreshold>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80045ae:	f000 fa0b 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045b2:	2100      	movs	r1, #0
 80045b4:	4808      	ldr	r0, [pc, #32]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 80045b6:	f00c f8f2 	bl	801079e <HAL_UARTEx_SetRxFifoThreshold>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80045c0:	f000 fa02 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80045c4:	4804      	ldr	r0, [pc, #16]	; (80045d8 <MX_USART3_UART_Init+0x90>)
 80045c6:	f00c f873 	bl	80106b0 <HAL_UARTEx_DisableFifoMode>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80045d0:	f000 f9fa 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2400038c 	.word	0x2400038c
 80045dc:	40004800 	.word	0x40004800

080045e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <MX_USART6_UART_Init+0x90>)
 80045e6:	4a23      	ldr	r2, [pc, #140]	; (8004674 <MX_USART6_UART_Init+0x94>)
 80045e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <MX_USART6_UART_Init+0x90>)
 80045ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80045f2:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <MX_USART6_UART_Init+0x90>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <MX_USART6_UART_Init+0x90>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045fe:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <MX_USART6_UART_Init+0x90>)
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <MX_USART6_UART_Init+0x90>)
 8004606:	220c      	movs	r2, #12
 8004608:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <MX_USART6_UART_Init+0x90>)
 800460c:	2200      	movs	r2, #0
 800460e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <MX_USART6_UART_Init+0x90>)
 8004612:	2200      	movs	r2, #0
 8004614:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <MX_USART6_UART_Init+0x90>)
 8004618:	2200      	movs	r2, #0
 800461a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <MX_USART6_UART_Init+0x90>)
 800461e:	2200      	movs	r2, #0
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <MX_USART6_UART_Init+0x90>)
 8004624:	2200      	movs	r2, #0
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004628:	4811      	ldr	r0, [pc, #68]	; (8004670 <MX_USART6_UART_Init+0x90>)
 800462a:	f008 fd1d 	bl	800d068 <HAL_UART_Init>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004634:	f000 f9c8 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004638:	2100      	movs	r1, #0
 800463a:	480d      	ldr	r0, [pc, #52]	; (8004670 <MX_USART6_UART_Init+0x90>)
 800463c:	f00c f871 	bl	8010722 <HAL_UARTEx_SetTxFifoThreshold>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004646:	f000 f9bf 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800464a:	2100      	movs	r1, #0
 800464c:	4808      	ldr	r0, [pc, #32]	; (8004670 <MX_USART6_UART_Init+0x90>)
 800464e:	f00c f8a6 	bl	801079e <HAL_UARTEx_SetRxFifoThreshold>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004658:	f000 f9b6 	bl	80049c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800465c:	4804      	ldr	r0, [pc, #16]	; (8004670 <MX_USART6_UART_Init+0x90>)
 800465e:	f00c f827 	bl	80106b0 <HAL_UARTEx_DisableFifoMode>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004668:	f000 f9ae 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	24000c24 	.word	0x24000c24
 8004674:	40011400 	.word	0x40011400

08004678 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <MX_DMA_Init+0x8c>)
 8004680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004684:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <MX_DMA_Init+0x8c>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <MX_DMA_Init+0x8c>)
 8004690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <MX_DMA_Init+0x8c>)
 800469e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046a2:	4a18      	ldr	r2, [pc, #96]	; (8004704 <MX_DMA_Init+0x8c>)
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <MX_DMA_Init+0x8c>)
 80046ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	200b      	movs	r0, #11
 80046c0:	f002 fb69 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80046c4:	200b      	movs	r0, #11
 80046c6:	f002 fb80 	bl	8006dca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	200d      	movs	r0, #13
 80046d0:	f002 fb61 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80046d4:	200d      	movs	r0, #13
 80046d6:	f002 fb78 	bl	8006dca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	200e      	movs	r0, #14
 80046e0:	f002 fb59 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80046e4:	200e      	movs	r0, #14
 80046e6:	f002 fb70 	bl	8006dca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	203a      	movs	r0, #58	; 0x3a
 80046f0:	f002 fb51 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80046f4:	203a      	movs	r0, #58	; 0x3a
 80046f6:	f002 fb68 	bl	8006dca <HAL_NVIC_EnableIRQ>

}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	58024400 	.word	0x58024400

08004708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470e:	f107 031c 	add.w	r3, r7, #28
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800471e:	4ba3      	ldr	r3, [pc, #652]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004724:	4aa1      	ldr	r2, [pc, #644]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800472e:	4b9f      	ldr	r3, [pc, #636]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800473c:	4b9b      	ldr	r3, [pc, #620]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004742:	4a9a      	ldr	r2, [pc, #616]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004744:	f043 0320 	orr.w	r3, r3, #32
 8004748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800474c:	4b97      	ldr	r3, [pc, #604]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800474e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800475a:	4b94      	ldr	r3, [pc, #592]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800475c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004760:	4a92      	ldr	r2, [pc, #584]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800476a:	4b90      	ldr	r3, [pc, #576]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004778:	4b8c      	ldr	r3, [pc, #560]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800477a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800477e:	4a8b      	ldr	r2, [pc, #556]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004788:	4b88      	ldr	r3, [pc, #544]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800478a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004796:	4b85      	ldr	r3, [pc, #532]	; (80049ac <MX_GPIO_Init+0x2a4>)
 8004798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800479c:	4a83      	ldr	r2, [pc, #524]	; (80049ac <MX_GPIO_Init+0x2a4>)
 800479e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047a6:	4b81      	ldr	r3, [pc, #516]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80047b4:	4b7d      	ldr	r3, [pc, #500]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ba:	4a7c      	ldr	r2, [pc, #496]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047bc:	f043 0310 	orr.w	r3, r3, #16
 80047c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047c4:	4b79      	ldr	r3, [pc, #484]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047d8:	4a74      	ldr	r2, [pc, #464]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047da:	f043 0308 	orr.w	r3, r3, #8
 80047de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e2:	4b72      	ldr	r3, [pc, #456]	; (80049ac <MX_GPIO_Init+0x2a4>)
 80047e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, passArm_Pin|gripperQ_Pin|gripperE_Pin|passHand_Pin, GPIO_PIN_RESET);
 80047f0:	2200      	movs	r2, #0
 80047f2:	f240 7104 	movw	r1, #1796	; 0x704
 80047f6:	486e      	ldr	r0, [pc, #440]	; (80049b0 <MX_GPIO_Init+0x2a8>)
 80047f8:	f005 fada 	bl	8009db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80047fc:	2200      	movs	r2, #0
 80047fe:	2110      	movs	r1, #16
 8004800:	486c      	ldr	r0, [pc, #432]	; (80049b4 <MX_GPIO_Init+0x2ac>)
 8004802:	f005 fad5 	bl	8009db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8004806:	2200      	movs	r2, #0
 8004808:	f242 01e7 	movw	r1, #8423	; 0x20e7
 800480c:	486a      	ldr	r0, [pc, #424]	; (80049b8 <MX_GPIO_Init+0x2b0>)
 800480e:	f005 facf 	bl	8009db0 <HAL_GPIO_WritePin>
                          |putQ_Pin|putE_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8004812:	2200      	movs	r2, #0
 8004814:	f643 717d 	movw	r1, #16253	; 0x3f7d
 8004818:	4868      	ldr	r0, [pc, #416]	; (80049bc <MX_GPIO_Init+0x2b4>)
 800481a:	f005 fac9 	bl	8009db0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|leftArmDir_Pin 
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 800481e:	2200      	movs	r2, #0
 8004820:	2182      	movs	r1, #130	; 0x82
 8004822:	4867      	ldr	r0, [pc, #412]	; (80049c0 <MX_GPIO_Init+0x2b8>)
 8004824:	f005 fac4 	bl	8009db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 800482e:	4865      	ldr	r0, [pc, #404]	; (80049c4 <MX_GPIO_Init+0x2bc>)
 8004830:	f005 fabe 	bl	8009db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flashButton_Pin */
  GPIO_InitStruct.Pin = flashButton_Pin;
 8004834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800483e:	2301      	movs	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashButton_GPIO_Port, &GPIO_InitStruct);
 8004842:	f107 031c 	add.w	r3, r7, #28
 8004846:	4619      	mov	r1, r3
 8004848:	485a      	ldr	r0, [pc, #360]	; (80049b4 <MX_GPIO_Init+0x2ac>)
 800484a:	f005 f8e9 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800484e:	2301      	movs	r3, #1
 8004850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004852:	2300      	movs	r3, #0
 8004854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004856:	2301      	movs	r3, #1
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485a:	f107 031c 	add.w	r3, r7, #28
 800485e:	4619      	mov	r1, r3
 8004860:	4853      	ldr	r0, [pc, #332]	; (80049b0 <MX_GPIO_Init+0x2a8>)
 8004862:	f005 f8dd 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : passArm_Pin gripperQ_Pin gripperE_Pin passHand_Pin */
  GPIO_InitStruct.Pin = passArm_Pin|gripperQ_Pin|gripperE_Pin|passHand_Pin;
 8004866:	f240 7304 	movw	r3, #1796	; 0x704
 800486a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486c:	2301      	movs	r3, #1
 800486e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004874:	2300      	movs	r3, #0
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004878:	f107 031c 	add.w	r3, r7, #28
 800487c:	4619      	mov	r1, r3
 800487e:	484c      	ldr	r0, [pc, #304]	; (80049b0 <MX_GPIO_Init+0x2a8>)
 8004880:	f005 f8ce 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004884:	2310      	movs	r3, #16
 8004886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004888:	2301      	movs	r3, #1
 800488a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004894:	f107 031c 	add.w	r3, r7, #28
 8004898:	4619      	mov	r1, r3
 800489a:	4846      	ldr	r0, [pc, #280]	; (80049b4 <MX_GPIO_Init+0x2ac>)
 800489c:	f005 f8c0 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           putQ_Pin putE_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 80048a0:	f242 03e7 	movw	r3, #8423	; 0x20e7
 80048a4:	61fb      	str	r3, [r7, #28]
                          |putQ_Pin|putE_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a6:	2301      	movs	r3, #1
 80048a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ae:	2300      	movs	r3, #0
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b2:	f107 031c 	add.w	r3, r7, #28
 80048b6:	4619      	mov	r1, r3
 80048b8:	483f      	ldr	r0, [pc, #252]	; (80049b8 <MX_GPIO_Init+0x2b0>)
 80048ba:	f005 f8b1 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80048be:	230d      	movs	r3, #13
 80048c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c2:	2301      	movs	r3, #1
 80048c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048c6:	2301      	movs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048ce:	f107 031c 	add.w	r3, r7, #28
 80048d2:	4619      	mov	r1, r3
 80048d4:	4839      	ldr	r0, [pc, #228]	; (80049bc <MX_GPIO_Init+0x2b4>)
 80048d6:	f005 f8a3 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048de:	2301      	movs	r3, #1
 80048e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	2300      	movs	r3, #0
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 80048ea:	f107 031c 	add.w	r3, r7, #28
 80048ee:	4619      	mov	r1, r3
 80048f0:	4833      	ldr	r0, [pc, #204]	; (80049c0 <MX_GPIO_Init+0x2b8>)
 80048f2:	f005 f895 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : flashSwitch_Pin */
  GPIO_InitStruct.Pin = flashSwitch_Pin;
 80048f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004900:	2301      	movs	r3, #1
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashSwitch_GPIO_Port, &GPIO_InitStruct);
 8004904:	f107 031c 	add.w	r3, r7, #28
 8004908:	4619      	mov	r1, r3
 800490a:	482d      	ldr	r0, [pc, #180]	; (80049c0 <MX_GPIO_Init+0x2b8>)
 800490c:	f005 f888 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8004910:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8004914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004916:	2301      	movs	r3, #1
 8004918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491e:	2300      	movs	r3, #0
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4619      	mov	r1, r3
 8004928:	4826      	ldr	r0, [pc, #152]	; (80049c4 <MX_GPIO_Init+0x2bc>)
 800492a:	f005 f879 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004934:	2301      	movs	r3, #1
 8004936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493c:	2303      	movs	r3, #3
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8004940:	f107 031c 	add.w	r3, r7, #28
 8004944:	4619      	mov	r1, r3
 8004946:	481f      	ldr	r0, [pc, #124]	; (80049c4 <MX_GPIO_Init+0x2bc>)
 8004948:	f005 f86a 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800494c:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8004950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004952:	2301      	movs	r3, #1
 8004954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495a:	2303      	movs	r3, #3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800495e:	f107 031c 	add.w	r3, r7, #28
 8004962:	4619      	mov	r1, r3
 8004964:	4815      	ldr	r0, [pc, #84]	; (80049bc <MX_GPIO_Init+0x2b4>)
 8004966:	f005 f85b 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 800496a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800496e:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004970:	2301      	movs	r3, #1
 8004972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004978:	2300      	movs	r3, #0
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800497c:	f107 031c 	add.w	r3, r7, #28
 8004980:	4619      	mov	r1, r3
 8004982:	480e      	ldr	r0, [pc, #56]	; (80049bc <MX_GPIO_Init+0x2b4>)
 8004984:	f005 f84c 	bl	8009a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8004988:	2302      	movs	r3, #2
 800498a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800498c:	2301      	movs	r3, #1
 800498e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004994:	2303      	movs	r3, #3
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8004998:	f107 031c 	add.w	r3, r7, #28
 800499c:	4619      	mov	r1, r3
 800499e:	4808      	ldr	r0, [pc, #32]	; (80049c0 <MX_GPIO_Init+0x2b8>)
 80049a0:	f005 f83e 	bl	8009a20 <HAL_GPIO_Init>

}
 80049a4:	bf00      	nop
 80049a6:	3730      	adds	r7, #48	; 0x30
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	58024400 	.word	0x58024400
 80049b0:	58020000 	.word	0x58020000
 80049b4:	58020800 	.word	0x58020800
 80049b8:	58020400 	.word	0x58020400
 80049bc:	58021800 	.word	0x58021800
 80049c0:	58021000 	.word	0x58021000
 80049c4:	58020c00 	.word	0x58020c00

080049c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_MspInit+0x30>)
 80049e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <HAL_MspInit+0x30>)
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_MspInit+0x30>)
 80049f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	58024400 	.word	0x58024400

08004a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a33      	ldr	r2, [pc, #204]	; (8004af8 <HAL_ADC_MspInit+0xec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d15f      	bne.n	8004aee <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004a2e:	4b33      	ldr	r3, [pc, #204]	; (8004afc <HAL_ADC_MspInit+0xf0>)
 8004a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a34:	4a31      	ldr	r2, [pc, #196]	; (8004afc <HAL_ADC_MspInit+0xf0>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a3e:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_ADC_MspInit+0xf0>)
 8004a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_ADC_MspInit+0xf0>)
 8004a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a52:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <HAL_ADC_MspInit+0xf0>)
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a5c:	4b27      	ldr	r3, [pc, #156]	; (8004afc <HAL_ADC_MspInit+0xf0>)
 8004a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4820      	ldr	r0, [pc, #128]	; (8004b00 <HAL_ADC_MspInit+0xf4>)
 8004a7e:	f004 ffcf 	bl	8009a20 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004a82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004a86:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004a8a:	f000 ff11 	bl	80058b0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004a90:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <HAL_ADC_MspInit+0xfc>)
 8004a92:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004a96:	2273      	movs	r2, #115	; 0x73
 8004a98:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa0:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aac:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004abc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ac4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004ad2:	480c      	ldr	r0, [pc, #48]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ad4:	f002 f994 	bl	8006e00 <HAL_DMA_Init>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8004ade:	f7ff ff73 	bl	80049c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004ae6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ae8:	4a06      	ldr	r2, [pc, #24]	; (8004b04 <HAL_ADC_MspInit+0xf8>)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004aee:	bf00      	nop
 8004af0:	3728      	adds	r7, #40	; 0x28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	58026000 	.word	0x58026000
 8004afc:	58024400 	.word	0x58024400
 8004b00:	58020800 	.word	0x58020800
 8004b04:	24000898 	.word	0x24000898
 8004b08:	40020040 	.word	0x40020040

08004b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <HAL_TIM_Base_MspInit+0x48>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d116      	bne.n	8004b4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_TIM_Base_MspInit+0x4c>)
 8004b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b24:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <HAL_TIM_Base_MspInit+0x4c>)
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <HAL_TIM_Base_MspInit+0x4c>)
 8004b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	2037      	movs	r0, #55	; 0x37
 8004b42:	f002 f928 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004b46:	2037      	movs	r0, #55	; 0x37
 8004b48:	f002 f93f 	bl	8006dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40001400 	.word	0x40001400
 8004b58:	58024400 	.word	0x58024400

08004b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b090      	sub	sp, #64	; 0x40
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a9a      	ldr	r2, [pc, #616]	; (8004de4 <HAL_UART_MspInit+0x288>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d164      	bne.n	8004c48 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004b7e:	4b9a      	ldr	r3, [pc, #616]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b84:	4a98      	ldr	r2, [pc, #608]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b8e:	4b96      	ldr	r3, [pc, #600]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b9c:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba2:	4a91      	ldr	r2, [pc, #580]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004ba4:	f043 0320 	orr.w	r3, r3, #32
 8004ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bac:	4b8e      	ldr	r3, [pc, #568]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8004bba:	23c0      	movs	r3, #192	; 0xc0
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004bca:	2307      	movs	r3, #7
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4885      	ldr	r0, [pc, #532]	; (8004dec <HAL_UART_MspInit+0x290>)
 8004bd6:	f004 ff23 	bl	8009a20 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream0;
 8004bda:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004bdc:	4a85      	ldr	r2, [pc, #532]	; (8004df4 <HAL_UART_MspInit+0x298>)
 8004bde:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8004be0:	4b83      	ldr	r3, [pc, #524]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004be2:	224f      	movs	r2, #79	; 0x4f
 8004be4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004be6:	4b82      	ldr	r3, [pc, #520]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bec:	4b80      	ldr	r3, [pc, #512]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bf2:	4b7f      	ldr	r3, [pc, #508]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bf8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bfa:	4b7d      	ldr	r3, [pc, #500]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c00:	4b7b      	ldr	r3, [pc, #492]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8004c06:	4b7a      	ldr	r3, [pc, #488]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c0c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c0e:	4b78      	ldr	r3, [pc, #480]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c14:	4b76      	ldr	r3, [pc, #472]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8004c1a:	4875      	ldr	r0, [pc, #468]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c1c:	f002 f8f0 	bl	8006e00 <HAL_DMA_Init>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004c26:	f7ff fecf 	bl	80049c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a70      	ldr	r2, [pc, #448]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c2e:	679a      	str	r2, [r3, #120]	; 0x78
 8004c30:	4a6f      	ldr	r2, [pc, #444]	; (8004df0 <HAL_UART_MspInit+0x294>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8004c36:	2200      	movs	r2, #0
 8004c38:	2104      	movs	r1, #4
 8004c3a:	2052      	movs	r0, #82	; 0x52
 8004c3c:	f002 f8ab 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004c40:	2052      	movs	r0, #82	; 0x52
 8004c42:	f002 f8c2 	bl	8006dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004c46:	e120      	b.n	8004e8a <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a6a      	ldr	r2, [pc, #424]	; (8004df8 <HAL_UART_MspInit+0x29c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d165      	bne.n	8004d1e <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c52:	4b65      	ldr	r3, [pc, #404]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c58:	4a63      	ldr	r2, [pc, #396]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004c5a:	f043 0310 	orr.w	r3, r3, #16
 8004c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004c62:	4b61      	ldr	r3, [pc, #388]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c70:	4b5d      	ldr	r3, [pc, #372]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c76:	4a5c      	ldr	r2, [pc, #368]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8004c8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	2302      	movs	r3, #2
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4854      	ldr	r0, [pc, #336]	; (8004dfc <HAL_UART_MspInit+0x2a0>)
 8004cac:	f004 feb8 	bl	8009a20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8004cb0:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cb2:	4a54      	ldr	r2, [pc, #336]	; (8004e04 <HAL_UART_MspInit+0x2a8>)
 8004cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004cb6:	4b52      	ldr	r3, [pc, #328]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cb8:	2229      	movs	r2, #41	; 0x29
 8004cba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cbc:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cc8:	4b4d      	ldr	r3, [pc, #308]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cd0:	4b4b      	ldr	r3, [pc, #300]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cd6:	4b4a      	ldr	r3, [pc, #296]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ce4:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cea:	4b45      	ldr	r3, [pc, #276]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004cf0:	4843      	ldr	r0, [pc, #268]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004cf2:	f002 f885 	bl	8006e00 <HAL_DMA_Init>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8004cfc:	f7ff fe64 	bl	80049c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3f      	ldr	r2, [pc, #252]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004d04:	679a      	str	r2, [r3, #120]	; 0x78
 8004d06:	4a3e      	ldr	r2, [pc, #248]	; (8004e00 <HAL_UART_MspInit+0x2a4>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2101      	movs	r1, #1
 8004d10:	2025      	movs	r0, #37	; 0x25
 8004d12:	f002 f840 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d16:	2025      	movs	r0, #37	; 0x25
 8004d18:	f002 f857 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8004d1c:	e0b5      	b.n	8004e8a <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART3)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a39      	ldr	r2, [pc, #228]	; (8004e08 <HAL_UART_MspInit+0x2ac>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d175      	bne.n	8004e14 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d28:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d2e:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d46:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d4c:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004d4e:	f043 0302 	orr.w	r3, r3, #2
 8004d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_UART_MspInit+0x28c>)
 8004d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8004d64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d72:	2300      	movs	r3, #0
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d76:	2307      	movs	r3, #7
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d7e:	4619      	mov	r1, r3
 8004d80:	481e      	ldr	r0, [pc, #120]	; (8004dfc <HAL_UART_MspInit+0x2a0>)
 8004d82:	f004 fe4d 	bl	8009a20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004d88:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <HAL_UART_MspInit+0x2b4>)
 8004d8a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004d8e:	222d      	movs	r2, #45	; 0x2d
 8004d90:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004dc6:	4811      	ldr	r0, [pc, #68]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004dc8:	f002 f81a 	bl	8006e00 <HAL_DMA_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8004dd2:	f7ff fdf9 	bl	80049c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004dda:	679a      	str	r2, [r3, #120]	; 0x78
 8004ddc:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <HAL_UART_MspInit+0x2b0>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004de2:	e052      	b.n	8004e8a <HAL_UART_MspInit+0x32e>
 8004de4:	40007800 	.word	0x40007800
 8004de8:	58024400 	.word	0x58024400
 8004dec:	58021400 	.word	0x58021400
 8004df0:	24000980 	.word	0x24000980
 8004df4:	40020010 	.word	0x40020010
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	58020400 	.word	0x58020400
 8004e00:	24000a68 	.word	0x24000a68
 8004e04:	40020058 	.word	0x40020058
 8004e08:	40004800 	.word	0x40004800
 8004e0c:	24000308 	.word	0x24000308
 8004e10:	40020440 	.word	0x40020440
  else if(huart->Instance==USART6)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <HAL_UART_MspInit+0x338>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d135      	bne.n	8004e8a <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <HAL_UART_MspInit+0x33c>)
 8004e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e24:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <HAL_UART_MspInit+0x33c>)
 8004e26:	f043 0320 	orr.w	r3, r3, #32
 8004e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <HAL_UART_MspInit+0x33c>)
 8004e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <HAL_UART_MspInit+0x33c>)
 8004e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e42:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <HAL_UART_MspInit+0x33c>)
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_UART_MspInit+0x33c>)
 8004e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8004e5a:	23c0      	movs	r3, #192	; 0xc0
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e66:	2300      	movs	r3, #0
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004e6a:	2307      	movs	r3, #7
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e72:	4619      	mov	r1, r3
 8004e74:	4809      	ldr	r0, [pc, #36]	; (8004e9c <HAL_UART_MspInit+0x340>)
 8004e76:	f004 fdd3 	bl	8009a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	2047      	movs	r0, #71	; 0x47
 8004e80:	f001 ff89 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004e84:	2047      	movs	r0, #71	; 0x47
 8004e86:	f001 ffa0 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8004e8a:	bf00      	nop
 8004e8c:	3740      	adds	r7, #64	; 0x40
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40011400 	.word	0x40011400
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	58020800 	.word	0x58020800

08004ea0 <kalmanFilter_Pitch>:
double P_Rigt = 2;         //covariance estimation (err_estimate)
double R_Rigt = 2;         //covariance of the observation noise (err_measure)
double Q_Rigt = 0.0009;    //process variance

double kalmanFilter_Pitch(double mea)
{
 8004ea0:	b490      	push	{r4, r7}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Pitch = P_Pitch /(P_Pitch + R_Pitch);
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <kalmanFilter_Pitch+0xb4>)
 8004eac:	ed93 5b00 	vldr	d5, [r3]
 8004eb0:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <kalmanFilter_Pitch+0xb4>)
 8004eb2:	ed93 6b00 	vldr	d6, [r3]
 8004eb6:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <kalmanFilter_Pitch+0xb8>)
 8004eb8:	ed93 7b00 	vldr	d7, [r3]
 8004ebc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ec0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <kalmanFilter_Pitch+0xbc>)
 8004ec6:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k] = x_Pitch[k-1] + kalmanGain_Pitch *(mea - x_Pitch[k-1]);
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004ecc:	ed93 6b00 	vldr	d6, [r3]
 8004ed0:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004ed2:	ed93 7b00 	vldr	d7, [r3]
 8004ed6:	ed97 5b00 	vldr	d5, [r7]
 8004eda:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004ede:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <kalmanFilter_Pitch+0xbc>)
 8004ee0:	ed93 7b00 	vldr	d7, [r3]
 8004ee4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004eec:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004eee:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Pitch =  (1.0 - kalmanGain_Pitch) *P_Pitch + fabs(x_Pitch[k-1]-x_Pitch[k]) *Q_Pitch;
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <kalmanFilter_Pitch+0xbc>)
 8004ef4:	ed93 7b00 	vldr	d7, [r3]
 8004ef8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004efc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <kalmanFilter_Pitch+0xb4>)
 8004f02:	ed93 7b00 	vldr	d7, [r3]
 8004f06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004f0c:	ed93 5b00 	vldr	d5, [r3]
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004f12:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f16:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004f1a:	eeb0 5bc7 	vabs.f64	d5, d7
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <kalmanFilter_Pitch+0xc4>)
 8004f20:	ed93 7b00 	vldr	d7, [r3]
 8004f24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004f28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <kalmanFilter_Pitch+0xb4>)
 8004f2e:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k-1] = x_Pitch[k];
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004f34:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004f3a:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Pitch[k];
 8004f3e:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <kalmanFilter_Pitch+0xc0>)
 8004f40:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004f44:	ec44 3b17 	vmov	d7, r3, r4
}
 8004f48:	eeb0 0b47 	vmov.f64	d0, d7
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc90      	pop	{r4, r7}
 8004f52:	4770      	bx	lr
 8004f54:	240000b0 	.word	0x240000b0
 8004f58:	240000b8 	.word	0x240000b8
 8004f5c:	24000d60 	.word	0x24000d60
 8004f60:	24000d90 	.word	0x24000d90
 8004f64:	240000c0 	.word	0x240000c0

08004f68 <kalmanFilter_Left>:

double kalmanFilter_Left(double mea)
{
 8004f68:	b490      	push	{r4, r7}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Left = P_Left /(P_Left + R_Left);
 8004f72:	4b2a      	ldr	r3, [pc, #168]	; (800501c <kalmanFilter_Left+0xb4>)
 8004f74:	ed93 5b00 	vldr	d5, [r3]
 8004f78:	4b28      	ldr	r3, [pc, #160]	; (800501c <kalmanFilter_Left+0xb4>)
 8004f7a:	ed93 6b00 	vldr	d6, [r3]
 8004f7e:	4b28      	ldr	r3, [pc, #160]	; (8005020 <kalmanFilter_Left+0xb8>)
 8004f80:	ed93 7b00 	vldr	d7, [r3]
 8004f84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f88:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f8c:	4b25      	ldr	r3, [pc, #148]	; (8005024 <kalmanFilter_Left+0xbc>)
 8004f8e:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k] = x_Left[k-1] + kalmanGain_Left *(mea - x_Left[k-1]);
 8004f92:	4b25      	ldr	r3, [pc, #148]	; (8005028 <kalmanFilter_Left+0xc0>)
 8004f94:	ed93 6b00 	vldr	d6, [r3]
 8004f98:	4b23      	ldr	r3, [pc, #140]	; (8005028 <kalmanFilter_Left+0xc0>)
 8004f9a:	ed93 7b00 	vldr	d7, [r3]
 8004f9e:	ed97 5b00 	vldr	d5, [r7]
 8004fa2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <kalmanFilter_Left+0xbc>)
 8004fa8:	ed93 7b00 	vldr	d7, [r3]
 8004fac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004fb0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <kalmanFilter_Left+0xc0>)
 8004fb6:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Left =  (1.0 - kalmanGain_Left) *P_Left + fabs(x_Left[k-1]-x_Left[k]) *Q_Left;
 8004fba:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <kalmanFilter_Left+0xbc>)
 8004fbc:	ed93 7b00 	vldr	d7, [r3]
 8004fc0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004fc4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <kalmanFilter_Left+0xb4>)
 8004fca:	ed93 7b00 	vldr	d7, [r3]
 8004fce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <kalmanFilter_Left+0xc0>)
 8004fd4:	ed93 5b00 	vldr	d5, [r3]
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <kalmanFilter_Left+0xc0>)
 8004fda:	ed93 7b02 	vldr	d7, [r3, #8]
 8004fde:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004fe2:	eeb0 5bc7 	vabs.f64	d5, d7
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <kalmanFilter_Left+0xc4>)
 8004fe8:	ed93 7b00 	vldr	d7, [r3]
 8004fec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ff0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <kalmanFilter_Left+0xb4>)
 8004ff6:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k-1] = x_Left[k];
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <kalmanFilter_Left+0xc0>)
 8004ffc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005000:	4a09      	ldr	r2, [pc, #36]	; (8005028 <kalmanFilter_Left+0xc0>)
 8005002:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Left[k];
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <kalmanFilter_Left+0xc0>)
 8005008:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800500c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005010:	eeb0 0b47 	vmov.f64	d0, d7
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bc90      	pop	{r4, r7}
 800501a:	4770      	bx	lr
 800501c:	240000c8 	.word	0x240000c8
 8005020:	240000d0 	.word	0x240000d0
 8005024:	24000da8 	.word	0x24000da8
 8005028:	24000db0 	.word	0x24000db0
 800502c:	240000d8 	.word	0x240000d8

08005030 <kalmanFilter_Rigt>:

double kalmanFilter_Rigt(double mea)
{
 8005030:	b490      	push	{r4, r7}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Rigt = P_Rigt /(P_Rigt + R_Rigt);
 800503a:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <kalmanFilter_Rigt+0xb4>)
 800503c:	ed93 5b00 	vldr	d5, [r3]
 8005040:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <kalmanFilter_Rigt+0xb4>)
 8005042:	ed93 6b00 	vldr	d6, [r3]
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <kalmanFilter_Rigt+0xb8>)
 8005048:	ed93 7b00 	vldr	d7, [r3]
 800504c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <kalmanFilter_Rigt+0xbc>)
 8005056:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k] = x_Rigt[k-1] + kalmanGain_Rigt *(mea - x_Rigt[k-1]);
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 800505c:	ed93 6b00 	vldr	d6, [r3]
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 8005062:	ed93 7b00 	vldr	d7, [r3]
 8005066:	ed97 5b00 	vldr	d5, [r7]
 800506a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800506e:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <kalmanFilter_Rigt+0xbc>)
 8005070:	ed93 7b00 	vldr	d7, [r3]
 8005074:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005078:	ee36 7b07 	vadd.f64	d7, d6, d7
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 800507e:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Rigt =  (1.0 - kalmanGain_Rigt) *P_Rigt + fabs(x_Rigt[k-1]-x_Rigt[k]) *Q_Rigt;
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <kalmanFilter_Rigt+0xbc>)
 8005084:	ed93 7b00 	vldr	d7, [r3]
 8005088:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800508c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <kalmanFilter_Rigt+0xb4>)
 8005092:	ed93 7b00 	vldr	d7, [r3]
 8005096:	ee26 6b07 	vmul.f64	d6, d6, d7
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 800509c:	ed93 5b00 	vldr	d5, [r3]
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 80050a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80050a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80050aa:	eeb0 5bc7 	vabs.f64	d5, d7
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <kalmanFilter_Rigt+0xc4>)
 80050b0:	ed93 7b00 	vldr	d7, [r3]
 80050b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80050b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <kalmanFilter_Rigt+0xb4>)
 80050be:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k-1] = x_Rigt[k];
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 80050c4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 80050ca:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Rigt[k];
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <kalmanFilter_Rigt+0xc0>)
 80050d0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80050d4:	ec44 3b17 	vmov	d7, r3, r4
}
 80050d8:	eeb0 0b47 	vmov.f64	d0, d7
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc90      	pop	{r4, r7}
 80050e2:	4770      	bx	lr
 80050e4:	240000e0 	.word	0x240000e0
 80050e8:	240000e8 	.word	0x240000e8
 80050ec:	24000da0 	.word	0x24000da0
 80050f0:	24000dc0 	.word	0x24000dc0
 80050f4:	240000f0 	.word	0x240000f0

080050f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800510a:	e7fe      	b.n	800510a <HardFault_Handler+0x4>

0800510c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005110:	e7fe      	b.n	8005110 <MemManage_Handler+0x4>

08005112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005116:	e7fe      	b.n	8005116 <BusFault_Handler+0x4>

08005118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800511c:	e7fe      	b.n	800511c <UsageFault_Handler+0x4>

0800511e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800511e:	b480      	push	{r7}
 8005120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <SysTick_Handler+0x2c>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <SysTick_Handler+0x2c>)
 8005156:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <SysTick_Handler+0x2c>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b05      	cmp	r3, #5
 800515e:	d904      	bls.n	800516a <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <SysTick_Handler+0x2c>)
 8005162:	2200      	movs	r2, #0
 8005164:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8005166:	f7fb fbb5 	bl	80008d4 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800516a:	f000 fb53 	bl	8005814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	24000af8 	.word	0x24000af8

08005178 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800517c:	4802      	ldr	r0, [pc, #8]	; (8005188 <DMA1_Stream0_IRQHandler+0x10>)
 800517e:	f002 fe49 	bl	8007e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005182:	bf00      	nop
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	24000980 	.word	0x24000980

0800518c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	rigtRawDistance = aRigt_Linear*adc3Value[0] + bRigt_Linear;
 8005190:	4b30      	ldr	r3, [pc, #192]	; (8005254 <DMA1_Stream2_IRQHandler+0xc8>)
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800519c:	4b2e      	ldr	r3, [pc, #184]	; (8005258 <DMA1_Stream2_IRQHandler+0xcc>)
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051a6:	4b2d      	ldr	r3, [pc, #180]	; (800525c <DMA1_Stream2_IRQHandler+0xd0>)
 80051a8:	ed93 7b00 	vldr	d7, [r3]
 80051ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051b0:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <DMA1_Stream2_IRQHandler+0xd4>)
 80051b2:	ed83 7b00 	vstr	d7, [r3]
	leftRawDistance = aLeft_Linear*adc3Value[1] + bLeft_Linear;
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <DMA1_Stream2_IRQHandler+0xc8>)
 80051b8:	885b      	ldrh	r3, [r3, #2]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80051c2:	4b28      	ldr	r3, [pc, #160]	; (8005264 <DMA1_Stream2_IRQHandler+0xd8>)
 80051c4:	ed93 7b00 	vldr	d7, [r3]
 80051c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <DMA1_Stream2_IRQHandler+0xdc>)
 80051ce:	ed93 7b00 	vldr	d7, [r3]
 80051d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051d6:	4b25      	ldr	r3, [pc, #148]	; (800526c <DMA1_Stream2_IRQHandler+0xe0>)
 80051d8:	ed83 7b00 	vstr	d7, [r3]
	pitchRawDistance = aPitch_Linear*adc3Value[2] + bPitch_Linear;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <DMA1_Stream2_IRQHandler+0xc8>)
 80051de:	889b      	ldrh	r3, [r3, #4]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80051e8:	4b21      	ldr	r3, [pc, #132]	; (8005270 <DMA1_Stream2_IRQHandler+0xe4>)
 80051ea:	ed93 7b00 	vldr	d7, [r3]
 80051ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051f2:	4b20      	ldr	r3, [pc, #128]	; (8005274 <DMA1_Stream2_IRQHandler+0xe8>)
 80051f4:	ed93 7b00 	vldr	d7, [r3]
 80051f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <DMA1_Stream2_IRQHandler+0xec>)
 80051fe:	ed83 7b00 	vstr	d7, [r3]
	rigtDistance = kalmanFilter_Rigt(rigtRawDistance);
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <DMA1_Stream2_IRQHandler+0xd4>)
 8005204:	ed93 7b00 	vldr	d7, [r3]
 8005208:	eeb0 0b47 	vmov.f64	d0, d7
 800520c:	f7ff ff10 	bl	8005030 <kalmanFilter_Rigt>
 8005210:	eeb0 7b40 	vmov.f64	d7, d0
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <DMA1_Stream2_IRQHandler+0xf0>)
 8005216:	ed83 7b00 	vstr	d7, [r3]
	pitchDistance = kalmanFilter_Pitch(pitchRawDistance);
 800521a:	4b17      	ldr	r3, [pc, #92]	; (8005278 <DMA1_Stream2_IRQHandler+0xec>)
 800521c:	ed93 7b00 	vldr	d7, [r3]
 8005220:	eeb0 0b47 	vmov.f64	d0, d7
 8005224:	f7ff fe3c 	bl	8004ea0 <kalmanFilter_Pitch>
 8005228:	eeb0 7b40 	vmov.f64	d7, d0
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <DMA1_Stream2_IRQHandler+0xf4>)
 800522e:	ed83 7b00 	vstr	d7, [r3]
	leftDistance = kalmanFilter_Left(leftRawDistance);
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <DMA1_Stream2_IRQHandler+0xe0>)
 8005234:	ed93 7b00 	vldr	d7, [r3]
 8005238:	eeb0 0b47 	vmov.f64	d0, d7
 800523c:	f7ff fe94 	bl	8004f68 <kalmanFilter_Left>
 8005240:	eeb0 7b40 	vmov.f64	d7, d0
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <DMA1_Stream2_IRQHandler+0xf8>)
 8005246:	ed83 7b00 	vstr	d7, [r3]

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800524a:	480f      	ldr	r0, [pc, #60]	; (8005288 <DMA1_Stream2_IRQHandler+0xfc>)
 800524c:	f002 fde2 	bl	8007e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}
 8005254:	24000d0c 	.word	0x24000d0c
 8005258:	24000418 	.word	0x24000418
 800525c:	24000228 	.word	0x24000228
 8005260:	24000300 	.word	0x24000300
 8005264:	24000cb8 	.word	0x24000cb8
 8005268:	24000880 	.word	0x24000880
 800526c:	24000218 	.word	0x24000218
 8005270:	24000ae0 	.word	0x24000ae0
 8005274:	24000cc8 	.word	0x24000cc8
 8005278:	24000d80 	.word	0x24000d80
 800527c:	24000970 	.word	0x24000970
 8005280:	24000d00 	.word	0x24000d00
 8005284:	24000bc0 	.word	0x24000bc0
 8005288:	24000898 	.word	0x24000898

0800528c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <DMA1_Stream3_IRQHandler+0x24>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	b21a      	sxth	r2, r3
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <DMA1_Stream3_IRQHandler+0x24>)
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	b21b      	sxth	r3, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	b21a      	sxth	r2, r3
 80052a2:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <DMA1_Stream3_IRQHandler+0x28>)
 80052a4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80052a6:	4804      	ldr	r0, [pc, #16]	; (80052b8 <DMA1_Stream3_IRQHandler+0x2c>)
 80052a8:	f002 fdb4 	bl	8007e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80052ac:	bf00      	nop
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	24000858 	.word	0x24000858
 80052b4:	24000930 	.word	0x24000930
 80052b8:	24000a68 	.word	0x24000a68

080052bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <USART1_IRQHandler+0x10>)
 80052c2:	f008 f99b 	bl	800d5fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	24000b10 	.word	0x24000b10

080052d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80052d4:	4802      	ldr	r0, [pc, #8]	; (80052e0 <TIM7_IRQHandler+0x10>)
 80052d6:	f007 fc3f 	bl	800cb58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	24000d14 	.word	0x24000d14

080052e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 80052e8:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <DMA2_Stream2_IRQHandler+0x23c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	f040 80ff 	bne.w	80054f0 <DMA2_Stream2_IRQHandler+0x20c>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 80052f2:	4b8c      	ldr	r3, [pc, #560]	; (8005524 <DMA2_Stream2_IRQHandler+0x240>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	b2d1      	uxtb	r1, r2
 80052fa:	4a8a      	ldr	r2, [pc, #552]	; (8005524 <DMA2_Stream2_IRQHandler+0x240>)
 80052fc:	7011      	strb	r1, [r2, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	4b89      	ldr	r3, [pc, #548]	; (8005528 <DMA2_Stream2_IRQHandler+0x244>)
 8005302:	7819      	ldrb	r1, [r3, #0]
 8005304:	4b89      	ldr	r3, [pc, #548]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 8005306:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8005308:	4b86      	ldr	r3, [pc, #536]	; (8005524 <DMA2_Stream2_IRQHandler+0x240>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b05      	cmp	r3, #5
 800530e:	f240 80ef 	bls.w	80054f0 <DMA2_Stream2_IRQHandler+0x20c>
		{
			PS2DataIndex = 0;
 8005312:	4b84      	ldr	r3, [pc, #528]	; (8005524 <DMA2_Stream2_IRQHandler+0x240>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8005318:	4b81      	ldr	r3, [pc, #516]	; (8005520 <DMA2_Stream2_IRQHandler+0x23c>)
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 800531e:	4b83      	ldr	r3, [pc, #524]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	b21a      	sxth	r2, r3
 8005326:	4b81      	ldr	r3, [pc, #516]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	b21b      	sxth	r3, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	b21a      	sxth	r2, r3
 8005330:	4b7f      	ldr	r3, [pc, #508]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005332:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8005334:	4b7d      	ldr	r3, [pc, #500]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 8005336:	789b      	ldrb	r3, [r3, #2]
 8005338:	b29a      	uxth	r2, r3
 800533a:	4b7e      	ldr	r3, [pc, #504]	; (8005534 <DMA2_Stream2_IRQHandler+0x250>)
 800533c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	b21a      	sxth	r2, r3
 8005348:	4b7b      	ldr	r3, [pc, #492]	; (8005538 <DMA2_Stream2_IRQHandler+0x254>)
 800534a:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 800534c:	4b77      	ldr	r3, [pc, #476]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 800534e:	78db      	ldrb	r3, [r3, #3]
 8005350:	b29a      	uxth	r2, r3
 8005352:	4b7a      	ldr	r3, [pc, #488]	; (800553c <DMA2_Stream2_IRQHandler+0x258>)
 8005354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005358:	b29b      	uxth	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	b29b      	uxth	r3, r3
 800535e:	b21a      	sxth	r2, r3
 8005360:	4b77      	ldr	r3, [pc, #476]	; (8005540 <DMA2_Stream2_IRQHandler+0x25c>)
 8005362:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 8005364:	4b71      	ldr	r3, [pc, #452]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 8005366:	791b      	ldrb	r3, [r3, #4]
 8005368:	b29a      	uxth	r2, r3
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <DMA2_Stream2_IRQHandler+0x260>)
 800536c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005370:	b29b      	uxth	r3, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	b29b      	uxth	r3, r3
 8005376:	b21a      	sxth	r2, r3
 8005378:	4b73      	ldr	r3, [pc, #460]	; (8005548 <DMA2_Stream2_IRQHandler+0x264>)
 800537a:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 800537c:	4b6b      	ldr	r3, [pc, #428]	; (800552c <DMA2_Stream2_IRQHandler+0x248>)
 800537e:	795b      	ldrb	r3, [r3, #5]
 8005380:	b29a      	uxth	r2, r3
 8005382:	4b72      	ldr	r3, [pc, #456]	; (800554c <DMA2_Stream2_IRQHandler+0x268>)
 8005384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005388:	b29b      	uxth	r3, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	b21a      	sxth	r2, r3
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <DMA2_Stream2_IRQHandler+0x26c>)
 8005392:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 8005394:	4b66      	ldr	r3, [pc, #408]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800539a:	13db      	asrs	r3, r3, #15
 800539c:	b21b      	sxth	r3, r3
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	4b6b      	ldr	r3, [pc, #428]	; (8005554 <DMA2_Stream2_IRQHandler+0x270>)
 80053a8:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 80053aa:	4b61      	ldr	r3, [pc, #388]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80053ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b0:	139b      	asrs	r3, r3, #14
 80053b2:	b21b      	sxth	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	4b66      	ldr	r3, [pc, #408]	; (8005558 <DMA2_Stream2_IRQHandler+0x274>)
 80053be:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 80053c0:	4b5b      	ldr	r3, [pc, #364]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80053c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c6:	135b      	asrs	r3, r3, #13
 80053c8:	b21b      	sxth	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b62      	ldr	r3, [pc, #392]	; (800555c <DMA2_Stream2_IRQHandler+0x278>)
 80053d4:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 80053d6:	4b56      	ldr	r3, [pc, #344]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80053d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053dc:	131b      	asrs	r3, r3, #12
 80053de:	b21b      	sxth	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b5d      	ldr	r3, [pc, #372]	; (8005560 <DMA2_Stream2_IRQHandler+0x27c>)
 80053ea:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 80053ec:	4b50      	ldr	r3, [pc, #320]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80053ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f2:	12db      	asrs	r3, r3, #11
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b59      	ldr	r3, [pc, #356]	; (8005564 <DMA2_Stream2_IRQHandler+0x280>)
 8005400:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 8005402:	4b4b      	ldr	r3, [pc, #300]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005408:	129b      	asrs	r3, r3, #10
 800540a:	b21b      	sxth	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	4b54      	ldr	r3, [pc, #336]	; (8005568 <DMA2_Stream2_IRQHandler+0x284>)
 8005416:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8005418:	4b45      	ldr	r3, [pc, #276]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 800541a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800541e:	125b      	asrs	r3, r3, #9
 8005420:	b21b      	sxth	r3, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4b50      	ldr	r3, [pc, #320]	; (800556c <DMA2_Stream2_IRQHandler+0x288>)
 800542c:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 800542e:	4b40      	ldr	r3, [pc, #256]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005434:	121b      	asrs	r3, r3, #8
 8005436:	b21b      	sxth	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	4b4b      	ldr	r3, [pc, #300]	; (8005570 <DMA2_Stream2_IRQHandler+0x28c>)
 8005442:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 8005444:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800544a:	11db      	asrs	r3, r3, #7
 800544c:	b21b      	sxth	r3, r3
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <DMA2_Stream2_IRQHandler+0x290>)
 8005458:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 800545a:	4b35      	ldr	r3, [pc, #212]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 800545c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005460:	119b      	asrs	r3, r3, #6
 8005462:	b21b      	sxth	r3, r3
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	4b42      	ldr	r3, [pc, #264]	; (8005578 <DMA2_Stream2_IRQHandler+0x294>)
 800546e:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 8005470:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005476:	115b      	asrs	r3, r3, #5
 8005478:	b21b      	sxth	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4b3e      	ldr	r3, [pc, #248]	; (800557c <DMA2_Stream2_IRQHandler+0x298>)
 8005484:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 8005486:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 8005488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800548c:	111b      	asrs	r3, r3, #4
 800548e:	b21b      	sxth	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <DMA2_Stream2_IRQHandler+0x29c>)
 800549a:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 800549e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a2:	10db      	asrs	r3, r3, #3
 80054a4:	b21b      	sxth	r3, r3
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b35      	ldr	r3, [pc, #212]	; (8005584 <DMA2_Stream2_IRQHandler+0x2a0>)
 80054b0:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 80054b2:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80054b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b8:	109b      	asrs	r3, r3, #2
 80054ba:	b21b      	sxth	r3, r3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	4b30      	ldr	r3, [pc, #192]	; (8005588 <DMA2_Stream2_IRQHandler+0x2a4>)
 80054c6:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 80054c8:	4b19      	ldr	r3, [pc, #100]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80054ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ce:	105b      	asrs	r3, r3, #1
 80054d0:	b21b      	sxth	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4b2c      	ldr	r3, [pc, #176]	; (800558c <DMA2_Stream2_IRQHandler+0x2a8>)
 80054dc:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <DMA2_Stream2_IRQHandler+0x24c>)
 80054e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	4b28      	ldr	r3, [pc, #160]	; (8005590 <DMA2_Stream2_IRQHandler+0x2ac>)
 80054ee:	701a      	strb	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <DMA2_Stream2_IRQHandler+0x244>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2baa      	cmp	r3, #170	; 0xaa
 80054f6:	d106      	bne.n	8005506 <DMA2_Stream2_IRQHandler+0x222>
		PS2CheckbyteCount++;
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <DMA2_Stream2_IRQHandler+0x23c>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <DMA2_Stream2_IRQHandler+0x23c>)
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e006      	b.n	8005514 <DMA2_Stream2_IRQHandler+0x230>
	else
		if(PS2CheckbyteCount != 4)
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <DMA2_Stream2_IRQHandler+0x23c>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d002      	beq.n	8005514 <DMA2_Stream2_IRQHandler+0x230>
			PS2CheckbyteCount = 0;
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <DMA2_Stream2_IRQHandler+0x23c>)
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005514:	481f      	ldr	r0, [pc, #124]	; (8005594 <DMA2_Stream2_IRQHandler+0x2b0>)
 8005516:	f002 fc7d 	bl	8007e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2400018c 	.word	0x2400018c
 8005524:	240009f8 	.word	0x240009f8
 8005528:	24000cb0 	.word	0x24000cb0
 800552c:	24000850 	.word	0x24000850
 8005530:	24000bb4 	.word	0x24000bb4
 8005534:	24000010 	.word	0x24000010
 8005538:	24000448 	.word	0x24000448
 800553c:	2400000e 	.word	0x2400000e
 8005540:	24000bec 	.word	0x24000bec
 8005544:	2400000c 	.word	0x2400000c
 8005548:	24000d08 	.word	0x24000d08
 800554c:	2400000a 	.word	0x2400000a
 8005550:	24000d5c 	.word	0x24000d5c
 8005554:	24000425 	.word	0x24000425
 8005558:	24000bc8 	.word	0x24000bc8
 800555c:	24000bb9 	.word	0x24000bb9
 8005560:	24000cd0 	.word	0x24000cd0
 8005564:	24000bee 	.word	0x24000bee
 8005568:	24000c09 	.word	0x24000c09
 800556c:	24000d13 	.word	0x24000d13
 8005570:	2400091c 	.word	0x2400091c
 8005574:	24000bcc 	.word	0x24000bcc
 8005578:	240001f1 	.word	0x240001f1
 800557c:	24000426 	.word	0x24000426
 8005580:	2400091d 	.word	0x2400091d
 8005584:	24000428 	.word	0x24000428
 8005588:	24000c03 	.word	0x24000c03
 800558c:	24000d54 	.word	0x24000d54
 8005590:	24000ce1 	.word	0x24000ce1
 8005594:	24000308 	.word	0x24000308

08005598 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <USART6_IRQHandler+0x10>)
 800559e:	f008 f82d 	bl	800d5fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	24000c24 	.word	0x24000c24

080055ac <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <UART7_IRQHandler+0x10>)
 80055b2:	f008 f823 	bl	800d5fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	24000234 	.word	0x24000234

080055c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <_sbrk+0x50>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <_sbrk+0x16>
		heap_end = &end;
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <_sbrk+0x50>)
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <_sbrk+0x54>)
 80055d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <_sbrk+0x50>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <_sbrk+0x50>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	466a      	mov	r2, sp
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d907      	bls.n	80055fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055ea:	f00b f97f 	bl	80108ec <__errno>
 80055ee:	4602      	mov	r2, r0
 80055f0:	230c      	movs	r3, #12
 80055f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	e006      	b.n	8005608 <_sbrk+0x48>
	}

	heap_end += incr;
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <_sbrk+0x50>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	4a03      	ldr	r2, [pc, #12]	; (8005610 <_sbrk+0x50>)
 8005604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	240001e0 	.word	0x240001e0
 8005614:	24000df8 	.word	0x24000df8

08005618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800561c:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <SystemInit+0xac>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <SystemInit+0xac>)
 8005624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800562c:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <SystemInit+0xb0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <SystemInit+0xb0>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <SystemInit+0xb0>)
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800563e:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <SystemInit+0xb0>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4921      	ldr	r1, [pc, #132]	; (80056c8 <SystemInit+0xb0>)
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <SystemInit+0xb4>)
 8005646:	4013      	ands	r3, r2
 8005648:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800564a:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <SystemInit+0xb0>)
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005650:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <SystemInit+0xb0>)
 8005652:	2200      	movs	r2, #0
 8005654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005656:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <SystemInit+0xb0>)
 8005658:	2200      	movs	r2, #0
 800565a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <SystemInit+0xb0>)
 800565e:	2200      	movs	r2, #0
 8005660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8005662:	4b19      	ldr	r3, [pc, #100]	; (80056c8 <SystemInit+0xb0>)
 8005664:	2200      	movs	r2, #0
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <SystemInit+0xb0>)
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <SystemInit+0xb0>)
 8005670:	2200      	movs	r2, #0
 8005672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8005674:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <SystemInit+0xb0>)
 8005676:	2200      	movs	r2, #0
 8005678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <SystemInit+0xb0>)
 800567c:	2200      	movs	r2, #0
 800567e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <SystemInit+0xb0>)
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <SystemInit+0xb0>)
 8005688:	2200      	movs	r2, #0
 800568a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800568c:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <SystemInit+0xb0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0d      	ldr	r2, [pc, #52]	; (80056c8 <SystemInit+0xb0>)
 8005692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <SystemInit+0xb0>)
 800569a:	2200      	movs	r2, #0
 800569c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <SystemInit+0xb8>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <SystemInit+0xbc>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056aa:	d202      	bcs.n	80056b2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <SystemInit+0xc0>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <SystemInit+0xac>)
 80056b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056b8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	e000ed00 	.word	0xe000ed00
 80056c8:	58024400 	.word	0x58024400
 80056cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80056d0:	5c001000 	.word	0x5c001000
 80056d4:	ffff0000 	.word	0xffff0000
 80056d8:	51008108 	.word	0x51008108

080056dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056e2:	e003      	b.n	80056ec <LoopCopyDataInit>

080056e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056ea:	3104      	adds	r1, #4

080056ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056ec:	480b      	ldr	r0, [pc, #44]	; (800571c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056f4:	d3f6      	bcc.n	80056e4 <CopyDataInit>
  ldr  r2, =_sbss
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056f8:	e002      	b.n	8005700 <LoopFillZerobss>

080056fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056fc:	f842 3b04 	str.w	r3, [r2], #4

08005700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005704:	d3f9      	bcc.n	80056fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005706:	f7ff ff87 	bl	8005618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800570a:	f00b f8f5 	bl	80108f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800570e:	f7fd ffe3 	bl	80036d8 <main>
  bx  lr    
 8005712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005714:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005718:	080126a0 	.word	0x080126a0
  ldr  r0, =_sdata
 800571c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005720:	24000170 	.word	0x24000170
  ldr  r2, =_sbss
 8005724:	24000170 	.word	0x24000170
  ldr  r3, = _ebss
 8005728:	24000df4 	.word	0x24000df4

0800572c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800572c:	e7fe      	b.n	800572c <ADC3_IRQHandler>
	...

08005730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005736:	2003      	movs	r0, #3
 8005738:	f001 fb22 	bl	8006d80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800573c:	f005 f934 	bl	800a9a8 <HAL_RCC_GetSysClockFreq>
 8005740:	4601      	mov	r1, r0
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_Init+0x68>)
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	0a1b      	lsrs	r3, r3, #8
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_Init+0x6c>)
 800574e:	5cd3      	ldrb	r3, [r2, r3]
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	fa21 f303 	lsr.w	r3, r1, r3
 8005758:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_Init+0x68>)
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	4a0e      	ldr	r2, [pc, #56]	; (800579c <HAL_Init+0x6c>)
 8005764:	5cd3      	ldrb	r3, [r2, r3]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
 8005770:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <HAL_Init+0x70>)
 8005772:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005774:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <HAL_Init+0x74>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800577a:	2000      	movs	r0, #0
 800577c:	f000 f814 	bl	80057a8 <HAL_InitTick>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e002      	b.n	8005790 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800578a:	f7ff f925 	bl	80049d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	58024400 	.word	0x58024400
 800579c:	08012424 	.word	0x08012424
 80057a0:	240000fc 	.word	0x240000fc
 80057a4:	240000f8 	.word	0x240000f8

080057a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_InitTick+0x60>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e021      	b.n	8005800 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80057bc:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_InitTick+0x64>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <HAL_InitTick+0x60>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fb07 	bl	8006de6 <HAL_SYSTICK_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e00e      	b.n	8005800 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d80a      	bhi.n	80057fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057e8:	2200      	movs	r2, #0
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	f001 fad1 	bl	8006d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057f4:	4a06      	ldr	r2, [pc, #24]	; (8005810 <HAL_InitTick+0x68>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e000      	b.n	8005800 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	24000104 	.word	0x24000104
 800580c:	240000f8 	.word	0x240000f8
 8005810:	24000100 	.word	0x24000100

08005814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005818:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_IncTick+0x20>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	4b06      	ldr	r3, [pc, #24]	; (8005838 <HAL_IncTick+0x24>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4413      	add	r3, r2
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_IncTick+0x24>)
 8005826:	6013      	str	r3, [r2, #0]
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	24000104 	.word	0x24000104
 8005838:	24000dd0 	.word	0x24000dd0

0800583c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return uwTick;
 8005840:	4b03      	ldr	r3, [pc, #12]	; (8005850 <HAL_GetTick+0x14>)
 8005842:	681b      	ldr	r3, [r3, #0]
}
 8005844:	4618      	mov	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	24000dd0 	.word	0x24000dd0

08005854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800585c:	f7ff ffee 	bl	800583c <HAL_GetTick>
 8005860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d005      	beq.n	800587a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_Delay+0x40>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800587a:	bf00      	nop
 800587c:	f7ff ffde 	bl	800583c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	429a      	cmp	r2, r3
 800588a:	d8f7      	bhi.n	800587c <HAL_Delay+0x28>
  {
  }
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	24000104 	.word	0x24000104

08005898 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_GetREVID+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	0c1b      	lsrs	r3, r3, #16
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	5c001000 	.word	0x5c001000

080058b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	4904      	ldr	r1, [pc, #16]	; (80058d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	604b      	str	r3, [r1, #4]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	58000400 	.word	0x58000400

080058dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005944:	b490      	push	{r4, r7}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3360      	adds	r3, #96	; 0x60
 8005956:	461a      	mov	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	430b      	orrs	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bc90      	pop	{r4, r7}
 800597c:	4770      	bx	lr

0800597e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	611a      	str	r2, [r3, #16]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80059b0:	b490      	push	{r4, r7}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3360      	adds	r3, #96	; 0x60
 80059c0:	461a      	mov	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	6023      	str	r3, [r4, #0]
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc90      	pop	{r4, r7}
 80059de:	4770      	bx	lr

080059e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a06:	b490      	push	{r4, r7}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3330      	adds	r3, #48	; 0x30
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	4413      	add	r3, r2
 8005a24:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	211f      	movs	r1, #31
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	0e9b      	lsrs	r3, r3, #26
 8005a3c:	f003 011f 	and.w	r1, r3, #31
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc90      	pop	{r4, r7}
 8005a56:	4770      	bx	lr

08005a58 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f023 0203 	bic.w	r2, r3, #3
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60da      	str	r2, [r3, #12]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a7e:	b490      	push	{r4, r7}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3314      	adds	r3, #20
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	0e5b      	lsrs	r3, r3, #25
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	4413      	add	r3, r2
 8005a9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	0d1b      	lsrs	r3, r3, #20
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2107      	movs	r1, #7
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	0d1b      	lsrs	r3, r3, #20
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc90      	pop	{r4, r7}
 8005acc:	4770      	bx	lr
	...

08005ad0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f003 0318 	and.w	r3, r3, #24
 8005af2:	4908      	ldr	r1, [pc, #32]	; (8005b14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005af4:	40d9      	lsrs	r1, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	400b      	ands	r3, r1
 8005afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005afe:	431a      	orrs	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	000fffff 	.word	0x000fffff

08005b18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 031f 	and.w	r3, r3, #31
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6093      	str	r3, [r2, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	5fffffc0 	.word	0x5fffffc0

08005b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b6c:	d101      	bne.n	8005b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <LL_ADC_EnableInternalRegulator+0x24>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	6fffffc0 	.word	0x6fffffc0

08005ba8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bbc:	d101      	bne.n	8005bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <LL_ADC_Enable+0x24>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	7fffffc0 	.word	0x7fffffc0

08005bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <LL_ADC_IsEnabled+0x18>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <LL_ADC_IsEnabled+0x1a>
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <LL_ADC_REG_StartConversion+0x24>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	f043 0204 	orr.w	r2, r3, #4
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	7fffffc0 	.word	0x7fffffc0

08005c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d101      	bne.n	8005c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d101      	bne.n	8005c86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b089      	sub	sp, #36	; 0x24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e18e      	b.n	8005fcc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fe fea5 	bl	8004a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff3f 	bl	8005b58 <LL_ADC_IsDeepPowerDownEnabled>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff25 	bl	8005b34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ff5a 	bl	8005ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff ff3e 	bl	8005b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005d04:	4b9a      	ldr	r3, [pc, #616]	; (8005f70 <HAL_ADC_Init+0x2dc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	099b      	lsrs	r3, r3, #6
 8005d0a:	4a9a      	ldr	r2, [pc, #616]	; (8005f74 <HAL_ADC_Init+0x2e0>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	099b      	lsrs	r3, r3, #6
 8005d12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d14:	e002      	b.n	8005d1c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f9      	bne.n	8005d16 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff ff3e 	bl	8005ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10d      	bne.n	8005d4e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	f043 0210 	orr.w	r2, r3, #16
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	f043 0201 	orr.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff ff78 	bl	8005c48 <LL_ADC_REG_IsConversionOngoing>
 8005d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 8129 	bne.w	8005fba <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 8125 	bne.w	8005fba <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d78:	f043 0202 	orr.w	r2, r3, #2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff ff37 	bl	8005bf8 <LL_ADC_IsEnabled>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d136      	bne.n	8005dfe <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a78      	ldr	r2, [pc, #480]	; (8005f78 <HAL_ADC_Init+0x2e4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_ADC_Init+0x110>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a77      	ldr	r2, [pc, #476]	; (8005f7c <HAL_ADC_Init+0x2e8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10e      	bne.n	8005dc2 <HAL_ADC_Init+0x12e>
 8005da4:	4874      	ldr	r0, [pc, #464]	; (8005f78 <HAL_ADC_Init+0x2e4>)
 8005da6:	f7ff ff27 	bl	8005bf8 <LL_ADC_IsEnabled>
 8005daa:	4604      	mov	r4, r0
 8005dac:	4873      	ldr	r0, [pc, #460]	; (8005f7c <HAL_ADC_Init+0x2e8>)
 8005dae:	f7ff ff23 	bl	8005bf8 <LL_ADC_IsEnabled>
 8005db2:	4603      	mov	r3, r0
 8005db4:	4323      	orrs	r3, r4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e008      	b.n	8005dd4 <HAL_ADC_Init+0x140>
 8005dc2:	486f      	ldr	r0, [pc, #444]	; (8005f80 <HAL_ADC_Init+0x2ec>)
 8005dc4:	f7ff ff18 	bl	8005bf8 <LL_ADC_IsEnabled>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a66      	ldr	r2, [pc, #408]	; (8005f78 <HAL_ADC_Init+0x2e4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_ADC_Init+0x158>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a65      	ldr	r2, [pc, #404]	; (8005f7c <HAL_ADC_Init+0x2e8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_ADC_Init+0x15c>
 8005dec:	4a65      	ldr	r2, [pc, #404]	; (8005f84 <HAL_ADC_Init+0x2f0>)
 8005dee:	e000      	b.n	8005df2 <HAL_ADC_Init+0x15e>
 8005df0:	4a65      	ldr	r2, [pc, #404]	; (8005f88 <HAL_ADC_Init+0x2f4>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7ff fd6f 	bl	80058dc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005dfe:	f7ff fd4b 	bl	8005898 <HAL_GetREVID>
 8005e02:	4602      	mov	r2, r0
 8005e04:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d914      	bls.n	8005e36 <HAL_ADC_Init+0x1a2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d110      	bne.n	8005e36 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	7d5b      	ldrb	r3, [r3, #21]
 8005e18:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e1e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005e24:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7f1b      	ldrb	r3, [r3, #28]
 8005e2a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8005e2c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e2e:	f043 030c 	orr.w	r3, r3, #12
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e00d      	b.n	8005e52 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7d5b      	ldrb	r3, [r3, #21]
 8005e3a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e40:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005e46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7f1b      	ldrb	r3, [r3, #28]
 8005e4c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7f1b      	ldrb	r3, [r3, #28]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d106      	bne.n	8005e68 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	045b      	lsls	r3, r3, #17
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	4b40      	ldr	r3, [pc, #256]	; (8005f8c <HAL_ADC_Init+0x2f8>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	69b9      	ldr	r1, [r7, #24]
 8005e94:	430b      	orrs	r3, r1
 8005e96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fed3 	bl	8005c48 <LL_ADC_REG_IsConversionOngoing>
 8005ea2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fee0 	bl	8005c6e <LL_ADC_INJ_IsConversionOngoing>
 8005eae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14a      	bne.n	8005f4c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d147      	bne.n	8005f4c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	7d1b      	ldrb	r3, [r3, #20]
 8005ec0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <HAL_ADC_Init+0x2fc>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	430b      	orrs	r3, r1
 8005edc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d11b      	bne.n	8005f20 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	4b27      	ldr	r3, [pc, #156]	; (8005f94 <HAL_ADC_Init+0x300>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005efc:	3a01      	subs	r2, #1
 8005efe:	0411      	lsls	r1, r2, #16
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f04:	4311      	orrs	r1, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f0a:	4311      	orrs	r1, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f10:	430a      	orrs	r2, r1
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	611a      	str	r2, [r3, #16]
 8005f1e:	e007      	b.n	8005f30 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fd52 	bl	80069f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d121      	bne.n	8005f98 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	f023 010f 	bic.w	r1, r3, #15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f6c:	e01c      	b.n	8005fa8 <HAL_ADC_Init+0x314>
 8005f6e:	bf00      	nop
 8005f70:	240000f8 	.word	0x240000f8
 8005f74:	053e2d63 	.word	0x053e2d63
 8005f78:	40022000 	.word	0x40022000
 8005f7c:	40022100 	.word	0x40022100
 8005f80:	58026000 	.word	0x58026000
 8005f84:	40022300 	.word	0x40022300
 8005f88:	58026300 	.word	0x58026300
 8005f8c:	fff0c003 	.word	0xfff0c003
 8005f90:	ffffbffc 	.word	0xffffbffc
 8005f94:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 020f 	bic.w	r2, r2, #15
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fac:	f023 0303 	bic.w	r3, r3, #3
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
 8005fb8:	e007      	b.n	8005fca <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	f043 0210 	orr.w	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3724      	adds	r7, #36	; 0x24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd90      	pop	{r4, r7, pc}

08005fd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a55      	ldr	r2, [pc, #340]	; (800613c <HAL_ADC_Start_DMA+0x168>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_ADC_Start_DMA+0x20>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a54      	ldr	r2, [pc, #336]	; (8006140 <HAL_ADC_Start_DMA+0x16c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <HAL_ADC_Start_DMA+0x24>
 8005ff4:	4b53      	ldr	r3, [pc, #332]	; (8006144 <HAL_ADC_Start_DMA+0x170>)
 8005ff6:	e000      	b.n	8005ffa <HAL_ADC_Start_DMA+0x26>
 8005ff8:	4b53      	ldr	r3, [pc, #332]	; (8006148 <HAL_ADC_Start_DMA+0x174>)
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fd8c 	bl	8005b18 <LL_ADC_GetMultimode>
 8006000:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fe1e 	bl	8005c48 <LL_ADC_REG_IsConversionOngoing>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 808c 	bne.w	800612c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_ADC_Start_DMA+0x4e>
 800601e:	2302      	movs	r3, #2
 8006020:	e087      	b.n	8006132 <HAL_ADC_Start_DMA+0x15e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b05      	cmp	r3, #5
 8006034:	d002      	beq.n	800603c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b09      	cmp	r3, #9
 800603a:	d170      	bne.n	800611e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fbbf 	bl	80067c0 <ADC_Enable>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d163      	bne.n	8006114 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006050:	4b3e      	ldr	r3, [pc, #248]	; (800614c <HAL_ADC_Start_DMA+0x178>)
 8006052:	4013      	ands	r3, r2
 8006054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a37      	ldr	r2, [pc, #220]	; (8006140 <HAL_ADC_Start_DMA+0x16c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d002      	beq.n	800606c <HAL_ADC_Start_DMA+0x98>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	e000      	b.n	800606e <HAL_ADC_Start_DMA+0x9a>
 800606c:	4b33      	ldr	r3, [pc, #204]	; (800613c <HAL_ADC_Start_DMA+0x168>)
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	4293      	cmp	r3, r2
 8006074:	d002      	beq.n	800607c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d105      	bne.n	8006088 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	f023 0206 	bic.w	r2, r3, #6
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	659a      	str	r2, [r3, #88]	; 0x58
 80060a0:	e002      	b.n	80060a8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ac:	4a28      	ldr	r2, [pc, #160]	; (8006150 <HAL_ADC_Start_DMA+0x17c>)
 80060ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b4:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_ADC_Start_DMA+0x180>)
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060bc:	4a26      	ldr	r2, [pc, #152]	; (8006158 <HAL_ADC_Start_DMA+0x184>)
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	221c      	movs	r2, #28
 80060c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0210 	orr.w	r2, r2, #16
 80060de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f7ff fcb4 	bl	8005a58 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3340      	adds	r3, #64	; 0x40
 80060fa:	4619      	mov	r1, r3
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f001 f9da 	bl	80074b8 <HAL_DMA_Start_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fd87 	bl	8005c20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006112:	e00d      	b.n	8006130 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800611c:	e008      	b.n	8006130 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800612a:	e001      	b.n	8006130 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800612c:	2302      	movs	r3, #2
 800612e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40022000 	.word	0x40022000
 8006140:	40022100 	.word	0x40022100
 8006144:	40022300 	.word	0x40022300
 8006148:	58026300 	.word	0x58026300
 800614c:	fffff0fe 	.word	0xfffff0fe
 8006150:	080068c9 	.word	0x080068c9
 8006154:	080069a1 	.word	0x080069a1
 8006158:	080069bd 	.word	0x080069bd

0800615c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b099      	sub	sp, #100	; 0x64
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a99      	ldr	r2, [pc, #612]	; (8006418 <HAL_ADC_ConfigChannel+0x280>)
 80061b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_ADC_ConfigChannel+0x2a>
 80061be:	2302      	movs	r3, #2
 80061c0:	e2e6      	b.n	8006790 <HAL_ADC_ConfigChannel+0x5f8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fd3a 	bl	8005c48 <LL_ADC_REG_IsConversionOngoing>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 82cb 	bne.w	8006772 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d108      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x62>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	0e9b      	lsrs	r3, r3, #26
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2201      	movs	r2, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	e00f      	b.n	800621a <HAL_ADC_ConfigChannel+0x82>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006202:	fa93 f3a3 	rbit	r3, r3
 8006206:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620a:	fab3 f383 	clz	r3, r3
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2201      	movs	r2, #1
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	69d1      	ldr	r1, [r2, #28]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	430b      	orrs	r3, r1
 8006226:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	f7ff fbe6 	bl	8005a06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fd02 	bl	8005c48 <LL_ADC_REG_IsConversionOngoing>
 8006244:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fd0f 	bl	8005c6e <LL_ADC_INJ_IsConversionOngoing>
 8006250:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 80b3 	bne.w	80063c0 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800625a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 80af 	bne.w	80063c0 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	461a      	mov	r2, r3
 8006270:	f7ff fc05 	bl	8005a7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006274:	4b69      	ldr	r3, [pc, #420]	; (800641c <HAL_ADC_ConfigChannel+0x284>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800627c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006280:	d10b      	bne.n	800629a <HAL_ADC_ConfigChannel+0x102>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695a      	ldr	r2, [r3, #20]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	089b      	lsrs	r3, r3, #2
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	e01d      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x13e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x128>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	e00a      	b.n	80062d6 <HAL_ADC_ConfigChannel+0x13e>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d027      	beq.n	8006330 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6919      	ldr	r1, [r3, #16]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ee:	f7ff fb29 	bl	8005944 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6919      	ldr	r1, [r3, #16]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	7e5b      	ldrb	r3, [r3, #25]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d102      	bne.n	8006308 <HAL_ADC_ConfigChannel+0x170>
 8006302:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006306:	e000      	b.n	800630a <HAL_ADC_ConfigChannel+0x172>
 8006308:	2300      	movs	r3, #0
 800630a:	461a      	mov	r2, r3
 800630c:	f7ff fb50 	bl	80059b0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6919      	ldr	r1, [r3, #16]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	7e1b      	ldrb	r3, [r3, #24]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d102      	bne.n	8006326 <HAL_ADC_ConfigChannel+0x18e>
 8006320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006324:	e000      	b.n	8006328 <HAL_ADC_ConfigChannel+0x190>
 8006326:	2300      	movs	r3, #0
 8006328:	461a      	mov	r2, r3
 800632a:	f7ff fb28 	bl	800597e <LL_ADC_SetDataRightShift>
 800632e:	e047      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	069b      	lsls	r3, r3, #26
 8006340:	429a      	cmp	r2, r3
 8006342:	d107      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006352:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	069b      	lsls	r3, r3, #26
 8006364:	429a      	cmp	r2, r3
 8006366:	d107      	bne.n	8006378 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006376:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	069b      	lsls	r3, r3, #26
 8006388:	429a      	cmp	r2, r3
 800638a:	d107      	bne.n	800639c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800639a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	069b      	lsls	r3, r3, #26
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d107      	bne.n	80063c0 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80063be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fc17 	bl	8005bf8 <LL_ADC_IsEnabled>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 81d9 	bne.w	8006784 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7ff fb76 	bl	8005ad0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4a0b      	ldr	r2, [pc, #44]	; (8006418 <HAL_ADC_ConfigChannel+0x280>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	f040 8101 	bne.w	80065f2 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10f      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x288>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	0e9b      	lsrs	r3, r3, #26
 8006406:	3301      	adds	r3, #1
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2b09      	cmp	r3, #9
 800640e:	bf94      	ite	ls
 8006410:	2301      	movls	r3, #1
 8006412:	2300      	movhi	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	e016      	b.n	8006446 <HAL_ADC_ConfigChannel+0x2ae>
 8006418:	47ff0000 	.word	0x47ff0000
 800641c:	5c001000 	.word	0x5c001000
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006428:	fa93 f3a3 	rbit	r3, r3
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800642e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006430:	fab3 f383 	clz	r3, r3
 8006434:	b2db      	uxtb	r3, r3
 8006436:	3301      	adds	r3, #1
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2b09      	cmp	r3, #9
 800643e:	bf94      	ite	ls
 8006440:	2301      	movls	r3, #1
 8006442:	2300      	movhi	r3, #0
 8006444:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006446:	2b00      	cmp	r3, #0
 8006448:	d064      	beq.n	8006514 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_ADC_ConfigChannel+0x2ce>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	0e9b      	lsrs	r3, r3, #26
 800645c:	3301      	adds	r3, #1
 800645e:	069b      	lsls	r3, r3, #26
 8006460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006464:	e00e      	b.n	8006484 <HAL_ADC_ConfigChannel+0x2ec>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	3301      	adds	r3, #1
 800647e:	069b      	lsls	r3, r3, #26
 8006480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x30c>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	0e9b      	lsrs	r3, r3, #26
 8006496:	3301      	adds	r3, #1
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	e010      	b.n	80064c6 <HAL_ADC_ConfigChannel+0x32e>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	fa93 f3a3 	rbit	r3, r3
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	ea42 0103 	orr.w	r1, r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x354>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	0e9b      	lsrs	r3, r3, #26
 80064dc:	3301      	adds	r3, #1
 80064de:	f003 021f 	and.w	r2, r3, #31
 80064e2:	4613      	mov	r3, r2
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	4413      	add	r3, r2
 80064e8:	051b      	lsls	r3, r3, #20
 80064ea:	e011      	b.n	8006510 <HAL_ADC_ConfigChannel+0x378>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	fa93 f3a3 	rbit	r3, r3
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	fab3 f383 	clz	r3, r3
 8006500:	b2db      	uxtb	r3, r3
 8006502:	3301      	adds	r3, #1
 8006504:	f003 021f 	and.w	r2, r3, #31
 8006508:	4613      	mov	r3, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4413      	add	r3, r2
 800650e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006510:	430b      	orrs	r3, r1
 8006512:	e069      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800651c:	2b00      	cmp	r3, #0
 800651e:	d107      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x398>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	0e9b      	lsrs	r3, r3, #26
 8006526:	3301      	adds	r3, #1
 8006528:	069b      	lsls	r3, r3, #26
 800652a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800652e:	e00e      	b.n	800654e <HAL_ADC_ConfigChannel+0x3b6>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	fa93 f3a3 	rbit	r3, r3
 800653c:	61fb      	str	r3, [r7, #28]
  return result;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	fab3 f383 	clz	r3, r3
 8006544:	b2db      	uxtb	r3, r3
 8006546:	3301      	adds	r3, #1
 8006548:	069b      	lsls	r3, r3, #26
 800654a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_ADC_ConfigChannel+0x3d6>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	0e9b      	lsrs	r3, r3, #26
 8006560:	3301      	adds	r3, #1
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	e010      	b.n	8006590 <HAL_ADC_ConfigChannel+0x3f8>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	fa93 f3a3 	rbit	r3, r3
 800657a:	617b      	str	r3, [r7, #20]
  return result;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	fab3 f383 	clz	r3, r3
 8006582:	b2db      	uxtb	r3, r3
 8006584:	3301      	adds	r3, #1
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	2101      	movs	r1, #1
 800658c:	fa01 f303 	lsl.w	r3, r1, r3
 8006590:	ea42 0103 	orr.w	r1, r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x424>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	0e9b      	lsrs	r3, r3, #26
 80065a6:	3301      	adds	r3, #1
 80065a8:	f003 021f 	and.w	r2, r3, #31
 80065ac:	4613      	mov	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4413      	add	r3, r2
 80065b2:	3b1e      	subs	r3, #30
 80065b4:	051b      	lsls	r3, r3, #20
 80065b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065ba:	e014      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x44e>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	fa93 f3a3 	rbit	r3, r3
 80065c8:	60fb      	str	r3, [r7, #12]
  return result;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	fab3 f383 	clz	r3, r3
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	3301      	adds	r3, #1
 80065d4:	f003 021f 	and.w	r2, r3, #31
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	3b1e      	subs	r3, #30
 80065e0:	051b      	lsls	r3, r3, #20
 80065e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065e6:	430b      	orrs	r3, r1
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	6892      	ldr	r2, [r2, #8]
 80065ec:	4619      	mov	r1, r3
 80065ee:	f7ff fa46 	bl	8005a7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f280 80c4 	bge.w	8006784 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a65      	ldr	r2, [pc, #404]	; (8006798 <HAL_ADC_ConfigChannel+0x600>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_ADC_ConfigChannel+0x478>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a64      	ldr	r2, [pc, #400]	; (800679c <HAL_ADC_ConfigChannel+0x604>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x47c>
 8006610:	4b63      	ldr	r3, [pc, #396]	; (80067a0 <HAL_ADC_ConfigChannel+0x608>)
 8006612:	e000      	b.n	8006616 <HAL_ADC_ConfigChannel+0x47e>
 8006614:	4b63      	ldr	r3, [pc, #396]	; (80067a4 <HAL_ADC_ConfigChannel+0x60c>)
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff f986 	bl	8005928 <LL_ADC_GetCommonPathInternalCh>
 800661c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a5d      	ldr	r2, [pc, #372]	; (8006798 <HAL_ADC_ConfigChannel+0x600>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_ADC_ConfigChannel+0x49a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5b      	ldr	r2, [pc, #364]	; (800679c <HAL_ADC_ConfigChannel+0x604>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10e      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x4b8>
 8006632:	4859      	ldr	r0, [pc, #356]	; (8006798 <HAL_ADC_ConfigChannel+0x600>)
 8006634:	f7ff fae0 	bl	8005bf8 <LL_ADC_IsEnabled>
 8006638:	4604      	mov	r4, r0
 800663a:	4858      	ldr	r0, [pc, #352]	; (800679c <HAL_ADC_ConfigChannel+0x604>)
 800663c:	f7ff fadc 	bl	8005bf8 <LL_ADC_IsEnabled>
 8006640:	4603      	mov	r3, r0
 8006642:	4323      	orrs	r3, r4
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	e008      	b.n	8006662 <HAL_ADC_ConfigChannel+0x4ca>
 8006650:	4855      	ldr	r0, [pc, #340]	; (80067a8 <HAL_ADC_ConfigChannel+0x610>)
 8006652:	f7ff fad1 	bl	8005bf8 <LL_ADC_IsEnabled>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf0c      	ite	eq
 800665c:	2301      	moveq	r3, #1
 800665e:	2300      	movne	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d07b      	beq.n	800675e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a50      	ldr	r2, [pc, #320]	; (80067ac <HAL_ADC_ConfigChannel+0x614>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d12e      	bne.n	80066ce <HAL_ADC_ConfigChannel+0x536>
 8006670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d129      	bne.n	80066ce <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_ADC_ConfigChannel+0x610>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d17f      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a43      	ldr	r2, [pc, #268]	; (8006798 <HAL_ADC_ConfigChannel+0x600>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_ADC_ConfigChannel+0x500>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a42      	ldr	r2, [pc, #264]	; (800679c <HAL_ADC_ConfigChannel+0x604>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d101      	bne.n	800669c <HAL_ADC_ConfigChannel+0x504>
 8006698:	4a41      	ldr	r2, [pc, #260]	; (80067a0 <HAL_ADC_ConfigChannel+0x608>)
 800669a:	e000      	b.n	800669e <HAL_ADC_ConfigChannel+0x506>
 800669c:	4a41      	ldr	r2, [pc, #260]	; (80067a4 <HAL_ADC_ConfigChannel+0x60c>)
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7ff f92b 	bl	8005902 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80066ac:	4b40      	ldr	r3, [pc, #256]	; (80067b0 <HAL_ADC_ConfigChannel+0x618>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	4a40      	ldr	r2, [pc, #256]	; (80067b4 <HAL_ADC_ConfigChannel+0x61c>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80066be:	e002      	b.n	80066c6 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f9      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066cc:	e05a      	b.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a39      	ldr	r2, [pc, #228]	; (80067b8 <HAL_ADC_ConfigChannel+0x620>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d11e      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x57e>
 80066d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d119      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a30      	ldr	r2, [pc, #192]	; (80067a8 <HAL_ADC_ConfigChannel+0x610>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d14b      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a29      	ldr	r2, [pc, #164]	; (8006798 <HAL_ADC_ConfigChannel+0x600>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_ADC_ConfigChannel+0x568>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a28      	ldr	r2, [pc, #160]	; (800679c <HAL_ADC_ConfigChannel+0x604>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d101      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x56c>
 8006700:	4a27      	ldr	r2, [pc, #156]	; (80067a0 <HAL_ADC_ConfigChannel+0x608>)
 8006702:	e000      	b.n	8006706 <HAL_ADC_ConfigChannel+0x56e>
 8006704:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <HAL_ADC_ConfigChannel+0x60c>)
 8006706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7ff f8f7 	bl	8005902 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006714:	e036      	b.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a28      	ldr	r2, [pc, #160]	; (80067bc <HAL_ADC_ConfigChannel+0x624>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d131      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
 8006720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d12c      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_ADC_ConfigChannel+0x610>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d127      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <HAL_ADC_ConfigChannel+0x600>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_ADC_ConfigChannel+0x5b0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <HAL_ADC_ConfigChannel+0x604>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_ADC_ConfigChannel+0x5b4>
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <HAL_ADC_ConfigChannel+0x608>)
 800674a:	e000      	b.n	800674e <HAL_ADC_ConfigChannel+0x5b6>
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <HAL_ADC_ConfigChannel+0x60c>)
 800674e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7ff f8d3 	bl	8005902 <LL_ADC_SetCommonPathInternalCh>
 800675c:	e012      	b.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006770:	e008      	b.n	8006784 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800678c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006790:	4618      	mov	r0, r3
 8006792:	3764      	adds	r7, #100	; 0x64
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}
 8006798:	40022000 	.word	0x40022000
 800679c:	40022100 	.word	0x40022100
 80067a0:	40022300 	.word	0x40022300
 80067a4:	58026300 	.word	0x58026300
 80067a8:	58026000 	.word	0x58026000
 80067ac:	cb840000 	.word	0xcb840000
 80067b0:	240000f8 	.word	0x240000f8
 80067b4:	053e2d63 	.word	0x053e2d63
 80067b8:	c7520000 	.word	0xc7520000
 80067bc:	cfb80000 	.word	0xcfb80000

080067c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fa13 	bl	8005bf8 <LL_ADC_IsEnabled>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d167      	bne.n	80068a8 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	4b35      	ldr	r3, [pc, #212]	; (80068b4 <ADC_Enable+0xf4>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f043 0210 	orr.w	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	f043 0201 	orr.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e053      	b.n	80068aa <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f9e2 	bl	8005bd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800680c:	f7ff f816 	bl	800583c <HAL_GetTick>
 8006810:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <ADC_Enable+0xf8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <ADC_Enable+0x66>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a26      	ldr	r2, [pc, #152]	; (80068bc <ADC_Enable+0xfc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d101      	bne.n	800682a <ADC_Enable+0x6a>
 8006826:	4b26      	ldr	r3, [pc, #152]	; (80068c0 <ADC_Enable+0x100>)
 8006828:	e000      	b.n	800682c <ADC_Enable+0x6c>
 800682a:	4b26      	ldr	r3, [pc, #152]	; (80068c4 <ADC_Enable+0x104>)
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff f973 	bl	8005b18 <LL_ADC_GetMultimode>
 8006832:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a20      	ldr	r2, [pc, #128]	; (80068bc <ADC_Enable+0xfc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d002      	beq.n	8006844 <ADC_Enable+0x84>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	e000      	b.n	8006846 <ADC_Enable+0x86>
 8006844:	4b1c      	ldr	r3, [pc, #112]	; (80068b8 <ADC_Enable+0xf8>)
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	4293      	cmp	r3, r2
 800684c:	d025      	beq.n	800689a <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d129      	bne.n	80068a8 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006854:	e021      	b.n	800689a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff f9cc 	bl	8005bf8 <LL_ADC_IsEnabled>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f9b0 	bl	8005bd0 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006870:	f7fe ffe4 	bl	800583c <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d90d      	bls.n	800689a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	f043 0210 	orr.w	r2, r3, #16
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e007      	b.n	80068aa <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d1d6      	bne.n	8006856 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	8000003f 	.word	0x8000003f
 80068b8:	40022000 	.word	0x40022000
 80068bc:	40022100 	.word	0x40022100
 80068c0:	40022300 	.word	0x40022300
 80068c4:	58026300 	.word	0x58026300

080068c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d14b      	bne.n	800697a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d021      	beq.n	8006940 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff f86d 	bl	80059e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d032      	beq.n	8006972 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d12b      	bne.n	8006972 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d11f      	bne.n	8006972 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
 800693e:	e018      	b.n	8006972 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d111      	bne.n	8006972 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d105      	bne.n	8006972 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fbf2 	bl	800615c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006978:	e00e      	b.n	8006998 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fbfc 	bl	8006184 <HAL_ADC_ErrorCallback>
}
 800698c:	e004      	b.n	8006998 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fbde 	bl	8006170 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff fbce 	bl	8006184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a70      	ldr	r2, [pc, #448]	; (8006bc0 <ADC_ConfigureBoostMode+0x1d0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <ADC_ConfigureBoostMode+0x1c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a6f      	ldr	r2, [pc, #444]	; (8006bc4 <ADC_ConfigureBoostMode+0x1d4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d109      	bne.n	8006a20 <ADC_ConfigureBoostMode+0x30>
 8006a0c:	4b6e      	ldr	r3, [pc, #440]	; (8006bc8 <ADC_ConfigureBoostMode+0x1d8>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf14      	ite	ne
 8006a18:	2301      	movne	r3, #1
 8006a1a:	2300      	moveq	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	e008      	b.n	8006a32 <ADC_ConfigureBoostMode+0x42>
 8006a20:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <ADC_ConfigureBoostMode+0x1dc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01a      	beq.n	8006a6c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a36:	f004 f929 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 8006a3a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a44:	d006      	beq.n	8006a54 <ADC_ConfigureBoostMode+0x64>
 8006a46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a4a:	d00b      	beq.n	8006a64 <ADC_ConfigureBoostMode+0x74>
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a50:	d000      	beq.n	8006a54 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8006a52:	e05d      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	60fb      	str	r3, [r7, #12]
        break;
 8006a62:	e055      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	089b      	lsrs	r3, r3, #2
 8006a68:	60fb      	str	r3, [r7, #12]
        break;
 8006a6a:	e051      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a70:	f005 f846 	bl	800bb00 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a74:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a7e:	d02a      	beq.n	8006ad6 <ADC_ConfigureBoostMode+0xe6>
 8006a80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006a84:	d813      	bhi.n	8006aae <ADC_ConfigureBoostMode+0xbe>
 8006a86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a8a:	d024      	beq.n	8006ad6 <ADC_ConfigureBoostMode+0xe6>
 8006a8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a90:	d806      	bhi.n	8006aa0 <ADC_ConfigureBoostMode+0xb0>
 8006a92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a96:	d01e      	beq.n	8006ad6 <ADC_ConfigureBoostMode+0xe6>
 8006a98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a9c:	d01b      	beq.n	8006ad6 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8006a9e:	e037      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8006aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa4:	d017      	beq.n	8006ad6 <ADC_ConfigureBoostMode+0xe6>
 8006aa6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006aaa:	d014      	beq.n	8006ad6 <ADC_ConfigureBoostMode+0xe6>
        break;
 8006aac:	e030      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8006aae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ab2:	d021      	beq.n	8006af8 <ADC_ConfigureBoostMode+0x108>
 8006ab4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ab8:	d806      	bhi.n	8006ac8 <ADC_ConfigureBoostMode+0xd8>
 8006aba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006abe:	d013      	beq.n	8006ae8 <ADC_ConfigureBoostMode+0xf8>
 8006ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ac4:	d014      	beq.n	8006af0 <ADC_ConfigureBoostMode+0x100>
        break;
 8006ac6:	e023      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8006ac8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006acc:	d018      	beq.n	8006b00 <ADC_ConfigureBoostMode+0x110>
 8006ace:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ad2:	d019      	beq.n	8006b08 <ADC_ConfigureBoostMode+0x118>
        break;
 8006ad4:	e01c      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	0c9b      	lsrs	r3, r3, #18
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae4:	60fb      	str	r3, [r7, #12]
        break;
 8006ae6:	e013      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	60fb      	str	r3, [r7, #12]
      break;
 8006aee:	e00f      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	60fb      	str	r3, [r7, #12]
        break;
 8006af6:	e00b      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	099b      	lsrs	r3, r3, #6
 8006afc:	60fb      	str	r3, [r7, #12]
        break;
 8006afe:	e007      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	09db      	lsrs	r3, r3, #7
 8006b04:	60fb      	str	r3, [r7, #12]
        break;
 8006b06:	e003      	b.n	8006b10 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	60fb      	str	r3, [r7, #12]
        break;
 8006b0e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b10:	f7fe fec2 	bl	8005898 <HAL_GetREVID>
 8006b14:	4602      	mov	r2, r0
 8006b16:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d815      	bhi.n	8006b4a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <ADC_ConfigureBoostMode+0x1e0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d908      	bls.n	8006b38 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b34:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006b36:	e03e      	b.n	8006bb6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b46:	609a      	str	r2, [r3, #8]
}
 8006b48:	e035      	b.n	8006bb6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <ADC_ConfigureBoostMode+0x1e4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d808      	bhi.n	8006b6a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	e025      	b.n	8006bb6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <ADC_ConfigureBoostMode+0x1e8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d80a      	bhi.n	8006b88 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b84:	609a      	str	r2, [r3, #8]
}
 8006b86:	e016      	b.n	8006bb6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a14      	ldr	r2, [pc, #80]	; (8006bdc <ADC_ConfigureBoostMode+0x1ec>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d80a      	bhi.n	8006ba6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba2:	609a      	str	r2, [r3, #8]
}
 8006ba4:	e007      	b.n	8006bb6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006bb4:	609a      	str	r2, [r3, #8]
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40022000 	.word	0x40022000
 8006bc4:	40022100 	.word	0x40022100
 8006bc8:	40022300 	.word	0x40022300
 8006bcc:	58026300 	.word	0x58026300
 8006bd0:	01312d00 	.word	0x01312d00
 8006bd4:	005f5e10 	.word	0x005f5e10
 8006bd8:	00bebc20 	.word	0x00bebc20
 8006bdc:	017d7840 	.word	0x017d7840

08006be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <__NVIC_SetPriorityGrouping+0x40>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <__NVIC_SetPriorityGrouping+0x44>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c0e:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <__NVIC_SetPriorityGrouping+0x40>)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	60d3      	str	r3, [r2, #12]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000ed00 	.word	0xe000ed00
 8006c24:	05fa0000 	.word	0x05fa0000

08006c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <__NVIC_GetPriorityGrouping+0x18>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	f003 0307 	and.w	r3, r3, #7
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	e000ed00 	.word	0xe000ed00

08006c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	db0b      	blt.n	8006c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	f003 021f 	and.w	r2, r3, #31
 8006c5c:	4907      	ldr	r1, [pc, #28]	; (8006c7c <__NVIC_EnableIRQ+0x38>)
 8006c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	2001      	movs	r0, #1
 8006c66:	fa00 f202 	lsl.w	r2, r0, r2
 8006c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	e000e100 	.word	0xe000e100

08006c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	db0a      	blt.n	8006caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	490c      	ldr	r1, [pc, #48]	; (8006ccc <__NVIC_SetPriority+0x4c>)
 8006c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c9e:	0112      	lsls	r2, r2, #4
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ca8:	e00a      	b.n	8006cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4908      	ldr	r1, [pc, #32]	; (8006cd0 <__NVIC_SetPriority+0x50>)
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	0112      	lsls	r2, r2, #4
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	761a      	strb	r2, [r3, #24]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000e100 	.word	0xe000e100
 8006cd0:	e000ed00 	.word	0xe000ed00

08006cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f1c3 0307 	rsb	r3, r3, #7
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	bf28      	it	cs
 8006cf2:	2304      	movcs	r3, #4
 8006cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	2b06      	cmp	r3, #6
 8006cfc:	d902      	bls.n	8006d04 <NVIC_EncodePriority+0x30>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3b03      	subs	r3, #3
 8006d02:	e000      	b.n	8006d06 <NVIC_EncodePriority+0x32>
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	43da      	mvns	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	401a      	ands	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	43d9      	mvns	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d2c:	4313      	orrs	r3, r2
         );
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3724      	adds	r7, #36	; 0x24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d4c:	d301      	bcc.n	8006d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e00f      	b.n	8006d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <SysTick_Config+0x40>)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d5a:	210f      	movs	r1, #15
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	f7ff ff8e 	bl	8006c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <SysTick_Config+0x40>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d6a:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <SysTick_Config+0x40>)
 8006d6c:	2207      	movs	r2, #7
 8006d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	e000e010 	.word	0xe000e010

08006d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff29 	bl	8006be0 <__NVIC_SetPriorityGrouping>
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006da4:	f7ff ff40 	bl	8006c28 <__NVIC_GetPriorityGrouping>
 8006da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	6978      	ldr	r0, [r7, #20]
 8006db0:	f7ff ff90 	bl	8006cd4 <NVIC_EncodePriority>
 8006db4:	4602      	mov	r2, r0
 8006db6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff5f 	bl	8006c80 <__NVIC_SetPriority>
}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff ff33 	bl	8006c44 <__NVIC_EnableIRQ>
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ffa4 	bl	8006d3c <SysTick_Config>
 8006df4:	4603      	mov	r3, r0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006e08:	f7fe fd18 	bl	800583c <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e316      	b.n	8007446 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a66      	ldr	r2, [pc, #408]	; (8006fb8 <HAL_DMA_Init+0x1b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d04a      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a65      	ldr	r2, [pc, #404]	; (8006fbc <HAL_DMA_Init+0x1bc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d045      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a63      	ldr	r2, [pc, #396]	; (8006fc0 <HAL_DMA_Init+0x1c0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d040      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a62      	ldr	r2, [pc, #392]	; (8006fc4 <HAL_DMA_Init+0x1c4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d03b      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a60      	ldr	r2, [pc, #384]	; (8006fc8 <HAL_DMA_Init+0x1c8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d036      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5f      	ldr	r2, [pc, #380]	; (8006fcc <HAL_DMA_Init+0x1cc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d031      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5d      	ldr	r2, [pc, #372]	; (8006fd0 <HAL_DMA_Init+0x1d0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02c      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a5c      	ldr	r2, [pc, #368]	; (8006fd4 <HAL_DMA_Init+0x1d4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d027      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5a      	ldr	r2, [pc, #360]	; (8006fd8 <HAL_DMA_Init+0x1d8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d022      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a59      	ldr	r2, [pc, #356]	; (8006fdc <HAL_DMA_Init+0x1dc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d01d      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a57      	ldr	r2, [pc, #348]	; (8006fe0 <HAL_DMA_Init+0x1e0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d018      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a56      	ldr	r2, [pc, #344]	; (8006fe4 <HAL_DMA_Init+0x1e4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a54      	ldr	r2, [pc, #336]	; (8006fe8 <HAL_DMA_Init+0x1e8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00e      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a53      	ldr	r2, [pc, #332]	; (8006fec <HAL_DMA_Init+0x1ec>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a51      	ldr	r2, [pc, #324]	; (8006ff0 <HAL_DMA_Init+0x1f0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <HAL_DMA_Init+0xb8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a50      	ldr	r2, [pc, #320]	; (8006ff4 <HAL_DMA_Init+0x1f4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <HAL_DMA_Init+0xbc>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <HAL_DMA_Init+0xbe>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 813b 	beq.w	800713a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a37      	ldr	r2, [pc, #220]	; (8006fb8 <HAL_DMA_Init+0x1b8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d04a      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a36      	ldr	r2, [pc, #216]	; (8006fbc <HAL_DMA_Init+0x1bc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d045      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a34      	ldr	r2, [pc, #208]	; (8006fc0 <HAL_DMA_Init+0x1c0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d040      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a33      	ldr	r2, [pc, #204]	; (8006fc4 <HAL_DMA_Init+0x1c4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d03b      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a31      	ldr	r2, [pc, #196]	; (8006fc8 <HAL_DMA_Init+0x1c8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d036      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a30      	ldr	r2, [pc, #192]	; (8006fcc <HAL_DMA_Init+0x1cc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d031      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <HAL_DMA_Init+0x1d0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02c      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <HAL_DMA_Init+0x1d4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d027      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a2b      	ldr	r2, [pc, #172]	; (8006fd8 <HAL_DMA_Init+0x1d8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d022      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <HAL_DMA_Init+0x1dc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01d      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <HAL_DMA_Init+0x1e0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d018      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <HAL_DMA_Init+0x1e4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a25      	ldr	r2, [pc, #148]	; (8006fe8 <HAL_DMA_Init+0x1e8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00e      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a24      	ldr	r2, [pc, #144]	; (8006fec <HAL_DMA_Init+0x1ec>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d009      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <HAL_DMA_Init+0x1f0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <HAL_DMA_Init+0x174>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <HAL_DMA_Init+0x1f4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d108      	bne.n	8006f86 <HAL_DMA_Init+0x186>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	e007      	b.n	8006f96 <HAL_DMA_Init+0x196>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f96:	e02f      	b.n	8006ff8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f98:	f7fe fc50 	bl	800583c <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b05      	cmp	r3, #5
 8006fa4:	d928      	bls.n	8006ff8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2203      	movs	r2, #3
 8006fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e246      	b.n	8007446 <HAL_DMA_Init+0x646>
 8006fb8:	40020010 	.word	0x40020010
 8006fbc:	40020028 	.word	0x40020028
 8006fc0:	40020040 	.word	0x40020040
 8006fc4:	40020058 	.word	0x40020058
 8006fc8:	40020070 	.word	0x40020070
 8006fcc:	40020088 	.word	0x40020088
 8006fd0:	400200a0 	.word	0x400200a0
 8006fd4:	400200b8 	.word	0x400200b8
 8006fd8:	40020410 	.word	0x40020410
 8006fdc:	40020428 	.word	0x40020428
 8006fe0:	40020440 	.word	0x40020440
 8006fe4:	40020458 	.word	0x40020458
 8006fe8:	40020470 	.word	0x40020470
 8006fec:	40020488 	.word	0x40020488
 8006ff0:	400204a0 	.word	0x400204a0
 8006ff4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1c8      	bne.n	8006f98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4b83      	ldr	r3, [pc, #524]	; (8007220 <HAL_DMA_Init+0x420>)
 8007012:	4013      	ands	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800701e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800702a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007036:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2b04      	cmp	r3, #4
 800704a:	d107      	bne.n	800705c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	4313      	orrs	r3, r2
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800705c:	4b71      	ldr	r3, [pc, #452]	; (8007224 <HAL_DMA_Init+0x424>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b71      	ldr	r3, [pc, #452]	; (8007228 <HAL_DMA_Init+0x428>)
 8007062:	4013      	ands	r3, r2
 8007064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007068:	d328      	bcc.n	80070bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b28      	cmp	r3, #40	; 0x28
 8007070:	d903      	bls.n	800707a <HAL_DMA_Init+0x27a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b2e      	cmp	r3, #46	; 0x2e
 8007078:	d917      	bls.n	80070aa <HAL_DMA_Init+0x2aa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b3e      	cmp	r3, #62	; 0x3e
 8007080:	d903      	bls.n	800708a <HAL_DMA_Init+0x28a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b42      	cmp	r3, #66	; 0x42
 8007088:	d90f      	bls.n	80070aa <HAL_DMA_Init+0x2aa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b46      	cmp	r3, #70	; 0x46
 8007090:	d903      	bls.n	800709a <HAL_DMA_Init+0x29a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b48      	cmp	r3, #72	; 0x48
 8007098:	d907      	bls.n	80070aa <HAL_DMA_Init+0x2aa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b4e      	cmp	r3, #78	; 0x4e
 80070a0:	d905      	bls.n	80070ae <HAL_DMA_Init+0x2ae>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b52      	cmp	r3, #82	; 0x52
 80070a8:	d801      	bhi.n	80070ae <HAL_DMA_Init+0x2ae>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <HAL_DMA_Init+0x2b0>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0307 	bic.w	r3, r3, #7
 80070d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d117      	bne.n	8007116 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00e      	beq.n	8007116 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f002 f813 	bl	8009124 <DMA_CheckFifoParam>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2240      	movs	r2, #64	; 0x40
 8007108:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e197      	b.n	8007446 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 ff4e 	bl	8008fc0 <DMA_CalcBaseAndBitshift>
 8007124:	4603      	mov	r3, r0
 8007126:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	223f      	movs	r2, #63	; 0x3f
 8007132:	409a      	lsls	r2, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
 8007138:	e0cd      	b.n	80072d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a3b      	ldr	r2, [pc, #236]	; (800722c <HAL_DMA_Init+0x42c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d022      	beq.n	800718a <HAL_DMA_Init+0x38a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a39      	ldr	r2, [pc, #228]	; (8007230 <HAL_DMA_Init+0x430>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01d      	beq.n	800718a <HAL_DMA_Init+0x38a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a38      	ldr	r2, [pc, #224]	; (8007234 <HAL_DMA_Init+0x434>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d018      	beq.n	800718a <HAL_DMA_Init+0x38a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a36      	ldr	r2, [pc, #216]	; (8007238 <HAL_DMA_Init+0x438>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d013      	beq.n	800718a <HAL_DMA_Init+0x38a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a35      	ldr	r2, [pc, #212]	; (800723c <HAL_DMA_Init+0x43c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00e      	beq.n	800718a <HAL_DMA_Init+0x38a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a33      	ldr	r2, [pc, #204]	; (8007240 <HAL_DMA_Init+0x440>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d009      	beq.n	800718a <HAL_DMA_Init+0x38a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a32      	ldr	r2, [pc, #200]	; (8007244 <HAL_DMA_Init+0x444>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d004      	beq.n	800718a <HAL_DMA_Init+0x38a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a30      	ldr	r2, [pc, #192]	; (8007248 <HAL_DMA_Init+0x448>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d101      	bne.n	800718e <HAL_DMA_Init+0x38e>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <HAL_DMA_Init+0x390>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8097 	beq.w	80072c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a24      	ldr	r2, [pc, #144]	; (800722c <HAL_DMA_Init+0x42c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d021      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a22      	ldr	r2, [pc, #136]	; (8007230 <HAL_DMA_Init+0x430>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01c      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a21      	ldr	r2, [pc, #132]	; (8007234 <HAL_DMA_Init+0x434>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d017      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <HAL_DMA_Init+0x438>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d012      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1e      	ldr	r2, [pc, #120]	; (800723c <HAL_DMA_Init+0x43c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00d      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <HAL_DMA_Init+0x440>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d008      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_DMA_Init+0x444>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <HAL_DMA_Init+0x3e4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <HAL_DMA_Init+0x448>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4b12      	ldr	r3, [pc, #72]	; (800724c <HAL_DMA_Init+0x44c>)
 8007202:	4013      	ands	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d020      	beq.n	8007250 <HAL_DMA_Init+0x450>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b80      	cmp	r3, #128	; 0x80
 8007214:	d102      	bne.n	800721c <HAL_DMA_Init+0x41c>
 8007216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800721a:	e01a      	b.n	8007252 <HAL_DMA_Init+0x452>
 800721c:	2300      	movs	r3, #0
 800721e:	e018      	b.n	8007252 <HAL_DMA_Init+0x452>
 8007220:	fe10803f 	.word	0xfe10803f
 8007224:	5c001000 	.word	0x5c001000
 8007228:	ffff0000 	.word	0xffff0000
 800722c:	58025408 	.word	0x58025408
 8007230:	5802541c 	.word	0x5802541c
 8007234:	58025430 	.word	0x58025430
 8007238:	58025444 	.word	0x58025444
 800723c:	58025458 	.word	0x58025458
 8007240:	5802546c 	.word	0x5802546c
 8007244:	58025480 	.word	0x58025480
 8007248:	58025494 	.word	0x58025494
 800724c:	fffe000f 	.word	0xfffe000f
 8007250:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68d2      	ldr	r2, [r2, #12]
 8007256:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007258:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007260:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007268:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007270:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007278:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007280:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	4b6e      	ldr	r3, [pc, #440]	; (8007450 <HAL_DMA_Init+0x650>)
 8007298:	4413      	add	r3, r2
 800729a:	4a6e      	ldr	r2, [pc, #440]	; (8007454 <HAL_DMA_Init+0x654>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	091b      	lsrs	r3, r3, #4
 80072a2:	009a      	lsls	r2, r3, #2
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 fe89 	bl	8008fc0 <DMA_CalcBaseAndBitshift>
 80072ae:	4603      	mov	r3, r0
 80072b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	2201      	movs	r2, #1
 80072bc:	409a      	lsls	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	e008      	b.n	80072d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2240      	movs	r2, #64	; 0x40
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0b7      	b.n	8007446 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a5f      	ldr	r2, [pc, #380]	; (8007458 <HAL_DMA_Init+0x658>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d072      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5d      	ldr	r2, [pc, #372]	; (800745c <HAL_DMA_Init+0x65c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d06d      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a5c      	ldr	r2, [pc, #368]	; (8007460 <HAL_DMA_Init+0x660>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d068      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a5a      	ldr	r2, [pc, #360]	; (8007464 <HAL_DMA_Init+0x664>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d063      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a59      	ldr	r2, [pc, #356]	; (8007468 <HAL_DMA_Init+0x668>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d05e      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a57      	ldr	r2, [pc, #348]	; (800746c <HAL_DMA_Init+0x66c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d059      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a56      	ldr	r2, [pc, #344]	; (8007470 <HAL_DMA_Init+0x670>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d054      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a54      	ldr	r2, [pc, #336]	; (8007474 <HAL_DMA_Init+0x674>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d04f      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a53      	ldr	r2, [pc, #332]	; (8007478 <HAL_DMA_Init+0x678>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d04a      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a51      	ldr	r2, [pc, #324]	; (800747c <HAL_DMA_Init+0x67c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d045      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a50      	ldr	r2, [pc, #320]	; (8007480 <HAL_DMA_Init+0x680>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d040      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a4e      	ldr	r2, [pc, #312]	; (8007484 <HAL_DMA_Init+0x684>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d03b      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a4d      	ldr	r2, [pc, #308]	; (8007488 <HAL_DMA_Init+0x688>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d036      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a4b      	ldr	r2, [pc, #300]	; (800748c <HAL_DMA_Init+0x68c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d031      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4a      	ldr	r2, [pc, #296]	; (8007490 <HAL_DMA_Init+0x690>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d02c      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a48      	ldr	r2, [pc, #288]	; (8007494 <HAL_DMA_Init+0x694>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d027      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a47      	ldr	r2, [pc, #284]	; (8007498 <HAL_DMA_Init+0x698>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d022      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a45      	ldr	r2, [pc, #276]	; (800749c <HAL_DMA_Init+0x69c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01d      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a44      	ldr	r2, [pc, #272]	; (80074a0 <HAL_DMA_Init+0x6a0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d018      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a42      	ldr	r2, [pc, #264]	; (80074a4 <HAL_DMA_Init+0x6a4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a41      	ldr	r2, [pc, #260]	; (80074a8 <HAL_DMA_Init+0x6a8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00e      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a3f      	ldr	r2, [pc, #252]	; (80074ac <HAL_DMA_Init+0x6ac>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d009      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a3e      	ldr	r2, [pc, #248]	; (80074b0 <HAL_DMA_Init+0x6b0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d004      	beq.n	80073c6 <HAL_DMA_Init+0x5c6>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3c      	ldr	r2, [pc, #240]	; (80074b4 <HAL_DMA_Init+0x6b4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d101      	bne.n	80073ca <HAL_DMA_Init+0x5ca>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <HAL_DMA_Init+0x5cc>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d032      	beq.n	8007436 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 ff23 	bl	800921c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	2b80      	cmp	r3, #128	; 0x80
 80073dc:	d102      	bne.n	80073e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d010      	beq.n	8007424 <HAL_DMA_Init+0x624>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b08      	cmp	r3, #8
 8007408:	d80c      	bhi.n	8007424 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 ffa0 	bl	8009350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	e008      	b.n	8007436 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	a7fdabf8 	.word	0xa7fdabf8
 8007454:	cccccccd 	.word	0xcccccccd
 8007458:	40020010 	.word	0x40020010
 800745c:	40020028 	.word	0x40020028
 8007460:	40020040 	.word	0x40020040
 8007464:	40020058 	.word	0x40020058
 8007468:	40020070 	.word	0x40020070
 800746c:	40020088 	.word	0x40020088
 8007470:	400200a0 	.word	0x400200a0
 8007474:	400200b8 	.word	0x400200b8
 8007478:	40020410 	.word	0x40020410
 800747c:	40020428 	.word	0x40020428
 8007480:	40020440 	.word	0x40020440
 8007484:	40020458 	.word	0x40020458
 8007488:	40020470 	.word	0x40020470
 800748c:	40020488 	.word	0x40020488
 8007490:	400204a0 	.word	0x400204a0
 8007494:	400204b8 	.word	0x400204b8
 8007498:	58025408 	.word	0x58025408
 800749c:	5802541c 	.word	0x5802541c
 80074a0:	58025430 	.word	0x58025430
 80074a4:	58025444 	.word	0x58025444
 80074a8:	58025458 	.word	0x58025458
 80074ac:	5802546c 	.word	0x5802546c
 80074b0:	58025480 	.word	0x58025480
 80074b4:	58025494 	.word	0x58025494

080074b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e226      	b.n	8007922 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_DMA_Start_IT+0x2a>
 80074de:	2302      	movs	r3, #2
 80074e0:	e21f      	b.n	8007922 <HAL_DMA_Start_IT+0x46a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	f040 820a 	bne.w	800790c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a68      	ldr	r2, [pc, #416]	; (80076ac <HAL_DMA_Start_IT+0x1f4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d04a      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a66      	ldr	r2, [pc, #408]	; (80076b0 <HAL_DMA_Start_IT+0x1f8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d045      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a65      	ldr	r2, [pc, #404]	; (80076b4 <HAL_DMA_Start_IT+0x1fc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d040      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a63      	ldr	r2, [pc, #396]	; (80076b8 <HAL_DMA_Start_IT+0x200>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d03b      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a62      	ldr	r2, [pc, #392]	; (80076bc <HAL_DMA_Start_IT+0x204>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d036      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a60      	ldr	r2, [pc, #384]	; (80076c0 <HAL_DMA_Start_IT+0x208>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d031      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a5f      	ldr	r2, [pc, #380]	; (80076c4 <HAL_DMA_Start_IT+0x20c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d02c      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a5d      	ldr	r2, [pc, #372]	; (80076c8 <HAL_DMA_Start_IT+0x210>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d027      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a5c      	ldr	r2, [pc, #368]	; (80076cc <HAL_DMA_Start_IT+0x214>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d022      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a5a      	ldr	r2, [pc, #360]	; (80076d0 <HAL_DMA_Start_IT+0x218>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01d      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a59      	ldr	r2, [pc, #356]	; (80076d4 <HAL_DMA_Start_IT+0x21c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d018      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a57      	ldr	r2, [pc, #348]	; (80076d8 <HAL_DMA_Start_IT+0x220>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a56      	ldr	r2, [pc, #344]	; (80076dc <HAL_DMA_Start_IT+0x224>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00e      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a54      	ldr	r2, [pc, #336]	; (80076e0 <HAL_DMA_Start_IT+0x228>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d009      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a53      	ldr	r2, [pc, #332]	; (80076e4 <HAL_DMA_Start_IT+0x22c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d004      	beq.n	80075a6 <HAL_DMA_Start_IT+0xee>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a51      	ldr	r2, [pc, #324]	; (80076e8 <HAL_DMA_Start_IT+0x230>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d108      	bne.n	80075b8 <HAL_DMA_Start_IT+0x100>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0201 	bic.w	r2, r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e007      	b.n	80075c8 <HAL_DMA_Start_IT+0x110>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 fb4a 	bl	8008c68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a34      	ldr	r2, [pc, #208]	; (80076ac <HAL_DMA_Start_IT+0x1f4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d04a      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a33      	ldr	r2, [pc, #204]	; (80076b0 <HAL_DMA_Start_IT+0x1f8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d045      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a31      	ldr	r2, [pc, #196]	; (80076b4 <HAL_DMA_Start_IT+0x1fc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d040      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a30      	ldr	r2, [pc, #192]	; (80076b8 <HAL_DMA_Start_IT+0x200>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d03b      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a2e      	ldr	r2, [pc, #184]	; (80076bc <HAL_DMA_Start_IT+0x204>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d036      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a2d      	ldr	r2, [pc, #180]	; (80076c0 <HAL_DMA_Start_IT+0x208>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d031      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2b      	ldr	r2, [pc, #172]	; (80076c4 <HAL_DMA_Start_IT+0x20c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d02c      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2a      	ldr	r2, [pc, #168]	; (80076c8 <HAL_DMA_Start_IT+0x210>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d027      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a28      	ldr	r2, [pc, #160]	; (80076cc <HAL_DMA_Start_IT+0x214>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a27      	ldr	r2, [pc, #156]	; (80076d0 <HAL_DMA_Start_IT+0x218>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01d      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a25      	ldr	r2, [pc, #148]	; (80076d4 <HAL_DMA_Start_IT+0x21c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <HAL_DMA_Start_IT+0x220>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a22      	ldr	r2, [pc, #136]	; (80076dc <HAL_DMA_Start_IT+0x224>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a21      	ldr	r2, [pc, #132]	; (80076e0 <HAL_DMA_Start_IT+0x228>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1f      	ldr	r2, [pc, #124]	; (80076e4 <HAL_DMA_Start_IT+0x22c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_DMA_Start_IT+0x1bc>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <HAL_DMA_Start_IT+0x230>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d101      	bne.n	8007678 <HAL_DMA_Start_IT+0x1c0>
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <HAL_DMA_Start_IT+0x1c2>
 8007678:	2300      	movs	r3, #0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d036      	beq.n	80076ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f023 021e 	bic.w	r2, r3, #30
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0216 	orr.w	r2, r2, #22
 8007690:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d03e      	beq.n	8007718 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e035      	b.n	8007718 <HAL_DMA_Start_IT+0x260>
 80076ac:	40020010 	.word	0x40020010
 80076b0:	40020028 	.word	0x40020028
 80076b4:	40020040 	.word	0x40020040
 80076b8:	40020058 	.word	0x40020058
 80076bc:	40020070 	.word	0x40020070
 80076c0:	40020088 	.word	0x40020088
 80076c4:	400200a0 	.word	0x400200a0
 80076c8:	400200b8 	.word	0x400200b8
 80076cc:	40020410 	.word	0x40020410
 80076d0:	40020428 	.word	0x40020428
 80076d4:	40020440 	.word	0x40020440
 80076d8:	40020458 	.word	0x40020458
 80076dc:	40020470 	.word	0x40020470
 80076e0:	40020488 	.word	0x40020488
 80076e4:	400204a0 	.word	0x400204a0
 80076e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f023 020e 	bic.w	r2, r3, #14
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 020a 	orr.w	r2, r2, #10
 80076fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0204 	orr.w	r2, r2, #4
 8007716:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a83      	ldr	r2, [pc, #524]	; (800792c <HAL_DMA_Start_IT+0x474>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d072      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a82      	ldr	r2, [pc, #520]	; (8007930 <HAL_DMA_Start_IT+0x478>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d06d      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a80      	ldr	r2, [pc, #512]	; (8007934 <HAL_DMA_Start_IT+0x47c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d068      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7f      	ldr	r2, [pc, #508]	; (8007938 <HAL_DMA_Start_IT+0x480>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d063      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_DMA_Start_IT+0x484>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d05e      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a7c      	ldr	r2, [pc, #496]	; (8007940 <HAL_DMA_Start_IT+0x488>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d059      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a7a      	ldr	r2, [pc, #488]	; (8007944 <HAL_DMA_Start_IT+0x48c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d054      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a79      	ldr	r2, [pc, #484]	; (8007948 <HAL_DMA_Start_IT+0x490>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d04f      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a77      	ldr	r2, [pc, #476]	; (800794c <HAL_DMA_Start_IT+0x494>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d04a      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a76      	ldr	r2, [pc, #472]	; (8007950 <HAL_DMA_Start_IT+0x498>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d045      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a74      	ldr	r2, [pc, #464]	; (8007954 <HAL_DMA_Start_IT+0x49c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d040      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a73      	ldr	r2, [pc, #460]	; (8007958 <HAL_DMA_Start_IT+0x4a0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d03b      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a71      	ldr	r2, [pc, #452]	; (800795c <HAL_DMA_Start_IT+0x4a4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d036      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a70      	ldr	r2, [pc, #448]	; (8007960 <HAL_DMA_Start_IT+0x4a8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d031      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6e      	ldr	r2, [pc, #440]	; (8007964 <HAL_DMA_Start_IT+0x4ac>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02c      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6d      	ldr	r2, [pc, #436]	; (8007968 <HAL_DMA_Start_IT+0x4b0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d027      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a6b      	ldr	r2, [pc, #428]	; (800796c <HAL_DMA_Start_IT+0x4b4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d022      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a6a      	ldr	r2, [pc, #424]	; (8007970 <HAL_DMA_Start_IT+0x4b8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d01d      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a68      	ldr	r2, [pc, #416]	; (8007974 <HAL_DMA_Start_IT+0x4bc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a67      	ldr	r2, [pc, #412]	; (8007978 <HAL_DMA_Start_IT+0x4c0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a65      	ldr	r2, [pc, #404]	; (800797c <HAL_DMA_Start_IT+0x4c4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a64      	ldr	r2, [pc, #400]	; (8007980 <HAL_DMA_Start_IT+0x4c8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a62      	ldr	r2, [pc, #392]	; (8007984 <HAL_DMA_Start_IT+0x4cc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_DMA_Start_IT+0x350>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a61      	ldr	r2, [pc, #388]	; (8007988 <HAL_DMA_Start_IT+0x4d0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d101      	bne.n	800780c <HAL_DMA_Start_IT+0x354>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <HAL_DMA_Start_IT+0x356>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01a      	beq.n	8007848 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d007      	beq.n	8007830 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007846:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a37      	ldr	r2, [pc, #220]	; (800792c <HAL_DMA_Start_IT+0x474>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d04a      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a36      	ldr	r2, [pc, #216]	; (8007930 <HAL_DMA_Start_IT+0x478>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d045      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a34      	ldr	r2, [pc, #208]	; (8007934 <HAL_DMA_Start_IT+0x47c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d040      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a33      	ldr	r2, [pc, #204]	; (8007938 <HAL_DMA_Start_IT+0x480>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d03b      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a31      	ldr	r2, [pc, #196]	; (800793c <HAL_DMA_Start_IT+0x484>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d036      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a30      	ldr	r2, [pc, #192]	; (8007940 <HAL_DMA_Start_IT+0x488>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d031      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a2e      	ldr	r2, [pc, #184]	; (8007944 <HAL_DMA_Start_IT+0x48c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d02c      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a2d      	ldr	r2, [pc, #180]	; (8007948 <HAL_DMA_Start_IT+0x490>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d027      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a2b      	ldr	r2, [pc, #172]	; (800794c <HAL_DMA_Start_IT+0x494>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d022      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a2a      	ldr	r2, [pc, #168]	; (8007950 <HAL_DMA_Start_IT+0x498>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d01d      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a28      	ldr	r2, [pc, #160]	; (8007954 <HAL_DMA_Start_IT+0x49c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d018      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a27      	ldr	r2, [pc, #156]	; (8007958 <HAL_DMA_Start_IT+0x4a0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d013      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a25      	ldr	r2, [pc, #148]	; (800795c <HAL_DMA_Start_IT+0x4a4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00e      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a24      	ldr	r2, [pc, #144]	; (8007960 <HAL_DMA_Start_IT+0x4a8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d009      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a22      	ldr	r2, [pc, #136]	; (8007964 <HAL_DMA_Start_IT+0x4ac>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d004      	beq.n	80078e8 <HAL_DMA_Start_IT+0x430>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a21      	ldr	r2, [pc, #132]	; (8007968 <HAL_DMA_Start_IT+0x4b0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d108      	bne.n	80078fa <HAL_DMA_Start_IT+0x442>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e012      	b.n	8007920 <HAL_DMA_Start_IT+0x468>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0201 	orr.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	e009      	b.n	8007920 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800791a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40020010 	.word	0x40020010
 8007930:	40020028 	.word	0x40020028
 8007934:	40020040 	.word	0x40020040
 8007938:	40020058 	.word	0x40020058
 800793c:	40020070 	.word	0x40020070
 8007940:	40020088 	.word	0x40020088
 8007944:	400200a0 	.word	0x400200a0
 8007948:	400200b8 	.word	0x400200b8
 800794c:	40020410 	.word	0x40020410
 8007950:	40020428 	.word	0x40020428
 8007954:	40020440 	.word	0x40020440
 8007958:	40020458 	.word	0x40020458
 800795c:	40020470 	.word	0x40020470
 8007960:	40020488 	.word	0x40020488
 8007964:	400204a0 	.word	0x400204a0
 8007968:	400204b8 	.word	0x400204b8
 800796c:	58025408 	.word	0x58025408
 8007970:	5802541c 	.word	0x5802541c
 8007974:	58025430 	.word	0x58025430
 8007978:	58025444 	.word	0x58025444
 800797c:	58025458 	.word	0x58025458
 8007980:	5802546c 	.word	0x5802546c
 8007984:	58025480 	.word	0x58025480
 8007988:	58025494 	.word	0x58025494

0800798c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e205      	b.n	8007daa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d004      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e1fa      	b.n	8007daa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a8c      	ldr	r2, [pc, #560]	; (8007bec <HAL_DMA_Abort_IT+0x260>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d04a      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a8b      	ldr	r2, [pc, #556]	; (8007bf0 <HAL_DMA_Abort_IT+0x264>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d045      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a89      	ldr	r2, [pc, #548]	; (8007bf4 <HAL_DMA_Abort_IT+0x268>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d040      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a88      	ldr	r2, [pc, #544]	; (8007bf8 <HAL_DMA_Abort_IT+0x26c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d03b      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a86      	ldr	r2, [pc, #536]	; (8007bfc <HAL_DMA_Abort_IT+0x270>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d036      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a85      	ldr	r2, [pc, #532]	; (8007c00 <HAL_DMA_Abort_IT+0x274>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d031      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a83      	ldr	r2, [pc, #524]	; (8007c04 <HAL_DMA_Abort_IT+0x278>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d02c      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a82      	ldr	r2, [pc, #520]	; (8007c08 <HAL_DMA_Abort_IT+0x27c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d027      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a80      	ldr	r2, [pc, #512]	; (8007c0c <HAL_DMA_Abort_IT+0x280>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d022      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a7f      	ldr	r2, [pc, #508]	; (8007c10 <HAL_DMA_Abort_IT+0x284>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01d      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a7d      	ldr	r2, [pc, #500]	; (8007c14 <HAL_DMA_Abort_IT+0x288>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a7c      	ldr	r2, [pc, #496]	; (8007c18 <HAL_DMA_Abort_IT+0x28c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a7a      	ldr	r2, [pc, #488]	; (8007c1c <HAL_DMA_Abort_IT+0x290>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a79      	ldr	r2, [pc, #484]	; (8007c20 <HAL_DMA_Abort_IT+0x294>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a77      	ldr	r2, [pc, #476]	; (8007c24 <HAL_DMA_Abort_IT+0x298>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_DMA_Abort_IT+0xc8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a76      	ldr	r2, [pc, #472]	; (8007c28 <HAL_DMA_Abort_IT+0x29c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d101      	bne.n	8007a58 <HAL_DMA_Abort_IT+0xcc>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_DMA_Abort_IT+0xce>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d065      	beq.n	8007b2a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2204      	movs	r2, #4
 8007a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a60      	ldr	r2, [pc, #384]	; (8007bec <HAL_DMA_Abort_IT+0x260>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d04a      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5e      	ldr	r2, [pc, #376]	; (8007bf0 <HAL_DMA_Abort_IT+0x264>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d045      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a5d      	ldr	r2, [pc, #372]	; (8007bf4 <HAL_DMA_Abort_IT+0x268>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d040      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a5b      	ldr	r2, [pc, #364]	; (8007bf8 <HAL_DMA_Abort_IT+0x26c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d03b      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a5a      	ldr	r2, [pc, #360]	; (8007bfc <HAL_DMA_Abort_IT+0x270>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d036      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a58      	ldr	r2, [pc, #352]	; (8007c00 <HAL_DMA_Abort_IT+0x274>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d031      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a57      	ldr	r2, [pc, #348]	; (8007c04 <HAL_DMA_Abort_IT+0x278>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d02c      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a55      	ldr	r2, [pc, #340]	; (8007c08 <HAL_DMA_Abort_IT+0x27c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d027      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a54      	ldr	r2, [pc, #336]	; (8007c0c <HAL_DMA_Abort_IT+0x280>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d022      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a52      	ldr	r2, [pc, #328]	; (8007c10 <HAL_DMA_Abort_IT+0x284>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01d      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a51      	ldr	r2, [pc, #324]	; (8007c14 <HAL_DMA_Abort_IT+0x288>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d018      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a4f      	ldr	r2, [pc, #316]	; (8007c18 <HAL_DMA_Abort_IT+0x28c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a4e      	ldr	r2, [pc, #312]	; (8007c1c <HAL_DMA_Abort_IT+0x290>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a4c      	ldr	r2, [pc, #304]	; (8007c20 <HAL_DMA_Abort_IT+0x294>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a4b      	ldr	r2, [pc, #300]	; (8007c24 <HAL_DMA_Abort_IT+0x298>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_DMA_Abort_IT+0x17a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a49      	ldr	r2, [pc, #292]	; (8007c28 <HAL_DMA_Abort_IT+0x29c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d108      	bne.n	8007b18 <HAL_DMA_Abort_IT+0x18c>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0201 	bic.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e147      	b.n	8007da8 <HAL_DMA_Abort_IT+0x41c>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0201 	bic.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e13e      	b.n	8007da8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 020e 	bic.w	r2, r2, #14
 8007b38:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a2b      	ldr	r2, [pc, #172]	; (8007bec <HAL_DMA_Abort_IT+0x260>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d04a      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a29      	ldr	r2, [pc, #164]	; (8007bf0 <HAL_DMA_Abort_IT+0x264>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d045      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a28      	ldr	r2, [pc, #160]	; (8007bf4 <HAL_DMA_Abort_IT+0x268>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d040      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a26      	ldr	r2, [pc, #152]	; (8007bf8 <HAL_DMA_Abort_IT+0x26c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d03b      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a25      	ldr	r2, [pc, #148]	; (8007bfc <HAL_DMA_Abort_IT+0x270>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d036      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a23      	ldr	r2, [pc, #140]	; (8007c00 <HAL_DMA_Abort_IT+0x274>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d031      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a22      	ldr	r2, [pc, #136]	; (8007c04 <HAL_DMA_Abort_IT+0x278>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d02c      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a20      	ldr	r2, [pc, #128]	; (8007c08 <HAL_DMA_Abort_IT+0x27c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d027      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <HAL_DMA_Abort_IT+0x280>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <HAL_DMA_Abort_IT+0x284>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01d      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <HAL_DMA_Abort_IT+0x288>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1a      	ldr	r2, [pc, #104]	; (8007c18 <HAL_DMA_Abort_IT+0x28c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <HAL_DMA_Abort_IT+0x290>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <HAL_DMA_Abort_IT+0x294>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a16      	ldr	r2, [pc, #88]	; (8007c24 <HAL_DMA_Abort_IT+0x298>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_DMA_Abort_IT+0x24e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a14      	ldr	r2, [pc, #80]	; (8007c28 <HAL_DMA_Abort_IT+0x29c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d128      	bne.n	8007c2c <HAL_DMA_Abort_IT+0x2a0>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0201 	bic.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e027      	b.n	8007c3c <HAL_DMA_Abort_IT+0x2b0>
 8007bec:	40020010 	.word	0x40020010
 8007bf0:	40020028 	.word	0x40020028
 8007bf4:	40020040 	.word	0x40020040
 8007bf8:	40020058 	.word	0x40020058
 8007bfc:	40020070 	.word	0x40020070
 8007c00:	40020088 	.word	0x40020088
 8007c04:	400200a0 	.word	0x400200a0
 8007c08:	400200b8 	.word	0x400200b8
 8007c0c:	40020410 	.word	0x40020410
 8007c10:	40020428 	.word	0x40020428
 8007c14:	40020440 	.word	0x40020440
 8007c18:	40020458 	.word	0x40020458
 8007c1c:	40020470 	.word	0x40020470
 8007c20:	40020488 	.word	0x40020488
 8007c24:	400204a0 	.word	0x400204a0
 8007c28:	400204b8 	.word	0x400204b8
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0201 	bic.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a5c      	ldr	r2, [pc, #368]	; (8007db4 <HAL_DMA_Abort_IT+0x428>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d072      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a5b      	ldr	r2, [pc, #364]	; (8007db8 <HAL_DMA_Abort_IT+0x42c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d06d      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a59      	ldr	r2, [pc, #356]	; (8007dbc <HAL_DMA_Abort_IT+0x430>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d068      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a58      	ldr	r2, [pc, #352]	; (8007dc0 <HAL_DMA_Abort_IT+0x434>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d063      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a56      	ldr	r2, [pc, #344]	; (8007dc4 <HAL_DMA_Abort_IT+0x438>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d05e      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a55      	ldr	r2, [pc, #340]	; (8007dc8 <HAL_DMA_Abort_IT+0x43c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d059      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a53      	ldr	r2, [pc, #332]	; (8007dcc <HAL_DMA_Abort_IT+0x440>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d054      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a52      	ldr	r2, [pc, #328]	; (8007dd0 <HAL_DMA_Abort_IT+0x444>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d04f      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a50      	ldr	r2, [pc, #320]	; (8007dd4 <HAL_DMA_Abort_IT+0x448>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d04a      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a4f      	ldr	r2, [pc, #316]	; (8007dd8 <HAL_DMA_Abort_IT+0x44c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d045      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a4d      	ldr	r2, [pc, #308]	; (8007ddc <HAL_DMA_Abort_IT+0x450>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d040      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a4c      	ldr	r2, [pc, #304]	; (8007de0 <HAL_DMA_Abort_IT+0x454>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d03b      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a4a      	ldr	r2, [pc, #296]	; (8007de4 <HAL_DMA_Abort_IT+0x458>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d036      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a49      	ldr	r2, [pc, #292]	; (8007de8 <HAL_DMA_Abort_IT+0x45c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d031      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a47      	ldr	r2, [pc, #284]	; (8007dec <HAL_DMA_Abort_IT+0x460>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d02c      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a46      	ldr	r2, [pc, #280]	; (8007df0 <HAL_DMA_Abort_IT+0x464>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d027      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a44      	ldr	r2, [pc, #272]	; (8007df4 <HAL_DMA_Abort_IT+0x468>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d022      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a43      	ldr	r2, [pc, #268]	; (8007df8 <HAL_DMA_Abort_IT+0x46c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d01d      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a41      	ldr	r2, [pc, #260]	; (8007dfc <HAL_DMA_Abort_IT+0x470>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d018      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a40      	ldr	r2, [pc, #256]	; (8007e00 <HAL_DMA_Abort_IT+0x474>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d013      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a3e      	ldr	r2, [pc, #248]	; (8007e04 <HAL_DMA_Abort_IT+0x478>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00e      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a3d      	ldr	r2, [pc, #244]	; (8007e08 <HAL_DMA_Abort_IT+0x47c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a3b      	ldr	r2, [pc, #236]	; (8007e0c <HAL_DMA_Abort_IT+0x480>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_DMA_Abort_IT+0x3a0>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a3a      	ldr	r2, [pc, #232]	; (8007e10 <HAL_DMA_Abort_IT+0x484>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d101      	bne.n	8007d30 <HAL_DMA_Abort_IT+0x3a4>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <HAL_DMA_Abort_IT+0x3a6>
 8007d30:	2300      	movs	r3, #0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d028      	beq.n	8007d88 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d50:	f003 031f 	and.w	r3, r3, #31
 8007d54:	2201      	movs	r2, #1
 8007d56:	409a      	lsls	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00c      	beq.n	8007d88 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40020010 	.word	0x40020010
 8007db8:	40020028 	.word	0x40020028
 8007dbc:	40020040 	.word	0x40020040
 8007dc0:	40020058 	.word	0x40020058
 8007dc4:	40020070 	.word	0x40020070
 8007dc8:	40020088 	.word	0x40020088
 8007dcc:	400200a0 	.word	0x400200a0
 8007dd0:	400200b8 	.word	0x400200b8
 8007dd4:	40020410 	.word	0x40020410
 8007dd8:	40020428 	.word	0x40020428
 8007ddc:	40020440 	.word	0x40020440
 8007de0:	40020458 	.word	0x40020458
 8007de4:	40020470 	.word	0x40020470
 8007de8:	40020488 	.word	0x40020488
 8007dec:	400204a0 	.word	0x400204a0
 8007df0:	400204b8 	.word	0x400204b8
 8007df4:	58025408 	.word	0x58025408
 8007df8:	5802541c 	.word	0x5802541c
 8007dfc:	58025430 	.word	0x58025430
 8007e00:	58025444 	.word	0x58025444
 8007e04:	58025458 	.word	0x58025458
 8007e08:	5802546c 	.word	0x5802546c
 8007e0c:	58025480 	.word	0x58025480
 8007e10:	58025494 	.word	0x58025494

08007e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e20:	4b67      	ldr	r3, [pc, #412]	; (8007fc0 <HAL_DMA_IRQHandler+0x1ac>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a67      	ldr	r2, [pc, #412]	; (8007fc4 <HAL_DMA_IRQHandler+0x1b0>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	0a9b      	lsrs	r3, r3, #10
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a5f      	ldr	r2, [pc, #380]	; (8007fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d04a      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a5d      	ldr	r2, [pc, #372]	; (8007fcc <HAL_DMA_IRQHandler+0x1b8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d045      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a5c      	ldr	r2, [pc, #368]	; (8007fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d040      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a5a      	ldr	r2, [pc, #360]	; (8007fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d03b      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a59      	ldr	r2, [pc, #356]	; (8007fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d036      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a57      	ldr	r2, [pc, #348]	; (8007fdc <HAL_DMA_IRQHandler+0x1c8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d031      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a56      	ldr	r2, [pc, #344]	; (8007fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d02c      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a54      	ldr	r2, [pc, #336]	; (8007fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d027      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a53      	ldr	r2, [pc, #332]	; (8007fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a51      	ldr	r2, [pc, #324]	; (8007fec <HAL_DMA_IRQHandler+0x1d8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a50      	ldr	r2, [pc, #320]	; (8007ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a4e      	ldr	r2, [pc, #312]	; (8007ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a4d      	ldr	r2, [pc, #308]	; (8007ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a4b      	ldr	r2, [pc, #300]	; (8007ffc <HAL_DMA_IRQHandler+0x1e8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a4a      	ldr	r2, [pc, #296]	; (8008000 <HAL_DMA_IRQHandler+0x1ec>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xd2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a48      	ldr	r2, [pc, #288]	; (8008004 <HAL_DMA_IRQHandler+0x1f0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d101      	bne.n	8007eea <HAL_DMA_IRQHandler+0xd6>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <HAL_DMA_IRQHandler+0xd8>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 842b 	beq.w	8008748 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	2208      	movs	r2, #8
 8007efc:	409a      	lsls	r2, r3
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	4013      	ands	r3, r2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80a2 	beq.w	800804c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2e      	ldr	r2, [pc, #184]	; (8007fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d04a      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a2d      	ldr	r2, [pc, #180]	; (8007fcc <HAL_DMA_IRQHandler+0x1b8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d045      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d040      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a2a      	ldr	r2, [pc, #168]	; (8007fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d03b      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a28      	ldr	r2, [pc, #160]	; (8007fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d036      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a27      	ldr	r2, [pc, #156]	; (8007fdc <HAL_DMA_IRQHandler+0x1c8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d031      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02c      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d027      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a22      	ldr	r2, [pc, #136]	; (8007fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d022      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a21      	ldr	r2, [pc, #132]	; (8007fec <HAL_DMA_IRQHandler+0x1d8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01d      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d018      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d013      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00e      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1b      	ldr	r2, [pc, #108]	; (8007ffc <HAL_DMA_IRQHandler+0x1e8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d009      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_DMA_IRQHandler+0x1ec>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x194>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a18      	ldr	r2, [pc, #96]	; (8008004 <HAL_DMA_IRQHandler+0x1f0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d12f      	bne.n	8008008 <HAL_DMA_IRQHandler+0x1f4>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e02e      	b.n	800801c <HAL_DMA_IRQHandler+0x208>
 8007fbe:	bf00      	nop
 8007fc0:	240000f8 	.word	0x240000f8
 8007fc4:	1b4e81b5 	.word	0x1b4e81b5
 8007fc8:	40020010 	.word	0x40020010
 8007fcc:	40020028 	.word	0x40020028
 8007fd0:	40020040 	.word	0x40020040
 8007fd4:	40020058 	.word	0x40020058
 8007fd8:	40020070 	.word	0x40020070
 8007fdc:	40020088 	.word	0x40020088
 8007fe0:	400200a0 	.word	0x400200a0
 8007fe4:	400200b8 	.word	0x400200b8
 8007fe8:	40020410 	.word	0x40020410
 8007fec:	40020428 	.word	0x40020428
 8007ff0:	40020440 	.word	0x40020440
 8007ff4:	40020458 	.word	0x40020458
 8007ff8:	40020470 	.word	0x40020470
 8007ffc:	40020488 	.word	0x40020488
 8008000:	400204a0 	.word	0x400204a0
 8008004:	400204b8 	.word	0x400204b8
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	bf14      	ite	ne
 8008016:	2301      	movne	r3, #1
 8008018:	2300      	moveq	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d015      	beq.n	800804c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0204 	bic.w	r2, r2, #4
 800802e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	2208      	movs	r2, #8
 800803a:	409a      	lsls	r2, r3
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	f043 0201 	orr.w	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	fa22 f303 	lsr.w	r3, r2, r3
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d06e      	beq.n	8008140 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a69      	ldr	r2, [pc, #420]	; (800820c <HAL_DMA_IRQHandler+0x3f8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d04a      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a67      	ldr	r2, [pc, #412]	; (8008210 <HAL_DMA_IRQHandler+0x3fc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d045      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a66      	ldr	r2, [pc, #408]	; (8008214 <HAL_DMA_IRQHandler+0x400>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d040      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a64      	ldr	r2, [pc, #400]	; (8008218 <HAL_DMA_IRQHandler+0x404>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d03b      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a63      	ldr	r2, [pc, #396]	; (800821c <HAL_DMA_IRQHandler+0x408>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d036      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a61      	ldr	r2, [pc, #388]	; (8008220 <HAL_DMA_IRQHandler+0x40c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d031      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a60      	ldr	r2, [pc, #384]	; (8008224 <HAL_DMA_IRQHandler+0x410>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d02c      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a5e      	ldr	r2, [pc, #376]	; (8008228 <HAL_DMA_IRQHandler+0x414>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d027      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a5d      	ldr	r2, [pc, #372]	; (800822c <HAL_DMA_IRQHandler+0x418>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d022      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a5b      	ldr	r2, [pc, #364]	; (8008230 <HAL_DMA_IRQHandler+0x41c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01d      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a5a      	ldr	r2, [pc, #360]	; (8008234 <HAL_DMA_IRQHandler+0x420>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d018      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a58      	ldr	r2, [pc, #352]	; (8008238 <HAL_DMA_IRQHandler+0x424>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d013      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a57      	ldr	r2, [pc, #348]	; (800823c <HAL_DMA_IRQHandler+0x428>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00e      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a55      	ldr	r2, [pc, #340]	; (8008240 <HAL_DMA_IRQHandler+0x42c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d009      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a54      	ldr	r2, [pc, #336]	; (8008244 <HAL_DMA_IRQHandler+0x430>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d004      	beq.n	8008102 <HAL_DMA_IRQHandler+0x2ee>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a52      	ldr	r2, [pc, #328]	; (8008248 <HAL_DMA_IRQHandler+0x434>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10a      	bne.n	8008118 <HAL_DMA_IRQHandler+0x304>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	2b00      	cmp	r3, #0
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e003      	b.n	8008120 <HAL_DMA_IRQHandler+0x30c>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2300      	movs	r3, #0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	2201      	movs	r2, #1
 800812e:	409a      	lsls	r2, r3
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008138:	f043 0202 	orr.w	r2, r3, #2
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008144:	f003 031f 	and.w	r3, r3, #31
 8008148:	2204      	movs	r2, #4
 800814a:	409a      	lsls	r2, r3
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 808f 	beq.w	8008274 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2c      	ldr	r2, [pc, #176]	; (800820c <HAL_DMA_IRQHandler+0x3f8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d04a      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2a      	ldr	r2, [pc, #168]	; (8008210 <HAL_DMA_IRQHandler+0x3fc>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d045      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a29      	ldr	r2, [pc, #164]	; (8008214 <HAL_DMA_IRQHandler+0x400>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d040      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a27      	ldr	r2, [pc, #156]	; (8008218 <HAL_DMA_IRQHandler+0x404>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d03b      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a26      	ldr	r2, [pc, #152]	; (800821c <HAL_DMA_IRQHandler+0x408>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d036      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a24      	ldr	r2, [pc, #144]	; (8008220 <HAL_DMA_IRQHandler+0x40c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d031      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a23      	ldr	r2, [pc, #140]	; (8008224 <HAL_DMA_IRQHandler+0x410>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d02c      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a21      	ldr	r2, [pc, #132]	; (8008228 <HAL_DMA_IRQHandler+0x414>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d027      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a20      	ldr	r2, [pc, #128]	; (800822c <HAL_DMA_IRQHandler+0x418>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <HAL_DMA_IRQHandler+0x41c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <HAL_DMA_IRQHandler+0x420>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1b      	ldr	r2, [pc, #108]	; (8008238 <HAL_DMA_IRQHandler+0x424>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1a      	ldr	r2, [pc, #104]	; (800823c <HAL_DMA_IRQHandler+0x428>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a18      	ldr	r2, [pc, #96]	; (8008240 <HAL_DMA_IRQHandler+0x42c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a17      	ldr	r2, [pc, #92]	; (8008244 <HAL_DMA_IRQHandler+0x430>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x3e2>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <HAL_DMA_IRQHandler+0x434>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d12a      	bne.n	800824c <HAL_DMA_IRQHandler+0x438>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	bf14      	ite	ne
 8008204:	2301      	movne	r3, #1
 8008206:	2300      	moveq	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	e023      	b.n	8008254 <HAL_DMA_IRQHandler+0x440>
 800820c:	40020010 	.word	0x40020010
 8008210:	40020028 	.word	0x40020028
 8008214:	40020040 	.word	0x40020040
 8008218:	40020058 	.word	0x40020058
 800821c:	40020070 	.word	0x40020070
 8008220:	40020088 	.word	0x40020088
 8008224:	400200a0 	.word	0x400200a0
 8008228:	400200b8 	.word	0x400200b8
 800822c:	40020410 	.word	0x40020410
 8008230:	40020428 	.word	0x40020428
 8008234:	40020440 	.word	0x40020440
 8008238:	40020458 	.word	0x40020458
 800823c:	40020470 	.word	0x40020470
 8008240:	40020488 	.word	0x40020488
 8008244:	400204a0 	.word	0x400204a0
 8008248:	400204b8 	.word	0x400204b8
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825c:	f003 031f 	and.w	r3, r3, #31
 8008260:	2204      	movs	r2, #4
 8008262:	409a      	lsls	r2, r3
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008278:	f003 031f 	and.w	r3, r3, #31
 800827c:	2210      	movs	r2, #16
 800827e:	409a      	lsls	r2, r3
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	4013      	ands	r3, r2
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 80a6 	beq.w	80083d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a85      	ldr	r2, [pc, #532]	; (80084a4 <HAL_DMA_IRQHandler+0x690>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d04a      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a83      	ldr	r2, [pc, #524]	; (80084a8 <HAL_DMA_IRQHandler+0x694>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d045      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a82      	ldr	r2, [pc, #520]	; (80084ac <HAL_DMA_IRQHandler+0x698>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d040      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a80      	ldr	r2, [pc, #512]	; (80084b0 <HAL_DMA_IRQHandler+0x69c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d03b      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a7f      	ldr	r2, [pc, #508]	; (80084b4 <HAL_DMA_IRQHandler+0x6a0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d036      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a7d      	ldr	r2, [pc, #500]	; (80084b8 <HAL_DMA_IRQHandler+0x6a4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d031      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a7c      	ldr	r2, [pc, #496]	; (80084bc <HAL_DMA_IRQHandler+0x6a8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d02c      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a7a      	ldr	r2, [pc, #488]	; (80084c0 <HAL_DMA_IRQHandler+0x6ac>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d027      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a79      	ldr	r2, [pc, #484]	; (80084c4 <HAL_DMA_IRQHandler+0x6b0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d022      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a77      	ldr	r2, [pc, #476]	; (80084c8 <HAL_DMA_IRQHandler+0x6b4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01d      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a76      	ldr	r2, [pc, #472]	; (80084cc <HAL_DMA_IRQHandler+0x6b8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d018      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a74      	ldr	r2, [pc, #464]	; (80084d0 <HAL_DMA_IRQHandler+0x6bc>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a73      	ldr	r2, [pc, #460]	; (80084d4 <HAL_DMA_IRQHandler+0x6c0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a71      	ldr	r2, [pc, #452]	; (80084d8 <HAL_DMA_IRQHandler+0x6c4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a70      	ldr	r2, [pc, #448]	; (80084dc <HAL_DMA_IRQHandler+0x6c8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_DMA_IRQHandler+0x516>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6e      	ldr	r2, [pc, #440]	; (80084e0 <HAL_DMA_IRQHandler+0x6cc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d10a      	bne.n	8008340 <HAL_DMA_IRQHandler+0x52c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf14      	ite	ne
 8008338:	2301      	movne	r3, #1
 800833a:	2300      	moveq	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	e009      	b.n	8008354 <HAL_DMA_IRQHandler+0x540>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	bf14      	ite	ne
 800834e:	2301      	movne	r3, #1
 8008350:	2300      	moveq	r3, #0
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d03e      	beq.n	80083d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2210      	movs	r2, #16
 8008362:	409a      	lsls	r2, r3
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d018      	beq.n	80083a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d108      	bne.n	8008396 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d024      	beq.n	80083d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	4798      	blx	r3
 8008394:	e01f      	b.n	80083d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01b      	beq.n	80083d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
 80083a6:	e016      	b.n	80083d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0208 	bic.w	r2, r2, #8
 80083c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	2220      	movs	r2, #32
 80083e0:	409a      	lsls	r2, r3
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	4013      	ands	r3, r2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8110 	beq.w	800860c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	; (80084a4 <HAL_DMA_IRQHandler+0x690>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d04a      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a2b      	ldr	r2, [pc, #172]	; (80084a8 <HAL_DMA_IRQHandler+0x694>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d045      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a29      	ldr	r2, [pc, #164]	; (80084ac <HAL_DMA_IRQHandler+0x698>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d040      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a28      	ldr	r2, [pc, #160]	; (80084b0 <HAL_DMA_IRQHandler+0x69c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d03b      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <HAL_DMA_IRQHandler+0x6a0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d036      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a25      	ldr	r2, [pc, #148]	; (80084b8 <HAL_DMA_IRQHandler+0x6a4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d031      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a23      	ldr	r2, [pc, #140]	; (80084bc <HAL_DMA_IRQHandler+0x6a8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d02c      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a22      	ldr	r2, [pc, #136]	; (80084c0 <HAL_DMA_IRQHandler+0x6ac>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d027      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a20      	ldr	r2, [pc, #128]	; (80084c4 <HAL_DMA_IRQHandler+0x6b0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d022      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1f      	ldr	r2, [pc, #124]	; (80084c8 <HAL_DMA_IRQHandler+0x6b4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d01d      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1d      	ldr	r2, [pc, #116]	; (80084cc <HAL_DMA_IRQHandler+0x6b8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d018      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a1c      	ldr	r2, [pc, #112]	; (80084d0 <HAL_DMA_IRQHandler+0x6bc>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <HAL_DMA_IRQHandler+0x6c0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00e      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a19      	ldr	r2, [pc, #100]	; (80084d8 <HAL_DMA_IRQHandler+0x6c4>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d009      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <HAL_DMA_IRQHandler+0x6c8>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_DMA_IRQHandler+0x678>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <HAL_DMA_IRQHandler+0x6cc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d12b      	bne.n	80084e4 <HAL_DMA_IRQHandler+0x6d0>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0310 	and.w	r3, r3, #16
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2301      	movne	r3, #1
 800849c:	2300      	moveq	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	e02a      	b.n	80084f8 <HAL_DMA_IRQHandler+0x6e4>
 80084a2:	bf00      	nop
 80084a4:	40020010 	.word	0x40020010
 80084a8:	40020028 	.word	0x40020028
 80084ac:	40020040 	.word	0x40020040
 80084b0:	40020058 	.word	0x40020058
 80084b4:	40020070 	.word	0x40020070
 80084b8:	40020088 	.word	0x40020088
 80084bc:	400200a0 	.word	0x400200a0
 80084c0:	400200b8 	.word	0x400200b8
 80084c4:	40020410 	.word	0x40020410
 80084c8:	40020428 	.word	0x40020428
 80084cc:	40020440 	.word	0x40020440
 80084d0:	40020458 	.word	0x40020458
 80084d4:	40020470 	.word	0x40020470
 80084d8:	40020488 	.word	0x40020488
 80084dc:	400204a0 	.word	0x400204a0
 80084e0:	400204b8 	.word	0x400204b8
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bf14      	ite	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	2300      	moveq	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8087 	beq.w	800860c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	f003 031f 	and.w	r3, r3, #31
 8008506:	2220      	movs	r2, #32
 8008508:	409a      	lsls	r2, r3
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b04      	cmp	r3, #4
 8008518:	d139      	bne.n	800858e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0216 	bic.w	r2, r2, #22
 8008528:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695a      	ldr	r2, [r3, #20]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008538:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <HAL_DMA_IRQHandler+0x736>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0208 	bic.w	r2, r2, #8
 8008558:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	223f      	movs	r2, #63	; 0x3f
 8008564:	409a      	lsls	r2, r3
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 834a 	beq.w	8008c18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
          }
          return;
 800858c:	e344      	b.n	8008c18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d018      	beq.n	80085ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d02c      	beq.n	800860c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	4798      	blx	r3
 80085ba:	e027      	b.n	800860c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d023      	beq.n	800860c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
 80085cc:	e01e      	b.n	800860c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10f      	bne.n	80085fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0210 	bic.w	r2, r2, #16
 80085ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 8306 	beq.w	8008c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 8088 	beq.w	8008734 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2204      	movs	r2, #4
 8008628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a7a      	ldr	r2, [pc, #488]	; (800881c <HAL_DMA_IRQHandler+0xa08>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d04a      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a79      	ldr	r2, [pc, #484]	; (8008820 <HAL_DMA_IRQHandler+0xa0c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d045      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a77      	ldr	r2, [pc, #476]	; (8008824 <HAL_DMA_IRQHandler+0xa10>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d040      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a76      	ldr	r2, [pc, #472]	; (8008828 <HAL_DMA_IRQHandler+0xa14>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d03b      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a74      	ldr	r2, [pc, #464]	; (800882c <HAL_DMA_IRQHandler+0xa18>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d036      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a73      	ldr	r2, [pc, #460]	; (8008830 <HAL_DMA_IRQHandler+0xa1c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d031      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a71      	ldr	r2, [pc, #452]	; (8008834 <HAL_DMA_IRQHandler+0xa20>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d02c      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a70      	ldr	r2, [pc, #448]	; (8008838 <HAL_DMA_IRQHandler+0xa24>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d027      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a6e      	ldr	r2, [pc, #440]	; (800883c <HAL_DMA_IRQHandler+0xa28>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d022      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a6d      	ldr	r2, [pc, #436]	; (8008840 <HAL_DMA_IRQHandler+0xa2c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d01d      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a6b      	ldr	r2, [pc, #428]	; (8008844 <HAL_DMA_IRQHandler+0xa30>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d018      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a6a      	ldr	r2, [pc, #424]	; (8008848 <HAL_DMA_IRQHandler+0xa34>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d013      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a68      	ldr	r2, [pc, #416]	; (800884c <HAL_DMA_IRQHandler+0xa38>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00e      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a67      	ldr	r2, [pc, #412]	; (8008850 <HAL_DMA_IRQHandler+0xa3c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d009      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a65      	ldr	r2, [pc, #404]	; (8008854 <HAL_DMA_IRQHandler+0xa40>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <HAL_DMA_IRQHandler+0x8b8>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a64      	ldr	r2, [pc, #400]	; (8008858 <HAL_DMA_IRQHandler+0xa44>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d108      	bne.n	80086de <HAL_DMA_IRQHandler+0x8ca>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0201 	bic.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	e007      	b.n	80086ee <HAL_DMA_IRQHandler+0x8da>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d307      	bcc.n	800870a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1f2      	bne.n	80086ee <HAL_DMA_IRQHandler+0x8da>
 8008708:	e000      	b.n	800870c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800870a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2203      	movs	r2, #3
 8008726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800872a:	e003      	b.n	8008734 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8272 	beq.w	8008c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
 8008746:	e26c      	b.n	8008c22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a43      	ldr	r2, [pc, #268]	; (800885c <HAL_DMA_IRQHandler+0xa48>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d022      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a42      	ldr	r2, [pc, #264]	; (8008860 <HAL_DMA_IRQHandler+0xa4c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d01d      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a40      	ldr	r2, [pc, #256]	; (8008864 <HAL_DMA_IRQHandler+0xa50>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d018      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a3f      	ldr	r2, [pc, #252]	; (8008868 <HAL_DMA_IRQHandler+0xa54>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d013      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a3d      	ldr	r2, [pc, #244]	; (800886c <HAL_DMA_IRQHandler+0xa58>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00e      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a3c      	ldr	r2, [pc, #240]	; (8008870 <HAL_DMA_IRQHandler+0xa5c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a3a      	ldr	r2, [pc, #232]	; (8008874 <HAL_DMA_IRQHandler+0xa60>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_DMA_IRQHandler+0x984>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a39      	ldr	r2, [pc, #228]	; (8008878 <HAL_DMA_IRQHandler+0xa64>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d101      	bne.n	800879c <HAL_DMA_IRQHandler+0x988>
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <HAL_DMA_IRQHandler+0x98a>
 800879c:	2300      	movs	r3, #0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 823f 	beq.w	8008c22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	2204      	movs	r2, #4
 80087b6:	409a      	lsls	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4013      	ands	r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80cd 	beq.w	800895c <HAL_DMA_IRQHandler+0xb48>
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80c7 	beq.w	800895c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2204      	movs	r2, #4
 80087d8:	409a      	lsls	r2, r3
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d049      	beq.n	800887c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d109      	bne.n	8008806 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8210 	beq.w	8008c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008804:	e20a      	b.n	8008c1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 8206 	beq.w	8008c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008818:	e200      	b.n	8008c1c <HAL_DMA_IRQHandler+0xe08>
 800881a:	bf00      	nop
 800881c:	40020010 	.word	0x40020010
 8008820:	40020028 	.word	0x40020028
 8008824:	40020040 	.word	0x40020040
 8008828:	40020058 	.word	0x40020058
 800882c:	40020070 	.word	0x40020070
 8008830:	40020088 	.word	0x40020088
 8008834:	400200a0 	.word	0x400200a0
 8008838:	400200b8 	.word	0x400200b8
 800883c:	40020410 	.word	0x40020410
 8008840:	40020428 	.word	0x40020428
 8008844:	40020440 	.word	0x40020440
 8008848:	40020458 	.word	0x40020458
 800884c:	40020470 	.word	0x40020470
 8008850:	40020488 	.word	0x40020488
 8008854:	400204a0 	.word	0x400204a0
 8008858:	400204b8 	.word	0x400204b8
 800885c:	58025408 	.word	0x58025408
 8008860:	5802541c 	.word	0x5802541c
 8008864:	58025430 	.word	0x58025430
 8008868:	58025444 	.word	0x58025444
 800886c:	58025458 	.word	0x58025458
 8008870:	5802546c 	.word	0x5802546c
 8008874:	58025480 	.word	0x58025480
 8008878:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d160      	bne.n	8008948 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a8c      	ldr	r2, [pc, #560]	; (8008abc <HAL_DMA_IRQHandler+0xca8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d04a      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a8a      	ldr	r2, [pc, #552]	; (8008ac0 <HAL_DMA_IRQHandler+0xcac>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d045      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a89      	ldr	r2, [pc, #548]	; (8008ac4 <HAL_DMA_IRQHandler+0xcb0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d040      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a87      	ldr	r2, [pc, #540]	; (8008ac8 <HAL_DMA_IRQHandler+0xcb4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d03b      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a86      	ldr	r2, [pc, #536]	; (8008acc <HAL_DMA_IRQHandler+0xcb8>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d036      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a84      	ldr	r2, [pc, #528]	; (8008ad0 <HAL_DMA_IRQHandler+0xcbc>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d031      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a83      	ldr	r2, [pc, #524]	; (8008ad4 <HAL_DMA_IRQHandler+0xcc0>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d02c      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a81      	ldr	r2, [pc, #516]	; (8008ad8 <HAL_DMA_IRQHandler+0xcc4>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d027      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a80      	ldr	r2, [pc, #512]	; (8008adc <HAL_DMA_IRQHandler+0xcc8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d022      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a7e      	ldr	r2, [pc, #504]	; (8008ae0 <HAL_DMA_IRQHandler+0xccc>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01d      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a7d      	ldr	r2, [pc, #500]	; (8008ae4 <HAL_DMA_IRQHandler+0xcd0>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d018      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a7b      	ldr	r2, [pc, #492]	; (8008ae8 <HAL_DMA_IRQHandler+0xcd4>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d013      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a7a      	ldr	r2, [pc, #488]	; (8008aec <HAL_DMA_IRQHandler+0xcd8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00e      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a78      	ldr	r2, [pc, #480]	; (8008af0 <HAL_DMA_IRQHandler+0xcdc>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d009      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a77      	ldr	r2, [pc, #476]	; (8008af4 <HAL_DMA_IRQHandler+0xce0>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d004      	beq.n	8008926 <HAL_DMA_IRQHandler+0xb12>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a75      	ldr	r2, [pc, #468]	; (8008af8 <HAL_DMA_IRQHandler+0xce4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d108      	bne.n	8008938 <HAL_DMA_IRQHandler+0xb24>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 0208 	bic.w	r2, r2, #8
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e007      	b.n	8008948 <HAL_DMA_IRQHandler+0xb34>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0204 	bic.w	r2, r2, #4
 8008946:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8165 	beq.w	8008c1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800895a:	e15f      	b.n	8008c1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	2202      	movs	r2, #2
 8008966:	409a      	lsls	r2, r3
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80c5 	beq.w	8008afc <HAL_DMA_IRQHandler+0xce8>
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80bf 	beq.w	8008afc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2202      	movs	r2, #2
 8008988:	409a      	lsls	r2, r3
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d018      	beq.n	80089ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 813a 	beq.w	8008c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089b4:	e134      	b.n	8008c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 8130 	beq.w	8008c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089c8:	e12a      	b.n	8008c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d168      	bne.n	8008aa6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a38      	ldr	r2, [pc, #224]	; (8008abc <HAL_DMA_IRQHandler+0xca8>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d04a      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a37      	ldr	r2, [pc, #220]	; (8008ac0 <HAL_DMA_IRQHandler+0xcac>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d045      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a35      	ldr	r2, [pc, #212]	; (8008ac4 <HAL_DMA_IRQHandler+0xcb0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d040      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a34      	ldr	r2, [pc, #208]	; (8008ac8 <HAL_DMA_IRQHandler+0xcb4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d03b      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a32      	ldr	r2, [pc, #200]	; (8008acc <HAL_DMA_IRQHandler+0xcb8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d036      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a31      	ldr	r2, [pc, #196]	; (8008ad0 <HAL_DMA_IRQHandler+0xcbc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d031      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a2f      	ldr	r2, [pc, #188]	; (8008ad4 <HAL_DMA_IRQHandler+0xcc0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d02c      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a2e      	ldr	r2, [pc, #184]	; (8008ad8 <HAL_DMA_IRQHandler+0xcc4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d027      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a2c      	ldr	r2, [pc, #176]	; (8008adc <HAL_DMA_IRQHandler+0xcc8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d022      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a2b      	ldr	r2, [pc, #172]	; (8008ae0 <HAL_DMA_IRQHandler+0xccc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d01d      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a29      	ldr	r2, [pc, #164]	; (8008ae4 <HAL_DMA_IRQHandler+0xcd0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d018      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a28      	ldr	r2, [pc, #160]	; (8008ae8 <HAL_DMA_IRQHandler+0xcd4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d013      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a26      	ldr	r2, [pc, #152]	; (8008aec <HAL_DMA_IRQHandler+0xcd8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00e      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a25      	ldr	r2, [pc, #148]	; (8008af0 <HAL_DMA_IRQHandler+0xcdc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <HAL_DMA_IRQHandler+0xce0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d004      	beq.n	8008a74 <HAL_DMA_IRQHandler+0xc60>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a22      	ldr	r2, [pc, #136]	; (8008af8 <HAL_DMA_IRQHandler+0xce4>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d108      	bne.n	8008a86 <HAL_DMA_IRQHandler+0xc72>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0214 	bic.w	r2, r2, #20
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e007      	b.n	8008a96 <HAL_DMA_IRQHandler+0xc82>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 020a 	bic.w	r2, r2, #10
 8008a94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80b8 	beq.w	8008c20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ab8:	e0b2      	b.n	8008c20 <HAL_DMA_IRQHandler+0xe0c>
 8008aba:	bf00      	nop
 8008abc:	40020010 	.word	0x40020010
 8008ac0:	40020028 	.word	0x40020028
 8008ac4:	40020040 	.word	0x40020040
 8008ac8:	40020058 	.word	0x40020058
 8008acc:	40020070 	.word	0x40020070
 8008ad0:	40020088 	.word	0x40020088
 8008ad4:	400200a0 	.word	0x400200a0
 8008ad8:	400200b8 	.word	0x400200b8
 8008adc:	40020410 	.word	0x40020410
 8008ae0:	40020428 	.word	0x40020428
 8008ae4:	40020440 	.word	0x40020440
 8008ae8:	40020458 	.word	0x40020458
 8008aec:	40020470 	.word	0x40020470
 8008af0:	40020488 	.word	0x40020488
 8008af4:	400204a0 	.word	0x400204a0
 8008af8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	2208      	movs	r2, #8
 8008b06:	409a      	lsls	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 8088 	beq.w	8008c22 <HAL_DMA_IRQHandler+0xe0e>
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 8082 	beq.w	8008c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a41      	ldr	r2, [pc, #260]	; (8008c28 <HAL_DMA_IRQHandler+0xe14>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d04a      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a3f      	ldr	r2, [pc, #252]	; (8008c2c <HAL_DMA_IRQHandler+0xe18>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d045      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a3e      	ldr	r2, [pc, #248]	; (8008c30 <HAL_DMA_IRQHandler+0xe1c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d040      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a3c      	ldr	r2, [pc, #240]	; (8008c34 <HAL_DMA_IRQHandler+0xe20>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d03b      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a3b      	ldr	r2, [pc, #236]	; (8008c38 <HAL_DMA_IRQHandler+0xe24>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d036      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a39      	ldr	r2, [pc, #228]	; (8008c3c <HAL_DMA_IRQHandler+0xe28>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d031      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a38      	ldr	r2, [pc, #224]	; (8008c40 <HAL_DMA_IRQHandler+0xe2c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d02c      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a36      	ldr	r2, [pc, #216]	; (8008c44 <HAL_DMA_IRQHandler+0xe30>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d027      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a35      	ldr	r2, [pc, #212]	; (8008c48 <HAL_DMA_IRQHandler+0xe34>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d022      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a33      	ldr	r2, [pc, #204]	; (8008c4c <HAL_DMA_IRQHandler+0xe38>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d01d      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a32      	ldr	r2, [pc, #200]	; (8008c50 <HAL_DMA_IRQHandler+0xe3c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d018      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a30      	ldr	r2, [pc, #192]	; (8008c54 <HAL_DMA_IRQHandler+0xe40>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d013      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a2f      	ldr	r2, [pc, #188]	; (8008c58 <HAL_DMA_IRQHandler+0xe44>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00e      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a2d      	ldr	r2, [pc, #180]	; (8008c5c <HAL_DMA_IRQHandler+0xe48>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d009      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a2c      	ldr	r2, [pc, #176]	; (8008c60 <HAL_DMA_IRQHandler+0xe4c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xdaa>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a2a      	ldr	r2, [pc, #168]	; (8008c64 <HAL_DMA_IRQHandler+0xe50>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d108      	bne.n	8008bd0 <HAL_DMA_IRQHandler+0xdbc>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 021c 	bic.w	r2, r2, #28
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e007      	b.n	8008be0 <HAL_DMA_IRQHandler+0xdcc>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 020e 	bic.w	r2, r2, #14
 8008bde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	2201      	movs	r2, #1
 8008bea:	409a      	lsls	r2, r3
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
 8008c16:	e004      	b.n	8008c22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008c18:	bf00      	nop
 8008c1a:	e002      	b.n	8008c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c1c:	bf00      	nop
 8008c1e:	e000      	b.n	8008c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008c22:	3728      	adds	r7, #40	; 0x28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40020010 	.word	0x40020010
 8008c2c:	40020028 	.word	0x40020028
 8008c30:	40020040 	.word	0x40020040
 8008c34:	40020058 	.word	0x40020058
 8008c38:	40020070 	.word	0x40020070
 8008c3c:	40020088 	.word	0x40020088
 8008c40:	400200a0 	.word	0x400200a0
 8008c44:	400200b8 	.word	0x400200b8
 8008c48:	40020410 	.word	0x40020410
 8008c4c:	40020428 	.word	0x40020428
 8008c50:	40020440 	.word	0x40020440
 8008c54:	40020458 	.word	0x40020458
 8008c58:	40020470 	.word	0x40020470
 8008c5c:	40020488 	.word	0x40020488
 8008c60:	400204a0 	.word	0x400204a0
 8008c64:	400204b8 	.word	0x400204b8

08008c68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a84      	ldr	r2, [pc, #528]	; (8008e98 <DMA_SetConfig+0x230>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d072      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a82      	ldr	r2, [pc, #520]	; (8008e9c <DMA_SetConfig+0x234>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d06d      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a81      	ldr	r2, [pc, #516]	; (8008ea0 <DMA_SetConfig+0x238>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d068      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a7f      	ldr	r2, [pc, #508]	; (8008ea4 <DMA_SetConfig+0x23c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d063      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a7e      	ldr	r2, [pc, #504]	; (8008ea8 <DMA_SetConfig+0x240>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d05e      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a7c      	ldr	r2, [pc, #496]	; (8008eac <DMA_SetConfig+0x244>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d059      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a7b      	ldr	r2, [pc, #492]	; (8008eb0 <DMA_SetConfig+0x248>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d054      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a79      	ldr	r2, [pc, #484]	; (8008eb4 <DMA_SetConfig+0x24c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d04f      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a78      	ldr	r2, [pc, #480]	; (8008eb8 <DMA_SetConfig+0x250>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d04a      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a76      	ldr	r2, [pc, #472]	; (8008ebc <DMA_SetConfig+0x254>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d045      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a75      	ldr	r2, [pc, #468]	; (8008ec0 <DMA_SetConfig+0x258>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d040      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a73      	ldr	r2, [pc, #460]	; (8008ec4 <DMA_SetConfig+0x25c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d03b      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a72      	ldr	r2, [pc, #456]	; (8008ec8 <DMA_SetConfig+0x260>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d036      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a70      	ldr	r2, [pc, #448]	; (8008ecc <DMA_SetConfig+0x264>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d031      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a6f      	ldr	r2, [pc, #444]	; (8008ed0 <DMA_SetConfig+0x268>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d02c      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a6d      	ldr	r2, [pc, #436]	; (8008ed4 <DMA_SetConfig+0x26c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d027      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a6c      	ldr	r2, [pc, #432]	; (8008ed8 <DMA_SetConfig+0x270>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d022      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a6a      	ldr	r2, [pc, #424]	; (8008edc <DMA_SetConfig+0x274>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d01d      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a69      	ldr	r2, [pc, #420]	; (8008ee0 <DMA_SetConfig+0x278>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d018      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a67      	ldr	r2, [pc, #412]	; (8008ee4 <DMA_SetConfig+0x27c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a66      	ldr	r2, [pc, #408]	; (8008ee8 <DMA_SetConfig+0x280>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00e      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a64      	ldr	r2, [pc, #400]	; (8008eec <DMA_SetConfig+0x284>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d009      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a63      	ldr	r2, [pc, #396]	; (8008ef0 <DMA_SetConfig+0x288>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d004      	beq.n	8008d72 <DMA_SetConfig+0x10a>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a61      	ldr	r2, [pc, #388]	; (8008ef4 <DMA_SetConfig+0x28c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d101      	bne.n	8008d76 <DMA_SetConfig+0x10e>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <DMA_SetConfig+0x110>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00d      	beq.n	8008d98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a3e      	ldr	r2, [pc, #248]	; (8008e98 <DMA_SetConfig+0x230>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d04a      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a3d      	ldr	r2, [pc, #244]	; (8008e9c <DMA_SetConfig+0x234>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d045      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a3b      	ldr	r2, [pc, #236]	; (8008ea0 <DMA_SetConfig+0x238>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d040      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a3a      	ldr	r2, [pc, #232]	; (8008ea4 <DMA_SetConfig+0x23c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d03b      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a38      	ldr	r2, [pc, #224]	; (8008ea8 <DMA_SetConfig+0x240>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d036      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a37      	ldr	r2, [pc, #220]	; (8008eac <DMA_SetConfig+0x244>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d031      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a35      	ldr	r2, [pc, #212]	; (8008eb0 <DMA_SetConfig+0x248>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d02c      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a34      	ldr	r2, [pc, #208]	; (8008eb4 <DMA_SetConfig+0x24c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d027      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a32      	ldr	r2, [pc, #200]	; (8008eb8 <DMA_SetConfig+0x250>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d022      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a31      	ldr	r2, [pc, #196]	; (8008ebc <DMA_SetConfig+0x254>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d01d      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a2f      	ldr	r2, [pc, #188]	; (8008ec0 <DMA_SetConfig+0x258>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d018      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a2e      	ldr	r2, [pc, #184]	; (8008ec4 <DMA_SetConfig+0x25c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d013      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a2c      	ldr	r2, [pc, #176]	; (8008ec8 <DMA_SetConfig+0x260>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00e      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a2b      	ldr	r2, [pc, #172]	; (8008ecc <DMA_SetConfig+0x264>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d009      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a29      	ldr	r2, [pc, #164]	; (8008ed0 <DMA_SetConfig+0x268>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d004      	beq.n	8008e38 <DMA_SetConfig+0x1d0>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a28      	ldr	r2, [pc, #160]	; (8008ed4 <DMA_SetConfig+0x26c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d101      	bne.n	8008e3c <DMA_SetConfig+0x1d4>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <DMA_SetConfig+0x1d6>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d05a      	beq.n	8008ef8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e46:	f003 031f 	and.w	r3, r3, #31
 8008e4a:	223f      	movs	r2, #63	; 0x3f
 8008e4c:	409a      	lsls	r2, r3
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	2b40      	cmp	r3, #64	; 0x40
 8008e70:	d108      	bne.n	8008e84 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008e82:	e087      	b.n	8008f94 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	60da      	str	r2, [r3, #12]
}
 8008e94:	e07e      	b.n	8008f94 <DMA_SetConfig+0x32c>
 8008e96:	bf00      	nop
 8008e98:	40020010 	.word	0x40020010
 8008e9c:	40020028 	.word	0x40020028
 8008ea0:	40020040 	.word	0x40020040
 8008ea4:	40020058 	.word	0x40020058
 8008ea8:	40020070 	.word	0x40020070
 8008eac:	40020088 	.word	0x40020088
 8008eb0:	400200a0 	.word	0x400200a0
 8008eb4:	400200b8 	.word	0x400200b8
 8008eb8:	40020410 	.word	0x40020410
 8008ebc:	40020428 	.word	0x40020428
 8008ec0:	40020440 	.word	0x40020440
 8008ec4:	40020458 	.word	0x40020458
 8008ec8:	40020470 	.word	0x40020470
 8008ecc:	40020488 	.word	0x40020488
 8008ed0:	400204a0 	.word	0x400204a0
 8008ed4:	400204b8 	.word	0x400204b8
 8008ed8:	58025408 	.word	0x58025408
 8008edc:	5802541c 	.word	0x5802541c
 8008ee0:	58025430 	.word	0x58025430
 8008ee4:	58025444 	.word	0x58025444
 8008ee8:	58025458 	.word	0x58025458
 8008eec:	5802546c 	.word	0x5802546c
 8008ef0:	58025480 	.word	0x58025480
 8008ef4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a28      	ldr	r2, [pc, #160]	; (8008fa0 <DMA_SetConfig+0x338>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a27      	ldr	r2, [pc, #156]	; (8008fa4 <DMA_SetConfig+0x33c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d01d      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a25      	ldr	r2, [pc, #148]	; (8008fa8 <DMA_SetConfig+0x340>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a24      	ldr	r2, [pc, #144]	; (8008fac <DMA_SetConfig+0x344>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a22      	ldr	r2, [pc, #136]	; (8008fb0 <DMA_SetConfig+0x348>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a21      	ldr	r2, [pc, #132]	; (8008fb4 <DMA_SetConfig+0x34c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1f      	ldr	r2, [pc, #124]	; (8008fb8 <DMA_SetConfig+0x350>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <DMA_SetConfig+0x2e0>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1e      	ldr	r2, [pc, #120]	; (8008fbc <DMA_SetConfig+0x354>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d101      	bne.n	8008f4c <DMA_SetConfig+0x2e4>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <DMA_SetConfig+0x2e6>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d020      	beq.n	8008f94 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f56:	f003 031f 	and.w	r3, r3, #31
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	409a      	lsls	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	d108      	bne.n	8008f84 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	60da      	str	r2, [r3, #12]
}
 8008f82:	e007      	b.n	8008f94 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]
}
 8008f94:	bf00      	nop
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	58025408 	.word	0x58025408
 8008fa4:	5802541c 	.word	0x5802541c
 8008fa8:	58025430 	.word	0x58025430
 8008fac:	58025444 	.word	0x58025444
 8008fb0:	58025458 	.word	0x58025458
 8008fb4:	5802546c 	.word	0x5802546c
 8008fb8:	58025480 	.word	0x58025480
 8008fbc:	58025494 	.word	0x58025494

08008fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a42      	ldr	r2, [pc, #264]	; (80090d8 <DMA_CalcBaseAndBitshift+0x118>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d04a      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a41      	ldr	r2, [pc, #260]	; (80090dc <DMA_CalcBaseAndBitshift+0x11c>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d045      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a3f      	ldr	r2, [pc, #252]	; (80090e0 <DMA_CalcBaseAndBitshift+0x120>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d040      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a3e      	ldr	r2, [pc, #248]	; (80090e4 <DMA_CalcBaseAndBitshift+0x124>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d03b      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a3c      	ldr	r2, [pc, #240]	; (80090e8 <DMA_CalcBaseAndBitshift+0x128>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d036      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3b      	ldr	r2, [pc, #236]	; (80090ec <DMA_CalcBaseAndBitshift+0x12c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d031      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a39      	ldr	r2, [pc, #228]	; (80090f0 <DMA_CalcBaseAndBitshift+0x130>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d02c      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a38      	ldr	r2, [pc, #224]	; (80090f4 <DMA_CalcBaseAndBitshift+0x134>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d027      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a36      	ldr	r2, [pc, #216]	; (80090f8 <DMA_CalcBaseAndBitshift+0x138>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d022      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a35      	ldr	r2, [pc, #212]	; (80090fc <DMA_CalcBaseAndBitshift+0x13c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d01d      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a33      	ldr	r2, [pc, #204]	; (8009100 <DMA_CalcBaseAndBitshift+0x140>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d018      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a32      	ldr	r2, [pc, #200]	; (8009104 <DMA_CalcBaseAndBitshift+0x144>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a30      	ldr	r2, [pc, #192]	; (8009108 <DMA_CalcBaseAndBitshift+0x148>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00e      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a2f      	ldr	r2, [pc, #188]	; (800910c <DMA_CalcBaseAndBitshift+0x14c>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d009      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a2d      	ldr	r2, [pc, #180]	; (8009110 <DMA_CalcBaseAndBitshift+0x150>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <DMA_CalcBaseAndBitshift+0xa8>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a2c      	ldr	r2, [pc, #176]	; (8009114 <DMA_CalcBaseAndBitshift+0x154>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d101      	bne.n	800906c <DMA_CalcBaseAndBitshift+0xac>
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <DMA_CalcBaseAndBitshift+0xae>
 800906c:	2300      	movs	r3, #0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d024      	beq.n	80090bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	3b10      	subs	r3, #16
 800907a:	4a27      	ldr	r2, [pc, #156]	; (8009118 <DMA_CalcBaseAndBitshift+0x158>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	091b      	lsrs	r3, r3, #4
 8009082:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	4a24      	ldr	r2, [pc, #144]	; (800911c <DMA_CalcBaseAndBitshift+0x15c>)
 800908c:	5cd3      	ldrb	r3, [r2, r3]
 800908e:	461a      	mov	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b03      	cmp	r3, #3
 8009098:	d908      	bls.n	80090ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	4b1f      	ldr	r3, [pc, #124]	; (8009120 <DMA_CalcBaseAndBitshift+0x160>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	659a      	str	r2, [r3, #88]	; 0x58
 80090aa:	e00d      	b.n	80090c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	4b1b      	ldr	r3, [pc, #108]	; (8009120 <DMA_CalcBaseAndBitshift+0x160>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6593      	str	r3, [r2, #88]	; 0x58
 80090ba:	e005      	b.n	80090c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40020010 	.word	0x40020010
 80090dc:	40020028 	.word	0x40020028
 80090e0:	40020040 	.word	0x40020040
 80090e4:	40020058 	.word	0x40020058
 80090e8:	40020070 	.word	0x40020070
 80090ec:	40020088 	.word	0x40020088
 80090f0:	400200a0 	.word	0x400200a0
 80090f4:	400200b8 	.word	0x400200b8
 80090f8:	40020410 	.word	0x40020410
 80090fc:	40020428 	.word	0x40020428
 8009100:	40020440 	.word	0x40020440
 8009104:	40020458 	.word	0x40020458
 8009108:	40020470 	.word	0x40020470
 800910c:	40020488 	.word	0x40020488
 8009110:	400204a0 	.word	0x400204a0
 8009114:	400204b8 	.word	0x400204b8
 8009118:	aaaaaaab 	.word	0xaaaaaaab
 800911c:	08012434 	.word	0x08012434
 8009120:	fffffc00 	.word	0xfffffc00

08009124 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d120      	bne.n	800917a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	2b03      	cmp	r3, #3
 800913e:	d858      	bhi.n	80091f2 <DMA_CheckFifoParam+0xce>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <DMA_CheckFifoParam+0x24>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009159 	.word	0x08009159
 800914c:	0800916b 	.word	0x0800916b
 8009150:	08009159 	.word	0x08009159
 8009154:	080091f3 	.word	0x080091f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d048      	beq.n	80091f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009168:	e045      	b.n	80091f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009172:	d142      	bne.n	80091fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009178:	e03f      	b.n	80091fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009182:	d123      	bne.n	80091cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009188:	2b03      	cmp	r3, #3
 800918a:	d838      	bhi.n	80091fe <DMA_CheckFifoParam+0xda>
 800918c:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <DMA_CheckFifoParam+0x70>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091ab 	.word	0x080091ab
 800919c:	080091a5 	.word	0x080091a5
 80091a0:	080091bd 	.word	0x080091bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	73fb      	strb	r3, [r7, #15]
        break;
 80091a8:	e030      	b.n	800920c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d025      	beq.n	8009202 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091ba:	e022      	b.n	8009202 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091c4:	d11f      	bne.n	8009206 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091ca:	e01c      	b.n	8009206 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d902      	bls.n	80091da <DMA_CheckFifoParam+0xb6>
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d003      	beq.n	80091e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80091d8:	e018      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	73fb      	strb	r3, [r7, #15]
        break;
 80091de:	e015      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00e      	beq.n	800920a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
    break;
 80091f0:	e00b      	b.n	800920a <DMA_CheckFifoParam+0xe6>
        break;
 80091f2:	bf00      	nop
 80091f4:	e00a      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        break;
 80091f6:	bf00      	nop
 80091f8:	e008      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        break;
 80091fa:	bf00      	nop
 80091fc:	e006      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        break;
 80091fe:	bf00      	nop
 8009200:	e004      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        break;
 8009202:	bf00      	nop
 8009204:	e002      	b.n	800920c <DMA_CheckFifoParam+0xe8>
        break;
 8009206:	bf00      	nop
 8009208:	e000      	b.n	800920c <DMA_CheckFifoParam+0xe8>
    break;
 800920a:	bf00      	nop
    }
  }

  return status;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop

0800921c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a38      	ldr	r2, [pc, #224]	; (8009310 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d022      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a36      	ldr	r2, [pc, #216]	; (8009314 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d01d      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a35      	ldr	r2, [pc, #212]	; (8009318 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d018      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a33      	ldr	r2, [pc, #204]	; (800931c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a32      	ldr	r2, [pc, #200]	; (8009320 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00e      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a30      	ldr	r2, [pc, #192]	; (8009324 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d009      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a2f      	ldr	r2, [pc, #188]	; (8009328 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d004      	beq.n	800927a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a2d      	ldr	r2, [pc, #180]	; (800932c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d101      	bne.n	800927e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800927e:	2300      	movs	r3, #0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01a      	beq.n	80092ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	3b08      	subs	r3, #8
 800928c:	4a28      	ldr	r2, [pc, #160]	; (8009330 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	091b      	lsrs	r3, r3, #4
 8009294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4b26      	ldr	r3, [pc, #152]	; (8009334 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	461a      	mov	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a24      	ldr	r2, [pc, #144]	; (8009338 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80092a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f003 031f 	and.w	r3, r3, #31
 80092b0:	2201      	movs	r2, #1
 80092b2:	409a      	lsls	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80092b8:	e024      	b.n	8009304 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	3b10      	subs	r3, #16
 80092c2:	4a1e      	ldr	r2, [pc, #120]	; (800933c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80092c4:	fba2 2303 	umull	r2, r3, r2, r3
 80092c8:	091b      	lsrs	r3, r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4a1c      	ldr	r2, [pc, #112]	; (8009340 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d806      	bhi.n	80092e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d902      	bls.n	80092e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3308      	adds	r3, #8
 80092e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4b18      	ldr	r3, [pc, #96]	; (8009348 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	461a      	mov	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a16      	ldr	r2, [pc, #88]	; (800934c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80092f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2201      	movs	r2, #1
 80092fe:	409a      	lsls	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	58025408 	.word	0x58025408
 8009314:	5802541c 	.word	0x5802541c
 8009318:	58025430 	.word	0x58025430
 800931c:	58025444 	.word	0x58025444
 8009320:	58025458 	.word	0x58025458
 8009324:	5802546c 	.word	0x5802546c
 8009328:	58025480 	.word	0x58025480
 800932c:	58025494 	.word	0x58025494
 8009330:	cccccccd 	.word	0xcccccccd
 8009334:	16009600 	.word	0x16009600
 8009338:	58025880 	.word	0x58025880
 800933c:	aaaaaaab 	.word	0xaaaaaaab
 8009340:	400204b8 	.word	0x400204b8
 8009344:	4002040f 	.word	0x4002040f
 8009348:	10008200 	.word	0x10008200
 800934c:	40020880 	.word	0x40020880

08009350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d04a      	beq.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d847      	bhi.n	80093fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a25      	ldr	r2, [pc, #148]	; (8009408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d022      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a24      	ldr	r2, [pc, #144]	; (800940c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d01d      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a22      	ldr	r2, [pc, #136]	; (8009410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d018      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a21      	ldr	r2, [pc, #132]	; (8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d013      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1f      	ldr	r2, [pc, #124]	; (8009418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00e      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1e      	ldr	r2, [pc, #120]	; (800941c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d009      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1c      	ldr	r2, [pc, #112]	; (8009420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d004      	beq.n	80093bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a1b      	ldr	r2, [pc, #108]	; (8009424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d101      	bne.n	80093c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80093c0:	2300      	movs	r3, #0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4b17      	ldr	r3, [pc, #92]	; (8009428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	461a      	mov	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a15      	ldr	r2, [pc, #84]	; (800942c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80093d8:	671a      	str	r2, [r3, #112]	; 0x70
 80093da:	e009      	b.n	80093f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4b14      	ldr	r3, [pc, #80]	; (8009430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	461a      	mov	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a11      	ldr	r2, [pc, #68]	; (8009434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80093ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2201      	movs	r2, #1
 80093f6:	409a      	lsls	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	58025408 	.word	0x58025408
 800940c:	5802541c 	.word	0x5802541c
 8009410:	58025430 	.word	0x58025430
 8009414:	58025444 	.word	0x58025444
 8009418:	58025458 	.word	0x58025458
 800941c:	5802546c 	.word	0x5802546c
 8009420:	58025480 	.word	0x58025480
 8009424:	58025494 	.word	0x58025494
 8009428:	1600963f 	.word	0x1600963f
 800942c:	58025940 	.word	0x58025940
 8009430:	1000823f 	.word	0x1000823f
 8009434:	40020940 	.word	0x40020940

08009438 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800944c:	2308      	movs	r3, #8
 800944e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009450:	4b38      	ldr	r3, [pc, #224]	; (8009534 <HAL_FLASH_Program+0xfc>)
 8009452:	7d1b      	ldrb	r3, [r3, #20]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_FLASH_Program+0x24>
 8009458:	2302      	movs	r3, #2
 800945a:	e067      	b.n	800952c <HAL_FLASH_Program+0xf4>
 800945c:	4b35      	ldr	r3, [pc, #212]	; (8009534 <HAL_FLASH_Program+0xfc>)
 800945e:	2201      	movs	r2, #1
 8009460:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009468:	d306      	bcc.n	8009478 <HAL_FLASH_Program+0x40>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009470:	d202      	bcs.n	8009478 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009472:	2301      	movs	r3, #1
 8009474:	61bb      	str	r3, [r7, #24]
 8009476:	e001      	b.n	800947c <HAL_FLASH_Program+0x44>
  }
  else
  {
    bank = FLASH_BANK_2;
 8009478:	2302      	movs	r3, #2
 800947a:	61bb      	str	r3, [r7, #24]
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800947c:	4b2d      	ldr	r3, [pc, #180]	; (8009534 <HAL_FLASH_Program+0xfc>)
 800947e:	2200      	movs	r2, #0
 8009480:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009482:	69b9      	ldr	r1, [r7, #24]
 8009484:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009488:	f000 f8bc 	bl	8009604 <FLASH_WaitForLastOperation>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8009492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009496:	2b00      	cmp	r3, #0
 8009498:	d143      	bne.n	8009522 <HAL_FLASH_Program+0xea>
  {
    if(bank == FLASH_BANK_1)
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d106      	bne.n	80094ae <HAL_FLASH_Program+0x76>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80094a0:	4b25      	ldr	r3, [pc, #148]	; (8009538 <HAL_FLASH_Program+0x100>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	4a24      	ldr	r2, [pc, #144]	; (8009538 <HAL_FLASH_Program+0x100>)
 80094a6:	f043 0302 	orr.w	r3, r3, #2
 80094aa:	60d3      	str	r3, [r2, #12]
 80094ac:	e007      	b.n	80094be <HAL_FLASH_Program+0x86>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80094ae:	4b22      	ldr	r3, [pc, #136]	; (8009538 <HAL_FLASH_Program+0x100>)
 80094b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80094b4:	4a20      	ldr	r2, [pc, #128]	; (8009538 <HAL_FLASH_Program+0x100>)
 80094b6:	f043 0302 	orr.w	r3, r3, #2
 80094ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80094be:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80094c2:	f3bf 8f4f 	dsb	sy
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	3304      	adds	r3, #4
 80094d2:	623b      	str	r3, [r7, #32]
        src_addr++;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	3304      	adds	r3, #4
 80094d8:	61fb      	str	r3, [r7, #28]
        row_index--;
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	3b01      	subs	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1ef      	bne.n	80094c6 <HAL_FLASH_Program+0x8e>
  __ASM volatile ("isb 0xF":::"memory");
 80094e6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80094ea:	f3bf 8f4f 	dsb	sy

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80094ee:	69b9      	ldr	r1, [r7, #24]
 80094f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80094f4:	f000 f886 	bl	8009604 <FLASH_WaitForLastOperation>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d106      	bne.n	8009512 <HAL_FLASH_Program+0xda>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009504:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <HAL_FLASH_Program+0x100>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	4a0b      	ldr	r2, [pc, #44]	; (8009538 <HAL_FLASH_Program+0x100>)
 800950a:	f023 0302 	bic.w	r3, r3, #2
 800950e:	60d3      	str	r3, [r2, #12]
 8009510:	e007      	b.n	8009522 <HAL_FLASH_Program+0xea>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <HAL_FLASH_Program+0x100>)
 8009514:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009518:	4a07      	ldr	r2, [pc, #28]	; (8009538 <HAL_FLASH_Program+0x100>)
 800951a:	f023 0302 	bic.w	r3, r3, #2
 800951e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009522:	4b04      	ldr	r3, [pc, #16]	; (8009534 <HAL_FLASH_Program+0xfc>)
 8009524:	2200      	movs	r2, #0
 8009526:	751a      	strb	r2, [r3, #20]

  return status;
 8009528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800952c:	4618      	mov	r0, r3
 800952e:	3728      	adds	r7, #40	; 0x28
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	24000dd4 	.word	0x24000dd4
 8009538:	52002000 	.word	0x52002000

0800953c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009540:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00d      	beq.n	8009568 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <HAL_FLASH_Unlock+0x6c>)
 8009550:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009552:	4b14      	ldr	r3, [pc, #80]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 8009554:	4a15      	ldr	r2, [pc, #84]	; (80095ac <HAL_FLASH_Unlock+0x70>)
 8009556:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009558:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e018      	b.n	800959a <HAL_FLASH_Unlock+0x5e>
    }
  }

  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 800956a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d010      	beq.n	8009598 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8009576:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 8009578:	4a0b      	ldr	r2, [pc, #44]	; (80095a8 <HAL_FLASH_Unlock+0x6c>)
 800957a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 8009580:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <HAL_FLASH_Unlock+0x70>)
 8009582:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009586:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <HAL_FLASH_Unlock+0x68>)
 8009588:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <HAL_FLASH_Unlock+0x5e>
    }
  }

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	52002000 	.word	0x52002000
 80095a8:	45670123 	.word	0x45670123
 80095ac:	cdef89ab 	.word	0xcdef89ab

080095b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80095b4:	4b12      	ldr	r3, [pc, #72]	; (8009600 <HAL_FLASH_Lock+0x50>)
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	4a11      	ldr	r2, [pc, #68]	; (8009600 <HAL_FLASH_Lock+0x50>)
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80095c0:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <HAL_FLASH_Lock+0x50>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e011      	b.n	80095f4 <HAL_FLASH_Lock+0x44>
  }

  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <HAL_FLASH_Lock+0x50>)
 80095d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80095d6:	4a0a      	ldr	r2, [pc, #40]	; (8009600 <HAL_FLASH_Lock+0x50>)
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <HAL_FLASH_Lock+0x50>)
 80095e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <HAL_FLASH_Lock+0x44>
  }

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	52002000 	.word	0x52002000

08009604 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 800960e:	f7fc f915 	bl	800583c <HAL_GetTick>
 8009612:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d102      	bne.n	8009620 <FLASH_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_QW_BANK1;
 800961a:	2304      	movs	r3, #4
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	e013      	b.n	8009648 <FLASH_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
 8009620:	4b41      	ldr	r3, [pc, #260]	; (8009728 <FLASH_WaitForLastOperation+0x124>)
 8009622:	617b      	str	r3, [r7, #20]
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009624:	e010      	b.n	8009648 <FLASH_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962c:	d00c      	beq.n	8009648 <FLASH_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800962e:	f7fc f905 	bl	800583c <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d302      	bcc.n	8009644 <FLASH_WaitForLastOperation+0x40>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <FLASH_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e06a      	b.n	800971e <FLASH_WaitForLastOperation+0x11a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4b38      	ldr	r3, [pc, #224]	; (800972c <FLASH_WaitForLastOperation+0x128>)
 800964c:	4013      	ands	r3, r2
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	429a      	cmp	r2, r3
 8009652:	d10a      	bne.n	800966a <FLASH_WaitForLastOperation+0x66>
 8009654:	4b36      	ldr	r3, [pc, #216]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4013      	ands	r3, r2
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	429a      	cmp	r2, r3
 8009660:	bf0c      	ite	eq
 8009662:	2301      	moveq	r3, #1
 8009664:	2300      	movne	r3, #0
 8009666:	b2db      	uxtb	r3, r3
 8009668:	e00c      	b.n	8009684 <FLASH_WaitForLastOperation+0x80>
 800966a:	4b31      	ldr	r3, [pc, #196]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 800966c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009670:	43da      	mvns	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	4013      	ands	r3, r2
 8009676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf0c      	ite	eq
 800967e:	2301      	moveq	r3, #1
 8009680:	2300      	movne	r3, #0
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1ce      	bne.n	8009626 <FLASH_WaitForLastOperation+0x22>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d105      	bne.n	800969a <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800968e:	4b28      	ldr	r3, [pc, #160]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 8009690:	691a      	ldr	r2, [r3, #16]
 8009692:	4b28      	ldr	r3, [pc, #160]	; (8009734 <FLASH_WaitForLastOperation+0x130>)
 8009694:	4013      	ands	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	e007      	b.n	80096aa <FLASH_WaitForLastOperation+0xa6>
  }
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800969a:	4b25      	ldr	r3, [pc, #148]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 800969c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80096a0:	4b24      	ldr	r3, [pc, #144]	; (8009734 <FLASH_WaitForLastOperation+0x130>)
 80096a2:	4013      	ands	r3, r2
 80096a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	613b      	str	r3, [r7, #16]
  }

  /* In case of error reported in Flash SR1 or SR2 registers (ECCC not managed as an error) */
  if((errorflag & 0x7DFFFFFFU) != 0U)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d017      	beq.n	80096e4 <FLASH_WaitForLastOperation+0xe0>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80096b4:	4b20      	ldr	r3, [pc, #128]	; (8009738 <FLASH_WaitForLastOperation+0x134>)
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	4a1e      	ldr	r2, [pc, #120]	; (8009738 <FLASH_WaitForLastOperation+0x134>)
 80096be:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4b1a      	ldr	r3, [pc, #104]	; (800972c <FLASH_WaitForLastOperation+0x128>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d103      	bne.n	80096d4 <FLASH_WaitForLastOperation+0xd0>
 80096cc:	4a18      	ldr	r2, [pc, #96]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	6153      	str	r3, [r2, #20]
 80096d2:	e005      	b.n	80096e0 <FLASH_WaitForLastOperation+0xdc>
 80096d4:	4a16      	ldr	r2, [pc, #88]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096dc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e01c      	b.n	800971e <FLASH_WaitForLastOperation+0x11a>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d10b      	bne.n	8009702 <FLASH_WaitForLastOperation+0xfe>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80096ea:	4b11      	ldr	r3, [pc, #68]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f6:	d111      	bne.n	800971c <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80096f8:	4b0d      	ldr	r3, [pc, #52]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 80096fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80096fe:	615a      	str	r2, [r3, #20]
 8009700:	e00c      	b.n	800971c <FLASH_WaitForLastOperation+0x118>
    }
  }
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8009702:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 8009704:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009710:	d104      	bne.n	800971c <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8009712:	4b07      	ldr	r3, [pc, #28]	; (8009730 <FLASH_WaitForLastOperation+0x12c>)
 8009714:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009718:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	80000004 	.word	0x80000004
 800972c:	1fef000f 	.word	0x1fef000f
 8009730:	52002000 	.word	0x52002000
 8009734:	17ee0000 	.word	0x17ee0000
 8009738:	24000dd4 	.word	0x24000dd4

0800973c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800974a:	4b5e      	ldr	r3, [pc, #376]	; (80098c4 <HAL_FLASHEx_Erase+0x188>)
 800974c:	7d1b      	ldrb	r3, [r3, #20]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_FLASHEx_Erase+0x1a>
 8009752:	2302      	movs	r3, #2
 8009754:	e0b2      	b.n	80098bc <HAL_FLASHEx_Erase+0x180>
 8009756:	4b5b      	ldr	r3, [pc, #364]	; (80098c4 <HAL_FLASHEx_Erase+0x188>)
 8009758:	2201      	movs	r2, #1
 800975a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800975c:	4b59      	ldr	r3, [pc, #356]	; (80098c4 <HAL_FLASHEx_Erase+0x188>)
 800975e:	2200      	movs	r2, #0
 8009760:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800976e:	2101      	movs	r1, #1
 8009770:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009774:	f7ff ff46 	bl	8009604 <FLASH_WaitForLastOperation>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800978e:	2102      	movs	r1, #2
 8009790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009794:	f7ff ff36 	bl	8009604 <FLASH_WaitForLastOperation>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  if(status == HAL_OK)
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f040 8085 	bne.w	80098b4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d136      	bne.n	8009820 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691a      	ldr	r2, [r3, #16]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f000 f887 	bl	80098d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00f      	beq.n	80097ee <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80097ce:	2101      	movs	r1, #1
 80097d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80097d4:	f7ff ff16 	bl	8009604 <FLASH_WaitForLastOperation>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80097e2:	4b39      	ldr	r3, [pc, #228]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	4a38      	ldr	r2, [pc, #224]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 80097e8:	f023 0308 	bic.w	r3, r3, #8
 80097ec:	60d3      	str	r3, [r2, #12]
      }
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d05c      	beq.n	80098b4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80097fa:	2102      	movs	r1, #2
 80097fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009800:	f7ff ff00 	bl	8009604 <FLASH_WaitForLastOperation>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 8009810:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009814:	4a2c      	ldr	r2, [pc, #176]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 8009816:	f023 0308 	bic.w	r3, r3, #8
 800981a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800981e:	e049      	b.n	80098b4 <HAL_FLASHEx_Erase+0x178>
      }
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	60bb      	str	r3, [r7, #8]
 800982e:	e039      	b.n	80098a4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6859      	ldr	r1, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	461a      	mov	r2, r3
 800983a:	68b8      	ldr	r0, [r7, #8]
 800983c:	f000 f8b2 	bl	80099a4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00c      	beq.n	8009866 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800984c:	2101      	movs	r1, #1
 800984e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009852:	f7ff fed7 	bl	8009604 <FLASH_WaitForLastOperation>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800985a:	4b1b      	ldr	r3, [pc, #108]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	491a      	ldr	r1, [pc, #104]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 8009860:	4b1a      	ldr	r3, [pc, #104]	; (80098cc <HAL_FLASHEx_Erase+0x190>)
 8009862:	4013      	ands	r3, r2
 8009864:	60cb      	str	r3, [r1, #12]
        }
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00e      	beq.n	8009890 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8009872:	2102      	movs	r1, #2
 8009874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009878:	f7ff fec4 	bl	8009604 <FLASH_WaitForLastOperation>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 8009882:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009886:	4910      	ldr	r1, [pc, #64]	; (80098c8 <HAL_FLASHEx_Erase+0x18c>)
 8009888:	4b10      	ldr	r3, [pc, #64]	; (80098cc <HAL_FLASHEx_Erase+0x190>)
 800988a:	4013      	ands	r3, r2
 800988c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }

        if(status != HAL_OK)
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	601a      	str	r2, [r3, #0]
          break;
 800989c:	e00a      	b.n	80098b4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60bb      	str	r3, [r7, #8]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d3bd      	bcc.n	8009830 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80098b4:	4b03      	ldr	r3, [pc, #12]	; (80098c4 <HAL_FLASHEx_Erase+0x188>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	751a      	strb	r2, [r3, #20]

  return status;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	24000dd4 	.word	0x24000dd4
 80098c8:	52002000 	.word	0x52002000
 80098cc:	fffff8fb 	.word	0xfffff8fb

080098d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f003 0303 	and.w	r3, r3, #3
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d122      	bne.n	800992a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80098e4:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <FLASH_MassErase+0xd0>)
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	4a2d      	ldr	r2, [pc, #180]	; (80099a0 <FLASH_MassErase+0xd0>)
 80098ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80098ee:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80098f0:	4b2b      	ldr	r3, [pc, #172]	; (80099a0 <FLASH_MassErase+0xd0>)
 80098f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80098f6:	4a2a      	ldr	r2, [pc, #168]	; (80099a0 <FLASH_MassErase+0xd0>)
 80098f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80098fc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8009900:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	4926      	ldr	r1, [pc, #152]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4313      	orrs	r3, r2
 800990a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800990c:	4b24      	ldr	r3, [pc, #144]	; (80099a0 <FLASH_MassErase+0xd0>)
 800990e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009912:	4923      	ldr	r1, [pc, #140]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4313      	orrs	r3, r2
 8009918:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800991c:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <FLASH_MassErase+0xd0>)
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	4a1f      	ldr	r2, [pc, #124]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009922:	f043 0310 	orr.w	r3, r3, #16
 8009926:	6193      	str	r3, [r2, #24]

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
  }
}
 8009928:	e033      	b.n	8009992 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d011      	beq.n	8009958 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8009934:	4b1a      	ldr	r3, [pc, #104]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	4a19      	ldr	r2, [pc, #100]	; (80099a0 <FLASH_MassErase+0xd0>)
 800993a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800993e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8009940:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009942:	68da      	ldr	r2, [r3, #12]
 8009944:	4916      	ldr	r1, [pc, #88]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4313      	orrs	r3, r2
 800994a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800994c:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <FLASH_MassErase+0xd0>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	4a13      	ldr	r2, [pc, #76]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009952:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8009956:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d017      	beq.n	8009992 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8009962:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009964:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009968:	4a0d      	ldr	r2, [pc, #52]	; (80099a0 <FLASH_MassErase+0xd0>)
 800996a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800996e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8009972:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009974:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8009978:	4909      	ldr	r1, [pc, #36]	; (80099a0 <FLASH_MassErase+0xd0>)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4313      	orrs	r3, r2
 800997e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8009982:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <FLASH_MassErase+0xd0>)
 8009984:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009988:	4a05      	ldr	r2, [pc, #20]	; (80099a0 <FLASH_MassErase+0xd0>)
 800998a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800998e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	52002000 	.word	0x52002000

080099a4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80099ba:	4b18      	ldr	r3, [pc, #96]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	4a17      	ldr	r2, [pc, #92]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099c0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80099c4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80099c6:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	0219      	lsls	r1, r3, #8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	430b      	orrs	r3, r1
 80099d2:	4313      	orrs	r3, r2
 80099d4:	4a11      	ldr	r2, [pc, #68]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099d6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80099da:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d014      	beq.n	8009a10 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80099ec:	4a0b      	ldr	r2, [pc, #44]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099ee:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80099f2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 80099f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	0219      	lsls	r1, r3, #8
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	430b      	orrs	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <FLASH_Erase_Sector+0x78>)
 8009a08:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8009a0c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    FLASH->CR2 &= ~(FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
}
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	52002000 	.word	0x52002000

08009a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b089      	sub	sp, #36	; 0x24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009a2e:	4b89      	ldr	r3, [pc, #548]	; (8009c54 <HAL_GPIO_Init+0x234>)
 8009a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a32:	e194      	b.n	8009d5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	2101      	movs	r1, #1
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a40:	4013      	ands	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8186 	beq.w	8009d58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d00b      	beq.n	8009a6c <HAL_GPIO_Init+0x4c>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d007      	beq.n	8009a6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a60:	2b11      	cmp	r3, #17
 8009a62:	d003      	beq.n	8009a6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	2b12      	cmp	r3, #18
 8009a6a:	d130      	bne.n	8009ace <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	2203      	movs	r2, #3
 8009a78:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7c:	43db      	mvns	r3, r3
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	4013      	ands	r3, r2
 8009a82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aaa:	43db      	mvns	r3, r3
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	f003 0201 	and.w	r2, r3, #1
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	2203      	movs	r2, #3
 8009ada:	fa02 f303 	lsl.w	r3, r2, r3
 8009ade:	43db      	mvns	r3, r3
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	fa02 f303 	lsl.w	r3, r2, r3
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d003      	beq.n	8009b0e <HAL_GPIO_Init+0xee>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b12      	cmp	r3, #18
 8009b0c:	d123      	bne.n	8009b56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	08da      	lsrs	r2, r3, #3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3208      	adds	r2, #8
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	f003 0307 	and.w	r3, r3, #7
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	220f      	movs	r2, #15
 8009b26:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2a:	43db      	mvns	r3, r3
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	4013      	ands	r3, r2
 8009b30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	08da      	lsrs	r2, r3, #3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3208      	adds	r2, #8
 8009b50:	69b9      	ldr	r1, [r7, #24]
 8009b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	2203      	movs	r2, #3
 8009b62:	fa02 f303 	lsl.w	r3, r2, r3
 8009b66:	43db      	mvns	r3, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f003 0203 	and.w	r2, r3, #3
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80e0 	beq.w	8009d58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b98:	4b2f      	ldr	r3, [pc, #188]	; (8009c58 <HAL_GPIO_Init+0x238>)
 8009b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b9e:	4a2e      	ldr	r2, [pc, #184]	; (8009c58 <HAL_GPIO_Init+0x238>)
 8009ba0:	f043 0302 	orr.w	r3, r3, #2
 8009ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ba8:	4b2b      	ldr	r3, [pc, #172]	; (8009c58 <HAL_GPIO_Init+0x238>)
 8009baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009bb6:	4a29      	ldr	r2, [pc, #164]	; (8009c5c <HAL_GPIO_Init+0x23c>)
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	089b      	lsrs	r3, r3, #2
 8009bbc:	3302      	adds	r3, #2
 8009bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	220f      	movs	r2, #15
 8009bce:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd2:	43db      	mvns	r3, r3
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a20      	ldr	r2, [pc, #128]	; (8009c60 <HAL_GPIO_Init+0x240>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d052      	beq.n	8009c88 <HAL_GPIO_Init+0x268>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a1f      	ldr	r2, [pc, #124]	; (8009c64 <HAL_GPIO_Init+0x244>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d031      	beq.n	8009c4e <HAL_GPIO_Init+0x22e>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <HAL_GPIO_Init+0x248>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d02b      	beq.n	8009c4a <HAL_GPIO_Init+0x22a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a1d      	ldr	r2, [pc, #116]	; (8009c6c <HAL_GPIO_Init+0x24c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d025      	beq.n	8009c46 <HAL_GPIO_Init+0x226>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a1c      	ldr	r2, [pc, #112]	; (8009c70 <HAL_GPIO_Init+0x250>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d01f      	beq.n	8009c42 <HAL_GPIO_Init+0x222>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a1b      	ldr	r2, [pc, #108]	; (8009c74 <HAL_GPIO_Init+0x254>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d019      	beq.n	8009c3e <HAL_GPIO_Init+0x21e>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a1a      	ldr	r2, [pc, #104]	; (8009c78 <HAL_GPIO_Init+0x258>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d013      	beq.n	8009c3a <HAL_GPIO_Init+0x21a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a19      	ldr	r2, [pc, #100]	; (8009c7c <HAL_GPIO_Init+0x25c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00d      	beq.n	8009c36 <HAL_GPIO_Init+0x216>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a18      	ldr	r2, [pc, #96]	; (8009c80 <HAL_GPIO_Init+0x260>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d007      	beq.n	8009c32 <HAL_GPIO_Init+0x212>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a17      	ldr	r2, [pc, #92]	; (8009c84 <HAL_GPIO_Init+0x264>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d101      	bne.n	8009c2e <HAL_GPIO_Init+0x20e>
 8009c2a:	2309      	movs	r3, #9
 8009c2c:	e02d      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c2e:	230a      	movs	r3, #10
 8009c30:	e02b      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c32:	2308      	movs	r3, #8
 8009c34:	e029      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c36:	2307      	movs	r3, #7
 8009c38:	e027      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c3a:	2306      	movs	r3, #6
 8009c3c:	e025      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c3e:	2305      	movs	r3, #5
 8009c40:	e023      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c42:	2304      	movs	r3, #4
 8009c44:	e021      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c46:	2303      	movs	r3, #3
 8009c48:	e01f      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e01d      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e01b      	b.n	8009c8a <HAL_GPIO_Init+0x26a>
 8009c52:	bf00      	nop
 8009c54:	58000080 	.word	0x58000080
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	58000400 	.word	0x58000400
 8009c60:	58020000 	.word	0x58020000
 8009c64:	58020400 	.word	0x58020400
 8009c68:	58020800 	.word	0x58020800
 8009c6c:	58020c00 	.word	0x58020c00
 8009c70:	58021000 	.word	0x58021000
 8009c74:	58021400 	.word	0x58021400
 8009c78:	58021800 	.word	0x58021800
 8009c7c:	58021c00 	.word	0x58021c00
 8009c80:	58022000 	.word	0x58022000
 8009c84:	58022400 	.word	0x58022400
 8009c88:	2300      	movs	r3, #0
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	f002 0203 	and.w	r2, r2, #3
 8009c90:	0092      	lsls	r2, r2, #2
 8009c92:	4093      	lsls	r3, r2
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c9a:	4938      	ldr	r1, [pc, #224]	; (8009d7c <HAL_GPIO_Init+0x35c>)
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	089b      	lsrs	r3, r3, #2
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	69ba      	ldr	r2, [r7, #24]
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	69ba      	ldr	r2, [r7, #24]
 8009cd0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	43db      	mvns	r3, r3
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	43db      	mvns	r3, r3
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	43db      	mvns	r3, r3
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f47f ae63 	bne.w	8009a34 <HAL_GPIO_Init+0x14>
  }
}
 8009d6e:	bf00      	nop
 8009d70:	3724      	adds	r7, #36	; 0x24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	58000400 	.word	0x58000400

08009d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691a      	ldr	r2, [r3, #16]
 8009d90:	887b      	ldrh	r3, [r7, #2]
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
 8009d9c:	e001      	b.n	8009da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	807b      	strh	r3, [r7, #2]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009dc0:	787b      	ldrb	r3, [r7, #1]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dc6:	887a      	ldrh	r2, [r7, #2]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009dcc:	e003      	b.n	8009dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009dce:	887b      	ldrh	r3, [r7, #2]
 8009dd0:	041a      	lsls	r2, r3, #16
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	619a      	str	r2, [r3, #24]
}
 8009dd6:	bf00      	nop
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695a      	ldr	r2, [r3, #20]
 8009df2:	887b      	ldrh	r3, [r7, #2]
 8009df4:	401a      	ands	r2, r3
 8009df6:	887b      	ldrh	r3, [r7, #2]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d104      	bne.n	8009e06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009dfc:	887b      	ldrh	r3, [r7, #2]
 8009dfe:	041a      	lsls	r2, r3, #16
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009e04:	e002      	b.n	8009e0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009e06:	887a      	ldrh	r2, [r7, #2]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	619a      	str	r2, [r3, #24]
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e20:	4b19      	ldr	r3, [pc, #100]	; (8009e88 <HAL_PWREx_ConfigSupply+0x70>)
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d00a      	beq.n	8009e42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e2c:	4b16      	ldr	r3, [pc, #88]	; (8009e88 <HAL_PWREx_ConfigSupply+0x70>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d001      	beq.n	8009e3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e01f      	b.n	8009e7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e01d      	b.n	8009e7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e42:	4b11      	ldr	r3, [pc, #68]	; (8009e88 <HAL_PWREx_ConfigSupply+0x70>)
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f023 0207 	bic.w	r2, r3, #7
 8009e4a:	490f      	ldr	r1, [pc, #60]	; (8009e88 <HAL_PWREx_ConfigSupply+0x70>)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e52:	f7fb fcf3 	bl	800583c <HAL_GetTick>
 8009e56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e58:	e009      	b.n	8009e6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009e5a:	f7fb fcef 	bl	800583c <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e68:	d901      	bls.n	8009e6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e007      	b.n	8009e7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <HAL_PWREx_ConfigSupply+0x70>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7a:	d1ee      	bne.n	8009e5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	58024800 	.word	0x58024800

08009e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08c      	sub	sp, #48	; 0x30
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e3c4      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8087 	beq.w	8009fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009eac:	4ba2      	ldr	r3, [pc, #648]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009eb6:	4ba0      	ldr	r3, [pc, #640]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d007      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x46>
 8009ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec4:	2b18      	cmp	r3, #24
 8009ec6:	d110      	bne.n	8009eea <HAL_RCC_OscConfig+0x5e>
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d10b      	bne.n	8009eea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed2:	4b99      	ldr	r3, [pc, #612]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d06c      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x12c>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d168      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e39e      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef2:	d106      	bne.n	8009f02 <HAL_RCC_OscConfig+0x76>
 8009ef4:	4b90      	ldr	r3, [pc, #576]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a8f      	ldr	r2, [pc, #572]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	e02e      	b.n	8009f60 <HAL_RCC_OscConfig+0xd4>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10c      	bne.n	8009f24 <HAL_RCC_OscConfig+0x98>
 8009f0a:	4b8b      	ldr	r3, [pc, #556]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a8a      	ldr	r2, [pc, #552]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	4b88      	ldr	r3, [pc, #544]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a87      	ldr	r2, [pc, #540]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	e01d      	b.n	8009f60 <HAL_RCC_OscConfig+0xd4>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f2c:	d10c      	bne.n	8009f48 <HAL_RCC_OscConfig+0xbc>
 8009f2e:	4b82      	ldr	r3, [pc, #520]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a81      	ldr	r2, [pc, #516]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	4b7f      	ldr	r3, [pc, #508]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a7e      	ldr	r2, [pc, #504]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	e00b      	b.n	8009f60 <HAL_RCC_OscConfig+0xd4>
 8009f48:	4b7b      	ldr	r3, [pc, #492]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a7a      	ldr	r2, [pc, #488]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	4b78      	ldr	r3, [pc, #480]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a77      	ldr	r2, [pc, #476]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d013      	beq.n	8009f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f68:	f7fb fc68 	bl	800583c <HAL_GetTick>
 8009f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f70:	f7fb fc64 	bl	800583c <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b64      	cmp	r3, #100	; 0x64
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e352      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f82:	4b6d      	ldr	r3, [pc, #436]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0xe4>
 8009f8e:	e014      	b.n	8009fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f90:	f7fb fc54 	bl	800583c <HAL_GetTick>
 8009f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f98:	f7fb fc50 	bl	800583c <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b64      	cmp	r3, #100	; 0x64
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e33e      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009faa:	4b63      	ldr	r3, [pc, #396]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <HAL_RCC_OscConfig+0x10c>
 8009fb6:	e000      	b.n	8009fba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 8092 	beq.w	800a0ec <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fc8:	4b5b      	ldr	r3, [pc, #364]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fd2:	4b59      	ldr	r3, [pc, #356]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d007      	beq.n	8009fee <HAL_RCC_OscConfig+0x162>
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	2b18      	cmp	r3, #24
 8009fe2:	d12d      	bne.n	800a040 <HAL_RCC_OscConfig+0x1b4>
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d128      	bne.n	800a040 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fee:	4b52      	ldr	r3, [pc, #328]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <HAL_RCC_OscConfig+0x17a>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e310      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a006:	f7fb fc47 	bl	8005898 <HAL_GetREVID>
 800a00a:	4602      	mov	r2, r0
 800a00c:	f241 0303 	movw	r3, #4099	; 0x1003
 800a010:	429a      	cmp	r2, r3
 800a012:	d80a      	bhi.n	800a02a <HAL_RCC_OscConfig+0x19e>
 800a014:	4b48      	ldr	r3, [pc, #288]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	031b      	lsls	r3, r3, #12
 800a022:	4945      	ldr	r1, [pc, #276]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a024:	4313      	orrs	r3, r2
 800a026:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a028:	e060      	b.n	800a0ec <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a02a:	4b43      	ldr	r3, [pc, #268]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	061b      	lsls	r3, r3, #24
 800a038:	493f      	ldr	r1, [pc, #252]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a03e:	e055      	b.n	800a0ec <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d038      	beq.n	800a0ba <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a048:	4b3b      	ldr	r3, [pc, #236]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f023 0219 	bic.w	r2, r3, #25
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	4938      	ldr	r1, [pc, #224]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a056:	4313      	orrs	r3, r2
 800a058:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a05a:	f7fb fbef 	bl	800583c <HAL_GetTick>
 800a05e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a060:	e008      	b.n	800a074 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a062:	f7fb fbeb 	bl	800583c <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d901      	bls.n	800a074 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e2d9      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a074:	4b30      	ldr	r3, [pc, #192]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0f0      	beq.n	800a062 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a080:	f7fb fc0a 	bl	8005898 <HAL_GetREVID>
 800a084:	4602      	mov	r2, r0
 800a086:	f241 0303 	movw	r3, #4099	; 0x1003
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d80a      	bhi.n	800a0a4 <HAL_RCC_OscConfig+0x218>
 800a08e:	4b2a      	ldr	r3, [pc, #168]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	031b      	lsls	r3, r3, #12
 800a09c:	4926      	ldr	r1, [pc, #152]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	604b      	str	r3, [r1, #4]
 800a0a2:	e023      	b.n	800a0ec <HAL_RCC_OscConfig+0x260>
 800a0a4:	4b24      	ldr	r3, [pc, #144]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	061b      	lsls	r3, r3, #24
 800a0b2:	4921      	ldr	r1, [pc, #132]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	604b      	str	r3, [r1, #4]
 800a0b8:	e018      	b.n	800a0ec <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0ba:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c6:	f7fb fbb9 	bl	800583c <HAL_GetTick>
 800a0ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0cc:	e008      	b.n	800a0e0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0ce:	f7fb fbb5 	bl	800583c <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d901      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e2a3      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0e0:	4b15      	ldr	r3, [pc, #84]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1f0      	bne.n	800a0ce <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 8091 	beq.w	800a21c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a102:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a104:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a108:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d007      	beq.n	800a120 <HAL_RCC_OscConfig+0x294>
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	2b18      	cmp	r3, #24
 800a114:	d12f      	bne.n	800a176 <HAL_RCC_OscConfig+0x2ea>
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f003 0303 	and.w	r3, r3, #3
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d12a      	bne.n	800a176 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <HAL_RCC_OscConfig+0x2ac>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <HAL_RCC_OscConfig+0x2b0>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	2b80      	cmp	r3, #128	; 0x80
 800a132:	d003      	beq.n	800a13c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e277      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
 800a138:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a13c:	f7fb fbac 	bl	8005898 <HAL_GetREVID>
 800a140:	4602      	mov	r2, r0
 800a142:	f241 0303 	movw	r3, #4099	; 0x1003
 800a146:	429a      	cmp	r2, r3
 800a148:	d80a      	bhi.n	800a160 <HAL_RCC_OscConfig+0x2d4>
 800a14a:	4ba2      	ldr	r3, [pc, #648]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	069b      	lsls	r3, r3, #26
 800a158:	499e      	ldr	r1, [pc, #632]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a15e:	e05d      	b.n	800a21c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a160:	4b9c      	ldr	r3, [pc, #624]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	061b      	lsls	r3, r3, #24
 800a16e:	4999      	ldr	r1, [pc, #612]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a170:	4313      	orrs	r3, r2
 800a172:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a174:	e052      	b.n	800a21c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d035      	beq.n	800a1ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a17e:	4b95      	ldr	r3, [pc, #596]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a94      	ldr	r2, [pc, #592]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a18a:	f7fb fb57 	bl	800583c <HAL_GetTick>
 800a18e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a190:	e008      	b.n	800a1a4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a192:	f7fb fb53 	bl	800583c <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d901      	bls.n	800a1a4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e241      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1a4:	4b8b      	ldr	r3, [pc, #556]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0f0      	beq.n	800a192 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1b0:	f7fb fb72 	bl	8005898 <HAL_GetREVID>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	f241 0303 	movw	r3, #4099	; 0x1003
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d80a      	bhi.n	800a1d4 <HAL_RCC_OscConfig+0x348>
 800a1be:	4b85      	ldr	r3, [pc, #532]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	069b      	lsls	r3, r3, #26
 800a1cc:	4981      	ldr	r1, [pc, #516]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	604b      	str	r3, [r1, #4]
 800a1d2:	e023      	b.n	800a21c <HAL_RCC_OscConfig+0x390>
 800a1d4:	4b7f      	ldr	r3, [pc, #508]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	061b      	lsls	r3, r3, #24
 800a1e2:	497c      	ldr	r1, [pc, #496]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60cb      	str	r3, [r1, #12]
 800a1e8:	e018      	b.n	800a21c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1ea:	4b7a      	ldr	r3, [pc, #488]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a79      	ldr	r2, [pc, #484]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a1f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f6:	f7fb fb21 	bl	800583c <HAL_GetTick>
 800a1fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1fc:	e008      	b.n	800a210 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a1fe:	f7fb fb1d 	bl	800583c <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e20b      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a210:	4b70      	ldr	r3, [pc, #448]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f0      	bne.n	800a1fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b00      	cmp	r3, #0
 800a226:	d036      	beq.n	800a296 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d019      	beq.n	800a264 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a230:	4b68      	ldr	r3, [pc, #416]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a234:	4a67      	ldr	r2, [pc, #412]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a23c:	f7fb fafe 	bl	800583c <HAL_GetTick>
 800a240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a242:	e008      	b.n	800a256 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a244:	f7fb fafa 	bl	800583c <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e1e8      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a256:	4b5f      	ldr	r3, [pc, #380]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0f0      	beq.n	800a244 <HAL_RCC_OscConfig+0x3b8>
 800a262:	e018      	b.n	800a296 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a264:	4b5b      	ldr	r3, [pc, #364]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a268:	4a5a      	ldr	r2, [pc, #360]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a26a:	f023 0301 	bic.w	r3, r3, #1
 800a26e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a270:	f7fb fae4 	bl	800583c <HAL_GetTick>
 800a274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a276:	e008      	b.n	800a28a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a278:	f7fb fae0 	bl	800583c <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b02      	cmp	r3, #2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e1ce      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a28a:	4b52      	ldr	r3, [pc, #328]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f0      	bne.n	800a278 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d036      	beq.n	800a310 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d019      	beq.n	800a2de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2aa:	4b4a      	ldr	r3, [pc, #296]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a49      	ldr	r2, [pc, #292]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a2b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2b6:	f7fb fac1 	bl	800583c <HAL_GetTick>
 800a2ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2bc:	e008      	b.n	800a2d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2be:	f7fb fabd 	bl	800583c <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d901      	bls.n	800a2d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e1ab      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2d0:	4b40      	ldr	r3, [pc, #256]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0f0      	beq.n	800a2be <HAL_RCC_OscConfig+0x432>
 800a2dc:	e018      	b.n	800a310 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2de:	4b3d      	ldr	r3, [pc, #244]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a3c      	ldr	r2, [pc, #240]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a2e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2ea:	f7fb faa7 	bl	800583c <HAL_GetTick>
 800a2ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2f0:	e008      	b.n	800a304 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2f2:	f7fb faa3 	bl	800583c <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d901      	bls.n	800a304 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e191      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a304:	4b33      	ldr	r3, [pc, #204]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1f0      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 8086 	beq.w	800a42a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a31e:	4b2e      	ldr	r3, [pc, #184]	; (800a3d8 <HAL_RCC_OscConfig+0x54c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a2d      	ldr	r2, [pc, #180]	; (800a3d8 <HAL_RCC_OscConfig+0x54c>)
 800a324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a32a:	f7fb fa87 	bl	800583c <HAL_GetTick>
 800a32e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a330:	e008      	b.n	800a344 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a332:	f7fb fa83 	bl	800583c <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b64      	cmp	r3, #100	; 0x64
 800a33e:	d901      	bls.n	800a344 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e171      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a344:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <HAL_RCC_OscConfig+0x54c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0f0      	beq.n	800a332 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d106      	bne.n	800a366 <HAL_RCC_OscConfig+0x4da>
 800a358:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35c:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a35e:	f043 0301 	orr.w	r3, r3, #1
 800a362:	6713      	str	r3, [r2, #112]	; 0x70
 800a364:	e02d      	b.n	800a3c2 <HAL_RCC_OscConfig+0x536>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10c      	bne.n	800a388 <HAL_RCC_OscConfig+0x4fc>
 800a36e:	4b19      	ldr	r3, [pc, #100]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a372:	4a18      	ldr	r2, [pc, #96]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a374:	f023 0301 	bic.w	r3, r3, #1
 800a378:	6713      	str	r3, [r2, #112]	; 0x70
 800a37a:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37e:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a380:	f023 0304 	bic.w	r3, r3, #4
 800a384:	6713      	str	r3, [r2, #112]	; 0x70
 800a386:	e01c      	b.n	800a3c2 <HAL_RCC_OscConfig+0x536>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	2b05      	cmp	r3, #5
 800a38e:	d10c      	bne.n	800a3aa <HAL_RCC_OscConfig+0x51e>
 800a390:	4b10      	ldr	r3, [pc, #64]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a394:	4a0f      	ldr	r2, [pc, #60]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a396:	f043 0304 	orr.w	r3, r3, #4
 800a39a:	6713      	str	r3, [r2, #112]	; 0x70
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a8:	e00b      	b.n	800a3c2 <HAL_RCC_OscConfig+0x536>
 800a3aa:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ae:	4a09      	ldr	r2, [pc, #36]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a3b0:	f023 0301 	bic.w	r3, r3, #1
 800a3b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ba:	4a06      	ldr	r2, [pc, #24]	; (800a3d4 <HAL_RCC_OscConfig+0x548>)
 800a3bc:	f023 0304 	bic.w	r3, r3, #4
 800a3c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01a      	beq.n	800a400 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ca:	f7fb fa37 	bl	800583c <HAL_GetTick>
 800a3ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3d0:	e00f      	b.n	800a3f2 <HAL_RCC_OscConfig+0x566>
 800a3d2:	bf00      	nop
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3dc:	f7fb fa2e 	bl	800583c <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e11a      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3f2:	4b8f      	ldr	r3, [pc, #572]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0ee      	beq.n	800a3dc <HAL_RCC_OscConfig+0x550>
 800a3fe:	e014      	b.n	800a42a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a400:	f7fb fa1c 	bl	800583c <HAL_GetTick>
 800a404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a406:	e00a      	b.n	800a41e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a408:	f7fb fa18 	bl	800583c <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	f241 3288 	movw	r2, #5000	; 0x1388
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e104      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a41e:	4b84      	ldr	r3, [pc, #528]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1ee      	bne.n	800a408 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80f9 	beq.w	800a626 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a434:	4b7e      	ldr	r3, [pc, #504]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a43c:	2b18      	cmp	r3, #24
 800a43e:	f000 80b4 	beq.w	800a5aa <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	2b02      	cmp	r3, #2
 800a448:	f040 8095 	bne.w	800a576 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a44c:	4b78      	ldr	r3, [pc, #480]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a77      	ldr	r2, [pc, #476]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a458:	f7fb f9f0 	bl	800583c <HAL_GetTick>
 800a45c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a45e:	e008      	b.n	800a472 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a460:	f7fb f9ec 	bl	800583c <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e0da      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a472:	4b6f      	ldr	r3, [pc, #444]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1f0      	bne.n	800a460 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a47e:	4b6c      	ldr	r3, [pc, #432]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a482:	4b6c      	ldr	r3, [pc, #432]	; (800a634 <HAL_RCC_OscConfig+0x7a8>)
 800a484:	4013      	ands	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a48e:	0112      	lsls	r2, r2, #4
 800a490:	430a      	orrs	r2, r1
 800a492:	4967      	ldr	r1, [pc, #412]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a494:	4313      	orrs	r3, r2
 800a496:	628b      	str	r3, [r1, #40]	; 0x28
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	3b01      	subs	r3, #1
 800a49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	025b      	lsls	r3, r3, #9
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4c8:	4959      	ldr	r1, [pc, #356]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a4ce:	4b58      	ldr	r3, [pc, #352]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	4a57      	ldr	r2, [pc, #348]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4d4:	f023 0301 	bic.w	r3, r3, #1
 800a4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4da:	4b55      	ldr	r3, [pc, #340]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4de:	4b56      	ldr	r3, [pc, #344]	; (800a638 <HAL_RCC_OscConfig+0x7ac>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4e6:	00d2      	lsls	r2, r2, #3
 800a4e8:	4951      	ldr	r1, [pc, #324]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4ee:	4b50      	ldr	r3, [pc, #320]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	f023 020c 	bic.w	r2, r3, #12
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	494d      	ldr	r1, [pc, #308]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a500:	4b4b      	ldr	r3, [pc, #300]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	f023 0202 	bic.w	r2, r3, #2
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50c:	4948      	ldr	r1, [pc, #288]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a512:	4b47      	ldr	r3, [pc, #284]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	4a46      	ldr	r2, [pc, #280]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a51e:	4b44      	ldr	r3, [pc, #272]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	4a43      	ldr	r2, [pc, #268]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a52a:	4b41      	ldr	r3, [pc, #260]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a40      	ldr	r2, [pc, #256]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a536:	4b3e      	ldr	r3, [pc, #248]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	4a3d      	ldr	r2, [pc, #244]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a542:	4b3b      	ldr	r3, [pc, #236]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a3a      	ldr	r2, [pc, #232]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a54c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54e:	f7fb f975 	bl	800583c <HAL_GetTick>
 800a552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a554:	e008      	b.n	800a568 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a556:	f7fb f971 	bl	800583c <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	2b02      	cmp	r3, #2
 800a562:	d901      	bls.n	800a568 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e05f      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a568:	4b31      	ldr	r3, [pc, #196]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0f0      	beq.n	800a556 <HAL_RCC_OscConfig+0x6ca>
 800a574:	e057      	b.n	800a626 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a576:	4b2e      	ldr	r3, [pc, #184]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a2d      	ldr	r2, [pc, #180]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a57c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a582:	f7fb f95b 	bl	800583c <HAL_GetTick>
 800a586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a588:	e008      	b.n	800a59c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a58a:	f7fb f957 	bl	800583c <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	2b02      	cmp	r3, #2
 800a596:	d901      	bls.n	800a59c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e045      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a59c:	4b24      	ldr	r3, [pc, #144]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1f0      	bne.n	800a58a <HAL_RCC_OscConfig+0x6fe>
 800a5a8:	e03d      	b.n	800a626 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5aa:	4b21      	ldr	r3, [pc, #132]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5b0:	4b1f      	ldr	r3, [pc, #124]	; (800a630 <HAL_RCC_OscConfig+0x7a4>)
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d031      	beq.n	800a622 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f003 0203 	and.w	r2, r3, #3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d12a      	bne.n	800a622 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	091b      	lsrs	r3, r3, #4
 800a5d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d122      	bne.n	800a622 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d11a      	bne.n	800a622 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0a5b      	lsrs	r3, r3, #9
 800a5f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d111      	bne.n	800a622 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d108      	bne.n	800a622 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0e1b      	lsrs	r3, r3, #24
 800a614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a61e:	429a      	cmp	r2, r3
 800a620:	d001      	beq.n	800a626 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3730      	adds	r7, #48	; 0x30
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	58024400 	.word	0x58024400
 800a634:	fffffc0c 	.word	0xfffffc0c
 800a638:	ffff0007 	.word	0xffff0007

0800a63c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e19c      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a650:	4b8a      	ldr	r3, [pc, #552]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 030f 	and.w	r3, r3, #15
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d910      	bls.n	800a680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a65e:	4b87      	ldr	r3, [pc, #540]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f023 020f 	bic.w	r2, r3, #15
 800a666:	4985      	ldr	r1, [pc, #532]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a66e:	4b83      	ldr	r3, [pc, #524]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 030f 	and.w	r3, r3, #15
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d001      	beq.n	800a680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e184      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d010      	beq.n	800a6ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	4b7b      	ldr	r3, [pc, #492]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a698:	429a      	cmp	r2, r3
 800a69a:	d908      	bls.n	800a6ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a69c:	4b78      	ldr	r3, [pc, #480]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4975      	ldr	r1, [pc, #468]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d010      	beq.n	800a6dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695a      	ldr	r2, [r3, #20]
 800a6be:	4b70      	ldr	r3, [pc, #448]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d908      	bls.n	800a6dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6ca:	4b6d      	ldr	r3, [pc, #436]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	496a      	ldr	r1, [pc, #424]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d010      	beq.n	800a70a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	4b64      	ldr	r3, [pc, #400]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a6ee:	69db      	ldr	r3, [r3, #28]
 800a6f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d908      	bls.n	800a70a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6f8:	4b61      	ldr	r3, [pc, #388]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	495e      	ldr	r1, [pc, #376]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a706:	4313      	orrs	r3, r2
 800a708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d010      	beq.n	800a738 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69da      	ldr	r2, [r3, #28]
 800a71a:	4b59      	ldr	r3, [pc, #356]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a722:	429a      	cmp	r2, r3
 800a724:	d908      	bls.n	800a738 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a726:	4b56      	ldr	r3, [pc, #344]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	4953      	ldr	r1, [pc, #332]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a734:	4313      	orrs	r3, r2
 800a736:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d010      	beq.n	800a766 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	4b4d      	ldr	r3, [pc, #308]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	f003 030f 	and.w	r3, r3, #15
 800a750:	429a      	cmp	r2, r3
 800a752:	d908      	bls.n	800a766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a754:	4b4a      	ldr	r3, [pc, #296]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	f023 020f 	bic.w	r2, r3, #15
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	4947      	ldr	r1, [pc, #284]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a762:	4313      	orrs	r3, r2
 800a764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d055      	beq.n	800a81e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a772:	4b43      	ldr	r3, [pc, #268]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	4940      	ldr	r1, [pc, #256]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a780:	4313      	orrs	r3, r2
 800a782:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d107      	bne.n	800a79c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a78c:	4b3c      	ldr	r3, [pc, #240]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d121      	bne.n	800a7dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e0f6      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7a4:	4b36      	ldr	r3, [pc, #216]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d115      	bne.n	800a7dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e0ea      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d107      	bne.n	800a7cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7bc:	4b30      	ldr	r3, [pc, #192]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e0de      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7cc:	4b2c      	ldr	r3, [pc, #176]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e0d6      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7dc:	4b28      	ldr	r3, [pc, #160]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f023 0207 	bic.w	r2, r3, #7
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	4925      	ldr	r1, [pc, #148]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ee:	f7fb f825 	bl	800583c <HAL_GetTick>
 800a7f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7f4:	e00a      	b.n	800a80c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7f6:	f7fb f821 	bl	800583c <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	f241 3288 	movw	r2, #5000	; 0x1388
 800a804:	4293      	cmp	r3, r2
 800a806:	d901      	bls.n	800a80c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e0be      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a80c:	4b1c      	ldr	r3, [pc, #112]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	00db      	lsls	r3, r3, #3
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d1eb      	bne.n	800a7f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d010      	beq.n	800a84c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	4b14      	ldr	r3, [pc, #80]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	429a      	cmp	r2, r3
 800a838:	d208      	bcs.n	800a84c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a83a:	4b11      	ldr	r3, [pc, #68]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	f023 020f 	bic.w	r2, r3, #15
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	490e      	ldr	r1, [pc, #56]	; (800a880 <HAL_RCC_ClockConfig+0x244>)
 800a848:	4313      	orrs	r3, r2
 800a84a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a84c:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 030f 	and.w	r3, r3, #15
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d214      	bcs.n	800a884 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f023 020f 	bic.w	r2, r3, #15
 800a862:	4906      	ldr	r1, [pc, #24]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	4313      	orrs	r3, r2
 800a868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a86a:	4b04      	ldr	r3, [pc, #16]	; (800a87c <HAL_RCC_ClockConfig+0x240>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d005      	beq.n	800a884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e086      	b.n	800a98a <HAL_RCC_ClockConfig+0x34e>
 800a87c:	52002000 	.word	0x52002000
 800a880:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d010      	beq.n	800a8b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691a      	ldr	r2, [r3, #16]
 800a894:	4b3f      	ldr	r3, [pc, #252]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d208      	bcs.n	800a8b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8a0:	4b3c      	ldr	r3, [pc, #240]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	4939      	ldr	r1, [pc, #228]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d010      	beq.n	800a8e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695a      	ldr	r2, [r3, #20]
 800a8c2:	4b34      	ldr	r3, [pc, #208]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d208      	bcs.n	800a8e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8ce:	4b31      	ldr	r3, [pc, #196]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	492e      	ldr	r1, [pc, #184]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d010      	beq.n	800a90e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699a      	ldr	r2, [r3, #24]
 800a8f0:	4b28      	ldr	r3, [pc, #160]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d208      	bcs.n	800a90e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8fc:	4b25      	ldr	r3, [pc, #148]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	4922      	ldr	r1, [pc, #136]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	d010      	beq.n	800a93c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	4b1d      	ldr	r3, [pc, #116]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a926:	429a      	cmp	r2, r3
 800a928:	d208      	bcs.n	800a93c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a92a:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	4917      	ldr	r1, [pc, #92]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a93c:	f000 f834 	bl	800a9a8 <HAL_RCC_GetSysClockFreq>
 800a940:	4601      	mov	r1, r0
 800a942:	4b14      	ldr	r3, [pc, #80]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	0a1b      	lsrs	r3, r3, #8
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	4a12      	ldr	r2, [pc, #72]	; (800a998 <HAL_RCC_ClockConfig+0x35c>)
 800a94e:	5cd3      	ldrb	r3, [r2, r3]
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	fa21 f303 	lsr.w	r3, r1, r3
 800a958:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a95a:	4b0e      	ldr	r3, [pc, #56]	; (800a994 <HAL_RCC_ClockConfig+0x358>)
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f003 030f 	and.w	r3, r3, #15
 800a962:	4a0d      	ldr	r2, [pc, #52]	; (800a998 <HAL_RCC_ClockConfig+0x35c>)
 800a964:	5cd3      	ldrb	r3, [r2, r3]
 800a966:	f003 031f 	and.w	r3, r3, #31
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
 800a970:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <HAL_RCC_ClockConfig+0x360>)
 800a972:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <HAL_RCC_ClockConfig+0x364>)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a97a:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <HAL_RCC_ClockConfig+0x368>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fa ff12 	bl	80057a8 <HAL_InitTick>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	58024400 	.word	0x58024400
 800a998:	08012424 	.word	0x08012424
 800a99c:	240000fc 	.word	0x240000fc
 800a9a0:	240000f8 	.word	0x240000f8
 800a9a4:	24000100 	.word	0x24000100

0800a9a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b089      	sub	sp, #36	; 0x24
 800a9ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9ae:	4baf      	ldr	r3, [pc, #700]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9b6:	2b18      	cmp	r3, #24
 800a9b8:	f200 814e 	bhi.w	800ac58 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a9bc:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c2:	bf00      	nop
 800a9c4:	0800aa29 	.word	0x0800aa29
 800a9c8:	0800ac59 	.word	0x0800ac59
 800a9cc:	0800ac59 	.word	0x0800ac59
 800a9d0:	0800ac59 	.word	0x0800ac59
 800a9d4:	0800ac59 	.word	0x0800ac59
 800a9d8:	0800ac59 	.word	0x0800ac59
 800a9dc:	0800ac59 	.word	0x0800ac59
 800a9e0:	0800ac59 	.word	0x0800ac59
 800a9e4:	0800aa4f 	.word	0x0800aa4f
 800a9e8:	0800ac59 	.word	0x0800ac59
 800a9ec:	0800ac59 	.word	0x0800ac59
 800a9f0:	0800ac59 	.word	0x0800ac59
 800a9f4:	0800ac59 	.word	0x0800ac59
 800a9f8:	0800ac59 	.word	0x0800ac59
 800a9fc:	0800ac59 	.word	0x0800ac59
 800aa00:	0800ac59 	.word	0x0800ac59
 800aa04:	0800aa55 	.word	0x0800aa55
 800aa08:	0800ac59 	.word	0x0800ac59
 800aa0c:	0800ac59 	.word	0x0800ac59
 800aa10:	0800ac59 	.word	0x0800ac59
 800aa14:	0800ac59 	.word	0x0800ac59
 800aa18:	0800ac59 	.word	0x0800ac59
 800aa1c:	0800ac59 	.word	0x0800ac59
 800aa20:	0800ac59 	.word	0x0800ac59
 800aa24:	0800aa5b 	.word	0x0800aa5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa28:	4b90      	ldr	r3, [pc, #576]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0320 	and.w	r3, r3, #32
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d009      	beq.n	800aa48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa34:	4b8d      	ldr	r3, [pc, #564]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	08db      	lsrs	r3, r3, #3
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	4a8c      	ldr	r2, [pc, #560]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800aa40:	fa22 f303 	lsr.w	r3, r2, r3
 800aa44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aa46:	e10a      	b.n	800ac5e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa48:	4b89      	ldr	r3, [pc, #548]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800aa4a:	61bb      	str	r3, [r7, #24]
    break;
 800aa4c:	e107      	b.n	800ac5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aa4e:	4b89      	ldr	r3, [pc, #548]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800aa50:	61bb      	str	r3, [r7, #24]
    break;
 800aa52:	e104      	b.n	800ac5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aa54:	4b88      	ldr	r3, [pc, #544]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800aa56:	61bb      	str	r3, [r7, #24]
    break;
 800aa58:	e101      	b.n	800ac5e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa5a:	4b84      	ldr	r3, [pc, #528]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aa64:	4b81      	ldr	r3, [pc, #516]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa68:	091b      	lsrs	r3, r3, #4
 800aa6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa70:	4b7e      	ldr	r3, [pc, #504]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aa7a:	4b7c      	ldr	r3, [pc, #496]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	08db      	lsrs	r3, r3, #3
 800aa80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	fb02 f303 	mul.w	r3, r2, r3
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 80da 	beq.w	800ac52 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d05a      	beq.n	800ab5a <HAL_RCC_GetSysClockFreq+0x1b2>
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d302      	bcc.n	800aaae <HAL_RCC_GetSysClockFreq+0x106>
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d078      	beq.n	800ab9e <HAL_RCC_GetSysClockFreq+0x1f6>
 800aaac:	e099      	b.n	800abe2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaae:	4b6f      	ldr	r3, [pc, #444]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d02d      	beq.n	800ab16 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aaba:	4b6c      	ldr	r3, [pc, #432]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	4a6a      	ldr	r2, [pc, #424]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800aac6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	ee07 3a90 	vmov	s15, r3
 800aadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae4:	4b61      	ldr	r3, [pc, #388]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf4:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaf8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2d4>
 800aafc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ab14:	e087      	b.n	800ac26 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	ee07 3a90 	vmov	s15, r3
 800ab1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab20:	eddf 6a57 	vldr	s13, [pc, #348]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2d8>
 800ab24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab28:	4b50      	ldr	r3, [pc, #320]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ab2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab30:	ee07 3a90 	vmov	s15, r3
 800ab34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab38:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab3c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2d4>
 800ab40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab58:	e065      	b.n	800ac26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	ee07 3a90 	vmov	s15, r3
 800ab60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab64:	eddf 6a47 	vldr	s13, [pc, #284]	; 800ac84 <HAL_RCC_GetSysClockFreq+0x2dc>
 800ab68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6c:	4b3f      	ldr	r3, [pc, #252]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab74:	ee07 3a90 	vmov	s15, r3
 800ab78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2d4>
 800ab84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab9c:	e043      	b.n	800ac26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	ee07 3a90 	vmov	s15, r3
 800aba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba8:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ac88 <HAL_RCC_GetSysClockFreq+0x2e0>
 800abac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb0:	4b2e      	ldr	r3, [pc, #184]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb8:	ee07 3a90 	vmov	s15, r3
 800abbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc0:	ed97 6a02 	vldr	s12, [r7, #8]
 800abc4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2d4>
 800abc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abe0:	e021      	b.n	800ac26 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	ee07 3a90 	vmov	s15, r3
 800abe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abec:	eddf 6a25 	vldr	s13, [pc, #148]	; 800ac84 <HAL_RCC_GetSysClockFreq+0x2dc>
 800abf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf4:	4b1d      	ldr	r3, [pc, #116]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfc:	ee07 3a90 	vmov	s15, r3
 800ac00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac04:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac08:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2d4>
 800ac0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac24:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ac26:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	0a5b      	lsrs	r3, r3, #9
 800ac2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac30:	3301      	adds	r3, #1
 800ac32:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac4a:	ee17 3a90 	vmov	r3, s15
 800ac4e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ac50:	e005      	b.n	800ac5e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	61bb      	str	r3, [r7, #24]
    break;
 800ac56:	e002      	b.n	800ac5e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800ac5a:	61bb      	str	r3, [r7, #24]
    break;
 800ac5c:	bf00      	nop
  }

  return sysclockfreq;
 800ac5e:	69bb      	ldr	r3, [r7, #24]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3724      	adds	r7, #36	; 0x24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	58024400 	.word	0x58024400
 800ac70:	03d09000 	.word	0x03d09000
 800ac74:	003d0900 	.word	0x003d0900
 800ac78:	017d7840 	.word	0x017d7840
 800ac7c:	46000000 	.word	0x46000000
 800ac80:	4c742400 	.word	0x4c742400
 800ac84:	4a742400 	.word	0x4a742400
 800ac88:	4bbebc20 	.word	0x4bbebc20

0800ac8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac92:	f7ff fe89 	bl	800a9a8 <HAL_RCC_GetSysClockFreq>
 800ac96:	4601      	mov	r1, r0
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <HAL_RCC_GetHCLKFreq+0x50>)
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	4a0f      	ldr	r2, [pc, #60]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x54>)
 800aca4:	5cd3      	ldrb	r3, [r2, r3]
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	fa21 f303 	lsr.w	r3, r1, r3
 800acae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <HAL_RCC_GetHCLKFreq+0x50>)
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x54>)
 800acba:	5cd3      	ldrb	r3, [r2, r3]
 800acbc:	f003 031f 	and.w	r3, r3, #31
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	fa22 f303 	lsr.w	r3, r2, r3
 800acc6:	4a07      	ldr	r2, [pc, #28]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x58>)
 800acc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acca:	4a07      	ldr	r2, [pc, #28]	; (800ace8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acd0:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x58>)
 800acd2:	681b      	ldr	r3, [r3, #0]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	58024400 	.word	0x58024400
 800ace0:	08012424 	.word	0x08012424
 800ace4:	240000fc 	.word	0x240000fc
 800ace8:	240000f8 	.word	0x240000f8

0800acec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800acf0:	f7ff ffcc 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800acf4:	4601      	mov	r1, r0
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	091b      	lsrs	r3, r3, #4
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	4a04      	ldr	r2, [pc, #16]	; (800ad14 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad02:	5cd3      	ldrb	r3, [r2, r3]
 800ad04:	f003 031f 	and.w	r3, r3, #31
 800ad08:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	58024400 	.word	0x58024400
 800ad14:	08012424 	.word	0x08012424

0800ad18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad1c:	f7ff ffb6 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800ad20:	4601      	mov	r1, r0
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	0a1b      	lsrs	r3, r3, #8
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	4a04      	ldr	r2, [pc, #16]	; (800ad40 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad2e:	5cd3      	ldrb	r3, [r2, r3]
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	58024400 	.word	0x58024400
 800ad40:	08012424 	.word	0x08012424

0800ad44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad50:	2300      	movs	r3, #0
 800ad52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d03d      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad68:	d013      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ad6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad6e:	d802      	bhi.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d007      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800ad74:	e01f      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800ad76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad7a:	d013      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800ad7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad80:	d01c      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800ad82:	e018      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad84:	4baf      	ldr	r3, [pc, #700]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	4aae      	ldr	r2, [pc, #696]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ad8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad90:	e015      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3304      	adds	r3, #4
 800ad96:	2102      	movs	r1, #2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f001 fd23 	bl	800c7e4 <RCCEx_PLL2_Config>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ada2:	e00c      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	3324      	adds	r3, #36	; 0x24
 800ada8:	2102      	movs	r1, #2
 800adaa:	4618      	mov	r0, r3
 800adac:	f001 fdcc 	bl	800c948 <RCCEx_PLL3_Config>
 800adb0:	4603      	mov	r3, r0
 800adb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800adb4:	e003      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	75fb      	strb	r3, [r7, #23]
      break;
 800adba:	e000      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800adbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d109      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adc4:	4b9f      	ldr	r3, [pc, #636]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800adc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800add0:	499c      	ldr	r1, [pc, #624]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800add2:	4313      	orrs	r3, r2
 800add4:	650b      	str	r3, [r1, #80]	; 0x50
 800add6:	e001      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d03d      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adec:	2b04      	cmp	r3, #4
 800adee:	d826      	bhi.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800adf0:	a201      	add	r2, pc, #4	; (adr r2, 800adf8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800adf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf6:	bf00      	nop
 800adf8:	0800ae0d 	.word	0x0800ae0d
 800adfc:	0800ae1b 	.word	0x0800ae1b
 800ae00:	0800ae2d 	.word	0x0800ae2d
 800ae04:	0800ae45 	.word	0x0800ae45
 800ae08:	0800ae45 	.word	0x0800ae45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae0c:	4b8d      	ldr	r3, [pc, #564]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	4a8c      	ldr	r2, [pc, #560]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ae12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae18:	e015      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	2100      	movs	r1, #0
 800ae20:	4618      	mov	r0, r3
 800ae22:	f001 fcdf 	bl	800c7e4 <RCCEx_PLL2_Config>
 800ae26:	4603      	mov	r3, r0
 800ae28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae2a:	e00c      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3324      	adds	r3, #36	; 0x24
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f001 fd88 	bl	800c948 <RCCEx_PLL3_Config>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae3c:	e003      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	75fb      	strb	r3, [r7, #23]
      break;
 800ae42:	e000      	b.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800ae44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d109      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae4c:	4b7d      	ldr	r3, [pc, #500]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae50:	f023 0207 	bic.w	r2, r3, #7
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae58:	497a      	ldr	r1, [pc, #488]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	650b      	str	r3, [r1, #80]	; 0x50
 800ae5e:	e001      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d03e      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae74:	2b80      	cmp	r3, #128	; 0x80
 800ae76:	d01c      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800ae78:	2b80      	cmp	r3, #128	; 0x80
 800ae7a:	d804      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d008      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ae80:	2b40      	cmp	r3, #64	; 0x40
 800ae82:	d00d      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800ae84:	e01e      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800ae86:	2bc0      	cmp	r3, #192	; 0xc0
 800ae88:	d01f      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800ae8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae8e:	d01e      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ae90:	e018      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae92:	4b6c      	ldr	r3, [pc, #432]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ae94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae96:	4a6b      	ldr	r2, [pc, #428]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ae98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ae9e:	e017      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3304      	adds	r3, #4
 800aea4:	2100      	movs	r1, #0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f001 fc9c 	bl	800c7e4 <RCCEx_PLL2_Config>
 800aeac:	4603      	mov	r3, r0
 800aeae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aeb0:	e00e      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3324      	adds	r3, #36	; 0x24
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 fd45 	bl	800c948 <RCCEx_PLL3_Config>
 800aebe:	4603      	mov	r3, r0
 800aec0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aec2:	e005      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	75fb      	strb	r3, [r7, #23]
      break;
 800aec8:	e002      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800aeca:	bf00      	nop
 800aecc:	e000      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800aece:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aed6:	4b5b      	ldr	r3, [pc, #364]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee2:	4958      	ldr	r1, [pc, #352]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	650b      	str	r3, [r1, #80]	; 0x50
 800aee8:	e001      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d044      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af04:	d01f      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800af06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af0a:	d805      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af14:	d00e      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800af16:	e01f      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800af18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af1c:	d01f      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800af1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af22:	d01e      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800af24:	e018      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af26:	4b47      	ldr	r3, [pc, #284]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	4a46      	ldr	r2, [pc, #280]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af32:	e017      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3304      	adds	r3, #4
 800af38:	2100      	movs	r1, #0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 fc52 	bl	800c7e4 <RCCEx_PLL2_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af44:	e00e      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3324      	adds	r3, #36	; 0x24
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 fcfb 	bl	800c948 <RCCEx_PLL3_Config>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af56:	e005      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	75fb      	strb	r3, [r7, #23]
      break;
 800af5c:	e002      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800af5e:	bf00      	nop
 800af60:	e000      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800af62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af6a:	4b36      	ldr	r3, [pc, #216]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af78:	4932      	ldr	r1, [pc, #200]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	658b      	str	r3, [r1, #88]	; 0x58
 800af7e:	e001      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d044      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af9a:	d01f      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afa0:	d805      	bhi.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x278>
 800afa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afaa:	d00e      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800afac:	e01f      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800afae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afb2:	d01f      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800afb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afb8:	d01e      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800afba:	e018      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afbc:	4b21      	ldr	r3, [pc, #132]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	4a20      	ldr	r2, [pc, #128]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800afc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afc8:	e017      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3304      	adds	r3, #4
 800afce:	2100      	movs	r1, #0
 800afd0:	4618      	mov	r0, r3
 800afd2:	f001 fc07 	bl	800c7e4 <RCCEx_PLL2_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800afda:	e00e      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3324      	adds	r3, #36	; 0x24
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 fcb0 	bl	800c948 <RCCEx_PLL3_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afec:	e005      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	75fb      	strb	r3, [r7, #23]
      break;
 800aff2:	e002      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800aff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10a      	bne.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b000:	4b10      	ldr	r3, [pc, #64]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b004:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b00e:	490d      	ldr	r1, [pc, #52]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b010:	4313      	orrs	r3, r2
 800b012:	658b      	str	r3, [r1, #88]	; 0x58
 800b014:	e001      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d035      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b02a:	2b10      	cmp	r3, #16
 800b02c:	d00c      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800b02e:	2b10      	cmp	r3, #16
 800b030:	d802      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d01b      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800b036:	e017      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b038:	2b20      	cmp	r3, #32
 800b03a:	d00c      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800b03c:	2b30      	cmp	r3, #48	; 0x30
 800b03e:	d018      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800b040:	e012      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b042:	bf00      	nop
 800b044:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b048:	4baf      	ldr	r3, [pc, #700]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04c:	4aae      	ldr	r2, [pc, #696]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b054:	e00e      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3304      	adds	r3, #4
 800b05a:	2102      	movs	r1, #2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 fbc1 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b062:	4603      	mov	r3, r0
 800b064:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b066:	e005      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	75fb      	strb	r3, [r7, #23]
      break;
 800b06c:	e002      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800b06e:	bf00      	nop
 800b070:	e000      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800b072:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d109      	bne.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b07a:	4ba3      	ldr	r3, [pc, #652]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b086:	49a0      	ldr	r1, [pc, #640]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b08c:	e001      	b.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d042      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0a6:	d01f      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800b0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ac:	d805      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800b0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b6:	d00e      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800b0b8:	e01f      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800b0ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0be:	d01f      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b0c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0c4:	d01e      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b0c6:	e018      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0c8:	4b8f      	ldr	r3, [pc, #572]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	4a8e      	ldr	r2, [pc, #568]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b0ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0d4:	e017      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	2100      	movs	r1, #0
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f001 fb81 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0e6:	e00e      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3324      	adds	r3, #36	; 0x24
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f001 fc2a 	bl	800c948 <RCCEx_PLL3_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0f8:	e005      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b0fe:	e002      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800b100:	bf00      	nop
 800b102:	e000      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800b104:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d109      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b10c:	4b7e      	ldr	r3, [pc, #504]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b110:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b118:	497b      	ldr	r1, [pc, #492]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	650b      	str	r3, [r1, #80]	; 0x50
 800b11e:	e001      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d042      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b138:	d01b      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b13e:	d805      	bhi.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d022      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800b144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b148:	d00a      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b14a:	e01b      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800b14c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b150:	d01d      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800b152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b156:	d01c      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800b158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b15c:	d01b      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800b15e:	e011      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3304      	adds	r3, #4
 800b164:	2101      	movs	r1, #1
 800b166:	4618      	mov	r0, r3
 800b168:	f001 fb3c 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b16c:	4603      	mov	r3, r0
 800b16e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b170:	e012      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3324      	adds	r3, #36	; 0x24
 800b176:	2101      	movs	r1, #1
 800b178:	4618      	mov	r0, r3
 800b17a:	f001 fbe5 	bl	800c948 <RCCEx_PLL3_Config>
 800b17e:	4603      	mov	r3, r0
 800b180:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b182:	e009      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	75fb      	strb	r3, [r7, #23]
      break;
 800b188:	e006      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b18a:	bf00      	nop
 800b18c:	e004      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b18e:	bf00      	nop
 800b190:	e002      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b196:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b19e:	4b5a      	ldr	r3, [pc, #360]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1aa:	4957      	ldr	r1, [pc, #348]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	650b      	str	r3, [r1, #80]	; 0x50
 800b1b0:	e001      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d044      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1cc:	d01b      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800b1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d2:	d805      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d022      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b1d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1dc:	d00a      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b1de:	e01b      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800b1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e4:	d01d      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b1e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1ea:	d01c      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800b1ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1f0:	d01b      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b1f2:	e011      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 faf2 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b204:	e012      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3324      	adds	r3, #36	; 0x24
 800b20a:	2101      	movs	r1, #1
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 fb9b 	bl	800c948 <RCCEx_PLL3_Config>
 800b212:	4603      	mov	r3, r0
 800b214:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b216:	e009      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	75fb      	strb	r3, [r7, #23]
      break;
 800b21c:	e006      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b21e:	bf00      	nop
 800b220:	e004      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b222:	bf00      	nop
 800b224:	e002      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b226:	bf00      	nop
 800b228:	e000      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b22a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b232:	4b35      	ldr	r3, [pc, #212]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b236:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b240:	4931      	ldr	r1, [pc, #196]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b242:	4313      	orrs	r3, r2
 800b244:	658b      	str	r3, [r1, #88]	; 0x58
 800b246:	e001      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d02d      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b260:	d005      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b266:	d009      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x538>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d013      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b26c:	e00f      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b26e:	4b26      	ldr	r3, [pc, #152]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b272:	4a25      	ldr	r2, [pc, #148]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b27a:	e00c      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	2101      	movs	r1, #1
 800b282:	4618      	mov	r0, r3
 800b284:	f001 faae 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b28c:	e003      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	75fb      	strb	r3, [r7, #23]
      break;
 800b292:	e000      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800b294:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d109      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b29c:	4b1a      	ldr	r3, [pc, #104]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a8:	4917      	ldr	r1, [pc, #92]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	650b      	str	r3, [r1, #80]	; 0x50
 800b2ae:	e001      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d035      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d81b      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b2c8:	a201      	add	r2, pc, #4	; (adr r2, 800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b30d 	.word	0x0800b30d
 800b2d4:	0800b2e1 	.word	0x0800b2e1
 800b2d8:	0800b2ef 	.word	0x0800b2ef
 800b2dc:	0800b30d 	.word	0x0800b30d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2e0:	4b09      	ldr	r3, [pc, #36]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4a08      	ldr	r2, [pc, #32]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b2ec:	e00f      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	2102      	movs	r1, #2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f001 fa75 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b2fe:	e006      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	75fb      	strb	r3, [r7, #23]
      break;
 800b304:	e003      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
      break;
 800b30c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d109      	bne.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b314:	4bba      	ldr	r3, [pc, #744]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b318:	f023 0203 	bic.w	r2, r3, #3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b320:	49b7      	ldr	r1, [pc, #732]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b322:	4313      	orrs	r3, r2
 800b324:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b326:	e001      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
 800b32a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 8086 	beq.w	800b446 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b33a:	4bb2      	ldr	r3, [pc, #712]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4ab1      	ldr	r2, [pc, #708]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b346:	f7fa fa79 	bl	800583c <HAL_GetTick>
 800b34a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b34c:	e009      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b34e:	f7fa fa75 	bl	800583c <HAL_GetTick>
 800b352:	4602      	mov	r2, r0
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	2b64      	cmp	r3, #100	; 0x64
 800b35a:	d902      	bls.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	75fb      	strb	r3, [r7, #23]
        break;
 800b360:	e005      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b362:	4ba8      	ldr	r3, [pc, #672]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0ef      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d166      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b374:	4ba2      	ldr	r3, [pc, #648]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b37e:	4053      	eors	r3, r2
 800b380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b384:	2b00      	cmp	r3, #0
 800b386:	d013      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b388:	4b9d      	ldr	r3, [pc, #628]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b390:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b392:	4b9b      	ldr	r3, [pc, #620]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b396:	4a9a      	ldr	r2, [pc, #616]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b39c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b39e:	4b98      	ldr	r3, [pc, #608]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a2:	4a97      	ldr	r2, [pc, #604]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b3a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b3aa:	4a95      	ldr	r2, [pc, #596]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ba:	d115      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3bc:	f7fa fa3e 	bl	800583c <HAL_GetTick>
 800b3c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3c2:	e00b      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3c4:	f7fa fa3a 	bl	800583c <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d902      	bls.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	75fb      	strb	r3, [r7, #23]
            break;
 800b3da:	e005      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3dc:	4b88      	ldr	r3, [pc, #544]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d0ed      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d126      	bne.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3fc:	d10d      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800b3fe:	4b80      	ldr	r3, [pc, #512]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b40c:	0919      	lsrs	r1, r3, #4
 800b40e:	4b7e      	ldr	r3, [pc, #504]	; (800b608 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b410:	400b      	ands	r3, r1
 800b412:	497b      	ldr	r1, [pc, #492]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b414:	4313      	orrs	r3, r2
 800b416:	610b      	str	r3, [r1, #16]
 800b418:	e005      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b41a:	4b79      	ldr	r3, [pc, #484]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	4a78      	ldr	r2, [pc, #480]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b420:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b424:	6113      	str	r3, [r2, #16]
 800b426:	4b76      	ldr	r3, [pc, #472]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b434:	4972      	ldr	r1, [pc, #456]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b436:	4313      	orrs	r3, r2
 800b438:	670b      	str	r3, [r1, #112]	; 0x70
 800b43a:	e004      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	75bb      	strb	r3, [r7, #22]
 800b440:	e001      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d07d      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b456:	2b28      	cmp	r3, #40	; 0x28
 800b458:	d866      	bhi.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800b45a:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b52f 	.word	0x0800b52f
 800b464:	0800b529 	.word	0x0800b529
 800b468:	0800b529 	.word	0x0800b529
 800b46c:	0800b529 	.word	0x0800b529
 800b470:	0800b529 	.word	0x0800b529
 800b474:	0800b529 	.word	0x0800b529
 800b478:	0800b529 	.word	0x0800b529
 800b47c:	0800b529 	.word	0x0800b529
 800b480:	0800b505 	.word	0x0800b505
 800b484:	0800b529 	.word	0x0800b529
 800b488:	0800b529 	.word	0x0800b529
 800b48c:	0800b529 	.word	0x0800b529
 800b490:	0800b529 	.word	0x0800b529
 800b494:	0800b529 	.word	0x0800b529
 800b498:	0800b529 	.word	0x0800b529
 800b49c:	0800b529 	.word	0x0800b529
 800b4a0:	0800b517 	.word	0x0800b517
 800b4a4:	0800b529 	.word	0x0800b529
 800b4a8:	0800b529 	.word	0x0800b529
 800b4ac:	0800b529 	.word	0x0800b529
 800b4b0:	0800b529 	.word	0x0800b529
 800b4b4:	0800b529 	.word	0x0800b529
 800b4b8:	0800b529 	.word	0x0800b529
 800b4bc:	0800b529 	.word	0x0800b529
 800b4c0:	0800b52f 	.word	0x0800b52f
 800b4c4:	0800b529 	.word	0x0800b529
 800b4c8:	0800b529 	.word	0x0800b529
 800b4cc:	0800b529 	.word	0x0800b529
 800b4d0:	0800b529 	.word	0x0800b529
 800b4d4:	0800b529 	.word	0x0800b529
 800b4d8:	0800b529 	.word	0x0800b529
 800b4dc:	0800b529 	.word	0x0800b529
 800b4e0:	0800b52f 	.word	0x0800b52f
 800b4e4:	0800b529 	.word	0x0800b529
 800b4e8:	0800b529 	.word	0x0800b529
 800b4ec:	0800b529 	.word	0x0800b529
 800b4f0:	0800b529 	.word	0x0800b529
 800b4f4:	0800b529 	.word	0x0800b529
 800b4f8:	0800b529 	.word	0x0800b529
 800b4fc:	0800b529 	.word	0x0800b529
 800b500:	0800b52f 	.word	0x0800b52f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3304      	adds	r3, #4
 800b508:	2101      	movs	r1, #1
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 f96a 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b514:	e00c      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3324      	adds	r3, #36	; 0x24
 800b51a:	2101      	movs	r1, #1
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 fa13 	bl	800c948 <RCCEx_PLL3_Config>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b526:	e003      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	75fb      	strb	r3, [r7, #23]
      break;
 800b52c:	e000      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800b52e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b536:	4b32      	ldr	r3, [pc, #200]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b542:	492f      	ldr	r1, [pc, #188]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b544:	4313      	orrs	r3, r2
 800b546:	654b      	str	r3, [r1, #84]	; 0x54
 800b548:	e001      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d037      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b55e:	2b05      	cmp	r3, #5
 800b560:	d820      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800b562:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b568:	0800b5ab 	.word	0x0800b5ab
 800b56c:	0800b581 	.word	0x0800b581
 800b570:	0800b593 	.word	0x0800b593
 800b574:	0800b5ab 	.word	0x0800b5ab
 800b578:	0800b5ab 	.word	0x0800b5ab
 800b57c:	0800b5ab 	.word	0x0800b5ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3304      	adds	r3, #4
 800b584:	2101      	movs	r1, #1
 800b586:	4618      	mov	r0, r3
 800b588:	f001 f92c 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b58c:	4603      	mov	r3, r0
 800b58e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b590:	e00c      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3324      	adds	r3, #36	; 0x24
 800b596:	2101      	movs	r1, #1
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 f9d5 	bl	800c948 <RCCEx_PLL3_Config>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b5a2:	e003      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5a8:	e000      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800b5aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d109      	bne.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b5b2:	4b13      	ldr	r3, [pc, #76]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b6:	f023 0207 	bic.w	r2, r3, #7
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5be:	4910      	ldr	r1, [pc, #64]	; (800b600 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	654b      	str	r3, [r1, #84]	; 0x54
 800b5c4:	e001      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d040      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5dc:	2b05      	cmp	r3, #5
 800b5de:	d827      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800b5e0:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800b5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e6:	bf00      	nop
 800b5e8:	0800b637 	.word	0x0800b637
 800b5ec:	0800b60d 	.word	0x0800b60d
 800b5f0:	0800b61f 	.word	0x0800b61f
 800b5f4:	0800b637 	.word	0x0800b637
 800b5f8:	0800b637 	.word	0x0800b637
 800b5fc:	0800b637 	.word	0x0800b637
 800b600:	58024400 	.word	0x58024400
 800b604:	58024800 	.word	0x58024800
 800b608:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	2101      	movs	r1, #1
 800b612:	4618      	mov	r0, r3
 800b614:	f001 f8e6 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b61c:	e00c      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3324      	adds	r3, #36	; 0x24
 800b622:	2101      	movs	r1, #1
 800b624:	4618      	mov	r0, r3
 800b626:	f001 f98f 	bl	800c948 <RCCEx_PLL3_Config>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b62e:	e003      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
      break;
 800b634:	e000      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800b636:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b63e:	4bb2      	ldr	r3, [pc, #712]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b642:	f023 0207 	bic.w	r2, r3, #7
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64c:	49ae      	ldr	r1, [pc, #696]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b64e:	4313      	orrs	r3, r2
 800b650:	658b      	str	r3, [r1, #88]	; 0x58
 800b652:	e001      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b654:	7dfb      	ldrb	r3, [r7, #23]
 800b656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0320 	and.w	r3, r3, #32
 800b660:	2b00      	cmp	r3, #0
 800b662:	d044      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b66a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b66e:	d01b      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800b670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b674:	d805      	bhi.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d022      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800b67a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b67e:	d00a      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b680:	e01b      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b686:	d01d      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b68c:	d01c      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b68e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b692:	d01b      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b694:	e011      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3304      	adds	r3, #4
 800b69a:	2100      	movs	r1, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f001 f8a1 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b6a6:	e012      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3324      	adds	r3, #36	; 0x24
 800b6ac:	2102      	movs	r1, #2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f001 f94a 	bl	800c948 <RCCEx_PLL3_Config>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b6b8:	e009      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b6be:	e006      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b6c0:	bf00      	nop
 800b6c2:	e004      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b6c4:	bf00      	nop
 800b6c6:	e002      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b6c8:	bf00      	nop
 800b6ca:	e000      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b6cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6d4:	4b8c      	ldr	r3, [pc, #560]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e2:	4989      	ldr	r1, [pc, #548]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	654b      	str	r3, [r1, #84]	; 0x54
 800b6e8:	e001      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d044      	beq.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b704:	d01b      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70a:	d805      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d022      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b714:	d00a      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b716:	e01b      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b71c:	d01d      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b71e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b722:	d01c      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b728:	d01b      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b72a:	e011      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3304      	adds	r3, #4
 800b730:	2100      	movs	r1, #0
 800b732:	4618      	mov	r0, r3
 800b734:	f001 f856 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b738:	4603      	mov	r3, r0
 800b73a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b73c:	e012      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3324      	adds	r3, #36	; 0x24
 800b742:	2102      	movs	r1, #2
 800b744:	4618      	mov	r0, r3
 800b746:	f001 f8ff 	bl	800c948 <RCCEx_PLL3_Config>
 800b74a:	4603      	mov	r3, r0
 800b74c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b74e:	e009      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
      break;
 800b754:	e006      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b756:	bf00      	nop
 800b758:	e004      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b75a:	bf00      	nop
 800b75c:	e002      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b75e:	bf00      	nop
 800b760:	e000      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b762:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10a      	bne.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b76a:	4b67      	ldr	r3, [pc, #412]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b76e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b778:	4963      	ldr	r1, [pc, #396]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	658b      	str	r3, [r1, #88]	; 0x58
 800b77e:	e001      	b.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
 800b782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d044      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b79a:	d01b      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b79c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7a0:	d805      	bhi.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d022      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b7a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7aa:	d00a      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b7ac:	e01b      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b7ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b2:	d01d      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b7b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7b8:	d01c      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b7ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7be:	d01b      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b7c0:	e011      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f001 f80b 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7d2:	e012      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3324      	adds	r3, #36	; 0x24
 800b7d8:	2102      	movs	r1, #2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 f8b4 	bl	800c948 <RCCEx_PLL3_Config>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7e4:	e009      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ea:	e006      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b7ec:	bf00      	nop
 800b7ee:	e004      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b7f0:	bf00      	nop
 800b7f2:	e002      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b7f4:	bf00      	nop
 800b7f6:	e000      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b7f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10a      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b800:	4b41      	ldr	r3, [pc, #260]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b80e:	493e      	ldr	r1, [pc, #248]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b810:	4313      	orrs	r3, r2
 800b812:	658b      	str	r3, [r1, #88]	; 0x58
 800b814:	e001      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0308 	and.w	r3, r3, #8
 800b822:	2b00      	cmp	r3, #0
 800b824:	d01a      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b82c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b830:	d10a      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3324      	adds	r3, #36	; 0x24
 800b836:	2102      	movs	r1, #2
 800b838:	4618      	mov	r0, r3
 800b83a:	f001 f885 	bl	800c948 <RCCEx_PLL3_Config>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b848:	4b2f      	ldr	r3, [pc, #188]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b856:	492c      	ldr	r1, [pc, #176]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b858:	4313      	orrs	r3, r2
 800b85a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0310 	and.w	r3, r3, #16
 800b864:	2b00      	cmp	r3, #0
 800b866:	d01a      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b872:	d10a      	bne.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3324      	adds	r3, #36	; 0x24
 800b878:	2102      	movs	r1, #2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 f864 	bl	800c948 <RCCEx_PLL3_Config>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b88a:	4b1f      	ldr	r3, [pc, #124]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b88c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b88e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b898:	491b      	ldr	r1, [pc, #108]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d032      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8b4:	d00d      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ba:	d016      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d111      	bne.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 ff8c 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8d0:	e00c      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3324      	adds	r3, #36	; 0x24
 800b8d6:	2102      	movs	r1, #2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f001 f835 	bl	800c948 <RCCEx_PLL3_Config>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8e2:	e003      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e8:	e000      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b8ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10c      	bne.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8f2:	4b05      	ldr	r3, [pc, #20]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b900:	4901      	ldr	r1, [pc, #4]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b902:	4313      	orrs	r3, r2
 800b904:	658b      	str	r3, [r1, #88]	; 0x58
 800b906:	e003      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d02f      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b926:	d00c      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b928:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b92c:	d015      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b932:	d10f      	bne.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b934:	4b71      	ldr	r3, [pc, #452]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	4a70      	ldr	r2, [pc, #448]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b93a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b93e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b940:	e00c      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3324      	adds	r3, #36	; 0x24
 800b946:	2101      	movs	r1, #1
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fffd 	bl	800c948 <RCCEx_PLL3_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b952:	e003      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	75fb      	strb	r3, [r7, #23]
      break;
 800b958:	e000      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b95a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b962:	4b66      	ldr	r3, [pc, #408]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b970:	4962      	ldr	r1, [pc, #392]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b972:	4313      	orrs	r3, r2
 800b974:	654b      	str	r3, [r1, #84]	; 0x54
 800b976:	e001      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d029      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b994:	d007      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b996:	e00f      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b998:	4b58      	ldr	r3, [pc, #352]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	4a57      	ldr	r2, [pc, #348]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b99e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b9a4:	e00b      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	2102      	movs	r1, #2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 ff19 	bl	800c7e4 <RCCEx_PLL2_Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b9b6:	e002      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b9bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d109      	bne.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b9c4:	4b4d      	ldr	r3, [pc, #308]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b9c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d0:	494a      	ldr	r1, [pc, #296]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b9d6:	e001      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00a      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3324      	adds	r3, #36	; 0x24
 800b9ec:	2102      	movs	r1, #2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 ffaa 	bl	800c948 <RCCEx_PLL3_Config>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d02f      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba12:	d00c      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ba14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba18:	d802      	bhi.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d011      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800ba1e:	e00d      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800ba20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba24:	d00f      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800ba26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba2a:	d00e      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800ba2c:	e006      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba2e:	4b33      	ldr	r3, [pc, #204]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba32:	4a32      	ldr	r2, [pc, #200]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ba3a:	e007      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba40:	e004      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800ba42:	bf00      	nop
 800ba44:	e002      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800ba46:	bf00      	nop
 800ba48:	e000      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800ba4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d109      	bne.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba52:	4b2a      	ldr	r3, [pc, #168]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba5e:	4927      	ldr	r1, [pc, #156]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba60:	4313      	orrs	r3, r2
 800ba62:	654b      	str	r3, [r1, #84]	; 0x54
 800ba64:	e001      	b.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d008      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba76:	4b21      	ldr	r3, [pc, #132]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba82:	491e      	ldr	r1, [pc, #120]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba94:	4b19      	ldr	r3, [pc, #100]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ba96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800baa0:	4916      	ldr	r1, [pc, #88]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00d      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bab2:	4b12      	ldr	r3, [pc, #72]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	4a11      	ldr	r2, [pc, #68]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800bab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800babc:	6113      	str	r3, [r2, #16]
 800babe:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800bac0:	691a      	ldr	r2, [r3, #16]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bac8:	490c      	ldr	r1, [pc, #48]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800baca:	4313      	orrs	r3, r2
 800bacc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da08      	bge.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800bad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae2:	4906      	ldr	r1, [pc, #24]	; (800bafc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800bae8:	7dbb      	ldrb	r3, [r7, #22]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	e000      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	58024400 	.word	0x58024400

0800bb00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b090      	sub	sp, #64	; 0x40
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb0e:	d150      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bb10:	4ba1      	ldr	r3, [pc, #644]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb14:	f003 0307 	and.w	r3, r3, #7
 800bb18:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d844      	bhi.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800bb20:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800bb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb26:	bf00      	nop
 800bb28:	0800bb3d 	.word	0x0800bb3d
 800bb2c:	0800bb4d 	.word	0x0800bb4d
 800bb30:	0800bb5d 	.word	0x0800bb5d
 800bb34:	0800bba5 	.word	0x0800bba5
 800bb38:	0800bb6d 	.word	0x0800bb6d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 fd03 	bl	800c54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb4a:	e241      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4c:	f107 0318 	add.w	r3, r7, #24
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 fa63 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb5a:	e239      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb5c:	f107 030c 	add.w	r3, r7, #12
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fba7 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb6a:	e231      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bb6c:	4b8a      	ldr	r3, [pc, #552]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d102      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bb7c:	4b87      	ldr	r3, [pc, #540]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bb80:	e226      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb88:	d102      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800bb8a:	4b85      	ldr	r3, [pc, #532]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb8e:	e21f      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb96:	d102      	bne.n	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800bb98:	4b82      	ldr	r3, [pc, #520]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb9c:	e218      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bba2:	e215      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bba4:	4b80      	ldr	r3, [pc, #512]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bba8:	e212      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbae:	bf00      	nop
 800bbb0:	e20e      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbb8:	d14f      	bne.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800bbba:	4b77      	ldr	r3, [pc, #476]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bbc2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	2b80      	cmp	r3, #128	; 0x80
 800bbc8:	d01c      	beq.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800bbca:	2b80      	cmp	r3, #128	; 0x80
 800bbcc:	d804      	bhi.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d008      	beq.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800bbd2:	2b40      	cmp	r3, #64	; 0x40
 800bbd4:	d00e      	beq.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800bbd6:	e03c      	b.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800bbd8:	2bc0      	cmp	r3, #192	; 0xc0
 800bbda:	d037      	beq.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800bbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe0:	d018      	beq.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800bbe2:	e036      	b.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 fcaf 	bl	800c54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbf2:	e1ed      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbf4:	f107 0318 	add.w	r3, r7, #24
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fa0f 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc02:	e1e5      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc04:	f107 030c 	add.w	r3, r7, #12
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 fb53 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc12:	e1dd      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bc14:	4b60      	ldr	r3, [pc, #384]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bc24:	4b5d      	ldr	r3, [pc, #372]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bc28:	e1d2      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc30:	d102      	bne.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800bc32:	4b5b      	ldr	r3, [pc, #364]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc36:	e1cb      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc3e:	d102      	bne.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800bc40:	4b58      	ldr	r3, [pc, #352]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc44:	e1c4      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc4a:	e1c1      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bc4c:	4b56      	ldr	r3, [pc, #344]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc50:	e1be      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc56:	bf00      	nop
 800bc58:	e1ba      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc60:	d153      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800bc62:	4b4d      	ldr	r3, [pc, #308]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc72:	d01f      	beq.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800bc74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc78:	d805      	bhi.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00a      	beq.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800bc7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc82:	d00f      	beq.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800bc84:	e03d      	b.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800bc86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc8a:	d037      	beq.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800bc8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc90:	d018      	beq.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800bc92:	e036      	b.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fc57 	bl	800c54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bca2:	e195      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bca4:	f107 0318 	add.w	r3, r7, #24
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 f9b7 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcb2:	e18d      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcb4:	f107 030c 	add.w	r3, r7, #12
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 fafb 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcc2:	e185      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bcc4:	4b34      	ldr	r3, [pc, #208]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bcd4:	4b31      	ldr	r3, [pc, #196]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bcd8:	e17a      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce0:	d102      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800bce2:	4b2f      	ldr	r3, [pc, #188]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bce6:	e173      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcee:	d102      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800bcf0:	4b2c      	ldr	r3, [pc, #176]	; (800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcf4:	e16c      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcfa:	e169      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bcfc:	4b2a      	ldr	r3, [pc, #168]	; (800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd00:	e166      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd06:	bf00      	nop
 800bd08:	e162      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd10:	d15d      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800bd12:	4b21      	ldr	r3, [pc, #132]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd22:	d01f      	beq.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800bd24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd28:	d805      	bhi.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800bd2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd32:	d00f      	beq.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800bd34:	e047      	b.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800bd36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd3a:	d041      	beq.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800bd3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd40:	d018      	beq.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800bd42:	e040      	b.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fbff 	bl	800c54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd52:	e13d      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd54:	f107 0318 	add.w	r3, r7, #24
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 f95f 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd62:	e135      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd64:	f107 030c 	add.w	r3, r7, #12
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 faa3 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd72:	e12d      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd74:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bd84:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bd88:	e122      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd90:	d10c      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd96:	e11b      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800bd98:	58024400 	.word	0x58024400
 800bd9c:	03d09000 	.word	0x03d09000
 800bda0:	003d0900 	.word	0x003d0900
 800bda4:	017d7840 	.word	0x017d7840
 800bda8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb2:	d102      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800bdb4:	4b89      	ldr	r3, [pc, #548]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb8:	e10a      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdbe:	e107      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bdc0:	4b87      	ldr	r3, [pc, #540]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800bdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdc4:	e104      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdca:	bf00      	nop
 800bdcc:	e100      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdd4:	d153      	bne.n	800be7e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bdd6:	4b83      	ldr	r3, [pc, #524]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bdd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdda:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bdde:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde6:	d01f      	beq.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bde8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdec:	d805      	bhi.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800bdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf6:	d00f      	beq.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800bdf8:	e03d      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800bdfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdfe:	d037      	beq.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800be00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be04:	d018      	beq.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800be06:	e036      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fb9d 	bl	800c54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be16:	e0db      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be18:	f107 0318 	add.w	r3, r7, #24
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 f8fd 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be26:	e0d3      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be28:	f107 030c 	add.w	r3, r7, #12
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fa41 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be36:	e0cb      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800be38:	4b6a      	ldr	r3, [pc, #424]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800be3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be40:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800be42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be44:	2b00      	cmp	r3, #0
 800be46:	d102      	bne.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800be48:	4b67      	ldr	r3, [pc, #412]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800be4c:	e0c0      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be54:	d102      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800be56:	4b65      	ldr	r3, [pc, #404]	; (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800be58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be5a:	e0b9      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be62:	d102      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800be64:	4b5d      	ldr	r3, [pc, #372]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be68:	e0b2      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be6e:	e0af      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800be70:	4b5b      	ldr	r3, [pc, #364]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be74:	e0ac      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be7a:	bf00      	nop
 800be7c:	e0a8      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be84:	d13d      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800be86:	4b57      	ldr	r3, [pc, #348]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800be88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be96:	d00c      	beq.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800be98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be9c:	d011      	beq.n	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d12b      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea2:	f107 0318 	add.w	r3, r7, #24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 f8b8 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800beb0:	e08e      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb2:	f107 030c 	add.w	r3, r7, #12
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f9fc 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bec0:	e086      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bec2:	4b48      	ldr	r3, [pc, #288]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beca:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800becc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d102      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bed2:	4b45      	ldr	r3, [pc, #276]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bed6:	e07b      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bede:	d102      	bne.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800bee0:	4b42      	ldr	r3, [pc, #264]	; (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bee4:	e074      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beec:	d102      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800beee:	4b3b      	ldr	r3, [pc, #236]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bef2:	e06d      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bef8:	e06a      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800befe:	bf00      	nop
 800bf00:	e066      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf08:	d11f      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800bf0a:	4b36      	ldr	r3, [pc, #216]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bf0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bf1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf1e:	d008      	beq.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800bf20:	e00f      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 fb10 	bl	800c54c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf30:	e04e      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf32:	f107 0318 	add.w	r3, r7, #24
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 f870 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf40:	e046      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf46:	bf00      	nop
 800bf48:	e042      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf50:	d13c      	bne.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800bf52:	4b24      	ldr	r3, [pc, #144]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bf54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf56:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bf5a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf62:	d01e      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800bf64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf68:	d805      	bhi.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00d      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bf6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf72:	d00e      	beq.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800bf74:	e026      	b.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800bf76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf7a:	d01d      	beq.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800bf7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf80:	d01d      	beq.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800bf82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf86:	d014      	beq.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800bf88:	e01c      	b.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bf8a:	f000 f831 	bl	800bff0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf8e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800bf90:	e01e      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf92:	f107 0318 	add.w	r3, r7, #24
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 f840 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa0:	e016      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa2:	f107 030c 	add.w	r3, r7, #12
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 f984 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfb0:	e00e      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800bfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfb6:	e00b      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800bfba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfbc:	e008      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfc2:	e005      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfc8:	bf00      	nop
 800bfca:	e001      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3740      	adds	r7, #64	; 0x40
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	017d7840 	.word	0x017d7840
 800bfe0:	00bb8000 	.word	0x00bb8000
 800bfe4:	58024400 	.word	0x58024400
 800bfe8:	03d09000 	.word	0x03d09000
 800bfec:	003d0900 	.word	0x003d0900

0800bff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bff4:	f7fe fe4a 	bl	800ac8c <HAL_RCC_GetHCLKFreq>
 800bff8:	4601      	mov	r1, r0
 800bffa:	4b06      	ldr	r3, [pc, #24]	; (800c014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	091b      	lsrs	r3, r3, #4
 800c000:	f003 0307 	and.w	r3, r3, #7
 800c004:	4a04      	ldr	r2, [pc, #16]	; (800c018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c006:	5cd3      	ldrb	r3, [r2, r3]
 800c008:	f003 031f 	and.w	r3, r3, #31
 800c00c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c010:	4618      	mov	r0, r3
 800c012:	bd80      	pop	{r7, pc}
 800c014:	58024400 	.word	0x58024400
 800c018:	08012424 	.word	0x08012424

0800c01c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b089      	sub	sp, #36	; 0x24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c024:	4b9d      	ldr	r3, [pc, #628]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c02e:	4b9b      	ldr	r3, [pc, #620]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c032:	0b1b      	lsrs	r3, r3, #12
 800c034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c03a:	4b98      	ldr	r3, [pc, #608]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	091b      	lsrs	r3, r3, #4
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c046:	4b95      	ldr	r3, [pc, #596]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	08db      	lsrs	r3, r3, #3
 800c04c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	fb02 f303 	mul.w	r3, r2, r3
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 810a 	beq.w	800c27e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d05a      	beq.n	800c126 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800c070:	2b01      	cmp	r3, #1
 800c072:	d302      	bcc.n	800c07a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800c074:	2b02      	cmp	r3, #2
 800c076:	d078      	beq.n	800c16a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800c078:	e099      	b.n	800c1ae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c07a:	4b88      	ldr	r3, [pc, #544]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d02d      	beq.n	800c0e2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c086:	4b85      	ldr	r3, [pc, #532]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	08db      	lsrs	r3, r3, #3
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	4a83      	ldr	r2, [pc, #524]	; (800c2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800c092:	fa22 f303 	lsr.w	r3, r2, r3
 800c096:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	ee07 3a90 	vmov	s15, r3
 800c09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	ee07 3a90 	vmov	s15, r3
 800c0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b0:	4b7a      	ldr	r3, [pc, #488]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b8:	ee07 3a90 	vmov	s15, r3
 800c0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c0c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c0e0:	e087      	b.n	800c1f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	ee07 3a90 	vmov	s15, r3
 800c0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800c0f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f4:	4b69      	ldr	r3, [pc, #420]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0fc:	ee07 3a90 	vmov	s15, r3
 800c100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c104:	ed97 6a03 	vldr	s12, [r7, #12]
 800c108:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c10c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c120:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c124:	e065      	b.n	800c1f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c130:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800c134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c138:	4b58      	ldr	r3, [pc, #352]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c140:	ee07 3a90 	vmov	s15, r3
 800c144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c148:	ed97 6a03 	vldr	s12, [r7, #12]
 800c14c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c15c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c160:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c164:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c168:	e043      	b.n	800c1f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	ee07 3a90 	vmov	s15, r3
 800c170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c174:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800c178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c17c:	4b47      	ldr	r3, [pc, #284]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c184:	ee07 3a90 	vmov	s15, r3
 800c188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c18c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c190:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c19c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1ac:	e021      	b.n	800c1f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	ee07 3a90 	vmov	s15, r3
 800c1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800c1bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c0:	4b36      	ldr	r3, [pc, #216]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c8:	ee07 3a90 	vmov	s15, r3
 800c1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c1d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1f0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c1f2:	4b2a      	ldr	r3, [pc, #168]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	0a5b      	lsrs	r3, r3, #9
 800c1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1fc:	ee07 3a90 	vmov	s15, r3
 800c200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c20c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c218:	ee17 2a90 	vmov	r2, s15
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c220:	4b1e      	ldr	r3, [pc, #120]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c22a:	ee07 3a90 	vmov	s15, r3
 800c22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c23a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c23e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c246:	ee17 2a90 	vmov	r2, s15
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c24e:	4b13      	ldr	r3, [pc, #76]	; (800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c252:	0e1b      	lsrs	r3, r3, #24
 800c254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c258:	ee07 3a90 	vmov	s15, r3
 800c25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c264:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c268:	edd7 6a07 	vldr	s13, [r7, #28]
 800c26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c274:	ee17 2a90 	vmov	r2, s15
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c27c:	e008      	b.n	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	609a      	str	r2, [r3, #8]
}
 800c290:	bf00      	nop
 800c292:	3724      	adds	r7, #36	; 0x24
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	58024400 	.word	0x58024400
 800c2a0:	03d09000 	.word	0x03d09000
 800c2a4:	46000000 	.word	0x46000000
 800c2a8:	4c742400 	.word	0x4c742400
 800c2ac:	4a742400 	.word	0x4a742400
 800c2b0:	4bbebc20 	.word	0x4bbebc20

0800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b089      	sub	sp, #36	; 0x24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2bc:	4b9d      	ldr	r3, [pc, #628]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	f003 0303 	and.w	r3, r3, #3
 800c2c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c2c6:	4b9b      	ldr	r3, [pc, #620]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ca:	0d1b      	lsrs	r3, r3, #20
 800c2cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2d2:	4b98      	ldr	r3, [pc, #608]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d6:	0a1b      	lsrs	r3, r3, #8
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c2de:	4b95      	ldr	r3, [pc, #596]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e2:	08db      	lsrs	r3, r3, #3
 800c2e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	fb02 f303 	mul.w	r3, r2, r3
 800c2ee:	ee07 3a90 	vmov	s15, r3
 800c2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 810a 	beq.w	800c516 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d05a      	beq.n	800c3be <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d302      	bcc.n	800c312 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d078      	beq.n	800c402 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800c310:	e099      	b.n	800c446 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c312:	4b88      	ldr	r3, [pc, #544]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d02d      	beq.n	800c37a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c31e:	4b85      	ldr	r3, [pc, #532]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	08db      	lsrs	r3, r3, #3
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	4a83      	ldr	r2, [pc, #524]	; (800c538 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800c32a:	fa22 f303 	lsr.w	r3, r2, r3
 800c32e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	ee07 3a90 	vmov	s15, r3
 800c336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	ee07 3a90 	vmov	s15, r3
 800c340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c348:	4b7a      	ldr	r3, [pc, #488]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c350:	ee07 3a90 	vmov	s15, r3
 800c354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c358:	ed97 6a03 	vldr	s12, [r7, #12]
 800c35c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c36c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c370:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c374:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c378:	e087      	b.n	800c48a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	ee07 3a90 	vmov	s15, r3
 800c380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c384:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c540 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800c388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38c:	4b69      	ldr	r3, [pc, #420]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c3a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3bc:	e065      	b.n	800c48a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	ee07 3a90 	vmov	s15, r3
 800c3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800c3cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d0:	4b58      	ldr	r3, [pc, #352]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d8:	ee07 3a90 	vmov	s15, r3
 800c3dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c3e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c400:	e043      	b.n	800c48a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	ee07 3a90 	vmov	s15, r3
 800c408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c548 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800c410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c414:	4b47      	ldr	r3, [pc, #284]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c424:	ed97 6a03 	vldr	s12, [r7, #12]
 800c428:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c42c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c440:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c444:	e021      	b.n	800c48a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	ee07 3a90 	vmov	s15, r3
 800c44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c450:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800c454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c458:	4b36      	ldr	r3, [pc, #216]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c460:	ee07 3a90 	vmov	s15, r3
 800c464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c468:	ed97 6a03 	vldr	s12, [r7, #12]
 800c46c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c47c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c484:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c488:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c48a:	4b2a      	ldr	r3, [pc, #168]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48e:	0a5b      	lsrs	r3, r3, #9
 800c490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4b0:	ee17 2a90 	vmov	r2, s15
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c4b8:	4b1e      	ldr	r3, [pc, #120]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4bc:	0c1b      	lsrs	r3, r3, #16
 800c4be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c2:	ee07 3a90 	vmov	s15, r3
 800c4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4de:	ee17 2a90 	vmov	r2, s15
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c4e6:	4b13      	ldr	r3, [pc, #76]	; (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ea:	0e1b      	lsrs	r3, r3, #24
 800c4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f0:	ee07 3a90 	vmov	s15, r3
 800c4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c500:	edd7 6a07 	vldr	s13, [r7, #28]
 800c504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c50c:	ee17 2a90 	vmov	r2, s15
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c514:	e008      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	609a      	str	r2, [r3, #8]
}
 800c528:	bf00      	nop
 800c52a:	3724      	adds	r7, #36	; 0x24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	58024400 	.word	0x58024400
 800c538:	03d09000 	.word	0x03d09000
 800c53c:	46000000 	.word	0x46000000
 800c540:	4c742400 	.word	0x4c742400
 800c544:	4a742400 	.word	0x4a742400
 800c548:	4bbebc20 	.word	0x4bbebc20

0800c54c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b089      	sub	sp, #36	; 0x24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c554:	4b9d      	ldr	r3, [pc, #628]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c55e:	4b9b      	ldr	r3, [pc, #620]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c562:	091b      	lsrs	r3, r3, #4
 800c564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c568:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c56a:	4b98      	ldr	r3, [pc, #608]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c574:	4b95      	ldr	r3, [pc, #596]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c578:	08db      	lsrs	r3, r3, #3
 800c57a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	fb02 f303 	mul.w	r3, r2, r3
 800c584:	ee07 3a90 	vmov	s15, r3
 800c588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c58c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 810a 	beq.w	800c7ac <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d05a      	beq.n	800c654 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d302      	bcc.n	800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d078      	beq.n	800c698 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800c5a6:	e099      	b.n	800c6dc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5a8:	4b88      	ldr	r3, [pc, #544]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d02d      	beq.n	800c610 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c5b4:	4b85      	ldr	r3, [pc, #532]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	08db      	lsrs	r3, r3, #3
 800c5ba:	f003 0303 	and.w	r3, r3, #3
 800c5be:	4a84      	ldr	r2, [pc, #528]	; (800c7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800c5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	ee07 3a90 	vmov	s15, r3
 800c5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5de:	4b7b      	ldr	r3, [pc, #492]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c60e:	e087      	b.n	800c720 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c61a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800c61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c622:	4b6a      	ldr	r3, [pc, #424]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c62a:	ee07 3a90 	vmov	s15, r3
 800c62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c632:	ed97 6a03 	vldr	s12, [r7, #12]
 800c636:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c64e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c652:	e065      	b.n	800c720 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c666:	4b59      	ldr	r3, [pc, #356]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c66e:	ee07 3a90 	vmov	s15, r3
 800c672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c676:	ed97 6a03 	vldr	s12, [r7, #12]
 800c67a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c696:	e043      	b.n	800c720 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	ee07 3a90 	vmov	s15, r3
 800c69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6aa:	4b48      	ldr	r3, [pc, #288]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6da:	e021      	b.n	800c720 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ee:	4b37      	ldr	r3, [pc, #220]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6f6:	ee07 3a90 	vmov	s15, r3
 800c6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c702:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c70e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c71a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c71e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c720:	4b2a      	ldr	r3, [pc, #168]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c724:	0a5b      	lsrs	r3, r3, #9
 800c726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c73a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c746:	ee17 2a90 	vmov	r2, s15
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c74e:	4b1f      	ldr	r3, [pc, #124]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c752:	0c1b      	lsrs	r3, r3, #16
 800c754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c758:	ee07 3a90 	vmov	s15, r3
 800c75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c764:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c768:	edd7 6a07 	vldr	s13, [r7, #28]
 800c76c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c774:	ee17 2a90 	vmov	r2, s15
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c77c:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c780:	0e1b      	lsrs	r3, r3, #24
 800c782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c792:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c796:	edd7 6a07 	vldr	s13, [r7, #28]
 800c79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7a2:	ee17 2a90 	vmov	r2, s15
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c7aa:	e008      	b.n	800c7be <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	609a      	str	r2, [r3, #8]
}
 800c7be:	bf00      	nop
 800c7c0:	3724      	adds	r7, #36	; 0x24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	58024400 	.word	0x58024400
 800c7d0:	03d09000 	.word	0x03d09000
 800c7d4:	46000000 	.word	0x46000000
 800c7d8:	4c742400 	.word	0x4c742400
 800c7dc:	4a742400 	.word	0x4a742400
 800c7e0:	4bbebc20 	.word	0x4bbebc20

0800c7e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c7f2:	4b53      	ldr	r3, [pc, #332]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f6:	f003 0303 	and.w	r3, r3, #3
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d101      	bne.n	800c802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	e099      	b.n	800c936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c802:	4b4f      	ldr	r3, [pc, #316]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a4e      	ldr	r2, [pc, #312]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c80c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c80e:	f7f9 f815 	bl	800583c <HAL_GetTick>
 800c812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c814:	e008      	b.n	800c828 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c816:	f7f9 f811 	bl	800583c <HAL_GetTick>
 800c81a:	4602      	mov	r2, r0
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	2b02      	cmp	r3, #2
 800c822:	d901      	bls.n	800c828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e086      	b.n	800c936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c828:	4b45      	ldr	r3, [pc, #276]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f0      	bne.n	800c816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c834:	4b42      	ldr	r3, [pc, #264]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	031b      	lsls	r3, r3, #12
 800c842:	493f      	ldr	r1, [pc, #252]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c844:	4313      	orrs	r3, r2
 800c846:	628b      	str	r3, [r1, #40]	; 0x28
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	3b01      	subs	r3, #1
 800c858:	025b      	lsls	r3, r3, #9
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	3b01      	subs	r3, #1
 800c864:	041b      	lsls	r3, r3, #16
 800c866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c86a:	431a      	orrs	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	3b01      	subs	r3, #1
 800c872:	061b      	lsls	r3, r3, #24
 800c874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c878:	4931      	ldr	r1, [pc, #196]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c87a:	4313      	orrs	r3, r2
 800c87c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c87e:	4b30      	ldr	r3, [pc, #192]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	492d      	ldr	r1, [pc, #180]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c88c:	4313      	orrs	r3, r2
 800c88e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c890:	4b2b      	ldr	r3, [pc, #172]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	f023 0220 	bic.w	r2, r3, #32
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	4928      	ldr	r1, [pc, #160]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c8a2:	4b27      	ldr	r3, [pc, #156]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	4a26      	ldr	r2, [pc, #152]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8a8:	f023 0310 	bic.w	r3, r3, #16
 800c8ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c8ae:	4b24      	ldr	r3, [pc, #144]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8b2:	4b24      	ldr	r3, [pc, #144]	; (800c944 <RCCEx_PLL2_Config+0x160>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	69d2      	ldr	r2, [r2, #28]
 800c8ba:	00d2      	lsls	r2, r2, #3
 800c8bc:	4920      	ldr	r1, [pc, #128]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c8c2:	4b1f      	ldr	r3, [pc, #124]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c6:	4a1e      	ldr	r2, [pc, #120]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8c8:	f043 0310 	orr.w	r3, r3, #16
 800c8cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d106      	bne.n	800c8e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c8d4:	4b1a      	ldr	r3, [pc, #104]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d8:	4a19      	ldr	r2, [pc, #100]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8e0:	e00f      	b.n	800c902 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d106      	bne.n	800c8f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c8e8:	4b15      	ldr	r3, [pc, #84]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	4a14      	ldr	r2, [pc, #80]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8f4:	e005      	b.n	800c902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c8f6:	4b12      	ldr	r3, [pc, #72]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fa:	4a11      	ldr	r2, [pc, #68]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c8fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c902:	4b0f      	ldr	r3, [pc, #60]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a0e      	ldr	r2, [pc, #56]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c90c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c90e:	f7f8 ff95 	bl	800583c <HAL_GetTick>
 800c912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c914:	e008      	b.n	800c928 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c916:	f7f8 ff91 	bl	800583c <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	d901      	bls.n	800c928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e006      	b.n	800c936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c928:	4b05      	ldr	r3, [pc, #20]	; (800c940 <RCCEx_PLL2_Config+0x15c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d0f0      	beq.n	800c916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c934:	7bfb      	ldrb	r3, [r7, #15]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	58024400 	.word	0x58024400
 800c944:	ffff0007 	.word	0xffff0007

0800c948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c956:	4b53      	ldr	r3, [pc, #332]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	f003 0303 	and.w	r3, r3, #3
 800c95e:	2b03      	cmp	r3, #3
 800c960:	d101      	bne.n	800c966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	e099      	b.n	800ca9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c966:	4b4f      	ldr	r3, [pc, #316]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a4e      	ldr	r2, [pc, #312]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c96c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c972:	f7f8 ff63 	bl	800583c <HAL_GetTick>
 800c976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c978:	e008      	b.n	800c98c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c97a:	f7f8 ff5f 	bl	800583c <HAL_GetTick>
 800c97e:	4602      	mov	r2, r0
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	2b02      	cmp	r3, #2
 800c986:	d901      	bls.n	800c98c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c988:	2303      	movs	r3, #3
 800c98a:	e086      	b.n	800ca9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c98c:	4b45      	ldr	r3, [pc, #276]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1f0      	bne.n	800c97a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c998:	4b42      	ldr	r3, [pc, #264]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	051b      	lsls	r3, r3, #20
 800c9a6:	493f      	ldr	r1, [pc, #252]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	628b      	str	r3, [r1, #40]	; 0x28
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	025b      	lsls	r3, r3, #9
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	431a      	orrs	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	041b      	lsls	r3, r3, #16
 800c9ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	061b      	lsls	r3, r3, #24
 800c9d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c9dc:	4931      	ldr	r1, [pc, #196]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c9e2:	4b30      	ldr	r3, [pc, #192]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	492d      	ldr	r1, [pc, #180]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c9f4:	4b2b      	ldr	r3, [pc, #172]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	4928      	ldr	r1, [pc, #160]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca02:	4313      	orrs	r3, r2
 800ca04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ca06:	4b27      	ldr	r3, [pc, #156]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	4a26      	ldr	r2, [pc, #152]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ca12:	4b24      	ldr	r3, [pc, #144]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca16:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <RCCEx_PLL3_Config+0x160>)
 800ca18:	4013      	ands	r3, r2
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	69d2      	ldr	r2, [r2, #28]
 800ca1e:	00d2      	lsls	r2, r2, #3
 800ca20:	4920      	ldr	r1, [pc, #128]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca22:	4313      	orrs	r3, r2
 800ca24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ca26:	4b1f      	ldr	r3, [pc, #124]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2a:	4a1e      	ldr	r2, [pc, #120]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d106      	bne.n	800ca46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ca38:	4b1a      	ldr	r3, [pc, #104]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	4a19      	ldr	r2, [pc, #100]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ca42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca44:	e00f      	b.n	800ca66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d106      	bne.n	800ca5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ca4c:	4b15      	ldr	r3, [pc, #84]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca50:	4a14      	ldr	r2, [pc, #80]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ca56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca58:	e005      	b.n	800ca66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ca5a:	4b12      	ldr	r3, [pc, #72]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5e:	4a11      	ldr	r2, [pc, #68]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ca66:	4b0f      	ldr	r3, [pc, #60]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a0e      	ldr	r2, [pc, #56]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca72:	f7f8 fee3 	bl	800583c <HAL_GetTick>
 800ca76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca78:	e008      	b.n	800ca8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca7a:	f7f8 fedf 	bl	800583c <HAL_GetTick>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d901      	bls.n	800ca8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e006      	b.n	800ca9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca8c:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <RCCEx_PLL3_Config+0x15c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d0f0      	beq.n	800ca7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	58024400 	.word	0x58024400
 800caa8:	ffff0007 	.word	0xffff0007

0800caac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e01d      	b.n	800cafa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d106      	bne.n	800cad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7f8 f81a 	bl	8004b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2202      	movs	r2, #2
 800cadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4619      	mov	r1, r3
 800caea:	4610      	mov	r0, r2
 800caec:	f000 f97c 	bl	800cde8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68da      	ldr	r2, [r3, #12]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f042 0201 	orr.w	r2, r2, #1
 800cb1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	689a      	ldr	r2, [r3, #8]
 800cb22:	4b0c      	ldr	r3, [pc, #48]	; (800cb54 <HAL_TIM_Base_Start_IT+0x50>)
 800cb24:	4013      	ands	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b06      	cmp	r3, #6
 800cb2c:	d00b      	beq.n	800cb46 <HAL_TIM_Base_Start_IT+0x42>
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb34:	d007      	beq.n	800cb46 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f042 0201 	orr.w	r2, r2, #1
 800cb44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	00010007 	.word	0x00010007

0800cb58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	f003 0302 	and.w	r3, r3, #2
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d122      	bne.n	800cbb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b02      	cmp	r3, #2
 800cb7a:	d11b      	bne.n	800cbb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f06f 0202 	mvn.w	r2, #2
 800cb84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f905 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cba0:	e005      	b.n	800cbae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f8f7 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f908 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	f003 0304 	and.w	r3, r3, #4
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d122      	bne.n	800cc08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	f003 0304 	and.w	r3, r3, #4
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	d11b      	bne.n	800cc08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f06f 0204 	mvn.w	r2, #4
 800cbd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2202      	movs	r2, #2
 800cbde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f8db 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cbf4:	e005      	b.n	800cc02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f8cd 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f8de 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	f003 0308 	and.w	r3, r3, #8
 800cc12:	2b08      	cmp	r3, #8
 800cc14:	d122      	bne.n	800cc5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f003 0308 	and.w	r3, r3, #8
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d11b      	bne.n	800cc5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f06f 0208 	mvn.w	r2, #8
 800cc2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2204      	movs	r2, #4
 800cc32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	f003 0303 	and.w	r3, r3, #3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d003      	beq.n	800cc4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f8b1 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cc48:	e005      	b.n	800cc56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f8a3 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f8b4 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	f003 0310 	and.w	r3, r3, #16
 800cc66:	2b10      	cmp	r3, #16
 800cc68:	d122      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	f003 0310 	and.w	r3, r3, #16
 800cc74:	2b10      	cmp	r3, #16
 800cc76:	d11b      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f06f 0210 	mvn.w	r2, #16
 800cc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2208      	movs	r2, #8
 800cc86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d003      	beq.n	800cc9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f887 	bl	800cdaa <HAL_TIM_IC_CaptureCallback>
 800cc9c:	e005      	b.n	800ccaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 f879 	bl	800cd96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f88a 	bl	800cdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d10e      	bne.n	800ccdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d107      	bne.n	800ccdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f06f 0201 	mvn.w	r2, #1
 800ccd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7f4 ff08 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cce6:	2b80      	cmp	r3, #128	; 0x80
 800cce8:	d10e      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf4:	2b80      	cmp	r3, #128	; 0x80
 800ccf6:	d107      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f99c 	bl	800d040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd16:	d10e      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd22:	2b80      	cmp	r3, #128	; 0x80
 800cd24:	d107      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f98f 	bl	800d054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd40:	2b40      	cmp	r3, #64	; 0x40
 800cd42:	d10e      	bne.n	800cd62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4e:	2b40      	cmp	r3, #64	; 0x40
 800cd50:	d107      	bne.n	800cd62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f838 	bl	800cdd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	f003 0320 	and.w	r3, r3, #32
 800cd6c:	2b20      	cmp	r3, #32
 800cd6e:	d10e      	bne.n	800cd8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	f003 0320 	and.w	r3, r3, #32
 800cd7a:	2b20      	cmp	r3, #32
 800cd7c:	d107      	bne.n	800cd8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f06f 0220 	mvn.w	r2, #32
 800cd86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f94f 	bl	800d02c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd9e:	bf00      	nop
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdb2:	bf00      	nop
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cdda:	bf00      	nop
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
	...

0800cde8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a40      	ldr	r2, [pc, #256]	; (800cefc <TIM_Base_SetConfig+0x114>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d013      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce06:	d00f      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a3d      	ldr	r2, [pc, #244]	; (800cf00 <TIM_Base_SetConfig+0x118>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00b      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a3c      	ldr	r2, [pc, #240]	; (800cf04 <TIM_Base_SetConfig+0x11c>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d007      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a3b      	ldr	r2, [pc, #236]	; (800cf08 <TIM_Base_SetConfig+0x120>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d003      	beq.n	800ce28 <TIM_Base_SetConfig+0x40>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a3a      	ldr	r2, [pc, #232]	; (800cf0c <TIM_Base_SetConfig+0x124>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d108      	bne.n	800ce3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a2f      	ldr	r2, [pc, #188]	; (800cefc <TIM_Base_SetConfig+0x114>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d01f      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce48:	d01b      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4a2c      	ldr	r2, [pc, #176]	; (800cf00 <TIM_Base_SetConfig+0x118>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d017      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4a2b      	ldr	r2, [pc, #172]	; (800cf04 <TIM_Base_SetConfig+0x11c>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d013      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a2a      	ldr	r2, [pc, #168]	; (800cf08 <TIM_Base_SetConfig+0x120>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d00f      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4a29      	ldr	r2, [pc, #164]	; (800cf0c <TIM_Base_SetConfig+0x124>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d00b      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a28      	ldr	r2, [pc, #160]	; (800cf10 <TIM_Base_SetConfig+0x128>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d007      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a27      	ldr	r2, [pc, #156]	; (800cf14 <TIM_Base_SetConfig+0x12c>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d003      	beq.n	800ce82 <TIM_Base_SetConfig+0x9a>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a26      	ldr	r2, [pc, #152]	; (800cf18 <TIM_Base_SetConfig+0x130>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d108      	bne.n	800ce94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	689a      	ldr	r2, [r3, #8]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a10      	ldr	r2, [pc, #64]	; (800cefc <TIM_Base_SetConfig+0x114>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00f      	beq.n	800cee0 <TIM_Base_SetConfig+0xf8>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a12      	ldr	r2, [pc, #72]	; (800cf0c <TIM_Base_SetConfig+0x124>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d00b      	beq.n	800cee0 <TIM_Base_SetConfig+0xf8>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a11      	ldr	r2, [pc, #68]	; (800cf10 <TIM_Base_SetConfig+0x128>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d007      	beq.n	800cee0 <TIM_Base_SetConfig+0xf8>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a10      	ldr	r2, [pc, #64]	; (800cf14 <TIM_Base_SetConfig+0x12c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d003      	beq.n	800cee0 <TIM_Base_SetConfig+0xf8>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a0f      	ldr	r2, [pc, #60]	; (800cf18 <TIM_Base_SetConfig+0x130>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d103      	bne.n	800cee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	615a      	str	r2, [r3, #20]
}
 800ceee:	bf00      	nop
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	40010000 	.word	0x40010000
 800cf00:	40000400 	.word	0x40000400
 800cf04:	40000800 	.word	0x40000800
 800cf08:	40000c00 	.word	0x40000c00
 800cf0c:	40010400 	.word	0x40010400
 800cf10:	40014000 	.word	0x40014000
 800cf14:	40014400 	.word	0x40014400
 800cf18:	40014800 	.word	0x40014800

0800cf1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d101      	bne.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf30:	2302      	movs	r3, #2
 800cf32:	e068      	b.n	800d006 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2202      	movs	r2, #2
 800cf40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a2e      	ldr	r2, [pc, #184]	; (800d014 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d004      	beq.n	800cf68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a2d      	ldr	r2, [pc, #180]	; (800d018 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d108      	bne.n	800cf7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a1e      	ldr	r2, [pc, #120]	; (800d014 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d01d      	beq.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfa6:	d018      	beq.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a1b      	ldr	r2, [pc, #108]	; (800d01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d013      	beq.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a1a      	ldr	r2, [pc, #104]	; (800d020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d00e      	beq.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a18      	ldr	r2, [pc, #96]	; (800d024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d009      	beq.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a13      	ldr	r2, [pc, #76]	; (800d018 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d004      	beq.n	800cfda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a14      	ldr	r2, [pc, #80]	; (800d028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d10c      	bne.n	800cff4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	40010000 	.word	0x40010000
 800d018:	40010400 	.word	0x40010400
 800d01c:	40000400 	.word	0x40000400
 800d020:	40000800 	.word	0x40000800
 800d024:	40000c00 	.word	0x40000c00
 800d028:	40001800 	.word	0x40001800

0800d02c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e042      	b.n	800d100 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d080:	2b00      	cmp	r3, #0
 800d082:	d106      	bne.n	800d092 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7f7 fd65 	bl	8004b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2224      	movs	r2, #36	; 0x24
 800d096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f022 0201 	bic.w	r2, r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fc3c 	bl	800d928 <UART_SetConfig>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d101      	bne.n	800d0ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e022      	b.n	800d100 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f002 fdae 	bl	800fc24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	685a      	ldr	r2, [r3, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689a      	ldr	r2, [r3, #8]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d0e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f042 0201 	orr.w	r2, r2, #1
 800d0f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f002 fe35 	bl	800fd68 <UART_CheckIdleState>
 800d0fe:	4603      	mov	r3, r0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	; 0x28
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	4613      	mov	r3, r2
 800d116:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d11e:	2b20      	cmp	r3, #32
 800d120:	f040 8083 	bne.w	800d22a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <HAL_UART_Transmit+0x28>
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e07b      	b.n	800d22c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <HAL_UART_Transmit+0x3a>
 800d13e:	2302      	movs	r3, #2
 800d140:	e074      	b.n	800d22c <HAL_UART_Transmit+0x124>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2221      	movs	r2, #33	; 0x21
 800d156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800d15a:	f7f8 fb6f 	bl	800583c <HAL_GetTick>
 800d15e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	88fa      	ldrh	r2, [r7, #6]
 800d164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	88fa      	ldrh	r2, [r7, #6]
 800d16c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d178:	d108      	bne.n	800d18c <HAL_UART_Transmit+0x84>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d104      	bne.n	800d18c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	61bb      	str	r3, [r7, #24]
 800d18a:	e003      	b.n	800d194 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d190:	2300      	movs	r3, #0
 800d192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d194:	e02c      	b.n	800d1f0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2200      	movs	r2, #0
 800d19e:	2180      	movs	r1, #128	; 0x80
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f002 fe29 	bl	800fdf8 <UART_WaitOnFlagUntilTimeout>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	e03d      	b.n	800d22c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	61bb      	str	r3, [r7, #24]
 800d1cc:	e007      	b.n	800d1de <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1cc      	bne.n	800d196 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	2200      	movs	r2, #0
 800d204:	2140      	movs	r1, #64	; 0x40
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f002 fdf6 	bl	800fdf8 <UART_WaitOnFlagUntilTimeout>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	e00a      	b.n	800d22c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2220      	movs	r2, #32
 800d21a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	e000      	b.n	800d22c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d22a:	2302      	movs	r3, #2
  }
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3720      	adds	r7, #32
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	4613      	mov	r3, r2
 800d240:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d248:	2b20      	cmp	r3, #32
 800d24a:	d168      	bne.n	800d31e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <HAL_UART_Transmit_IT+0x24>
 800d252:	88fb      	ldrh	r3, [r7, #6]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e061      	b.n	800d320 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d262:	2b01      	cmp	r3, #1
 800d264:	d101      	bne.n	800d26a <HAL_UART_Transmit_IT+0x36>
 800d266:	2302      	movs	r3, #2
 800d268:	e05a      	b.n	800d320 <HAL_UART_Transmit_IT+0xec>
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	68ba      	ldr	r2, [r7, #8]
 800d276:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	88fa      	ldrh	r2, [r7, #6]
 800d27c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	88fa      	ldrh	r2, [r7, #6]
 800d284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2221      	movs	r2, #33	; 0x21
 800d29a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2a6:	d11c      	bne.n	800d2e2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2b0:	d107      	bne.n	800d2c2 <HAL_UART_Transmit_IT+0x8e>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d103      	bne.n	800d2c2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	4a1b      	ldr	r2, [pc, #108]	; (800d32c <HAL_UART_Transmit_IT+0xf8>)
 800d2be:	671a      	str	r2, [r3, #112]	; 0x70
 800d2c0:	e002      	b.n	800d2c8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	4a1a      	ldr	r2, [pc, #104]	; (800d330 <HAL_UART_Transmit_IT+0xfc>)
 800d2c6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689a      	ldr	r2, [r3, #8]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d2de:	609a      	str	r2, [r3, #8]
 800d2e0:	e01b      	b.n	800d31a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ea:	d107      	bne.n	800d2fc <HAL_UART_Transmit_IT+0xc8>
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d103      	bne.n	800d2fc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4a0f      	ldr	r2, [pc, #60]	; (800d334 <HAL_UART_Transmit_IT+0x100>)
 800d2f8:	671a      	str	r2, [r3, #112]	; 0x70
 800d2fa:	e002      	b.n	800d302 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4a0e      	ldr	r2, [pc, #56]	; (800d338 <HAL_UART_Transmit_IT+0x104>)
 800d300:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2200      	movs	r2, #0
 800d306:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d318:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e000      	b.n	800d320 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800d31e:	2302      	movs	r3, #2
  }
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	08010237 	.word	0x08010237
 800d330:	0801019d 	.word	0x0801019d
 800d334:	0801011f 	.word	0x0801011f
 800d338:	080100ab 	.word	0x080100ab

0800d33c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	4613      	mov	r3, r2
 800d348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d350:	2b20      	cmp	r3, #32
 800d352:	f040 80bc 	bne.w	800d4ce <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <HAL_UART_Receive_IT+0x26>
 800d35c:	88fb      	ldrh	r3, [r7, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e0b4      	b.n	800d4d0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <HAL_UART_Receive_IT+0x38>
 800d370:	2302      	movs	r3, #2
 800d372:	e0ad      	b.n	800d4d0 <HAL_UART_Receive_IT+0x194>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	88fa      	ldrh	r2, [r7, #6]
 800d386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	88fa      	ldrh	r2, [r7, #6]
 800d38e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3a0:	d10e      	bne.n	800d3c0 <HAL_UART_Receive_IT+0x84>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d105      	bne.n	800d3b6 <HAL_UART_Receive_IT+0x7a>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d3b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3b4:	e02d      	b.n	800d412 <HAL_UART_Receive_IT+0xd6>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	22ff      	movs	r2, #255	; 0xff
 800d3ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3be:	e028      	b.n	800d412 <HAL_UART_Receive_IT+0xd6>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10d      	bne.n	800d3e4 <HAL_UART_Receive_IT+0xa8>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d104      	bne.n	800d3da <HAL_UART_Receive_IT+0x9e>
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	22ff      	movs	r2, #255	; 0xff
 800d3d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3d8:	e01b      	b.n	800d412 <HAL_UART_Receive_IT+0xd6>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	227f      	movs	r2, #127	; 0x7f
 800d3de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3e2:	e016      	b.n	800d412 <HAL_UART_Receive_IT+0xd6>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3ec:	d10d      	bne.n	800d40a <HAL_UART_Receive_IT+0xce>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d104      	bne.n	800d400 <HAL_UART_Receive_IT+0xc4>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	227f      	movs	r2, #127	; 0x7f
 800d3fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3fe:	e008      	b.n	800d412 <HAL_UART_Receive_IT+0xd6>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	223f      	movs	r2, #63	; 0x3f
 800d404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d408:	e003      	b.n	800d412 <HAL_UART_Receive_IT+0xd6>
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2222      	movs	r2, #34	; 0x22
 800d41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	689a      	ldr	r2, [r3, #8]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f042 0201 	orr.w	r2, r2, #1
 800d430:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d43a:	d12a      	bne.n	800d492 <HAL_UART_Receive_IT+0x156>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d442:	88fa      	ldrh	r2, [r7, #6]
 800d444:	429a      	cmp	r2, r3
 800d446:	d324      	bcc.n	800d492 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d450:	d107      	bne.n	800d462 <HAL_UART_Receive_IT+0x126>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d103      	bne.n	800d462 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4a1f      	ldr	r2, [pc, #124]	; (800d4dc <HAL_UART_Receive_IT+0x1a0>)
 800d45e:	66da      	str	r2, [r3, #108]	; 0x6c
 800d460:	e002      	b.n	800d468 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	4a1e      	ldr	r2, [pc, #120]	; (800d4e0 <HAL_UART_Receive_IT+0x1a4>)
 800d466:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d47e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d48e:	609a      	str	r2, [r3, #8]
 800d490:	e01b      	b.n	800d4ca <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d49a:	d107      	bne.n	800d4ac <HAL_UART_Receive_IT+0x170>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d103      	bne.n	800d4ac <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4a0f      	ldr	r2, [pc, #60]	; (800d4e4 <HAL_UART_Receive_IT+0x1a8>)
 800d4a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d4aa:	e002      	b.n	800d4b2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4a0e      	ldr	r2, [pc, #56]	; (800d4e8 <HAL_UART_Receive_IT+0x1ac>)
 800d4b0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d4c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	e000      	b.n	800d4d0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800d4ce:	2302      	movs	r3, #2
  }
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	0801056d 	.word	0x0801056d
 800d4e0:	08010465 	.word	0x08010465
 800d4e4:	080103b9 	.word	0x080103b9
 800d4e8:	0801030f 	.word	0x0801030f

0800d4ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d500:	2b20      	cmp	r3, #32
 800d502:	d170      	bne.n	800d5e6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <HAL_UART_Receive_DMA+0x24>
 800d50a:	88fb      	ldrh	r3, [r7, #6]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e069      	b.n	800d5e8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d101      	bne.n	800d522 <HAL_UART_Receive_DMA+0x36>
 800d51e:	2302      	movs	r3, #2
 800d520:	e062      	b.n	800d5e8 <HAL_UART_Receive_DMA+0xfc>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	88fa      	ldrh	r2, [r7, #6]
 800d534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2222      	movs	r2, #34	; 0x22
 800d544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d02c      	beq.n	800d5aa <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d554:	4a26      	ldr	r2, [pc, #152]	; (800d5f0 <HAL_UART_Receive_DMA+0x104>)
 800d556:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d55c:	4a25      	ldr	r2, [pc, #148]	; (800d5f4 <HAL_UART_Receive_DMA+0x108>)
 800d55e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d564:	4a24      	ldr	r2, [pc, #144]	; (800d5f8 <HAL_UART_Receive_DMA+0x10c>)
 800d566:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d56c:	2200      	movs	r2, #0
 800d56e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3324      	adds	r3, #36	; 0x24
 800d57a:	4619      	mov	r1, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d580:	461a      	mov	r2, r3
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	f7f9 ff98 	bl	80074b8 <HAL_DMA_Start_IT>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00d      	beq.n	800d5aa <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2210      	movs	r2, #16
 800d592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2220      	movs	r2, #32
 800d5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e01e      	b.n	800d5e8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5c0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f042 0201 	orr.w	r2, r2, #1
 800d5d0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689a      	ldr	r2, [r3, #8]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5e0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e000      	b.n	800d5e8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800d5e6:	2302      	movs	r3, #2
  }
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	0800ff7d 	.word	0x0800ff7d
 800d5f4:	0800ffe3 	.word	0x0800ffe3
 800d5f8:	0800ffff 	.word	0x0800ffff

0800d5fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d61c:	69fa      	ldr	r2, [r7, #28]
 800d61e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d622:	4013      	ands	r3, r2
 800d624:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d118      	bne.n	800d65e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	f003 0320 	and.w	r3, r3, #32
 800d632:	2b00      	cmp	r3, #0
 800d634:	d013      	beq.n	800d65e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	f003 0320 	and.w	r3, r3, #32
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d104      	bne.n	800d64a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d646:	2b00      	cmp	r3, #0
 800d648:	d009      	beq.n	800d65e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8145 	beq.w	800d8de <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	4798      	blx	r3
      }
      return;
 800d65c:	e13f      	b.n	800d8de <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 80e8 	beq.w	800d836 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	4ba1      	ldr	r3, [pc, #644]	; (800d8f0 <HAL_UART_IRQHandler+0x2f4>)
 800d66a:	4013      	ands	r3, r2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d105      	bne.n	800d67c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	4ba0      	ldr	r3, [pc, #640]	; (800d8f4 <HAL_UART_IRQHandler+0x2f8>)
 800d674:	4013      	ands	r3, r2
 800d676:	2b00      	cmp	r3, #0
 800d678:	f000 80dd 	beq.w	800d836 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	2b00      	cmp	r3, #0
 800d684:	d010      	beq.n	800d6a8 <HAL_UART_IRQHandler+0xac>
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00b      	beq.n	800d6a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2201      	movs	r2, #1
 800d696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69e:	f043 0201 	orr.w	r2, r3, #1
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	f003 0302 	and.w	r3, r3, #2
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d010      	beq.n	800d6d4 <HAL_UART_IRQHandler+0xd8>
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f003 0301 	and.w	r3, r3, #1
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00b      	beq.n	800d6d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ca:	f043 0204 	orr.w	r2, r3, #4
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	f003 0304 	and.w	r3, r3, #4
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d010      	beq.n	800d700 <HAL_UART_IRQHandler+0x104>
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00b      	beq.n	800d700 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6f6:	f043 0202 	orr.w	r2, r3, #2
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	f003 0308 	and.w	r3, r3, #8
 800d706:	2b00      	cmp	r3, #0
 800d708:	d015      	beq.n	800d736 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	f003 0320 	and.w	r3, r3, #32
 800d710:	2b00      	cmp	r3, #0
 800d712:	d104      	bne.n	800d71e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d714:	697a      	ldr	r2, [r7, #20]
 800d716:	4b76      	ldr	r3, [pc, #472]	; (800d8f0 <HAL_UART_IRQHandler+0x2f4>)
 800d718:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00b      	beq.n	800d736 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2208      	movs	r2, #8
 800d724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d72c:	f043 0208 	orr.w	r2, r3, #8
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d011      	beq.n	800d764 <HAL_UART_IRQHandler+0x168>
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00c      	beq.n	800d764 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d75a:	f043 0220 	orr.w	r2, r3, #32
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 80b9 	beq.w	800d8e2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	f003 0320 	and.w	r3, r3, #32
 800d776:	2b00      	cmp	r3, #0
 800d778:	d011      	beq.n	800d79e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d104      	bne.n	800d78e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d007      	beq.n	800d79e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b0:	2b40      	cmp	r3, #64	; 0x40
 800d7b2:	d004      	beq.n	800d7be <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d031      	beq.n	800d822 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f002 fbb8 	bl	800ff34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ce:	2b40      	cmp	r3, #64	; 0x40
 800d7d0:	d123      	bne.n	800d81a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	689a      	ldr	r2, [r3, #8]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d013      	beq.n	800d812 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ee:	4a42      	ldr	r2, [pc, #264]	; (800d8f8 <HAL_UART_IRQHandler+0x2fc>)
 800d7f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fa f8c8 	bl	800798c <HAL_DMA_Abort_IT>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d017      	beq.n	800d832 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800d80c:	4610      	mov	r0, r2
 800d80e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d810:	e00f      	b.n	800d832 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f87c 	bl	800d910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d818:	e00b      	b.n	800d832 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f878 	bl	800d910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d820:	e007      	b.n	800d832 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f874 	bl	800d910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800d830:	e057      	b.n	800d8e2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d832:	bf00      	nop
    return;
 800d834:	e055      	b.n	800d8e2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00d      	beq.n	800d85c <HAL_UART_IRQHandler+0x260>
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d008      	beq.n	800d85c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f002 ff0d 	bl	8010674 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d85a:	e045      	b.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d862:	2b00      	cmp	r3, #0
 800d864:	d012      	beq.n	800d88c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d104      	bne.n	800d87a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d876:	2b00      	cmp	r3, #0
 800d878:	d008      	beq.n	800d88c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d031      	beq.n	800d8e6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	4798      	blx	r3
    }
    return;
 800d88a:	e02c      	b.n	800d8e6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	d008      	beq.n	800d8a8 <HAL_UART_IRQHandler+0x2ac>
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f002 fd1a 	bl	80102da <UART_EndTransmit_IT>
    return;
 800d8a6:	e01f      	b.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d008      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x2c8>
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f002 feed 	bl	801069c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8c2:	e011      	b.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00c      	beq.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	da09      	bge.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f002 fed7 	bl	8010688 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8da:	bf00      	nop
 800d8dc:	e004      	b.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
      return;
 800d8de:	bf00      	nop
 800d8e0:	e002      	b.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800d8e2:	bf00      	nop
 800d8e4:	e000      	b.n	800d8e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800d8e6:	bf00      	nop
  }
}
 800d8e8:	3720      	adds	r7, #32
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	10000001 	.word	0x10000001
 800d8f4:	04000120 	.word	0x04000120
 800d8f8:	0801007f 	.word	0x0801007f

0800d8fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	0000      	movs	r0, r0
	...

0800d928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d928:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d92c:	b090      	sub	sp, #64	; 0x40
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d932:	2300      	movs	r3, #0
 800d934:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800d93c:	2300      	movs	r3, #0
 800d93e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	689a      	ldr	r2, [r3, #8]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	431a      	orrs	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	431a      	orrs	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	69db      	ldr	r3, [r3, #28]
 800d954:	4313      	orrs	r3, r2
 800d956:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d95c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d95e:	4313      	orrs	r3, r2
 800d960:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	4bc1      	ldr	r3, [pc, #772]	; (800dc70 <UART_SetConfig+0x348>)
 800d96a:	4013      	ands	r3, r2
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	6812      	ldr	r2, [r2, #0]
 800d970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d972:	430b      	orrs	r3, r1
 800d974:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	68da      	ldr	r2, [r3, #12]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	430a      	orrs	r2, r1
 800d98a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4ab7      	ldr	r2, [pc, #732]	; (800dc74 <UART_SetConfig+0x34c>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d004      	beq.n	800d9a6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	4bb2      	ldr	r3, [pc, #712]	; (800dc78 <UART_SetConfig+0x350>)
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	6812      	ldr	r2, [r2, #0]
 800d9b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9b6:	430b      	orrs	r3, r1
 800d9b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	f023 010f 	bic.w	r1, r3, #15
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4aa9      	ldr	r2, [pc, #676]	; (800dc7c <UART_SetConfig+0x354>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d177      	bne.n	800daca <UART_SetConfig+0x1a2>
 800d9da:	4ba9      	ldr	r3, [pc, #676]	; (800dc80 <UART_SetConfig+0x358>)
 800d9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9e2:	2b28      	cmp	r3, #40	; 0x28
 800d9e4:	d86c      	bhi.n	800dac0 <UART_SetConfig+0x198>
 800d9e6:	a201      	add	r2, pc, #4	; (adr r2, 800d9ec <UART_SetConfig+0xc4>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800da91 	.word	0x0800da91
 800d9f0:	0800dac1 	.word	0x0800dac1
 800d9f4:	0800dac1 	.word	0x0800dac1
 800d9f8:	0800dac1 	.word	0x0800dac1
 800d9fc:	0800dac1 	.word	0x0800dac1
 800da00:	0800dac1 	.word	0x0800dac1
 800da04:	0800dac1 	.word	0x0800dac1
 800da08:	0800dac1 	.word	0x0800dac1
 800da0c:	0800da99 	.word	0x0800da99
 800da10:	0800dac1 	.word	0x0800dac1
 800da14:	0800dac1 	.word	0x0800dac1
 800da18:	0800dac1 	.word	0x0800dac1
 800da1c:	0800dac1 	.word	0x0800dac1
 800da20:	0800dac1 	.word	0x0800dac1
 800da24:	0800dac1 	.word	0x0800dac1
 800da28:	0800dac1 	.word	0x0800dac1
 800da2c:	0800daa1 	.word	0x0800daa1
 800da30:	0800dac1 	.word	0x0800dac1
 800da34:	0800dac1 	.word	0x0800dac1
 800da38:	0800dac1 	.word	0x0800dac1
 800da3c:	0800dac1 	.word	0x0800dac1
 800da40:	0800dac1 	.word	0x0800dac1
 800da44:	0800dac1 	.word	0x0800dac1
 800da48:	0800dac1 	.word	0x0800dac1
 800da4c:	0800daa9 	.word	0x0800daa9
 800da50:	0800dac1 	.word	0x0800dac1
 800da54:	0800dac1 	.word	0x0800dac1
 800da58:	0800dac1 	.word	0x0800dac1
 800da5c:	0800dac1 	.word	0x0800dac1
 800da60:	0800dac1 	.word	0x0800dac1
 800da64:	0800dac1 	.word	0x0800dac1
 800da68:	0800dac1 	.word	0x0800dac1
 800da6c:	0800dab1 	.word	0x0800dab1
 800da70:	0800dac1 	.word	0x0800dac1
 800da74:	0800dac1 	.word	0x0800dac1
 800da78:	0800dac1 	.word	0x0800dac1
 800da7c:	0800dac1 	.word	0x0800dac1
 800da80:	0800dac1 	.word	0x0800dac1
 800da84:	0800dac1 	.word	0x0800dac1
 800da88:	0800dac1 	.word	0x0800dac1
 800da8c:	0800dab9 	.word	0x0800dab9
 800da90:	2301      	movs	r3, #1
 800da92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da96:	e233      	b.n	800df00 <UART_SetConfig+0x5d8>
 800da98:	2304      	movs	r3, #4
 800da9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da9e:	e22f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800daa0:	2308      	movs	r3, #8
 800daa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800daa6:	e22b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800daa8:	2310      	movs	r3, #16
 800daaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800daae:	e227      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dab0:	2320      	movs	r3, #32
 800dab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dab6:	e223      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dab8:	2340      	movs	r3, #64	; 0x40
 800daba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dabe:	e21f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dac0:	2380      	movs	r3, #128	; 0x80
 800dac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dac6:	bf00      	nop
 800dac8:	e21a      	b.n	800df00 <UART_SetConfig+0x5d8>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a6d      	ldr	r2, [pc, #436]	; (800dc84 <UART_SetConfig+0x35c>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d132      	bne.n	800db3a <UART_SetConfig+0x212>
 800dad4:	4b6a      	ldr	r3, [pc, #424]	; (800dc80 <UART_SetConfig+0x358>)
 800dad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad8:	f003 0307 	and.w	r3, r3, #7
 800dadc:	2b05      	cmp	r3, #5
 800dade:	d827      	bhi.n	800db30 <UART_SetConfig+0x208>
 800dae0:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <UART_SetConfig+0x1c0>)
 800dae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae6:	bf00      	nop
 800dae8:	0800db01 	.word	0x0800db01
 800daec:	0800db09 	.word	0x0800db09
 800daf0:	0800db11 	.word	0x0800db11
 800daf4:	0800db19 	.word	0x0800db19
 800daf8:	0800db21 	.word	0x0800db21
 800dafc:	0800db29 	.word	0x0800db29
 800db00:	2300      	movs	r3, #0
 800db02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db06:	e1fb      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db08:	2304      	movs	r3, #4
 800db0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db0e:	e1f7      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db10:	2308      	movs	r3, #8
 800db12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db16:	e1f3      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db18:	2310      	movs	r3, #16
 800db1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db1e:	e1ef      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db20:	2320      	movs	r3, #32
 800db22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db26:	e1eb      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db28:	2340      	movs	r3, #64	; 0x40
 800db2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db2e:	e1e7      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db30:	2380      	movs	r3, #128	; 0x80
 800db32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db36:	bf00      	nop
 800db38:	e1e2      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a52      	ldr	r2, [pc, #328]	; (800dc88 <UART_SetConfig+0x360>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d132      	bne.n	800dbaa <UART_SetConfig+0x282>
 800db44:	4b4e      	ldr	r3, [pc, #312]	; (800dc80 <UART_SetConfig+0x358>)
 800db46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db48:	f003 0307 	and.w	r3, r3, #7
 800db4c:	2b05      	cmp	r3, #5
 800db4e:	d827      	bhi.n	800dba0 <UART_SetConfig+0x278>
 800db50:	a201      	add	r2, pc, #4	; (adr r2, 800db58 <UART_SetConfig+0x230>)
 800db52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db56:	bf00      	nop
 800db58:	0800db71 	.word	0x0800db71
 800db5c:	0800db79 	.word	0x0800db79
 800db60:	0800db81 	.word	0x0800db81
 800db64:	0800db89 	.word	0x0800db89
 800db68:	0800db91 	.word	0x0800db91
 800db6c:	0800db99 	.word	0x0800db99
 800db70:	2300      	movs	r3, #0
 800db72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db76:	e1c3      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db78:	2304      	movs	r3, #4
 800db7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db7e:	e1bf      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db80:	2308      	movs	r3, #8
 800db82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db86:	e1bb      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db88:	2310      	movs	r3, #16
 800db8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db8e:	e1b7      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db90:	2320      	movs	r3, #32
 800db92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db96:	e1b3      	b.n	800df00 <UART_SetConfig+0x5d8>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db9e:	e1af      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dba6:	bf00      	nop
 800dba8:	e1aa      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a37      	ldr	r2, [pc, #220]	; (800dc8c <UART_SetConfig+0x364>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d132      	bne.n	800dc1a <UART_SetConfig+0x2f2>
 800dbb4:	4b32      	ldr	r3, [pc, #200]	; (800dc80 <UART_SetConfig+0x358>)
 800dbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb8:	f003 0307 	and.w	r3, r3, #7
 800dbbc:	2b05      	cmp	r3, #5
 800dbbe:	d827      	bhi.n	800dc10 <UART_SetConfig+0x2e8>
 800dbc0:	a201      	add	r2, pc, #4	; (adr r2, 800dbc8 <UART_SetConfig+0x2a0>)
 800dbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc6:	bf00      	nop
 800dbc8:	0800dbe1 	.word	0x0800dbe1
 800dbcc:	0800dbe9 	.word	0x0800dbe9
 800dbd0:	0800dbf1 	.word	0x0800dbf1
 800dbd4:	0800dbf9 	.word	0x0800dbf9
 800dbd8:	0800dc01 	.word	0x0800dc01
 800dbdc:	0800dc09 	.word	0x0800dc09
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbe6:	e18b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dbe8:	2304      	movs	r3, #4
 800dbea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbee:	e187      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dbf0:	2308      	movs	r3, #8
 800dbf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbf6:	e183      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dbf8:	2310      	movs	r3, #16
 800dbfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbfe:	e17f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc00:	2320      	movs	r3, #32
 800dc02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc06:	e17b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc08:	2340      	movs	r3, #64	; 0x40
 800dc0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc0e:	e177      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc10:	2380      	movs	r3, #128	; 0x80
 800dc12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc16:	bf00      	nop
 800dc18:	e172      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a1c      	ldr	r2, [pc, #112]	; (800dc90 <UART_SetConfig+0x368>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d144      	bne.n	800dcae <UART_SetConfig+0x386>
 800dc24:	4b16      	ldr	r3, [pc, #88]	; (800dc80 <UART_SetConfig+0x358>)
 800dc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc28:	f003 0307 	and.w	r3, r3, #7
 800dc2c:	2b05      	cmp	r3, #5
 800dc2e:	d839      	bhi.n	800dca4 <UART_SetConfig+0x37c>
 800dc30:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <UART_SetConfig+0x310>)
 800dc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc36:	bf00      	nop
 800dc38:	0800dc51 	.word	0x0800dc51
 800dc3c:	0800dc59 	.word	0x0800dc59
 800dc40:	0800dc61 	.word	0x0800dc61
 800dc44:	0800dc69 	.word	0x0800dc69
 800dc48:	0800dc95 	.word	0x0800dc95
 800dc4c:	0800dc9d 	.word	0x0800dc9d
 800dc50:	2300      	movs	r3, #0
 800dc52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc56:	e153      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc58:	2304      	movs	r3, #4
 800dc5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc5e:	e14f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc60:	2308      	movs	r3, #8
 800dc62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc66:	e14b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc68:	2310      	movs	r3, #16
 800dc6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc6e:	e147      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc70:	cfff69f3 	.word	0xcfff69f3
 800dc74:	58000c00 	.word	0x58000c00
 800dc78:	11fff4ff 	.word	0x11fff4ff
 800dc7c:	40011000 	.word	0x40011000
 800dc80:	58024400 	.word	0x58024400
 800dc84:	40004400 	.word	0x40004400
 800dc88:	40004800 	.word	0x40004800
 800dc8c:	40004c00 	.word	0x40004c00
 800dc90:	40005000 	.word	0x40005000
 800dc94:	2320      	movs	r3, #32
 800dc96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc9a:	e131      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dc9c:	2340      	movs	r3, #64	; 0x40
 800dc9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dca2:	e12d      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dca4:	2380      	movs	r3, #128	; 0x80
 800dca6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dcaa:	bf00      	nop
 800dcac:	e128      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4ac3      	ldr	r2, [pc, #780]	; (800dfc0 <UART_SetConfig+0x698>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d178      	bne.n	800ddaa <UART_SetConfig+0x482>
 800dcb8:	4bc2      	ldr	r3, [pc, #776]	; (800dfc4 <UART_SetConfig+0x69c>)
 800dcba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcc0:	2b28      	cmp	r3, #40	; 0x28
 800dcc2:	d86d      	bhi.n	800dda0 <UART_SetConfig+0x478>
 800dcc4:	a201      	add	r2, pc, #4	; (adr r2, 800dccc <UART_SetConfig+0x3a4>)
 800dcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcca:	bf00      	nop
 800dccc:	0800dd71 	.word	0x0800dd71
 800dcd0:	0800dda1 	.word	0x0800dda1
 800dcd4:	0800dda1 	.word	0x0800dda1
 800dcd8:	0800dda1 	.word	0x0800dda1
 800dcdc:	0800dda1 	.word	0x0800dda1
 800dce0:	0800dda1 	.word	0x0800dda1
 800dce4:	0800dda1 	.word	0x0800dda1
 800dce8:	0800dda1 	.word	0x0800dda1
 800dcec:	0800dd79 	.word	0x0800dd79
 800dcf0:	0800dda1 	.word	0x0800dda1
 800dcf4:	0800dda1 	.word	0x0800dda1
 800dcf8:	0800dda1 	.word	0x0800dda1
 800dcfc:	0800dda1 	.word	0x0800dda1
 800dd00:	0800dda1 	.word	0x0800dda1
 800dd04:	0800dda1 	.word	0x0800dda1
 800dd08:	0800dda1 	.word	0x0800dda1
 800dd0c:	0800dd81 	.word	0x0800dd81
 800dd10:	0800dda1 	.word	0x0800dda1
 800dd14:	0800dda1 	.word	0x0800dda1
 800dd18:	0800dda1 	.word	0x0800dda1
 800dd1c:	0800dda1 	.word	0x0800dda1
 800dd20:	0800dda1 	.word	0x0800dda1
 800dd24:	0800dda1 	.word	0x0800dda1
 800dd28:	0800dda1 	.word	0x0800dda1
 800dd2c:	0800dd89 	.word	0x0800dd89
 800dd30:	0800dda1 	.word	0x0800dda1
 800dd34:	0800dda1 	.word	0x0800dda1
 800dd38:	0800dda1 	.word	0x0800dda1
 800dd3c:	0800dda1 	.word	0x0800dda1
 800dd40:	0800dda1 	.word	0x0800dda1
 800dd44:	0800dda1 	.word	0x0800dda1
 800dd48:	0800dda1 	.word	0x0800dda1
 800dd4c:	0800dd91 	.word	0x0800dd91
 800dd50:	0800dda1 	.word	0x0800dda1
 800dd54:	0800dda1 	.word	0x0800dda1
 800dd58:	0800dda1 	.word	0x0800dda1
 800dd5c:	0800dda1 	.word	0x0800dda1
 800dd60:	0800dda1 	.word	0x0800dda1
 800dd64:	0800dda1 	.word	0x0800dda1
 800dd68:	0800dda1 	.word	0x0800dda1
 800dd6c:	0800dd99 	.word	0x0800dd99
 800dd70:	2301      	movs	r3, #1
 800dd72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd76:	e0c3      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dd78:	2304      	movs	r3, #4
 800dd7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd7e:	e0bf      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dd80:	2308      	movs	r3, #8
 800dd82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd86:	e0bb      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dd88:	2310      	movs	r3, #16
 800dd8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd8e:	e0b7      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dd90:	2320      	movs	r3, #32
 800dd92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd96:	e0b3      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dd98:	2340      	movs	r3, #64	; 0x40
 800dd9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd9e:	e0af      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dda0:	2380      	movs	r3, #128	; 0x80
 800dda2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dda6:	bf00      	nop
 800dda8:	e0aa      	b.n	800df00 <UART_SetConfig+0x5d8>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a86      	ldr	r2, [pc, #536]	; (800dfc8 <UART_SetConfig+0x6a0>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d132      	bne.n	800de1a <UART_SetConfig+0x4f2>
 800ddb4:	4b83      	ldr	r3, [pc, #524]	; (800dfc4 <UART_SetConfig+0x69c>)
 800ddb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddb8:	f003 0307 	and.w	r3, r3, #7
 800ddbc:	2b05      	cmp	r3, #5
 800ddbe:	d827      	bhi.n	800de10 <UART_SetConfig+0x4e8>
 800ddc0:	a201      	add	r2, pc, #4	; (adr r2, 800ddc8 <UART_SetConfig+0x4a0>)
 800ddc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc6:	bf00      	nop
 800ddc8:	0800dde1 	.word	0x0800dde1
 800ddcc:	0800dde9 	.word	0x0800dde9
 800ddd0:	0800ddf1 	.word	0x0800ddf1
 800ddd4:	0800ddf9 	.word	0x0800ddf9
 800ddd8:	0800de01 	.word	0x0800de01
 800dddc:	0800de09 	.word	0x0800de09
 800dde0:	2300      	movs	r3, #0
 800dde2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dde6:	e08b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dde8:	2304      	movs	r3, #4
 800ddea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ddee:	e087      	b.n	800df00 <UART_SetConfig+0x5d8>
 800ddf0:	2308      	movs	r3, #8
 800ddf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ddf6:	e083      	b.n	800df00 <UART_SetConfig+0x5d8>
 800ddf8:	2310      	movs	r3, #16
 800ddfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ddfe:	e07f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de00:	2320      	movs	r3, #32
 800de02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de06:	e07b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de08:	2340      	movs	r3, #64	; 0x40
 800de0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de0e:	e077      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de10:	2380      	movs	r3, #128	; 0x80
 800de12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de16:	bf00      	nop
 800de18:	e072      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4a6b      	ldr	r2, [pc, #428]	; (800dfcc <UART_SetConfig+0x6a4>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d132      	bne.n	800de8a <UART_SetConfig+0x562>
 800de24:	4b67      	ldr	r3, [pc, #412]	; (800dfc4 <UART_SetConfig+0x69c>)
 800de26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de28:	f003 0307 	and.w	r3, r3, #7
 800de2c:	2b05      	cmp	r3, #5
 800de2e:	d827      	bhi.n	800de80 <UART_SetConfig+0x558>
 800de30:	a201      	add	r2, pc, #4	; (adr r2, 800de38 <UART_SetConfig+0x510>)
 800de32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de36:	bf00      	nop
 800de38:	0800de51 	.word	0x0800de51
 800de3c:	0800de59 	.word	0x0800de59
 800de40:	0800de61 	.word	0x0800de61
 800de44:	0800de69 	.word	0x0800de69
 800de48:	0800de71 	.word	0x0800de71
 800de4c:	0800de79 	.word	0x0800de79
 800de50:	2300      	movs	r3, #0
 800de52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de56:	e053      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de58:	2304      	movs	r3, #4
 800de5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de5e:	e04f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de60:	2308      	movs	r3, #8
 800de62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de66:	e04b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de68:	2310      	movs	r3, #16
 800de6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de6e:	e047      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de70:	2320      	movs	r3, #32
 800de72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de76:	e043      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de78:	2340      	movs	r3, #64	; 0x40
 800de7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de7e:	e03f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de80:	2380      	movs	r3, #128	; 0x80
 800de82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de86:	bf00      	nop
 800de88:	e03a      	b.n	800df00 <UART_SetConfig+0x5d8>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a50      	ldr	r2, [pc, #320]	; (800dfd0 <UART_SetConfig+0x6a8>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d132      	bne.n	800defa <UART_SetConfig+0x5d2>
 800de94:	4b4b      	ldr	r3, [pc, #300]	; (800dfc4 <UART_SetConfig+0x69c>)
 800de96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de98:	f003 0307 	and.w	r3, r3, #7
 800de9c:	2b05      	cmp	r3, #5
 800de9e:	d827      	bhi.n	800def0 <UART_SetConfig+0x5c8>
 800dea0:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <UART_SetConfig+0x580>)
 800dea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea6:	bf00      	nop
 800dea8:	0800dec1 	.word	0x0800dec1
 800deac:	0800dec9 	.word	0x0800dec9
 800deb0:	0800ded1 	.word	0x0800ded1
 800deb4:	0800ded9 	.word	0x0800ded9
 800deb8:	0800dee1 	.word	0x0800dee1
 800debc:	0800dee9 	.word	0x0800dee9
 800dec0:	2302      	movs	r3, #2
 800dec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dec6:	e01b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dec8:	2304      	movs	r3, #4
 800deca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dece:	e017      	b.n	800df00 <UART_SetConfig+0x5d8>
 800ded0:	2308      	movs	r3, #8
 800ded2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ded6:	e013      	b.n	800df00 <UART_SetConfig+0x5d8>
 800ded8:	2310      	movs	r3, #16
 800deda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dede:	e00f      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dee0:	2320      	movs	r3, #32
 800dee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dee6:	e00b      	b.n	800df00 <UART_SetConfig+0x5d8>
 800dee8:	2340      	movs	r3, #64	; 0x40
 800deea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800deee:	e007      	b.n	800df00 <UART_SetConfig+0x5d8>
 800def0:	2380      	movs	r3, #128	; 0x80
 800def2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800def6:	bf00      	nop
 800def8:	e002      	b.n	800df00 <UART_SetConfig+0x5d8>
 800defa:	2380      	movs	r3, #128	; 0x80
 800defc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a32      	ldr	r2, [pc, #200]	; (800dfd0 <UART_SetConfig+0x6a8>)
 800df06:	4293      	cmp	r3, r2
 800df08:	f040 86f7 	bne.w	800ecfa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800df10:	2b08      	cmp	r3, #8
 800df12:	f000 80c0 	beq.w	800e096 <UART_SetConfig+0x76e>
 800df16:	2b08      	cmp	r3, #8
 800df18:	dc04      	bgt.n	800df24 <UART_SetConfig+0x5fc>
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d00c      	beq.n	800df38 <UART_SetConfig+0x610>
 800df1e:	2b04      	cmp	r3, #4
 800df20:	d065      	beq.n	800dfee <UART_SetConfig+0x6c6>
 800df22:	e27a      	b.n	800e41a <UART_SetConfig+0xaf2>
 800df24:	2b20      	cmp	r3, #32
 800df26:	f000 81b0 	beq.w	800e28a <UART_SetConfig+0x962>
 800df2a:	2b40      	cmp	r3, #64	; 0x40
 800df2c:	f000 821e 	beq.w	800e36c <UART_SetConfig+0xa44>
 800df30:	2b10      	cmp	r3, #16
 800df32:	f000 8104 	beq.w	800e13e <UART_SetConfig+0x816>
 800df36:	e270      	b.n	800e41a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800df38:	f7fe f85a 	bl	800bff0 <HAL_RCCEx_GetD3PCLK1Freq>
 800df3c:	4602      	mov	r2, r0
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df42:	2b00      	cmp	r3, #0
 800df44:	d04e      	beq.n	800dfe4 <UART_SetConfig+0x6bc>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d048      	beq.n	800dfe0 <UART_SetConfig+0x6b8>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	2b02      	cmp	r3, #2
 800df54:	d042      	beq.n	800dfdc <UART_SetConfig+0x6b4>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d03c      	beq.n	800dfd8 <UART_SetConfig+0x6b0>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df62:	2b04      	cmp	r3, #4
 800df64:	d036      	beq.n	800dfd4 <UART_SetConfig+0x6ac>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	d026      	beq.n	800dfbc <UART_SetConfig+0x694>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df72:	2b06      	cmp	r3, #6
 800df74:	d020      	beq.n	800dfb8 <UART_SetConfig+0x690>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7a:	2b07      	cmp	r3, #7
 800df7c:	d01a      	beq.n	800dfb4 <UART_SetConfig+0x68c>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df82:	2b08      	cmp	r3, #8
 800df84:	d014      	beq.n	800dfb0 <UART_SetConfig+0x688>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8a:	2b09      	cmp	r3, #9
 800df8c:	d00e      	beq.n	800dfac <UART_SetConfig+0x684>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df92:	2b0a      	cmp	r3, #10
 800df94:	d008      	beq.n	800dfa8 <UART_SetConfig+0x680>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9a:	2b0b      	cmp	r3, #11
 800df9c:	d102      	bne.n	800dfa4 <UART_SetConfig+0x67c>
 800df9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfa2:	e020      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e01e      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfa8:	2380      	movs	r3, #128	; 0x80
 800dfaa:	e01c      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfac:	2340      	movs	r3, #64	; 0x40
 800dfae:	e01a      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfb0:	2320      	movs	r3, #32
 800dfb2:	e018      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfb4:	2310      	movs	r3, #16
 800dfb6:	e016      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfb8:	230c      	movs	r3, #12
 800dfba:	e014      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfbc:	230a      	movs	r3, #10
 800dfbe:	e012      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfc0:	40011400 	.word	0x40011400
 800dfc4:	58024400 	.word	0x58024400
 800dfc8:	40007800 	.word	0x40007800
 800dfcc:	40007c00 	.word	0x40007c00
 800dfd0:	58000c00 	.word	0x58000c00
 800dfd4:	2308      	movs	r3, #8
 800dfd6:	e006      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfd8:	2306      	movs	r3, #6
 800dfda:	e004      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfdc:	2304      	movs	r3, #4
 800dfde:	e002      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	e000      	b.n	800dfe6 <UART_SetConfig+0x6be>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfec:	e219      	b.n	800e422 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfee:	f107 0318 	add.w	r3, r7, #24
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fe f812 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800dff8:	69fa      	ldr	r2, [r7, #28]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d044      	beq.n	800e08c <UART_SetConfig+0x764>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	2b01      	cmp	r3, #1
 800e008:	d03e      	beq.n	800e088 <UART_SetConfig+0x760>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d038      	beq.n	800e084 <UART_SetConfig+0x75c>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e016:	2b03      	cmp	r3, #3
 800e018:	d032      	beq.n	800e080 <UART_SetConfig+0x758>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2b04      	cmp	r3, #4
 800e020:	d02c      	beq.n	800e07c <UART_SetConfig+0x754>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	2b05      	cmp	r3, #5
 800e028:	d026      	beq.n	800e078 <UART_SetConfig+0x750>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	2b06      	cmp	r3, #6
 800e030:	d020      	beq.n	800e074 <UART_SetConfig+0x74c>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e036:	2b07      	cmp	r3, #7
 800e038:	d01a      	beq.n	800e070 <UART_SetConfig+0x748>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	2b08      	cmp	r3, #8
 800e040:	d014      	beq.n	800e06c <UART_SetConfig+0x744>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	2b09      	cmp	r3, #9
 800e048:	d00e      	beq.n	800e068 <UART_SetConfig+0x740>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04e:	2b0a      	cmp	r3, #10
 800e050:	d008      	beq.n	800e064 <UART_SetConfig+0x73c>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	2b0b      	cmp	r3, #11
 800e058:	d102      	bne.n	800e060 <UART_SetConfig+0x738>
 800e05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e05e:	e016      	b.n	800e08e <UART_SetConfig+0x766>
 800e060:	2301      	movs	r3, #1
 800e062:	e014      	b.n	800e08e <UART_SetConfig+0x766>
 800e064:	2380      	movs	r3, #128	; 0x80
 800e066:	e012      	b.n	800e08e <UART_SetConfig+0x766>
 800e068:	2340      	movs	r3, #64	; 0x40
 800e06a:	e010      	b.n	800e08e <UART_SetConfig+0x766>
 800e06c:	2320      	movs	r3, #32
 800e06e:	e00e      	b.n	800e08e <UART_SetConfig+0x766>
 800e070:	2310      	movs	r3, #16
 800e072:	e00c      	b.n	800e08e <UART_SetConfig+0x766>
 800e074:	230c      	movs	r3, #12
 800e076:	e00a      	b.n	800e08e <UART_SetConfig+0x766>
 800e078:	230a      	movs	r3, #10
 800e07a:	e008      	b.n	800e08e <UART_SetConfig+0x766>
 800e07c:	2308      	movs	r3, #8
 800e07e:	e006      	b.n	800e08e <UART_SetConfig+0x766>
 800e080:	2306      	movs	r3, #6
 800e082:	e004      	b.n	800e08e <UART_SetConfig+0x766>
 800e084:	2304      	movs	r3, #4
 800e086:	e002      	b.n	800e08e <UART_SetConfig+0x766>
 800e088:	2302      	movs	r3, #2
 800e08a:	e000      	b.n	800e08e <UART_SetConfig+0x766>
 800e08c:	2301      	movs	r3, #1
 800e08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e094:	e1c5      	b.n	800e422 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e096:	f107 030c 	add.w	r3, r7, #12
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fe f90a 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d044      	beq.n	800e134 <UART_SetConfig+0x80c>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d03e      	beq.n	800e130 <UART_SetConfig+0x808>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d038      	beq.n	800e12c <UART_SetConfig+0x804>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d032      	beq.n	800e128 <UART_SetConfig+0x800>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	2b04      	cmp	r3, #4
 800e0c8:	d02c      	beq.n	800e124 <UART_SetConfig+0x7fc>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	d026      	beq.n	800e120 <UART_SetConfig+0x7f8>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d6:	2b06      	cmp	r3, #6
 800e0d8:	d020      	beq.n	800e11c <UART_SetConfig+0x7f4>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	d01a      	beq.n	800e118 <UART_SetConfig+0x7f0>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	2b08      	cmp	r3, #8
 800e0e8:	d014      	beq.n	800e114 <UART_SetConfig+0x7ec>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	2b09      	cmp	r3, #9
 800e0f0:	d00e      	beq.n	800e110 <UART_SetConfig+0x7e8>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	2b0a      	cmp	r3, #10
 800e0f8:	d008      	beq.n	800e10c <UART_SetConfig+0x7e4>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b0b      	cmp	r3, #11
 800e100:	d102      	bne.n	800e108 <UART_SetConfig+0x7e0>
 800e102:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e106:	e016      	b.n	800e136 <UART_SetConfig+0x80e>
 800e108:	2301      	movs	r3, #1
 800e10a:	e014      	b.n	800e136 <UART_SetConfig+0x80e>
 800e10c:	2380      	movs	r3, #128	; 0x80
 800e10e:	e012      	b.n	800e136 <UART_SetConfig+0x80e>
 800e110:	2340      	movs	r3, #64	; 0x40
 800e112:	e010      	b.n	800e136 <UART_SetConfig+0x80e>
 800e114:	2320      	movs	r3, #32
 800e116:	e00e      	b.n	800e136 <UART_SetConfig+0x80e>
 800e118:	2310      	movs	r3, #16
 800e11a:	e00c      	b.n	800e136 <UART_SetConfig+0x80e>
 800e11c:	230c      	movs	r3, #12
 800e11e:	e00a      	b.n	800e136 <UART_SetConfig+0x80e>
 800e120:	230a      	movs	r3, #10
 800e122:	e008      	b.n	800e136 <UART_SetConfig+0x80e>
 800e124:	2308      	movs	r3, #8
 800e126:	e006      	b.n	800e136 <UART_SetConfig+0x80e>
 800e128:	2306      	movs	r3, #6
 800e12a:	e004      	b.n	800e136 <UART_SetConfig+0x80e>
 800e12c:	2304      	movs	r3, #4
 800e12e:	e002      	b.n	800e136 <UART_SetConfig+0x80e>
 800e130:	2302      	movs	r3, #2
 800e132:	e000      	b.n	800e136 <UART_SetConfig+0x80e>
 800e134:	2301      	movs	r3, #1
 800e136:	fbb2 f3f3 	udiv	r3, r2, r3
 800e13a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e13c:	e171      	b.n	800e422 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e13e:	4b7a      	ldr	r3, [pc, #488]	; (800e328 <UART_SetConfig+0xa00>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	2b00      	cmp	r3, #0
 800e148:	d054      	beq.n	800e1f4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e14a:	4b77      	ldr	r3, [pc, #476]	; (800e328 <UART_SetConfig+0xa00>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	08db      	lsrs	r3, r3, #3
 800e150:	f003 0303 	and.w	r3, r3, #3
 800e154:	4a75      	ldr	r2, [pc, #468]	; (800e32c <UART_SetConfig+0xa04>)
 800e156:	40da      	lsrs	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d044      	beq.n	800e1ea <UART_SetConfig+0x8c2>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	2b01      	cmp	r3, #1
 800e166:	d03e      	beq.n	800e1e6 <UART_SetConfig+0x8be>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16c:	2b02      	cmp	r3, #2
 800e16e:	d038      	beq.n	800e1e2 <UART_SetConfig+0x8ba>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e174:	2b03      	cmp	r3, #3
 800e176:	d032      	beq.n	800e1de <UART_SetConfig+0x8b6>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	2b04      	cmp	r3, #4
 800e17e:	d02c      	beq.n	800e1da <UART_SetConfig+0x8b2>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	2b05      	cmp	r3, #5
 800e186:	d026      	beq.n	800e1d6 <UART_SetConfig+0x8ae>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18c:	2b06      	cmp	r3, #6
 800e18e:	d020      	beq.n	800e1d2 <UART_SetConfig+0x8aa>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e194:	2b07      	cmp	r3, #7
 800e196:	d01a      	beq.n	800e1ce <UART_SetConfig+0x8a6>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19c:	2b08      	cmp	r3, #8
 800e19e:	d014      	beq.n	800e1ca <UART_SetConfig+0x8a2>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	2b09      	cmp	r3, #9
 800e1a6:	d00e      	beq.n	800e1c6 <UART_SetConfig+0x89e>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ac:	2b0a      	cmp	r3, #10
 800e1ae:	d008      	beq.n	800e1c2 <UART_SetConfig+0x89a>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b4:	2b0b      	cmp	r3, #11
 800e1b6:	d102      	bne.n	800e1be <UART_SetConfig+0x896>
 800e1b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1bc:	e016      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e014      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1c2:	2380      	movs	r3, #128	; 0x80
 800e1c4:	e012      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1c6:	2340      	movs	r3, #64	; 0x40
 800e1c8:	e010      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1ca:	2320      	movs	r3, #32
 800e1cc:	e00e      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1ce:	2310      	movs	r3, #16
 800e1d0:	e00c      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1d2:	230c      	movs	r3, #12
 800e1d4:	e00a      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1d6:	230a      	movs	r3, #10
 800e1d8:	e008      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1da:	2308      	movs	r3, #8
 800e1dc:	e006      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1de:	2306      	movs	r3, #6
 800e1e0:	e004      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1e2:	2304      	movs	r3, #4
 800e1e4:	e002      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e000      	b.n	800e1ec <UART_SetConfig+0x8c4>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800e1f2:	e116      	b.n	800e422 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d043      	beq.n	800e284 <UART_SetConfig+0x95c>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e200:	2b01      	cmp	r3, #1
 800e202:	d03d      	beq.n	800e280 <UART_SetConfig+0x958>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d037      	beq.n	800e27c <UART_SetConfig+0x954>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e210:	2b03      	cmp	r3, #3
 800e212:	d031      	beq.n	800e278 <UART_SetConfig+0x950>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e218:	2b04      	cmp	r3, #4
 800e21a:	d02b      	beq.n	800e274 <UART_SetConfig+0x94c>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e220:	2b05      	cmp	r3, #5
 800e222:	d025      	beq.n	800e270 <UART_SetConfig+0x948>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e228:	2b06      	cmp	r3, #6
 800e22a:	d01f      	beq.n	800e26c <UART_SetConfig+0x944>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e230:	2b07      	cmp	r3, #7
 800e232:	d019      	beq.n	800e268 <UART_SetConfig+0x940>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e238:	2b08      	cmp	r3, #8
 800e23a:	d013      	beq.n	800e264 <UART_SetConfig+0x93c>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	2b09      	cmp	r3, #9
 800e242:	d00d      	beq.n	800e260 <UART_SetConfig+0x938>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e248:	2b0a      	cmp	r3, #10
 800e24a:	d007      	beq.n	800e25c <UART_SetConfig+0x934>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e250:	2b0b      	cmp	r3, #11
 800e252:	d101      	bne.n	800e258 <UART_SetConfig+0x930>
 800e254:	4b36      	ldr	r3, [pc, #216]	; (800e330 <UART_SetConfig+0xa08>)
 800e256:	e016      	b.n	800e286 <UART_SetConfig+0x95e>
 800e258:	4b34      	ldr	r3, [pc, #208]	; (800e32c <UART_SetConfig+0xa04>)
 800e25a:	e014      	b.n	800e286 <UART_SetConfig+0x95e>
 800e25c:	4b35      	ldr	r3, [pc, #212]	; (800e334 <UART_SetConfig+0xa0c>)
 800e25e:	e012      	b.n	800e286 <UART_SetConfig+0x95e>
 800e260:	4b35      	ldr	r3, [pc, #212]	; (800e338 <UART_SetConfig+0xa10>)
 800e262:	e010      	b.n	800e286 <UART_SetConfig+0x95e>
 800e264:	4b35      	ldr	r3, [pc, #212]	; (800e33c <UART_SetConfig+0xa14>)
 800e266:	e00e      	b.n	800e286 <UART_SetConfig+0x95e>
 800e268:	4b35      	ldr	r3, [pc, #212]	; (800e340 <UART_SetConfig+0xa18>)
 800e26a:	e00c      	b.n	800e286 <UART_SetConfig+0x95e>
 800e26c:	4b35      	ldr	r3, [pc, #212]	; (800e344 <UART_SetConfig+0xa1c>)
 800e26e:	e00a      	b.n	800e286 <UART_SetConfig+0x95e>
 800e270:	4b35      	ldr	r3, [pc, #212]	; (800e348 <UART_SetConfig+0xa20>)
 800e272:	e008      	b.n	800e286 <UART_SetConfig+0x95e>
 800e274:	4b35      	ldr	r3, [pc, #212]	; (800e34c <UART_SetConfig+0xa24>)
 800e276:	e006      	b.n	800e286 <UART_SetConfig+0x95e>
 800e278:	4b35      	ldr	r3, [pc, #212]	; (800e350 <UART_SetConfig+0xa28>)
 800e27a:	e004      	b.n	800e286 <UART_SetConfig+0x95e>
 800e27c:	4b35      	ldr	r3, [pc, #212]	; (800e354 <UART_SetConfig+0xa2c>)
 800e27e:	e002      	b.n	800e286 <UART_SetConfig+0x95e>
 800e280:	4b35      	ldr	r3, [pc, #212]	; (800e358 <UART_SetConfig+0xa30>)
 800e282:	e000      	b.n	800e286 <UART_SetConfig+0x95e>
 800e284:	4b29      	ldr	r3, [pc, #164]	; (800e32c <UART_SetConfig+0xa04>)
 800e286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e288:	e0cb      	b.n	800e422 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d046      	beq.n	800e320 <UART_SetConfig+0x9f8>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	2b01      	cmp	r3, #1
 800e298:	d040      	beq.n	800e31c <UART_SetConfig+0x9f4>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d03a      	beq.n	800e318 <UART_SetConfig+0x9f0>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d034      	beq.n	800e314 <UART_SetConfig+0x9ec>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ae:	2b04      	cmp	r3, #4
 800e2b0:	d02e      	beq.n	800e310 <UART_SetConfig+0x9e8>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b6:	2b05      	cmp	r3, #5
 800e2b8:	d028      	beq.n	800e30c <UART_SetConfig+0x9e4>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2be:	2b06      	cmp	r3, #6
 800e2c0:	d022      	beq.n	800e308 <UART_SetConfig+0x9e0>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c6:	2b07      	cmp	r3, #7
 800e2c8:	d01c      	beq.n	800e304 <UART_SetConfig+0x9dc>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ce:	2b08      	cmp	r3, #8
 800e2d0:	d016      	beq.n	800e300 <UART_SetConfig+0x9d8>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d6:	2b09      	cmp	r3, #9
 800e2d8:	d00f      	beq.n	800e2fa <UART_SetConfig+0x9d2>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2de:	2b0a      	cmp	r3, #10
 800e2e0:	d008      	beq.n	800e2f4 <UART_SetConfig+0x9cc>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e6:	2b0b      	cmp	r3, #11
 800e2e8:	d102      	bne.n	800e2f0 <UART_SetConfig+0x9c8>
 800e2ea:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e2ee:	e018      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e2f0:	4b13      	ldr	r3, [pc, #76]	; (800e340 <UART_SetConfig+0xa18>)
 800e2f2:	e016      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e2f4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e2f8:	e013      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e2fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e2fe:	e010      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e300:	4b16      	ldr	r3, [pc, #88]	; (800e35c <UART_SetConfig+0xa34>)
 800e302:	e00e      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e304:	4b0a      	ldr	r3, [pc, #40]	; (800e330 <UART_SetConfig+0xa08>)
 800e306:	e00c      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e308:	4b15      	ldr	r3, [pc, #84]	; (800e360 <UART_SetConfig+0xa38>)
 800e30a:	e00a      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e30c:	4b15      	ldr	r3, [pc, #84]	; (800e364 <UART_SetConfig+0xa3c>)
 800e30e:	e008      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e310:	4b08      	ldr	r3, [pc, #32]	; (800e334 <UART_SetConfig+0xa0c>)
 800e312:	e006      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e314:	4b14      	ldr	r3, [pc, #80]	; (800e368 <UART_SetConfig+0xa40>)
 800e316:	e004      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e318:	4b07      	ldr	r3, [pc, #28]	; (800e338 <UART_SetConfig+0xa10>)
 800e31a:	e002      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e31c:	4b07      	ldr	r3, [pc, #28]	; (800e33c <UART_SetConfig+0xa14>)
 800e31e:	e000      	b.n	800e322 <UART_SetConfig+0x9fa>
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <UART_SetConfig+0xa18>)
 800e322:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e324:	e07d      	b.n	800e422 <UART_SetConfig+0xafa>
 800e326:	bf00      	nop
 800e328:	58024400 	.word	0x58024400
 800e32c:	03d09000 	.word	0x03d09000
 800e330:	0003d090 	.word	0x0003d090
 800e334:	0007a120 	.word	0x0007a120
 800e338:	000f4240 	.word	0x000f4240
 800e33c:	001e8480 	.word	0x001e8480
 800e340:	003d0900 	.word	0x003d0900
 800e344:	00516155 	.word	0x00516155
 800e348:	0061a800 	.word	0x0061a800
 800e34c:	007a1200 	.word	0x007a1200
 800e350:	00a2c2aa 	.word	0x00a2c2aa
 800e354:	00f42400 	.word	0x00f42400
 800e358:	01e84800 	.word	0x01e84800
 800e35c:	0001e848 	.word	0x0001e848
 800e360:	00051615 	.word	0x00051615
 800e364:	00061a80 	.word	0x00061a80
 800e368:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	2b00      	cmp	r3, #0
 800e372:	d04e      	beq.n	800e412 <UART_SetConfig+0xaea>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d047      	beq.n	800e40c <UART_SetConfig+0xae4>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2b02      	cmp	r3, #2
 800e382:	d040      	beq.n	800e406 <UART_SetConfig+0xade>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d039      	beq.n	800e400 <UART_SetConfig+0xad8>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e390:	2b04      	cmp	r3, #4
 800e392:	d032      	beq.n	800e3fa <UART_SetConfig+0xad2>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e398:	2b05      	cmp	r3, #5
 800e39a:	d02b      	beq.n	800e3f4 <UART_SetConfig+0xacc>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a0:	2b06      	cmp	r3, #6
 800e3a2:	d024      	beq.n	800e3ee <UART_SetConfig+0xac6>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	2b07      	cmp	r3, #7
 800e3aa:	d01d      	beq.n	800e3e8 <UART_SetConfig+0xac0>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b0:	2b08      	cmp	r3, #8
 800e3b2:	d016      	beq.n	800e3e2 <UART_SetConfig+0xaba>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	2b09      	cmp	r3, #9
 800e3ba:	d00f      	beq.n	800e3dc <UART_SetConfig+0xab4>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c0:	2b0a      	cmp	r3, #10
 800e3c2:	d008      	beq.n	800e3d6 <UART_SetConfig+0xaae>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c8:	2b0b      	cmp	r3, #11
 800e3ca:	d101      	bne.n	800e3d0 <UART_SetConfig+0xaa8>
 800e3cc:	2380      	movs	r3, #128	; 0x80
 800e3ce:	e022      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3d4:	e01f      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3da:	e01c      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3e0:	e019      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e6:	e016      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ec:	e013      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800e3f2:	e010      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800e3f8:	e00d      	b.n	800e416 <UART_SetConfig+0xaee>
 800e3fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3fe:	e00a      	b.n	800e416 <UART_SetConfig+0xaee>
 800e400:	f241 5355 	movw	r3, #5461	; 0x1555
 800e404:	e007      	b.n	800e416 <UART_SetConfig+0xaee>
 800e406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e40a:	e004      	b.n	800e416 <UART_SetConfig+0xaee>
 800e40c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e410:	e001      	b.n	800e416 <UART_SetConfig+0xaee>
 800e412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e418:	e003      	b.n	800e422 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e420:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	2b00      	cmp	r3, #0
 800e426:	f001 83e8 	beq.w	800fbfa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	4613      	mov	r3, r2
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	4413      	add	r3, r2
 800e434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e436:	429a      	cmp	r2, r3
 800e438:	d305      	bcc.n	800e446 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e442:	429a      	cmp	r2, r3
 800e444:	d904      	bls.n	800e450 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e44c:	f001 bbd5 	b.w	800fbfa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800e450:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e454:	2b08      	cmp	r3, #8
 800e456:	f000 8154 	beq.w	800e702 <UART_SetConfig+0xdda>
 800e45a:	2b08      	cmp	r3, #8
 800e45c:	dc06      	bgt.n	800e46c <UART_SetConfig+0xb44>
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d00f      	beq.n	800e482 <UART_SetConfig+0xb5a>
 800e462:	2b04      	cmp	r3, #4
 800e464:	f000 80ac 	beq.w	800e5c0 <UART_SetConfig+0xc98>
 800e468:	f000 bc30 	b.w	800eccc <UART_SetConfig+0x13a4>
 800e46c:	2b20      	cmp	r3, #32
 800e46e:	f000 832d 	beq.w	800eacc <UART_SetConfig+0x11a4>
 800e472:	2b40      	cmp	r3, #64	; 0x40
 800e474:	f000 83a5 	beq.w	800ebc2 <UART_SetConfig+0x129a>
 800e478:	2b10      	cmp	r3, #16
 800e47a:	f000 81e3 	beq.w	800e844 <UART_SetConfig+0xf1c>
 800e47e:	f000 bc25 	b.w	800eccc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e482:	f7fd fdb5 	bl	800bff0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e486:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	4618      	mov	r0, r3
 800e48c:	f04f 0100 	mov.w	r1, #0
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e494:	2b00      	cmp	r3, #0
 800e496:	d067      	beq.n	800e568 <UART_SetConfig+0xc40>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d05e      	beq.n	800e55e <UART_SetConfig+0xc36>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d055      	beq.n	800e554 <UART_SetConfig+0xc2c>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ac:	2b03      	cmp	r3, #3
 800e4ae:	d04c      	beq.n	800e54a <UART_SetConfig+0xc22>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d043      	beq.n	800e540 <UART_SetConfig+0xc18>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4bc:	2b05      	cmp	r3, #5
 800e4be:	d03a      	beq.n	800e536 <UART_SetConfig+0xc0e>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c4:	2b06      	cmp	r3, #6
 800e4c6:	d031      	beq.n	800e52c <UART_SetConfig+0xc04>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4cc:	2b07      	cmp	r3, #7
 800e4ce:	d028      	beq.n	800e522 <UART_SetConfig+0xbfa>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	2b08      	cmp	r3, #8
 800e4d6:	d01f      	beq.n	800e518 <UART_SetConfig+0xbf0>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4dc:	2b09      	cmp	r3, #9
 800e4de:	d016      	beq.n	800e50e <UART_SetConfig+0xbe6>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e4:	2b0a      	cmp	r3, #10
 800e4e6:	d00d      	beq.n	800e504 <UART_SetConfig+0xbdc>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ec:	2b0b      	cmp	r3, #11
 800e4ee:	d104      	bne.n	800e4fa <UART_SetConfig+0xbd2>
 800e4f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4f4:	f04f 0400 	mov.w	r4, #0
 800e4f8:	e03a      	b.n	800e570 <UART_SetConfig+0xc48>
 800e4fa:	f04f 0301 	mov.w	r3, #1
 800e4fe:	f04f 0400 	mov.w	r4, #0
 800e502:	e035      	b.n	800e570 <UART_SetConfig+0xc48>
 800e504:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e508:	f04f 0400 	mov.w	r4, #0
 800e50c:	e030      	b.n	800e570 <UART_SetConfig+0xc48>
 800e50e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e512:	f04f 0400 	mov.w	r4, #0
 800e516:	e02b      	b.n	800e570 <UART_SetConfig+0xc48>
 800e518:	f04f 0320 	mov.w	r3, #32
 800e51c:	f04f 0400 	mov.w	r4, #0
 800e520:	e026      	b.n	800e570 <UART_SetConfig+0xc48>
 800e522:	f04f 0310 	mov.w	r3, #16
 800e526:	f04f 0400 	mov.w	r4, #0
 800e52a:	e021      	b.n	800e570 <UART_SetConfig+0xc48>
 800e52c:	f04f 030c 	mov.w	r3, #12
 800e530:	f04f 0400 	mov.w	r4, #0
 800e534:	e01c      	b.n	800e570 <UART_SetConfig+0xc48>
 800e536:	f04f 030a 	mov.w	r3, #10
 800e53a:	f04f 0400 	mov.w	r4, #0
 800e53e:	e017      	b.n	800e570 <UART_SetConfig+0xc48>
 800e540:	f04f 0308 	mov.w	r3, #8
 800e544:	f04f 0400 	mov.w	r4, #0
 800e548:	e012      	b.n	800e570 <UART_SetConfig+0xc48>
 800e54a:	f04f 0306 	mov.w	r3, #6
 800e54e:	f04f 0400 	mov.w	r4, #0
 800e552:	e00d      	b.n	800e570 <UART_SetConfig+0xc48>
 800e554:	f04f 0304 	mov.w	r3, #4
 800e558:	f04f 0400 	mov.w	r4, #0
 800e55c:	e008      	b.n	800e570 <UART_SetConfig+0xc48>
 800e55e:	f04f 0302 	mov.w	r3, #2
 800e562:	f04f 0400 	mov.w	r4, #0
 800e566:	e003      	b.n	800e570 <UART_SetConfig+0xc48>
 800e568:	f04f 0301 	mov.w	r3, #1
 800e56c:	f04f 0400 	mov.w	r4, #0
 800e570:	461a      	mov	r2, r3
 800e572:	4623      	mov	r3, r4
 800e574:	f7f1 ff04 	bl	8000380 <__aeabi_uldivmod>
 800e578:	4603      	mov	r3, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	4619      	mov	r1, r3
 800e57e:	4622      	mov	r2, r4
 800e580:	f04f 0300 	mov.w	r3, #0
 800e584:	f04f 0400 	mov.w	r4, #0
 800e588:	0214      	lsls	r4, r2, #8
 800e58a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e58e:	020b      	lsls	r3, r1, #8
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	6852      	ldr	r2, [r2, #4]
 800e594:	0852      	lsrs	r2, r2, #1
 800e596:	4611      	mov	r1, r2
 800e598:	f04f 0200 	mov.w	r2, #0
 800e59c:	eb13 0b01 	adds.w	fp, r3, r1
 800e5a0:	eb44 0c02 	adc.w	ip, r4, r2
 800e5a4:	4658      	mov	r0, fp
 800e5a6:	4661      	mov	r1, ip
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	f04f 0400 	mov.w	r4, #0
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	4623      	mov	r3, r4
 800e5b4:	f7f1 fee4 	bl	8000380 <__aeabi_uldivmod>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e5be:	e389      	b.n	800ecd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5c0:	f107 0318 	add.w	r3, r7, #24
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fd fd29 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f04f 0100 	mov.w	r1, #0
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d067      	beq.n	800e6aa <UART_SetConfig+0xd82>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d05e      	beq.n	800e6a0 <UART_SetConfig+0xd78>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	2b02      	cmp	r3, #2
 800e5e8:	d055      	beq.n	800e696 <UART_SetConfig+0xd6e>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d04c      	beq.n	800e68c <UART_SetConfig+0xd64>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	d043      	beq.n	800e682 <UART_SetConfig+0xd5a>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fe:	2b05      	cmp	r3, #5
 800e600:	d03a      	beq.n	800e678 <UART_SetConfig+0xd50>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	2b06      	cmp	r3, #6
 800e608:	d031      	beq.n	800e66e <UART_SetConfig+0xd46>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60e:	2b07      	cmp	r3, #7
 800e610:	d028      	beq.n	800e664 <UART_SetConfig+0xd3c>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e616:	2b08      	cmp	r3, #8
 800e618:	d01f      	beq.n	800e65a <UART_SetConfig+0xd32>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61e:	2b09      	cmp	r3, #9
 800e620:	d016      	beq.n	800e650 <UART_SetConfig+0xd28>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e626:	2b0a      	cmp	r3, #10
 800e628:	d00d      	beq.n	800e646 <UART_SetConfig+0xd1e>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62e:	2b0b      	cmp	r3, #11
 800e630:	d104      	bne.n	800e63c <UART_SetConfig+0xd14>
 800e632:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e636:	f04f 0400 	mov.w	r4, #0
 800e63a:	e03a      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e63c:	f04f 0301 	mov.w	r3, #1
 800e640:	f04f 0400 	mov.w	r4, #0
 800e644:	e035      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e646:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e64a:	f04f 0400 	mov.w	r4, #0
 800e64e:	e030      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e650:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e654:	f04f 0400 	mov.w	r4, #0
 800e658:	e02b      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e65a:	f04f 0320 	mov.w	r3, #32
 800e65e:	f04f 0400 	mov.w	r4, #0
 800e662:	e026      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e664:	f04f 0310 	mov.w	r3, #16
 800e668:	f04f 0400 	mov.w	r4, #0
 800e66c:	e021      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e66e:	f04f 030c 	mov.w	r3, #12
 800e672:	f04f 0400 	mov.w	r4, #0
 800e676:	e01c      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e678:	f04f 030a 	mov.w	r3, #10
 800e67c:	f04f 0400 	mov.w	r4, #0
 800e680:	e017      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e682:	f04f 0308 	mov.w	r3, #8
 800e686:	f04f 0400 	mov.w	r4, #0
 800e68a:	e012      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e68c:	f04f 0306 	mov.w	r3, #6
 800e690:	f04f 0400 	mov.w	r4, #0
 800e694:	e00d      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e696:	f04f 0304 	mov.w	r3, #4
 800e69a:	f04f 0400 	mov.w	r4, #0
 800e69e:	e008      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e6a0:	f04f 0302 	mov.w	r3, #2
 800e6a4:	f04f 0400 	mov.w	r4, #0
 800e6a8:	e003      	b.n	800e6b2 <UART_SetConfig+0xd8a>
 800e6aa:	f04f 0301 	mov.w	r3, #1
 800e6ae:	f04f 0400 	mov.w	r4, #0
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	4623      	mov	r3, r4
 800e6b6:	f7f1 fe63 	bl	8000380 <__aeabi_uldivmod>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	460c      	mov	r4, r1
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	f04f 0300 	mov.w	r3, #0
 800e6c6:	f04f 0400 	mov.w	r4, #0
 800e6ca:	0214      	lsls	r4, r2, #8
 800e6cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e6d0:	020b      	lsls	r3, r1, #8
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	6852      	ldr	r2, [r2, #4]
 800e6d6:	0852      	lsrs	r2, r2, #1
 800e6d8:	4611      	mov	r1, r2
 800e6da:	f04f 0200 	mov.w	r2, #0
 800e6de:	eb13 0b01 	adds.w	fp, r3, r1
 800e6e2:	eb44 0c02 	adc.w	ip, r4, r2
 800e6e6:	4658      	mov	r0, fp
 800e6e8:	4661      	mov	r1, ip
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	f04f 0400 	mov.w	r4, #0
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	4623      	mov	r3, r4
 800e6f6:	f7f1 fe43 	bl	8000380 <__aeabi_uldivmod>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	460c      	mov	r4, r1
 800e6fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e700:	e2e8      	b.n	800ecd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e702:	f107 030c 	add.w	r3, r7, #12
 800e706:	4618      	mov	r0, r3
 800e708:	f7fd fdd4 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	4618      	mov	r0, r3
 800e710:	f04f 0100 	mov.w	r1, #0
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d067      	beq.n	800e7ec <UART_SetConfig+0xec4>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e720:	2b01      	cmp	r3, #1
 800e722:	d05e      	beq.n	800e7e2 <UART_SetConfig+0xeba>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d055      	beq.n	800e7d8 <UART_SetConfig+0xeb0>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e730:	2b03      	cmp	r3, #3
 800e732:	d04c      	beq.n	800e7ce <UART_SetConfig+0xea6>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e738:	2b04      	cmp	r3, #4
 800e73a:	d043      	beq.n	800e7c4 <UART_SetConfig+0xe9c>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e740:	2b05      	cmp	r3, #5
 800e742:	d03a      	beq.n	800e7ba <UART_SetConfig+0xe92>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e748:	2b06      	cmp	r3, #6
 800e74a:	d031      	beq.n	800e7b0 <UART_SetConfig+0xe88>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e750:	2b07      	cmp	r3, #7
 800e752:	d028      	beq.n	800e7a6 <UART_SetConfig+0xe7e>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	2b08      	cmp	r3, #8
 800e75a:	d01f      	beq.n	800e79c <UART_SetConfig+0xe74>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e760:	2b09      	cmp	r3, #9
 800e762:	d016      	beq.n	800e792 <UART_SetConfig+0xe6a>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e768:	2b0a      	cmp	r3, #10
 800e76a:	d00d      	beq.n	800e788 <UART_SetConfig+0xe60>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e770:	2b0b      	cmp	r3, #11
 800e772:	d104      	bne.n	800e77e <UART_SetConfig+0xe56>
 800e774:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e778:	f04f 0400 	mov.w	r4, #0
 800e77c:	e03a      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e77e:	f04f 0301 	mov.w	r3, #1
 800e782:	f04f 0400 	mov.w	r4, #0
 800e786:	e035      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e788:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e78c:	f04f 0400 	mov.w	r4, #0
 800e790:	e030      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e792:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e796:	f04f 0400 	mov.w	r4, #0
 800e79a:	e02b      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e79c:	f04f 0320 	mov.w	r3, #32
 800e7a0:	f04f 0400 	mov.w	r4, #0
 800e7a4:	e026      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7a6:	f04f 0310 	mov.w	r3, #16
 800e7aa:	f04f 0400 	mov.w	r4, #0
 800e7ae:	e021      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7b0:	f04f 030c 	mov.w	r3, #12
 800e7b4:	f04f 0400 	mov.w	r4, #0
 800e7b8:	e01c      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7ba:	f04f 030a 	mov.w	r3, #10
 800e7be:	f04f 0400 	mov.w	r4, #0
 800e7c2:	e017      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7c4:	f04f 0308 	mov.w	r3, #8
 800e7c8:	f04f 0400 	mov.w	r4, #0
 800e7cc:	e012      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7ce:	f04f 0306 	mov.w	r3, #6
 800e7d2:	f04f 0400 	mov.w	r4, #0
 800e7d6:	e00d      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7d8:	f04f 0304 	mov.w	r3, #4
 800e7dc:	f04f 0400 	mov.w	r4, #0
 800e7e0:	e008      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7e2:	f04f 0302 	mov.w	r3, #2
 800e7e6:	f04f 0400 	mov.w	r4, #0
 800e7ea:	e003      	b.n	800e7f4 <UART_SetConfig+0xecc>
 800e7ec:	f04f 0301 	mov.w	r3, #1
 800e7f0:	f04f 0400 	mov.w	r4, #0
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	4623      	mov	r3, r4
 800e7f8:	f7f1 fdc2 	bl	8000380 <__aeabi_uldivmod>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	460c      	mov	r4, r1
 800e800:	4619      	mov	r1, r3
 800e802:	4622      	mov	r2, r4
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	f04f 0400 	mov.w	r4, #0
 800e80c:	0214      	lsls	r4, r2, #8
 800e80e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e812:	020b      	lsls	r3, r1, #8
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	6852      	ldr	r2, [r2, #4]
 800e818:	0852      	lsrs	r2, r2, #1
 800e81a:	4611      	mov	r1, r2
 800e81c:	f04f 0200 	mov.w	r2, #0
 800e820:	eb13 0b01 	adds.w	fp, r3, r1
 800e824:	eb44 0c02 	adc.w	ip, r4, r2
 800e828:	4658      	mov	r0, fp
 800e82a:	4661      	mov	r1, ip
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	f04f 0400 	mov.w	r4, #0
 800e834:	461a      	mov	r2, r3
 800e836:	4623      	mov	r3, r4
 800e838:	f7f1 fda2 	bl	8000380 <__aeabi_uldivmod>
 800e83c:	4603      	mov	r3, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e842:	e247      	b.n	800ecd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e844:	4b96      	ldr	r3, [pc, #600]	; (800eaa0 <UART_SetConfig+0x1178>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 0320 	and.w	r3, r3, #32
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80a3 	beq.w	800e998 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e852:	4b93      	ldr	r3, [pc, #588]	; (800eaa0 <UART_SetConfig+0x1178>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	08db      	lsrs	r3, r3, #3
 800e858:	f003 0303 	and.w	r3, r3, #3
 800e85c:	4a91      	ldr	r2, [pc, #580]	; (800eaa4 <UART_SetConfig+0x117c>)
 800e85e:	fa22 f303 	lsr.w	r3, r2, r3
 800e862:	4618      	mov	r0, r3
 800e864:	f04f 0100 	mov.w	r1, #0
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d067      	beq.n	800e940 <UART_SetConfig+0x1018>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e874:	2b01      	cmp	r3, #1
 800e876:	d05e      	beq.n	800e936 <UART_SetConfig+0x100e>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d055      	beq.n	800e92c <UART_SetConfig+0x1004>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e884:	2b03      	cmp	r3, #3
 800e886:	d04c      	beq.n	800e922 <UART_SetConfig+0xffa>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e88c:	2b04      	cmp	r3, #4
 800e88e:	d043      	beq.n	800e918 <UART_SetConfig+0xff0>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e894:	2b05      	cmp	r3, #5
 800e896:	d03a      	beq.n	800e90e <UART_SetConfig+0xfe6>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89c:	2b06      	cmp	r3, #6
 800e89e:	d031      	beq.n	800e904 <UART_SetConfig+0xfdc>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a4:	2b07      	cmp	r3, #7
 800e8a6:	d028      	beq.n	800e8fa <UART_SetConfig+0xfd2>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ac:	2b08      	cmp	r3, #8
 800e8ae:	d01f      	beq.n	800e8f0 <UART_SetConfig+0xfc8>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	2b09      	cmp	r3, #9
 800e8b6:	d016      	beq.n	800e8e6 <UART_SetConfig+0xfbe>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	2b0a      	cmp	r3, #10
 800e8be:	d00d      	beq.n	800e8dc <UART_SetConfig+0xfb4>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c4:	2b0b      	cmp	r3, #11
 800e8c6:	d104      	bne.n	800e8d2 <UART_SetConfig+0xfaa>
 800e8c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8cc:	f04f 0400 	mov.w	r4, #0
 800e8d0:	e03a      	b.n	800e948 <UART_SetConfig+0x1020>
 800e8d2:	f04f 0301 	mov.w	r3, #1
 800e8d6:	f04f 0400 	mov.w	r4, #0
 800e8da:	e035      	b.n	800e948 <UART_SetConfig+0x1020>
 800e8dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e8e0:	f04f 0400 	mov.w	r4, #0
 800e8e4:	e030      	b.n	800e948 <UART_SetConfig+0x1020>
 800e8e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e8ea:	f04f 0400 	mov.w	r4, #0
 800e8ee:	e02b      	b.n	800e948 <UART_SetConfig+0x1020>
 800e8f0:	f04f 0320 	mov.w	r3, #32
 800e8f4:	f04f 0400 	mov.w	r4, #0
 800e8f8:	e026      	b.n	800e948 <UART_SetConfig+0x1020>
 800e8fa:	f04f 0310 	mov.w	r3, #16
 800e8fe:	f04f 0400 	mov.w	r4, #0
 800e902:	e021      	b.n	800e948 <UART_SetConfig+0x1020>
 800e904:	f04f 030c 	mov.w	r3, #12
 800e908:	f04f 0400 	mov.w	r4, #0
 800e90c:	e01c      	b.n	800e948 <UART_SetConfig+0x1020>
 800e90e:	f04f 030a 	mov.w	r3, #10
 800e912:	f04f 0400 	mov.w	r4, #0
 800e916:	e017      	b.n	800e948 <UART_SetConfig+0x1020>
 800e918:	f04f 0308 	mov.w	r3, #8
 800e91c:	f04f 0400 	mov.w	r4, #0
 800e920:	e012      	b.n	800e948 <UART_SetConfig+0x1020>
 800e922:	f04f 0306 	mov.w	r3, #6
 800e926:	f04f 0400 	mov.w	r4, #0
 800e92a:	e00d      	b.n	800e948 <UART_SetConfig+0x1020>
 800e92c:	f04f 0304 	mov.w	r3, #4
 800e930:	f04f 0400 	mov.w	r4, #0
 800e934:	e008      	b.n	800e948 <UART_SetConfig+0x1020>
 800e936:	f04f 0302 	mov.w	r3, #2
 800e93a:	f04f 0400 	mov.w	r4, #0
 800e93e:	e003      	b.n	800e948 <UART_SetConfig+0x1020>
 800e940:	f04f 0301 	mov.w	r3, #1
 800e944:	f04f 0400 	mov.w	r4, #0
 800e948:	461a      	mov	r2, r3
 800e94a:	4623      	mov	r3, r4
 800e94c:	f7f1 fd18 	bl	8000380 <__aeabi_uldivmod>
 800e950:	4603      	mov	r3, r0
 800e952:	460c      	mov	r4, r1
 800e954:	4619      	mov	r1, r3
 800e956:	4622      	mov	r2, r4
 800e958:	f04f 0300 	mov.w	r3, #0
 800e95c:	f04f 0400 	mov.w	r4, #0
 800e960:	0214      	lsls	r4, r2, #8
 800e962:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e966:	020b      	lsls	r3, r1, #8
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	6852      	ldr	r2, [r2, #4]
 800e96c:	0852      	lsrs	r2, r2, #1
 800e96e:	4611      	mov	r1, r2
 800e970:	f04f 0200 	mov.w	r2, #0
 800e974:	eb13 0b01 	adds.w	fp, r3, r1
 800e978:	eb44 0c02 	adc.w	ip, r4, r2
 800e97c:	4658      	mov	r0, fp
 800e97e:	4661      	mov	r1, ip
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	f04f 0400 	mov.w	r4, #0
 800e988:	461a      	mov	r2, r3
 800e98a:	4623      	mov	r3, r4
 800e98c:	f7f1 fcf8 	bl	8000380 <__aeabi_uldivmod>
 800e990:	4603      	mov	r3, r0
 800e992:	460c      	mov	r4, r1
 800e994:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800e996:	e19d      	b.n	800ecd4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d05b      	beq.n	800ea58 <UART_SetConfig+0x1130>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d053      	beq.n	800ea50 <UART_SetConfig+0x1128>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d04b      	beq.n	800ea48 <UART_SetConfig+0x1120>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	2b03      	cmp	r3, #3
 800e9b6:	d043      	beq.n	800ea40 <UART_SetConfig+0x1118>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	d03b      	beq.n	800ea38 <UART_SetConfig+0x1110>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c4:	2b05      	cmp	r3, #5
 800e9c6:	d033      	beq.n	800ea30 <UART_SetConfig+0x1108>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9cc:	2b06      	cmp	r3, #6
 800e9ce:	d02b      	beq.n	800ea28 <UART_SetConfig+0x1100>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d4:	2b07      	cmp	r3, #7
 800e9d6:	d023      	beq.n	800ea20 <UART_SetConfig+0x10f8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	2b08      	cmp	r3, #8
 800e9de:	d01b      	beq.n	800ea18 <UART_SetConfig+0x10f0>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e4:	2b09      	cmp	r3, #9
 800e9e6:	d013      	beq.n	800ea10 <UART_SetConfig+0x10e8>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ec:	2b0a      	cmp	r3, #10
 800e9ee:	d00b      	beq.n	800ea08 <UART_SetConfig+0x10e0>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	2b0b      	cmp	r3, #11
 800e9f6:	d103      	bne.n	800ea00 <UART_SetConfig+0x10d8>
 800e9f8:	4b2a      	ldr	r3, [pc, #168]	; (800eaa4 <UART_SetConfig+0x117c>)
 800e9fa:	f04f 0400 	mov.w	r4, #0
 800e9fe:	e02e      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea00:	4b29      	ldr	r3, [pc, #164]	; (800eaa8 <UART_SetConfig+0x1180>)
 800ea02:	f04f 0403 	mov.w	r4, #3
 800ea06:	e02a      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea08:	4b28      	ldr	r3, [pc, #160]	; (800eaac <UART_SetConfig+0x1184>)
 800ea0a:	f04f 0400 	mov.w	r4, #0
 800ea0e:	e026      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea10:	4b27      	ldr	r3, [pc, #156]	; (800eab0 <UART_SetConfig+0x1188>)
 800ea12:	f04f 0400 	mov.w	r4, #0
 800ea16:	e022      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea18:	4b26      	ldr	r3, [pc, #152]	; (800eab4 <UART_SetConfig+0x118c>)
 800ea1a:	f04f 0400 	mov.w	r4, #0
 800ea1e:	e01e      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea20:	4b25      	ldr	r3, [pc, #148]	; (800eab8 <UART_SetConfig+0x1190>)
 800ea22:	f04f 0400 	mov.w	r4, #0
 800ea26:	e01a      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea28:	a419      	add	r4, pc, #100	; (adr r4, 800ea90 <UART_SetConfig+0x1168>)
 800ea2a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ea2e:	e016      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea30:	4b22      	ldr	r3, [pc, #136]	; (800eabc <UART_SetConfig+0x1194>)
 800ea32:	f04f 0400 	mov.w	r4, #0
 800ea36:	e012      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea38:	4b21      	ldr	r3, [pc, #132]	; (800eac0 <UART_SetConfig+0x1198>)
 800ea3a:	f04f 0400 	mov.w	r4, #0
 800ea3e:	e00e      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea40:	a415      	add	r4, pc, #84	; (adr r4, 800ea98 <UART_SetConfig+0x1170>)
 800ea42:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ea46:	e00a      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea48:	4b1e      	ldr	r3, [pc, #120]	; (800eac4 <UART_SetConfig+0x119c>)
 800ea4a:	f04f 0400 	mov.w	r4, #0
 800ea4e:	e006      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea50:	4b1d      	ldr	r3, [pc, #116]	; (800eac8 <UART_SetConfig+0x11a0>)
 800ea52:	f04f 0401 	mov.w	r4, #1
 800ea56:	e002      	b.n	800ea5e <UART_SetConfig+0x1136>
 800ea58:	4b13      	ldr	r3, [pc, #76]	; (800eaa8 <UART_SetConfig+0x1180>)
 800ea5a:	f04f 0403 	mov.w	r4, #3
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	6852      	ldr	r2, [r2, #4]
 800ea62:	0852      	lsrs	r2, r2, #1
 800ea64:	4611      	mov	r1, r2
 800ea66:	f04f 0200 	mov.w	r2, #0
 800ea6a:	eb13 0b01 	adds.w	fp, r3, r1
 800ea6e:	eb44 0c02 	adc.w	ip, r4, r2
 800ea72:	4658      	mov	r0, fp
 800ea74:	4661      	mov	r1, ip
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	f04f 0400 	mov.w	r4, #0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	4623      	mov	r3, r4
 800ea82:	f7f1 fc7d 	bl	8000380 <__aeabi_uldivmod>
 800ea86:	4603      	mov	r3, r0
 800ea88:	460c      	mov	r4, r1
 800ea8a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ea8c:	e122      	b.n	800ecd4 <UART_SetConfig+0x13ac>
 800ea8e:	bf00      	nop
 800ea90:	51615500 	.word	0x51615500
 800ea94:	00000000 	.word	0x00000000
 800ea98:	a2c2aa00 	.word	0xa2c2aa00
 800ea9c:	00000000 	.word	0x00000000
 800eaa0:	58024400 	.word	0x58024400
 800eaa4:	03d09000 	.word	0x03d09000
 800eaa8:	d0900000 	.word	0xd0900000
 800eaac:	07a12000 	.word	0x07a12000
 800eab0:	0f424000 	.word	0x0f424000
 800eab4:	1e848000 	.word	0x1e848000
 800eab8:	3d090000 	.word	0x3d090000
 800eabc:	61a80000 	.word	0x61a80000
 800eac0:	7a120000 	.word	0x7a120000
 800eac4:	f4240000 	.word	0xf4240000
 800eac8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d05b      	beq.n	800eb8c <UART_SetConfig+0x1264>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d053      	beq.n	800eb84 <UART_SetConfig+0x125c>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d04b      	beq.n	800eb7c <UART_SetConfig+0x1254>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	2b03      	cmp	r3, #3
 800eaea:	d043      	beq.n	800eb74 <UART_SetConfig+0x124c>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	d03b      	beq.n	800eb6c <UART_SetConfig+0x1244>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf8:	2b05      	cmp	r3, #5
 800eafa:	d033      	beq.n	800eb64 <UART_SetConfig+0x123c>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb00:	2b06      	cmp	r3, #6
 800eb02:	d02b      	beq.n	800eb5c <UART_SetConfig+0x1234>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb08:	2b07      	cmp	r3, #7
 800eb0a:	d023      	beq.n	800eb54 <UART_SetConfig+0x122c>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb10:	2b08      	cmp	r3, #8
 800eb12:	d01b      	beq.n	800eb4c <UART_SetConfig+0x1224>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	2b09      	cmp	r3, #9
 800eb1a:	d013      	beq.n	800eb44 <UART_SetConfig+0x121c>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb20:	2b0a      	cmp	r3, #10
 800eb22:	d00b      	beq.n	800eb3c <UART_SetConfig+0x1214>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb28:	2b0b      	cmp	r3, #11
 800eb2a:	d103      	bne.n	800eb34 <UART_SetConfig+0x120c>
 800eb2c:	4bc0      	ldr	r3, [pc, #768]	; (800ee30 <UART_SetConfig+0x1508>)
 800eb2e:	f04f 0400 	mov.w	r4, #0
 800eb32:	e02e      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb34:	4bbf      	ldr	r3, [pc, #764]	; (800ee34 <UART_SetConfig+0x150c>)
 800eb36:	f04f 0400 	mov.w	r4, #0
 800eb3a:	e02a      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb3c:	4bbe      	ldr	r3, [pc, #760]	; (800ee38 <UART_SetConfig+0x1510>)
 800eb3e:	f04f 0400 	mov.w	r4, #0
 800eb42:	e026      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb44:	4bbd      	ldr	r3, [pc, #756]	; (800ee3c <UART_SetConfig+0x1514>)
 800eb46:	f04f 0400 	mov.w	r4, #0
 800eb4a:	e022      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb4c:	4bbc      	ldr	r3, [pc, #752]	; (800ee40 <UART_SetConfig+0x1518>)
 800eb4e:	f04f 0400 	mov.w	r4, #0
 800eb52:	e01e      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb54:	4bbb      	ldr	r3, [pc, #748]	; (800ee44 <UART_SetConfig+0x151c>)
 800eb56:	f04f 0400 	mov.w	r4, #0
 800eb5a:	e01a      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb5c:	a4b0      	add	r4, pc, #704	; (adr r4, 800ee20 <UART_SetConfig+0x14f8>)
 800eb5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800eb62:	e016      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb64:	4bb8      	ldr	r3, [pc, #736]	; (800ee48 <UART_SetConfig+0x1520>)
 800eb66:	f04f 0400 	mov.w	r4, #0
 800eb6a:	e012      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb6c:	4bb7      	ldr	r3, [pc, #732]	; (800ee4c <UART_SetConfig+0x1524>)
 800eb6e:	f04f 0400 	mov.w	r4, #0
 800eb72:	e00e      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb74:	a4ac      	add	r4, pc, #688	; (adr r4, 800ee28 <UART_SetConfig+0x1500>)
 800eb76:	e9d4 3400 	ldrd	r3, r4, [r4]
 800eb7a:	e00a      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb7c:	4bb4      	ldr	r3, [pc, #720]	; (800ee50 <UART_SetConfig+0x1528>)
 800eb7e:	f04f 0400 	mov.w	r4, #0
 800eb82:	e006      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb84:	4bb3      	ldr	r3, [pc, #716]	; (800ee54 <UART_SetConfig+0x152c>)
 800eb86:	f04f 0400 	mov.w	r4, #0
 800eb8a:	e002      	b.n	800eb92 <UART_SetConfig+0x126a>
 800eb8c:	4ba9      	ldr	r3, [pc, #676]	; (800ee34 <UART_SetConfig+0x150c>)
 800eb8e:	f04f 0400 	mov.w	r4, #0
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	6852      	ldr	r2, [r2, #4]
 800eb96:	0852      	lsrs	r2, r2, #1
 800eb98:	4611      	mov	r1, r2
 800eb9a:	f04f 0200 	mov.w	r2, #0
 800eb9e:	eb13 0b01 	adds.w	fp, r3, r1
 800eba2:	eb44 0c02 	adc.w	ip, r4, r2
 800eba6:	4658      	mov	r0, fp
 800eba8:	4661      	mov	r1, ip
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	f04f 0400 	mov.w	r4, #0
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	4623      	mov	r3, r4
 800ebb6:	f7f1 fbe3 	bl	8000380 <__aeabi_uldivmod>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	460c      	mov	r4, r1
 800ebbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ebc0:	e088      	b.n	800ecd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d064      	beq.n	800ec94 <UART_SetConfig+0x136c>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d05b      	beq.n	800ec8a <UART_SetConfig+0x1362>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	d052      	beq.n	800ec80 <UART_SetConfig+0x1358>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebde:	2b03      	cmp	r3, #3
 800ebe0:	d04a      	beq.n	800ec78 <UART_SetConfig+0x1350>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe6:	2b04      	cmp	r3, #4
 800ebe8:	d041      	beq.n	800ec6e <UART_SetConfig+0x1346>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebee:	2b05      	cmp	r3, #5
 800ebf0:	d039      	beq.n	800ec66 <UART_SetConfig+0x133e>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf6:	2b06      	cmp	r3, #6
 800ebf8:	d031      	beq.n	800ec5e <UART_SetConfig+0x1336>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfe:	2b07      	cmp	r3, #7
 800ec00:	d028      	beq.n	800ec54 <UART_SetConfig+0x132c>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec06:	2b08      	cmp	r3, #8
 800ec08:	d01f      	beq.n	800ec4a <UART_SetConfig+0x1322>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0e:	2b09      	cmp	r3, #9
 800ec10:	d016      	beq.n	800ec40 <UART_SetConfig+0x1318>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec16:	2b0a      	cmp	r3, #10
 800ec18:	d00d      	beq.n	800ec36 <UART_SetConfig+0x130e>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1e:	2b0b      	cmp	r3, #11
 800ec20:	d104      	bne.n	800ec2c <UART_SetConfig+0x1304>
 800ec22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec26:	f04f 0400 	mov.w	r4, #0
 800ec2a:	e037      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ec30:	f04f 0400 	mov.w	r4, #0
 800ec34:	e032      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ec3a:	f04f 0400 	mov.w	r4, #0
 800ec3e:	e02d      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ec44:	f04f 0400 	mov.w	r4, #0
 800ec48:	e028      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ec4e:	f04f 0400 	mov.w	r4, #0
 800ec52:	e023      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ec58:	f04f 0400 	mov.w	r4, #0
 800ec5c:	e01e      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec5e:	4b7e      	ldr	r3, [pc, #504]	; (800ee58 <UART_SetConfig+0x1530>)
 800ec60:	f04f 0400 	mov.w	r4, #0
 800ec64:	e01a      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec66:	4b7d      	ldr	r3, [pc, #500]	; (800ee5c <UART_SetConfig+0x1534>)
 800ec68:	f04f 0400 	mov.w	r4, #0
 800ec6c:	e016      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ec72:	f04f 0400 	mov.w	r4, #0
 800ec76:	e011      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec78:	4b79      	ldr	r3, [pc, #484]	; (800ee60 <UART_SetConfig+0x1538>)
 800ec7a:	f04f 0400 	mov.w	r4, #0
 800ec7e:	e00d      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ec84:	f04f 0400 	mov.w	r4, #0
 800ec88:	e008      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ec8e:	f04f 0400 	mov.w	r4, #0
 800ec92:	e003      	b.n	800ec9c <UART_SetConfig+0x1374>
 800ec94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ec98:	f04f 0400 	mov.w	r4, #0
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	6852      	ldr	r2, [r2, #4]
 800eca0:	0852      	lsrs	r2, r2, #1
 800eca2:	4611      	mov	r1, r2
 800eca4:	f04f 0200 	mov.w	r2, #0
 800eca8:	eb13 0b01 	adds.w	fp, r3, r1
 800ecac:	eb44 0c02 	adc.w	ip, r4, r2
 800ecb0:	4658      	mov	r0, fp
 800ecb2:	4661      	mov	r1, ip
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	f04f 0400 	mov.w	r4, #0
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4623      	mov	r3, r4
 800ecc0:	f7f1 fb5e 	bl	8000380 <__aeabi_uldivmod>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ecca:	e003      	b.n	800ecd4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800ecd2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecda:	d309      	bcc.n	800ecf0 <UART_SetConfig+0x13c8>
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ece2:	d205      	bcs.n	800ecf0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecea:	60da      	str	r2, [r3, #12]
 800ecec:	f000 bf85 	b.w	800fbfa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecf6:	f000 bf80 	b.w	800fbfa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	69db      	ldr	r3, [r3, #28]
 800ecfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed02:	f040 83da 	bne.w	800f4ba <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800ed06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ed0a:	2b40      	cmp	r3, #64	; 0x40
 800ed0c:	f200 83b3 	bhi.w	800f476 <UART_SetConfig+0x1b4e>
 800ed10:	a201      	add	r2, pc, #4	; (adr r2, 800ed18 <UART_SetConfig+0x13f0>)
 800ed12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed16:	bf00      	nop
 800ed18:	0800ee65 	.word	0x0800ee65
 800ed1c:	0800ef1d 	.word	0x0800ef1d
 800ed20:	0800f477 	.word	0x0800f477
 800ed24:	0800f477 	.word	0x0800f477
 800ed28:	0800efd5 	.word	0x0800efd5
 800ed2c:	0800f477 	.word	0x0800f477
 800ed30:	0800f477 	.word	0x0800f477
 800ed34:	0800f477 	.word	0x0800f477
 800ed38:	0800f091 	.word	0x0800f091
 800ed3c:	0800f477 	.word	0x0800f477
 800ed40:	0800f477 	.word	0x0800f477
 800ed44:	0800f477 	.word	0x0800f477
 800ed48:	0800f477 	.word	0x0800f477
 800ed4c:	0800f477 	.word	0x0800f477
 800ed50:	0800f477 	.word	0x0800f477
 800ed54:	0800f477 	.word	0x0800f477
 800ed58:	0800f14d 	.word	0x0800f14d
 800ed5c:	0800f477 	.word	0x0800f477
 800ed60:	0800f477 	.word	0x0800f477
 800ed64:	0800f477 	.word	0x0800f477
 800ed68:	0800f477 	.word	0x0800f477
 800ed6c:	0800f477 	.word	0x0800f477
 800ed70:	0800f477 	.word	0x0800f477
 800ed74:	0800f477 	.word	0x0800f477
 800ed78:	0800f477 	.word	0x0800f477
 800ed7c:	0800f477 	.word	0x0800f477
 800ed80:	0800f477 	.word	0x0800f477
 800ed84:	0800f477 	.word	0x0800f477
 800ed88:	0800f477 	.word	0x0800f477
 800ed8c:	0800f477 	.word	0x0800f477
 800ed90:	0800f477 	.word	0x0800f477
 800ed94:	0800f477 	.word	0x0800f477
 800ed98:	0800f2bf 	.word	0x0800f2bf
 800ed9c:	0800f477 	.word	0x0800f477
 800eda0:	0800f477 	.word	0x0800f477
 800eda4:	0800f477 	.word	0x0800f477
 800eda8:	0800f477 	.word	0x0800f477
 800edac:	0800f477 	.word	0x0800f477
 800edb0:	0800f477 	.word	0x0800f477
 800edb4:	0800f477 	.word	0x0800f477
 800edb8:	0800f477 	.word	0x0800f477
 800edbc:	0800f477 	.word	0x0800f477
 800edc0:	0800f477 	.word	0x0800f477
 800edc4:	0800f477 	.word	0x0800f477
 800edc8:	0800f477 	.word	0x0800f477
 800edcc:	0800f477 	.word	0x0800f477
 800edd0:	0800f477 	.word	0x0800f477
 800edd4:	0800f477 	.word	0x0800f477
 800edd8:	0800f477 	.word	0x0800f477
 800eddc:	0800f477 	.word	0x0800f477
 800ede0:	0800f477 	.word	0x0800f477
 800ede4:	0800f477 	.word	0x0800f477
 800ede8:	0800f477 	.word	0x0800f477
 800edec:	0800f477 	.word	0x0800f477
 800edf0:	0800f477 	.word	0x0800f477
 800edf4:	0800f477 	.word	0x0800f477
 800edf8:	0800f477 	.word	0x0800f477
 800edfc:	0800f477 	.word	0x0800f477
 800ee00:	0800f477 	.word	0x0800f477
 800ee04:	0800f477 	.word	0x0800f477
 800ee08:	0800f477 	.word	0x0800f477
 800ee0c:	0800f477 	.word	0x0800f477
 800ee10:	0800f477 	.word	0x0800f477
 800ee14:	0800f477 	.word	0x0800f477
 800ee18:	0800f3b5 	.word	0x0800f3b5
 800ee1c:	f3af 8000 	nop.w
 800ee20:	05161500 	.word	0x05161500
 800ee24:	00000000 	.word	0x00000000
 800ee28:	0a2c2a00 	.word	0x0a2c2a00
 800ee2c:	00000000 	.word	0x00000000
 800ee30:	003d0900 	.word	0x003d0900
 800ee34:	3d090000 	.word	0x3d090000
 800ee38:	007a1200 	.word	0x007a1200
 800ee3c:	00f42400 	.word	0x00f42400
 800ee40:	01e84800 	.word	0x01e84800
 800ee44:	03d09000 	.word	0x03d09000
 800ee48:	061a8000 	.word	0x061a8000
 800ee4c:	07a12000 	.word	0x07a12000
 800ee50:	0f424000 	.word	0x0f424000
 800ee54:	1e848000 	.word	0x1e848000
 800ee58:	000aaa00 	.word	0x000aaa00
 800ee5c:	000ccc00 	.word	0x000ccc00
 800ee60:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee64:	f7fb ff42 	bl	800acec <HAL_RCC_GetPCLK1Freq>
 800ee68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d044      	beq.n	800eefc <UART_SetConfig+0x15d4>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d03e      	beq.n	800eef8 <UART_SetConfig+0x15d0>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d038      	beq.n	800eef4 <UART_SetConfig+0x15cc>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee86:	2b03      	cmp	r3, #3
 800ee88:	d032      	beq.n	800eef0 <UART_SetConfig+0x15c8>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8e:	2b04      	cmp	r3, #4
 800ee90:	d02c      	beq.n	800eeec <UART_SetConfig+0x15c4>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	d026      	beq.n	800eee8 <UART_SetConfig+0x15c0>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9e:	2b06      	cmp	r3, #6
 800eea0:	d020      	beq.n	800eee4 <UART_SetConfig+0x15bc>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea6:	2b07      	cmp	r3, #7
 800eea8:	d01a      	beq.n	800eee0 <UART_SetConfig+0x15b8>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeae:	2b08      	cmp	r3, #8
 800eeb0:	d014      	beq.n	800eedc <UART_SetConfig+0x15b4>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb6:	2b09      	cmp	r3, #9
 800eeb8:	d00e      	beq.n	800eed8 <UART_SetConfig+0x15b0>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebe:	2b0a      	cmp	r3, #10
 800eec0:	d008      	beq.n	800eed4 <UART_SetConfig+0x15ac>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec6:	2b0b      	cmp	r3, #11
 800eec8:	d102      	bne.n	800eed0 <UART_SetConfig+0x15a8>
 800eeca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eece:	e016      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eed0:	2301      	movs	r3, #1
 800eed2:	e014      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eed4:	2380      	movs	r3, #128	; 0x80
 800eed6:	e012      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eed8:	2340      	movs	r3, #64	; 0x40
 800eeda:	e010      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eedc:	2320      	movs	r3, #32
 800eede:	e00e      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eee0:	2310      	movs	r3, #16
 800eee2:	e00c      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eee4:	230c      	movs	r3, #12
 800eee6:	e00a      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eee8:	230a      	movs	r3, #10
 800eeea:	e008      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eeec:	2308      	movs	r3, #8
 800eeee:	e006      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eef0:	2306      	movs	r3, #6
 800eef2:	e004      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eef4:	2304      	movs	r3, #4
 800eef6:	e002      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eef8:	2302      	movs	r3, #2
 800eefa:	e000      	b.n	800eefe <UART_SetConfig+0x15d6>
 800eefc:	2301      	movs	r3, #1
 800eefe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef04:	005a      	lsls	r2, r3, #1
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	085b      	lsrs	r3, r3, #1
 800ef0c:	441a      	add	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef1a:	e2b0      	b.n	800f47e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef1c:	f7fb fefc 	bl	800ad18 <HAL_RCC_GetPCLK2Freq>
 800ef20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d044      	beq.n	800efb4 <UART_SetConfig+0x168c>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d03e      	beq.n	800efb0 <UART_SetConfig+0x1688>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d038      	beq.n	800efac <UART_SetConfig+0x1684>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3e:	2b03      	cmp	r3, #3
 800ef40:	d032      	beq.n	800efa8 <UART_SetConfig+0x1680>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef46:	2b04      	cmp	r3, #4
 800ef48:	d02c      	beq.n	800efa4 <UART_SetConfig+0x167c>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4e:	2b05      	cmp	r3, #5
 800ef50:	d026      	beq.n	800efa0 <UART_SetConfig+0x1678>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef56:	2b06      	cmp	r3, #6
 800ef58:	d020      	beq.n	800ef9c <UART_SetConfig+0x1674>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	2b07      	cmp	r3, #7
 800ef60:	d01a      	beq.n	800ef98 <UART_SetConfig+0x1670>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef66:	2b08      	cmp	r3, #8
 800ef68:	d014      	beq.n	800ef94 <UART_SetConfig+0x166c>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6e:	2b09      	cmp	r3, #9
 800ef70:	d00e      	beq.n	800ef90 <UART_SetConfig+0x1668>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef76:	2b0a      	cmp	r3, #10
 800ef78:	d008      	beq.n	800ef8c <UART_SetConfig+0x1664>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	2b0b      	cmp	r3, #11
 800ef80:	d102      	bne.n	800ef88 <UART_SetConfig+0x1660>
 800ef82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef86:	e016      	b.n	800efb6 <UART_SetConfig+0x168e>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e014      	b.n	800efb6 <UART_SetConfig+0x168e>
 800ef8c:	2380      	movs	r3, #128	; 0x80
 800ef8e:	e012      	b.n	800efb6 <UART_SetConfig+0x168e>
 800ef90:	2340      	movs	r3, #64	; 0x40
 800ef92:	e010      	b.n	800efb6 <UART_SetConfig+0x168e>
 800ef94:	2320      	movs	r3, #32
 800ef96:	e00e      	b.n	800efb6 <UART_SetConfig+0x168e>
 800ef98:	2310      	movs	r3, #16
 800ef9a:	e00c      	b.n	800efb6 <UART_SetConfig+0x168e>
 800ef9c:	230c      	movs	r3, #12
 800ef9e:	e00a      	b.n	800efb6 <UART_SetConfig+0x168e>
 800efa0:	230a      	movs	r3, #10
 800efa2:	e008      	b.n	800efb6 <UART_SetConfig+0x168e>
 800efa4:	2308      	movs	r3, #8
 800efa6:	e006      	b.n	800efb6 <UART_SetConfig+0x168e>
 800efa8:	2306      	movs	r3, #6
 800efaa:	e004      	b.n	800efb6 <UART_SetConfig+0x168e>
 800efac:	2304      	movs	r3, #4
 800efae:	e002      	b.n	800efb6 <UART_SetConfig+0x168e>
 800efb0:	2302      	movs	r3, #2
 800efb2:	e000      	b.n	800efb6 <UART_SetConfig+0x168e>
 800efb4:	2301      	movs	r3, #1
 800efb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efbc:	005a      	lsls	r2, r3, #1
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	085b      	lsrs	r3, r3, #1
 800efc4:	441a      	add	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	fbb2 f3f3 	udiv	r3, r2, r3
 800efce:	b29b      	uxth	r3, r3
 800efd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800efd2:	e254      	b.n	800f47e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efd4:	f107 0318 	add.w	r3, r7, #24
 800efd8:	4618      	mov	r0, r3
 800efda:	f7fd f81f 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d044      	beq.n	800f072 <UART_SetConfig+0x174a>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efec:	2b01      	cmp	r3, #1
 800efee:	d03e      	beq.n	800f06e <UART_SetConfig+0x1746>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d038      	beq.n	800f06a <UART_SetConfig+0x1742>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effc:	2b03      	cmp	r3, #3
 800effe:	d032      	beq.n	800f066 <UART_SetConfig+0x173e>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f004:	2b04      	cmp	r3, #4
 800f006:	d02c      	beq.n	800f062 <UART_SetConfig+0x173a>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	2b05      	cmp	r3, #5
 800f00e:	d026      	beq.n	800f05e <UART_SetConfig+0x1736>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f014:	2b06      	cmp	r3, #6
 800f016:	d020      	beq.n	800f05a <UART_SetConfig+0x1732>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01c:	2b07      	cmp	r3, #7
 800f01e:	d01a      	beq.n	800f056 <UART_SetConfig+0x172e>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f024:	2b08      	cmp	r3, #8
 800f026:	d014      	beq.n	800f052 <UART_SetConfig+0x172a>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02c:	2b09      	cmp	r3, #9
 800f02e:	d00e      	beq.n	800f04e <UART_SetConfig+0x1726>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f034:	2b0a      	cmp	r3, #10
 800f036:	d008      	beq.n	800f04a <UART_SetConfig+0x1722>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03c:	2b0b      	cmp	r3, #11
 800f03e:	d102      	bne.n	800f046 <UART_SetConfig+0x171e>
 800f040:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f044:	e016      	b.n	800f074 <UART_SetConfig+0x174c>
 800f046:	2301      	movs	r3, #1
 800f048:	e014      	b.n	800f074 <UART_SetConfig+0x174c>
 800f04a:	2380      	movs	r3, #128	; 0x80
 800f04c:	e012      	b.n	800f074 <UART_SetConfig+0x174c>
 800f04e:	2340      	movs	r3, #64	; 0x40
 800f050:	e010      	b.n	800f074 <UART_SetConfig+0x174c>
 800f052:	2320      	movs	r3, #32
 800f054:	e00e      	b.n	800f074 <UART_SetConfig+0x174c>
 800f056:	2310      	movs	r3, #16
 800f058:	e00c      	b.n	800f074 <UART_SetConfig+0x174c>
 800f05a:	230c      	movs	r3, #12
 800f05c:	e00a      	b.n	800f074 <UART_SetConfig+0x174c>
 800f05e:	230a      	movs	r3, #10
 800f060:	e008      	b.n	800f074 <UART_SetConfig+0x174c>
 800f062:	2308      	movs	r3, #8
 800f064:	e006      	b.n	800f074 <UART_SetConfig+0x174c>
 800f066:	2306      	movs	r3, #6
 800f068:	e004      	b.n	800f074 <UART_SetConfig+0x174c>
 800f06a:	2304      	movs	r3, #4
 800f06c:	e002      	b.n	800f074 <UART_SetConfig+0x174c>
 800f06e:	2302      	movs	r3, #2
 800f070:	e000      	b.n	800f074 <UART_SetConfig+0x174c>
 800f072:	2301      	movs	r3, #1
 800f074:	fbb2 f3f3 	udiv	r3, r2, r3
 800f078:	005a      	lsls	r2, r3, #1
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	085b      	lsrs	r3, r3, #1
 800f080:	441a      	add	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	fbb2 f3f3 	udiv	r3, r2, r3
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f08e:	e1f6      	b.n	800f47e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f090:	f107 030c 	add.w	r3, r7, #12
 800f094:	4618      	mov	r0, r3
 800f096:	f7fd f90d 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d044      	beq.n	800f12e <UART_SetConfig+0x1806>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d03e      	beq.n	800f12a <UART_SetConfig+0x1802>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d038      	beq.n	800f126 <UART_SetConfig+0x17fe>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	d032      	beq.n	800f122 <UART_SetConfig+0x17fa>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c0:	2b04      	cmp	r3, #4
 800f0c2:	d02c      	beq.n	800f11e <UART_SetConfig+0x17f6>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c8:	2b05      	cmp	r3, #5
 800f0ca:	d026      	beq.n	800f11a <UART_SetConfig+0x17f2>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d0:	2b06      	cmp	r3, #6
 800f0d2:	d020      	beq.n	800f116 <UART_SetConfig+0x17ee>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d8:	2b07      	cmp	r3, #7
 800f0da:	d01a      	beq.n	800f112 <UART_SetConfig+0x17ea>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e0:	2b08      	cmp	r3, #8
 800f0e2:	d014      	beq.n	800f10e <UART_SetConfig+0x17e6>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e8:	2b09      	cmp	r3, #9
 800f0ea:	d00e      	beq.n	800f10a <UART_SetConfig+0x17e2>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f0:	2b0a      	cmp	r3, #10
 800f0f2:	d008      	beq.n	800f106 <UART_SetConfig+0x17de>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f8:	2b0b      	cmp	r3, #11
 800f0fa:	d102      	bne.n	800f102 <UART_SetConfig+0x17da>
 800f0fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f100:	e016      	b.n	800f130 <UART_SetConfig+0x1808>
 800f102:	2301      	movs	r3, #1
 800f104:	e014      	b.n	800f130 <UART_SetConfig+0x1808>
 800f106:	2380      	movs	r3, #128	; 0x80
 800f108:	e012      	b.n	800f130 <UART_SetConfig+0x1808>
 800f10a:	2340      	movs	r3, #64	; 0x40
 800f10c:	e010      	b.n	800f130 <UART_SetConfig+0x1808>
 800f10e:	2320      	movs	r3, #32
 800f110:	e00e      	b.n	800f130 <UART_SetConfig+0x1808>
 800f112:	2310      	movs	r3, #16
 800f114:	e00c      	b.n	800f130 <UART_SetConfig+0x1808>
 800f116:	230c      	movs	r3, #12
 800f118:	e00a      	b.n	800f130 <UART_SetConfig+0x1808>
 800f11a:	230a      	movs	r3, #10
 800f11c:	e008      	b.n	800f130 <UART_SetConfig+0x1808>
 800f11e:	2308      	movs	r3, #8
 800f120:	e006      	b.n	800f130 <UART_SetConfig+0x1808>
 800f122:	2306      	movs	r3, #6
 800f124:	e004      	b.n	800f130 <UART_SetConfig+0x1808>
 800f126:	2304      	movs	r3, #4
 800f128:	e002      	b.n	800f130 <UART_SetConfig+0x1808>
 800f12a:	2302      	movs	r3, #2
 800f12c:	e000      	b.n	800f130 <UART_SetConfig+0x1808>
 800f12e:	2301      	movs	r3, #1
 800f130:	fbb2 f3f3 	udiv	r3, r2, r3
 800f134:	005a      	lsls	r2, r3, #1
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	085b      	lsrs	r3, r3, #1
 800f13c:	441a      	add	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	fbb2 f3f3 	udiv	r3, r2, r3
 800f146:	b29b      	uxth	r3, r3
 800f148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f14a:	e198      	b.n	800f47e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f14c:	4b87      	ldr	r3, [pc, #540]	; (800f36c <UART_SetConfig+0x1a44>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f003 0320 	and.w	r3, r3, #32
 800f154:	2b00      	cmp	r3, #0
 800f156:	d05e      	beq.n	800f216 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f158:	4b84      	ldr	r3, [pc, #528]	; (800f36c <UART_SetConfig+0x1a44>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	08db      	lsrs	r3, r3, #3
 800f15e:	f003 0303 	and.w	r3, r3, #3
 800f162:	4a83      	ldr	r2, [pc, #524]	; (800f370 <UART_SetConfig+0x1a48>)
 800f164:	40da      	lsrs	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d044      	beq.n	800f1f8 <UART_SetConfig+0x18d0>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f172:	2b01      	cmp	r3, #1
 800f174:	d03e      	beq.n	800f1f4 <UART_SetConfig+0x18cc>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d038      	beq.n	800f1f0 <UART_SetConfig+0x18c8>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f182:	2b03      	cmp	r3, #3
 800f184:	d032      	beq.n	800f1ec <UART_SetConfig+0x18c4>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	d02c      	beq.n	800f1e8 <UART_SetConfig+0x18c0>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f192:	2b05      	cmp	r3, #5
 800f194:	d026      	beq.n	800f1e4 <UART_SetConfig+0x18bc>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f19a:	2b06      	cmp	r3, #6
 800f19c:	d020      	beq.n	800f1e0 <UART_SetConfig+0x18b8>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a2:	2b07      	cmp	r3, #7
 800f1a4:	d01a      	beq.n	800f1dc <UART_SetConfig+0x18b4>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1aa:	2b08      	cmp	r3, #8
 800f1ac:	d014      	beq.n	800f1d8 <UART_SetConfig+0x18b0>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b2:	2b09      	cmp	r3, #9
 800f1b4:	d00e      	beq.n	800f1d4 <UART_SetConfig+0x18ac>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ba:	2b0a      	cmp	r3, #10
 800f1bc:	d008      	beq.n	800f1d0 <UART_SetConfig+0x18a8>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c2:	2b0b      	cmp	r3, #11
 800f1c4:	d102      	bne.n	800f1cc <UART_SetConfig+0x18a4>
 800f1c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1ca:	e016      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e014      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1d0:	2380      	movs	r3, #128	; 0x80
 800f1d2:	e012      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1d4:	2340      	movs	r3, #64	; 0x40
 800f1d6:	e010      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1d8:	2320      	movs	r3, #32
 800f1da:	e00e      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1dc:	2310      	movs	r3, #16
 800f1de:	e00c      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1e0:	230c      	movs	r3, #12
 800f1e2:	e00a      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1e4:	230a      	movs	r3, #10
 800f1e6:	e008      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1e8:	2308      	movs	r3, #8
 800f1ea:	e006      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1ec:	2306      	movs	r3, #6
 800f1ee:	e004      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	e002      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	e000      	b.n	800f1fa <UART_SetConfig+0x18d2>
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1fe:	005a      	lsls	r2, r3, #1
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	085b      	lsrs	r3, r3, #1
 800f206:	441a      	add	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f210:	b29b      	uxth	r3, r3
 800f212:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800f214:	e133      	b.n	800f47e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d043      	beq.n	800f2a6 <UART_SetConfig+0x197e>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	2b01      	cmp	r3, #1
 800f224:	d03d      	beq.n	800f2a2 <UART_SetConfig+0x197a>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	d037      	beq.n	800f29e <UART_SetConfig+0x1976>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f232:	2b03      	cmp	r3, #3
 800f234:	d031      	beq.n	800f29a <UART_SetConfig+0x1972>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	d02b      	beq.n	800f296 <UART_SetConfig+0x196e>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f242:	2b05      	cmp	r3, #5
 800f244:	d025      	beq.n	800f292 <UART_SetConfig+0x196a>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	2b06      	cmp	r3, #6
 800f24c:	d01f      	beq.n	800f28e <UART_SetConfig+0x1966>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f252:	2b07      	cmp	r3, #7
 800f254:	d019      	beq.n	800f28a <UART_SetConfig+0x1962>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	2b08      	cmp	r3, #8
 800f25c:	d013      	beq.n	800f286 <UART_SetConfig+0x195e>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f262:	2b09      	cmp	r3, #9
 800f264:	d00d      	beq.n	800f282 <UART_SetConfig+0x195a>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	2b0a      	cmp	r3, #10
 800f26c:	d007      	beq.n	800f27e <UART_SetConfig+0x1956>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	2b0b      	cmp	r3, #11
 800f274:	d101      	bne.n	800f27a <UART_SetConfig+0x1952>
 800f276:	4b3f      	ldr	r3, [pc, #252]	; (800f374 <UART_SetConfig+0x1a4c>)
 800f278:	e016      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f27a:	4b3f      	ldr	r3, [pc, #252]	; (800f378 <UART_SetConfig+0x1a50>)
 800f27c:	e014      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f27e:	4b3f      	ldr	r3, [pc, #252]	; (800f37c <UART_SetConfig+0x1a54>)
 800f280:	e012      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f282:	4b3f      	ldr	r3, [pc, #252]	; (800f380 <UART_SetConfig+0x1a58>)
 800f284:	e010      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f286:	4b3f      	ldr	r3, [pc, #252]	; (800f384 <UART_SetConfig+0x1a5c>)
 800f288:	e00e      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f28a:	4b3f      	ldr	r3, [pc, #252]	; (800f388 <UART_SetConfig+0x1a60>)
 800f28c:	e00c      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f28e:	4b3f      	ldr	r3, [pc, #252]	; (800f38c <UART_SetConfig+0x1a64>)
 800f290:	e00a      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f292:	4b3f      	ldr	r3, [pc, #252]	; (800f390 <UART_SetConfig+0x1a68>)
 800f294:	e008      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f296:	4b3f      	ldr	r3, [pc, #252]	; (800f394 <UART_SetConfig+0x1a6c>)
 800f298:	e006      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f29a:	4b3f      	ldr	r3, [pc, #252]	; (800f398 <UART_SetConfig+0x1a70>)
 800f29c:	e004      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f29e:	4b3f      	ldr	r3, [pc, #252]	; (800f39c <UART_SetConfig+0x1a74>)
 800f2a0:	e002      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f2a2:	4b33      	ldr	r3, [pc, #204]	; (800f370 <UART_SetConfig+0x1a48>)
 800f2a4:	e000      	b.n	800f2a8 <UART_SetConfig+0x1980>
 800f2a6:	4b34      	ldr	r3, [pc, #208]	; (800f378 <UART_SetConfig+0x1a50>)
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	6852      	ldr	r2, [r2, #4]
 800f2ac:	0852      	lsrs	r2, r2, #1
 800f2ae:	441a      	add	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2bc:	e0df      	b.n	800f47e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d045      	beq.n	800f352 <UART_SetConfig+0x1a2a>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d03f      	beq.n	800f34e <UART_SetConfig+0x1a26>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d039      	beq.n	800f34a <UART_SetConfig+0x1a22>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d033      	beq.n	800f346 <UART_SetConfig+0x1a1e>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e2:	2b04      	cmp	r3, #4
 800f2e4:	d02d      	beq.n	800f342 <UART_SetConfig+0x1a1a>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ea:	2b05      	cmp	r3, #5
 800f2ec:	d027      	beq.n	800f33e <UART_SetConfig+0x1a16>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f2:	2b06      	cmp	r3, #6
 800f2f4:	d021      	beq.n	800f33a <UART_SetConfig+0x1a12>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2fa:	2b07      	cmp	r3, #7
 800f2fc:	d01b      	beq.n	800f336 <UART_SetConfig+0x1a0e>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f302:	2b08      	cmp	r3, #8
 800f304:	d015      	beq.n	800f332 <UART_SetConfig+0x1a0a>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30a:	2b09      	cmp	r3, #9
 800f30c:	d00f      	beq.n	800f32e <UART_SetConfig+0x1a06>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f312:	2b0a      	cmp	r3, #10
 800f314:	d008      	beq.n	800f328 <UART_SetConfig+0x1a00>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31a:	2b0b      	cmp	r3, #11
 800f31c:	d102      	bne.n	800f324 <UART_SetConfig+0x19fc>
 800f31e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800f322:	e017      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f324:	4b18      	ldr	r3, [pc, #96]	; (800f388 <UART_SetConfig+0x1a60>)
 800f326:	e015      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f328:	f24f 4324 	movw	r3, #62500	; 0xf424
 800f32c:	e012      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f32e:	4b1c      	ldr	r3, [pc, #112]	; (800f3a0 <UART_SetConfig+0x1a78>)
 800f330:	e010      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f332:	4b1c      	ldr	r3, [pc, #112]	; (800f3a4 <UART_SetConfig+0x1a7c>)
 800f334:	e00e      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f336:	4b0f      	ldr	r3, [pc, #60]	; (800f374 <UART_SetConfig+0x1a4c>)
 800f338:	e00c      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f33a:	4b1b      	ldr	r3, [pc, #108]	; (800f3a8 <UART_SetConfig+0x1a80>)
 800f33c:	e00a      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f33e:	4b1b      	ldr	r3, [pc, #108]	; (800f3ac <UART_SetConfig+0x1a84>)
 800f340:	e008      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f342:	4b0e      	ldr	r3, [pc, #56]	; (800f37c <UART_SetConfig+0x1a54>)
 800f344:	e006      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f346:	4b1a      	ldr	r3, [pc, #104]	; (800f3b0 <UART_SetConfig+0x1a88>)
 800f348:	e004      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f34a:	4b0d      	ldr	r3, [pc, #52]	; (800f380 <UART_SetConfig+0x1a58>)
 800f34c:	e002      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f34e:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <UART_SetConfig+0x1a5c>)
 800f350:	e000      	b.n	800f354 <UART_SetConfig+0x1a2c>
 800f352:	4b0d      	ldr	r3, [pc, #52]	; (800f388 <UART_SetConfig+0x1a60>)
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	6852      	ldr	r2, [r2, #4]
 800f358:	0852      	lsrs	r2, r2, #1
 800f35a:	441a      	add	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	fbb2 f3f3 	udiv	r3, r2, r3
 800f364:	b29b      	uxth	r3, r3
 800f366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f368:	e089      	b.n	800f47e <UART_SetConfig+0x1b56>
 800f36a:	bf00      	nop
 800f36c:	58024400 	.word	0x58024400
 800f370:	03d09000 	.word	0x03d09000
 800f374:	0007a120 	.word	0x0007a120
 800f378:	07a12000 	.word	0x07a12000
 800f37c:	000f4240 	.word	0x000f4240
 800f380:	001e8480 	.word	0x001e8480
 800f384:	003d0900 	.word	0x003d0900
 800f388:	007a1200 	.word	0x007a1200
 800f38c:	00a2c2aa 	.word	0x00a2c2aa
 800f390:	00c35000 	.word	0x00c35000
 800f394:	00f42400 	.word	0x00f42400
 800f398:	01458554 	.word	0x01458554
 800f39c:	01e84800 	.word	0x01e84800
 800f3a0:	0001e848 	.word	0x0001e848
 800f3a4:	0003d090 	.word	0x0003d090
 800f3a8:	000a2c2a 	.word	0x000a2c2a
 800f3ac:	000c3500 	.word	0x000c3500
 800f3b0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d04f      	beq.n	800f45c <UART_SetConfig+0x1b34>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d048      	beq.n	800f456 <UART_SetConfig+0x1b2e>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d041      	beq.n	800f450 <UART_SetConfig+0x1b28>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d03a      	beq.n	800f44a <UART_SetConfig+0x1b22>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d8:	2b04      	cmp	r3, #4
 800f3da:	d033      	beq.n	800f444 <UART_SetConfig+0x1b1c>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e0:	2b05      	cmp	r3, #5
 800f3e2:	d02c      	beq.n	800f43e <UART_SetConfig+0x1b16>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e8:	2b06      	cmp	r3, #6
 800f3ea:	d025      	beq.n	800f438 <UART_SetConfig+0x1b10>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f0:	2b07      	cmp	r3, #7
 800f3f2:	d01e      	beq.n	800f432 <UART_SetConfig+0x1b0a>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f8:	2b08      	cmp	r3, #8
 800f3fa:	d017      	beq.n	800f42c <UART_SetConfig+0x1b04>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f400:	2b09      	cmp	r3, #9
 800f402:	d010      	beq.n	800f426 <UART_SetConfig+0x1afe>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f408:	2b0a      	cmp	r3, #10
 800f40a:	d009      	beq.n	800f420 <UART_SetConfig+0x1af8>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f410:	2b0b      	cmp	r3, #11
 800f412:	d102      	bne.n	800f41a <UART_SetConfig+0x1af2>
 800f414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f418:	e022      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f41a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f41e:	e01f      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f420:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f424:	e01c      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f42a:	e019      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f430:	e016      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f436:	e013      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f438:	f241 5354 	movw	r3, #5460	; 0x1554
 800f43c:	e010      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f43e:	f641 1398 	movw	r3, #6552	; 0x1998
 800f442:	e00d      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f448:	e00a      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f44a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800f44e:	e007      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f450:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f454:	e004      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f45a:	e001      	b.n	800f460 <UART_SetConfig+0x1b38>
 800f45c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	6852      	ldr	r2, [r2, #4]
 800f464:	0852      	lsrs	r2, r2, #1
 800f466:	441a      	add	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f470:	b29b      	uxth	r3, r3
 800f472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f474:	e003      	b.n	800f47e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800f47c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f480:	2b0f      	cmp	r3, #15
 800f482:	d916      	bls.n	800f4b2 <UART_SetConfig+0x1b8a>
 800f484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f48a:	d212      	bcs.n	800f4b2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48e:	b29b      	uxth	r3, r3
 800f490:	f023 030f 	bic.w	r3, r3, #15
 800f494:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f498:	085b      	lsrs	r3, r3, #1
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	f003 0307 	and.w	r3, r3, #7
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4ae:	60da      	str	r2, [r3, #12]
 800f4b0:	e3a3      	b.n	800fbfa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4b8:	e39f      	b.n	800fbfa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800f4ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f4be:	2b40      	cmp	r3, #64	; 0x40
 800f4c0:	f200 8388 	bhi.w	800fbd4 <UART_SetConfig+0x22ac>
 800f4c4:	a201      	add	r2, pc, #4	; (adr r2, 800f4cc <UART_SetConfig+0x1ba4>)
 800f4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ca:	bf00      	nop
 800f4cc:	0800f5d1 	.word	0x0800f5d1
 800f4d0:	0800f687 	.word	0x0800f687
 800f4d4:	0800fbd5 	.word	0x0800fbd5
 800f4d8:	0800fbd5 	.word	0x0800fbd5
 800f4dc:	0800f73d 	.word	0x0800f73d
 800f4e0:	0800fbd5 	.word	0x0800fbd5
 800f4e4:	0800fbd5 	.word	0x0800fbd5
 800f4e8:	0800fbd5 	.word	0x0800fbd5
 800f4ec:	0800f7f7 	.word	0x0800f7f7
 800f4f0:	0800fbd5 	.word	0x0800fbd5
 800f4f4:	0800fbd5 	.word	0x0800fbd5
 800f4f8:	0800fbd5 	.word	0x0800fbd5
 800f4fc:	0800fbd5 	.word	0x0800fbd5
 800f500:	0800fbd5 	.word	0x0800fbd5
 800f504:	0800fbd5 	.word	0x0800fbd5
 800f508:	0800fbd5 	.word	0x0800fbd5
 800f50c:	0800f8b1 	.word	0x0800f8b1
 800f510:	0800fbd5 	.word	0x0800fbd5
 800f514:	0800fbd5 	.word	0x0800fbd5
 800f518:	0800fbd5 	.word	0x0800fbd5
 800f51c:	0800fbd5 	.word	0x0800fbd5
 800f520:	0800fbd5 	.word	0x0800fbd5
 800f524:	0800fbd5 	.word	0x0800fbd5
 800f528:	0800fbd5 	.word	0x0800fbd5
 800f52c:	0800fbd5 	.word	0x0800fbd5
 800f530:	0800fbd5 	.word	0x0800fbd5
 800f534:	0800fbd5 	.word	0x0800fbd5
 800f538:	0800fbd5 	.word	0x0800fbd5
 800f53c:	0800fbd5 	.word	0x0800fbd5
 800f540:	0800fbd5 	.word	0x0800fbd5
 800f544:	0800fbd5 	.word	0x0800fbd5
 800f548:	0800fbd5 	.word	0x0800fbd5
 800f54c:	0800fa21 	.word	0x0800fa21
 800f550:	0800fbd5 	.word	0x0800fbd5
 800f554:	0800fbd5 	.word	0x0800fbd5
 800f558:	0800fbd5 	.word	0x0800fbd5
 800f55c:	0800fbd5 	.word	0x0800fbd5
 800f560:	0800fbd5 	.word	0x0800fbd5
 800f564:	0800fbd5 	.word	0x0800fbd5
 800f568:	0800fbd5 	.word	0x0800fbd5
 800f56c:	0800fbd5 	.word	0x0800fbd5
 800f570:	0800fbd5 	.word	0x0800fbd5
 800f574:	0800fbd5 	.word	0x0800fbd5
 800f578:	0800fbd5 	.word	0x0800fbd5
 800f57c:	0800fbd5 	.word	0x0800fbd5
 800f580:	0800fbd5 	.word	0x0800fbd5
 800f584:	0800fbd5 	.word	0x0800fbd5
 800f588:	0800fbd5 	.word	0x0800fbd5
 800f58c:	0800fbd5 	.word	0x0800fbd5
 800f590:	0800fbd5 	.word	0x0800fbd5
 800f594:	0800fbd5 	.word	0x0800fbd5
 800f598:	0800fbd5 	.word	0x0800fbd5
 800f59c:	0800fbd5 	.word	0x0800fbd5
 800f5a0:	0800fbd5 	.word	0x0800fbd5
 800f5a4:	0800fbd5 	.word	0x0800fbd5
 800f5a8:	0800fbd5 	.word	0x0800fbd5
 800f5ac:	0800fbd5 	.word	0x0800fbd5
 800f5b0:	0800fbd5 	.word	0x0800fbd5
 800f5b4:	0800fbd5 	.word	0x0800fbd5
 800f5b8:	0800fbd5 	.word	0x0800fbd5
 800f5bc:	0800fbd5 	.word	0x0800fbd5
 800f5c0:	0800fbd5 	.word	0x0800fbd5
 800f5c4:	0800fbd5 	.word	0x0800fbd5
 800f5c8:	0800fbd5 	.word	0x0800fbd5
 800f5cc:	0800fb15 	.word	0x0800fb15
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5d0:	f7fb fb8c 	bl	800acec <HAL_RCC_GetPCLK1Freq>
 800f5d4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d044      	beq.n	800f668 <UART_SetConfig+0x1d40>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d03e      	beq.n	800f664 <UART_SetConfig+0x1d3c>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d038      	beq.n	800f660 <UART_SetConfig+0x1d38>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f2:	2b03      	cmp	r3, #3
 800f5f4:	d032      	beq.n	800f65c <UART_SetConfig+0x1d34>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fa:	2b04      	cmp	r3, #4
 800f5fc:	d02c      	beq.n	800f658 <UART_SetConfig+0x1d30>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f602:	2b05      	cmp	r3, #5
 800f604:	d026      	beq.n	800f654 <UART_SetConfig+0x1d2c>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60a:	2b06      	cmp	r3, #6
 800f60c:	d020      	beq.n	800f650 <UART_SetConfig+0x1d28>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f612:	2b07      	cmp	r3, #7
 800f614:	d01a      	beq.n	800f64c <UART_SetConfig+0x1d24>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61a:	2b08      	cmp	r3, #8
 800f61c:	d014      	beq.n	800f648 <UART_SetConfig+0x1d20>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f622:	2b09      	cmp	r3, #9
 800f624:	d00e      	beq.n	800f644 <UART_SetConfig+0x1d1c>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62a:	2b0a      	cmp	r3, #10
 800f62c:	d008      	beq.n	800f640 <UART_SetConfig+0x1d18>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f632:	2b0b      	cmp	r3, #11
 800f634:	d102      	bne.n	800f63c <UART_SetConfig+0x1d14>
 800f636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f63a:	e016      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f63c:	2301      	movs	r3, #1
 800f63e:	e014      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f640:	2380      	movs	r3, #128	; 0x80
 800f642:	e012      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f644:	2340      	movs	r3, #64	; 0x40
 800f646:	e010      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f648:	2320      	movs	r3, #32
 800f64a:	e00e      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f64c:	2310      	movs	r3, #16
 800f64e:	e00c      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f650:	230c      	movs	r3, #12
 800f652:	e00a      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f654:	230a      	movs	r3, #10
 800f656:	e008      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f658:	2308      	movs	r3, #8
 800f65a:	e006      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f65c:	2306      	movs	r3, #6
 800f65e:	e004      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f660:	2304      	movs	r3, #4
 800f662:	e002      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f664:	2302      	movs	r3, #2
 800f666:	e000      	b.n	800f66a <UART_SetConfig+0x1d42>
 800f668:	2301      	movs	r3, #1
 800f66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f66c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	085b      	lsrs	r3, r3, #1
 800f676:	441a      	add	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f680:	b29b      	uxth	r3, r3
 800f682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f684:	e2aa      	b.n	800fbdc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f686:	f7fb fb47 	bl	800ad18 <HAL_RCC_GetPCLK2Freq>
 800f68a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f690:	2b00      	cmp	r3, #0
 800f692:	d044      	beq.n	800f71e <UART_SetConfig+0x1df6>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d03e      	beq.n	800f71a <UART_SetConfig+0x1df2>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a0:	2b02      	cmp	r3, #2
 800f6a2:	d038      	beq.n	800f716 <UART_SetConfig+0x1dee>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	2b03      	cmp	r3, #3
 800f6aa:	d032      	beq.n	800f712 <UART_SetConfig+0x1dea>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b0:	2b04      	cmp	r3, #4
 800f6b2:	d02c      	beq.n	800f70e <UART_SetConfig+0x1de6>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b8:	2b05      	cmp	r3, #5
 800f6ba:	d026      	beq.n	800f70a <UART_SetConfig+0x1de2>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c0:	2b06      	cmp	r3, #6
 800f6c2:	d020      	beq.n	800f706 <UART_SetConfig+0x1dde>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c8:	2b07      	cmp	r3, #7
 800f6ca:	d01a      	beq.n	800f702 <UART_SetConfig+0x1dda>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d0:	2b08      	cmp	r3, #8
 800f6d2:	d014      	beq.n	800f6fe <UART_SetConfig+0x1dd6>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d8:	2b09      	cmp	r3, #9
 800f6da:	d00e      	beq.n	800f6fa <UART_SetConfig+0x1dd2>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e0:	2b0a      	cmp	r3, #10
 800f6e2:	d008      	beq.n	800f6f6 <UART_SetConfig+0x1dce>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e8:	2b0b      	cmp	r3, #11
 800f6ea:	d102      	bne.n	800f6f2 <UART_SetConfig+0x1dca>
 800f6ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6f0:	e016      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e014      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f6f6:	2380      	movs	r3, #128	; 0x80
 800f6f8:	e012      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f6fa:	2340      	movs	r3, #64	; 0x40
 800f6fc:	e010      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f6fe:	2320      	movs	r3, #32
 800f700:	e00e      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f702:	2310      	movs	r3, #16
 800f704:	e00c      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f706:	230c      	movs	r3, #12
 800f708:	e00a      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f70a:	230a      	movs	r3, #10
 800f70c:	e008      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f70e:	2308      	movs	r3, #8
 800f710:	e006      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f712:	2306      	movs	r3, #6
 800f714:	e004      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f716:	2304      	movs	r3, #4
 800f718:	e002      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f71a:	2302      	movs	r3, #2
 800f71c:	e000      	b.n	800f720 <UART_SetConfig+0x1df8>
 800f71e:	2301      	movs	r3, #1
 800f720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f722:	fbb2 f2f3 	udiv	r2, r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	085b      	lsrs	r3, r3, #1
 800f72c:	441a      	add	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	fbb2 f3f3 	udiv	r3, r2, r3
 800f736:	b29b      	uxth	r3, r3
 800f738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f73a:	e24f      	b.n	800fbdc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f73c:	f107 0318 	add.w	r3, r7, #24
 800f740:	4618      	mov	r0, r3
 800f742:	f7fc fc6b 	bl	800c01c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d044      	beq.n	800f7da <UART_SetConfig+0x1eb2>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f754:	2b01      	cmp	r3, #1
 800f756:	d03e      	beq.n	800f7d6 <UART_SetConfig+0x1eae>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d038      	beq.n	800f7d2 <UART_SetConfig+0x1eaa>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f764:	2b03      	cmp	r3, #3
 800f766:	d032      	beq.n	800f7ce <UART_SetConfig+0x1ea6>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76c:	2b04      	cmp	r3, #4
 800f76e:	d02c      	beq.n	800f7ca <UART_SetConfig+0x1ea2>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f774:	2b05      	cmp	r3, #5
 800f776:	d026      	beq.n	800f7c6 <UART_SetConfig+0x1e9e>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77c:	2b06      	cmp	r3, #6
 800f77e:	d020      	beq.n	800f7c2 <UART_SetConfig+0x1e9a>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f784:	2b07      	cmp	r3, #7
 800f786:	d01a      	beq.n	800f7be <UART_SetConfig+0x1e96>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78c:	2b08      	cmp	r3, #8
 800f78e:	d014      	beq.n	800f7ba <UART_SetConfig+0x1e92>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f794:	2b09      	cmp	r3, #9
 800f796:	d00e      	beq.n	800f7b6 <UART_SetConfig+0x1e8e>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79c:	2b0a      	cmp	r3, #10
 800f79e:	d008      	beq.n	800f7b2 <UART_SetConfig+0x1e8a>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a4:	2b0b      	cmp	r3, #11
 800f7a6:	d102      	bne.n	800f7ae <UART_SetConfig+0x1e86>
 800f7a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7ac:	e016      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e014      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7b2:	2380      	movs	r3, #128	; 0x80
 800f7b4:	e012      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7b6:	2340      	movs	r3, #64	; 0x40
 800f7b8:	e010      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7ba:	2320      	movs	r3, #32
 800f7bc:	e00e      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7be:	2310      	movs	r3, #16
 800f7c0:	e00c      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7c2:	230c      	movs	r3, #12
 800f7c4:	e00a      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7c6:	230a      	movs	r3, #10
 800f7c8:	e008      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7ca:	2308      	movs	r3, #8
 800f7cc:	e006      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7ce:	2306      	movs	r3, #6
 800f7d0:	e004      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7d2:	2304      	movs	r3, #4
 800f7d4:	e002      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	e000      	b.n	800f7dc <UART_SetConfig+0x1eb4>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	085b      	lsrs	r3, r3, #1
 800f7e6:	441a      	add	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f7f4:	e1f2      	b.n	800fbdc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7f6:	f107 030c 	add.w	r3, r7, #12
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fc fd5a 	bl	800c2b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f806:	2b00      	cmp	r3, #0
 800f808:	d044      	beq.n	800f894 <UART_SetConfig+0x1f6c>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d03e      	beq.n	800f890 <UART_SetConfig+0x1f68>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f816:	2b02      	cmp	r3, #2
 800f818:	d038      	beq.n	800f88c <UART_SetConfig+0x1f64>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81e:	2b03      	cmp	r3, #3
 800f820:	d032      	beq.n	800f888 <UART_SetConfig+0x1f60>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f826:	2b04      	cmp	r3, #4
 800f828:	d02c      	beq.n	800f884 <UART_SetConfig+0x1f5c>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f82e:	2b05      	cmp	r3, #5
 800f830:	d026      	beq.n	800f880 <UART_SetConfig+0x1f58>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f836:	2b06      	cmp	r3, #6
 800f838:	d020      	beq.n	800f87c <UART_SetConfig+0x1f54>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83e:	2b07      	cmp	r3, #7
 800f840:	d01a      	beq.n	800f878 <UART_SetConfig+0x1f50>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f846:	2b08      	cmp	r3, #8
 800f848:	d014      	beq.n	800f874 <UART_SetConfig+0x1f4c>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84e:	2b09      	cmp	r3, #9
 800f850:	d00e      	beq.n	800f870 <UART_SetConfig+0x1f48>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f856:	2b0a      	cmp	r3, #10
 800f858:	d008      	beq.n	800f86c <UART_SetConfig+0x1f44>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85e:	2b0b      	cmp	r3, #11
 800f860:	d102      	bne.n	800f868 <UART_SetConfig+0x1f40>
 800f862:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f866:	e016      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f868:	2301      	movs	r3, #1
 800f86a:	e014      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f86c:	2380      	movs	r3, #128	; 0x80
 800f86e:	e012      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f870:	2340      	movs	r3, #64	; 0x40
 800f872:	e010      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f874:	2320      	movs	r3, #32
 800f876:	e00e      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f878:	2310      	movs	r3, #16
 800f87a:	e00c      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f87c:	230c      	movs	r3, #12
 800f87e:	e00a      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f880:	230a      	movs	r3, #10
 800f882:	e008      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f884:	2308      	movs	r3, #8
 800f886:	e006      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f888:	2306      	movs	r3, #6
 800f88a:	e004      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f88c:	2304      	movs	r3, #4
 800f88e:	e002      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f890:	2302      	movs	r3, #2
 800f892:	e000      	b.n	800f896 <UART_SetConfig+0x1f6e>
 800f894:	2301      	movs	r3, #1
 800f896:	fbb2 f2f3 	udiv	r2, r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	085b      	lsrs	r3, r3, #1
 800f8a0:	441a      	add	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f8ae:	e195      	b.n	800fbdc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8b0:	4b87      	ldr	r3, [pc, #540]	; (800fad0 <UART_SetConfig+0x21a8>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d05d      	beq.n	800f978 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8bc:	4b84      	ldr	r3, [pc, #528]	; (800fad0 <UART_SetConfig+0x21a8>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	08db      	lsrs	r3, r3, #3
 800f8c2:	f003 0303 	and.w	r3, r3, #3
 800f8c6:	4a83      	ldr	r2, [pc, #524]	; (800fad4 <UART_SetConfig+0x21ac>)
 800f8c8:	40da      	lsrs	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d044      	beq.n	800f95c <UART_SetConfig+0x2034>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d03e      	beq.n	800f958 <UART_SetConfig+0x2030>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d038      	beq.n	800f954 <UART_SetConfig+0x202c>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d032      	beq.n	800f950 <UART_SetConfig+0x2028>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ee:	2b04      	cmp	r3, #4
 800f8f0:	d02c      	beq.n	800f94c <UART_SetConfig+0x2024>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f6:	2b05      	cmp	r3, #5
 800f8f8:	d026      	beq.n	800f948 <UART_SetConfig+0x2020>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fe:	2b06      	cmp	r3, #6
 800f900:	d020      	beq.n	800f944 <UART_SetConfig+0x201c>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f906:	2b07      	cmp	r3, #7
 800f908:	d01a      	beq.n	800f940 <UART_SetConfig+0x2018>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90e:	2b08      	cmp	r3, #8
 800f910:	d014      	beq.n	800f93c <UART_SetConfig+0x2014>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f916:	2b09      	cmp	r3, #9
 800f918:	d00e      	beq.n	800f938 <UART_SetConfig+0x2010>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91e:	2b0a      	cmp	r3, #10
 800f920:	d008      	beq.n	800f934 <UART_SetConfig+0x200c>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f926:	2b0b      	cmp	r3, #11
 800f928:	d102      	bne.n	800f930 <UART_SetConfig+0x2008>
 800f92a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f92e:	e016      	b.n	800f95e <UART_SetConfig+0x2036>
 800f930:	2301      	movs	r3, #1
 800f932:	e014      	b.n	800f95e <UART_SetConfig+0x2036>
 800f934:	2380      	movs	r3, #128	; 0x80
 800f936:	e012      	b.n	800f95e <UART_SetConfig+0x2036>
 800f938:	2340      	movs	r3, #64	; 0x40
 800f93a:	e010      	b.n	800f95e <UART_SetConfig+0x2036>
 800f93c:	2320      	movs	r3, #32
 800f93e:	e00e      	b.n	800f95e <UART_SetConfig+0x2036>
 800f940:	2310      	movs	r3, #16
 800f942:	e00c      	b.n	800f95e <UART_SetConfig+0x2036>
 800f944:	230c      	movs	r3, #12
 800f946:	e00a      	b.n	800f95e <UART_SetConfig+0x2036>
 800f948:	230a      	movs	r3, #10
 800f94a:	e008      	b.n	800f95e <UART_SetConfig+0x2036>
 800f94c:	2308      	movs	r3, #8
 800f94e:	e006      	b.n	800f95e <UART_SetConfig+0x2036>
 800f950:	2306      	movs	r3, #6
 800f952:	e004      	b.n	800f95e <UART_SetConfig+0x2036>
 800f954:	2304      	movs	r3, #4
 800f956:	e002      	b.n	800f95e <UART_SetConfig+0x2036>
 800f958:	2302      	movs	r3, #2
 800f95a:	e000      	b.n	800f95e <UART_SetConfig+0x2036>
 800f95c:	2301      	movs	r3, #1
 800f95e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	085b      	lsrs	r3, r3, #1
 800f968:	441a      	add	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f972:	b29b      	uxth	r3, r3
 800f974:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800f976:	e131      	b.n	800fbdc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d043      	beq.n	800fa08 <UART_SetConfig+0x20e0>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f984:	2b01      	cmp	r3, #1
 800f986:	d03d      	beq.n	800fa04 <UART_SetConfig+0x20dc>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d037      	beq.n	800fa00 <UART_SetConfig+0x20d8>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f994:	2b03      	cmp	r3, #3
 800f996:	d031      	beq.n	800f9fc <UART_SetConfig+0x20d4>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	d02b      	beq.n	800f9f8 <UART_SetConfig+0x20d0>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a4:	2b05      	cmp	r3, #5
 800f9a6:	d025      	beq.n	800f9f4 <UART_SetConfig+0x20cc>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ac:	2b06      	cmp	r3, #6
 800f9ae:	d01f      	beq.n	800f9f0 <UART_SetConfig+0x20c8>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	2b07      	cmp	r3, #7
 800f9b6:	d019      	beq.n	800f9ec <UART_SetConfig+0x20c4>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9bc:	2b08      	cmp	r3, #8
 800f9be:	d013      	beq.n	800f9e8 <UART_SetConfig+0x20c0>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d00d      	beq.n	800f9e4 <UART_SetConfig+0x20bc>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9cc:	2b0a      	cmp	r3, #10
 800f9ce:	d007      	beq.n	800f9e0 <UART_SetConfig+0x20b8>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d4:	2b0b      	cmp	r3, #11
 800f9d6:	d101      	bne.n	800f9dc <UART_SetConfig+0x20b4>
 800f9d8:	4b3f      	ldr	r3, [pc, #252]	; (800fad8 <UART_SetConfig+0x21b0>)
 800f9da:	e016      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9dc:	4b3d      	ldr	r3, [pc, #244]	; (800fad4 <UART_SetConfig+0x21ac>)
 800f9de:	e014      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9e0:	4b3e      	ldr	r3, [pc, #248]	; (800fadc <UART_SetConfig+0x21b4>)
 800f9e2:	e012      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9e4:	4b3e      	ldr	r3, [pc, #248]	; (800fae0 <UART_SetConfig+0x21b8>)
 800f9e6:	e010      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9e8:	4b3e      	ldr	r3, [pc, #248]	; (800fae4 <UART_SetConfig+0x21bc>)
 800f9ea:	e00e      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9ec:	4b3e      	ldr	r3, [pc, #248]	; (800fae8 <UART_SetConfig+0x21c0>)
 800f9ee:	e00c      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9f0:	4b3e      	ldr	r3, [pc, #248]	; (800faec <UART_SetConfig+0x21c4>)
 800f9f2:	e00a      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9f4:	4b3e      	ldr	r3, [pc, #248]	; (800faf0 <UART_SetConfig+0x21c8>)
 800f9f6:	e008      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9f8:	4b3e      	ldr	r3, [pc, #248]	; (800faf4 <UART_SetConfig+0x21cc>)
 800f9fa:	e006      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800f9fc:	4b3e      	ldr	r3, [pc, #248]	; (800faf8 <UART_SetConfig+0x21d0>)
 800f9fe:	e004      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800fa00:	4b3e      	ldr	r3, [pc, #248]	; (800fafc <UART_SetConfig+0x21d4>)
 800fa02:	e002      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800fa04:	4b3e      	ldr	r3, [pc, #248]	; (800fb00 <UART_SetConfig+0x21d8>)
 800fa06:	e000      	b.n	800fa0a <UART_SetConfig+0x20e2>
 800fa08:	4b32      	ldr	r3, [pc, #200]	; (800fad4 <UART_SetConfig+0x21ac>)
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	6852      	ldr	r2, [r2, #4]
 800fa0e:	0852      	lsrs	r2, r2, #1
 800fa10:	441a      	add	r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa1e:	e0dd      	b.n	800fbdc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d046      	beq.n	800fab6 <UART_SetConfig+0x218e>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d040      	beq.n	800fab2 <UART_SetConfig+0x218a>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	d03a      	beq.n	800faae <UART_SetConfig+0x2186>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	2b03      	cmp	r3, #3
 800fa3e:	d034      	beq.n	800faaa <UART_SetConfig+0x2182>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa44:	2b04      	cmp	r3, #4
 800fa46:	d02e      	beq.n	800faa6 <UART_SetConfig+0x217e>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4c:	2b05      	cmp	r3, #5
 800fa4e:	d028      	beq.n	800faa2 <UART_SetConfig+0x217a>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa54:	2b06      	cmp	r3, #6
 800fa56:	d022      	beq.n	800fa9e <UART_SetConfig+0x2176>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	2b07      	cmp	r3, #7
 800fa5e:	d01c      	beq.n	800fa9a <UART_SetConfig+0x2172>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa64:	2b08      	cmp	r3, #8
 800fa66:	d016      	beq.n	800fa96 <UART_SetConfig+0x216e>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6c:	2b09      	cmp	r3, #9
 800fa6e:	d00f      	beq.n	800fa90 <UART_SetConfig+0x2168>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	2b0a      	cmp	r3, #10
 800fa76:	d008      	beq.n	800fa8a <UART_SetConfig+0x2162>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7c:	2b0b      	cmp	r3, #11
 800fa7e:	d102      	bne.n	800fa86 <UART_SetConfig+0x215e>
 800fa80:	f643 5309 	movw	r3, #15625	; 0x3d09
 800fa84:	e018      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fa86:	4b18      	ldr	r3, [pc, #96]	; (800fae8 <UART_SetConfig+0x21c0>)
 800fa88:	e016      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fa8a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800fa8e:	e013      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fa90:	f24f 4324 	movw	r3, #62500	; 0xf424
 800fa94:	e010      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fa96:	4b1b      	ldr	r3, [pc, #108]	; (800fb04 <UART_SetConfig+0x21dc>)
 800fa98:	e00e      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fa9a:	4b0f      	ldr	r3, [pc, #60]	; (800fad8 <UART_SetConfig+0x21b0>)
 800fa9c:	e00c      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fa9e:	4b1a      	ldr	r3, [pc, #104]	; (800fb08 <UART_SetConfig+0x21e0>)
 800faa0:	e00a      	b.n	800fab8 <UART_SetConfig+0x2190>
 800faa2:	4b1a      	ldr	r3, [pc, #104]	; (800fb0c <UART_SetConfig+0x21e4>)
 800faa4:	e008      	b.n	800fab8 <UART_SetConfig+0x2190>
 800faa6:	4b0d      	ldr	r3, [pc, #52]	; (800fadc <UART_SetConfig+0x21b4>)
 800faa8:	e006      	b.n	800fab8 <UART_SetConfig+0x2190>
 800faaa:	4b19      	ldr	r3, [pc, #100]	; (800fb10 <UART_SetConfig+0x21e8>)
 800faac:	e004      	b.n	800fab8 <UART_SetConfig+0x2190>
 800faae:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <UART_SetConfig+0x21b8>)
 800fab0:	e002      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fab2:	4b0c      	ldr	r3, [pc, #48]	; (800fae4 <UART_SetConfig+0x21bc>)
 800fab4:	e000      	b.n	800fab8 <UART_SetConfig+0x2190>
 800fab6:	4b0c      	ldr	r3, [pc, #48]	; (800fae8 <UART_SetConfig+0x21c0>)
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	6852      	ldr	r2, [r2, #4]
 800fabc:	0852      	lsrs	r2, r2, #1
 800fabe:	441a      	add	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fac8:	b29b      	uxth	r3, r3
 800faca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800facc:	e086      	b.n	800fbdc <UART_SetConfig+0x22b4>
 800face:	bf00      	nop
 800fad0:	58024400 	.word	0x58024400
 800fad4:	03d09000 	.word	0x03d09000
 800fad8:	0003d090 	.word	0x0003d090
 800fadc:	0007a120 	.word	0x0007a120
 800fae0:	000f4240 	.word	0x000f4240
 800fae4:	001e8480 	.word	0x001e8480
 800fae8:	003d0900 	.word	0x003d0900
 800faec:	00516155 	.word	0x00516155
 800faf0:	0061a800 	.word	0x0061a800
 800faf4:	007a1200 	.word	0x007a1200
 800faf8:	00a2c2aa 	.word	0x00a2c2aa
 800fafc:	00f42400 	.word	0x00f42400
 800fb00:	01e84800 	.word	0x01e84800
 800fb04:	0001e848 	.word	0x0001e848
 800fb08:	00051615 	.word	0x00051615
 800fb0c:	00061a80 	.word	0x00061a80
 800fb10:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d04e      	beq.n	800fbba <UART_SetConfig+0x2292>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d047      	beq.n	800fbb4 <UART_SetConfig+0x228c>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d040      	beq.n	800fbae <UART_SetConfig+0x2286>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d039      	beq.n	800fba8 <UART_SetConfig+0x2280>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb38:	2b04      	cmp	r3, #4
 800fb3a:	d032      	beq.n	800fba2 <UART_SetConfig+0x227a>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb40:	2b05      	cmp	r3, #5
 800fb42:	d02b      	beq.n	800fb9c <UART_SetConfig+0x2274>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb48:	2b06      	cmp	r3, #6
 800fb4a:	d024      	beq.n	800fb96 <UART_SetConfig+0x226e>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb50:	2b07      	cmp	r3, #7
 800fb52:	d01d      	beq.n	800fb90 <UART_SetConfig+0x2268>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb58:	2b08      	cmp	r3, #8
 800fb5a:	d016      	beq.n	800fb8a <UART_SetConfig+0x2262>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb60:	2b09      	cmp	r3, #9
 800fb62:	d00f      	beq.n	800fb84 <UART_SetConfig+0x225c>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb68:	2b0a      	cmp	r3, #10
 800fb6a:	d008      	beq.n	800fb7e <UART_SetConfig+0x2256>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb70:	2b0b      	cmp	r3, #11
 800fb72:	d101      	bne.n	800fb78 <UART_SetConfig+0x2250>
 800fb74:	2380      	movs	r3, #128	; 0x80
 800fb76:	e022      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb7c:	e01f      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb82:	e01c      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb88:	e019      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb8e:	e016      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fb94:	e013      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800fb9a:	e010      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fb9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800fba0:	e00d      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fba6:	e00a      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fba8:	f241 5355 	movw	r3, #5461	; 0x1555
 800fbac:	e007      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fbae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbb2:	e004      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fbb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fbb8:	e001      	b.n	800fbbe <UART_SetConfig+0x2296>
 800fbba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	6852      	ldr	r2, [r2, #4]
 800fbc2:	0852      	lsrs	r2, r2, #1
 800fbc4:	441a      	add	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbd2:	e003      	b.n	800fbdc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800fbda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbde:	2b0f      	cmp	r3, #15
 800fbe0:	d908      	bls.n	800fbf4 <UART_SetConfig+0x22cc>
 800fbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbe8:	d204      	bcs.n	800fbf4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbf0:	60da      	str	r2, [r3, #12]
 800fbf2:	e002      	b.n	800fbfa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2201      	movs	r2, #1
 800fc06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800fc16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3740      	adds	r7, #64	; 0x40
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800fc24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00a      	beq.n	800fc4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	430a      	orrs	r2, r1
 800fc4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc52:	f003 0302 	and.w	r3, r3, #2
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00a      	beq.n	800fc70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	430a      	orrs	r2, r1
 800fc6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc74:	f003 0304 	and.w	r3, r3, #4
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00a      	beq.n	800fc92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc96:	f003 0308 	and.w	r3, r3, #8
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00a      	beq.n	800fcb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	430a      	orrs	r2, r1
 800fcb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcb8:	f003 0310 	and.w	r3, r3, #16
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00a      	beq.n	800fcd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	430a      	orrs	r2, r1
 800fcd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcda:	f003 0320 	and.w	r3, r3, #32
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00a      	beq.n	800fcf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	430a      	orrs	r2, r1
 800fcf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d01a      	beq.n	800fd3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	430a      	orrs	r2, r1
 800fd18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd22:	d10a      	bne.n	800fd3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	430a      	orrs	r2, r1
 800fd38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00a      	beq.n	800fd5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	430a      	orrs	r2, r1
 800fd5a:	605a      	str	r2, [r3, #4]
  }
}
 800fd5c:	bf00      	nop
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b086      	sub	sp, #24
 800fd6c:	af02      	add	r7, sp, #8
 800fd6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fd78:	f7f5 fd60 	bl	800583c <HAL_GetTick>
 800fd7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f003 0308 	and.w	r3, r3, #8
 800fd88:	2b08      	cmp	r3, #8
 800fd8a:	d10e      	bne.n	800fdaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f82c 	bl	800fdf8 <UART_WaitOnFlagUntilTimeout>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fda6:	2303      	movs	r3, #3
 800fda8:	e022      	b.n	800fdf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f003 0304 	and.w	r3, r3, #4
 800fdb4:	2b04      	cmp	r3, #4
 800fdb6:	d10e      	bne.n	800fdd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f816 	bl	800fdf8 <UART_WaitOnFlagUntilTimeout>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	e00c      	b.n	800fdf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2220      	movs	r2, #32
 800fdda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2220      	movs	r2, #32
 800fde2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fdee:	2300      	movs	r3, #0
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	603b      	str	r3, [r7, #0]
 800fe04:	4613      	mov	r3, r2
 800fe06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe08:	e062      	b.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe10:	d05e      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe12:	f7f5 fd13 	bl	800583c <HAL_GetTick>
 800fe16:	4602      	mov	r2, r0
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	69ba      	ldr	r2, [r7, #24]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d302      	bcc.n	800fe28 <UART_WaitOnFlagUntilTimeout+0x30>
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d11d      	bne.n	800fe64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fe36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	689a      	ldr	r2, [r3, #8]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f022 0201 	bic.w	r2, r2, #1
 800fe46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2220      	movs	r2, #32
 800fe4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2220      	movs	r2, #32
 800fe54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fe60:	2303      	movs	r3, #3
 800fe62:	e045      	b.n	800fef0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f003 0304 	and.w	r3, r3, #4
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d02e      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	69db      	ldr	r3, [r3, #28]
 800fe78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe80:	d126      	bne.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe8a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fe9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	689a      	ldr	r2, [r3, #8]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f022 0201 	bic.w	r2, r2, #1
 800feaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2220      	movs	r2, #32
 800feb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2220      	movs	r2, #32
 800feb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2220      	movs	r2, #32
 800fec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800fecc:	2303      	movs	r3, #3
 800fece:	e00f      	b.n	800fef0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	69da      	ldr	r2, [r3, #28]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	4013      	ands	r3, r2
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	429a      	cmp	r2, r3
 800fede:	bf0c      	ite	eq
 800fee0:	2301      	moveq	r3, #1
 800fee2:	2300      	movne	r3, #0
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	461a      	mov	r2, r3
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	429a      	cmp	r2, r3
 800feec:	d08d      	beq.n	800fe0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ff0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	689a      	ldr	r2, [r3, #8]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ff1e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2220      	movs	r2, #32
 800ff24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ff4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	6899      	ldr	r1, [r3, #8]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <UART_EndRxTransfer+0x44>)
 800ff58:	400b      	ands	r3, r1
 800ff5a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2220      	movs	r2, #32
 800ff60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2200      	movs	r2, #0
 800ff68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ff6a:	bf00      	nop
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	effffffe 	.word	0xeffffffe

0800ff7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	69db      	ldr	r3, [r3, #28]
 800ff8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff92:	d01f      	beq.n	800ffd4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2200      	movs	r2, #0
 800ff98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ffaa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	689a      	ldr	r2, [r3, #8]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f022 0201 	bic.w	r2, r2, #1
 800ffba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	689a      	ldr	r2, [r3, #8]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f7f0 fc15 	bl	8000804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffda:	bf00      	nop
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f7fd fc83 	bl	800d8fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fff6:	bf00      	nop
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b086      	sub	sp, #24
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801000a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010012:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801001a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010026:	2b80      	cmp	r3, #128	; 0x80
 8010028:	d109      	bne.n	801003e <UART_DMAError+0x40>
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	2b21      	cmp	r3, #33	; 0x21
 801002e:	d106      	bne.n	801003e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	2200      	movs	r2, #0
 8010034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010038:	6978      	ldr	r0, [r7, #20]
 801003a:	f7ff ff5d 	bl	800fef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010048:	2b40      	cmp	r3, #64	; 0x40
 801004a:	d109      	bne.n	8010060 <UART_DMAError+0x62>
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b22      	cmp	r3, #34	; 0x22
 8010050:	d106      	bne.n	8010060 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	2200      	movs	r2, #0
 8010056:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801005a:	6978      	ldr	r0, [r7, #20]
 801005c:	f7ff ff6a 	bl	800ff34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010066:	f043 0210 	orr.w	r2, r3, #16
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010070:	6978      	ldr	r0, [r7, #20]
 8010072:	f7fd fc4d 	bl	800d910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010076:	bf00      	nop
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b084      	sub	sp, #16
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801008a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2200      	movs	r2, #0
 8010098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f7fd fc37 	bl	800d910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100a2:	bf00      	nop
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80100aa:	b480      	push	{r7}
 80100ac:	b083      	sub	sp, #12
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b8:	2b21      	cmp	r3, #33	; 0x21
 80100ba:	d12a      	bne.n	8010112 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d110      	bne.n	80100ea <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80100d6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100e6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80100e8:	e013      	b.n	8010112 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100ee:	781a      	ldrb	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100fa:	1c5a      	adds	r2, r3, #1
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010106:	b29b      	uxth	r3, r3
 8010108:	3b01      	subs	r3, #1
 801010a:	b29a      	uxth	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010112:	bf00      	nop
 8010114:	370c      	adds	r7, #12
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801011e:	b480      	push	{r7}
 8010120:	b085      	sub	sp, #20
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801012c:	2b21      	cmp	r3, #33	; 0x21
 801012e:	d12f      	bne.n	8010190 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010136:	b29b      	uxth	r3, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	d110      	bne.n	801015e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801014a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801015a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801015c:	e018      	b.n	8010190 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010162:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	461a      	mov	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010172:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010178:	1c9a      	adds	r2, r3, #2
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010184:	b29b      	uxth	r3, r3
 8010186:	3b01      	subs	r3, #1
 8010188:	b29a      	uxth	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010190:	bf00      	nop
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101aa:	2b21      	cmp	r3, #33	; 0x21
 80101ac:	d13d      	bne.n	801022a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101b4:	81fb      	strh	r3, [r7, #14]
 80101b6:	e035      	b.n	8010224 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101be:	b29b      	uxth	r3, r3
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d111      	bne.n	80101e8 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	689a      	ldr	r2, [r3, #8]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80101d2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101e2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80101e4:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80101e6:	e020      	b.n	801022a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	69db      	ldr	r3, [r3, #28]
 80101ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d013      	beq.n	801021e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010212:	b29b      	uxth	r3, r3
 8010214:	3b01      	subs	r3, #1
 8010216:	b29a      	uxth	r2, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801021e:	89fb      	ldrh	r3, [r7, #14]
 8010220:	3b01      	subs	r3, #1
 8010222:	81fb      	strh	r3, [r7, #14]
 8010224:	89fb      	ldrh	r3, [r7, #14]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1c6      	bne.n	80101b8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 801022a:	bf00      	nop
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr

08010236 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010236:	b480      	push	{r7}
 8010238:	b085      	sub	sp, #20
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010244:	2b21      	cmp	r3, #33	; 0x21
 8010246:	d142      	bne.n	80102ce <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801024e:	81fb      	strh	r3, [r7, #14]
 8010250:	e03a      	b.n	80102c8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010258:	b29b      	uxth	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d111      	bne.n	8010282 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	689a      	ldr	r2, [r3, #8]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801026c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801027c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 801027e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8010280:	e025      	b.n	80102ce <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	69db      	ldr	r3, [r3, #28]
 8010288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801028c:	2b00      	cmp	r3, #0
 801028e:	d018      	beq.n	80102c2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010294:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	881b      	ldrh	r3, [r3, #0]
 801029a:	461a      	mov	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102a4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102aa:	1c9a      	adds	r2, r3, #2
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	3b01      	subs	r3, #1
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80102c2:	89fb      	ldrh	r3, [r7, #14]
 80102c4:	3b01      	subs	r3, #1
 80102c6:	81fb      	strh	r3, [r7, #14]
 80102c8:	89fb      	ldrh	r3, [r7, #14]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d1c1      	bne.n	8010252 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80102ce:	bf00      	nop
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80102f0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2220      	movs	r2, #32
 80102f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f7f0 fa3d 	bl	8000780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010306:	bf00      	nop
 8010308:	3708      	adds	r7, #8
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b084      	sub	sp, #16
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801031c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010324:	2b22      	cmp	r3, #34	; 0x22
 8010326:	d13b      	bne.n	80103a0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010330:	89bb      	ldrh	r3, [r7, #12]
 8010332:	b2d9      	uxtb	r1, r3
 8010334:	89fb      	ldrh	r3, [r7, #14]
 8010336:	b2da      	uxtb	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801033c:	400a      	ands	r2, r1
 801033e:	b2d2      	uxtb	r2, r2
 8010340:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010346:	1c5a      	adds	r2, r3, #1
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010352:	b29b      	uxth	r3, r3
 8010354:	3b01      	subs	r3, #1
 8010356:	b29a      	uxth	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010364:	b29b      	uxth	r3, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	d122      	bne.n	80103b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010378:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	689a      	ldr	r2, [r3, #8]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f022 0201 	bic.w	r2, r2, #1
 8010388:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2220      	movs	r2, #32
 801038e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7f0 fa33 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801039e:	e007      	b.n	80103b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	699a      	ldr	r2, [r3, #24]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f042 0208 	orr.w	r2, r2, #8
 80103ae:	619a      	str	r2, [r3, #24]
}
 80103b0:	bf00      	nop
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103ce:	2b22      	cmp	r3, #34	; 0x22
 80103d0:	d13b      	bne.n	801044a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103de:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80103e0:	89ba      	ldrh	r2, [r7, #12]
 80103e2:	89fb      	ldrh	r3, [r7, #14]
 80103e4:	4013      	ands	r3, r2
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103f0:	1c9a      	adds	r2, r3, #2
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	3b01      	subs	r3, #1
 8010400:	b29a      	uxth	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801040e:	b29b      	uxth	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d122      	bne.n	801045a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010422:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	689a      	ldr	r2, [r3, #8]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f022 0201 	bic.w	r2, r2, #1
 8010432:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2220      	movs	r2, #32
 8010438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7f0 f9de 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010448:	e007      	b.n	801045a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	699a      	ldr	r2, [r3, #24]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f042 0208 	orr.w	r2, r2, #8
 8010458:	619a      	str	r2, [r3, #24]
}
 801045a:	bf00      	nop
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
	...

08010464 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010472:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801047a:	2b22      	cmp	r3, #34	; 0x22
 801047c:	d166      	bne.n	801054c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010484:	81fb      	strh	r3, [r7, #14]
 8010486:	e03d      	b.n	8010504 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801048e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010490:	893b      	ldrh	r3, [r7, #8]
 8010492:	b2d9      	uxtb	r1, r3
 8010494:	89bb      	ldrh	r3, [r7, #12]
 8010496:	b2da      	uxtb	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801049c:	400a      	ands	r2, r1
 801049e:	b2d2      	uxtb	r2, r2
 80104a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104a6:	1c5a      	adds	r2, r3, #1
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	3b01      	subs	r3, #1
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d119      	bne.n	80104fe <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80104d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	6899      	ldr	r1, [r3, #8]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	4b1f      	ldr	r3, [pc, #124]	; (8010564 <UART_RxISR_8BIT_FIFOEN+0x100>)
 80104e6:	400b      	ands	r3, r1
 80104e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2220      	movs	r2, #32
 80104ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7f0 f983 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80104fe:	89fb      	ldrh	r3, [r7, #14]
 8010500:	3b01      	subs	r3, #1
 8010502:	81fb      	strh	r3, [r7, #14]
 8010504:	89fb      	ldrh	r3, [r7, #14]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d1be      	bne.n	8010488 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010510:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010512:	897b      	ldrh	r3, [r7, #10]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d021      	beq.n	801055c <UART_RxISR_8BIT_FIFOEN+0xf8>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801051e:	897a      	ldrh	r2, [r7, #10]
 8010520:	429a      	cmp	r2, r3
 8010522:	d21b      	bcs.n	801055c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	689a      	ldr	r2, [r3, #8]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8010532:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a0c      	ldr	r2, [pc, #48]	; (8010568 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8010538:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f042 0220 	orr.w	r2, r2, #32
 8010548:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801054a:	e007      	b.n	801055c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	699a      	ldr	r2, [r3, #24]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f042 0208 	orr.w	r2, r2, #8
 801055a:	619a      	str	r2, [r3, #24]
}
 801055c:	bf00      	nop
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	effffffe 	.word	0xeffffffe
 8010568:	0801030f 	.word	0x0801030f

0801056c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b086      	sub	sp, #24
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801057a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010582:	2b22      	cmp	r3, #34	; 0x22
 8010584:	d166      	bne.n	8010654 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801058c:	82fb      	strh	r3, [r7, #22]
 801058e:	e03d      	b.n	801060c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801059c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 801059e:	8a3a      	ldrh	r2, [r7, #16]
 80105a0:	8abb      	ldrh	r3, [r7, #20]
 80105a2:	4013      	ands	r3, r2
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ae:	1c9a      	adds	r2, r3, #2
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	3b01      	subs	r3, #1
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d119      	bne.n	8010606 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80105e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6899      	ldr	r1, [r3, #8]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	4b1f      	ldr	r3, [pc, #124]	; (801066c <UART_RxISR_16BIT_FIFOEN+0x100>)
 80105ee:	400b      	ands	r3, r1
 80105f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2220      	movs	r2, #32
 80105f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f7f0 f8ff 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8010606:	8afb      	ldrh	r3, [r7, #22]
 8010608:	3b01      	subs	r3, #1
 801060a:	82fb      	strh	r3, [r7, #22]
 801060c:	8afb      	ldrh	r3, [r7, #22]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1be      	bne.n	8010590 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010618:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801061a:	8a7b      	ldrh	r3, [r7, #18]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d021      	beq.n	8010664 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010626:	8a7a      	ldrh	r2, [r7, #18]
 8010628:	429a      	cmp	r2, r3
 801062a:	d21b      	bcs.n	8010664 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689a      	ldr	r2, [r3, #8]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801063a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4a0c      	ldr	r2, [pc, #48]	; (8010670 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8010640:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f042 0220 	orr.w	r2, r2, #32
 8010650:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010652:	e007      	b.n	8010664 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	699a      	ldr	r2, [r3, #24]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f042 0208 	orr.w	r2, r2, #8
 8010662:	619a      	str	r2, [r3, #24]
}
 8010664:	bf00      	nop
 8010666:	3718      	adds	r7, #24
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	effffffe 	.word	0xeffffffe
 8010670:	080103b9 	.word	0x080103b9

08010674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801067c:	bf00      	nop
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80106a4:	bf00      	nop
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d101      	bne.n	80106c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80106c2:	2302      	movs	r3, #2
 80106c4:	e027      	b.n	8010716 <HAL_UARTEx_DisableFifoMode+0x66>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2201      	movs	r2, #1
 80106ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2224      	movs	r2, #36	; 0x24
 80106d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f022 0201 	bic.w	r2, r2, #1
 80106ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80106f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2220      	movs	r2, #32
 8010708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b084      	sub	sp, #16
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010732:	2b01      	cmp	r3, #1
 8010734:	d101      	bne.n	801073a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010736:	2302      	movs	r3, #2
 8010738:	e02d      	b.n	8010796 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2201      	movs	r2, #1
 801073e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2224      	movs	r2, #36	; 0x24
 8010746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	f022 0201 	bic.w	r2, r2, #1
 8010760:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	683a      	ldr	r2, [r7, #0]
 8010772:	430a      	orrs	r2, r1
 8010774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f850 	bl	801081c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2220      	movs	r2, #32
 8010788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b084      	sub	sp, #16
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
 80107a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d101      	bne.n	80107b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80107b2:	2302      	movs	r3, #2
 80107b4:	e02d      	b.n	8010812 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2224      	movs	r2, #36	; 0x24
 80107c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f022 0201 	bic.w	r2, r2, #1
 80107dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	689b      	ldr	r3, [r3, #8]
 80107e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	683a      	ldr	r2, [r7, #0]
 80107ee:	430a      	orrs	r2, r1
 80107f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 f812 	bl	801081c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2220      	movs	r2, #32
 8010804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010810:	2300      	movs	r3, #0
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
	...

0801081c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801081c:	b480      	push	{r7}
 801081e:	b089      	sub	sp, #36	; 0x24
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010824:	4a2f      	ldr	r2, [pc, #188]	; (80108e4 <UARTEx_SetNbDataToProcess+0xc8>)
 8010826:	f107 0314 	add.w	r3, r7, #20
 801082a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801082e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010832:	4a2d      	ldr	r2, [pc, #180]	; (80108e8 <UARTEx_SetNbDataToProcess+0xcc>)
 8010834:	f107 030c 	add.w	r3, r7, #12
 8010838:	e892 0003 	ldmia.w	r2, {r0, r1}
 801083c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010844:	2b00      	cmp	r3, #0
 8010846:	d108      	bne.n	801085a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2201      	movs	r2, #1
 801084c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2201      	movs	r2, #1
 8010854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010858:	e03d      	b.n	80108d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801085a:	2308      	movs	r3, #8
 801085c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801085e:	2308      	movs	r3, #8
 8010860:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	0e5b      	lsrs	r3, r3, #25
 801086a:	b2db      	uxtb	r3, r3
 801086c:	f003 0307 	and.w	r3, r3, #7
 8010870:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	0f5b      	lsrs	r3, r3, #29
 801087a:	b2db      	uxtb	r3, r3
 801087c:	f003 0307 	and.w	r3, r3, #7
 8010880:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010882:	7fbb      	ldrb	r3, [r7, #30]
 8010884:	7f3a      	ldrb	r2, [r7, #28]
 8010886:	f107 0120 	add.w	r1, r7, #32
 801088a:	440a      	add	r2, r1
 801088c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010890:	fb02 f303 	mul.w	r3, r2, r3
 8010894:	7f3a      	ldrb	r2, [r7, #28]
 8010896:	f107 0120 	add.w	r1, r7, #32
 801089a:	440a      	add	r2, r1
 801089c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80108a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80108ac:	7ffb      	ldrb	r3, [r7, #31]
 80108ae:	7f7a      	ldrb	r2, [r7, #29]
 80108b0:	f107 0120 	add.w	r1, r7, #32
 80108b4:	440a      	add	r2, r1
 80108b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80108ba:	fb02 f303 	mul.w	r3, r2, r3
 80108be:	7f7a      	ldrb	r2, [r7, #29]
 80108c0:	f107 0120 	add.w	r1, r7, #32
 80108c4:	440a      	add	r2, r1
 80108c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80108ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80108d6:	bf00      	nop
 80108d8:	3724      	adds	r7, #36	; 0x24
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	08012414 	.word	0x08012414
 80108e8:	0801241c 	.word	0x0801241c

080108ec <__errno>:
 80108ec:	4b01      	ldr	r3, [pc, #4]	; (80108f4 <__errno+0x8>)
 80108ee:	6818      	ldr	r0, [r3, #0]
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	24000108 	.word	0x24000108

080108f8 <__libc_init_array>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	4e0d      	ldr	r6, [pc, #52]	; (8010930 <__libc_init_array+0x38>)
 80108fc:	4c0d      	ldr	r4, [pc, #52]	; (8010934 <__libc_init_array+0x3c>)
 80108fe:	1ba4      	subs	r4, r4, r6
 8010900:	10a4      	asrs	r4, r4, #2
 8010902:	2500      	movs	r5, #0
 8010904:	42a5      	cmp	r5, r4
 8010906:	d109      	bne.n	801091c <__libc_init_array+0x24>
 8010908:	4e0b      	ldr	r6, [pc, #44]	; (8010938 <__libc_init_array+0x40>)
 801090a:	4c0c      	ldr	r4, [pc, #48]	; (801093c <__libc_init_array+0x44>)
 801090c:	f001 fc46 	bl	801219c <_init>
 8010910:	1ba4      	subs	r4, r4, r6
 8010912:	10a4      	asrs	r4, r4, #2
 8010914:	2500      	movs	r5, #0
 8010916:	42a5      	cmp	r5, r4
 8010918:	d105      	bne.n	8010926 <__libc_init_array+0x2e>
 801091a:	bd70      	pop	{r4, r5, r6, pc}
 801091c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010920:	4798      	blx	r3
 8010922:	3501      	adds	r5, #1
 8010924:	e7ee      	b.n	8010904 <__libc_init_array+0xc>
 8010926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801092a:	4798      	blx	r3
 801092c:	3501      	adds	r5, #1
 801092e:	e7f2      	b.n	8010916 <__libc_init_array+0x1e>
 8010930:	08012698 	.word	0x08012698
 8010934:	08012698 	.word	0x08012698
 8010938:	08012698 	.word	0x08012698
 801093c:	0801269c 	.word	0x0801269c

08010940 <memset>:
 8010940:	4402      	add	r2, r0
 8010942:	4603      	mov	r3, r0
 8010944:	4293      	cmp	r3, r2
 8010946:	d100      	bne.n	801094a <memset+0xa>
 8010948:	4770      	bx	lr
 801094a:	f803 1b01 	strb.w	r1, [r3], #1
 801094e:	e7f9      	b.n	8010944 <memset+0x4>

08010950 <siprintf>:
 8010950:	b40e      	push	{r1, r2, r3}
 8010952:	b500      	push	{lr}
 8010954:	b09c      	sub	sp, #112	; 0x70
 8010956:	ab1d      	add	r3, sp, #116	; 0x74
 8010958:	9002      	str	r0, [sp, #8]
 801095a:	9006      	str	r0, [sp, #24]
 801095c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010960:	4809      	ldr	r0, [pc, #36]	; (8010988 <siprintf+0x38>)
 8010962:	9107      	str	r1, [sp, #28]
 8010964:	9104      	str	r1, [sp, #16]
 8010966:	4909      	ldr	r1, [pc, #36]	; (801098c <siprintf+0x3c>)
 8010968:	f853 2b04 	ldr.w	r2, [r3], #4
 801096c:	9105      	str	r1, [sp, #20]
 801096e:	6800      	ldr	r0, [r0, #0]
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	a902      	add	r1, sp, #8
 8010974:	f000 f866 	bl	8010a44 <_svfiprintf_r>
 8010978:	9b02      	ldr	r3, [sp, #8]
 801097a:	2200      	movs	r2, #0
 801097c:	701a      	strb	r2, [r3, #0]
 801097e:	b01c      	add	sp, #112	; 0x70
 8010980:	f85d eb04 	ldr.w	lr, [sp], #4
 8010984:	b003      	add	sp, #12
 8010986:	4770      	bx	lr
 8010988:	24000108 	.word	0x24000108
 801098c:	ffff0208 	.word	0xffff0208

08010990 <__ssputs_r>:
 8010990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010994:	688e      	ldr	r6, [r1, #8]
 8010996:	429e      	cmp	r6, r3
 8010998:	4682      	mov	sl, r0
 801099a:	460c      	mov	r4, r1
 801099c:	4690      	mov	r8, r2
 801099e:	4699      	mov	r9, r3
 80109a0:	d837      	bhi.n	8010a12 <__ssputs_r+0x82>
 80109a2:	898a      	ldrh	r2, [r1, #12]
 80109a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109a8:	d031      	beq.n	8010a0e <__ssputs_r+0x7e>
 80109aa:	6825      	ldr	r5, [r4, #0]
 80109ac:	6909      	ldr	r1, [r1, #16]
 80109ae:	1a6f      	subs	r7, r5, r1
 80109b0:	6965      	ldr	r5, [r4, #20]
 80109b2:	2302      	movs	r3, #2
 80109b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80109bc:	f109 0301 	add.w	r3, r9, #1
 80109c0:	443b      	add	r3, r7
 80109c2:	429d      	cmp	r5, r3
 80109c4:	bf38      	it	cc
 80109c6:	461d      	movcc	r5, r3
 80109c8:	0553      	lsls	r3, r2, #21
 80109ca:	d530      	bpl.n	8010a2e <__ssputs_r+0x9e>
 80109cc:	4629      	mov	r1, r5
 80109ce:	f000 fb2b 	bl	8011028 <_malloc_r>
 80109d2:	4606      	mov	r6, r0
 80109d4:	b950      	cbnz	r0, 80109ec <__ssputs_r+0x5c>
 80109d6:	230c      	movs	r3, #12
 80109d8:	f8ca 3000 	str.w	r3, [sl]
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109e2:	81a3      	strh	r3, [r4, #12]
 80109e4:	f04f 30ff 	mov.w	r0, #4294967295
 80109e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ec:	463a      	mov	r2, r7
 80109ee:	6921      	ldr	r1, [r4, #16]
 80109f0:	f000 faa8 	bl	8010f44 <memcpy>
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80109fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109fe:	81a3      	strh	r3, [r4, #12]
 8010a00:	6126      	str	r6, [r4, #16]
 8010a02:	6165      	str	r5, [r4, #20]
 8010a04:	443e      	add	r6, r7
 8010a06:	1bed      	subs	r5, r5, r7
 8010a08:	6026      	str	r6, [r4, #0]
 8010a0a:	60a5      	str	r5, [r4, #8]
 8010a0c:	464e      	mov	r6, r9
 8010a0e:	454e      	cmp	r6, r9
 8010a10:	d900      	bls.n	8010a14 <__ssputs_r+0x84>
 8010a12:	464e      	mov	r6, r9
 8010a14:	4632      	mov	r2, r6
 8010a16:	4641      	mov	r1, r8
 8010a18:	6820      	ldr	r0, [r4, #0]
 8010a1a:	f000 fa9e 	bl	8010f5a <memmove>
 8010a1e:	68a3      	ldr	r3, [r4, #8]
 8010a20:	1b9b      	subs	r3, r3, r6
 8010a22:	60a3      	str	r3, [r4, #8]
 8010a24:	6823      	ldr	r3, [r4, #0]
 8010a26:	441e      	add	r6, r3
 8010a28:	6026      	str	r6, [r4, #0]
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	e7dc      	b.n	80109e8 <__ssputs_r+0x58>
 8010a2e:	462a      	mov	r2, r5
 8010a30:	f000 fb54 	bl	80110dc <_realloc_r>
 8010a34:	4606      	mov	r6, r0
 8010a36:	2800      	cmp	r0, #0
 8010a38:	d1e2      	bne.n	8010a00 <__ssputs_r+0x70>
 8010a3a:	6921      	ldr	r1, [r4, #16]
 8010a3c:	4650      	mov	r0, sl
 8010a3e:	f000 faa5 	bl	8010f8c <_free_r>
 8010a42:	e7c8      	b.n	80109d6 <__ssputs_r+0x46>

08010a44 <_svfiprintf_r>:
 8010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a48:	461d      	mov	r5, r3
 8010a4a:	898b      	ldrh	r3, [r1, #12]
 8010a4c:	061f      	lsls	r7, r3, #24
 8010a4e:	b09d      	sub	sp, #116	; 0x74
 8010a50:	4680      	mov	r8, r0
 8010a52:	460c      	mov	r4, r1
 8010a54:	4616      	mov	r6, r2
 8010a56:	d50f      	bpl.n	8010a78 <_svfiprintf_r+0x34>
 8010a58:	690b      	ldr	r3, [r1, #16]
 8010a5a:	b96b      	cbnz	r3, 8010a78 <_svfiprintf_r+0x34>
 8010a5c:	2140      	movs	r1, #64	; 0x40
 8010a5e:	f000 fae3 	bl	8011028 <_malloc_r>
 8010a62:	6020      	str	r0, [r4, #0]
 8010a64:	6120      	str	r0, [r4, #16]
 8010a66:	b928      	cbnz	r0, 8010a74 <_svfiprintf_r+0x30>
 8010a68:	230c      	movs	r3, #12
 8010a6a:	f8c8 3000 	str.w	r3, [r8]
 8010a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a72:	e0c8      	b.n	8010c06 <_svfiprintf_r+0x1c2>
 8010a74:	2340      	movs	r3, #64	; 0x40
 8010a76:	6163      	str	r3, [r4, #20]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a7c:	2320      	movs	r3, #32
 8010a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a82:	2330      	movs	r3, #48	; 0x30
 8010a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a88:	9503      	str	r5, [sp, #12]
 8010a8a:	f04f 0b01 	mov.w	fp, #1
 8010a8e:	4637      	mov	r7, r6
 8010a90:	463d      	mov	r5, r7
 8010a92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010a96:	b10b      	cbz	r3, 8010a9c <_svfiprintf_r+0x58>
 8010a98:	2b25      	cmp	r3, #37	; 0x25
 8010a9a:	d13e      	bne.n	8010b1a <_svfiprintf_r+0xd6>
 8010a9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010aa0:	d00b      	beq.n	8010aba <_svfiprintf_r+0x76>
 8010aa2:	4653      	mov	r3, sl
 8010aa4:	4632      	mov	r2, r6
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	4640      	mov	r0, r8
 8010aaa:	f7ff ff71 	bl	8010990 <__ssputs_r>
 8010aae:	3001      	adds	r0, #1
 8010ab0:	f000 80a4 	beq.w	8010bfc <_svfiprintf_r+0x1b8>
 8010ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab6:	4453      	add	r3, sl
 8010ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8010aba:	783b      	ldrb	r3, [r7, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f000 809d 	beq.w	8010bfc <_svfiprintf_r+0x1b8>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010acc:	9304      	str	r3, [sp, #16]
 8010ace:	9307      	str	r3, [sp, #28]
 8010ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ad6:	462f      	mov	r7, r5
 8010ad8:	2205      	movs	r2, #5
 8010ada:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010ade:	4850      	ldr	r0, [pc, #320]	; (8010c20 <_svfiprintf_r+0x1dc>)
 8010ae0:	f7ef fbfe 	bl	80002e0 <memchr>
 8010ae4:	9b04      	ldr	r3, [sp, #16]
 8010ae6:	b9d0      	cbnz	r0, 8010b1e <_svfiprintf_r+0xda>
 8010ae8:	06d9      	lsls	r1, r3, #27
 8010aea:	bf44      	itt	mi
 8010aec:	2220      	movmi	r2, #32
 8010aee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010af2:	071a      	lsls	r2, r3, #28
 8010af4:	bf44      	itt	mi
 8010af6:	222b      	movmi	r2, #43	; 0x2b
 8010af8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010afc:	782a      	ldrb	r2, [r5, #0]
 8010afe:	2a2a      	cmp	r2, #42	; 0x2a
 8010b00:	d015      	beq.n	8010b2e <_svfiprintf_r+0xea>
 8010b02:	9a07      	ldr	r2, [sp, #28]
 8010b04:	462f      	mov	r7, r5
 8010b06:	2000      	movs	r0, #0
 8010b08:	250a      	movs	r5, #10
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b10:	3b30      	subs	r3, #48	; 0x30
 8010b12:	2b09      	cmp	r3, #9
 8010b14:	d94d      	bls.n	8010bb2 <_svfiprintf_r+0x16e>
 8010b16:	b1b8      	cbz	r0, 8010b48 <_svfiprintf_r+0x104>
 8010b18:	e00f      	b.n	8010b3a <_svfiprintf_r+0xf6>
 8010b1a:	462f      	mov	r7, r5
 8010b1c:	e7b8      	b.n	8010a90 <_svfiprintf_r+0x4c>
 8010b1e:	4a40      	ldr	r2, [pc, #256]	; (8010c20 <_svfiprintf_r+0x1dc>)
 8010b20:	1a80      	subs	r0, r0, r2
 8010b22:	fa0b f000 	lsl.w	r0, fp, r0
 8010b26:	4318      	orrs	r0, r3
 8010b28:	9004      	str	r0, [sp, #16]
 8010b2a:	463d      	mov	r5, r7
 8010b2c:	e7d3      	b.n	8010ad6 <_svfiprintf_r+0x92>
 8010b2e:	9a03      	ldr	r2, [sp, #12]
 8010b30:	1d11      	adds	r1, r2, #4
 8010b32:	6812      	ldr	r2, [r2, #0]
 8010b34:	9103      	str	r1, [sp, #12]
 8010b36:	2a00      	cmp	r2, #0
 8010b38:	db01      	blt.n	8010b3e <_svfiprintf_r+0xfa>
 8010b3a:	9207      	str	r2, [sp, #28]
 8010b3c:	e004      	b.n	8010b48 <_svfiprintf_r+0x104>
 8010b3e:	4252      	negs	r2, r2
 8010b40:	f043 0302 	orr.w	r3, r3, #2
 8010b44:	9207      	str	r2, [sp, #28]
 8010b46:	9304      	str	r3, [sp, #16]
 8010b48:	783b      	ldrb	r3, [r7, #0]
 8010b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8010b4c:	d10c      	bne.n	8010b68 <_svfiprintf_r+0x124>
 8010b4e:	787b      	ldrb	r3, [r7, #1]
 8010b50:	2b2a      	cmp	r3, #42	; 0x2a
 8010b52:	d133      	bne.n	8010bbc <_svfiprintf_r+0x178>
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	1d1a      	adds	r2, r3, #4
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	9203      	str	r2, [sp, #12]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	bfb8      	it	lt
 8010b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b64:	3702      	adds	r7, #2
 8010b66:	9305      	str	r3, [sp, #20]
 8010b68:	4d2e      	ldr	r5, [pc, #184]	; (8010c24 <_svfiprintf_r+0x1e0>)
 8010b6a:	7839      	ldrb	r1, [r7, #0]
 8010b6c:	2203      	movs	r2, #3
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f7ef fbb6 	bl	80002e0 <memchr>
 8010b74:	b138      	cbz	r0, 8010b86 <_svfiprintf_r+0x142>
 8010b76:	2340      	movs	r3, #64	; 0x40
 8010b78:	1b40      	subs	r0, r0, r5
 8010b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8010b7e:	9b04      	ldr	r3, [sp, #16]
 8010b80:	4303      	orrs	r3, r0
 8010b82:	3701      	adds	r7, #1
 8010b84:	9304      	str	r3, [sp, #16]
 8010b86:	7839      	ldrb	r1, [r7, #0]
 8010b88:	4827      	ldr	r0, [pc, #156]	; (8010c28 <_svfiprintf_r+0x1e4>)
 8010b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b8e:	2206      	movs	r2, #6
 8010b90:	1c7e      	adds	r6, r7, #1
 8010b92:	f7ef fba5 	bl	80002e0 <memchr>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d038      	beq.n	8010c0c <_svfiprintf_r+0x1c8>
 8010b9a:	4b24      	ldr	r3, [pc, #144]	; (8010c2c <_svfiprintf_r+0x1e8>)
 8010b9c:	bb13      	cbnz	r3, 8010be4 <_svfiprintf_r+0x1a0>
 8010b9e:	9b03      	ldr	r3, [sp, #12]
 8010ba0:	3307      	adds	r3, #7
 8010ba2:	f023 0307 	bic.w	r3, r3, #7
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	9303      	str	r3, [sp, #12]
 8010baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bac:	444b      	add	r3, r9
 8010bae:	9309      	str	r3, [sp, #36]	; 0x24
 8010bb0:	e76d      	b.n	8010a8e <_svfiprintf_r+0x4a>
 8010bb2:	fb05 3202 	mla	r2, r5, r2, r3
 8010bb6:	2001      	movs	r0, #1
 8010bb8:	460f      	mov	r7, r1
 8010bba:	e7a6      	b.n	8010b0a <_svfiprintf_r+0xc6>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	3701      	adds	r7, #1
 8010bc0:	9305      	str	r3, [sp, #20]
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	250a      	movs	r5, #10
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bcc:	3a30      	subs	r2, #48	; 0x30
 8010bce:	2a09      	cmp	r2, #9
 8010bd0:	d903      	bls.n	8010bda <_svfiprintf_r+0x196>
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0c8      	beq.n	8010b68 <_svfiprintf_r+0x124>
 8010bd6:	9105      	str	r1, [sp, #20]
 8010bd8:	e7c6      	b.n	8010b68 <_svfiprintf_r+0x124>
 8010bda:	fb05 2101 	mla	r1, r5, r1, r2
 8010bde:	2301      	movs	r3, #1
 8010be0:	4607      	mov	r7, r0
 8010be2:	e7f0      	b.n	8010bc6 <_svfiprintf_r+0x182>
 8010be4:	ab03      	add	r3, sp, #12
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	4622      	mov	r2, r4
 8010bea:	4b11      	ldr	r3, [pc, #68]	; (8010c30 <_svfiprintf_r+0x1ec>)
 8010bec:	a904      	add	r1, sp, #16
 8010bee:	4640      	mov	r0, r8
 8010bf0:	f3af 8000 	nop.w
 8010bf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010bf8:	4681      	mov	r9, r0
 8010bfa:	d1d6      	bne.n	8010baa <_svfiprintf_r+0x166>
 8010bfc:	89a3      	ldrh	r3, [r4, #12]
 8010bfe:	065b      	lsls	r3, r3, #25
 8010c00:	f53f af35 	bmi.w	8010a6e <_svfiprintf_r+0x2a>
 8010c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c06:	b01d      	add	sp, #116	; 0x74
 8010c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0c:	ab03      	add	r3, sp, #12
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	4622      	mov	r2, r4
 8010c12:	4b07      	ldr	r3, [pc, #28]	; (8010c30 <_svfiprintf_r+0x1ec>)
 8010c14:	a904      	add	r1, sp, #16
 8010c16:	4640      	mov	r0, r8
 8010c18:	f000 f882 	bl	8010d20 <_printf_i>
 8010c1c:	e7ea      	b.n	8010bf4 <_svfiprintf_r+0x1b0>
 8010c1e:	bf00      	nop
 8010c20:	0801243c 	.word	0x0801243c
 8010c24:	08012442 	.word	0x08012442
 8010c28:	08012446 	.word	0x08012446
 8010c2c:	00000000 	.word	0x00000000
 8010c30:	08010991 	.word	0x08010991

08010c34 <_printf_common>:
 8010c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c38:	4691      	mov	r9, r2
 8010c3a:	461f      	mov	r7, r3
 8010c3c:	688a      	ldr	r2, [r1, #8]
 8010c3e:	690b      	ldr	r3, [r1, #16]
 8010c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	bfb8      	it	lt
 8010c48:	4613      	movlt	r3, r2
 8010c4a:	f8c9 3000 	str.w	r3, [r9]
 8010c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c52:	4606      	mov	r6, r0
 8010c54:	460c      	mov	r4, r1
 8010c56:	b112      	cbz	r2, 8010c5e <_printf_common+0x2a>
 8010c58:	3301      	adds	r3, #1
 8010c5a:	f8c9 3000 	str.w	r3, [r9]
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	0699      	lsls	r1, r3, #26
 8010c62:	bf42      	ittt	mi
 8010c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c68:	3302      	addmi	r3, #2
 8010c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8010c6e:	6825      	ldr	r5, [r4, #0]
 8010c70:	f015 0506 	ands.w	r5, r5, #6
 8010c74:	d107      	bne.n	8010c86 <_printf_common+0x52>
 8010c76:	f104 0a19 	add.w	sl, r4, #25
 8010c7a:	68e3      	ldr	r3, [r4, #12]
 8010c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	42ab      	cmp	r3, r5
 8010c84:	dc28      	bgt.n	8010cd8 <_printf_common+0xa4>
 8010c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c8a:	6822      	ldr	r2, [r4, #0]
 8010c8c:	3300      	adds	r3, #0
 8010c8e:	bf18      	it	ne
 8010c90:	2301      	movne	r3, #1
 8010c92:	0692      	lsls	r2, r2, #26
 8010c94:	d42d      	bmi.n	8010cf2 <_printf_common+0xbe>
 8010c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c9a:	4639      	mov	r1, r7
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	47c0      	blx	r8
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	d020      	beq.n	8010ce6 <_printf_common+0xb2>
 8010ca4:	6823      	ldr	r3, [r4, #0]
 8010ca6:	68e5      	ldr	r5, [r4, #12]
 8010ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8010cac:	f003 0306 	and.w	r3, r3, #6
 8010cb0:	2b04      	cmp	r3, #4
 8010cb2:	bf08      	it	eq
 8010cb4:	1aad      	subeq	r5, r5, r2
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	6922      	ldr	r2, [r4, #16]
 8010cba:	bf0c      	ite	eq
 8010cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cc0:	2500      	movne	r5, #0
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	bfc4      	itt	gt
 8010cc6:	1a9b      	subgt	r3, r3, r2
 8010cc8:	18ed      	addgt	r5, r5, r3
 8010cca:	f04f 0900 	mov.w	r9, #0
 8010cce:	341a      	adds	r4, #26
 8010cd0:	454d      	cmp	r5, r9
 8010cd2:	d11a      	bne.n	8010d0a <_printf_common+0xd6>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	e008      	b.n	8010cea <_printf_common+0xb6>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	4652      	mov	r2, sl
 8010cdc:	4639      	mov	r1, r7
 8010cde:	4630      	mov	r0, r6
 8010ce0:	47c0      	blx	r8
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	d103      	bne.n	8010cee <_printf_common+0xba>
 8010ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cee:	3501      	adds	r5, #1
 8010cf0:	e7c3      	b.n	8010c7a <_printf_common+0x46>
 8010cf2:	18e1      	adds	r1, r4, r3
 8010cf4:	1c5a      	adds	r2, r3, #1
 8010cf6:	2030      	movs	r0, #48	; 0x30
 8010cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cfc:	4422      	add	r2, r4
 8010cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d06:	3302      	adds	r3, #2
 8010d08:	e7c5      	b.n	8010c96 <_printf_common+0x62>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	4639      	mov	r1, r7
 8010d10:	4630      	mov	r0, r6
 8010d12:	47c0      	blx	r8
 8010d14:	3001      	adds	r0, #1
 8010d16:	d0e6      	beq.n	8010ce6 <_printf_common+0xb2>
 8010d18:	f109 0901 	add.w	r9, r9, #1
 8010d1c:	e7d8      	b.n	8010cd0 <_printf_common+0x9c>
	...

08010d20 <_printf_i>:
 8010d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010d28:	460c      	mov	r4, r1
 8010d2a:	7e09      	ldrb	r1, [r1, #24]
 8010d2c:	b085      	sub	sp, #20
 8010d2e:	296e      	cmp	r1, #110	; 0x6e
 8010d30:	4617      	mov	r7, r2
 8010d32:	4606      	mov	r6, r0
 8010d34:	4698      	mov	r8, r3
 8010d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d38:	f000 80b3 	beq.w	8010ea2 <_printf_i+0x182>
 8010d3c:	d822      	bhi.n	8010d84 <_printf_i+0x64>
 8010d3e:	2963      	cmp	r1, #99	; 0x63
 8010d40:	d036      	beq.n	8010db0 <_printf_i+0x90>
 8010d42:	d80a      	bhi.n	8010d5a <_printf_i+0x3a>
 8010d44:	2900      	cmp	r1, #0
 8010d46:	f000 80b9 	beq.w	8010ebc <_printf_i+0x19c>
 8010d4a:	2958      	cmp	r1, #88	; 0x58
 8010d4c:	f000 8083 	beq.w	8010e56 <_printf_i+0x136>
 8010d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d58:	e032      	b.n	8010dc0 <_printf_i+0xa0>
 8010d5a:	2964      	cmp	r1, #100	; 0x64
 8010d5c:	d001      	beq.n	8010d62 <_printf_i+0x42>
 8010d5e:	2969      	cmp	r1, #105	; 0x69
 8010d60:	d1f6      	bne.n	8010d50 <_printf_i+0x30>
 8010d62:	6820      	ldr	r0, [r4, #0]
 8010d64:	6813      	ldr	r3, [r2, #0]
 8010d66:	0605      	lsls	r5, r0, #24
 8010d68:	f103 0104 	add.w	r1, r3, #4
 8010d6c:	d52a      	bpl.n	8010dc4 <_printf_i+0xa4>
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6011      	str	r1, [r2, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	da03      	bge.n	8010d7e <_printf_i+0x5e>
 8010d76:	222d      	movs	r2, #45	; 0x2d
 8010d78:	425b      	negs	r3, r3
 8010d7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d7e:	486f      	ldr	r0, [pc, #444]	; (8010f3c <_printf_i+0x21c>)
 8010d80:	220a      	movs	r2, #10
 8010d82:	e039      	b.n	8010df8 <_printf_i+0xd8>
 8010d84:	2973      	cmp	r1, #115	; 0x73
 8010d86:	f000 809d 	beq.w	8010ec4 <_printf_i+0x1a4>
 8010d8a:	d808      	bhi.n	8010d9e <_printf_i+0x7e>
 8010d8c:	296f      	cmp	r1, #111	; 0x6f
 8010d8e:	d020      	beq.n	8010dd2 <_printf_i+0xb2>
 8010d90:	2970      	cmp	r1, #112	; 0x70
 8010d92:	d1dd      	bne.n	8010d50 <_printf_i+0x30>
 8010d94:	6823      	ldr	r3, [r4, #0]
 8010d96:	f043 0320 	orr.w	r3, r3, #32
 8010d9a:	6023      	str	r3, [r4, #0]
 8010d9c:	e003      	b.n	8010da6 <_printf_i+0x86>
 8010d9e:	2975      	cmp	r1, #117	; 0x75
 8010da0:	d017      	beq.n	8010dd2 <_printf_i+0xb2>
 8010da2:	2978      	cmp	r1, #120	; 0x78
 8010da4:	d1d4      	bne.n	8010d50 <_printf_i+0x30>
 8010da6:	2378      	movs	r3, #120	; 0x78
 8010da8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010dac:	4864      	ldr	r0, [pc, #400]	; (8010f40 <_printf_i+0x220>)
 8010dae:	e055      	b.n	8010e5c <_printf_i+0x13c>
 8010db0:	6813      	ldr	r3, [r2, #0]
 8010db2:	1d19      	adds	r1, r3, #4
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6011      	str	r1, [r2, #0]
 8010db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	e08c      	b.n	8010ede <_printf_i+0x1be>
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6011      	str	r1, [r2, #0]
 8010dc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dcc:	bf18      	it	ne
 8010dce:	b21b      	sxthne	r3, r3
 8010dd0:	e7cf      	b.n	8010d72 <_printf_i+0x52>
 8010dd2:	6813      	ldr	r3, [r2, #0]
 8010dd4:	6825      	ldr	r5, [r4, #0]
 8010dd6:	1d18      	adds	r0, r3, #4
 8010dd8:	6010      	str	r0, [r2, #0]
 8010dda:	0628      	lsls	r0, r5, #24
 8010ddc:	d501      	bpl.n	8010de2 <_printf_i+0xc2>
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	e002      	b.n	8010de8 <_printf_i+0xc8>
 8010de2:	0668      	lsls	r0, r5, #25
 8010de4:	d5fb      	bpl.n	8010dde <_printf_i+0xbe>
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	4854      	ldr	r0, [pc, #336]	; (8010f3c <_printf_i+0x21c>)
 8010dea:	296f      	cmp	r1, #111	; 0x6f
 8010dec:	bf14      	ite	ne
 8010dee:	220a      	movne	r2, #10
 8010df0:	2208      	moveq	r2, #8
 8010df2:	2100      	movs	r1, #0
 8010df4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010df8:	6865      	ldr	r5, [r4, #4]
 8010dfa:	60a5      	str	r5, [r4, #8]
 8010dfc:	2d00      	cmp	r5, #0
 8010dfe:	f2c0 8095 	blt.w	8010f2c <_printf_i+0x20c>
 8010e02:	6821      	ldr	r1, [r4, #0]
 8010e04:	f021 0104 	bic.w	r1, r1, #4
 8010e08:	6021      	str	r1, [r4, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d13d      	bne.n	8010e8a <_printf_i+0x16a>
 8010e0e:	2d00      	cmp	r5, #0
 8010e10:	f040 808e 	bne.w	8010f30 <_printf_i+0x210>
 8010e14:	4665      	mov	r5, ip
 8010e16:	2a08      	cmp	r2, #8
 8010e18:	d10b      	bne.n	8010e32 <_printf_i+0x112>
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	07db      	lsls	r3, r3, #31
 8010e1e:	d508      	bpl.n	8010e32 <_printf_i+0x112>
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	6862      	ldr	r2, [r4, #4]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	bfde      	ittt	le
 8010e28:	2330      	movle	r3, #48	; 0x30
 8010e2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e32:	ebac 0305 	sub.w	r3, ip, r5
 8010e36:	6123      	str	r3, [r4, #16]
 8010e38:	f8cd 8000 	str.w	r8, [sp]
 8010e3c:	463b      	mov	r3, r7
 8010e3e:	aa03      	add	r2, sp, #12
 8010e40:	4621      	mov	r1, r4
 8010e42:	4630      	mov	r0, r6
 8010e44:	f7ff fef6 	bl	8010c34 <_printf_common>
 8010e48:	3001      	adds	r0, #1
 8010e4a:	d14d      	bne.n	8010ee8 <_printf_i+0x1c8>
 8010e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e50:	b005      	add	sp, #20
 8010e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e56:	4839      	ldr	r0, [pc, #228]	; (8010f3c <_printf_i+0x21c>)
 8010e58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e5c:	6813      	ldr	r3, [r2, #0]
 8010e5e:	6821      	ldr	r1, [r4, #0]
 8010e60:	1d1d      	adds	r5, r3, #4
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6015      	str	r5, [r2, #0]
 8010e66:	060a      	lsls	r2, r1, #24
 8010e68:	d50b      	bpl.n	8010e82 <_printf_i+0x162>
 8010e6a:	07ca      	lsls	r2, r1, #31
 8010e6c:	bf44      	itt	mi
 8010e6e:	f041 0120 	orrmi.w	r1, r1, #32
 8010e72:	6021      	strmi	r1, [r4, #0]
 8010e74:	b91b      	cbnz	r3, 8010e7e <_printf_i+0x15e>
 8010e76:	6822      	ldr	r2, [r4, #0]
 8010e78:	f022 0220 	bic.w	r2, r2, #32
 8010e7c:	6022      	str	r2, [r4, #0]
 8010e7e:	2210      	movs	r2, #16
 8010e80:	e7b7      	b.n	8010df2 <_printf_i+0xd2>
 8010e82:	064d      	lsls	r5, r1, #25
 8010e84:	bf48      	it	mi
 8010e86:	b29b      	uxthmi	r3, r3
 8010e88:	e7ef      	b.n	8010e6a <_printf_i+0x14a>
 8010e8a:	4665      	mov	r5, ip
 8010e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e90:	fb02 3311 	mls	r3, r2, r1, r3
 8010e94:	5cc3      	ldrb	r3, [r0, r3]
 8010e96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	d1f5      	bne.n	8010e8c <_printf_i+0x16c>
 8010ea0:	e7b9      	b.n	8010e16 <_printf_i+0xf6>
 8010ea2:	6813      	ldr	r3, [r2, #0]
 8010ea4:	6825      	ldr	r5, [r4, #0]
 8010ea6:	6961      	ldr	r1, [r4, #20]
 8010ea8:	1d18      	adds	r0, r3, #4
 8010eaa:	6010      	str	r0, [r2, #0]
 8010eac:	0628      	lsls	r0, r5, #24
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	d501      	bpl.n	8010eb6 <_printf_i+0x196>
 8010eb2:	6019      	str	r1, [r3, #0]
 8010eb4:	e002      	b.n	8010ebc <_printf_i+0x19c>
 8010eb6:	066a      	lsls	r2, r5, #25
 8010eb8:	d5fb      	bpl.n	8010eb2 <_printf_i+0x192>
 8010eba:	8019      	strh	r1, [r3, #0]
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	6123      	str	r3, [r4, #16]
 8010ec0:	4665      	mov	r5, ip
 8010ec2:	e7b9      	b.n	8010e38 <_printf_i+0x118>
 8010ec4:	6813      	ldr	r3, [r2, #0]
 8010ec6:	1d19      	adds	r1, r3, #4
 8010ec8:	6011      	str	r1, [r2, #0]
 8010eca:	681d      	ldr	r5, [r3, #0]
 8010ecc:	6862      	ldr	r2, [r4, #4]
 8010ece:	2100      	movs	r1, #0
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f7ef fa05 	bl	80002e0 <memchr>
 8010ed6:	b108      	cbz	r0, 8010edc <_printf_i+0x1bc>
 8010ed8:	1b40      	subs	r0, r0, r5
 8010eda:	6060      	str	r0, [r4, #4]
 8010edc:	6863      	ldr	r3, [r4, #4]
 8010ede:	6123      	str	r3, [r4, #16]
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ee6:	e7a7      	b.n	8010e38 <_printf_i+0x118>
 8010ee8:	6923      	ldr	r3, [r4, #16]
 8010eea:	462a      	mov	r2, r5
 8010eec:	4639      	mov	r1, r7
 8010eee:	4630      	mov	r0, r6
 8010ef0:	47c0      	blx	r8
 8010ef2:	3001      	adds	r0, #1
 8010ef4:	d0aa      	beq.n	8010e4c <_printf_i+0x12c>
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	079b      	lsls	r3, r3, #30
 8010efa:	d413      	bmi.n	8010f24 <_printf_i+0x204>
 8010efc:	68e0      	ldr	r0, [r4, #12]
 8010efe:	9b03      	ldr	r3, [sp, #12]
 8010f00:	4298      	cmp	r0, r3
 8010f02:	bfb8      	it	lt
 8010f04:	4618      	movlt	r0, r3
 8010f06:	e7a3      	b.n	8010e50 <_printf_i+0x130>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	464a      	mov	r2, r9
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	4630      	mov	r0, r6
 8010f10:	47c0      	blx	r8
 8010f12:	3001      	adds	r0, #1
 8010f14:	d09a      	beq.n	8010e4c <_printf_i+0x12c>
 8010f16:	3501      	adds	r5, #1
 8010f18:	68e3      	ldr	r3, [r4, #12]
 8010f1a:	9a03      	ldr	r2, [sp, #12]
 8010f1c:	1a9b      	subs	r3, r3, r2
 8010f1e:	42ab      	cmp	r3, r5
 8010f20:	dcf2      	bgt.n	8010f08 <_printf_i+0x1e8>
 8010f22:	e7eb      	b.n	8010efc <_printf_i+0x1dc>
 8010f24:	2500      	movs	r5, #0
 8010f26:	f104 0919 	add.w	r9, r4, #25
 8010f2a:	e7f5      	b.n	8010f18 <_printf_i+0x1f8>
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1ac      	bne.n	8010e8a <_printf_i+0x16a>
 8010f30:	7803      	ldrb	r3, [r0, #0]
 8010f32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f3a:	e76c      	b.n	8010e16 <_printf_i+0xf6>
 8010f3c:	0801244d 	.word	0x0801244d
 8010f40:	0801245e 	.word	0x0801245e

08010f44 <memcpy>:
 8010f44:	b510      	push	{r4, lr}
 8010f46:	1e43      	subs	r3, r0, #1
 8010f48:	440a      	add	r2, r1
 8010f4a:	4291      	cmp	r1, r2
 8010f4c:	d100      	bne.n	8010f50 <memcpy+0xc>
 8010f4e:	bd10      	pop	{r4, pc}
 8010f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f58:	e7f7      	b.n	8010f4a <memcpy+0x6>

08010f5a <memmove>:
 8010f5a:	4288      	cmp	r0, r1
 8010f5c:	b510      	push	{r4, lr}
 8010f5e:	eb01 0302 	add.w	r3, r1, r2
 8010f62:	d807      	bhi.n	8010f74 <memmove+0x1a>
 8010f64:	1e42      	subs	r2, r0, #1
 8010f66:	4299      	cmp	r1, r3
 8010f68:	d00a      	beq.n	8010f80 <memmove+0x26>
 8010f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010f72:	e7f8      	b.n	8010f66 <memmove+0xc>
 8010f74:	4283      	cmp	r3, r0
 8010f76:	d9f5      	bls.n	8010f64 <memmove+0xa>
 8010f78:	1881      	adds	r1, r0, r2
 8010f7a:	1ad2      	subs	r2, r2, r3
 8010f7c:	42d3      	cmn	r3, r2
 8010f7e:	d100      	bne.n	8010f82 <memmove+0x28>
 8010f80:	bd10      	pop	{r4, pc}
 8010f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010f8a:	e7f7      	b.n	8010f7c <memmove+0x22>

08010f8c <_free_r>:
 8010f8c:	b538      	push	{r3, r4, r5, lr}
 8010f8e:	4605      	mov	r5, r0
 8010f90:	2900      	cmp	r1, #0
 8010f92:	d045      	beq.n	8011020 <_free_r+0x94>
 8010f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f98:	1f0c      	subs	r4, r1, #4
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	bfb8      	it	lt
 8010f9e:	18e4      	addlt	r4, r4, r3
 8010fa0:	f000 f8d2 	bl	8011148 <__malloc_lock>
 8010fa4:	4a1f      	ldr	r2, [pc, #124]	; (8011024 <_free_r+0x98>)
 8010fa6:	6813      	ldr	r3, [r2, #0]
 8010fa8:	4610      	mov	r0, r2
 8010faa:	b933      	cbnz	r3, 8010fba <_free_r+0x2e>
 8010fac:	6063      	str	r3, [r4, #4]
 8010fae:	6014      	str	r4, [r2, #0]
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fb6:	f000 b8c8 	b.w	801114a <__malloc_unlock>
 8010fba:	42a3      	cmp	r3, r4
 8010fbc:	d90c      	bls.n	8010fd8 <_free_r+0x4c>
 8010fbe:	6821      	ldr	r1, [r4, #0]
 8010fc0:	1862      	adds	r2, r4, r1
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	bf04      	itt	eq
 8010fc6:	681a      	ldreq	r2, [r3, #0]
 8010fc8:	685b      	ldreq	r3, [r3, #4]
 8010fca:	6063      	str	r3, [r4, #4]
 8010fcc:	bf04      	itt	eq
 8010fce:	1852      	addeq	r2, r2, r1
 8010fd0:	6022      	streq	r2, [r4, #0]
 8010fd2:	6004      	str	r4, [r0, #0]
 8010fd4:	e7ec      	b.n	8010fb0 <_free_r+0x24>
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	685a      	ldr	r2, [r3, #4]
 8010fda:	b10a      	cbz	r2, 8010fe0 <_free_r+0x54>
 8010fdc:	42a2      	cmp	r2, r4
 8010fde:	d9fa      	bls.n	8010fd6 <_free_r+0x4a>
 8010fe0:	6819      	ldr	r1, [r3, #0]
 8010fe2:	1858      	adds	r0, r3, r1
 8010fe4:	42a0      	cmp	r0, r4
 8010fe6:	d10b      	bne.n	8011000 <_free_r+0x74>
 8010fe8:	6820      	ldr	r0, [r4, #0]
 8010fea:	4401      	add	r1, r0
 8010fec:	1858      	adds	r0, r3, r1
 8010fee:	4282      	cmp	r2, r0
 8010ff0:	6019      	str	r1, [r3, #0]
 8010ff2:	d1dd      	bne.n	8010fb0 <_free_r+0x24>
 8010ff4:	6810      	ldr	r0, [r2, #0]
 8010ff6:	6852      	ldr	r2, [r2, #4]
 8010ff8:	605a      	str	r2, [r3, #4]
 8010ffa:	4401      	add	r1, r0
 8010ffc:	6019      	str	r1, [r3, #0]
 8010ffe:	e7d7      	b.n	8010fb0 <_free_r+0x24>
 8011000:	d902      	bls.n	8011008 <_free_r+0x7c>
 8011002:	230c      	movs	r3, #12
 8011004:	602b      	str	r3, [r5, #0]
 8011006:	e7d3      	b.n	8010fb0 <_free_r+0x24>
 8011008:	6820      	ldr	r0, [r4, #0]
 801100a:	1821      	adds	r1, r4, r0
 801100c:	428a      	cmp	r2, r1
 801100e:	bf04      	itt	eq
 8011010:	6811      	ldreq	r1, [r2, #0]
 8011012:	6852      	ldreq	r2, [r2, #4]
 8011014:	6062      	str	r2, [r4, #4]
 8011016:	bf04      	itt	eq
 8011018:	1809      	addeq	r1, r1, r0
 801101a:	6021      	streq	r1, [r4, #0]
 801101c:	605c      	str	r4, [r3, #4]
 801101e:	e7c7      	b.n	8010fb0 <_free_r+0x24>
 8011020:	bd38      	pop	{r3, r4, r5, pc}
 8011022:	bf00      	nop
 8011024:	240001e4 	.word	0x240001e4

08011028 <_malloc_r>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	1ccd      	adds	r5, r1, #3
 801102c:	f025 0503 	bic.w	r5, r5, #3
 8011030:	3508      	adds	r5, #8
 8011032:	2d0c      	cmp	r5, #12
 8011034:	bf38      	it	cc
 8011036:	250c      	movcc	r5, #12
 8011038:	2d00      	cmp	r5, #0
 801103a:	4606      	mov	r6, r0
 801103c:	db01      	blt.n	8011042 <_malloc_r+0x1a>
 801103e:	42a9      	cmp	r1, r5
 8011040:	d903      	bls.n	801104a <_malloc_r+0x22>
 8011042:	230c      	movs	r3, #12
 8011044:	6033      	str	r3, [r6, #0]
 8011046:	2000      	movs	r0, #0
 8011048:	bd70      	pop	{r4, r5, r6, pc}
 801104a:	f000 f87d 	bl	8011148 <__malloc_lock>
 801104e:	4a21      	ldr	r2, [pc, #132]	; (80110d4 <_malloc_r+0xac>)
 8011050:	6814      	ldr	r4, [r2, #0]
 8011052:	4621      	mov	r1, r4
 8011054:	b991      	cbnz	r1, 801107c <_malloc_r+0x54>
 8011056:	4c20      	ldr	r4, [pc, #128]	; (80110d8 <_malloc_r+0xb0>)
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	b91b      	cbnz	r3, 8011064 <_malloc_r+0x3c>
 801105c:	4630      	mov	r0, r6
 801105e:	f000 f863 	bl	8011128 <_sbrk_r>
 8011062:	6020      	str	r0, [r4, #0]
 8011064:	4629      	mov	r1, r5
 8011066:	4630      	mov	r0, r6
 8011068:	f000 f85e 	bl	8011128 <_sbrk_r>
 801106c:	1c43      	adds	r3, r0, #1
 801106e:	d124      	bne.n	80110ba <_malloc_r+0x92>
 8011070:	230c      	movs	r3, #12
 8011072:	6033      	str	r3, [r6, #0]
 8011074:	4630      	mov	r0, r6
 8011076:	f000 f868 	bl	801114a <__malloc_unlock>
 801107a:	e7e4      	b.n	8011046 <_malloc_r+0x1e>
 801107c:	680b      	ldr	r3, [r1, #0]
 801107e:	1b5b      	subs	r3, r3, r5
 8011080:	d418      	bmi.n	80110b4 <_malloc_r+0x8c>
 8011082:	2b0b      	cmp	r3, #11
 8011084:	d90f      	bls.n	80110a6 <_malloc_r+0x7e>
 8011086:	600b      	str	r3, [r1, #0]
 8011088:	50cd      	str	r5, [r1, r3]
 801108a:	18cc      	adds	r4, r1, r3
 801108c:	4630      	mov	r0, r6
 801108e:	f000 f85c 	bl	801114a <__malloc_unlock>
 8011092:	f104 000b 	add.w	r0, r4, #11
 8011096:	1d23      	adds	r3, r4, #4
 8011098:	f020 0007 	bic.w	r0, r0, #7
 801109c:	1ac3      	subs	r3, r0, r3
 801109e:	d0d3      	beq.n	8011048 <_malloc_r+0x20>
 80110a0:	425a      	negs	r2, r3
 80110a2:	50e2      	str	r2, [r4, r3]
 80110a4:	e7d0      	b.n	8011048 <_malloc_r+0x20>
 80110a6:	428c      	cmp	r4, r1
 80110a8:	684b      	ldr	r3, [r1, #4]
 80110aa:	bf16      	itet	ne
 80110ac:	6063      	strne	r3, [r4, #4]
 80110ae:	6013      	streq	r3, [r2, #0]
 80110b0:	460c      	movne	r4, r1
 80110b2:	e7eb      	b.n	801108c <_malloc_r+0x64>
 80110b4:	460c      	mov	r4, r1
 80110b6:	6849      	ldr	r1, [r1, #4]
 80110b8:	e7cc      	b.n	8011054 <_malloc_r+0x2c>
 80110ba:	1cc4      	adds	r4, r0, #3
 80110bc:	f024 0403 	bic.w	r4, r4, #3
 80110c0:	42a0      	cmp	r0, r4
 80110c2:	d005      	beq.n	80110d0 <_malloc_r+0xa8>
 80110c4:	1a21      	subs	r1, r4, r0
 80110c6:	4630      	mov	r0, r6
 80110c8:	f000 f82e 	bl	8011128 <_sbrk_r>
 80110cc:	3001      	adds	r0, #1
 80110ce:	d0cf      	beq.n	8011070 <_malloc_r+0x48>
 80110d0:	6025      	str	r5, [r4, #0]
 80110d2:	e7db      	b.n	801108c <_malloc_r+0x64>
 80110d4:	240001e4 	.word	0x240001e4
 80110d8:	240001e8 	.word	0x240001e8

080110dc <_realloc_r>:
 80110dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110de:	4607      	mov	r7, r0
 80110e0:	4614      	mov	r4, r2
 80110e2:	460e      	mov	r6, r1
 80110e4:	b921      	cbnz	r1, 80110f0 <_realloc_r+0x14>
 80110e6:	4611      	mov	r1, r2
 80110e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80110ec:	f7ff bf9c 	b.w	8011028 <_malloc_r>
 80110f0:	b922      	cbnz	r2, 80110fc <_realloc_r+0x20>
 80110f2:	f7ff ff4b 	bl	8010f8c <_free_r>
 80110f6:	4625      	mov	r5, r4
 80110f8:	4628      	mov	r0, r5
 80110fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110fc:	f000 f826 	bl	801114c <_malloc_usable_size_r>
 8011100:	42a0      	cmp	r0, r4
 8011102:	d20f      	bcs.n	8011124 <_realloc_r+0x48>
 8011104:	4621      	mov	r1, r4
 8011106:	4638      	mov	r0, r7
 8011108:	f7ff ff8e 	bl	8011028 <_malloc_r>
 801110c:	4605      	mov	r5, r0
 801110e:	2800      	cmp	r0, #0
 8011110:	d0f2      	beq.n	80110f8 <_realloc_r+0x1c>
 8011112:	4631      	mov	r1, r6
 8011114:	4622      	mov	r2, r4
 8011116:	f7ff ff15 	bl	8010f44 <memcpy>
 801111a:	4631      	mov	r1, r6
 801111c:	4638      	mov	r0, r7
 801111e:	f7ff ff35 	bl	8010f8c <_free_r>
 8011122:	e7e9      	b.n	80110f8 <_realloc_r+0x1c>
 8011124:	4635      	mov	r5, r6
 8011126:	e7e7      	b.n	80110f8 <_realloc_r+0x1c>

08011128 <_sbrk_r>:
 8011128:	b538      	push	{r3, r4, r5, lr}
 801112a:	4c06      	ldr	r4, [pc, #24]	; (8011144 <_sbrk_r+0x1c>)
 801112c:	2300      	movs	r3, #0
 801112e:	4605      	mov	r5, r0
 8011130:	4608      	mov	r0, r1
 8011132:	6023      	str	r3, [r4, #0]
 8011134:	f7f4 fa44 	bl	80055c0 <_sbrk>
 8011138:	1c43      	adds	r3, r0, #1
 801113a:	d102      	bne.n	8011142 <_sbrk_r+0x1a>
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	b103      	cbz	r3, 8011142 <_sbrk_r+0x1a>
 8011140:	602b      	str	r3, [r5, #0]
 8011142:	bd38      	pop	{r3, r4, r5, pc}
 8011144:	24000df0 	.word	0x24000df0

08011148 <__malloc_lock>:
 8011148:	4770      	bx	lr

0801114a <__malloc_unlock>:
 801114a:	4770      	bx	lr

0801114c <_malloc_usable_size_r>:
 801114c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011150:	1f18      	subs	r0, r3, #4
 8011152:	2b00      	cmp	r3, #0
 8011154:	bfbc      	itt	lt
 8011156:	580b      	ldrlt	r3, [r1, r0]
 8011158:	18c0      	addlt	r0, r0, r3
 801115a:	4770      	bx	lr
 801115c:	0000      	movs	r0, r0
	...

08011160 <cos>:
 8011160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011162:	eeb0 7b40 	vmov.f64	d7, d0
 8011166:	ee17 3a90 	vmov	r3, s15
 801116a:	4a19      	ldr	r2, [pc, #100]	; (80111d0 <cos+0x70>)
 801116c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011170:	4293      	cmp	r3, r2
 8011172:	dc04      	bgt.n	801117e <cos+0x1e>
 8011174:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80111c8 <cos+0x68>
 8011178:	f000 faa2 	bl	80116c0 <__kernel_cos>
 801117c:	e004      	b.n	8011188 <cos+0x28>
 801117e:	4a15      	ldr	r2, [pc, #84]	; (80111d4 <cos+0x74>)
 8011180:	4293      	cmp	r3, r2
 8011182:	dd04      	ble.n	801118e <cos+0x2e>
 8011184:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011188:	b005      	add	sp, #20
 801118a:	f85d fb04 	ldr.w	pc, [sp], #4
 801118e:	4668      	mov	r0, sp
 8011190:	f000 f956 	bl	8011440 <__ieee754_rem_pio2>
 8011194:	f000 0003 	and.w	r0, r0, #3
 8011198:	2801      	cmp	r0, #1
 801119a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801119e:	ed9d 0b00 	vldr	d0, [sp]
 80111a2:	d007      	beq.n	80111b4 <cos+0x54>
 80111a4:	2802      	cmp	r0, #2
 80111a6:	d00a      	beq.n	80111be <cos+0x5e>
 80111a8:	2800      	cmp	r0, #0
 80111aa:	d0e5      	beq.n	8011178 <cos+0x18>
 80111ac:	2001      	movs	r0, #1
 80111ae:	f000 fd8f 	bl	8011cd0 <__kernel_sin>
 80111b2:	e7e9      	b.n	8011188 <cos+0x28>
 80111b4:	f000 fd8c 	bl	8011cd0 <__kernel_sin>
 80111b8:	eeb1 0b40 	vneg.f64	d0, d0
 80111bc:	e7e4      	b.n	8011188 <cos+0x28>
 80111be:	f000 fa7f 	bl	80116c0 <__kernel_cos>
 80111c2:	e7f9      	b.n	80111b8 <cos+0x58>
 80111c4:	f3af 8000 	nop.w
	...
 80111d0:	3fe921fb 	.word	0x3fe921fb
 80111d4:	7fefffff 	.word	0x7fefffff

080111d8 <atan2>:
 80111d8:	f000 b84e 	b.w	8011278 <__ieee754_atan2>
 80111dc:	0000      	movs	r0, r0
	...

080111e0 <sqrt>:
 80111e0:	b500      	push	{lr}
 80111e2:	ed2d 8b02 	vpush	{d8}
 80111e6:	eeb0 8b40 	vmov.f64	d8, d0
 80111ea:	b08b      	sub	sp, #44	; 0x2c
 80111ec:	f000 fa64 	bl	80116b8 <__ieee754_sqrt>
 80111f0:	4b1f      	ldr	r3, [pc, #124]	; (8011270 <sqrt+0x90>)
 80111f2:	f993 3000 	ldrsb.w	r3, [r3]
 80111f6:	1c5a      	adds	r2, r3, #1
 80111f8:	d024      	beq.n	8011244 <sqrt+0x64>
 80111fa:	eeb4 8b48 	vcmp.f64	d8, d8
 80111fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011202:	d61f      	bvs.n	8011244 <sqrt+0x64>
 8011204:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8011268 <sqrt+0x88>
 8011208:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011210:	d518      	bpl.n	8011244 <sqrt+0x64>
 8011212:	2201      	movs	r2, #1
 8011214:	9200      	str	r2, [sp, #0]
 8011216:	4a17      	ldr	r2, [pc, #92]	; (8011274 <sqrt+0x94>)
 8011218:	9201      	str	r2, [sp, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	9208      	str	r2, [sp, #32]
 801121e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011222:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011226:	b993      	cbnz	r3, 801124e <sqrt+0x6e>
 8011228:	ed8d 7b06 	vstr	d7, [sp, #24]
 801122c:	4668      	mov	r0, sp
 801122e:	f000 ff23 	bl	8012078 <matherr>
 8011232:	b190      	cbz	r0, 801125a <sqrt+0x7a>
 8011234:	9b08      	ldr	r3, [sp, #32]
 8011236:	b11b      	cbz	r3, 8011240 <sqrt+0x60>
 8011238:	f7ff fb58 	bl	80108ec <__errno>
 801123c:	9b08      	ldr	r3, [sp, #32]
 801123e:	6003      	str	r3, [r0, #0]
 8011240:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011244:	b00b      	add	sp, #44	; 0x2c
 8011246:	ecbd 8b02 	vpop	{d8}
 801124a:	f85d fb04 	ldr.w	pc, [sp], #4
 801124e:	2b02      	cmp	r3, #2
 8011250:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8011254:	ed8d 6b06 	vstr	d6, [sp, #24]
 8011258:	d1e8      	bne.n	801122c <sqrt+0x4c>
 801125a:	f7ff fb47 	bl	80108ec <__errno>
 801125e:	2321      	movs	r3, #33	; 0x21
 8011260:	6003      	str	r3, [r0, #0]
 8011262:	e7e7      	b.n	8011234 <sqrt+0x54>
 8011264:	f3af 8000 	nop.w
	...
 8011270:	2400016c 	.word	0x2400016c
 8011274:	0801246f 	.word	0x0801246f

08011278 <__ieee754_atan2>:
 8011278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801127a:	ee11 6a10 	vmov	r6, s2
 801127e:	ee11 0a90 	vmov	r0, s3
 8011282:	4273      	negs	r3, r6
 8011284:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011288:	4333      	orrs	r3, r6
 801128a:	4f6b      	ldr	r7, [pc, #428]	; (8011438 <__ieee754_atan2+0x1c0>)
 801128c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011290:	42bb      	cmp	r3, r7
 8011292:	ed8d 0b00 	vstr	d0, [sp]
 8011296:	d80b      	bhi.n	80112b0 <__ieee754_atan2+0x38>
 8011298:	e9dd c500 	ldrd	ip, r5, [sp]
 801129c:	f1cc 0100 	rsb	r1, ip, #0
 80112a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80112a4:	ea41 010c 	orr.w	r1, r1, ip
 80112a8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80112ac:	42b9      	cmp	r1, r7
 80112ae:	d906      	bls.n	80112be <__ieee754_atan2+0x46>
 80112b0:	ed9d 7b00 	vldr	d7, [sp]
 80112b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80112b8:	ed8d 7b00 	vstr	d7, [sp]
 80112bc:	e063      	b.n	8011386 <__ieee754_atan2+0x10e>
 80112be:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80112c2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80112c6:	4331      	orrs	r1, r6
 80112c8:	d104      	bne.n	80112d4 <__ieee754_atan2+0x5c>
 80112ca:	b003      	add	sp, #12
 80112cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80112d0:	f000 bd56 	b.w	8011d80 <atan>
 80112d4:	1784      	asrs	r4, r0, #30
 80112d6:	f004 0402 	and.w	r4, r4, #2
 80112da:	ea53 010c 	orrs.w	r1, r3, ip
 80112de:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80112e2:	d109      	bne.n	80112f8 <__ieee754_atan2+0x80>
 80112e4:	2c02      	cmp	r4, #2
 80112e6:	d078      	beq.n	80113da <__ieee754_atan2+0x162>
 80112e8:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 80113e0 <__ieee754_atan2+0x168>
 80112ec:	ed9d 6b00 	vldr	d6, [sp]
 80112f0:	2c03      	cmp	r4, #3
 80112f2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80112f6:	e7df      	b.n	80112b8 <__ieee754_atan2+0x40>
 80112f8:	ea52 0106 	orrs.w	r1, r2, r6
 80112fc:	d107      	bne.n	801130e <__ieee754_atan2+0x96>
 80112fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80113e8 <__ieee754_atan2+0x170>
 8011302:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80113f0 <__ieee754_atan2+0x178>
 8011306:	2d00      	cmp	r5, #0
 8011308:	fe26 7b07 	vselge.f64	d7, d6, d7
 801130c:	e7d4      	b.n	80112b8 <__ieee754_atan2+0x40>
 801130e:	42ba      	cmp	r2, r7
 8011310:	d120      	bne.n	8011354 <__ieee754_atan2+0xdc>
 8011312:	4293      	cmp	r3, r2
 8011314:	d111      	bne.n	801133a <__ieee754_atan2+0xc2>
 8011316:	2c02      	cmp	r4, #2
 8011318:	d009      	beq.n	801132e <__ieee754_atan2+0xb6>
 801131a:	2c03      	cmp	r4, #3
 801131c:	d00a      	beq.n	8011334 <__ieee754_atan2+0xbc>
 801131e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80113f8 <__ieee754_atan2+0x180>
 8011322:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8011400 <__ieee754_atan2+0x188>
 8011326:	2c01      	cmp	r4, #1
 8011328:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801132c:	e7c4      	b.n	80112b8 <__ieee754_atan2+0x40>
 801132e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8011408 <__ieee754_atan2+0x190>
 8011332:	e7c1      	b.n	80112b8 <__ieee754_atan2+0x40>
 8011334:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8011410 <__ieee754_atan2+0x198>
 8011338:	e7be      	b.n	80112b8 <__ieee754_atan2+0x40>
 801133a:	2c02      	cmp	r4, #2
 801133c:	d04d      	beq.n	80113da <__ieee754_atan2+0x162>
 801133e:	2c03      	cmp	r4, #3
 8011340:	d005      	beq.n	801134e <__ieee754_atan2+0xd6>
 8011342:	2c01      	cmp	r4, #1
 8011344:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8011418 <__ieee754_atan2+0x1a0>
 8011348:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011420 <__ieee754_atan2+0x1a8>
 801134c:	e7ec      	b.n	8011328 <__ieee754_atan2+0xb0>
 801134e:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80113e0 <__ieee754_atan2+0x168>
 8011352:	e7b1      	b.n	80112b8 <__ieee754_atan2+0x40>
 8011354:	42bb      	cmp	r3, r7
 8011356:	d0d2      	beq.n	80112fe <__ieee754_atan2+0x86>
 8011358:	1a9b      	subs	r3, r3, r2
 801135a:	151b      	asrs	r3, r3, #20
 801135c:	2b3c      	cmp	r3, #60	; 0x3c
 801135e:	dc16      	bgt.n	801138e <__ieee754_atan2+0x116>
 8011360:	2800      	cmp	r0, #0
 8011362:	da01      	bge.n	8011368 <__ieee754_atan2+0xf0>
 8011364:	333c      	adds	r3, #60	; 0x3c
 8011366:	db17      	blt.n	8011398 <__ieee754_atan2+0x120>
 8011368:	ed9d 7b00 	vldr	d7, [sp]
 801136c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8011370:	f000 fe00 	bl	8011f74 <fabs>
 8011374:	f000 fd04 	bl	8011d80 <atan>
 8011378:	ed8d 0b00 	vstr	d0, [sp]
 801137c:	2c01      	cmp	r4, #1
 801137e:	d00e      	beq.n	801139e <__ieee754_atan2+0x126>
 8011380:	2c02      	cmp	r4, #2
 8011382:	d014      	beq.n	80113ae <__ieee754_atan2+0x136>
 8011384:	b9f4      	cbnz	r4, 80113c4 <__ieee754_atan2+0x14c>
 8011386:	ed9d 0b00 	vldr	d0, [sp]
 801138a:	b003      	add	sp, #12
 801138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801138e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80113e8 <__ieee754_atan2+0x170>
 8011392:	ed8d 7b00 	vstr	d7, [sp]
 8011396:	e7f1      	b.n	801137c <__ieee754_atan2+0x104>
 8011398:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011420 <__ieee754_atan2+0x1a8>
 801139c:	e7f9      	b.n	8011392 <__ieee754_atan2+0x11a>
 801139e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113a2:	9901      	ldr	r1, [sp, #4]
 80113a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113a8:	e9cd 2300 	strd	r2, r3, [sp]
 80113ac:	e7eb      	b.n	8011386 <__ieee754_atan2+0x10e>
 80113ae:	ed9d 6b00 	vldr	d6, [sp]
 80113b2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8011428 <__ieee754_atan2+0x1b0>
 80113b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80113ba:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8011430 <__ieee754_atan2+0x1b8>
 80113be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80113c2:	e779      	b.n	80112b8 <__ieee754_atan2+0x40>
 80113c4:	ed9d 6b00 	vldr	d6, [sp]
 80113c8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8011428 <__ieee754_atan2+0x1b0>
 80113cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80113d0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8011430 <__ieee754_atan2+0x1b8>
 80113d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113d8:	e76e      	b.n	80112b8 <__ieee754_atan2+0x40>
 80113da:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011430 <__ieee754_atan2+0x1b8>
 80113de:	e76b      	b.n	80112b8 <__ieee754_atan2+0x40>
 80113e0:	54442d18 	.word	0x54442d18
 80113e4:	c00921fb 	.word	0xc00921fb
 80113e8:	54442d18 	.word	0x54442d18
 80113ec:	3ff921fb 	.word	0x3ff921fb
 80113f0:	54442d18 	.word	0x54442d18
 80113f4:	bff921fb 	.word	0xbff921fb
 80113f8:	54442d18 	.word	0x54442d18
 80113fc:	bfe921fb 	.word	0xbfe921fb
 8011400:	54442d18 	.word	0x54442d18
 8011404:	3fe921fb 	.word	0x3fe921fb
 8011408:	7f3321d2 	.word	0x7f3321d2
 801140c:	4002d97c 	.word	0x4002d97c
 8011410:	7f3321d2 	.word	0x7f3321d2
 8011414:	c002d97c 	.word	0xc002d97c
 8011418:	00000000 	.word	0x00000000
 801141c:	80000000 	.word	0x80000000
	...
 8011428:	33145c07 	.word	0x33145c07
 801142c:	3ca1a626 	.word	0x3ca1a626
 8011430:	54442d18 	.word	0x54442d18
 8011434:	400921fb 	.word	0x400921fb
 8011438:	7ff00000 	.word	0x7ff00000
 801143c:	00000000 	.word	0x00000000

08011440 <__ieee754_rem_pio2>:
 8011440:	b570      	push	{r4, r5, r6, lr}
 8011442:	eeb0 7b40 	vmov.f64	d7, d0
 8011446:	ee17 5a90 	vmov	r5, s15
 801144a:	4b95      	ldr	r3, [pc, #596]	; (80116a0 <__ieee754_rem_pio2+0x260>)
 801144c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011450:	429e      	cmp	r6, r3
 8011452:	b088      	sub	sp, #32
 8011454:	4604      	mov	r4, r0
 8011456:	dc07      	bgt.n	8011468 <__ieee754_rem_pio2+0x28>
 8011458:	2200      	movs	r2, #0
 801145a:	2300      	movs	r3, #0
 801145c:	ed84 0b00 	vstr	d0, [r4]
 8011460:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011464:	2000      	movs	r0, #0
 8011466:	e01b      	b.n	80114a0 <__ieee754_rem_pio2+0x60>
 8011468:	4b8e      	ldr	r3, [pc, #568]	; (80116a4 <__ieee754_rem_pio2+0x264>)
 801146a:	429e      	cmp	r6, r3
 801146c:	dc3b      	bgt.n	80114e6 <__ieee754_rem_pio2+0xa6>
 801146e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011472:	2d00      	cmp	r5, #0
 8011474:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011660 <__ieee754_rem_pio2+0x220>
 8011478:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801147c:	dd19      	ble.n	80114b2 <__ieee754_rem_pio2+0x72>
 801147e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011482:	429e      	cmp	r6, r3
 8011484:	d00e      	beq.n	80114a4 <__ieee754_rem_pio2+0x64>
 8011486:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8011668 <__ieee754_rem_pio2+0x228>
 801148a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801148e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011492:	ed84 5b00 	vstr	d5, [r4]
 8011496:	ee37 7b46 	vsub.f64	d7, d7, d6
 801149a:	ed84 7b02 	vstr	d7, [r4, #8]
 801149e:	2001      	movs	r0, #1
 80114a0:	b008      	add	sp, #32
 80114a2:	bd70      	pop	{r4, r5, r6, pc}
 80114a4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8011670 <__ieee754_rem_pio2+0x230>
 80114a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114ac:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8011678 <__ieee754_rem_pio2+0x238>
 80114b0:	e7eb      	b.n	801148a <__ieee754_rem_pio2+0x4a>
 80114b2:	429e      	cmp	r6, r3
 80114b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80114b8:	d00e      	beq.n	80114d8 <__ieee754_rem_pio2+0x98>
 80114ba:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8011668 <__ieee754_rem_pio2+0x228>
 80114be:	ee37 5b06 	vadd.f64	d5, d7, d6
 80114c2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80114c6:	ed84 5b00 	vstr	d5, [r4]
 80114ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80114ce:	f04f 30ff 	mov.w	r0, #4294967295
 80114d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80114d6:	e7e3      	b.n	80114a0 <__ieee754_rem_pio2+0x60>
 80114d8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8011670 <__ieee754_rem_pio2+0x230>
 80114dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80114e0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8011678 <__ieee754_rem_pio2+0x238>
 80114e4:	e7eb      	b.n	80114be <__ieee754_rem_pio2+0x7e>
 80114e6:	4b70      	ldr	r3, [pc, #448]	; (80116a8 <__ieee754_rem_pio2+0x268>)
 80114e8:	429e      	cmp	r6, r3
 80114ea:	dc6c      	bgt.n	80115c6 <__ieee754_rem_pio2+0x186>
 80114ec:	f000 fd42 	bl	8011f74 <fabs>
 80114f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80114f4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8011680 <__ieee754_rem_pio2+0x240>
 80114f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80114fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011500:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011504:	ee17 0a90 	vmov	r0, s15
 8011508:	eeb1 5b44 	vneg.f64	d5, d4
 801150c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8011660 <__ieee754_rem_pio2+0x220>
 8011510:	eea5 0b07 	vfma.f64	d0, d5, d7
 8011514:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8011668 <__ieee754_rem_pio2+0x228>
 8011518:	281f      	cmp	r0, #31
 801151a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801151e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011522:	dc08      	bgt.n	8011536 <__ieee754_rem_pio2+0xf6>
 8011524:	1e42      	subs	r2, r0, #1
 8011526:	4b61      	ldr	r3, [pc, #388]	; (80116ac <__ieee754_rem_pio2+0x26c>)
 8011528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801152c:	42b3      	cmp	r3, r6
 801152e:	d002      	beq.n	8011536 <__ieee754_rem_pio2+0xf6>
 8011530:	ed84 6b00 	vstr	d6, [r4]
 8011534:	e022      	b.n	801157c <__ieee754_rem_pio2+0x13c>
 8011536:	ee16 3a90 	vmov	r3, s13
 801153a:	1536      	asrs	r6, r6, #20
 801153c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011540:	1af3      	subs	r3, r6, r3
 8011542:	2b10      	cmp	r3, #16
 8011544:	ddf4      	ble.n	8011530 <__ieee754_rem_pio2+0xf0>
 8011546:	eeb0 6b40 	vmov.f64	d6, d0
 801154a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8011670 <__ieee754_rem_pio2+0x230>
 801154e:	eea5 6b03 	vfma.f64	d6, d5, d3
 8011552:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011556:	eea5 7b03 	vfma.f64	d7, d5, d3
 801155a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8011678 <__ieee754_rem_pio2+0x238>
 801155e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8011562:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011566:	ee13 3a90 	vmov	r3, s7
 801156a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801156e:	1af6      	subs	r6, r6, r3
 8011570:	2e31      	cmp	r6, #49	; 0x31
 8011572:	dc17      	bgt.n	80115a4 <__ieee754_rem_pio2+0x164>
 8011574:	eeb0 0b46 	vmov.f64	d0, d6
 8011578:	ed84 3b00 	vstr	d3, [r4]
 801157c:	ed94 6b00 	vldr	d6, [r4]
 8011580:	2d00      	cmp	r5, #0
 8011582:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011586:	ee30 7b47 	vsub.f64	d7, d0, d7
 801158a:	ed84 7b02 	vstr	d7, [r4, #8]
 801158e:	da87      	bge.n	80114a0 <__ieee754_rem_pio2+0x60>
 8011590:	eeb1 6b46 	vneg.f64	d6, d6
 8011594:	ed84 6b00 	vstr	d6, [r4]
 8011598:	eeb1 7b47 	vneg.f64	d7, d7
 801159c:	4240      	negs	r0, r0
 801159e:	ed84 7b02 	vstr	d7, [r4, #8]
 80115a2:	e77d      	b.n	80114a0 <__ieee754_rem_pio2+0x60>
 80115a4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8011688 <__ieee754_rem_pio2+0x248>
 80115a8:	eeb0 0b46 	vmov.f64	d0, d6
 80115ac:	eea5 0b03 	vfma.f64	d0, d5, d3
 80115b0:	ee36 7b40 	vsub.f64	d7, d6, d0
 80115b4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8011690 <__ieee754_rem_pio2+0x250>
 80115b8:	eea5 7b03 	vfma.f64	d7, d5, d3
 80115bc:	ee94 7b06 	vfnms.f64	d7, d4, d6
 80115c0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80115c4:	e7b4      	b.n	8011530 <__ieee754_rem_pio2+0xf0>
 80115c6:	4b3a      	ldr	r3, [pc, #232]	; (80116b0 <__ieee754_rem_pio2+0x270>)
 80115c8:	429e      	cmp	r6, r3
 80115ca:	dd06      	ble.n	80115da <__ieee754_rem_pio2+0x19a>
 80115cc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80115d0:	ed80 7b02 	vstr	d7, [r0, #8]
 80115d4:	ed80 7b00 	vstr	d7, [r0]
 80115d8:	e744      	b.n	8011464 <__ieee754_rem_pio2+0x24>
 80115da:	1532      	asrs	r2, r6, #20
 80115dc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80115e0:	ee10 0a10 	vmov	r0, s0
 80115e4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80115e8:	ec41 0b17 	vmov	d7, r0, r1
 80115ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80115f0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8011698 <__ieee754_rem_pio2+0x258>
 80115f4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80115f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011600:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011604:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011608:	a908      	add	r1, sp, #32
 801160a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801160e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011612:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011616:	ee27 7b05 	vmul.f64	d7, d7, d5
 801161a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801161e:	2303      	movs	r3, #3
 8011620:	ed31 7b02 	vldmdb	r1!, {d7}
 8011624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162c:	f103 30ff 	add.w	r0, r3, #4294967295
 8011630:	d013      	beq.n	801165a <__ieee754_rem_pio2+0x21a>
 8011632:	4920      	ldr	r1, [pc, #128]	; (80116b4 <__ieee754_rem_pio2+0x274>)
 8011634:	9101      	str	r1, [sp, #4]
 8011636:	2102      	movs	r1, #2
 8011638:	9100      	str	r1, [sp, #0]
 801163a:	a802      	add	r0, sp, #8
 801163c:	4621      	mov	r1, r4
 801163e:	f000 f8ab 	bl	8011798 <__kernel_rem_pio2>
 8011642:	2d00      	cmp	r5, #0
 8011644:	f6bf af2c 	bge.w	80114a0 <__ieee754_rem_pio2+0x60>
 8011648:	ed94 7b00 	vldr	d7, [r4]
 801164c:	eeb1 7b47 	vneg.f64	d7, d7
 8011650:	ed84 7b00 	vstr	d7, [r4]
 8011654:	ed94 7b02 	vldr	d7, [r4, #8]
 8011658:	e79e      	b.n	8011598 <__ieee754_rem_pio2+0x158>
 801165a:	4603      	mov	r3, r0
 801165c:	e7e0      	b.n	8011620 <__ieee754_rem_pio2+0x1e0>
 801165e:	bf00      	nop
 8011660:	54400000 	.word	0x54400000
 8011664:	3ff921fb 	.word	0x3ff921fb
 8011668:	1a626331 	.word	0x1a626331
 801166c:	3dd0b461 	.word	0x3dd0b461
 8011670:	1a600000 	.word	0x1a600000
 8011674:	3dd0b461 	.word	0x3dd0b461
 8011678:	2e037073 	.word	0x2e037073
 801167c:	3ba3198a 	.word	0x3ba3198a
 8011680:	6dc9c883 	.word	0x6dc9c883
 8011684:	3fe45f30 	.word	0x3fe45f30
 8011688:	2e000000 	.word	0x2e000000
 801168c:	3ba3198a 	.word	0x3ba3198a
 8011690:	252049c1 	.word	0x252049c1
 8011694:	397b839a 	.word	0x397b839a
 8011698:	00000000 	.word	0x00000000
 801169c:	41700000 	.word	0x41700000
 80116a0:	3fe921fb 	.word	0x3fe921fb
 80116a4:	4002d97b 	.word	0x4002d97b
 80116a8:	413921fb 	.word	0x413921fb
 80116ac:	08012474 	.word	0x08012474
 80116b0:	7fefffff 	.word	0x7fefffff
 80116b4:	080124f4 	.word	0x080124f4

080116b8 <__ieee754_sqrt>:
 80116b8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80116bc:	4770      	bx	lr
	...

080116c0 <__kernel_cos>:
 80116c0:	ee10 1a90 	vmov	r1, s1
 80116c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80116c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80116cc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80116d0:	da05      	bge.n	80116de <__kernel_cos+0x1e>
 80116d2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80116d6:	ee16 3a90 	vmov	r3, s13
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d03d      	beq.n	801175a <__kernel_cos+0x9a>
 80116de:	ee20 4b00 	vmul.f64	d4, d0, d0
 80116e2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80116e6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8011760 <__kernel_cos+0xa0>
 80116ea:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80116ee:	ee24 6b06 	vmul.f64	d6, d4, d6
 80116f2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8011768 <__kernel_cos+0xa8>
 80116f6:	eea4 5b03 	vfma.f64	d5, d4, d3
 80116fa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8011770 <__kernel_cos+0xb0>
 80116fe:	eea5 3b04 	vfma.f64	d3, d5, d4
 8011702:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8011778 <__kernel_cos+0xb8>
 8011706:	eea3 5b04 	vfma.f64	d5, d3, d4
 801170a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8011780 <__kernel_cos+0xc0>
 801170e:	4b20      	ldr	r3, [pc, #128]	; (8011790 <__kernel_cos+0xd0>)
 8011710:	eea5 3b04 	vfma.f64	d3, d5, d4
 8011714:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8011788 <__kernel_cos+0xc8>
 8011718:	4299      	cmp	r1, r3
 801171a:	eea3 5b04 	vfma.f64	d5, d3, d4
 801171e:	ee25 5b04 	vmul.f64	d5, d5, d4
 8011722:	eea4 1b05 	vfma.f64	d1, d4, d5
 8011726:	dc04      	bgt.n	8011732 <__kernel_cos+0x72>
 8011728:	ee36 6b41 	vsub.f64	d6, d6, d1
 801172c:	ee37 0b46 	vsub.f64	d0, d7, d6
 8011730:	4770      	bx	lr
 8011732:	4b18      	ldr	r3, [pc, #96]	; (8011794 <__kernel_cos+0xd4>)
 8011734:	4299      	cmp	r1, r3
 8011736:	dc0d      	bgt.n	8011754 <__kernel_cos+0x94>
 8011738:	2200      	movs	r2, #0
 801173a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801173e:	ec43 2b15 	vmov	d5, r2, r3
 8011742:	ee37 0b45 	vsub.f64	d0, d7, d5
 8011746:	ee36 6b45 	vsub.f64	d6, d6, d5
 801174a:	ee36 6b41 	vsub.f64	d6, d6, d1
 801174e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011752:	4770      	bx	lr
 8011754:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011758:	e7f3      	b.n	8011742 <__kernel_cos+0x82>
 801175a:	eeb0 0b47 	vmov.f64	d0, d7
 801175e:	4770      	bx	lr
 8011760:	be8838d4 	.word	0xbe8838d4
 8011764:	bda8fae9 	.word	0xbda8fae9
 8011768:	bdb4b1c4 	.word	0xbdb4b1c4
 801176c:	3e21ee9e 	.word	0x3e21ee9e
 8011770:	809c52ad 	.word	0x809c52ad
 8011774:	be927e4f 	.word	0xbe927e4f
 8011778:	19cb1590 	.word	0x19cb1590
 801177c:	3efa01a0 	.word	0x3efa01a0
 8011780:	16c15177 	.word	0x16c15177
 8011784:	bf56c16c 	.word	0xbf56c16c
 8011788:	5555554c 	.word	0x5555554c
 801178c:	3fa55555 	.word	0x3fa55555
 8011790:	3fd33332 	.word	0x3fd33332
 8011794:	3fe90000 	.word	0x3fe90000

08011798 <__kernel_rem_pio2>:
 8011798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179c:	ed2d 8b06 	vpush	{d8-d10}
 80117a0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80117a4:	469b      	mov	fp, r3
 80117a6:	460e      	mov	r6, r1
 80117a8:	4bc7      	ldr	r3, [pc, #796]	; (8011ac8 <__kernel_rem_pio2+0x330>)
 80117aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80117ac:	9002      	str	r0, [sp, #8]
 80117ae:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80117b2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 80117b4:	1ed1      	subs	r1, r2, #3
 80117b6:	2318      	movs	r3, #24
 80117b8:	f06f 0417 	mvn.w	r4, #23
 80117bc:	fb91 f1f3 	sdiv	r1, r1, r3
 80117c0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80117c4:	f10b 3aff 	add.w	sl, fp, #4294967295
 80117c8:	fb01 4404 	mla	r4, r1, r4, r4
 80117cc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8011ab0 <__kernel_rem_pio2+0x318>
 80117d0:	4414      	add	r4, r2
 80117d2:	eba1 050a 	sub.w	r5, r1, sl
 80117d6:	aa1a      	add	r2, sp, #104	; 0x68
 80117d8:	eb09 070a 	add.w	r7, r9, sl
 80117dc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80117e0:	4696      	mov	lr, r2
 80117e2:	2300      	movs	r3, #0
 80117e4:	42bb      	cmp	r3, r7
 80117e6:	dd0f      	ble.n	8011808 <__kernel_rem_pio2+0x70>
 80117e8:	af6a      	add	r7, sp, #424	; 0x1a8
 80117ea:	2200      	movs	r2, #0
 80117ec:	454a      	cmp	r2, r9
 80117ee:	dc28      	bgt.n	8011842 <__kernel_rem_pio2+0xaa>
 80117f0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80117f4:	eb0b 0302 	add.w	r3, fp, r2
 80117f8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 80117fc:	9d02      	ldr	r5, [sp, #8]
 80117fe:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8011ab0 <__kernel_rem_pio2+0x318>
 8011802:	f04f 0c00 	mov.w	ip, #0
 8011806:	e016      	b.n	8011836 <__kernel_rem_pio2+0x9e>
 8011808:	42dd      	cmn	r5, r3
 801180a:	d409      	bmi.n	8011820 <__kernel_rem_pio2+0x88>
 801180c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011810:	ee07 2a90 	vmov	s15, r2
 8011814:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011818:	ecae 7b02 	vstmia	lr!, {d7}
 801181c:	3301      	adds	r3, #1
 801181e:	e7e1      	b.n	80117e4 <__kernel_rem_pio2+0x4c>
 8011820:	eeb0 7b46 	vmov.f64	d7, d6
 8011824:	e7f8      	b.n	8011818 <__kernel_rem_pio2+0x80>
 8011826:	ecb5 5b02 	vldmia	r5!, {d5}
 801182a:	ed33 6b02 	vldmdb	r3!, {d6}
 801182e:	f10c 0c01 	add.w	ip, ip, #1
 8011832:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011836:	45d4      	cmp	ip, sl
 8011838:	ddf5      	ble.n	8011826 <__kernel_rem_pio2+0x8e>
 801183a:	eca7 7b02 	vstmia	r7!, {d7}
 801183e:	3201      	adds	r2, #1
 8011840:	e7d4      	b.n	80117ec <__kernel_rem_pio2+0x54>
 8011842:	ab06      	add	r3, sp, #24
 8011844:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011848:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8011ab8 <__kernel_rem_pio2+0x320>
 801184c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8011ac0 <__kernel_rem_pio2+0x328>
 8011850:	9304      	str	r3, [sp, #16]
 8011852:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8011856:	9303      	str	r3, [sp, #12]
 8011858:	464d      	mov	r5, r9
 801185a:	ab92      	add	r3, sp, #584	; 0x248
 801185c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8011860:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011864:	3f01      	subs	r7, #1
 8011866:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801186a:	00ff      	lsls	r7, r7, #3
 801186c:	ab92      	add	r3, sp, #584	; 0x248
 801186e:	19da      	adds	r2, r3, r7
 8011870:	3a98      	subs	r2, #152	; 0x98
 8011872:	2300      	movs	r3, #0
 8011874:	1ae9      	subs	r1, r5, r3
 8011876:	2900      	cmp	r1, #0
 8011878:	dc4e      	bgt.n	8011918 <__kernel_rem_pio2+0x180>
 801187a:	4620      	mov	r0, r4
 801187c:	f000 fc00 	bl	8012080 <scalbn>
 8011880:	eeb0 8b40 	vmov.f64	d8, d0
 8011884:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011888:	ee28 0b00 	vmul.f64	d0, d8, d0
 801188c:	f000 fb7c 	bl	8011f88 <floor>
 8011890:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011894:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011898:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801189c:	2c00      	cmp	r4, #0
 801189e:	edcd 7a01 	vstr	s15, [sp, #4]
 80118a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118a6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80118aa:	dd4a      	ble.n	8011942 <__kernel_rem_pio2+0x1aa>
 80118ac:	1e69      	subs	r1, r5, #1
 80118ae:	ab06      	add	r3, sp, #24
 80118b0:	f1c4 0018 	rsb	r0, r4, #24
 80118b4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80118b8:	9a01      	ldr	r2, [sp, #4]
 80118ba:	fa4c f300 	asr.w	r3, ip, r0
 80118be:	441a      	add	r2, r3
 80118c0:	4083      	lsls	r3, r0
 80118c2:	9201      	str	r2, [sp, #4]
 80118c4:	ebac 0203 	sub.w	r2, ip, r3
 80118c8:	ab06      	add	r3, sp, #24
 80118ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80118ce:	f1c4 0317 	rsb	r3, r4, #23
 80118d2:	fa42 f803 	asr.w	r8, r2, r3
 80118d6:	f1b8 0f00 	cmp.w	r8, #0
 80118da:	dd43      	ble.n	8011964 <__kernel_rem_pio2+0x1cc>
 80118dc:	9b01      	ldr	r3, [sp, #4]
 80118de:	2000      	movs	r0, #0
 80118e0:	3301      	adds	r3, #1
 80118e2:	9301      	str	r3, [sp, #4]
 80118e4:	4601      	mov	r1, r0
 80118e6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 80118ea:	4285      	cmp	r5, r0
 80118ec:	dc6e      	bgt.n	80119cc <__kernel_rem_pio2+0x234>
 80118ee:	2c00      	cmp	r4, #0
 80118f0:	dd04      	ble.n	80118fc <__kernel_rem_pio2+0x164>
 80118f2:	2c01      	cmp	r4, #1
 80118f4:	d07f      	beq.n	80119f6 <__kernel_rem_pio2+0x25e>
 80118f6:	2c02      	cmp	r4, #2
 80118f8:	f000 8087 	beq.w	8011a0a <__kernel_rem_pio2+0x272>
 80118fc:	f1b8 0f02 	cmp.w	r8, #2
 8011900:	d130      	bne.n	8011964 <__kernel_rem_pio2+0x1cc>
 8011902:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011906:	ee30 8b48 	vsub.f64	d8, d0, d8
 801190a:	b359      	cbz	r1, 8011964 <__kernel_rem_pio2+0x1cc>
 801190c:	4620      	mov	r0, r4
 801190e:	f000 fbb7 	bl	8012080 <scalbn>
 8011912:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011916:	e025      	b.n	8011964 <__kernel_rem_pio2+0x1cc>
 8011918:	ee20 7b09 	vmul.f64	d7, d0, d9
 801191c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011920:	a806      	add	r0, sp, #24
 8011922:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011926:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801192a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801192e:	ee10 1a10 	vmov	r1, s0
 8011932:	ed32 0b02 	vldmdb	r2!, {d0}
 8011936:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801193a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801193e:	3301      	adds	r3, #1
 8011940:	e798      	b.n	8011874 <__kernel_rem_pio2+0xdc>
 8011942:	d106      	bne.n	8011952 <__kernel_rem_pio2+0x1ba>
 8011944:	1e6b      	subs	r3, r5, #1
 8011946:	aa06      	add	r2, sp, #24
 8011948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801194c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8011950:	e7c1      	b.n	80118d6 <__kernel_rem_pio2+0x13e>
 8011952:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011956:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195e:	da32      	bge.n	80119c6 <__kernel_rem_pio2+0x22e>
 8011960:	f04f 0800 	mov.w	r8, #0
 8011964:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196c:	f040 80b0 	bne.w	8011ad0 <__kernel_rem_pio2+0x338>
 8011970:	1e6b      	subs	r3, r5, #1
 8011972:	4618      	mov	r0, r3
 8011974:	2200      	movs	r2, #0
 8011976:	4548      	cmp	r0, r9
 8011978:	da4e      	bge.n	8011a18 <__kernel_rem_pio2+0x280>
 801197a:	2a00      	cmp	r2, #0
 801197c:	f000 8088 	beq.w	8011a90 <__kernel_rem_pio2+0x2f8>
 8011980:	aa06      	add	r2, sp, #24
 8011982:	3c18      	subs	r4, #24
 8011984:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011988:	2900      	cmp	r1, #0
 801198a:	f000 808e 	beq.w	8011aaa <__kernel_rem_pio2+0x312>
 801198e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011992:	4620      	mov	r0, r4
 8011994:	9302      	str	r3, [sp, #8]
 8011996:	f000 fb73 	bl	8012080 <scalbn>
 801199a:	9b02      	ldr	r3, [sp, #8]
 801199c:	aa6a      	add	r2, sp, #424	; 0x1a8
 801199e:	00d9      	lsls	r1, r3, #3
 80119a0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8011ab8 <__kernel_rem_pio2+0x320>
 80119a4:	1850      	adds	r0, r2, r1
 80119a6:	f100 0508 	add.w	r5, r0, #8
 80119aa:	461c      	mov	r4, r3
 80119ac:	2c00      	cmp	r4, #0
 80119ae:	f280 80bd 	bge.w	8011b2c <__kernel_rem_pio2+0x394>
 80119b2:	2500      	movs	r5, #0
 80119b4:	1b5c      	subs	r4, r3, r5
 80119b6:	2c00      	cmp	r4, #0
 80119b8:	f2c0 80dd 	blt.w	8011b76 <__kernel_rem_pio2+0x3de>
 80119bc:	4f43      	ldr	r7, [pc, #268]	; (8011acc <__kernel_rem_pio2+0x334>)
 80119be:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8011ab0 <__kernel_rem_pio2+0x318>
 80119c2:	2400      	movs	r4, #0
 80119c4:	e0cb      	b.n	8011b5e <__kernel_rem_pio2+0x3c6>
 80119c6:	f04f 0802 	mov.w	r8, #2
 80119ca:	e787      	b.n	80118dc <__kernel_rem_pio2+0x144>
 80119cc:	ab06      	add	r3, sp, #24
 80119ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80119d2:	b949      	cbnz	r1, 80119e8 <__kernel_rem_pio2+0x250>
 80119d4:	b12b      	cbz	r3, 80119e2 <__kernel_rem_pio2+0x24a>
 80119d6:	aa06      	add	r2, sp, #24
 80119d8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80119dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80119e0:	2301      	movs	r3, #1
 80119e2:	3001      	adds	r0, #1
 80119e4:	4619      	mov	r1, r3
 80119e6:	e780      	b.n	80118ea <__kernel_rem_pio2+0x152>
 80119e8:	aa06      	add	r2, sp, #24
 80119ea:	ebac 0303 	sub.w	r3, ip, r3
 80119ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80119f2:	460b      	mov	r3, r1
 80119f4:	e7f5      	b.n	80119e2 <__kernel_rem_pio2+0x24a>
 80119f6:	1e68      	subs	r0, r5, #1
 80119f8:	ab06      	add	r3, sp, #24
 80119fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80119fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a02:	aa06      	add	r2, sp, #24
 8011a04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8011a08:	e778      	b.n	80118fc <__kernel_rem_pio2+0x164>
 8011a0a:	1e68      	subs	r0, r5, #1
 8011a0c:	ab06      	add	r3, sp, #24
 8011a0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011a12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011a16:	e7f4      	b.n	8011a02 <__kernel_rem_pio2+0x26a>
 8011a18:	a906      	add	r1, sp, #24
 8011a1a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011a1e:	3801      	subs	r0, #1
 8011a20:	430a      	orrs	r2, r1
 8011a22:	e7a8      	b.n	8011976 <__kernel_rem_pio2+0x1de>
 8011a24:	f10c 0c01 	add.w	ip, ip, #1
 8011a28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011a2c:	2a00      	cmp	r2, #0
 8011a2e:	d0f9      	beq.n	8011a24 <__kernel_rem_pio2+0x28c>
 8011a30:	eb0b 0305 	add.w	r3, fp, r5
 8011a34:	aa1a      	add	r2, sp, #104	; 0x68
 8011a36:	00db      	lsls	r3, r3, #3
 8011a38:	1898      	adds	r0, r3, r2
 8011a3a:	3008      	adds	r0, #8
 8011a3c:	1c69      	adds	r1, r5, #1
 8011a3e:	3708      	adds	r7, #8
 8011a40:	2200      	movs	r2, #0
 8011a42:	4465      	add	r5, ip
 8011a44:	9005      	str	r0, [sp, #20]
 8011a46:	428d      	cmp	r5, r1
 8011a48:	f6ff af07 	blt.w	801185a <__kernel_rem_pio2+0xc2>
 8011a4c:	a81a      	add	r0, sp, #104	; 0x68
 8011a4e:	eb02 0c03 	add.w	ip, r2, r3
 8011a52:	4484      	add	ip, r0
 8011a54:	9803      	ldr	r0, [sp, #12]
 8011a56:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011a5a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8011a5e:	9001      	str	r0, [sp, #4]
 8011a60:	ee07 0a90 	vmov	s15, r0
 8011a64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a68:	9805      	ldr	r0, [sp, #20]
 8011a6a:	ed8c 7b00 	vstr	d7, [ip]
 8011a6e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011ab0 <__kernel_rem_pio2+0x318>
 8011a72:	eb00 0802 	add.w	r8, r0, r2
 8011a76:	f04f 0c00 	mov.w	ip, #0
 8011a7a:	45d4      	cmp	ip, sl
 8011a7c:	dd0c      	ble.n	8011a98 <__kernel_rem_pio2+0x300>
 8011a7e:	eb02 0c07 	add.w	ip, r2, r7
 8011a82:	a86a      	add	r0, sp, #424	; 0x1a8
 8011a84:	4484      	add	ip, r0
 8011a86:	ed8c 7b02 	vstr	d7, [ip, #8]
 8011a8a:	3101      	adds	r1, #1
 8011a8c:	3208      	adds	r2, #8
 8011a8e:	e7da      	b.n	8011a46 <__kernel_rem_pio2+0x2ae>
 8011a90:	9b04      	ldr	r3, [sp, #16]
 8011a92:	f04f 0c01 	mov.w	ip, #1
 8011a96:	e7c7      	b.n	8011a28 <__kernel_rem_pio2+0x290>
 8011a98:	ecbe 5b02 	vldmia	lr!, {d5}
 8011a9c:	ed38 6b02 	vldmdb	r8!, {d6}
 8011aa0:	f10c 0c01 	add.w	ip, ip, #1
 8011aa4:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011aa8:	e7e7      	b.n	8011a7a <__kernel_rem_pio2+0x2e2>
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	e768      	b.n	8011980 <__kernel_rem_pio2+0x1e8>
 8011aae:	bf00      	nop
	...
 8011abc:	3e700000 	.word	0x3e700000
 8011ac0:	00000000 	.word	0x00000000
 8011ac4:	41700000 	.word	0x41700000
 8011ac8:	08012640 	.word	0x08012640
 8011acc:	08012600 	.word	0x08012600
 8011ad0:	4260      	negs	r0, r4
 8011ad2:	eeb0 0b48 	vmov.f64	d0, d8
 8011ad6:	f000 fad3 	bl	8012080 <scalbn>
 8011ada:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011cb8 <__kernel_rem_pio2+0x520>
 8011ade:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae6:	db18      	blt.n	8011b1a <__kernel_rem_pio2+0x382>
 8011ae8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011cc0 <__kernel_rem_pio2+0x528>
 8011aec:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011af0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011af4:	aa06      	add	r2, sp, #24
 8011af6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011afa:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011afe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011b02:	a906      	add	r1, sp, #24
 8011b04:	ee10 3a10 	vmov	r3, s0
 8011b08:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011b0c:	1c6b      	adds	r3, r5, #1
 8011b0e:	ee17 2a10 	vmov	r2, s14
 8011b12:	3418      	adds	r4, #24
 8011b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011b18:	e739      	b.n	801198e <__kernel_rem_pio2+0x1f6>
 8011b1a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011b1e:	aa06      	add	r2, sp, #24
 8011b20:	ee10 3a10 	vmov	r3, s0
 8011b24:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011b28:	462b      	mov	r3, r5
 8011b2a:	e730      	b.n	801198e <__kernel_rem_pio2+0x1f6>
 8011b2c:	aa06      	add	r2, sp, #24
 8011b2e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8011b32:	9202      	str	r2, [sp, #8]
 8011b34:	ee07 2a90 	vmov	s15, r2
 8011b38:	3c01      	subs	r4, #1
 8011b3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b3e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011b42:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011b46:	ed25 7b02 	vstmdb	r5!, {d7}
 8011b4a:	e72f      	b.n	80119ac <__kernel_rem_pio2+0x214>
 8011b4c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8011b50:	ecb7 5b02 	vldmia	r7!, {d5}
 8011b54:	ed9c 6b00 	vldr	d6, [ip]
 8011b58:	3401      	adds	r4, #1
 8011b5a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011b5e:	454c      	cmp	r4, r9
 8011b60:	dc01      	bgt.n	8011b66 <__kernel_rem_pio2+0x3ce>
 8011b62:	42a5      	cmp	r5, r4
 8011b64:	daf2      	bge.n	8011b4c <__kernel_rem_pio2+0x3b4>
 8011b66:	aa42      	add	r2, sp, #264	; 0x108
 8011b68:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8011b6c:	ed84 7b00 	vstr	d7, [r4]
 8011b70:	3501      	adds	r5, #1
 8011b72:	3808      	subs	r0, #8
 8011b74:	e71e      	b.n	80119b4 <__kernel_rem_pio2+0x21c>
 8011b76:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011b78:	2a03      	cmp	r2, #3
 8011b7a:	d84e      	bhi.n	8011c1a <__kernel_rem_pio2+0x482>
 8011b7c:	e8df f002 	tbb	[pc, r2]
 8011b80:	021f1f3e 	.word	0x021f1f3e
 8011b84:	3108      	adds	r1, #8
 8011b86:	aa42      	add	r2, sp, #264	; 0x108
 8011b88:	4411      	add	r1, r2
 8011b8a:	4608      	mov	r0, r1
 8011b8c:	461c      	mov	r4, r3
 8011b8e:	2c00      	cmp	r4, #0
 8011b90:	dc61      	bgt.n	8011c56 <__kernel_rem_pio2+0x4be>
 8011b92:	4608      	mov	r0, r1
 8011b94:	461c      	mov	r4, r3
 8011b96:	2c01      	cmp	r4, #1
 8011b98:	dc6d      	bgt.n	8011c76 <__kernel_rem_pio2+0x4de>
 8011b9a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011cc8 <__kernel_rem_pio2+0x530>
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	dc79      	bgt.n	8011c96 <__kernel_rem_pio2+0x4fe>
 8011ba2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011ba6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011baa:	f1b8 0f00 	cmp.w	r8, #0
 8011bae:	d178      	bne.n	8011ca2 <__kernel_rem_pio2+0x50a>
 8011bb0:	ed86 5b00 	vstr	d5, [r6]
 8011bb4:	ed86 6b02 	vstr	d6, [r6, #8]
 8011bb8:	ed86 7b04 	vstr	d7, [r6, #16]
 8011bbc:	e02d      	b.n	8011c1a <__kernel_rem_pio2+0x482>
 8011bbe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8011cc8 <__kernel_rem_pio2+0x530>
 8011bc2:	3108      	adds	r1, #8
 8011bc4:	aa42      	add	r2, sp, #264	; 0x108
 8011bc6:	4411      	add	r1, r2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	da34      	bge.n	8011c38 <__kernel_rem_pio2+0x4a0>
 8011bce:	f1b8 0f00 	cmp.w	r8, #0
 8011bd2:	d037      	beq.n	8011c44 <__kernel_rem_pio2+0x4ac>
 8011bd4:	eeb1 7b46 	vneg.f64	d7, d6
 8011bd8:	ed86 7b00 	vstr	d7, [r6]
 8011bdc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011be0:	a844      	add	r0, sp, #272	; 0x110
 8011be2:	2101      	movs	r1, #1
 8011be4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011be8:	428b      	cmp	r3, r1
 8011bea:	da2e      	bge.n	8011c4a <__kernel_rem_pio2+0x4b2>
 8011bec:	f1b8 0f00 	cmp.w	r8, #0
 8011bf0:	d001      	beq.n	8011bf6 <__kernel_rem_pio2+0x45e>
 8011bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8011bf6:	ed86 7b02 	vstr	d7, [r6, #8]
 8011bfa:	e00e      	b.n	8011c1a <__kernel_rem_pio2+0x482>
 8011bfc:	aa92      	add	r2, sp, #584	; 0x248
 8011bfe:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8011cc8 <__kernel_rem_pio2+0x530>
 8011c02:	4411      	add	r1, r2
 8011c04:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	da0f      	bge.n	8011c2c <__kernel_rem_pio2+0x494>
 8011c0c:	f1b8 0f00 	cmp.w	r8, #0
 8011c10:	d001      	beq.n	8011c16 <__kernel_rem_pio2+0x47e>
 8011c12:	eeb1 7b47 	vneg.f64	d7, d7
 8011c16:	ed86 7b00 	vstr	d7, [r6]
 8011c1a:	9b01      	ldr	r3, [sp, #4]
 8011c1c:	f003 0007 	and.w	r0, r3, #7
 8011c20:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011c24:	ecbd 8b06 	vpop	{d8-d10}
 8011c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2c:	ed31 6b02 	vldmdb	r1!, {d6}
 8011c30:	3b01      	subs	r3, #1
 8011c32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c36:	e7e7      	b.n	8011c08 <__kernel_rem_pio2+0x470>
 8011c38:	ed31 7b02 	vldmdb	r1!, {d7}
 8011c3c:	3801      	subs	r0, #1
 8011c3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011c42:	e7c2      	b.n	8011bca <__kernel_rem_pio2+0x432>
 8011c44:	eeb0 7b46 	vmov.f64	d7, d6
 8011c48:	e7c6      	b.n	8011bd8 <__kernel_rem_pio2+0x440>
 8011c4a:	ecb0 6b02 	vldmia	r0!, {d6}
 8011c4e:	3101      	adds	r1, #1
 8011c50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c54:	e7c8      	b.n	8011be8 <__kernel_rem_pio2+0x450>
 8011c56:	ed10 7b04 	vldr	d7, [r0, #-16]
 8011c5a:	ed30 5b02 	vldmdb	r0!, {d5}
 8011c5e:	3c01      	subs	r4, #1
 8011c60:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011c64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c68:	ed00 6b02 	vstr	d6, [r0, #-8]
 8011c6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011c70:	ed80 7b00 	vstr	d7, [r0]
 8011c74:	e78b      	b.n	8011b8e <__kernel_rem_pio2+0x3f6>
 8011c76:	ed10 7b04 	vldr	d7, [r0, #-16]
 8011c7a:	ed30 5b02 	vldmdb	r0!, {d5}
 8011c7e:	3c01      	subs	r4, #1
 8011c80:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011c84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c88:	ed00 6b02 	vstr	d6, [r0, #-8]
 8011c8c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011c90:	ed80 7b00 	vstr	d7, [r0]
 8011c94:	e77f      	b.n	8011b96 <__kernel_rem_pio2+0x3fe>
 8011c96:	ed31 6b02 	vldmdb	r1!, {d6}
 8011c9a:	3b01      	subs	r3, #1
 8011c9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011ca0:	e77d      	b.n	8011b9e <__kernel_rem_pio2+0x406>
 8011ca2:	eeb1 5b45 	vneg.f64	d5, d5
 8011ca6:	eeb1 6b46 	vneg.f64	d6, d6
 8011caa:	ed86 5b00 	vstr	d5, [r6]
 8011cae:	eeb1 7b47 	vneg.f64	d7, d7
 8011cb2:	ed86 6b02 	vstr	d6, [r6, #8]
 8011cb6:	e77f      	b.n	8011bb8 <__kernel_rem_pio2+0x420>
 8011cb8:	00000000 	.word	0x00000000
 8011cbc:	41700000 	.word	0x41700000
 8011cc0:	00000000 	.word	0x00000000
 8011cc4:	3e700000 	.word	0x3e700000
	...

08011cd0 <__kernel_sin>:
 8011cd0:	ee10 3a90 	vmov	r3, s1
 8011cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011cd8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011cdc:	da04      	bge.n	8011ce8 <__kernel_sin+0x18>
 8011cde:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011ce2:	ee17 3a90 	vmov	r3, s15
 8011ce6:	b35b      	cbz	r3, 8011d40 <__kernel_sin+0x70>
 8011ce8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011cec:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011cf0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011d48 <__kernel_sin+0x78>
 8011cf4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011d50 <__kernel_sin+0x80>
 8011cf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011cfc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011d58 <__kernel_sin+0x88>
 8011d00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011d04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011d60 <__kernel_sin+0x90>
 8011d08:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011d0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011d68 <__kernel_sin+0x98>
 8011d10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011d14:	b930      	cbnz	r0, 8011d24 <__kernel_sin+0x54>
 8011d16:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011d70 <__kernel_sin+0xa0>
 8011d1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011d1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011d22:	4770      	bx	lr
 8011d24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011d28:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011d2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011d30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011d34:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011d78 <__kernel_sin+0xa8>
 8011d38:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011d3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	f3af 8000 	nop.w
 8011d48:	5acfd57c 	.word	0x5acfd57c
 8011d4c:	3de5d93a 	.word	0x3de5d93a
 8011d50:	8a2b9ceb 	.word	0x8a2b9ceb
 8011d54:	be5ae5e6 	.word	0xbe5ae5e6
 8011d58:	57b1fe7d 	.word	0x57b1fe7d
 8011d5c:	3ec71de3 	.word	0x3ec71de3
 8011d60:	19c161d5 	.word	0x19c161d5
 8011d64:	bf2a01a0 	.word	0xbf2a01a0
 8011d68:	1110f8a6 	.word	0x1110f8a6
 8011d6c:	3f811111 	.word	0x3f811111
 8011d70:	55555549 	.word	0x55555549
 8011d74:	bfc55555 	.word	0xbfc55555
 8011d78:	55555549 	.word	0x55555549
 8011d7c:	3fc55555 	.word	0x3fc55555

08011d80 <atan>:
 8011d80:	b538      	push	{r3, r4, r5, lr}
 8011d82:	eeb0 7b40 	vmov.f64	d7, d0
 8011d86:	ee17 5a90 	vmov	r5, s15
 8011d8a:	4b73      	ldr	r3, [pc, #460]	; (8011f58 <atan+0x1d8>)
 8011d8c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011d90:	429c      	cmp	r4, r3
 8011d92:	dd13      	ble.n	8011dbc <atan+0x3c>
 8011d94:	4b71      	ldr	r3, [pc, #452]	; (8011f5c <atan+0x1dc>)
 8011d96:	429c      	cmp	r4, r3
 8011d98:	dc03      	bgt.n	8011da2 <atan+0x22>
 8011d9a:	d107      	bne.n	8011dac <atan+0x2c>
 8011d9c:	ee10 3a10 	vmov	r3, s0
 8011da0:	b123      	cbz	r3, 8011dac <atan+0x2c>
 8011da2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011da6:	eeb0 0b47 	vmov.f64	d0, d7
 8011daa:	bd38      	pop	{r3, r4, r5, pc}
 8011dac:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011ee8 <atan+0x168>
 8011db0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011ef0 <atan+0x170>
 8011db4:	2d00      	cmp	r5, #0
 8011db6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8011dba:	e7f4      	b.n	8011da6 <atan+0x26>
 8011dbc:	4b68      	ldr	r3, [pc, #416]	; (8011f60 <atan+0x1e0>)
 8011dbe:	429c      	cmp	r4, r3
 8011dc0:	dc11      	bgt.n	8011de6 <atan+0x66>
 8011dc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011dc6:	429c      	cmp	r4, r3
 8011dc8:	dc0a      	bgt.n	8011de0 <atan+0x60>
 8011dca:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011dce:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011ef8 <atan+0x178>
 8011dd2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011dd6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dde:	dce2      	bgt.n	8011da6 <atan+0x26>
 8011de0:	f04f 33ff 	mov.w	r3, #4294967295
 8011de4:	e013      	b.n	8011e0e <atan+0x8e>
 8011de6:	f000 f8c5 	bl	8011f74 <fabs>
 8011dea:	4b5e      	ldr	r3, [pc, #376]	; (8011f64 <atan+0x1e4>)
 8011dec:	429c      	cmp	r4, r3
 8011dee:	dc4f      	bgt.n	8011e90 <atan+0x110>
 8011df0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011df4:	429c      	cmp	r4, r3
 8011df6:	dc41      	bgt.n	8011e7c <atan+0xfc>
 8011df8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011dfc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011e00:	2300      	movs	r3, #0
 8011e02:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011e06:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e0a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011e0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011f00 <atan+0x180>
 8011e12:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011e16:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011e1a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011f08 <atan+0x188>
 8011e1e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011e22:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011f10 <atan+0x190>
 8011e26:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011e2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011f18 <atan+0x198>
 8011e2e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011e32:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011f20 <atan+0x1a0>
 8011e36:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011e3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011f28 <atan+0x1a8>
 8011e3e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011f30 <atan+0x1b0>
 8011e42:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011e46:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011f38 <atan+0x1b8>
 8011e4a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011e4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011f40 <atan+0x1c0>
 8011e52:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011e56:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011f48 <atan+0x1c8>
 8011e5a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011e5e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011f50 <atan+0x1d0>
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011e68:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011e6c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011e70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011e74:	d121      	bne.n	8011eba <atan+0x13a>
 8011e76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011e7a:	e794      	b.n	8011da6 <atan+0x26>
 8011e7c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011e80:	2301      	movs	r3, #1
 8011e82:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011e86:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e8a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011e8e:	e7be      	b.n	8011e0e <atan+0x8e>
 8011e90:	4b35      	ldr	r3, [pc, #212]	; (8011f68 <atan+0x1e8>)
 8011e92:	429c      	cmp	r4, r3
 8011e94:	dc0b      	bgt.n	8011eae <atan+0x12e>
 8011e96:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011e9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011e9e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011ea2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011ea6:	2302      	movs	r3, #2
 8011ea8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011eac:	e7af      	b.n	8011e0e <atan+0x8e>
 8011eae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011eb2:	2303      	movs	r3, #3
 8011eb4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011eb8:	e7a9      	b.n	8011e0e <atan+0x8e>
 8011eba:	4a2c      	ldr	r2, [pc, #176]	; (8011f6c <atan+0x1ec>)
 8011ebc:	492c      	ldr	r1, [pc, #176]	; (8011f70 <atan+0x1f0>)
 8011ebe:	00db      	lsls	r3, r3, #3
 8011ec0:	441a      	add	r2, r3
 8011ec2:	440b      	add	r3, r1
 8011ec4:	ed93 5b00 	vldr	d5, [r3]
 8011ec8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011ecc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ed0:	ed92 6b00 	vldr	d6, [r2]
 8011ed4:	2d00      	cmp	r5, #0
 8011ed6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011eda:	bfb8      	it	lt
 8011edc:	eeb1 7b47 	vneglt.f64	d7, d7
 8011ee0:	e761      	b.n	8011da6 <atan+0x26>
 8011ee2:	bf00      	nop
 8011ee4:	f3af 8000 	nop.w
 8011ee8:	54442d18 	.word	0x54442d18
 8011eec:	bff921fb 	.word	0xbff921fb
 8011ef0:	54442d18 	.word	0x54442d18
 8011ef4:	3ff921fb 	.word	0x3ff921fb
 8011ef8:	8800759c 	.word	0x8800759c
 8011efc:	7e37e43c 	.word	0x7e37e43c
 8011f00:	e322da11 	.word	0xe322da11
 8011f04:	3f90ad3a 	.word	0x3f90ad3a
 8011f08:	24760deb 	.word	0x24760deb
 8011f0c:	3fa97b4b 	.word	0x3fa97b4b
 8011f10:	a0d03d51 	.word	0xa0d03d51
 8011f14:	3fb10d66 	.word	0x3fb10d66
 8011f18:	c54c206e 	.word	0xc54c206e
 8011f1c:	3fb745cd 	.word	0x3fb745cd
 8011f20:	920083ff 	.word	0x920083ff
 8011f24:	3fc24924 	.word	0x3fc24924
 8011f28:	5555550d 	.word	0x5555550d
 8011f2c:	3fd55555 	.word	0x3fd55555
 8011f30:	52defd9a 	.word	0x52defd9a
 8011f34:	bfadde2d 	.word	0xbfadde2d
 8011f38:	2c6a6c2f 	.word	0x2c6a6c2f
 8011f3c:	bfa2b444 	.word	0xbfa2b444
 8011f40:	af749a6d 	.word	0xaf749a6d
 8011f44:	bfb3b0f2 	.word	0xbfb3b0f2
 8011f48:	fe231671 	.word	0xfe231671
 8011f4c:	bfbc71c6 	.word	0xbfbc71c6
 8011f50:	9998ebc4 	.word	0x9998ebc4
 8011f54:	bfc99999 	.word	0xbfc99999
 8011f58:	440fffff 	.word	0x440fffff
 8011f5c:	7ff00000 	.word	0x7ff00000
 8011f60:	3fdbffff 	.word	0x3fdbffff
 8011f64:	3ff2ffff 	.word	0x3ff2ffff
 8011f68:	40037fff 	.word	0x40037fff
 8011f6c:	08012650 	.word	0x08012650
 8011f70:	08012670 	.word	0x08012670

08011f74 <fabs>:
 8011f74:	ec51 0b10 	vmov	r0, r1, d0
 8011f78:	ee10 2a10 	vmov	r2, s0
 8011f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f80:	ec43 2b10 	vmov	d0, r2, r3
 8011f84:	4770      	bx	lr
	...

08011f88 <floor>:
 8011f88:	ee10 1a90 	vmov	r1, s1
 8011f8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011f90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011f94:	2b13      	cmp	r3, #19
 8011f96:	b530      	push	{r4, r5, lr}
 8011f98:	ee10 0a10 	vmov	r0, s0
 8011f9c:	ee10 5a10 	vmov	r5, s0
 8011fa0:	dc33      	bgt.n	801200a <floor+0x82>
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	da17      	bge.n	8011fd6 <floor+0x4e>
 8011fa6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012068 <floor+0xe0>
 8011faa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011fae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb6:	dd09      	ble.n	8011fcc <floor+0x44>
 8011fb8:	2900      	cmp	r1, #0
 8011fba:	da50      	bge.n	801205e <floor+0xd6>
 8011fbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011fc0:	4a2b      	ldr	r2, [pc, #172]	; (8012070 <floor+0xe8>)
 8011fc2:	4303      	orrs	r3, r0
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	4283      	cmp	r3, r0
 8011fc8:	bf18      	it	ne
 8011fca:	4611      	movne	r1, r2
 8011fcc:	460b      	mov	r3, r1
 8011fce:	4602      	mov	r2, r0
 8011fd0:	ec43 2b10 	vmov	d0, r2, r3
 8011fd4:	e020      	b.n	8012018 <floor+0x90>
 8011fd6:	4a27      	ldr	r2, [pc, #156]	; (8012074 <floor+0xec>)
 8011fd8:	411a      	asrs	r2, r3
 8011fda:	ea01 0402 	and.w	r4, r1, r2
 8011fde:	4304      	orrs	r4, r0
 8011fe0:	d01a      	beq.n	8012018 <floor+0x90>
 8011fe2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012068 <floor+0xe0>
 8011fe6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011fea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff2:	ddeb      	ble.n	8011fcc <floor+0x44>
 8011ff4:	2900      	cmp	r1, #0
 8011ff6:	bfbe      	ittt	lt
 8011ff8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011ffc:	fa40 f303 	asrlt.w	r3, r0, r3
 8012000:	18c9      	addlt	r1, r1, r3
 8012002:	ea21 0102 	bic.w	r1, r1, r2
 8012006:	2000      	movs	r0, #0
 8012008:	e7e0      	b.n	8011fcc <floor+0x44>
 801200a:	2b33      	cmp	r3, #51	; 0x33
 801200c:	dd05      	ble.n	801201a <floor+0x92>
 801200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012012:	d101      	bne.n	8012018 <floor+0x90>
 8012014:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012018:	bd30      	pop	{r4, r5, pc}
 801201a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801201e:	f04f 32ff 	mov.w	r2, #4294967295
 8012022:	40e2      	lsrs	r2, r4
 8012024:	4202      	tst	r2, r0
 8012026:	d0f7      	beq.n	8012018 <floor+0x90>
 8012028:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012068 <floor+0xe0>
 801202c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012030:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012038:	ddc8      	ble.n	8011fcc <floor+0x44>
 801203a:	2900      	cmp	r1, #0
 801203c:	da02      	bge.n	8012044 <floor+0xbc>
 801203e:	2b14      	cmp	r3, #20
 8012040:	d103      	bne.n	801204a <floor+0xc2>
 8012042:	3101      	adds	r1, #1
 8012044:	ea20 0002 	bic.w	r0, r0, r2
 8012048:	e7c0      	b.n	8011fcc <floor+0x44>
 801204a:	2401      	movs	r4, #1
 801204c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012050:	fa04 f303 	lsl.w	r3, r4, r3
 8012054:	4418      	add	r0, r3
 8012056:	42a8      	cmp	r0, r5
 8012058:	bf38      	it	cc
 801205a:	1909      	addcc	r1, r1, r4
 801205c:	e7f2      	b.n	8012044 <floor+0xbc>
 801205e:	2000      	movs	r0, #0
 8012060:	4601      	mov	r1, r0
 8012062:	e7b3      	b.n	8011fcc <floor+0x44>
 8012064:	f3af 8000 	nop.w
 8012068:	8800759c 	.word	0x8800759c
 801206c:	7e37e43c 	.word	0x7e37e43c
 8012070:	bff00000 	.word	0xbff00000
 8012074:	000fffff 	.word	0x000fffff

08012078 <matherr>:
 8012078:	2000      	movs	r0, #0
 801207a:	4770      	bx	lr
 801207c:	0000      	movs	r0, r0
	...

08012080 <scalbn>:
 8012080:	b500      	push	{lr}
 8012082:	ed2d 8b02 	vpush	{d8}
 8012086:	b083      	sub	sp, #12
 8012088:	ed8d 0b00 	vstr	d0, [sp]
 801208c:	9b01      	ldr	r3, [sp, #4]
 801208e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012092:	b9a2      	cbnz	r2, 80120be <scalbn+0x3e>
 8012094:	9a00      	ldr	r2, [sp, #0]
 8012096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801209a:	4313      	orrs	r3, r2
 801209c:	d03a      	beq.n	8012114 <scalbn+0x94>
 801209e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012158 <scalbn+0xd8>
 80120a2:	4b35      	ldr	r3, [pc, #212]	; (8012178 <scalbn+0xf8>)
 80120a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80120a8:	4298      	cmp	r0, r3
 80120aa:	ed8d 7b00 	vstr	d7, [sp]
 80120ae:	da11      	bge.n	80120d4 <scalbn+0x54>
 80120b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8012160 <scalbn+0xe0>
 80120b4:	ed9d 6b00 	vldr	d6, [sp]
 80120b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80120bc:	e007      	b.n	80120ce <scalbn+0x4e>
 80120be:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80120c2:	428a      	cmp	r2, r1
 80120c4:	d10a      	bne.n	80120dc <scalbn+0x5c>
 80120c6:	ed9d 7b00 	vldr	d7, [sp]
 80120ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80120ce:	ed8d 7b00 	vstr	d7, [sp]
 80120d2:	e01f      	b.n	8012114 <scalbn+0x94>
 80120d4:	9b01      	ldr	r3, [sp, #4]
 80120d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80120da:	3a36      	subs	r2, #54	; 0x36
 80120dc:	4402      	add	r2, r0
 80120de:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80120e2:	428a      	cmp	r2, r1
 80120e4:	dd0a      	ble.n	80120fc <scalbn+0x7c>
 80120e6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8012168 <scalbn+0xe8>
 80120ea:	eeb0 0b48 	vmov.f64	d0, d8
 80120ee:	ed9d 1b00 	vldr	d1, [sp]
 80120f2:	f000 f843 	bl	801217c <copysign>
 80120f6:	ee20 7b08 	vmul.f64	d7, d0, d8
 80120fa:	e7e8      	b.n	80120ce <scalbn+0x4e>
 80120fc:	2a00      	cmp	r2, #0
 80120fe:	dd10      	ble.n	8012122 <scalbn+0xa2>
 8012100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012104:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801210c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012110:	e9cd 0100 	strd	r0, r1, [sp]
 8012114:	ed9d 0b00 	vldr	d0, [sp]
 8012118:	b003      	add	sp, #12
 801211a:	ecbd 8b02 	vpop	{d8}
 801211e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012122:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012126:	da06      	bge.n	8012136 <scalbn+0xb6>
 8012128:	f24c 3350 	movw	r3, #50000	; 0xc350
 801212c:	4298      	cmp	r0, r3
 801212e:	dcda      	bgt.n	80120e6 <scalbn+0x66>
 8012130:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8012160 <scalbn+0xe0>
 8012134:	e7d9      	b.n	80120ea <scalbn+0x6a>
 8012136:	e9dd 0100 	ldrd	r0, r1, [sp]
 801213a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801213e:	3236      	adds	r2, #54	; 0x36
 8012140:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012144:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012148:	ec41 0b17 	vmov	d7, r0, r1
 801214c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8012170 <scalbn+0xf0>
 8012150:	e7b2      	b.n	80120b8 <scalbn+0x38>
 8012152:	bf00      	nop
 8012154:	f3af 8000 	nop.w
 8012158:	00000000 	.word	0x00000000
 801215c:	43500000 	.word	0x43500000
 8012160:	c2f8f359 	.word	0xc2f8f359
 8012164:	01a56e1f 	.word	0x01a56e1f
 8012168:	8800759c 	.word	0x8800759c
 801216c:	7e37e43c 	.word	0x7e37e43c
 8012170:	00000000 	.word	0x00000000
 8012174:	3c900000 	.word	0x3c900000
 8012178:	ffff3cb0 	.word	0xffff3cb0

0801217c <copysign>:
 801217c:	ec51 0b10 	vmov	r0, r1, d0
 8012180:	ee11 0a90 	vmov	r0, s3
 8012184:	ee10 2a10 	vmov	r2, s0
 8012188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801218c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012190:	ea41 0300 	orr.w	r3, r1, r0
 8012194:	ec43 2b10 	vmov	d0, r2, r3
 8012198:	4770      	bx	lr
	...

0801219c <_init>:
 801219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219e:	bf00      	nop
 80121a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121a2:	bc08      	pop	{r3}
 80121a4:	469e      	mov	lr, r3
 80121a6:	4770      	bx	lr

080121a8 <_fini>:
 80121a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121aa:	bf00      	nop
 80121ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ae:	bc08      	pop	{r3}
 80121b0:	469e      	mov	lr, r3
 80121b2:	4770      	bx	lr
