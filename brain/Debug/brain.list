
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc74  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800df10  0800df10  0001df10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e158  0800e158  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e158  0800e158  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e160  0800e160  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e160  0800e160  0001e160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e164  0800e164  0001e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  24000000  0800e168  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  240000b8  0800e220  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000bcc  0800e220  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb00  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c73  00000000  00000000  0003ebe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00041860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  00042d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383b9  00000000  00000000  000440b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000110cd  00000000  00000000  0007c469  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173281  00000000  00000000  0008d536  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002007b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b6c  00000000  00000000  00200834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b8 	.word	0x240000b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800def4 	.word	0x0800def4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000bc 	.word	0x240000bc
 80002d4:	0800def4 	.word	0x0800def4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000040 	.word	0x24000040
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f009 f90c 	bl	80098a8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f009 f9df 	bl	8009a58 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f009 f9da 	bl	8009a58 <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	24000b28 	.word	0x24000b28
 80006b0:	24000a40 	.word	0x24000a40
 80006b4:	24000acc 	.word	0x24000acc
 80006b8:	24000254 	.word	0x24000254
 80006bc:	24000720 	.word	0x24000720
 80006c0:	24000920 	.word	0x24000920

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000920 	.word	0x24000920
 800072c:	240002f2 	.word	0x240002f2
 8000730:	24000254 	.word	0x24000254
 8000734:	24000a08 	.word	0x24000a08
 8000738:	24000a40 	.word	0x24000a40
 800073c:	240007f0 	.word	0x240007f0
 8000740:	24000120 	.word	0x24000120
 8000744:	240001ac 	.word	0x240001ac

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 ff6e 	bl	8009674 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f009 f880 	bl	80098a8 <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000920 	.word	0x24000920
 80007c8:	240000e1 	.word	0x240000e1
 80007cc:	24000254 	.word	0x24000254
 80007d0:	24000a08 	.word	0x24000a08
 80007d4:	24000a40 	.word	0x24000a40
 80007d8:	24000b28 	.word	0x24000b28
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000bb0 	.word	0x24000bb0
 80007e4:	24000120 	.word	0x24000120
 80007e8:	24000a10 	.word	0x24000a10

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f008 ffd0 	bl	80097a0 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000920 	.word	0x24000920

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f008 ffbd 	bl	80097a0 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000920 	.word	0x24000920

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	240002f2 	.word	0x240002f2

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 ff9d 	bl	80097a0 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000a40 	.word	0x24000a40

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	240007f0 	.word	0x240007f0

0800089c <peripheralADC_Init>:
uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 80008a0:	2203      	movs	r2, #3
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <peripheralADC_Init+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <peripheralADC_Init+0x18>)
 80008a6:	f002 f957 	bl	8002b58 <HAL_ADC_Start_DMA>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000b48 	.word	0x24000b48
 80008b4:	2400081c 	.word	0x2400081c

080008b8 <controlMotor1>:
void roR_pit_yaw_mixSpeed(void);
void brake(void);

#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bfb8      	it	lt
 80008c6:	425b      	neglt	r3, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <controlMotor1+0x48>)
 80008cc:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db07      	blt.n	80008e4 <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <controlMotor1+0x48>)
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <controlMotor1+0x48>)
 80008e0:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 80008e2:	e006      	b.n	80008f2 <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <controlMotor1+0x48>)
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <controlMotor1+0x48>)
 80008f0:	721a      	strb	r2, [r3, #8]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2400000c 	.word	0x2400000c

08000904 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <controlMotor2+0x48>)
 8000918:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db07      	blt.n	8000930 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <controlMotor2+0x48>)
 8000922:	7a1b      	ldrb	r3, [r3, #8]
 8000924:	f023 0302 	bic.w	r3, r3, #2
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <controlMotor2+0x48>)
 800092c:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 800092e:	e006      	b.n	800093e <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <controlMotor2+0x48>)
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <controlMotor2+0x48>)
 800093c:	721a      	strb	r2, [r3, #8]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	2400000c 	.word	0x2400000c

08000950 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <controlMotor3+0x48>)
 8000964:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db07      	blt.n	800097c <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <controlMotor3+0x48>)
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <controlMotor3+0x48>)
 8000978:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 800097a:	e006      	b.n	800098a <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <controlMotor3+0x48>)
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <controlMotor3+0x48>)
 8000988:	721a      	strb	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2400000c 	.word	0x2400000c

0800099c <controlMotor4>:
void controlMotor4(int _speed)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <controlMotor4+0x48>)
 80009b0:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db07      	blt.n	80009c8 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <controlMotor4+0x48>)
 80009ba:	7a1b      	ldrb	r3, [r3, #8]
 80009bc:	f023 0308 	bic.w	r3, r3, #8
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <controlMotor4+0x48>)
 80009c4:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 80009c6:	e006      	b.n	80009d6 <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <controlMotor4+0x48>)
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <controlMotor4+0x48>)
 80009d4:	721a      	strb	r2, [r3, #8]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400000c 	.word	0x2400000c

080009e8 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 80009e8:	b490      	push	{r4, r7}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <PIDyaw+0x120>)
 8000a02:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000a04:	4b40      	ldr	r3, [pc, #256]	; (8000b08 <PIDyaw+0x120>)
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <PIDyaw+0x124>)
 8000a14:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <PIDyaw+0x120>)
 8000a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <PIDyaw+0x128>)
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <PIDyaw+0x12c>)
 8000a32:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <PIDyaw+0x120>)
 8000a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <PIDyaw+0x130>)
 8000a46:	ed93 7b00 	vldr	d7, [r3]
 8000a4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <PIDyaw+0x130>)
 8000a50:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <PIDyaw+0x134>)
 8000a56:	ed93 6b00 	vldr	d6, [r3]
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <PIDyaw+0x124>)
 8000a5c:	ed93 7b00 	vldr	d7, [r3]
 8000a60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <PIDyaw+0x138>)
 8000a66:	ed93 5b00 	vldr	d5, [r3]
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <PIDyaw+0x12c>)
 8000a6c:	ed93 7b00 	vldr	d7, [r3]
 8000a70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <PIDyaw+0x13c>)
 8000a7a:	ed93 5b00 	vldr	d5, [r3]
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <PIDyaw+0x130>)
 8000a80:	ed93 7b00 	vldr	d7, [r3]
 8000a84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <PIDyaw+0x140>)
 8000a8e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <PIDyaw+0x140>)
 8000a94:	ed93 7b00 	vldr	d7, [r3]
 8000a98:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000af8 <PIDyaw+0x110>
 8000a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa4:	dd05      	ble.n	8000ab2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <PIDyaw+0x140>)
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	4c1f      	ldr	r4, [pc, #124]	; (8000b2c <PIDyaw+0x144>)
 8000aae:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <PIDyaw+0x140>)
 8000ab4:	ed93 7b00 	vldr	d7, [r3]
 8000ab8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000b00 <PIDyaw+0x118>
 8000abc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d505      	bpl.n	8000ad2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <PIDyaw+0x140>)
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	4c18      	ldr	r4, [pc, #96]	; (8000b30 <PIDyaw+0x148>)
 8000ace:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <PIDyaw+0x120>)
 8000ad4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <PIDyaw+0x128>)
 8000ada:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <PIDyaw+0x140>)
 8000ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ae2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ae6:	eeb0 0b47 	vmov.f64	d0, d7
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc90      	pop	{r4, r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	f3af 8000 	nop.w
 8000af8:	00000000 	.word	0x00000000
 8000afc:	405e0000 	.word	0x405e0000
 8000b00:	00000000 	.word	0x00000000
 8000b04:	c05e0000 	.word	0xc05e0000
 8000b08:	240007c8 	.word	0x240007c8
 8000b0c:	240007e8 	.word	0x240007e8
 8000b10:	24000250 	.word	0x24000250
 8000b14:	24000108 	.word	0x24000108
 8000b18:	240007c0 	.word	0x240007c0
 8000b1c:	24000020 	.word	0x24000020
 8000b20:	240000d8 	.word	0x240000d8
 8000b24:	24000028 	.word	0x24000028
 8000b28:	24000a38 	.word	0x24000a38
 8000b2c:	405e0000 	.word	0x405e0000
 8000b30:	c05e0000 	.word	0xc05e0000
 8000b34:	00000000 	.word	0x00000000

08000b38 <PIDroL>:
	roRPreError = roRError;
	return roRPID;
}

double PIDroL(int _roLValue, int _roLSetpoint)
{
 8000b38:	b490      	push	{r4, r7}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	roLError = -_roLSetpoint + _roLValue;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <PIDroL+0x120>)
 8000b52:	801a      	strh	r2, [r3, #0]
	roLP = roLError;
 8000b54:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <PIDroL+0x120>)
 8000b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5a:	ee07 3a90 	vmov	s15, r3
 8000b5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <PIDroL+0x124>)
 8000b64:	ed83 7b00 	vstr	d7, [r3]
	roLD = roLError - roLPreError;
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <PIDroL+0x120>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <PIDroL+0x128>)
 8000b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <PIDroL+0x12c>)
 8000b82:	ed83 7b00 	vstr	d7, [r3]
	roLI = roLError + roLI;
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <PIDroL+0x120>)
 8000b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <PIDroL+0x130>)
 8000b96:	ed93 7b00 	vldr	d7, [r3]
 8000b9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <PIDroL+0x130>)
 8000ba0:	ed83 7b00 	vstr	d7, [r3]
	roLPID = roLKp*roLP + roLKd*roLD + roLKi*roLI;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <PIDroL+0x134>)
 8000ba6:	ed93 6b00 	vldr	d6, [r3]
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <PIDroL+0x124>)
 8000bac:	ed93 7b00 	vldr	d7, [r3]
 8000bb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <PIDroL+0x138>)
 8000bb6:	ed93 5b00 	vldr	d5, [r3]
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <PIDroL+0x12c>)
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bc4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <PIDroL+0x13c>)
 8000bca:	ed93 5b00 	vldr	d5, [r3]
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <PIDroL+0x130>)
 8000bd0:	ed93 7b00 	vldr	d7, [r3]
 8000bd4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <PIDroL+0x140>)
 8000bde:	ed83 7b00 	vstr	d7, [r3]
	if(roLPID > MAX_ROL_PID)
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <PIDroL+0x140>)
 8000be4:	ed93 7b00 	vldr	d7, [r3]
 8000be8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000c48 <PIDroL+0x110>
 8000bec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf4:	dd05      	ble.n	8000c02 <PIDroL+0xca>
	{
		roLPID = MAX_ROL_PID;
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <PIDroL+0x140>)
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	4c1f      	ldr	r4, [pc, #124]	; (8000c7c <PIDroL+0x144>)
 8000bfe:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(roLPID < MIN_ROL_PID)
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <PIDroL+0x140>)
 8000c04:	ed93 7b00 	vldr	d7, [r3]
 8000c08:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000c50 <PIDroL+0x118>
 8000c0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	d505      	bpl.n	8000c22 <PIDroL+0xea>
	{
		roLPID = MIN_ROL_PID;
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <PIDroL+0x140>)
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	4c18      	ldr	r4, [pc, #96]	; (8000c80 <PIDroL+0x148>)
 8000c1e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	roLPreError = roLError;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <PIDroL+0x120>)
 8000c24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <PIDroL+0x128>)
 8000c2a:	801a      	strh	r2, [r3, #0]
	return roLPID;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <PIDroL+0x140>)
 8000c2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c32:	ec44 3b17 	vmov	d7, r3, r4
}
 8000c36:	eeb0 0b47 	vmov.f64	d0, d7
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc90      	pop	{r4, r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	f3af 8000 	nop.w
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40590000 	.word	0x40590000
 8000c50:	00000000 	.word	0x00000000
 8000c54:	c0590000 	.word	0xc0590000
 8000c58:	240007cc 	.word	0x240007cc
 8000c5c:	24000a00 	.word	0x24000a00
 8000c60:	240009b4 	.word	0x240009b4
 8000c64:	240001b8 	.word	0x240001b8
 8000c68:	24000248 	.word	0x24000248
 8000c6c:	24000030 	.word	0x24000030
 8000c70:	24000738 	.word	0x24000738
 8000c74:	24000b00 	.word	0x24000b00
 8000c78:	240007f8 	.word	0x240007f8
 8000c7c:	40590000 	.word	0x40590000
 8000c80:	c0590000 	.word	0xc0590000
 8000c84:	00000000 	.word	0x00000000

08000c88 <PIDpit>:

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8000c88:	b490      	push	{r4, r7}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	pitError = -_pitSetpoint + _pitValue;
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <PIDpit+0x108>)
 8000ca2:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <PIDpit+0x108>)
 8000ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cac:	4a39      	ldr	r2, [pc, #228]	; (8000d94 <PIDpit+0x10c>)
 8000cae:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <PIDpit+0x108>)
 8000cb4:	ed93 6b00 	vldr	d6, [r3]
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <PIDpit+0x110>)
 8000cba:	ed93 7b00 	vldr	d7, [r3]
 8000cbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <PIDpit+0x114>)
 8000cc4:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 8000cc8:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <PIDpit+0x108>)
 8000cca:	ed93 6b00 	vldr	d6, [r3]
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <PIDpit+0x118>)
 8000cd0:	ed93 7b00 	vldr	d7, [r3]
 8000cd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <PIDpit+0x118>)
 8000cda:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <PIDpit+0x11c>)
 8000ce0:	ed93 6b00 	vldr	d6, [r3]
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <PIDpit+0x10c>)
 8000ce6:	ed93 7b00 	vldr	d7, [r3]
 8000cea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <PIDpit+0x120>)
 8000cf0:	ed93 5b00 	vldr	d5, [r3]
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <PIDpit+0x114>)
 8000cf6:	ed93 7b00 	vldr	d7, [r3]
 8000cfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <PIDpit+0x124>)
 8000d04:	ed93 5b00 	vldr	d5, [r3]
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <PIDpit+0x118>)
 8000d0a:	ed93 7b00 	vldr	d7, [r3]
 8000d0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <PIDpit+0x128>)
 8000d18:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <PIDpit+0x128>)
 8000d1e:	ed93 7b00 	vldr	d7, [r3]
 8000d22:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000d80 <PIDpit+0xf8>
 8000d26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	dd05      	ble.n	8000d3c <PIDpit+0xb4>
	{
		pitPID = MAX_PIT_PID;
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <PIDpit+0x128>)
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	4c1f      	ldr	r4, [pc, #124]	; (8000db4 <PIDpit+0x12c>)
 8000d38:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(pitPID < MIN_PIT_PID)
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <PIDpit+0x128>)
 8000d3e:	ed93 7b00 	vldr	d7, [r3]
 8000d42:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000d88 <PIDpit+0x100>
 8000d46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	d505      	bpl.n	8000d5c <PIDpit+0xd4>
	{
		pitPID = MIN_PIT_PID;
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <PIDpit+0x128>)
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	4c18      	ldr	r4, [pc, #96]	; (8000db8 <PIDpit+0x130>)
 8000d58:	e9c2 3400 	strd	r3, r4, [r2]
	}
	pitPreError = pitError;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <PIDpit+0x108>)
 8000d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <PIDpit+0x110>)
 8000d64:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <PIDpit+0x128>)
 8000d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d6e:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d72:	eeb0 0b47 	vmov.f64	d0, d7
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc90      	pop	{r4, r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40590000 	.word	0x40590000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	c0590000 	.word	0xc0590000
 8000d90:	24000308 	.word	0x24000308
 8000d94:	24000900 	.word	0x24000900
 8000d98:	240000f0 	.word	0x240000f0
 8000d9c:	240001b0 	.word	0x240001b0
 8000da0:	24000800 	.word	0x24000800
 8000da4:	24000038 	.word	0x24000038
 8000da8:	24000310 	.word	0x24000310
 8000dac:	24000b38 	.word	0x24000b38
 8000db0:	240009e0 	.word	0x240009e0
 8000db4:	40590000 	.word	0x40590000
 8000db8:	c0590000 	.word	0xc0590000
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <roL_pit_yaw_mixSpeed>:
	controlMotor4(yawPID);
	// spinalCordTrans();
}

void roL_pit_yaw_mixSpeed(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08d      	sub	sp, #52	; 0x34
 8000dc4:	af00      	add	r7, sp, #0
	double _roL_pit_speed = sqrt(roLPID*roLPID + pitPID*pitPID);
 8000dc6:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <roL_pit_yaw_mixSpeed+0x218>)
 8000dc8:	ed93 6b00 	vldr	d6, [r3]
 8000dcc:	4b82      	ldr	r3, [pc, #520]	; (8000fd8 <roL_pit_yaw_mixSpeed+0x218>)
 8000dce:	ed93 7b00 	vldr	d7, [r3]
 8000dd2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000dd6:	4b81      	ldr	r3, [pc, #516]	; (8000fdc <roL_pit_yaw_mixSpeed+0x21c>)
 8000dd8:	ed93 5b00 	vldr	d5, [r3]
 8000ddc:	4b7f      	ldr	r3, [pc, #508]	; (8000fdc <roL_pit_yaw_mixSpeed+0x21c>)
 8000dde:	ed93 7b00 	vldr	d7, [r3]
 8000de2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000de6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dea:	eeb0 0b47 	vmov.f64	d0, d7
 8000dee:	f00c f8a3 	bl	800cf38 <sqrt>
 8000df2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roL_pit_dir = atan2(roLPID, pitPID);
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <roL_pit_yaw_mixSpeed+0x218>)
 8000df8:	ed93 7b00 	vldr	d7, [r3]
 8000dfc:	4b77      	ldr	r3, [pc, #476]	; (8000fdc <roL_pit_yaw_mixSpeed+0x21c>)
 8000dfe:	ed93 6b00 	vldr	d6, [r3]
 8000e02:	eeb0 1b46 	vmov.f64	d1, d6
 8000e06:	eeb0 0b47 	vmov.f64	d0, d7
 8000e0a:	f00c f891 	bl	800cf30 <atan2>
 8000e0e:	ed87 0b08 	vstr	d0, [r7, #32]
//	double _motor1Speed = yawPID + -(_roL_pit_speed *sin(_roL_pit_dir + M_PI/4) + 0);
//	double _motor2Speed = yawPID + -(_roL_pit_speed *cos(_roL_pit_dir + M_PI/4) - 0);
//	double _motor3Speed = yawPID +   _roL_pit_speed *sin(_roL_pit_dir + M_PI/4) + 0;
//	double _motor4Speed = yawPID +   _roL_pit_speed *cos(_roL_pit_dir + M_PI/4) - 0;

	double _motor1Speed = yawPID + (_roL_pit_speed *cos(3.0*M_PI/4.0 - _roL_pit_dir) + 0.0);
 8000e12:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8000fc0 <roL_pit_yaw_mixSpeed+0x200>
 8000e16:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e1e:	eeb0 0b47 	vmov.f64	d0, d7
 8000e22:	f00c f849 	bl	800ceb8 <cos>
 8000e26:	eeb0 6b40 	vmov.f64	d6, d0
 8000e2a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e32:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8000fc8 <roL_pit_yaw_mixSpeed+0x208>
 8000e36:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e3a:	4b69      	ldr	r3, [pc, #420]	; (8000fe0 <roL_pit_yaw_mixSpeed+0x220>)
 8000e3c:	ed93 7b00 	vldr	d7, [r3]
 8000e40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e44:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID + (_roL_pit_speed *cos(3.0*M_PI/4.0 + _roL_pit_dir) - 0.0);
 8000e48:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e4c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000fc0 <roL_pit_yaw_mixSpeed+0x200>
 8000e50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e54:	eeb0 0b47 	vmov.f64	d0, d7
 8000e58:	f00c f82e 	bl	800ceb8 <cos>
 8000e5c:	eeb0 6b40 	vmov.f64	d6, d0
 8000e60:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e68:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <roL_pit_yaw_mixSpeed+0x220>)
 8000e6a:	ed93 7b00 	vldr	d7, [r3]
 8000e6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e72:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID +  _roL_pit_speed *cos(    M_PI/4.0 + _roL_pit_dir) + 0.0;
 8000e76:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e7a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8000fd0 <roL_pit_yaw_mixSpeed+0x210>
 8000e7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e82:	eeb0 0b47 	vmov.f64	d0, d7
 8000e86:	f00c f817 	bl	800ceb8 <cos>
 8000e8a:	eeb0 6b40 	vmov.f64	d6, d0
 8000e8e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e92:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e96:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <roL_pit_yaw_mixSpeed+0x220>)
 8000e98:	ed93 7b00 	vldr	d7, [r3]
 8000e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ea0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8000fc8 <roL_pit_yaw_mixSpeed+0x208>
 8000ea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ea8:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID +  _roL_pit_speed *cos(    M_PI/4.0 - _roL_pit_dir) - 0.0;
 8000eac:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8000fd0 <roL_pit_yaw_mixSpeed+0x210>
 8000eb0:	ed97 7b08 	vldr	d7, [r7, #32]
 8000eb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000eb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000ebc:	f00b fffc 	bl	800ceb8 <cos>
 8000ec0:	eeb0 6b40 	vmov.f64	d6, d0
 8000ec4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ec8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ecc:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <roL_pit_yaw_mixSpeed+0x220>)
 8000ece:	ed93 7b00 	vldr	d7, [r3]
 8000ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed6:	ed87 7b00 	vstr	d7, [r7]
	a = 1.0 - _motor1Speed;
 8000eda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ede:	ed97 7b06 	vldr	d7, [r7, #24]
 8000ee2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <roL_pit_yaw_mixSpeed+0x224>)
 8000ee8:	ed83 7b00 	vstr	d7, [r3]
	b = 1.0 - _motor3Speed;
 8000eec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ef0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ef4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ef8:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <roL_pit_yaw_mixSpeed+0x228>)
 8000efa:	ed83 7b00 	vstr	d7, [r3]
	absSpeed = _roL_pit_speed;
 8000efe:	4a3b      	ldr	r2, [pc, #236]	; (8000fec <roL_pit_yaw_mixSpeed+0x22c>)
 8000f00:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000f04:	e9c2 3400 	strd	r3, r4, [r2]
	dir = _roL_pit_dir;
 8000f08:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <roL_pit_yaw_mixSpeed+0x230>)
 8000f0a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f0e:	e9c2 3400 	strd	r3, r4, [r2]
	cos_ = cos(3*M_PI/4 - _roL_pit_dir);
 8000f12:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000fc0 <roL_pit_yaw_mixSpeed+0x200>
 8000f16:	ed97 7b08 	vldr	d7, [r7, #32]
 8000f1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f1e:	eeb0 0b47 	vmov.f64	d0, d7
 8000f22:	f00b ffc9 	bl	800ceb8 <cos>
 8000f26:	eeb0 7b40 	vmov.f64	d7, d0
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <roL_pit_yaw_mixSpeed+0x234>)
 8000f2c:	ed83 7b00 	vstr	d7, [r3]
	motor1_debug = absSpeed*cos_;
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <roL_pit_yaw_mixSpeed+0x22c>)
 8000f32:	ed93 6b00 	vldr	d6, [r3]
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <roL_pit_yaw_mixSpeed+0x234>)
 8000f38:	ed93 7b00 	vldr	d7, [r3]
 8000f3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <roL_pit_yaw_mixSpeed+0x238>)
 8000f42:	ed83 7b00 	vstr	d7, [r3]
	motor1Speed_ = _motor1Speed;
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <roL_pit_yaw_mixSpeed+0x23c>)
 8000f48:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000f4c:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 8000f50:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <roL_pit_yaw_mixSpeed+0x240>)
 8000f52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f56:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <roL_pit_yaw_mixSpeed+0x244>)
 8000f5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f60:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <roL_pit_yaw_mixSpeed+0x248>)
 8000f66:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f6a:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 8000f6e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f76:	ee17 0a90 	vmov	r0, s15
 8000f7a:	f7ff fc9d 	bl	80008b8 <controlMotor1>
	controlMotor2(_motor2Speed);
 8000f7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f86:	ee17 0a90 	vmov	r0, s15
 8000f8a:	f7ff fcbb 	bl	8000904 <controlMotor2>
	controlMotor3(_motor3Speed);
 8000f8e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f96:	ee17 0a90 	vmov	r0, s15
 8000f9a:	f7ff fcd9 	bl	8000950 <controlMotor3>
	controlMotor4(_motor4Speed);
 8000f9e:	ed97 7b00 	vldr	d7, [r7]
 8000fa2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fa6:	ee17 0a90 	vmov	r0, s15
 8000faa:	f7ff fcf7 	bl	800099c <controlMotor4>
	spinalCordTrans();
 8000fae:	f7ff fc53 	bl	8000858 <spinalCordTrans>
}
 8000fb2:	bf00      	nop
 8000fb4:	3734      	adds	r7, #52	; 0x34
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	7f3321d2 	.word	0x7f3321d2
 8000fc4:	4002d97c 	.word	0x4002d97c
	...
 8000fd0:	54442d18 	.word	0x54442d18
 8000fd4:	3fe921fb 	.word	0x3fe921fb
 8000fd8:	240007f8 	.word	0x240007f8
 8000fdc:	240009e0 	.word	0x240009e0
 8000fe0:	24000a38 	.word	0x24000a38
 8000fe4:	24000b40 	.word	0x24000b40
 8000fe8:	240000f8 	.word	0x240000f8
 8000fec:	24000a18 	.word	0x24000a18
 8000ff0:	24000a28 	.word	0x24000a28
 8000ff4:	24000af8 	.word	0x24000af8
 8000ff8:	24000300 	.word	0x24000300
 8000ffc:	240000e8 	.word	0x240000e8
 8001000:	24000b20 	.word	0x24000b20
 8001004:	240009e8 	.word	0x240009e8
 8001008:	240007d0 	.word	0x240007d0

0800100c <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fc51 	bl	80008b8 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	f7ff fc73 	bl	8000904 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fc96 	bl	8000950 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff fcb8 	bl	800099c <controlMotor4>
	spinalCordTrans();
 800102c:	f7ff fc14 	bl	8000858 <spinalCordTrans>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <positionControl_Init+0x18>)
 800103a:	f008 f819 	bl	8009070 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <positionControl_Init+0x1c>)
 8001044:	f005 f96a 	bl	800631c <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	24000b50 	.word	0x24000b50
 8001050:	58021000 	.word	0x58021000

08001054 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d16e      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d16a      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d11e      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107e:	4837      	ldr	r0, [pc, #220]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001080:	f005 f94c 	bl	800631c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001088:	4834      	ldr	r0, [pc, #208]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800108a:	f005 f960 	bl	800634e <HAL_GPIO_TogglePin>
				trackingLeg++;
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001096:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010a0:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2bc7      	cmp	r3, #199	; 0xc7
 80010a8:	dd05      	ble.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d11f      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c4:	4825      	ldr	r0, [pc, #148]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010c6:	f005 f929 	bl	800631c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80010ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ce:	4823      	ldr	r0, [pc, #140]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010d0:	f005 f93d 	bl	800634e <HAL_GPIO_TogglePin>
				trackingLeg++;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010dc:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010e6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80010f0:	db05      	blt.n	80010fe <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d11f      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800110e:	f005 f905 	bl	800631c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001116:	4811      	ldr	r0, [pc, #68]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001118:	f005 f919 	bl	800634e <HAL_GPIO_TogglePin>
				trackingLeg++;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001124:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800112e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001138:	db05      	blt.n	8001146 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	24000b50 	.word	0x24000b50
 8001154:	240009b8 	.word	0x240009b8
 8001158:	24000af0 	.word	0x24000af0
 800115c:	58020c00 	.word	0x58020c00
 8001160:	240009b0 	.word	0x240009b0
 8001164:	24000a0c 	.word	0x24000a0c

08001168 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e01f      	b.n	80011b8 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8001188:	2201      	movs	r2, #1
 800118a:	2104      	movs	r1, #4
 800118c:	480e      	ldr	r0, [pc, #56]	; (80011c8 <SendByteSPI+0x60>)
 800118e:	f005 f8c5 	bl	800631c <HAL_GPIO_WritePin>
 8001192:	e004      	b.n	800119e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8001194:	2200      	movs	r2, #0
 8001196:	2104      	movs	r1, #4
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <SendByteSPI+0x60>)
 800119a:	f005 f8bf 	bl	800631c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	480a      	ldr	r0, [pc, #40]	; (80011cc <SendByteSPI+0x64>)
 80011a4:	f005 f8ba 	bl	800631c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 80011a8:	2201      	movs	r2, #1
 80011aa:	2101      	movs	r1, #1
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <SendByteSPI+0x64>)
 80011ae:	f005 f8b5 	bl	800631c <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	dddc      	ble.n	8001178 <SendByteSPI+0x10>

	}
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	58021800 	.word	0x58021800
 80011cc:	58020400 	.word	0x58020400

080011d0 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80011da:	2201      	movs	r2, #1
 80011dc:	2101      	movs	r1, #1
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7920_SendCmd+0x4c>)
 80011e0:	f005 f89c 	bl	800631c <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 80011e4:	20f8      	movs	r0, #248	; 0xf8
 80011e6:	f7ff ffbf 	bl	8001168 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffb8 	bl	8001168 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffb2 	bl	8001168 <SendByteSPI>
	delayUs(50);
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f7ff fa07 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <ST7920_SendCmd+0x4c>)
 8001210:	f005 f884 	bl	800631c <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58021800 	.word	0x58021800

08001220 <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8001224:	2200      	movs	r2, #0
 8001226:	2108      	movs	r1, #8
 8001228:	481c      	ldr	r0, [pc, #112]	; (800129c <ST7920_Init+0x7c>)
 800122a:	f005 f877 	bl	800631c <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 800122e:	200a      	movs	r0, #10
 8001230:	f001 f8d2 	bl	80023d8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <ST7920_Init+0x7c>)
 800123a:	f005 f86f 	bl	800631c <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 800123e:	2032      	movs	r0, #50	; 0x32
 8001240:	f001 f8ca 	bl	80023d8 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8001244:	2030      	movs	r0, #48	; 0x30
 8001246:	f7ff ffc3 	bl	80011d0 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 800124a:	206e      	movs	r0, #110	; 0x6e
 800124c:	f7ff f9e4 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8001250:	2030      	movs	r0, #48	; 0x30
 8001252:	f7ff ffbd 	bl	80011d0 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f7ff f9de 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 800125c:	2008      	movs	r0, #8
 800125e:	f7ff ffb7 	bl	80011d0 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8001262:	206e      	movs	r0, #110	; 0x6e
 8001264:	f7ff f9d8 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff ffb1 	bl	80011d0 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800126e:	200c      	movs	r0, #12
 8001270:	f001 f8b2 	bl	80023d8 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff ffab 	bl	80011d0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800127a:	2001      	movs	r0, #1
 800127c:	f001 f8ac 	bl	80023d8 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8001280:	200c      	movs	r0, #12
 8001282:	f7ff ffa5 	bl	80011d0 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8001286:	2001      	movs	r0, #1
 8001288:	f001 f8a6 	bl	80023d8 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff ff9f 	bl	80011d0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8001292:	2001      	movs	r0, #1
 8001294:	f001 f8a0 	bl	80023d8 <HAL_Delay>

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58021800 	.word	0x58021800

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f001 f806 	bl	80022b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f844 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f000 fb24 	bl	80018f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b0:	f000 fae2 	bl	8001878 <MX_DMA_Init>
  MX_ADC3_Init();
 80012b4:	f000 f8f4 	bl	80014a0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80012b8:	f000 f9fa 	bl	80016b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80012bc:	f000 fa44 	bl	8001748 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80012c0:	f000 f972 	bl	80015a8 <MX_TIM7_Init>
  MX_UART7_Init();
 80012c4:	f000 f9a8 	bl	8001618 <MX_UART7_Init>
  MX_USART6_UART_Init();
 80012c8:	f000 fa8a 	bl	80017e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 80012cc:	f7ff f984 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 80012d0:	f7ff f9c8 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 80012d4:	f7ff fae2 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 80012d8:	f7ff feac 	bl	8001034 <positionControl_Init>
  ST7920_Init();
 80012dc:	f7ff ffa0 	bl	8001220 <ST7920_Init>

  tracking = 1000;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <main+0x88>)
 80012e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e6:	601a      	str	r2, [r3, #0]
  brake();
 80012e8:	f7ff fe90 	bl	800100c <brake>
  compassReset();
 80012ec:	f7ff fa7e 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2101      	movs	r1, #1
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <main+0x8c>)
 80012f6:	f005 f811 	bl	800631c <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 80012fa:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80012fe:	f001 f86b 	bl	80023d8 <HAL_Delay>
//		  spinalCordTrans();
//	  }



	  PIDyaw(compassData, 0);
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <main+0x90>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fb6c 	bl	80009e8 <PIDyaw>
	  PIDroL(0,100);
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fc10 	bl	8000b38 <PIDroL>
	  PIDpit(0,50);
 8001318:	2132      	movs	r1, #50	; 0x32
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fcb4 	bl	8000c88 <PIDpit>
	  roL_pit_yaw_mixSpeed();
 8001320:	f7ff fd4e 	bl	8000dc0 <roL_pit_yaw_mixSpeed>
	  PIDyaw(compassData, 0);
 8001324:	e7ed      	b.n	8001302 <main+0x62>
 8001326:	bf00      	nop
 8001328:	240009d8 	.word	0x240009d8
 800132c:	58020400 	.word	0x58020400
 8001330:	240007e0 	.word	0x240007e0

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0cc      	sub	sp, #304	; 0x130
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800133e:	224c      	movs	r2, #76	; 0x4c
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f00b fdb0 	bl	800cea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800134c:	2220      	movs	r2, #32
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00b fda9 	bl	800cea8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4618      	mov	r0, r3
 800135c:	23bc      	movs	r3, #188	; 0xbc
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	f00b fda1 	bl	800cea8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001366:	2002      	movs	r0, #2
 8001368:	f005 f80c 	bl	8006384 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <SystemClock_Config+0x164>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a48      	ldr	r2, [pc, #288]	; (8001498 <SystemClock_Config+0x164>)
 8001378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <SystemClock_Config+0x164>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <SystemClock_Config+0x168>)
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	4a43      	ldr	r2, [pc, #268]	; (800149c <SystemClock_Config+0x168>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <SystemClock_Config+0x168>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013a6:	bf00      	nop
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <SystemClock_Config+0x164>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b4:	d1f8      	bne.n	80013a8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013bc:	2301      	movs	r3, #1
 80013be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013da:	233c      	movs	r3, #60	; 0x3c
 80013dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013f2:	230c      	movs	r3, #12
 80013f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fff5 	bl	80063f8 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001414:	f000 fb9c 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	233f      	movs	r3, #63	; 0x3f
 800141a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800142a:	2308      	movs	r3, #8
 800142c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800143c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001440:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f005 fba9 	bl	8006ba8 <HAL_RCC_ClockConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800145c:	f000 fb78 	bl	8001b50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2203      	movs	r2, #3
 8001466:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2200      	movs	r2, #0
 8001476:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f005 ff17 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001488:	f000 fb62 	bl	8001b50 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58024800 	.word	0x58024800
 800149c:	58000400 	.word	0x58000400

080014a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014ba:	4a37      	ldr	r2, [pc, #220]	; (8001598 <MX_ADC3_Init+0xf8>)
 80014bc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014c8:	2208      	movs	r2, #8
 80014ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014d8:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MX_ADC3_Init+0xf4>)
 80014fe:	2203      	movs	r2, #3
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_ADC3_Init+0xf4>)
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_ADC3_Init+0xf4>)
 800150a:	2200      	movs	r2, #0
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_ADC3_Init+0xf4>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <MX_ADC3_Init+0xf4>)
 8001518:	f001 f97e 	bl	8002818 <HAL_ADC_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001522:	f000 fb15 	bl	8001b50 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_ADC3_Init+0xfc>)
 8001528:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152a:	2306      	movs	r3, #6
 800152c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800152e:	2306      	movs	r3, #6
 8001530:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001532:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001536:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001538:	2304      	movs	r3, #4
 800153a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_ADC3_Init+0xf4>)
 8001546:	f001 fbe9 	bl	8002d1c <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001550:	f000 fafe 	bl	8001b50 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_ADC3_Init+0x100>)
 8001556:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001558:	230c      	movs	r3, #12
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_ADC3_Init+0xf4>)
 8001562:	f001 fbdb 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800156c:	f000 faf0 	bl	8001b50 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_ADC3_Init+0x104>)
 8001572:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001574:	2312      	movs	r3, #18
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_ADC3_Init+0xf4>)
 800157e:	f001 fbcd 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001588:	f000 fae2 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2400081c 	.word	0x2400081c
 8001598:	58026000 	.word	0x58026000
 800159c:	04300002 	.word	0x04300002
 80015a0:	2a000400 	.word	0x2a000400
 80015a4:	2e300800 	.word	0x2e300800

080015a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM7_Init+0x68>)
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <MX_TIM7_Init+0x6c>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_TIM7_Init+0x68>)
 80015c0:	f640 125f 	movw	r2, #2399	; 0x95f
 80015c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_TIM7_Init+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_TIM7_Init+0x68>)
 80015ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_TIM7_Init+0x68>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM7_Init+0x68>)
 80015dc:	f007 fd1c 	bl	8009018 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80015e6:	f000 fab3 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_TIM7_Init+0x68>)
 80015f8:	f007 ff46 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001602:	f000 faa5 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000b50 	.word	0x24000b50
 8001614:	40001400 	.word	0x40001400

08001618 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_UART7_Init+0x90>)
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <MX_UART7_Init+0x94>)
 8001620:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_UART7_Init+0x90>)
 8001624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001628:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_UART7_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_UART7_Init+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_UART7_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_UART7_Init+0x90>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_UART7_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_UART7_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_UART7_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_UART7_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_UART7_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_UART7_Init+0x90>)
 8001662:	f007 ffb7 	bl	80095d4 <HAL_UART_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800166c:	f000 fa70 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001670:	2100      	movs	r1, #0
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_UART7_Init+0x90>)
 8001674:	f00b fb09 	bl	800cc8a <HAL_UARTEx_SetTxFifoThreshold>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800167e:	f000 fa67 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001682:	2100      	movs	r1, #0
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MX_UART7_Init+0x90>)
 8001686:	f00b fb3e 	bl	800cd06 <HAL_UARTEx_SetRxFifoThreshold>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001690:	f000 fa5e 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_UART7_Init+0x90>)
 8001696:	f00b fabf 	bl	800cc18 <HAL_UARTEx_DisableFifoMode>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016a0:	f000 fa56 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	24000120 	.word	0x24000120
 80016ac:	40007800 	.word	0x40007800

080016b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <MX_USART1_UART_Init+0x94>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_USART1_UART_Init+0x90>)
 80016fa:	f007 ff6b 	bl	80095d4 <HAL_UART_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 fa24 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_USART1_UART_Init+0x90>)
 800170c:	f00b fabd 	bl	800cc8a <HAL_UARTEx_SetTxFifoThreshold>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001716:	f000 fa1b 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <MX_USART1_UART_Init+0x90>)
 800171e:	f00b faf2 	bl	800cd06 <HAL_UARTEx_SetRxFifoThreshold>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001728:	f000 fa12 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_USART1_UART_Init+0x90>)
 800172e:	f00b fa73 	bl	800cc18 <HAL_UARTEx_DisableFifoMode>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001738:	f000 fa0a 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	24000920 	.word	0x24000920
 8001744:	40011000 	.word	0x40011000

08001748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_USART3_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001754:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 8001792:	f007 ff1f 	bl	80095d4 <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f000 f9d8 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 80017a4:	f00b fa71 	bl	800cc8a <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f000 f9cf 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 80017b6:	f00b faa6 	bl	800cd06 <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 f9c6 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USART3_UART_Init+0x90>)
 80017c6:	f00b fa27 	bl	800cc18 <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f000 f9be 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	24000254 	.word	0x24000254
 80017dc:	40004800 	.word	0x40004800

080017e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_USART6_UART_Init+0x90>)
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <MX_USART6_UART_Init+0x94>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_USART6_UART_Init+0x90>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_USART6_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_USART6_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_USART6_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_USART6_UART_Init+0x90>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_USART6_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_USART6_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_USART6_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART6_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART6_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_USART6_UART_Init+0x90>)
 800182a:	f007 fed3 	bl	80095d4 <HAL_UART_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001834:	f000 f98c 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_USART6_UART_Init+0x90>)
 800183c:	f00b fa25 	bl	800cc8a <HAL_UARTEx_SetTxFifoThreshold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001846:	f000 f983 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_USART6_UART_Init+0x90>)
 800184e:	f00b fa5a 	bl	800cd06 <HAL_UARTEx_SetRxFifoThreshold>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001858:	f000 f97a 	bl	8001b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USART6_UART_Init+0x90>)
 800185e:	f00b f9db 	bl	800cc18 <HAL_UARTEx_DisableFifoMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001868:	f000 f972 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	24000a40 	.word	0x24000a40
 8001874:	40011400 	.word	0x40011400

08001878 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_DMA_Init+0x7c>)
 8001880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <MX_DMA_Init+0x7c>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_DMA_Init+0x7c>)
 8001890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_DMA_Init+0x7c>)
 800189e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018a2:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <MX_DMA_Init+0x7c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_DMA_Init+0x7c>)
 80018ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200d      	movs	r0, #13
 80018c0:	f002 f82b 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80018c4:	200d      	movs	r0, #13
 80018c6:	f002 f842 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200e      	movs	r0, #14
 80018d0:	f002 f823 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018d4:	200e      	movs	r0, #14
 80018d6:	f002 f83a 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	203a      	movs	r0, #58	; 0x3a
 80018e0:	f002 f81b 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018e4:	203a      	movs	r0, #58	; 0x3a
 80018e6:	f002 f832 	bl	800394e <HAL_NVIC_EnableIRQ>

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	58024400 	.word	0x58024400

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a87      	ldr	r2, [pc, #540]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b85      	ldr	r3, [pc, #532]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192c:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193c:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	4a78      	ldr	r2, [pc, #480]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001978:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001986:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a69      	ldr	r2, [pc, #420]	; (8001b34 <MX_GPIO_Init+0x23c>)
 800198e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <MX_GPIO_Init+0x23c>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <MX_GPIO_Init+0x23c>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <MX_GPIO_Init+0x23c>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b4:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <MX_GPIO_Init+0x23c>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <MX_GPIO_Init+0x23c>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <MX_GPIO_Init+0x23c>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <MX_GPIO_Init+0x23c>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f240 7104 	movw	r1, #1796	; 0x704
 80019e6:	4854      	ldr	r0, [pc, #336]	; (8001b38 <MX_GPIO_Init+0x240>)
 80019e8:	f004 fc98 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2110      	movs	r1, #16
 80019f0:	4852      	ldr	r0, [pc, #328]	; (8001b3c <MX_GPIO_Init+0x244>)
 80019f2:	f004 fc93 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80019f6:	2200      	movs	r2, #0
 80019f8:	f242 0167 	movw	r1, #8295	; 0x2067
 80019fc:	4850      	ldr	r0, [pc, #320]	; (8001b40 <MX_GPIO_Init+0x248>)
 80019fe:	f004 fc8d 	bl	800631c <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001a02:	2200      	movs	r2, #0
 8001a04:	f643 610d 	movw	r1, #15885	; 0x3e0d
 8001a08:	484e      	ldr	r0, [pc, #312]	; (8001b44 <MX_GPIO_Init+0x24c>)
 8001a0a:	f004 fc87 	bl	800631c <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2182      	movs	r1, #130	; 0x82
 8001a12:	484d      	ldr	r0, [pc, #308]	; (8001b48 <MX_GPIO_Init+0x250>)
 8001a14:	f004 fc82 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 8001a1e:	484b      	ldr	r0, [pc, #300]	; (8001b4c <MX_GPIO_Init+0x254>)
 8001a20:	f004 fc7c 	bl	800631c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001a24:	f240 7304 	movw	r3, #1796	; 0x704
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	483e      	ldr	r0, [pc, #248]	; (8001b38 <MX_GPIO_Init+0x240>)
 8001a3e:	f004 fabd 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a42:	2310      	movs	r3, #16
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	4838      	ldr	r0, [pc, #224]	; (8001b3c <MX_GPIO_Init+0x244>)
 8001a5a:	f004 faaf 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001a5e:	f242 0367 	movw	r3, #8295	; 0x2067
 8001a62:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4832      	ldr	r0, [pc, #200]	; (8001b40 <MX_GPIO_Init+0x248>)
 8001a78:	f004 faa0 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001a7c:	230d      	movs	r3, #13
 8001a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	482c      	ldr	r0, [pc, #176]	; (8001b44 <MX_GPIO_Init+0x24c>)
 8001a94:	f004 fa92 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4826      	ldr	r0, [pc, #152]	; (8001b48 <MX_GPIO_Init+0x250>)
 8001ab0:	f004 fa84 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8001ab4:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	481f      	ldr	r0, [pc, #124]	; (8001b4c <MX_GPIO_Init+0x254>)
 8001ace:	f004 fa75 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4818      	ldr	r0, [pc, #96]	; (8001b4c <MX_GPIO_Init+0x254>)
 8001aec:	f004 fa66 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001af0:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001af4:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	480e      	ldr	r0, [pc, #56]	; (8001b44 <MX_GPIO_Init+0x24c>)
 8001b0a:	f004 fa57 	bl	8005fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4808      	ldr	r0, [pc, #32]	; (8001b48 <MX_GPIO_Init+0x250>)
 8001b26:	f004 fa49 	bl	8005fbc <HAL_GPIO_Init>

}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	; 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58020000 	.word	0x58020000
 8001b3c:	58020800 	.word	0x58020800
 8001b40:	58020400 	.word	0x58020400
 8001b44:	58021800 	.word	0x58021800
 8001b48:	58021000 	.word	0x58021000
 8001b4c:	58020c00 	.word	0x58020c00

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x30>)
 8001b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_MspInit+0x30>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_MspInit+0x30>)
 8001b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58024400 	.word	0x58024400

08001b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a33      	ldr	r2, [pc, #204]	; (8001c80 <HAL_ADC_MspInit+0xec>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d15f      	bne.n	8001c76 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_ADC_MspInit+0xf0>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <HAL_ADC_MspInit+0xf0>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_ADC_MspInit+0xf0>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_ADC_MspInit+0xf0>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <HAL_ADC_MspInit+0xf0>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_ADC_MspInit+0xf0>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4820      	ldr	r0, [pc, #128]	; (8001c88 <HAL_ADC_MspInit+0xf4>)
 8001c06:	f004 f9d9 	bl	8005fbc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001c0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001c0e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c12:	f000 fc0f 	bl	8002434 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_ADC_MspInit+0xfc>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c1e:	2273      	movs	r2, #115	; 0x73
 8001c20:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c34:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c3c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c44:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c5c:	f001 fe92 	bl	8003984 <HAL_DMA_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001c66:	f7ff ff73 	bl	8001b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_ADC_MspInit+0xf8>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58026000 	.word	0x58026000
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58020800 	.word	0x58020800
 8001c8c:	24000748 	.word	0x24000748
 8001c90:	40020040 	.word	0x40020040

08001c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_TIM_Base_MspInit+0x48>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d116      	bne.n	8001cd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_TIM_Base_MspInit+0x4c>)
 8001ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_TIM_Base_MspInit+0x4c>)
 8001cae:	f043 0320 	orr.w	r3, r3, #32
 8001cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_TIM_Base_MspInit+0x4c>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2037      	movs	r0, #55	; 0x37
 8001cca:	f001 fe26 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cce:	2037      	movs	r0, #55	; 0x37
 8001cd0:	f001 fe3d 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40001400 	.word	0x40001400
 8001ce0:	58024400 	.word	0x58024400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4aa3      	ldr	r2, [pc, #652]	; (8001f90 <HAL_UART_MspInit+0x2ac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d136      	bne.n	8001d74 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d06:	4ba3      	ldr	r3, [pc, #652]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0c:	4aa1      	ldr	r2, [pc, #644]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d16:	4b9f      	ldr	r3, [pc, #636]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d24:	4b9b      	ldr	r3, [pc, #620]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	4a9a      	ldr	r2, [pc, #616]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d34:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001d52:	2307      	movs	r3, #7
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	488e      	ldr	r0, [pc, #568]	; (8001f98 <HAL_UART_MspInit+0x2b4>)
 8001d5e:	f004 f92d 	bl	8005fbc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2104      	movs	r1, #4
 8001d66:	2052      	movs	r0, #82	; 0x52
 8001d68:	f001 fdd7 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001d6c:	2052      	movs	r0, #82	; 0x52
 8001d6e:	f001 fdee 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d72:	e108      	b.n	8001f86 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a88      	ldr	r2, [pc, #544]	; (8001f9c <HAL_UART_MspInit+0x2b8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d165      	bne.n	8001e4a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7e:	4b85      	ldr	r3, [pc, #532]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d84:	4a83      	ldr	r2, [pc, #524]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d8e:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	623b      	str	r3, [r7, #32]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da2:	4a7c      	ldr	r2, [pc, #496]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dac:	4b79      	ldr	r3, [pc, #484]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001dba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4872      	ldr	r0, [pc, #456]	; (8001fa0 <HAL_UART_MspInit+0x2bc>)
 8001dd8:	f004 f8f0 	bl	8005fbc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001ddc:	4b71      	ldr	r3, [pc, #452]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001dde:	4a72      	ldr	r2, [pc, #456]	; (8001fa8 <HAL_UART_MspInit+0x2c4>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001de4:	2229      	movs	r2, #41	; 0x29
 8001de6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de8:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dee:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df4:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfc:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e02:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e10:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e1c:	4861      	ldr	r0, [pc, #388]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e1e:	f001 fdb1 	bl	8003984 <HAL_DMA_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001e28:	f7ff fe92 	bl	8001b50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e30:	679a      	str	r2, [r3, #120]	; 0x78
 8001e32:	4a5c      	ldr	r2, [pc, #368]	; (8001fa4 <HAL_UART_MspInit+0x2c0>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2025      	movs	r0, #37	; 0x25
 8001e3e:	f001 fd6c 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e42:	2025      	movs	r0, #37	; 0x25
 8001e44:	f001 fd83 	bl	800394e <HAL_NVIC_EnableIRQ>
}
 8001e48:	e09d      	b.n	8001f86 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a57      	ldr	r2, [pc, #348]	; (8001fac <HAL_UART_MspInit+0x2c8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d15d      	bne.n	8001f10 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e54:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5a:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e82:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001e90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	483c      	ldr	r0, [pc, #240]	; (8001fa0 <HAL_UART_MspInit+0x2bc>)
 8001eae:	f004 f885 	bl	8005fbc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <HAL_UART_MspInit+0x2d0>)
 8001eb6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001eba:	222d      	movs	r2, #45	; 0x2d
 8001ebc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ede:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee6:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ef2:	482f      	ldr	r0, [pc, #188]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001ef4:	f001 fd46 	bl	8003984 <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001efe:	f7ff fe27 	bl	8001b50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001f06:	679a      	str	r2, [r3, #120]	; 0x78
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <HAL_UART_MspInit+0x2cc>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f0e:	e03a      	b.n	8001f86 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <HAL_UART_MspInit+0x2d4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d135      	bne.n	8001f86 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001f22:	f043 0320 	orr.w	r3, r3, #32
 8001f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_UART_MspInit+0x2b0>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001f66:	2307      	movs	r3, #7
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4812      	ldr	r0, [pc, #72]	; (8001fbc <HAL_UART_MspInit+0x2d8>)
 8001f72:	f004 f823 	bl	8005fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2102      	movs	r1, #2
 8001f7a:	2047      	movs	r0, #71	; 0x47
 8001f7c:	f001 fccd 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f80:	2047      	movs	r0, #71	; 0x47
 8001f82:	f001 fce4 	bl	800394e <HAL_NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3740      	adds	r7, #64	; 0x40
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40007800 	.word	0x40007800
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58021400 	.word	0x58021400
 8001f9c:	40011000 	.word	0x40011000
 8001fa0:	58020400 	.word	0x58020400
 8001fa4:	24000884 	.word	0x24000884
 8001fa8:	40020058 	.word	0x40020058
 8001fac:	40004800 	.word	0x40004800
 8001fb0:	240001c4 	.word	0x240001c4
 8001fb4:	40020440 	.word	0x40020440
 8001fb8:	40011400 	.word	0x40011400
 8001fbc:	58020800 	.word	0x58020800

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <SysTick_Handler+0x2c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <SysTick_Handler+0x2c>)
 800201e:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <SysTick_Handler+0x2c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d904      	bls.n	8002032 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Handler+0x2c>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 800202e:	f7fe fbf3 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002032:	f000 f9b1 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	24000910 	.word	0x24000910

08002040 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA1_Stream2_IRQHandler+0x10>)
 8002046:	f002 fca7 	bl	8004998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	24000748 	.word	0x24000748

08002054 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <DMA1_Stream3_IRQHandler+0x24>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <DMA1_Stream3_IRQHandler+0x24>)
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21a      	sxth	r2, r3
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <DMA1_Stream3_IRQHandler+0x28>)
 800206c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800206e:	4804      	ldr	r0, [pc, #16]	; (8002080 <DMA1_Stream3_IRQHandler+0x2c>)
 8002070:	f002 fc92 	bl	8004998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24000720 	.word	0x24000720
 800207c:	240007e0 	.word	0x240007e0
 8002080:	24000884 	.word	0x24000884

08002084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <USART1_IRQHandler+0x10>)
 800208a:	f007 fd6d 	bl	8009b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	24000920 	.word	0x24000920

08002098 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM7_IRQHandler+0x10>)
 800209e:	f007 f811 	bl	80090c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	24000b50 	.word	0x24000b50

080020ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 80020b0:	4b28      	ldr	r3, [pc, #160]	; (8002154 <DMA2_Stream2_IRQHandler+0xa8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d135      	bne.n	8002124 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <DMA2_Stream2_IRQHandler+0xac>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	b2d1      	uxtb	r1, r2
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <DMA2_Stream2_IRQHandler+0xac>)
 80020c2:	7011      	strb	r1, [r2, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <DMA2_Stream2_IRQHandler+0xb0>)
 80020c8:	7819      	ldrb	r1, [r3, #0]
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 80020cc:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <DMA2_Stream2_IRQHandler+0xac>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d926      	bls.n	8002124 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <DMA2_Stream2_IRQHandler+0xac>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <DMA2_Stream2_IRQHandler+0xa8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	4313      	orrs	r3, r2
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <DMA2_Stream2_IRQHandler+0xb8>)
 80020f6:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 80020fa:	789b      	ldrb	r3, [r3, #2]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b21a      	sxth	r2, r3
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 8002102:	78db      	ldrb	r3, [r3, #3]
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b21a      	sxth	r2, r3
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <DMA2_Stream2_IRQHandler+0xbc>)
 800210c:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <DMA2_Stream2_IRQHandler+0xb4>)
 8002118:	795b      	ldrb	r3, [r3, #5]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21a      	sxth	r2, r3
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <DMA2_Stream2_IRQHandler+0xc0>)
 8002122:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <DMA2_Stream2_IRQHandler+0xb0>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2baa      	cmp	r3, #170	; 0xaa
 800212a:	d106      	bne.n	800213a <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <DMA2_Stream2_IRQHandler+0xa8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <DMA2_Stream2_IRQHandler+0xa8>)
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e006      	b.n	8002148 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <DMA2_Stream2_IRQHandler+0xa8>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b04      	cmp	r3, #4
 8002140:	d002      	beq.n	8002148 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <DMA2_Stream2_IRQHandler+0xa8>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002148:	4809      	ldr	r0, [pc, #36]	; (8002170 <DMA2_Stream2_IRQHandler+0xc4>)
 800214a:	f002 fc25 	bl	8004998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	240000d4 	.word	0x240000d4
 8002158:	24000814 	.word	0x24000814
 800215c:	24000acc 	.word	0x24000acc
 8002160:	24000718 	.word	0x24000718
 8002164:	240009bc 	.word	0x240009bc
 8002168:	240009c0 	.word	0x240009c0
 800216c:	24000b08 	.word	0x24000b08
 8002170:	240001c4 	.word	0x240001c4

08002174 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <USART6_IRQHandler+0x10>)
 800217a:	f007 fcf5 	bl	8009b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	24000a40 	.word	0x24000a40

08002188 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <UART7_IRQHandler+0x10>)
 800218e:	f007 fceb 	bl	8009b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	24000120 	.word	0x24000120

0800219c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <SystemInit+0xac>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	4a28      	ldr	r2, [pc, #160]	; (8002248 <SystemInit+0xac>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <SystemInit+0xb0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <SystemInit+0xb0>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <SystemInit+0xb0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <SystemInit+0xb0>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4921      	ldr	r1, [pc, #132]	; (800224c <SystemInit+0xb0>)
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <SystemInit+0xb4>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <SystemInit+0xb0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <SystemInit+0xb0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <SystemInit+0xb0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <SystemInit+0xb0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <SystemInit+0xb0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <SystemInit+0xb0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <SystemInit+0xb0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <SystemInit+0xb0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <SystemInit+0xb0>)
 8002200:	2200      	movs	r2, #0
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <SystemInit+0xb0>)
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <SystemInit+0xb0>)
 800220c:	2200      	movs	r2, #0
 800220e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <SystemInit+0xb0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <SystemInit+0xb0>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <SystemInit+0xb0>)
 800221e:	2200      	movs	r2, #0
 8002220:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <SystemInit+0xb8>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <SystemInit+0xbc>)
 8002228:	4013      	ands	r3, r2
 800222a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222e:	d202      	bcs.n	8002236 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <SystemInit+0xc0>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SystemInit+0xac>)
 8002238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800223c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	58024400 	.word	0x58024400
 8002250:	eaf6ed7f 	.word	0xeaf6ed7f
 8002254:	5c001000 	.word	0x5c001000
 8002258:	ffff0000 	.word	0xffff0000
 800225c:	51008108 	.word	0x51008108

08002260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002298 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002264:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002266:	e003      	b.n	8002270 <LoopCopyDataInit>

08002268 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800226a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800226c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800226e:	3104      	adds	r1, #4

08002270 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002274:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002276:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002278:	d3f6      	bcc.n	8002268 <CopyDataInit>
  ldr  r2, =_sbss
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800227c:	e002      	b.n	8002284 <LoopFillZerobss>

0800227e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800227e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002280:	f842 3b04 	str.w	r3, [r2], #4

08002284 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002286:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002288:	d3f9      	bcc.n	800227e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800228a:	f7ff ff87 	bl	800219c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f00a fde7 	bl	800ce60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002292:	f7ff f805 	bl	80012a0 <main>
  bx  lr    
 8002296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800229c:	0800e168 	.word	0x0800e168
  ldr  r0, =_sdata
 80022a0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80022a4:	240000b8 	.word	0x240000b8
  ldr  r2, =_sbss
 80022a8:	240000b8 	.word	0x240000b8
  ldr  r3, = _ebss
 80022ac:	24000bcc 	.word	0x24000bcc

080022b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC3_IRQHandler>
	...

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ba:	2003      	movs	r0, #3
 80022bc:	f001 fb22 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022c0:	f004 fe28 	bl	8006f14 <HAL_RCC_GetSysClockFreq>
 80022c4:	4601      	mov	r1, r0
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_Init+0x68>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_Init+0x6c>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa21 f303 	lsr.w	r3, r1, r3
 80022dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_Init+0x68>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_Init+0x6c>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_Init+0x70>)
 80022f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_Init+0x74>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022fe:	2000      	movs	r0, #0
 8002300:	f000 f814 	bl	800232c <HAL_InitTick>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e002      	b.n	8002314 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800230e:	f7ff fc27 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	58024400 	.word	0x58024400
 8002320:	0800df20 	.word	0x0800df20
 8002324:	24000044 	.word	0x24000044
 8002328:	24000040 	.word	0x24000040

0800232c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_InitTick+0x60>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e021      	b.n	8002384 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_InitTick+0x64>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_InitTick+0x60>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f001 fb07 	bl	800396a <HAL_SYSTICK_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00e      	b.n	8002384 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d80a      	bhi.n	8002382 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f001 fad1 	bl	800391a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_InitTick+0x68>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2400004c 	.word	0x2400004c
 8002390:	24000040 	.word	0x24000040
 8002394:	24000048 	.word	0x24000048

08002398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x20>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_IncTick+0x24>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_IncTick+0x24>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	2400004c 	.word	0x2400004c
 80023bc:	24000bc8 	.word	0x24000bc8

080023c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return uwTick;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_GetTick+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	24000bc8 	.word	0x24000bc8

080023d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff ffee 	bl	80023c0 <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d005      	beq.n	80023fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_Delay+0x40>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fe:	bf00      	nop
 8002400:	f7ff ffde 	bl	80023c0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d8f7      	bhi.n	8002400 <HAL_Delay+0x28>
  {
  }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2400004c 	.word	0x2400004c

0800241c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_GetREVID+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0c1b      	lsrs	r3, r3, #16
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	5c001000 	.word	0x5c001000

08002434 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	58000400 	.word	0x58000400

08002460 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	609a      	str	r2, [r3, #8]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3360      	adds	r3, #96	; 0x60
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	430b      	orrs	r3, r1
 80024f4:	4313      	orrs	r3, r2
 80024f6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc90      	pop	{r4, r7}
 8002500:	4770      	bx	lr

08002502 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	611a      	str	r2, [r3, #16]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002534:	b490      	push	{r4, r7}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3360      	adds	r3, #96	; 0x60
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	6023      	str	r3, [r4, #0]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bc90      	pop	{r4, r7}
 8002562:	4770      	bx	lr

08002564 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800258a:	b490      	push	{r4, r7}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3330      	adds	r3, #48	; 0x30
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	4413      	add	r3, r2
 80025a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	211f      	movs	r1, #31
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	401a      	ands	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	f003 011f 	and.w	r1, r3, #31
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc90      	pop	{r4, r7}
 80025da:	4770      	bx	lr

080025dc <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002602:	b490      	push	{r4, r7}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3314      	adds	r3, #20
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	0e5b      	lsrs	r3, r3, #25
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	0d1b      	lsrs	r3, r3, #20
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2107      	movs	r1, #7
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0d1b      	lsrs	r3, r3, #20
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bc90      	pop	{r4, r7}
 8002650:	4770      	bx	lr
	...

08002654 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0318 	and.w	r3, r3, #24
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002678:	40d9      	lsrs	r1, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	400b      	ands	r3, r1
 800267e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002682:	431a      	orrs	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	000fffff 	.word	0x000fffff

0800269c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 031f 	and.w	r3, r3, #31
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6093      	str	r3, [r2, #8]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	5fffffc0 	.word	0x5fffffc0

080026dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f0:	d101      	bne.n	80026f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <LL_ADC_EnableInternalRegulator+0x24>)
 8002712:	4013      	ands	r3, r2
 8002714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	6fffffc0 	.word	0x6fffffc0

0800272c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002740:	d101      	bne.n	8002746 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <LL_ADC_Enable+0x24>)
 8002762:	4013      	ands	r3, r2
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	7fffffc0 	.word	0x7fffffc0

0800277c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <LL_ADC_IsEnabled+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_ADC_IsEnabled+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LL_ADC_REG_StartConversion+0x24>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	7fffffc0 	.word	0x7fffffc0

080027cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d101      	bne.n	80027e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b08      	cmp	r3, #8
 8002804:	d101      	bne.n	800280a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e18e      	b.n	8002b50 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff f9a7 	bl	8001b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff3f 	bl	80026dc <LL_ADC_IsDeepPowerDownEnabled>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff25 	bl	80026b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff5a 	bl	800272c <LL_ADC_IsInternalRegulatorEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d113      	bne.n	80028a6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff3e 	bl	8002704 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002888:	4b9a      	ldr	r3, [pc, #616]	; (8002af4 <HAL_ADC_Init+0x2dc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	4a9a      	ldr	r2, [pc, #616]	; (8002af8 <HAL_ADC_Init+0x2e0>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002898:	e002      	b.n	80028a0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3b01      	subs	r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f9      	bne.n	800289a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff3e 	bl	800272c <LL_ADC_IsInternalRegulatorEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff78 	bl	80027cc <LL_ADC_REG_IsConversionOngoing>
 80028dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 8129 	bne.w	8002b3e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 8125 	bne.w	8002b3e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028fc:	f043 0202 	orr.w	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff37 	bl	800277c <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d136      	bne.n	8002982 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a78      	ldr	r2, [pc, #480]	; (8002afc <HAL_ADC_Init+0x2e4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_ADC_Init+0x110>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_ADC_Init+0x2e8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10e      	bne.n	8002946 <HAL_ADC_Init+0x12e>
 8002928:	4874      	ldr	r0, [pc, #464]	; (8002afc <HAL_ADC_Init+0x2e4>)
 800292a:	f7ff ff27 	bl	800277c <LL_ADC_IsEnabled>
 800292e:	4604      	mov	r4, r0
 8002930:	4873      	ldr	r0, [pc, #460]	; (8002b00 <HAL_ADC_Init+0x2e8>)
 8002932:	f7ff ff23 	bl	800277c <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	4323      	orrs	r3, r4
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	e008      	b.n	8002958 <HAL_ADC_Init+0x140>
 8002946:	486f      	ldr	r0, [pc, #444]	; (8002b04 <HAL_ADC_Init+0x2ec>)
 8002948:	f7ff ff18 	bl	800277c <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d012      	beq.n	8002982 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a66      	ldr	r2, [pc, #408]	; (8002afc <HAL_ADC_Init+0x2e4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <HAL_ADC_Init+0x158>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_ADC_Init+0x2e8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_ADC_Init+0x15c>
 8002970:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_ADC_Init+0x2f0>)
 8002972:	e000      	b.n	8002976 <HAL_ADC_Init+0x15e>
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_ADC_Init+0x2f4>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f7ff fd6f 	bl	8002460 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002982:	f7ff fd4b 	bl	800241c <HAL_GetREVID>
 8002986:	4602      	mov	r2, r0
 8002988:	f241 0303 	movw	r3, #4099	; 0x1003
 800298c:	429a      	cmp	r2, r3
 800298e:	d914      	bls.n	80029ba <HAL_ADC_Init+0x1a2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d110      	bne.n	80029ba <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7d5b      	ldrb	r3, [r3, #21]
 800299c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80029a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7f1b      	ldrb	r3, [r3, #28]
 80029ae:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80029b0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029b2:	f043 030c 	orr.w	r3, r3, #12
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e00d      	b.n	80029d6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7d5b      	ldrb	r3, [r3, #21]
 80029be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80029ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7f1b      	ldrb	r3, [r3, #28]
 80029d0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7f1b      	ldrb	r3, [r3, #28]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d106      	bne.n	80029ec <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	045b      	lsls	r3, r3, #17
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_ADC_Init+0x2f8>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fed3 	bl	80027cc <LL_ADC_REG_IsConversionOngoing>
 8002a26:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fee0 	bl	80027f2 <LL_ADC_INJ_IsConversionOngoing>
 8002a32:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d14a      	bne.n	8002ad0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d147      	bne.n	8002ad0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7d1b      	ldrb	r3, [r3, #20]
 8002a44:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_ADC_Init+0x2fc>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	69b9      	ldr	r1, [r7, #24]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_ADC_Init+0x300>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a80:	3a01      	subs	r2, #1
 8002a82:	0411      	lsls	r1, r2, #16
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a94:	430a      	orrs	r2, r1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	e007      	b.n	8002ab4 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fd52 	bl	8003574 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d121      	bne.n	8002b1c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f023 010f 	bic.w	r1, r3, #15
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	1e5a      	subs	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
 8002af0:	e01c      	b.n	8002b2c <HAL_ADC_Init+0x314>
 8002af2:	bf00      	nop
 8002af4:	24000040 	.word	0x24000040
 8002af8:	053e2d63 	.word	0x053e2d63
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40022100 	.word	0x40022100
 8002b04:	58026000 	.word	0x58026000
 8002b08:	40022300 	.word	0x40022300
 8002b0c:	58026300 	.word	0x58026300
 8002b10:	fff0c003 	.word	0xfff0c003
 8002b14:	ffffbffc 	.word	0xffffbffc
 8002b18:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 020f 	bic.w	r2, r2, #15
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f023 0303 	bic.w	r3, r3, #3
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b3c:	e007      	b.n	8002b4e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3724      	adds	r7, #36	; 0x24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a55      	ldr	r2, [pc, #340]	; (8002cc0 <HAL_ADC_Start_DMA+0x168>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_ADC_Start_DMA+0x20>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a54      	ldr	r2, [pc, #336]	; (8002cc4 <HAL_ADC_Start_DMA+0x16c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_Start_DMA+0x24>
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_ADC_Start_DMA+0x170>)
 8002b7a:	e000      	b.n	8002b7e <HAL_ADC_Start_DMA+0x26>
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_ADC_Start_DMA+0x174>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fd8c 	bl	800269c <LL_ADC_GetMultimode>
 8002b84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fe1e 	bl	80027cc <LL_ADC_REG_IsConversionOngoing>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 808c 	bne.w	8002cb0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_Start_DMA+0x4e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e087      	b.n	8002cb6 <HAL_ADC_Start_DMA+0x15e>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d002      	beq.n	8002bc0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	d170      	bne.n	8002ca2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fbbf 	bl	8003344 <ADC_Enable>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d163      	bne.n	8002c98 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <HAL_ADC_Start_DMA+0x178>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_ADC_Start_DMA+0x16c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d002      	beq.n	8002bf0 <HAL_ADC_Start_DMA+0x98>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e000      	b.n	8002bf2 <HAL_ADC_Start_DMA+0x9a>
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <HAL_ADC_Start_DMA+0x168>)
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d002      	beq.n	8002c00 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f023 0206 	bic.w	r2, r3, #6
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
 8002c24:	e002      	b.n	8002c2c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_ADC_Start_DMA+0x17c>)
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_ADC_Start_DMA+0x180>)
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_ADC_Start_DMA+0x184>)
 8002c42:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	221c      	movs	r2, #28
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0210 	orr.w	r2, r2, #16
 8002c62:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f7ff fcb4 	bl	80025dc <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3340      	adds	r3, #64	; 0x40
 8002c7e:	4619      	mov	r1, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f001 f9da 	bl	800403c <HAL_DMA_Start_IT>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fd87 	bl	80027a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c96:	e00d      	b.n	8002cb4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002ca0:	e008      	b.n	8002cb4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002cae:	e001      	b.n	8002cb4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40022100 	.word	0x40022100
 8002cc8:	40022300 	.word	0x40022300
 8002ccc:	58026300 	.word	0x58026300
 8002cd0:	fffff0fe 	.word	0xfffff0fe
 8002cd4:	0800344d 	.word	0x0800344d
 8002cd8:	08003525 	.word	0x08003525
 8002cdc:	08003541 	.word	0x08003541

08002ce0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b099      	sub	sp, #100	; 0x64
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a99      	ldr	r2, [pc, #612]	; (8002f9c <HAL_ADC_ConfigChannel+0x280>)
 8002d36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x2a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e2e6      	b.n	8003314 <HAL_ADC_ConfigChannel+0x5f8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fd3a 	bl	80027cc <LL_ADC_REG_IsConversionOngoing>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 82cb 	bne.w	80032f6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x62>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2201      	movs	r2, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	e00f      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x82>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2201      	movs	r2, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	69d1      	ldr	r1, [r2, #28]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f7ff fbe6 	bl	800258a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fd02 	bl	80027cc <LL_ADC_REG_IsConversionOngoing>
 8002dc8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd0f 	bl	80027f2 <LL_ADC_INJ_IsConversionOngoing>
 8002dd4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 80b3 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 80af 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7ff fc05 	bl	8002602 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002df8:	4b69      	ldr	r3, [pc, #420]	; (8002fa0 <HAL_ADC_ConfigChannel+0x284>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e04:	d10b      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x102>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	e01d      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x13e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x128>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	e00a      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x13e>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d027      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6919      	ldr	r1, [r3, #16]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e72:	f7ff fb29 	bl	80024c8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7e5b      	ldrb	r3, [r3, #25]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x170>
 8002e86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e8a:	e000      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x172>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff fb50 	bl	8002534 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6919      	ldr	r1, [r3, #16]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x18e>
 8002ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_ConfigChannel+0x190>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	461a      	mov	r2, r3
 8002eae:	f7ff fb28 	bl	8002502 <LL_ADC_SetDataRightShift>
 8002eb2:	e047      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	069b      	lsls	r3, r3, #26
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f1e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fc17 	bl	800277c <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 81d9 	bne.w	8003308 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7ff fb76 	bl	8002654 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <HAL_ADC_ConfigChannel+0x280>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	f040 8101 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x288>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e016      	b.n	8002fca <HAL_ADC_ConfigChannel+0x2ae>
 8002f9c:	47ff0000 	.word	0x47ff0000
 8002fa0:	5c001000 	.word	0x5c001000
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d064      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x2ce>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	069b      	lsls	r3, r3, #26
 8002fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe8:	e00e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x2ec>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x30c>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	3301      	adds	r3, #1
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	e010      	b.n	800304a <HAL_ADC_ConfigChannel+0x32e>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x354>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	051b      	lsls	r3, r3, #20
 800306e:	e011      	b.n	8003094 <HAL_ADC_ConfigChannel+0x378>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003094:	430b      	orrs	r3, r1
 8003096:	e069      	b.n	800316c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x398>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	069b      	lsls	r3, r3, #26
 80030ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b2:	e00e      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x3b6>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	61fb      	str	r3, [r7, #28]
  return result;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	069b      	lsls	r3, r3, #26
 80030ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x3d6>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	e010      	b.n	8003114 <HAL_ADC_ConfigChannel+0x3f8>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	617b      	str	r3, [r7, #20]
  return result;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2101      	movs	r1, #1
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	ea42 0103 	orr.w	r1, r2, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x424>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	3301      	adds	r3, #1
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	3b1e      	subs	r3, #30
 8003138:	051b      	lsls	r3, r3, #20
 800313a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800313e:	e014      	b.n	800316a <HAL_ADC_ConfigChannel+0x44e>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	60fb      	str	r3, [r7, #12]
  return result;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	3b1e      	subs	r3, #30
 8003164:	051b      	lsls	r3, r3, #20
 8003166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316a:	430b      	orrs	r3, r1
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	4619      	mov	r1, r3
 8003172:	f7ff fa46 	bl	8002602 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f280 80c4 	bge.w	8003308 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_ADC_ConfigChannel+0x600>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_ConfigChannel+0x478>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a64      	ldr	r2, [pc, #400]	; (8003320 <HAL_ADC_ConfigChannel+0x604>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x47c>
 8003194:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_ADC_ConfigChannel+0x608>)
 8003196:	e000      	b.n	800319a <HAL_ADC_ConfigChannel+0x47e>
 8003198:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_ADC_ConfigChannel+0x60c>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f986 	bl	80024ac <LL_ADC_GetCommonPathInternalCh>
 80031a0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5d      	ldr	r2, [pc, #372]	; (800331c <HAL_ADC_ConfigChannel+0x600>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x49a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5b      	ldr	r2, [pc, #364]	; (8003320 <HAL_ADC_ConfigChannel+0x604>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10e      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x4b8>
 80031b6:	4859      	ldr	r0, [pc, #356]	; (800331c <HAL_ADC_ConfigChannel+0x600>)
 80031b8:	f7ff fae0 	bl	800277c <LL_ADC_IsEnabled>
 80031bc:	4604      	mov	r4, r0
 80031be:	4858      	ldr	r0, [pc, #352]	; (8003320 <HAL_ADC_ConfigChannel+0x604>)
 80031c0:	f7ff fadc 	bl	800277c <LL_ADC_IsEnabled>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4323      	orrs	r3, r4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e008      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x4ca>
 80031d4:	4855      	ldr	r0, [pc, #340]	; (800332c <HAL_ADC_ConfigChannel+0x610>)
 80031d6:	f7ff fad1 	bl	800277c <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d07b      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_ADC_ConfigChannel+0x614>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d12e      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x536>
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d129      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_ADC_ConfigChannel+0x610>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d17f      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a43      	ldr	r2, [pc, #268]	; (800331c <HAL_ADC_ConfigChannel+0x600>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_ADC_ConfigChannel+0x500>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a42      	ldr	r2, [pc, #264]	; (8003320 <HAL_ADC_ConfigChannel+0x604>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x504>
 800321c:	4a41      	ldr	r2, [pc, #260]	; (8003324 <HAL_ADC_ConfigChannel+0x608>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x506>
 8003220:	4a41      	ldr	r2, [pc, #260]	; (8003328 <HAL_ADC_ConfigChannel+0x60c>)
 8003222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7ff f92b 	bl	8002486 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003230:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_ADC_ConfigChannel+0x618>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	4a40      	ldr	r2, [pc, #256]	; (8003338 <HAL_ADC_ConfigChannel+0x61c>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8003242:	e002      	b.n	800324a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	3b01      	subs	r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f9      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003250:	e05a      	b.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a39      	ldr	r2, [pc, #228]	; (800333c <HAL_ADC_ConfigChannel+0x620>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d11e      	bne.n	800329a <HAL_ADC_ConfigChannel+0x57e>
 800325c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d119      	bne.n	800329a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a30      	ldr	r2, [pc, #192]	; (800332c <HAL_ADC_ConfigChannel+0x610>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d14b      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <HAL_ADC_ConfigChannel+0x600>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x568>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a28      	ldr	r2, [pc, #160]	; (8003320 <HAL_ADC_ConfigChannel+0x604>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x56c>
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <HAL_ADC_ConfigChannel+0x608>)
 8003286:	e000      	b.n	800328a <HAL_ADC_ConfigChannel+0x56e>
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_ADC_ConfigChannel+0x60c>)
 800328a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7ff f8f7 	bl	8002486 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	e036      	b.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a28      	ldr	r2, [pc, #160]	; (8003340 <HAL_ADC_ConfigChannel+0x624>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d131      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d12c      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_ADC_ConfigChannel+0x610>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d127      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <HAL_ADC_ConfigChannel+0x600>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x5b0>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a16      	ldr	r2, [pc, #88]	; (8003320 <HAL_ADC_ConfigChannel+0x604>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5b4>
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_ADC_ConfigChannel+0x608>)
 80032ce:	e000      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x5b6>
 80032d0:	4a15      	ldr	r2, [pc, #84]	; (8003328 <HAL_ADC_ConfigChannel+0x60c>)
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff f8d3 	bl	8002486 <LL_ADC_SetCommonPathInternalCh>
 80032e0:	e012      	b.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80032f4:	e008      	b.n	8003308 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003314:	4618      	mov	r0, r3
 8003316:	3764      	adds	r7, #100	; 0x64
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}
 800331c:	40022000 	.word	0x40022000
 8003320:	40022100 	.word	0x40022100
 8003324:	40022300 	.word	0x40022300
 8003328:	58026300 	.word	0x58026300
 800332c:	58026000 	.word	0x58026000
 8003330:	cb840000 	.word	0xcb840000
 8003334:	24000040 	.word	0x24000040
 8003338:	053e2d63 	.word	0x053e2d63
 800333c:	c7520000 	.word	0xc7520000
 8003340:	cfb80000 	.word	0xcfb80000

08003344 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fa13 	bl	800277c <LL_ADC_IsEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d167      	bne.n	800342c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	4b35      	ldr	r3, [pc, #212]	; (8003438 <ADC_Enable+0xf4>)
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e053      	b.n	800342e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f9e2 	bl	8002754 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003390:	f7ff f816 	bl	80023c0 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <ADC_Enable+0xf8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <ADC_Enable+0x66>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a26      	ldr	r2, [pc, #152]	; (8003440 <ADC_Enable+0xfc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <ADC_Enable+0x6a>
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <ADC_Enable+0x100>)
 80033ac:	e000      	b.n	80033b0 <ADC_Enable+0x6c>
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <ADC_Enable+0x104>)
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f973 	bl	800269c <LL_ADC_GetMultimode>
 80033b6:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a20      	ldr	r2, [pc, #128]	; (8003440 <ADC_Enable+0xfc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d002      	beq.n	80033c8 <ADC_Enable+0x84>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	e000      	b.n	80033ca <ADC_Enable+0x86>
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <ADC_Enable+0xf8>)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d025      	beq.n	800341e <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d129      	bne.n	800342c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033d8:	e021      	b.n	800341e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f9cc 	bl	800277c <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f9b0 	bl	8002754 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033f4:	f7fe ffe4 	bl	80023c0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d90d      	bls.n	800341e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d1d6      	bne.n	80033da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	8000003f 	.word	0x8000003f
 800343c:	40022000 	.word	0x40022000
 8003440:	40022100 	.word	0x40022100
 8003444:	40022300 	.word	0x40022300
 8003448:	58026300 	.word	0x58026300

0800344c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d14b      	bne.n	80034fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d021      	beq.n	80034c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f86d 	bl	8002564 <LL_ADC_REG_IsTriggerSourceSWStart>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d032      	beq.n	80034f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d12b      	bne.n	80034f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d11f      	bne.n	80034f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
 80034c2:	e018      	b.n	80034f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d111      	bne.n	80034f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fbf2 	bl	8002ce0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fc:	e00e      	b.n	800351c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fbfc 	bl	8002d08 <HAL_ADC_ErrorCallback>
}
 8003510:	e004      	b.n	800351c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fbde 	bl	8002cf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fbce 	bl	8002d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a70      	ldr	r2, [pc, #448]	; (8003744 <ADC_ConfigureBoostMode+0x1d0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <ADC_ConfigureBoostMode+0x1c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6f      	ldr	r2, [pc, #444]	; (8003748 <ADC_ConfigureBoostMode+0x1d4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <ADC_ConfigureBoostMode+0x30>
 8003590:	4b6e      	ldr	r3, [pc, #440]	; (800374c <ADC_ConfigureBoostMode+0x1d8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e008      	b.n	80035b6 <ADC_ConfigureBoostMode+0x42>
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <ADC_ConfigureBoostMode+0x1dc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01a      	beq.n	80035f0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80035ba:	f003 fe1d 	bl	80071f8 <HAL_RCC_GetHCLKFreq>
 80035be:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c8:	d006      	beq.n	80035d8 <ADC_ConfigureBoostMode+0x64>
 80035ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035ce:	d00b      	beq.n	80035e8 <ADC_ConfigureBoostMode+0x74>
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d000      	beq.n	80035d8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80035d6:	e05d      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	60fb      	str	r3, [r7, #12]
        break;
 80035e6:	e055      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	60fb      	str	r3, [r7, #12]
        break;
 80035ee:	e051      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80035f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035f4:	f004 fd3a 	bl	800806c <HAL_RCCEx_GetPeriphCLKFreq>
 80035f8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003602:	d02a      	beq.n	800365a <ADC_ConfigureBoostMode+0xe6>
 8003604:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003608:	d813      	bhi.n	8003632 <ADC_ConfigureBoostMode+0xbe>
 800360a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800360e:	d024      	beq.n	800365a <ADC_ConfigureBoostMode+0xe6>
 8003610:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003614:	d806      	bhi.n	8003624 <ADC_ConfigureBoostMode+0xb0>
 8003616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800361a:	d01e      	beq.n	800365a <ADC_ConfigureBoostMode+0xe6>
 800361c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003620:	d01b      	beq.n	800365a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003622:	e037      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d017      	beq.n	800365a <ADC_ConfigureBoostMode+0xe6>
 800362a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800362e:	d014      	beq.n	800365a <ADC_ConfigureBoostMode+0xe6>
        break;
 8003630:	e030      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003632:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003636:	d021      	beq.n	800367c <ADC_ConfigureBoostMode+0x108>
 8003638:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800363c:	d806      	bhi.n	800364c <ADC_ConfigureBoostMode+0xd8>
 800363e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003642:	d013      	beq.n	800366c <ADC_ConfigureBoostMode+0xf8>
 8003644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003648:	d014      	beq.n	8003674 <ADC_ConfigureBoostMode+0x100>
        break;
 800364a:	e023      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800364c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003650:	d018      	beq.n	8003684 <ADC_ConfigureBoostMode+0x110>
 8003652:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003656:	d019      	beq.n	800368c <ADC_ConfigureBoostMode+0x118>
        break;
 8003658:	e01c      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	60fb      	str	r3, [r7, #12]
        break;
 800366a:	e013      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
      break;
 8003672:	e00f      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	60fb      	str	r3, [r7, #12]
        break;
 800367a:	e00b      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	60fb      	str	r3, [r7, #12]
        break;
 8003682:	e007      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	09db      	lsrs	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
        break;
 800368a:	e003      	b.n	8003694 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	60fb      	str	r3, [r7, #12]
        break;
 8003692:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003694:	f7fe fec2 	bl	800241c <HAL_GetREVID>
 8003698:	4602      	mov	r2, r0
 800369a:	f241 0303 	movw	r3, #4099	; 0x1003
 800369e:	429a      	cmp	r2, r3
 80036a0:	d815      	bhi.n	80036ce <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <ADC_ConfigureBoostMode+0x1e0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d908      	bls.n	80036bc <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036ba:	e03e      	b.n	800373a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	e035      	b.n	800373a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <ADC_ConfigureBoostMode+0x1e4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d808      	bhi.n	80036ee <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	e025      	b.n	800373a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <ADC_ConfigureBoostMode+0x1e8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d80a      	bhi.n	800370c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	609a      	str	r2, [r3, #8]
}
 800370a:	e016      	b.n	800373a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <ADC_ConfigureBoostMode+0x1ec>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d80a      	bhi.n	800372a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	609a      	str	r2, [r3, #8]
}
 8003728:	e007      	b.n	800373a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40022100 	.word	0x40022100
 800374c:	40022300 	.word	0x40022300
 8003750:	58026300 	.word	0x58026300
 8003754:	01312d00 	.word	0x01312d00
 8003758:	005f5e10 	.word	0x005f5e10
 800375c:	00bebc20 	.word	0x00bebc20
 8003760:	017d7840 	.word	0x017d7840

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	4313      	orrs	r3, r2
 8003790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	60d3      	str	r3, [r2, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	05fa0000 	.word	0x05fa0000

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	; (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f7ff ff8e 	bl	8003804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff29 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003928:	f7ff ff40 	bl	80037ac <__NVIC_GetPriorityGrouping>
 800392c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff90 	bl	8003858 <NVIC_EncodePriority>
 8003938:	4602      	mov	r2, r0
 800393a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff5f 	bl	8003804 <__NVIC_SetPriority>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff33 	bl	80037c8 <__NVIC_EnableIRQ>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ffa4 	bl	80038c0 <SysTick_Config>
 8003978:	4603      	mov	r3, r0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7fe fd18 	bl	80023c0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e316      	b.n	8003fca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_DMA_Init+0x1b8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04a      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <HAL_DMA_Init+0x1bc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d045      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_DMA_Init+0x1c0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d040      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a62      	ldr	r2, [pc, #392]	; (8003b48 <HAL_DMA_Init+0x1c4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a60      	ldr	r2, [pc, #384]	; (8003b4c <HAL_DMA_Init+0x1c8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d036      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5f      	ldr	r2, [pc, #380]	; (8003b50 <HAL_DMA_Init+0x1cc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_DMA_Init+0x1d0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02c      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a5c      	ldr	r2, [pc, #368]	; (8003b58 <HAL_DMA_Init+0x1d4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d027      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5a      	ldr	r2, [pc, #360]	; (8003b5c <HAL_DMA_Init+0x1d8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a59      	ldr	r2, [pc, #356]	; (8003b60 <HAL_DMA_Init+0x1dc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <HAL_DMA_Init+0x1e0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a56      	ldr	r2, [pc, #344]	; (8003b68 <HAL_DMA_Init+0x1e4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a54      	ldr	r2, [pc, #336]	; (8003b6c <HAL_DMA_Init+0x1e8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a53      	ldr	r2, [pc, #332]	; (8003b70 <HAL_DMA_Init+0x1ec>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a51      	ldr	r2, [pc, #324]	; (8003b74 <HAL_DMA_Init+0x1f0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_Init+0xb8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a50      	ldr	r2, [pc, #320]	; (8003b78 <HAL_DMA_Init+0x1f4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_DMA_Init+0xbc>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_DMA_Init+0xbe>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 813b 	beq.w	8003cbe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a37      	ldr	r2, [pc, #220]	; (8003b3c <HAL_DMA_Init+0x1b8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a36      	ldr	r2, [pc, #216]	; (8003b40 <HAL_DMA_Init+0x1bc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_DMA_Init+0x1c0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <HAL_DMA_Init+0x1c4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a31      	ldr	r2, [pc, #196]	; (8003b4c <HAL_DMA_Init+0x1c8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <HAL_DMA_Init+0x1cc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_DMA_Init+0x1d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <HAL_DMA_Init+0x1d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <HAL_DMA_Init+0x1d8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_DMA_Init+0x1dc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_DMA_Init+0x1e0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMA_Init+0x1e4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_DMA_Init+0x1e8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_DMA_Init+0x1ec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <HAL_DMA_Init+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_Init+0x174>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_DMA_Init+0x1f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <HAL_DMA_Init+0x186>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e007      	b.n	8003b1a <HAL_DMA_Init+0x196>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b1a:	e02f      	b.n	8003b7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b1c:	f7fe fc50 	bl	80023c0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d928      	bls.n	8003b7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2203      	movs	r2, #3
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e246      	b.n	8003fca <HAL_DMA_Init+0x646>
 8003b3c:	40020010 	.word	0x40020010
 8003b40:	40020028 	.word	0x40020028
 8003b44:	40020040 	.word	0x40020040
 8003b48:	40020058 	.word	0x40020058
 8003b4c:	40020070 	.word	0x40020070
 8003b50:	40020088 	.word	0x40020088
 8003b54:	400200a0 	.word	0x400200a0
 8003b58:	400200b8 	.word	0x400200b8
 8003b5c:	40020410 	.word	0x40020410
 8003b60:	40020428 	.word	0x40020428
 8003b64:	40020440 	.word	0x40020440
 8003b68:	40020458 	.word	0x40020458
 8003b6c:	40020470 	.word	0x40020470
 8003b70:	40020488 	.word	0x40020488
 8003b74:	400204a0 	.word	0x400204a0
 8003b78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1c8      	bne.n	8003b1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4b83      	ldr	r3, [pc, #524]	; (8003da4 <HAL_DMA_Init+0x420>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ba2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d107      	bne.n	8003be0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003be0:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <HAL_DMA_Init+0x424>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b71      	ldr	r3, [pc, #452]	; (8003dac <HAL_DMA_Init+0x428>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bec:	d328      	bcc.n	8003c40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b28      	cmp	r3, #40	; 0x28
 8003bf4:	d903      	bls.n	8003bfe <HAL_DMA_Init+0x27a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8003bfc:	d917      	bls.n	8003c2e <HAL_DMA_Init+0x2aa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b3e      	cmp	r3, #62	; 0x3e
 8003c04:	d903      	bls.n	8003c0e <HAL_DMA_Init+0x28a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b42      	cmp	r3, #66	; 0x42
 8003c0c:	d90f      	bls.n	8003c2e <HAL_DMA_Init+0x2aa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b46      	cmp	r3, #70	; 0x46
 8003c14:	d903      	bls.n	8003c1e <HAL_DMA_Init+0x29a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b48      	cmp	r3, #72	; 0x48
 8003c1c:	d907      	bls.n	8003c2e <HAL_DMA_Init+0x2aa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b4e      	cmp	r3, #78	; 0x4e
 8003c24:	d905      	bls.n	8003c32 <HAL_DMA_Init+0x2ae>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b52      	cmp	r3, #82	; 0x52
 8003c2c:	d801      	bhi.n	8003c32 <HAL_DMA_Init+0x2ae>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_Init+0x2b0>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d117      	bne.n	8003c9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f002 f813 	bl	8005ca8 <DMA_CheckFifoParam>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2240      	movs	r2, #64	; 0x40
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e197      	b.n	8003fca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f001 ff4e 	bl	8005b44 <DMA_CalcBaseAndBitshift>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	223f      	movs	r2, #63	; 0x3f
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e0cd      	b.n	8003e5a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_DMA_Init+0x42c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a39      	ldr	r2, [pc, #228]	; (8003db4 <HAL_DMA_Init+0x430>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <HAL_DMA_Init+0x434>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a36      	ldr	r2, [pc, #216]	; (8003dbc <HAL_DMA_Init+0x438>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a35      	ldr	r2, [pc, #212]	; (8003dc0 <HAL_DMA_Init+0x43c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a33      	ldr	r2, [pc, #204]	; (8003dc4 <HAL_DMA_Init+0x440>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a32      	ldr	r2, [pc, #200]	; (8003dc8 <HAL_DMA_Init+0x444>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_Init+0x38a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <HAL_DMA_Init+0x448>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA_Init+0x38e>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_DMA_Init+0x390>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <HAL_DMA_Init+0x42c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d021      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_DMA_Init+0x430>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01c      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <HAL_DMA_Init+0x434>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d017      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_DMA_Init+0x438>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d012      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <HAL_DMA_Init+0x43c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_DMA_Init+0x440>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d008      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_DMA_Init+0x444>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_Init+0x3e4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <HAL_DMA_Init+0x448>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_DMA_Init+0x44c>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d020      	beq.n	8003dd4 <HAL_DMA_Init+0x450>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d102      	bne.n	8003da0 <HAL_DMA_Init+0x41c>
 8003d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d9e:	e01a      	b.n	8003dd6 <HAL_DMA_Init+0x452>
 8003da0:	2300      	movs	r3, #0
 8003da2:	e018      	b.n	8003dd6 <HAL_DMA_Init+0x452>
 8003da4:	fe10803f 	.word	0xfe10803f
 8003da8:	5c001000 	.word	0x5c001000
 8003dac:	ffff0000 	.word	0xffff0000
 8003db0:	58025408 	.word	0x58025408
 8003db4:	5802541c 	.word	0x5802541c
 8003db8:	58025430 	.word	0x58025430
 8003dbc:	58025444 	.word	0x58025444
 8003dc0:	58025458 	.word	0x58025458
 8003dc4:	5802546c 	.word	0x5802546c
 8003dc8:	58025480 	.word	0x58025480
 8003dcc:	58025494 	.word	0x58025494
 8003dd0:	fffe000f 	.word	0xfffe000f
 8003dd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ddc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b6e      	ldr	r3, [pc, #440]	; (8003fd4 <HAL_DMA_Init+0x650>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4a6e      	ldr	r2, [pc, #440]	; (8003fd8 <HAL_DMA_Init+0x654>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 fe89 	bl	8005b44 <DMA_CalcBaseAndBitshift>
 8003e32:	4603      	mov	r3, r0
 8003e34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	e008      	b.n	8003e5a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2203      	movs	r2, #3
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0b7      	b.n	8003fca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5f      	ldr	r2, [pc, #380]	; (8003fdc <HAL_DMA_Init+0x658>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d072      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <HAL_DMA_Init+0x65c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d06d      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a5c      	ldr	r2, [pc, #368]	; (8003fe4 <HAL_DMA_Init+0x660>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d068      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a5a      	ldr	r2, [pc, #360]	; (8003fe8 <HAL_DMA_Init+0x664>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d063      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a59      	ldr	r2, [pc, #356]	; (8003fec <HAL_DMA_Init+0x668>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d05e      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a57      	ldr	r2, [pc, #348]	; (8003ff0 <HAL_DMA_Init+0x66c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d059      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <HAL_DMA_Init+0x670>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d054      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a54      	ldr	r2, [pc, #336]	; (8003ff8 <HAL_DMA_Init+0x674>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d04f      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a53      	ldr	r2, [pc, #332]	; (8003ffc <HAL_DMA_Init+0x678>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d04a      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a51      	ldr	r2, [pc, #324]	; (8004000 <HAL_DMA_Init+0x67c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d045      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a50      	ldr	r2, [pc, #320]	; (8004004 <HAL_DMA_Init+0x680>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d040      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a4e      	ldr	r2, [pc, #312]	; (8004008 <HAL_DMA_Init+0x684>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d03b      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a4d      	ldr	r2, [pc, #308]	; (800400c <HAL_DMA_Init+0x688>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d036      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a4b      	ldr	r2, [pc, #300]	; (8004010 <HAL_DMA_Init+0x68c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d031      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <HAL_DMA_Init+0x690>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d02c      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_DMA_Init+0x694>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d027      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a47      	ldr	r2, [pc, #284]	; (800401c <HAL_DMA_Init+0x698>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d022      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a45      	ldr	r2, [pc, #276]	; (8004020 <HAL_DMA_Init+0x69c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01d      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a44      	ldr	r2, [pc, #272]	; (8004024 <HAL_DMA_Init+0x6a0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d018      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a42      	ldr	r2, [pc, #264]	; (8004028 <HAL_DMA_Init+0x6a4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a41      	ldr	r2, [pc, #260]	; (800402c <HAL_DMA_Init+0x6a8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a3f      	ldr	r2, [pc, #252]	; (8004030 <HAL_DMA_Init+0x6ac>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d009      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <HAL_DMA_Init+0x6b0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_DMA_Init+0x5c6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <HAL_DMA_Init+0x6b4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_DMA_Init+0x5ca>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_DMA_Init+0x5cc>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d032      	beq.n	8003fba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f001 ff23 	bl	8005da0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d102      	bne.n	8003f68 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d010      	beq.n	8003fa8 <HAL_DMA_Init+0x624>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d80c      	bhi.n	8003fa8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 ffa0 	bl	8005ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	e008      	b.n	8003fba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	a7fdabf8 	.word	0xa7fdabf8
 8003fd8:	cccccccd 	.word	0xcccccccd
 8003fdc:	40020010 	.word	0x40020010
 8003fe0:	40020028 	.word	0x40020028
 8003fe4:	40020040 	.word	0x40020040
 8003fe8:	40020058 	.word	0x40020058
 8003fec:	40020070 	.word	0x40020070
 8003ff0:	40020088 	.word	0x40020088
 8003ff4:	400200a0 	.word	0x400200a0
 8003ff8:	400200b8 	.word	0x400200b8
 8003ffc:	40020410 	.word	0x40020410
 8004000:	40020428 	.word	0x40020428
 8004004:	40020440 	.word	0x40020440
 8004008:	40020458 	.word	0x40020458
 800400c:	40020470 	.word	0x40020470
 8004010:	40020488 	.word	0x40020488
 8004014:	400204a0 	.word	0x400204a0
 8004018:	400204b8 	.word	0x400204b8
 800401c:	58025408 	.word	0x58025408
 8004020:	5802541c 	.word	0x5802541c
 8004024:	58025430 	.word	0x58025430
 8004028:	58025444 	.word	0x58025444
 800402c:	58025458 	.word	0x58025458
 8004030:	5802546c 	.word	0x5802546c
 8004034:	58025480 	.word	0x58025480
 8004038:	58025494 	.word	0x58025494

0800403c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e226      	b.n	80044a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_DMA_Start_IT+0x2a>
 8004062:	2302      	movs	r3, #2
 8004064:	e21f      	b.n	80044a6 <HAL_DMA_Start_IT+0x46a>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	f040 820a 	bne.w	8004490 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a68      	ldr	r2, [pc, #416]	; (8004230 <HAL_DMA_Start_IT+0x1f4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d04a      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a66      	ldr	r2, [pc, #408]	; (8004234 <HAL_DMA_Start_IT+0x1f8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d045      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a65      	ldr	r2, [pc, #404]	; (8004238 <HAL_DMA_Start_IT+0x1fc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d040      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a63      	ldr	r2, [pc, #396]	; (800423c <HAL_DMA_Start_IT+0x200>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03b      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a62      	ldr	r2, [pc, #392]	; (8004240 <HAL_DMA_Start_IT+0x204>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d036      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a60      	ldr	r2, [pc, #384]	; (8004244 <HAL_DMA_Start_IT+0x208>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5f      	ldr	r2, [pc, #380]	; (8004248 <HAL_DMA_Start_IT+0x20c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d02c      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5d      	ldr	r2, [pc, #372]	; (800424c <HAL_DMA_Start_IT+0x210>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d027      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a5c      	ldr	r2, [pc, #368]	; (8004250 <HAL_DMA_Start_IT+0x214>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5a      	ldr	r2, [pc, #360]	; (8004254 <HAL_DMA_Start_IT+0x218>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a59      	ldr	r2, [pc, #356]	; (8004258 <HAL_DMA_Start_IT+0x21c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a57      	ldr	r2, [pc, #348]	; (800425c <HAL_DMA_Start_IT+0x220>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a56      	ldr	r2, [pc, #344]	; (8004260 <HAL_DMA_Start_IT+0x224>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a54      	ldr	r2, [pc, #336]	; (8004264 <HAL_DMA_Start_IT+0x228>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a53      	ldr	r2, [pc, #332]	; (8004268 <HAL_DMA_Start_IT+0x22c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_DMA_Start_IT+0xee>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a51      	ldr	r2, [pc, #324]	; (800426c <HAL_DMA_Start_IT+0x230>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <HAL_DMA_Start_IT+0x100>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e007      	b.n	800414c <HAL_DMA_Start_IT+0x110>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f001 fb4a 	bl	80057ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a34      	ldr	r2, [pc, #208]	; (8004230 <HAL_DMA_Start_IT+0x1f4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d04a      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a33      	ldr	r2, [pc, #204]	; (8004234 <HAL_DMA_Start_IT+0x1f8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d045      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a31      	ldr	r2, [pc, #196]	; (8004238 <HAL_DMA_Start_IT+0x1fc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d040      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a30      	ldr	r2, [pc, #192]	; (800423c <HAL_DMA_Start_IT+0x200>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d03b      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <HAL_DMA_Start_IT+0x204>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d036      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <HAL_DMA_Start_IT+0x208>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d031      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <HAL_DMA_Start_IT+0x20c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02c      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <HAL_DMA_Start_IT+0x210>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d027      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a28      	ldr	r2, [pc, #160]	; (8004250 <HAL_DMA_Start_IT+0x214>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d022      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_DMA_Start_IT+0x218>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d01d      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_DMA_Start_IT+0x21c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d018      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a24      	ldr	r2, [pc, #144]	; (800425c <HAL_DMA_Start_IT+0x220>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_DMA_Start_IT+0x224>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_DMA_Start_IT+0x228>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_DMA_Start_IT+0x22c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_DMA_Start_IT+0x1bc>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_DMA_Start_IT+0x230>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_DMA_Start_IT+0x1c0>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_DMA_Start_IT+0x1c2>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d036      	beq.n	8004270 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 021e 	bic.w	r2, r3, #30
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0216 	orr.w	r2, r2, #22
 8004214:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d03e      	beq.n	800429c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0208 	orr.w	r2, r2, #8
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e035      	b.n	800429c <HAL_DMA_Start_IT+0x260>
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 020e 	bic.w	r2, r3, #14
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 020a 	orr.w	r2, r2, #10
 8004282:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0204 	orr.w	r2, r2, #4
 800429a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a83      	ldr	r2, [pc, #524]	; (80044b0 <HAL_DMA_Start_IT+0x474>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d072      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a82      	ldr	r2, [pc, #520]	; (80044b4 <HAL_DMA_Start_IT+0x478>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d06d      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a80      	ldr	r2, [pc, #512]	; (80044b8 <HAL_DMA_Start_IT+0x47c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d068      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7f      	ldr	r2, [pc, #508]	; (80044bc <HAL_DMA_Start_IT+0x480>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d063      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a7d      	ldr	r2, [pc, #500]	; (80044c0 <HAL_DMA_Start_IT+0x484>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d05e      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7c      	ldr	r2, [pc, #496]	; (80044c4 <HAL_DMA_Start_IT+0x488>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d059      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7a      	ldr	r2, [pc, #488]	; (80044c8 <HAL_DMA_Start_IT+0x48c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d054      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a79      	ldr	r2, [pc, #484]	; (80044cc <HAL_DMA_Start_IT+0x490>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d04f      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a77      	ldr	r2, [pc, #476]	; (80044d0 <HAL_DMA_Start_IT+0x494>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d04a      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a76      	ldr	r2, [pc, #472]	; (80044d4 <HAL_DMA_Start_IT+0x498>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d045      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a74      	ldr	r2, [pc, #464]	; (80044d8 <HAL_DMA_Start_IT+0x49c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d040      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a73      	ldr	r2, [pc, #460]	; (80044dc <HAL_DMA_Start_IT+0x4a0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d03b      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a71      	ldr	r2, [pc, #452]	; (80044e0 <HAL_DMA_Start_IT+0x4a4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d036      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a70      	ldr	r2, [pc, #448]	; (80044e4 <HAL_DMA_Start_IT+0x4a8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d031      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_DMA_Start_IT+0x4ac>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d02c      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6d      	ldr	r2, [pc, #436]	; (80044ec <HAL_DMA_Start_IT+0x4b0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d027      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6b      	ldr	r2, [pc, #428]	; (80044f0 <HAL_DMA_Start_IT+0x4b4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6a      	ldr	r2, [pc, #424]	; (80044f4 <HAL_DMA_Start_IT+0x4b8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d01d      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a68      	ldr	r2, [pc, #416]	; (80044f8 <HAL_DMA_Start_IT+0x4bc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a67      	ldr	r2, [pc, #412]	; (80044fc <HAL_DMA_Start_IT+0x4c0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_DMA_Start_IT+0x4c4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a64      	ldr	r2, [pc, #400]	; (8004504 <HAL_DMA_Start_IT+0x4c8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a62      	ldr	r2, [pc, #392]	; (8004508 <HAL_DMA_Start_IT+0x4cc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a61      	ldr	r2, [pc, #388]	; (800450c <HAL_DMA_Start_IT+0x4d0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d101      	bne.n	8004390 <HAL_DMA_Start_IT+0x354>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_DMA_Start_IT+0x356>
 8004390:	2300      	movs	r3, #0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a37      	ldr	r2, [pc, #220]	; (80044b0 <HAL_DMA_Start_IT+0x474>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d04a      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a36      	ldr	r2, [pc, #216]	; (80044b4 <HAL_DMA_Start_IT+0x478>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d045      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a34      	ldr	r2, [pc, #208]	; (80044b8 <HAL_DMA_Start_IT+0x47c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d040      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a33      	ldr	r2, [pc, #204]	; (80044bc <HAL_DMA_Start_IT+0x480>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d03b      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <HAL_DMA_Start_IT+0x484>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d036      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a30      	ldr	r2, [pc, #192]	; (80044c4 <HAL_DMA_Start_IT+0x488>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d031      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <HAL_DMA_Start_IT+0x48c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d02c      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2d      	ldr	r2, [pc, #180]	; (80044cc <HAL_DMA_Start_IT+0x490>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d027      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2b      	ldr	r2, [pc, #172]	; (80044d0 <HAL_DMA_Start_IT+0x494>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <HAL_DMA_Start_IT+0x498>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d01d      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a28      	ldr	r2, [pc, #160]	; (80044d8 <HAL_DMA_Start_IT+0x49c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <HAL_DMA_Start_IT+0x4a0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_DMA_Start_IT+0x4a4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_DMA_Start_IT+0x4a8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_DMA_Start_IT+0x4ac>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_DMA_Start_IT+0x430>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_DMA_Start_IT+0x4b0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <HAL_DMA_Start_IT+0x442>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e012      	b.n	80044a4 <HAL_DMA_Start_IT+0x468>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e009      	b.n	80044a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40020028 	.word	0x40020028
 80044b8:	40020040 	.word	0x40020040
 80044bc:	40020058 	.word	0x40020058
 80044c0:	40020070 	.word	0x40020070
 80044c4:	40020088 	.word	0x40020088
 80044c8:	400200a0 	.word	0x400200a0
 80044cc:	400200b8 	.word	0x400200b8
 80044d0:	40020410 	.word	0x40020410
 80044d4:	40020428 	.word	0x40020428
 80044d8:	40020440 	.word	0x40020440
 80044dc:	40020458 	.word	0x40020458
 80044e0:	40020470 	.word	0x40020470
 80044e4:	40020488 	.word	0x40020488
 80044e8:	400204a0 	.word	0x400204a0
 80044ec:	400204b8 	.word	0x400204b8
 80044f0:	58025408 	.word	0x58025408
 80044f4:	5802541c 	.word	0x5802541c
 80044f8:	58025430 	.word	0x58025430
 80044fc:	58025444 	.word	0x58025444
 8004500:	58025458 	.word	0x58025458
 8004504:	5802546c 	.word	0x5802546c
 8004508:	58025480 	.word	0x58025480
 800450c:	58025494 	.word	0x58025494

08004510 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e205      	b.n	800492e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d004      	beq.n	8004538 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2280      	movs	r2, #128	; 0x80
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e1fa      	b.n	800492e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a8c      	ldr	r2, [pc, #560]	; (8004770 <HAL_DMA_Abort_IT+0x260>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d04a      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a8b      	ldr	r2, [pc, #556]	; (8004774 <HAL_DMA_Abort_IT+0x264>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d045      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a89      	ldr	r2, [pc, #548]	; (8004778 <HAL_DMA_Abort_IT+0x268>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d040      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a88      	ldr	r2, [pc, #544]	; (800477c <HAL_DMA_Abort_IT+0x26c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d03b      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a86      	ldr	r2, [pc, #536]	; (8004780 <HAL_DMA_Abort_IT+0x270>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d036      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a85      	ldr	r2, [pc, #532]	; (8004784 <HAL_DMA_Abort_IT+0x274>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d031      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a83      	ldr	r2, [pc, #524]	; (8004788 <HAL_DMA_Abort_IT+0x278>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02c      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a82      	ldr	r2, [pc, #520]	; (800478c <HAL_DMA_Abort_IT+0x27c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d027      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a80      	ldr	r2, [pc, #512]	; (8004790 <HAL_DMA_Abort_IT+0x280>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d022      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7f      	ldr	r2, [pc, #508]	; (8004794 <HAL_DMA_Abort_IT+0x284>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d01d      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7d      	ldr	r2, [pc, #500]	; (8004798 <HAL_DMA_Abort_IT+0x288>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_DMA_Abort_IT+0x28c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a7a      	ldr	r2, [pc, #488]	; (80047a0 <HAL_DMA_Abort_IT+0x290>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a79      	ldr	r2, [pc, #484]	; (80047a4 <HAL_DMA_Abort_IT+0x294>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a77      	ldr	r2, [pc, #476]	; (80047a8 <HAL_DMA_Abort_IT+0x298>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a76      	ldr	r2, [pc, #472]	; (80047ac <HAL_DMA_Abort_IT+0x29c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d101      	bne.n	80045dc <HAL_DMA_Abort_IT+0xcc>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <HAL_DMA_Abort_IT+0xce>
 80045dc:	2300      	movs	r3, #0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d065      	beq.n	80046ae <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a60      	ldr	r2, [pc, #384]	; (8004770 <HAL_DMA_Abort_IT+0x260>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d04a      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a5e      	ldr	r2, [pc, #376]	; (8004774 <HAL_DMA_Abort_IT+0x264>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d045      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5d      	ldr	r2, [pc, #372]	; (8004778 <HAL_DMA_Abort_IT+0x268>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d040      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5b      	ldr	r2, [pc, #364]	; (800477c <HAL_DMA_Abort_IT+0x26c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d03b      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5a      	ldr	r2, [pc, #360]	; (8004780 <HAL_DMA_Abort_IT+0x270>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d036      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a58      	ldr	r2, [pc, #352]	; (8004784 <HAL_DMA_Abort_IT+0x274>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d031      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a57      	ldr	r2, [pc, #348]	; (8004788 <HAL_DMA_Abort_IT+0x278>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d02c      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a55      	ldr	r2, [pc, #340]	; (800478c <HAL_DMA_Abort_IT+0x27c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d027      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_DMA_Abort_IT+0x280>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d022      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a52      	ldr	r2, [pc, #328]	; (8004794 <HAL_DMA_Abort_IT+0x284>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01d      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a51      	ldr	r2, [pc, #324]	; (8004798 <HAL_DMA_Abort_IT+0x288>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a4f      	ldr	r2, [pc, #316]	; (800479c <HAL_DMA_Abort_IT+0x28c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4e      	ldr	r2, [pc, #312]	; (80047a0 <HAL_DMA_Abort_IT+0x290>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a4c      	ldr	r2, [pc, #304]	; (80047a4 <HAL_DMA_Abort_IT+0x294>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4b      	ldr	r2, [pc, #300]	; (80047a8 <HAL_DMA_Abort_IT+0x298>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_DMA_Abort_IT+0x17a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a49      	ldr	r2, [pc, #292]	; (80047ac <HAL_DMA_Abort_IT+0x29c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d108      	bne.n	800469c <HAL_DMA_Abort_IT+0x18c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e147      	b.n	800492c <HAL_DMA_Abort_IT+0x41c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e13e      	b.n	800492c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 020e 	bic.w	r2, r2, #14
 80046bc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <HAL_DMA_Abort_IT+0x260>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d04a      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a29      	ldr	r2, [pc, #164]	; (8004774 <HAL_DMA_Abort_IT+0x264>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d045      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a28      	ldr	r2, [pc, #160]	; (8004778 <HAL_DMA_Abort_IT+0x268>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d040      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a26      	ldr	r2, [pc, #152]	; (800477c <HAL_DMA_Abort_IT+0x26c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d03b      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a25      	ldr	r2, [pc, #148]	; (8004780 <HAL_DMA_Abort_IT+0x270>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d036      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a23      	ldr	r2, [pc, #140]	; (8004784 <HAL_DMA_Abort_IT+0x274>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d031      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a22      	ldr	r2, [pc, #136]	; (8004788 <HAL_DMA_Abort_IT+0x278>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02c      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_DMA_Abort_IT+0x27c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d027      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <HAL_DMA_Abort_IT+0x280>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d022      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <HAL_DMA_Abort_IT+0x284>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01d      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <HAL_DMA_Abort_IT+0x288>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1a      	ldr	r2, [pc, #104]	; (800479c <HAL_DMA_Abort_IT+0x28c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_DMA_Abort_IT+0x290>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_DMA_Abort_IT+0x294>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_DMA_Abort_IT+0x298>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_DMA_Abort_IT+0x24e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <HAL_DMA_Abort_IT+0x29c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d128      	bne.n	80047b0 <HAL_DMA_Abort_IT+0x2a0>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e027      	b.n	80047c0 <HAL_DMA_Abort_IT+0x2b0>
 8004770:	40020010 	.word	0x40020010
 8004774:	40020028 	.word	0x40020028
 8004778:	40020040 	.word	0x40020040
 800477c:	40020058 	.word	0x40020058
 8004780:	40020070 	.word	0x40020070
 8004784:	40020088 	.word	0x40020088
 8004788:	400200a0 	.word	0x400200a0
 800478c:	400200b8 	.word	0x400200b8
 8004790:	40020410 	.word	0x40020410
 8004794:	40020428 	.word	0x40020428
 8004798:	40020440 	.word	0x40020440
 800479c:	40020458 	.word	0x40020458
 80047a0:	40020470 	.word	0x40020470
 80047a4:	40020488 	.word	0x40020488
 80047a8:	400204a0 	.word	0x400204a0
 80047ac:	400204b8 	.word	0x400204b8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <HAL_DMA_Abort_IT+0x428>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d072      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5b      	ldr	r2, [pc, #364]	; (800493c <HAL_DMA_Abort_IT+0x42c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d06d      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a59      	ldr	r2, [pc, #356]	; (8004940 <HAL_DMA_Abort_IT+0x430>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d068      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a58      	ldr	r2, [pc, #352]	; (8004944 <HAL_DMA_Abort_IT+0x434>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d063      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a56      	ldr	r2, [pc, #344]	; (8004948 <HAL_DMA_Abort_IT+0x438>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d05e      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a55      	ldr	r2, [pc, #340]	; (800494c <HAL_DMA_Abort_IT+0x43c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d059      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a53      	ldr	r2, [pc, #332]	; (8004950 <HAL_DMA_Abort_IT+0x440>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d054      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_DMA_Abort_IT+0x444>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d04f      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a50      	ldr	r2, [pc, #320]	; (8004958 <HAL_DMA_Abort_IT+0x448>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d04a      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a4f      	ldr	r2, [pc, #316]	; (800495c <HAL_DMA_Abort_IT+0x44c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d045      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a4d      	ldr	r2, [pc, #308]	; (8004960 <HAL_DMA_Abort_IT+0x450>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d040      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a4c      	ldr	r2, [pc, #304]	; (8004964 <HAL_DMA_Abort_IT+0x454>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d03b      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a4a      	ldr	r2, [pc, #296]	; (8004968 <HAL_DMA_Abort_IT+0x458>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d036      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a49      	ldr	r2, [pc, #292]	; (800496c <HAL_DMA_Abort_IT+0x45c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d031      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a47      	ldr	r2, [pc, #284]	; (8004970 <HAL_DMA_Abort_IT+0x460>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d02c      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a46      	ldr	r2, [pc, #280]	; (8004974 <HAL_DMA_Abort_IT+0x464>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d027      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a44      	ldr	r2, [pc, #272]	; (8004978 <HAL_DMA_Abort_IT+0x468>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a43      	ldr	r2, [pc, #268]	; (800497c <HAL_DMA_Abort_IT+0x46c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d01d      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a41      	ldr	r2, [pc, #260]	; (8004980 <HAL_DMA_Abort_IT+0x470>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a40      	ldr	r2, [pc, #256]	; (8004984 <HAL_DMA_Abort_IT+0x474>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3e      	ldr	r2, [pc, #248]	; (8004988 <HAL_DMA_Abort_IT+0x478>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3d      	ldr	r2, [pc, #244]	; (800498c <HAL_DMA_Abort_IT+0x47c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <HAL_DMA_Abort_IT+0x480>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x3a0>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3a      	ldr	r2, [pc, #232]	; (8004994 <HAL_DMA_Abort_IT+0x484>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_DMA_Abort_IT+0x3a4>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_DMA_Abort_IT+0x3a6>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004900:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800490a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8
 8004978:	58025408 	.word	0x58025408
 800497c:	5802541c 	.word	0x5802541c
 8004980:	58025430 	.word	0x58025430
 8004984:	58025444 	.word	0x58025444
 8004988:	58025458 	.word	0x58025458
 800498c:	5802546c 	.word	0x5802546c
 8004990:	58025480 	.word	0x58025480
 8004994:	58025494 	.word	0x58025494

08004998 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049a4:	4b67      	ldr	r3, [pc, #412]	; (8004b44 <HAL_DMA_IRQHandler+0x1ac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a67      	ldr	r2, [pc, #412]	; (8004b48 <HAL_DMA_IRQHandler+0x1b0>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	0a9b      	lsrs	r3, r3, #10
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5f      	ldr	r2, [pc, #380]	; (8004b4c <HAL_DMA_IRQHandler+0x1b4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d04a      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5d      	ldr	r2, [pc, #372]	; (8004b50 <HAL_DMA_IRQHandler+0x1b8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d045      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a5c      	ldr	r2, [pc, #368]	; (8004b54 <HAL_DMA_IRQHandler+0x1bc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d040      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5a      	ldr	r2, [pc, #360]	; (8004b58 <HAL_DMA_IRQHandler+0x1c0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d03b      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a59      	ldr	r2, [pc, #356]	; (8004b5c <HAL_DMA_IRQHandler+0x1c4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d036      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a57      	ldr	r2, [pc, #348]	; (8004b60 <HAL_DMA_IRQHandler+0x1c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d031      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a56      	ldr	r2, [pc, #344]	; (8004b64 <HAL_DMA_IRQHandler+0x1cc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d02c      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <HAL_DMA_IRQHandler+0x1d0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d027      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a53      	ldr	r2, [pc, #332]	; (8004b6c <HAL_DMA_IRQHandler+0x1d4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a51      	ldr	r2, [pc, #324]	; (8004b70 <HAL_DMA_IRQHandler+0x1d8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01d      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a50      	ldr	r2, [pc, #320]	; (8004b74 <HAL_DMA_IRQHandler+0x1dc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a4e      	ldr	r2, [pc, #312]	; (8004b78 <HAL_DMA_IRQHandler+0x1e0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a4d      	ldr	r2, [pc, #308]	; (8004b7c <HAL_DMA_IRQHandler+0x1e4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a4b      	ldr	r2, [pc, #300]	; (8004b80 <HAL_DMA_IRQHandler+0x1e8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a4a      	ldr	r2, [pc, #296]	; (8004b84 <HAL_DMA_IRQHandler+0x1ec>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xd2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a48      	ldr	r2, [pc, #288]	; (8004b88 <HAL_DMA_IRQHandler+0x1f0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_IRQHandler+0xd6>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_DMA_IRQHandler+0xd8>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 842b 	beq.w	80052cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2208      	movs	r2, #8
 8004a80:	409a      	lsls	r2, r3
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80a2 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2e      	ldr	r2, [pc, #184]	; (8004b4c <HAL_DMA_IRQHandler+0x1b4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d04a      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2d      	ldr	r2, [pc, #180]	; (8004b50 <HAL_DMA_IRQHandler+0x1b8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d045      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <HAL_DMA_IRQHandler+0x1bc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d040      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <HAL_DMA_IRQHandler+0x1c0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d03b      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <HAL_DMA_IRQHandler+0x1c4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d036      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <HAL_DMA_IRQHandler+0x1c8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d031      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <HAL_DMA_IRQHandler+0x1cc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02c      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <HAL_DMA_IRQHandler+0x1d0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d027      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <HAL_DMA_IRQHandler+0x1d4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d022      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_DMA_IRQHandler+0x1d8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d01d      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <HAL_DMA_IRQHandler+0x1dc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d018      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <HAL_DMA_IRQHandler+0x1e0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_DMA_IRQHandler+0x1e4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00e      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_DMA_IRQHandler+0x1e8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <HAL_DMA_IRQHandler+0x1ec>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x194>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <HAL_DMA_IRQHandler+0x1f0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d12f      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x1f4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e02e      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x208>
 8004b42:	bf00      	nop
 8004b44:	24000040 	.word	0x24000040
 8004b48:	1b4e81b5 	.word	0x1b4e81b5
 8004b4c:	40020010 	.word	0x40020010
 8004b50:	40020028 	.word	0x40020028
 8004b54:	40020040 	.word	0x40020040
 8004b58:	40020058 	.word	0x40020058
 8004b5c:	40020070 	.word	0x40020070
 8004b60:	40020088 	.word	0x40020088
 8004b64:	400200a0 	.word	0x400200a0
 8004b68:	400200b8 	.word	0x400200b8
 8004b6c:	40020410 	.word	0x40020410
 8004b70:	40020428 	.word	0x40020428
 8004b74:	40020440 	.word	0x40020440
 8004b78:	40020458 	.word	0x40020458
 8004b7c:	40020470 	.word	0x40020470
 8004b80:	40020488 	.word	0x40020488
 8004b84:	400204a0 	.word	0x400204a0
 8004b88:	400204b8 	.word	0x400204b8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	f043 0201 	orr.w	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	fa22 f303 	lsr.w	r3, r2, r3
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d06e      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a69      	ldr	r2, [pc, #420]	; (8004d90 <HAL_DMA_IRQHandler+0x3f8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d04a      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a67      	ldr	r2, [pc, #412]	; (8004d94 <HAL_DMA_IRQHandler+0x3fc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d045      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a66      	ldr	r2, [pc, #408]	; (8004d98 <HAL_DMA_IRQHandler+0x400>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d040      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a64      	ldr	r2, [pc, #400]	; (8004d9c <HAL_DMA_IRQHandler+0x404>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d03b      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a63      	ldr	r2, [pc, #396]	; (8004da0 <HAL_DMA_IRQHandler+0x408>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d036      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a61      	ldr	r2, [pc, #388]	; (8004da4 <HAL_DMA_IRQHandler+0x40c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a60      	ldr	r2, [pc, #384]	; (8004da8 <HAL_DMA_IRQHandler+0x410>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d02c      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5e      	ldr	r2, [pc, #376]	; (8004dac <HAL_DMA_IRQHandler+0x414>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d027      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5d      	ldr	r2, [pc, #372]	; (8004db0 <HAL_DMA_IRQHandler+0x418>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5b      	ldr	r2, [pc, #364]	; (8004db4 <HAL_DMA_IRQHandler+0x41c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01d      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a5a      	ldr	r2, [pc, #360]	; (8004db8 <HAL_DMA_IRQHandler+0x420>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a58      	ldr	r2, [pc, #352]	; (8004dbc <HAL_DMA_IRQHandler+0x424>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a57      	ldr	r2, [pc, #348]	; (8004dc0 <HAL_DMA_IRQHandler+0x428>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a55      	ldr	r2, [pc, #340]	; (8004dc4 <HAL_DMA_IRQHandler+0x42c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a54      	ldr	r2, [pc, #336]	; (8004dc8 <HAL_DMA_IRQHandler+0x430>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2ee>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a52      	ldr	r2, [pc, #328]	; (8004dcc <HAL_DMA_IRQHandler+0x434>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10a      	bne.n	8004c9c <HAL_DMA_IRQHandler+0x304>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e003      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x30c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	f043 0202 	orr.w	r2, r3, #2
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2204      	movs	r2, #4
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 808f 	beq.w	8004df8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <HAL_DMA_IRQHandler+0x3f8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04a      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2a      	ldr	r2, [pc, #168]	; (8004d94 <HAL_DMA_IRQHandler+0x3fc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d045      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <HAL_DMA_IRQHandler+0x400>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <HAL_DMA_IRQHandler+0x404>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d03b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <HAL_DMA_IRQHandler+0x408>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d036      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <HAL_DMA_IRQHandler+0x40c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d031      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <HAL_DMA_IRQHandler+0x410>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02c      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a21      	ldr	r2, [pc, #132]	; (8004dac <HAL_DMA_IRQHandler+0x414>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d027      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <HAL_DMA_IRQHandler+0x418>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <HAL_DMA_IRQHandler+0x41c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <HAL_DMA_IRQHandler+0x420>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1b      	ldr	r2, [pc, #108]	; (8004dbc <HAL_DMA_IRQHandler+0x424>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <HAL_DMA_IRQHandler+0x428>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <HAL_DMA_IRQHandler+0x42c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <HAL_DMA_IRQHandler+0x430>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x3e2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <HAL_DMA_IRQHandler+0x434>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d12a      	bne.n	8004dd0 <HAL_DMA_IRQHandler+0x438>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e023      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x440>
 8004d90:	40020010 	.word	0x40020010
 8004d94:	40020028 	.word	0x40020028
 8004d98:	40020040 	.word	0x40020040
 8004d9c:	40020058 	.word	0x40020058
 8004da0:	40020070 	.word	0x40020070
 8004da4:	40020088 	.word	0x40020088
 8004da8:	400200a0 	.word	0x400200a0
 8004dac:	400200b8 	.word	0x400200b8
 8004db0:	40020410 	.word	0x40020410
 8004db4:	40020428 	.word	0x40020428
 8004db8:	40020440 	.word	0x40020440
 8004dbc:	40020458 	.word	0x40020458
 8004dc0:	40020470 	.word	0x40020470
 8004dc4:	40020488 	.word	0x40020488
 8004dc8:	400204a0 	.word	0x400204a0
 8004dcc:	400204b8 	.word	0x400204b8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2204      	movs	r2, #4
 8004de6:	409a      	lsls	r2, r3
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f043 0204 	orr.w	r2, r3, #4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2210      	movs	r2, #16
 8004e02:	409a      	lsls	r2, r3
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80a6 	beq.w	8004f5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a85      	ldr	r2, [pc, #532]	; (8005028 <HAL_DMA_IRQHandler+0x690>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d04a      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a83      	ldr	r2, [pc, #524]	; (800502c <HAL_DMA_IRQHandler+0x694>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d045      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a82      	ldr	r2, [pc, #520]	; (8005030 <HAL_DMA_IRQHandler+0x698>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d040      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a80      	ldr	r2, [pc, #512]	; (8005034 <HAL_DMA_IRQHandler+0x69c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d03b      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7f      	ldr	r2, [pc, #508]	; (8005038 <HAL_DMA_IRQHandler+0x6a0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d036      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7d      	ldr	r2, [pc, #500]	; (800503c <HAL_DMA_IRQHandler+0x6a4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d031      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7c      	ldr	r2, [pc, #496]	; (8005040 <HAL_DMA_IRQHandler+0x6a8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d02c      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7a      	ldr	r2, [pc, #488]	; (8005044 <HAL_DMA_IRQHandler+0x6ac>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d027      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a79      	ldr	r2, [pc, #484]	; (8005048 <HAL_DMA_IRQHandler+0x6b0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a77      	ldr	r2, [pc, #476]	; (800504c <HAL_DMA_IRQHandler+0x6b4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01d      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a76      	ldr	r2, [pc, #472]	; (8005050 <HAL_DMA_IRQHandler+0x6b8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a74      	ldr	r2, [pc, #464]	; (8005054 <HAL_DMA_IRQHandler+0x6bc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a73      	ldr	r2, [pc, #460]	; (8005058 <HAL_DMA_IRQHandler+0x6c0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a71      	ldr	r2, [pc, #452]	; (800505c <HAL_DMA_IRQHandler+0x6c4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a70      	ldr	r2, [pc, #448]	; (8005060 <HAL_DMA_IRQHandler+0x6c8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_DMA_IRQHandler+0x516>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6e      	ldr	r2, [pc, #440]	; (8005064 <HAL_DMA_IRQHandler+0x6cc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10a      	bne.n	8004ec4 <HAL_DMA_IRQHandler+0x52c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	e009      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x540>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d03e      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d018      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d108      	bne.n	8004f1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d024      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
 8004f18:	e01f      	b.n	8004f5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01b      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
 8004f2a:	e016      	b.n	8004f5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d107      	bne.n	8004f4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0208 	bic.w	r2, r2, #8
 8004f48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2220      	movs	r2, #32
 8004f64:	409a      	lsls	r2, r3
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8110 	beq.w	8005190 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <HAL_DMA_IRQHandler+0x690>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d04a      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2b      	ldr	r2, [pc, #172]	; (800502c <HAL_DMA_IRQHandler+0x694>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d045      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a29      	ldr	r2, [pc, #164]	; (8005030 <HAL_DMA_IRQHandler+0x698>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d040      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a28      	ldr	r2, [pc, #160]	; (8005034 <HAL_DMA_IRQHandler+0x69c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d03b      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <HAL_DMA_IRQHandler+0x6a0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d036      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a25      	ldr	r2, [pc, #148]	; (800503c <HAL_DMA_IRQHandler+0x6a4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d031      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a23      	ldr	r2, [pc, #140]	; (8005040 <HAL_DMA_IRQHandler+0x6a8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d02c      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <HAL_DMA_IRQHandler+0x6ac>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d027      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	; (8005048 <HAL_DMA_IRQHandler+0x6b0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1f      	ldr	r2, [pc, #124]	; (800504c <HAL_DMA_IRQHandler+0x6b4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d01d      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_DMA_IRQHandler+0x6b8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_DMA_IRQHandler+0x6bc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <HAL_DMA_IRQHandler+0x6c0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_DMA_IRQHandler+0x6c4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_DMA_IRQHandler+0x6c8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_DMA_IRQHandler+0x678>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <HAL_DMA_IRQHandler+0x6cc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d12b      	bne.n	8005068 <HAL_DMA_IRQHandler+0x6d0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b00      	cmp	r3, #0
 800501c:	bf14      	ite	ne
 800501e:	2301      	movne	r3, #1
 8005020:	2300      	moveq	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e02a      	b.n	800507c <HAL_DMA_IRQHandler+0x6e4>
 8005026:	bf00      	nop
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	40020058 	.word	0x40020058
 8005038:	40020070 	.word	0x40020070
 800503c:	40020088 	.word	0x40020088
 8005040:	400200a0 	.word	0x400200a0
 8005044:	400200b8 	.word	0x400200b8
 8005048:	40020410 	.word	0x40020410
 800504c:	40020428 	.word	0x40020428
 8005050:	40020440 	.word	0x40020440
 8005054:	40020458 	.word	0x40020458
 8005058:	40020470 	.word	0x40020470
 800505c:	40020488 	.word	0x40020488
 8005060:	400204a0 	.word	0x400204a0
 8005064:	400204b8 	.word	0x400204b8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8087 	beq.w	8005190 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2220      	movs	r2, #32
 800508c:	409a      	lsls	r2, r3
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b04      	cmp	r3, #4
 800509c:	d139      	bne.n	8005112 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0216 	bic.w	r2, r2, #22
 80050ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <HAL_DMA_IRQHandler+0x736>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0208 	bic.w	r2, r2, #8
 80050dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	223f      	movs	r2, #63	; 0x3f
 80050e8:	409a      	lsls	r2, r3
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 834a 	beq.w	800579c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
          }
          return;
 8005110:	e344      	b.n	800579c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d018      	beq.n	8005152 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d108      	bne.n	8005140 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02c      	beq.n	8005190 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
 800513e:	e027      	b.n	8005190 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d023      	beq.n	8005190 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4798      	blx	r3
 8005150:	e01e      	b.n	8005190 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10f      	bne.n	8005180 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0210 	bic.w	r2, r2, #16
 800516e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8306 	beq.w	80057a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8088 	beq.w	80052b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2204      	movs	r2, #4
 80051ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a7a      	ldr	r2, [pc, #488]	; (80053a0 <HAL_DMA_IRQHandler+0xa08>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d04a      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a79      	ldr	r2, [pc, #484]	; (80053a4 <HAL_DMA_IRQHandler+0xa0c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d045      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a77      	ldr	r2, [pc, #476]	; (80053a8 <HAL_DMA_IRQHandler+0xa10>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d040      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a76      	ldr	r2, [pc, #472]	; (80053ac <HAL_DMA_IRQHandler+0xa14>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d03b      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a74      	ldr	r2, [pc, #464]	; (80053b0 <HAL_DMA_IRQHandler+0xa18>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d036      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a73      	ldr	r2, [pc, #460]	; (80053b4 <HAL_DMA_IRQHandler+0xa1c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d031      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a71      	ldr	r2, [pc, #452]	; (80053b8 <HAL_DMA_IRQHandler+0xa20>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d02c      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a70      	ldr	r2, [pc, #448]	; (80053bc <HAL_DMA_IRQHandler+0xa24>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d027      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a6e      	ldr	r2, [pc, #440]	; (80053c0 <HAL_DMA_IRQHandler+0xa28>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6d      	ldr	r2, [pc, #436]	; (80053c4 <HAL_DMA_IRQHandler+0xa2c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01d      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a6b      	ldr	r2, [pc, #428]	; (80053c8 <HAL_DMA_IRQHandler+0xa30>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a6a      	ldr	r2, [pc, #424]	; (80053cc <HAL_DMA_IRQHandler+0xa34>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a68      	ldr	r2, [pc, #416]	; (80053d0 <HAL_DMA_IRQHandler+0xa38>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a67      	ldr	r2, [pc, #412]	; (80053d4 <HAL_DMA_IRQHandler+0xa3c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a65      	ldr	r2, [pc, #404]	; (80053d8 <HAL_DMA_IRQHandler+0xa40>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_DMA_IRQHandler+0x8b8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a64      	ldr	r2, [pc, #400]	; (80053dc <HAL_DMA_IRQHandler+0xa44>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d108      	bne.n	8005262 <HAL_DMA_IRQHandler+0x8ca>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e007      	b.n	8005272 <HAL_DMA_IRQHandler+0x8da>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	429a      	cmp	r2, r3
 800527c:	d307      	bcc.n	800528e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f2      	bne.n	8005272 <HAL_DMA_IRQHandler+0x8da>
 800528c:	e000      	b.n	8005290 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800528e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2203      	movs	r2, #3
 80052aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80052ae:	e003      	b.n	80052b8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8272 	beq.w	80057a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	e26c      	b.n	80057a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a43      	ldr	r2, [pc, #268]	; (80053e0 <HAL_DMA_IRQHandler+0xa48>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a42      	ldr	r2, [pc, #264]	; (80053e4 <HAL_DMA_IRQHandler+0xa4c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01d      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a40      	ldr	r2, [pc, #256]	; (80053e8 <HAL_DMA_IRQHandler+0xa50>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3f      	ldr	r2, [pc, #252]	; (80053ec <HAL_DMA_IRQHandler+0xa54>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3d      	ldr	r2, [pc, #244]	; (80053f0 <HAL_DMA_IRQHandler+0xa58>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a3c      	ldr	r2, [pc, #240]	; (80053f4 <HAL_DMA_IRQHandler+0xa5c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3a      	ldr	r2, [pc, #232]	; (80053f8 <HAL_DMA_IRQHandler+0xa60>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_DMA_IRQHandler+0x984>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a39      	ldr	r2, [pc, #228]	; (80053fc <HAL_DMA_IRQHandler+0xa64>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <HAL_DMA_IRQHandler+0x988>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_DMA_IRQHandler+0x98a>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 823f 	beq.w	80057a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2204      	movs	r2, #4
 800533a:	409a      	lsls	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80cd 	beq.w	80054e0 <HAL_DMA_IRQHandler+0xb48>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80c7 	beq.w	80054e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2204      	movs	r2, #4
 800535c:	409a      	lsls	r2, r3
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d049      	beq.n	8005400 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8210 	beq.w	80057a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005388:	e20a      	b.n	80057a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8206 	beq.w	80057a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800539c:	e200      	b.n	80057a0 <HAL_DMA_IRQHandler+0xe08>
 800539e:	bf00      	nop
 80053a0:	40020010 	.word	0x40020010
 80053a4:	40020028 	.word	0x40020028
 80053a8:	40020040 	.word	0x40020040
 80053ac:	40020058 	.word	0x40020058
 80053b0:	40020070 	.word	0x40020070
 80053b4:	40020088 	.word	0x40020088
 80053b8:	400200a0 	.word	0x400200a0
 80053bc:	400200b8 	.word	0x400200b8
 80053c0:	40020410 	.word	0x40020410
 80053c4:	40020428 	.word	0x40020428
 80053c8:	40020440 	.word	0x40020440
 80053cc:	40020458 	.word	0x40020458
 80053d0:	40020470 	.word	0x40020470
 80053d4:	40020488 	.word	0x40020488
 80053d8:	400204a0 	.word	0x400204a0
 80053dc:	400204b8 	.word	0x400204b8
 80053e0:	58025408 	.word	0x58025408
 80053e4:	5802541c 	.word	0x5802541c
 80053e8:	58025430 	.word	0x58025430
 80053ec:	58025444 	.word	0x58025444
 80053f0:	58025458 	.word	0x58025458
 80053f4:	5802546c 	.word	0x5802546c
 80053f8:	58025480 	.word	0x58025480
 80053fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d160      	bne.n	80054cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a8c      	ldr	r2, [pc, #560]	; (8005640 <HAL_DMA_IRQHandler+0xca8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d04a      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a8a      	ldr	r2, [pc, #552]	; (8005644 <HAL_DMA_IRQHandler+0xcac>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d045      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a89      	ldr	r2, [pc, #548]	; (8005648 <HAL_DMA_IRQHandler+0xcb0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d040      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a87      	ldr	r2, [pc, #540]	; (800564c <HAL_DMA_IRQHandler+0xcb4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d03b      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a86      	ldr	r2, [pc, #536]	; (8005650 <HAL_DMA_IRQHandler+0xcb8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d036      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a84      	ldr	r2, [pc, #528]	; (8005654 <HAL_DMA_IRQHandler+0xcbc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d031      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a83      	ldr	r2, [pc, #524]	; (8005658 <HAL_DMA_IRQHandler+0xcc0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d02c      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a81      	ldr	r2, [pc, #516]	; (800565c <HAL_DMA_IRQHandler+0xcc4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d027      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a80      	ldr	r2, [pc, #512]	; (8005660 <HAL_DMA_IRQHandler+0xcc8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7e      	ldr	r2, [pc, #504]	; (8005664 <HAL_DMA_IRQHandler+0xccc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01d      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a7d      	ldr	r2, [pc, #500]	; (8005668 <HAL_DMA_IRQHandler+0xcd0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a7b      	ldr	r2, [pc, #492]	; (800566c <HAL_DMA_IRQHandler+0xcd4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a7a      	ldr	r2, [pc, #488]	; (8005670 <HAL_DMA_IRQHandler+0xcd8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a78      	ldr	r2, [pc, #480]	; (8005674 <HAL_DMA_IRQHandler+0xcdc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a77      	ldr	r2, [pc, #476]	; (8005678 <HAL_DMA_IRQHandler+0xce0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_DMA_IRQHandler+0xb12>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a75      	ldr	r2, [pc, #468]	; (800567c <HAL_DMA_IRQHandler+0xce4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <HAL_DMA_IRQHandler+0xb24>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0208 	bic.w	r2, r2, #8
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e007      	b.n	80054cc <HAL_DMA_IRQHandler+0xb34>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8165 	beq.w	80057a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054de:	e15f      	b.n	80057a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2202      	movs	r2, #2
 80054ea:	409a      	lsls	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80c5 	beq.w	8005680 <HAL_DMA_IRQHandler+0xce8>
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80bf 	beq.w	8005680 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2202      	movs	r2, #2
 800550c:	409a      	lsls	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d018      	beq.n	800554e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 813a 	beq.w	80057a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005538:	e134      	b.n	80057a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8130 	beq.w	80057a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800554c:	e12a      	b.n	80057a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d168      	bne.n	800562a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a38      	ldr	r2, [pc, #224]	; (8005640 <HAL_DMA_IRQHandler+0xca8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d04a      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <HAL_DMA_IRQHandler+0xcac>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d045      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a35      	ldr	r2, [pc, #212]	; (8005648 <HAL_DMA_IRQHandler+0xcb0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d040      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a34      	ldr	r2, [pc, #208]	; (800564c <HAL_DMA_IRQHandler+0xcb4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d03b      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a32      	ldr	r2, [pc, #200]	; (8005650 <HAL_DMA_IRQHandler+0xcb8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d036      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a31      	ldr	r2, [pc, #196]	; (8005654 <HAL_DMA_IRQHandler+0xcbc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d031      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <HAL_DMA_IRQHandler+0xcc0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02c      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2e      	ldr	r2, [pc, #184]	; (800565c <HAL_DMA_IRQHandler+0xcc4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d027      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <HAL_DMA_IRQHandler+0xcc8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2b      	ldr	r2, [pc, #172]	; (8005664 <HAL_DMA_IRQHandler+0xccc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01d      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a29      	ldr	r2, [pc, #164]	; (8005668 <HAL_DMA_IRQHandler+0xcd0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a28      	ldr	r2, [pc, #160]	; (800566c <HAL_DMA_IRQHandler+0xcd4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a26      	ldr	r2, [pc, #152]	; (8005670 <HAL_DMA_IRQHandler+0xcd8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a25      	ldr	r2, [pc, #148]	; (8005674 <HAL_DMA_IRQHandler+0xcdc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a23      	ldr	r2, [pc, #140]	; (8005678 <HAL_DMA_IRQHandler+0xce0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xc60>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a22      	ldr	r2, [pc, #136]	; (800567c <HAL_DMA_IRQHandler+0xce4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <HAL_DMA_IRQHandler+0xc72>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0214 	bic.w	r2, r2, #20
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e007      	b.n	800561a <HAL_DMA_IRQHandler+0xc82>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 020a 	bic.w	r2, r2, #10
 8005618:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80b8 	beq.w	80057a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800563c:	e0b2      	b.n	80057a4 <HAL_DMA_IRQHandler+0xe0c>
 800563e:	bf00      	nop
 8005640:	40020010 	.word	0x40020010
 8005644:	40020028 	.word	0x40020028
 8005648:	40020040 	.word	0x40020040
 800564c:	40020058 	.word	0x40020058
 8005650:	40020070 	.word	0x40020070
 8005654:	40020088 	.word	0x40020088
 8005658:	400200a0 	.word	0x400200a0
 800565c:	400200b8 	.word	0x400200b8
 8005660:	40020410 	.word	0x40020410
 8005664:	40020428 	.word	0x40020428
 8005668:	40020440 	.word	0x40020440
 800566c:	40020458 	.word	0x40020458
 8005670:	40020470 	.word	0x40020470
 8005674:	40020488 	.word	0x40020488
 8005678:	400204a0 	.word	0x400204a0
 800567c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2208      	movs	r2, #8
 800568a:	409a      	lsls	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8088 	beq.w	80057a6 <HAL_DMA_IRQHandler+0xe0e>
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8082 	beq.w	80057a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a41      	ldr	r2, [pc, #260]	; (80057ac <HAL_DMA_IRQHandler+0xe14>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a3f      	ldr	r2, [pc, #252]	; (80057b0 <HAL_DMA_IRQHandler+0xe18>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <HAL_DMA_IRQHandler+0xe1c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a3c      	ldr	r2, [pc, #240]	; (80057b8 <HAL_DMA_IRQHandler+0xe20>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <HAL_DMA_IRQHandler+0xe24>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_DMA_IRQHandler+0xe28>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <HAL_DMA_IRQHandler+0xe2c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a36      	ldr	r2, [pc, #216]	; (80057c8 <HAL_DMA_IRQHandler+0xe30>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a35      	ldr	r2, [pc, #212]	; (80057cc <HAL_DMA_IRQHandler+0xe34>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a33      	ldr	r2, [pc, #204]	; (80057d0 <HAL_DMA_IRQHandler+0xe38>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a32      	ldr	r2, [pc, #200]	; (80057d4 <HAL_DMA_IRQHandler+0xe3c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a30      	ldr	r2, [pc, #192]	; (80057d8 <HAL_DMA_IRQHandler+0xe40>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <HAL_DMA_IRQHandler+0xe44>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2d      	ldr	r2, [pc, #180]	; (80057e0 <HAL_DMA_IRQHandler+0xe48>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <HAL_DMA_IRQHandler+0xe4c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_IRQHandler+0xdaa>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <HAL_DMA_IRQHandler+0xe50>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <HAL_DMA_IRQHandler+0xdbc>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 021c 	bic.w	r2, r2, #28
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e007      	b.n	8005764 <HAL_DMA_IRQHandler+0xdcc>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 020e 	bic.w	r2, r2, #14
 8005762:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	2201      	movs	r2, #1
 800576e:	409a      	lsls	r2, r3
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
 800579a:	e004      	b.n	80057a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800579c:	bf00      	nop
 800579e:	e002      	b.n	80057a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a0:	bf00      	nop
 80057a2:	e000      	b.n	80057a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057a6:	3728      	adds	r7, #40	; 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40020010 	.word	0x40020010
 80057b0:	40020028 	.word	0x40020028
 80057b4:	40020040 	.word	0x40020040
 80057b8:	40020058 	.word	0x40020058
 80057bc:	40020070 	.word	0x40020070
 80057c0:	40020088 	.word	0x40020088
 80057c4:	400200a0 	.word	0x400200a0
 80057c8:	400200b8 	.word	0x400200b8
 80057cc:	40020410 	.word	0x40020410
 80057d0:	40020428 	.word	0x40020428
 80057d4:	40020440 	.word	0x40020440
 80057d8:	40020458 	.word	0x40020458
 80057dc:	40020470 	.word	0x40020470
 80057e0:	40020488 	.word	0x40020488
 80057e4:	400204a0 	.word	0x400204a0
 80057e8:	400204b8 	.word	0x400204b8

080057ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a84      	ldr	r2, [pc, #528]	; (8005a1c <DMA_SetConfig+0x230>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d072      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a82      	ldr	r2, [pc, #520]	; (8005a20 <DMA_SetConfig+0x234>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d06d      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a81      	ldr	r2, [pc, #516]	; (8005a24 <DMA_SetConfig+0x238>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d068      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a7f      	ldr	r2, [pc, #508]	; (8005a28 <DMA_SetConfig+0x23c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d063      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7e      	ldr	r2, [pc, #504]	; (8005a2c <DMA_SetConfig+0x240>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d05e      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a7c      	ldr	r2, [pc, #496]	; (8005a30 <DMA_SetConfig+0x244>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d059      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7b      	ldr	r2, [pc, #492]	; (8005a34 <DMA_SetConfig+0x248>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d054      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a79      	ldr	r2, [pc, #484]	; (8005a38 <DMA_SetConfig+0x24c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04f      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a78      	ldr	r2, [pc, #480]	; (8005a3c <DMA_SetConfig+0x250>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04a      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a76      	ldr	r2, [pc, #472]	; (8005a40 <DMA_SetConfig+0x254>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d045      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a75      	ldr	r2, [pc, #468]	; (8005a44 <DMA_SetConfig+0x258>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d040      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a73      	ldr	r2, [pc, #460]	; (8005a48 <DMA_SetConfig+0x25c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d03b      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a72      	ldr	r2, [pc, #456]	; (8005a4c <DMA_SetConfig+0x260>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d036      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a70      	ldr	r2, [pc, #448]	; (8005a50 <DMA_SetConfig+0x264>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6f      	ldr	r2, [pc, #444]	; (8005a54 <DMA_SetConfig+0x268>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d02c      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a6d      	ldr	r2, [pc, #436]	; (8005a58 <DMA_SetConfig+0x26c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d027      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a6c      	ldr	r2, [pc, #432]	; (8005a5c <DMA_SetConfig+0x270>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a6a      	ldr	r2, [pc, #424]	; (8005a60 <DMA_SetConfig+0x274>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a69      	ldr	r2, [pc, #420]	; (8005a64 <DMA_SetConfig+0x278>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a67      	ldr	r2, [pc, #412]	; (8005a68 <DMA_SetConfig+0x27c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a66      	ldr	r2, [pc, #408]	; (8005a6c <DMA_SetConfig+0x280>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a64      	ldr	r2, [pc, #400]	; (8005a70 <DMA_SetConfig+0x284>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a63      	ldr	r2, [pc, #396]	; (8005a74 <DMA_SetConfig+0x288>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <DMA_SetConfig+0x10a>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a61      	ldr	r2, [pc, #388]	; (8005a78 <DMA_SetConfig+0x28c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <DMA_SetConfig+0x10e>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <DMA_SetConfig+0x110>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00d      	beq.n	800591c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005908:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800591a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a3e      	ldr	r2, [pc, #248]	; (8005a1c <DMA_SetConfig+0x230>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d04a      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <DMA_SetConfig+0x234>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d045      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3b      	ldr	r2, [pc, #236]	; (8005a24 <DMA_SetConfig+0x238>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d040      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a3a      	ldr	r2, [pc, #232]	; (8005a28 <DMA_SetConfig+0x23c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d03b      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a38      	ldr	r2, [pc, #224]	; (8005a2c <DMA_SetConfig+0x240>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d036      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a37      	ldr	r2, [pc, #220]	; (8005a30 <DMA_SetConfig+0x244>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d031      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a35      	ldr	r2, [pc, #212]	; (8005a34 <DMA_SetConfig+0x248>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02c      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <DMA_SetConfig+0x24c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d027      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a32      	ldr	r2, [pc, #200]	; (8005a3c <DMA_SetConfig+0x250>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d022      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <DMA_SetConfig+0x254>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01d      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <DMA_SetConfig+0x258>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d018      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2e      	ldr	r2, [pc, #184]	; (8005a48 <DMA_SetConfig+0x25c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <DMA_SetConfig+0x260>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00e      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2b      	ldr	r2, [pc, #172]	; (8005a50 <DMA_SetConfig+0x264>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d009      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a29      	ldr	r2, [pc, #164]	; (8005a54 <DMA_SetConfig+0x268>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <DMA_SetConfig+0x1d0>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a28      	ldr	r2, [pc, #160]	; (8005a58 <DMA_SetConfig+0x26c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <DMA_SetConfig+0x1d4>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <DMA_SetConfig+0x1d6>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d05a      	beq.n	8005a7c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	223f      	movs	r2, #63	; 0x3f
 80059d0:	409a      	lsls	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d108      	bne.n	8005a08 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a06:	e087      	b.n	8005b18 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	e07e      	b.n	8005b18 <DMA_SetConfig+0x32c>
 8005a1a:	bf00      	nop
 8005a1c:	40020010 	.word	0x40020010
 8005a20:	40020028 	.word	0x40020028
 8005a24:	40020040 	.word	0x40020040
 8005a28:	40020058 	.word	0x40020058
 8005a2c:	40020070 	.word	0x40020070
 8005a30:	40020088 	.word	0x40020088
 8005a34:	400200a0 	.word	0x400200a0
 8005a38:	400200b8 	.word	0x400200b8
 8005a3c:	40020410 	.word	0x40020410
 8005a40:	40020428 	.word	0x40020428
 8005a44:	40020440 	.word	0x40020440
 8005a48:	40020458 	.word	0x40020458
 8005a4c:	40020470 	.word	0x40020470
 8005a50:	40020488 	.word	0x40020488
 8005a54:	400204a0 	.word	0x400204a0
 8005a58:	400204b8 	.word	0x400204b8
 8005a5c:	58025408 	.word	0x58025408
 8005a60:	5802541c 	.word	0x5802541c
 8005a64:	58025430 	.word	0x58025430
 8005a68:	58025444 	.word	0x58025444
 8005a6c:	58025458 	.word	0x58025458
 8005a70:	5802546c 	.word	0x5802546c
 8005a74:	58025480 	.word	0x58025480
 8005a78:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a28      	ldr	r2, [pc, #160]	; (8005b24 <DMA_SetConfig+0x338>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a27      	ldr	r2, [pc, #156]	; (8005b28 <DMA_SetConfig+0x33c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01d      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a25      	ldr	r2, [pc, #148]	; (8005b2c <DMA_SetConfig+0x340>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a24      	ldr	r2, [pc, #144]	; (8005b30 <DMA_SetConfig+0x344>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <DMA_SetConfig+0x348>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <DMA_SetConfig+0x34c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1f      	ldr	r2, [pc, #124]	; (8005b3c <DMA_SetConfig+0x350>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <DMA_SetConfig+0x2e0>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <DMA_SetConfig+0x354>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <DMA_SetConfig+0x2e4>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <DMA_SetConfig+0x2e6>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d020      	beq.n	8005b18 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2201      	movs	r2, #1
 8005ae0:	409a      	lsls	r2, r3
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d108      	bne.n	8005b08 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	60da      	str	r2, [r3, #12]
}
 8005b06:	e007      	b.n	8005b18 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	58025408 	.word	0x58025408
 8005b28:	5802541c 	.word	0x5802541c
 8005b2c:	58025430 	.word	0x58025430
 8005b30:	58025444 	.word	0x58025444
 8005b34:	58025458 	.word	0x58025458
 8005b38:	5802546c 	.word	0x5802546c
 8005b3c:	58025480 	.word	0x58025480
 8005b40:	58025494 	.word	0x58025494

08005b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a42      	ldr	r2, [pc, #264]	; (8005c5c <DMA_CalcBaseAndBitshift+0x118>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d04a      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a41      	ldr	r2, [pc, #260]	; (8005c60 <DMA_CalcBaseAndBitshift+0x11c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d045      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a3f      	ldr	r2, [pc, #252]	; (8005c64 <DMA_CalcBaseAndBitshift+0x120>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d040      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a3e      	ldr	r2, [pc, #248]	; (8005c68 <DMA_CalcBaseAndBitshift+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d03b      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a3c      	ldr	r2, [pc, #240]	; (8005c6c <DMA_CalcBaseAndBitshift+0x128>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d036      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3b      	ldr	r2, [pc, #236]	; (8005c70 <DMA_CalcBaseAndBitshift+0x12c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d031      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a39      	ldr	r2, [pc, #228]	; (8005c74 <DMA_CalcBaseAndBitshift+0x130>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02c      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a38      	ldr	r2, [pc, #224]	; (8005c78 <DMA_CalcBaseAndBitshift+0x134>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d027      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a36      	ldr	r2, [pc, #216]	; (8005c7c <DMA_CalcBaseAndBitshift+0x138>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a35      	ldr	r2, [pc, #212]	; (8005c80 <DMA_CalcBaseAndBitshift+0x13c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01d      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a33      	ldr	r2, [pc, #204]	; (8005c84 <DMA_CalcBaseAndBitshift+0x140>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a32      	ldr	r2, [pc, #200]	; (8005c88 <DMA_CalcBaseAndBitshift+0x144>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a30      	ldr	r2, [pc, #192]	; (8005c8c <DMA_CalcBaseAndBitshift+0x148>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2f      	ldr	r2, [pc, #188]	; (8005c90 <DMA_CalcBaseAndBitshift+0x14c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <DMA_CalcBaseAndBitshift+0x150>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <DMA_CalcBaseAndBitshift+0xa8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <DMA_CalcBaseAndBitshift+0x154>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <DMA_CalcBaseAndBitshift+0xac>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <DMA_CalcBaseAndBitshift+0xae>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d024      	beq.n	8005c40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	3b10      	subs	r3, #16
 8005bfe:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <DMA_CalcBaseAndBitshift+0x158>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	4a24      	ldr	r2, [pc, #144]	; (8005ca0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005c10:	5cd3      	ldrb	r3, [r2, r3]
 8005c12:	461a      	mov	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d908      	bls.n	8005c30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <DMA_CalcBaseAndBitshift+0x160>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	1d1a      	adds	r2, r3, #4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005c2e:	e00d      	b.n	8005c4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <DMA_CalcBaseAndBitshift+0x160>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c3e:	e005      	b.n	8005c4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40020010 	.word	0x40020010
 8005c60:	40020028 	.word	0x40020028
 8005c64:	40020040 	.word	0x40020040
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	40020070 	.word	0x40020070
 8005c70:	40020088 	.word	0x40020088
 8005c74:	400200a0 	.word	0x400200a0
 8005c78:	400200b8 	.word	0x400200b8
 8005c7c:	40020410 	.word	0x40020410
 8005c80:	40020428 	.word	0x40020428
 8005c84:	40020440 	.word	0x40020440
 8005c88:	40020458 	.word	0x40020458
 8005c8c:	40020470 	.word	0x40020470
 8005c90:	40020488 	.word	0x40020488
 8005c94:	400204a0 	.word	0x400204a0
 8005c98:	400204b8 	.word	0x400204b8
 8005c9c:	aaaaaaab 	.word	0xaaaaaaab
 8005ca0:	0800df30 	.word	0x0800df30
 8005ca4:	fffffc00 	.word	0xfffffc00

08005ca8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d120      	bne.n	8005cfe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d858      	bhi.n	8005d76 <DMA_CheckFifoParam+0xce>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <DMA_CheckFifoParam+0x24>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005cef 	.word	0x08005cef
 8005cd4:	08005cdd 	.word	0x08005cdd
 8005cd8:	08005d77 	.word	0x08005d77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d048      	beq.n	8005d7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cec:	e045      	b.n	8005d7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cf6:	d142      	bne.n	8005d7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cfc:	e03f      	b.n	8005d7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d06:	d123      	bne.n	8005d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d838      	bhi.n	8005d82 <DMA_CheckFifoParam+0xda>
 8005d10:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <DMA_CheckFifoParam+0x70>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d2f 	.word	0x08005d2f
 8005d20:	08005d29 	.word	0x08005d29
 8005d24:	08005d41 	.word	0x08005d41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d2c:	e030      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d025      	beq.n	8005d86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d3e:	e022      	b.n	8005d86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d48:	d11f      	bne.n	8005d8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d4e:	e01c      	b.n	8005d8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d902      	bls.n	8005d5e <DMA_CheckFifoParam+0xb6>
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d003      	beq.n	8005d64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d5c:	e018      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
        break;
 8005d62:	e015      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
    break;
 8005d74:	e00b      	b.n	8005d8e <DMA_CheckFifoParam+0xe6>
        break;
 8005d76:	bf00      	nop
 8005d78:	e00a      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        break;
 8005d7a:	bf00      	nop
 8005d7c:	e008      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        break;
 8005d7e:	bf00      	nop
 8005d80:	e006      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        break;
 8005d82:	bf00      	nop
 8005d84:	e004      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        break;
 8005d86:	bf00      	nop
 8005d88:	e002      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
        break;
 8005d8a:	bf00      	nop
 8005d8c:	e000      	b.n	8005d90 <DMA_CheckFifoParam+0xe8>
    break;
 8005d8e:	bf00      	nop
    }
  }

  return status;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop

08005da0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01d      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d018      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a33      	ldr	r2, [pc, #204]	; (8005ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a32      	ldr	r2, [pc, #200]	; (8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00e      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a30      	ldr	r2, [pc, #192]	; (8005ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2d      	ldr	r2, [pc, #180]	; (8005eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01a      	beq.n	8005e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	3b08      	subs	r3, #8
 8005e10:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	091b      	lsrs	r3, r3, #4
 8005e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a24      	ldr	r2, [pc, #144]	; (8005ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	2201      	movs	r2, #1
 8005e36:	409a      	lsls	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e3c:	e024      	b.n	8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	3b10      	subs	r3, #16
 8005e46:	4a1e      	ldr	r2, [pc, #120]	; (8005ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d806      	bhi.n	8005e66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d902      	bls.n	8005e66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3308      	adds	r3, #8
 8005e64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2201      	movs	r2, #1
 8005e82:	409a      	lsls	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	58025408 	.word	0x58025408
 8005e98:	5802541c 	.word	0x5802541c
 8005e9c:	58025430 	.word	0x58025430
 8005ea0:	58025444 	.word	0x58025444
 8005ea4:	58025458 	.word	0x58025458
 8005ea8:	5802546c 	.word	0x5802546c
 8005eac:	58025480 	.word	0x58025480
 8005eb0:	58025494 	.word	0x58025494
 8005eb4:	cccccccd 	.word	0xcccccccd
 8005eb8:	16009600 	.word	0x16009600
 8005ebc:	58025880 	.word	0x58025880
 8005ec0:	aaaaaaab 	.word	0xaaaaaaab
 8005ec4:	400204b8 	.word	0x400204b8
 8005ec8:	4002040f 	.word	0x4002040f
 8005ecc:	10008200 	.word	0x10008200
 8005ed0:	40020880 	.word	0x40020880

08005ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d04a      	beq.n	8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d847      	bhi.n	8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d022      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a24      	ldr	r2, [pc, #144]	; (8005f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d01d      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4b17      	ldr	r3, [pc, #92]	; (8005fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8005f5e:	e009      	b.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	2201      	movs	r2, #1
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	58025408 	.word	0x58025408
 8005f90:	5802541c 	.word	0x5802541c
 8005f94:	58025430 	.word	0x58025430
 8005f98:	58025444 	.word	0x58025444
 8005f9c:	58025458 	.word	0x58025458
 8005fa0:	5802546c 	.word	0x5802546c
 8005fa4:	58025480 	.word	0x58025480
 8005fa8:	58025494 	.word	0x58025494
 8005fac:	1600963f 	.word	0x1600963f
 8005fb0:	58025940 	.word	0x58025940
 8005fb4:	1000823f 	.word	0x1000823f
 8005fb8:	40020940 	.word	0x40020940

08005fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	; 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005fca:	4b89      	ldr	r3, [pc, #548]	; (80061f0 <HAL_GPIO_Init+0x234>)
 8005fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fce:	e194      	b.n	80062fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fdc:	4013      	ands	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8186 	beq.w	80062f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d00b      	beq.n	8006008 <HAL_GPIO_Init+0x4c>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d007      	beq.n	8006008 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ffc:	2b11      	cmp	r3, #17
 8005ffe:	d003      	beq.n	8006008 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b12      	cmp	r3, #18
 8006006:	d130      	bne.n	800606a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	2203      	movs	r2, #3
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4313      	orrs	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800603e:	2201      	movs	r2, #1
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43db      	mvns	r3, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4013      	ands	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	091b      	lsrs	r3, r3, #4
 8006054:	f003 0201 	and.w	r2, r3, #1
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4313      	orrs	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	2203      	movs	r2, #3
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d003      	beq.n	80060aa <HAL_GPIO_Init+0xee>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b12      	cmp	r3, #18
 80060a8:	d123      	bne.n	80060f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	08da      	lsrs	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3208      	adds	r2, #8
 80060b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	220f      	movs	r2, #15
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	08da      	lsrs	r2, r3, #3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3208      	adds	r2, #8
 80060ec:	69b9      	ldr	r1, [r7, #24]
 80060ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	2203      	movs	r2, #3
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f003 0203 	and.w	r2, r3, #3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80e0 	beq.w	80062f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006134:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <HAL_GPIO_Init+0x238>)
 8006136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800613a:	4a2e      	ldr	r2, [pc, #184]	; (80061f4 <HAL_GPIO_Init+0x238>)
 800613c:	f043 0302 	orr.w	r3, r3, #2
 8006140:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006144:	4b2b      	ldr	r3, [pc, #172]	; (80061f4 <HAL_GPIO_Init+0x238>)
 8006146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006152:	4a29      	ldr	r2, [pc, #164]	; (80061f8 <HAL_GPIO_Init+0x23c>)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	3302      	adds	r3, #2
 800615a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4013      	ands	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a20      	ldr	r2, [pc, #128]	; (80061fc <HAL_GPIO_Init+0x240>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d052      	beq.n	8006224 <HAL_GPIO_Init+0x268>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <HAL_GPIO_Init+0x244>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d031      	beq.n	80061ea <HAL_GPIO_Init+0x22e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <HAL_GPIO_Init+0x248>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02b      	beq.n	80061e6 <HAL_GPIO_Init+0x22a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <HAL_GPIO_Init+0x24c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d025      	beq.n	80061e2 <HAL_GPIO_Init+0x226>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_GPIO_Init+0x250>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01f      	beq.n	80061de <HAL_GPIO_Init+0x222>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <HAL_GPIO_Init+0x254>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d019      	beq.n	80061da <HAL_GPIO_Init+0x21e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <HAL_GPIO_Init+0x258>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_GPIO_Init+0x21a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <HAL_GPIO_Init+0x25c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00d      	beq.n	80061d2 <HAL_GPIO_Init+0x216>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_GPIO_Init+0x260>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <HAL_GPIO_Init+0x212>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <HAL_GPIO_Init+0x264>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <HAL_GPIO_Init+0x20e>
 80061c6:	2309      	movs	r3, #9
 80061c8:	e02d      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061ca:	230a      	movs	r3, #10
 80061cc:	e02b      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061ce:	2308      	movs	r3, #8
 80061d0:	e029      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061d2:	2307      	movs	r3, #7
 80061d4:	e027      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061d6:	2306      	movs	r3, #6
 80061d8:	e025      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061da:	2305      	movs	r3, #5
 80061dc:	e023      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061de:	2304      	movs	r3, #4
 80061e0:	e021      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061e2:	2303      	movs	r3, #3
 80061e4:	e01f      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e01d      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e01b      	b.n	8006226 <HAL_GPIO_Init+0x26a>
 80061ee:	bf00      	nop
 80061f0:	58000080 	.word	0x58000080
 80061f4:	58024400 	.word	0x58024400
 80061f8:	58000400 	.word	0x58000400
 80061fc:	58020000 	.word	0x58020000
 8006200:	58020400 	.word	0x58020400
 8006204:	58020800 	.word	0x58020800
 8006208:	58020c00 	.word	0x58020c00
 800620c:	58021000 	.word	0x58021000
 8006210:	58021400 	.word	0x58021400
 8006214:	58021800 	.word	0x58021800
 8006218:	58021c00 	.word	0x58021c00
 800621c:	58022000 	.word	0x58022000
 8006220:	58022400 	.word	0x58022400
 8006224:	2300      	movs	r3, #0
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	f002 0203 	and.w	r2, r2, #3
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	4093      	lsls	r3, r2
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4313      	orrs	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006236:	4938      	ldr	r1, [pc, #224]	; (8006318 <HAL_GPIO_Init+0x35c>)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	3302      	adds	r3, #2
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	43db      	mvns	r3, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4013      	ands	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	43db      	mvns	r3, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4013      	ands	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4013      	ands	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	f47f ae63 	bne.w	8005fd0 <HAL_GPIO_Init+0x14>
  }
}
 800630a:	bf00      	nop
 800630c:	3724      	adds	r7, #36	; 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	58000400 	.word	0x58000400

0800631c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	807b      	strh	r3, [r7, #2]
 8006328:	4613      	mov	r3, r2
 800632a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800632c:	787b      	ldrb	r3, [r7, #1]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006338:	e003      	b.n	8006342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	041a      	lsls	r2, r3, #16
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	619a      	str	r2, [r3, #24]
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	401a      	ands	r2, r3
 8006362:	887b      	ldrh	r3, [r7, #2]
 8006364:	429a      	cmp	r2, r3
 8006366:	d104      	bne.n	8006372 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	041a      	lsls	r2, r3, #16
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006370:	e002      	b.n	8006378 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006372:	887a      	ldrh	r2, [r7, #2]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	619a      	str	r2, [r3, #24]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800638c:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <HAL_PWREx_ConfigSupply+0x70>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b04      	cmp	r3, #4
 8006396:	d00a      	beq.n	80063ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <HAL_PWREx_ConfigSupply+0x70>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d001      	beq.n	80063aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e01f      	b.n	80063ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e01d      	b.n	80063ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <HAL_PWREx_ConfigSupply+0x70>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f023 0207 	bic.w	r2, r3, #7
 80063b6:	490f      	ldr	r1, [pc, #60]	; (80063f4 <HAL_PWREx_ConfigSupply+0x70>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063be:	f7fb ffff 	bl	80023c0 <HAL_GetTick>
 80063c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063c4:	e009      	b.n	80063da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063c6:	f7fb fffb 	bl	80023c0 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d4:	d901      	bls.n	80063da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e007      	b.n	80063ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_PWREx_ConfigSupply+0x70>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	d1ee      	bne.n	80063c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	58024800 	.word	0x58024800

080063f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	; 0x30
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e3c4      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8087 	beq.w	8006526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006418:	4ba2      	ldr	r3, [pc, #648]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006422:	4ba0      	ldr	r3, [pc, #640]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	2b10      	cmp	r3, #16
 800642c:	d007      	beq.n	800643e <HAL_RCC_OscConfig+0x46>
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	2b18      	cmp	r3, #24
 8006432:	d110      	bne.n	8006456 <HAL_RCC_OscConfig+0x5e>
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d10b      	bne.n	8006456 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643e:	4b99      	ldr	r3, [pc, #612]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06c      	beq.n	8006524 <HAL_RCC_OscConfig+0x12c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d168      	bne.n	8006524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e39e      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d106      	bne.n	800646e <HAL_RCC_OscConfig+0x76>
 8006460:	4b90      	ldr	r3, [pc, #576]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a8f      	ldr	r2, [pc, #572]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e02e      	b.n	80064cc <HAL_RCC_OscConfig+0xd4>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x98>
 8006476:	4b8b      	ldr	r3, [pc, #556]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a8a      	ldr	r2, [pc, #552]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a87      	ldr	r2, [pc, #540]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e01d      	b.n	80064cc <HAL_RCC_OscConfig+0xd4>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0xbc>
 800649a:	4b82      	ldr	r3, [pc, #520]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a81      	ldr	r2, [pc, #516]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a7e      	ldr	r2, [pc, #504]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0xd4>
 80064b4:	4b7b      	ldr	r3, [pc, #492]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a7a      	ldr	r2, [pc, #488]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b78      	ldr	r3, [pc, #480]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a77      	ldr	r2, [pc, #476]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fb ff74 	bl	80023c0 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064dc:	f7fb ff70 	bl	80023c0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	; 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e352      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ee:	4b6d      	ldr	r3, [pc, #436]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0xe4>
 80064fa:	e014      	b.n	8006526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fb ff60 	bl	80023c0 <HAL_GetTick>
 8006500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006504:	f7fb ff5c 	bl	80023c0 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e33e      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006516:	4b63      	ldr	r3, [pc, #396]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x10c>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8092 	beq.w	8006658 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006534:	4b5b      	ldr	r3, [pc, #364]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800653c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800653e:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <HAL_RCC_OscConfig+0x162>
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	2b18      	cmp	r3, #24
 800654e:	d12d      	bne.n	80065ac <HAL_RCC_OscConfig+0x1b4>
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d128      	bne.n	80065ac <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655a:	4b52      	ldr	r3, [pc, #328]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_RCC_OscConfig+0x17a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e310      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006572:	f7fb ff53 	bl	800241c <HAL_GetREVID>
 8006576:	4602      	mov	r2, r0
 8006578:	f241 0303 	movw	r3, #4099	; 0x1003
 800657c:	429a      	cmp	r2, r3
 800657e:	d80a      	bhi.n	8006596 <HAL_RCC_OscConfig+0x19e>
 8006580:	4b48      	ldr	r3, [pc, #288]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	031b      	lsls	r3, r3, #12
 800658e:	4945      	ldr	r1, [pc, #276]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	4313      	orrs	r3, r2
 8006592:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006594:	e060      	b.n	8006658 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b43      	ldr	r3, [pc, #268]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	061b      	lsls	r3, r3, #24
 80065a4:	493f      	ldr	r1, [pc, #252]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065aa:	e055      	b.n	8006658 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d038      	beq.n	8006626 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065b4:	4b3b      	ldr	r3, [pc, #236]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 0219 	bic.w	r2, r3, #25
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4938      	ldr	r1, [pc, #224]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fb fefb 	bl	80023c0 <HAL_GetTick>
 80065ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ce:	f7fb fef7 	bl	80023c0 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e2d9      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ec:	f7fb ff16 	bl	800241c <HAL_GetREVID>
 80065f0:	4602      	mov	r2, r0
 80065f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d80a      	bhi.n	8006610 <HAL_RCC_OscConfig+0x218>
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	031b      	lsls	r3, r3, #12
 8006608:	4926      	ldr	r1, [pc, #152]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800660a:	4313      	orrs	r3, r2
 800660c:	604b      	str	r3, [r1, #4]
 800660e:	e023      	b.n	8006658 <HAL_RCC_OscConfig+0x260>
 8006610:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	4921      	ldr	r1, [pc, #132]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	e018      	b.n	8006658 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006626:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fb fec5 	bl	80023c0 <HAL_GetTick>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800663a:	f7fb fec1 	bl	80023c0 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e2a3      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8091 	beq.w	8006788 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006666:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800666e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d007      	beq.n	800668c <HAL_RCC_OscConfig+0x294>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b18      	cmp	r3, #24
 8006680:	d12f      	bne.n	80066e2 <HAL_RCC_OscConfig+0x2ea>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d12a      	bne.n	80066e2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <HAL_RCC_OscConfig+0x2ac>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_RCC_OscConfig+0x2b0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	2b80      	cmp	r3, #128	; 0x80
 800669e:	d003      	beq.n	80066a8 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e277      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
 80066a4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066a8:	f7fb feb8 	bl	800241c <HAL_GetREVID>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d80a      	bhi.n	80066cc <HAL_RCC_OscConfig+0x2d4>
 80066b6:	4ba2      	ldr	r3, [pc, #648]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	069b      	lsls	r3, r3, #26
 80066c4:	499e      	ldr	r1, [pc, #632]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ca:	e05d      	b.n	8006788 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066cc:	4b9c      	ldr	r3, [pc, #624]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	4999      	ldr	r1, [pc, #612]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066e0:	e052      	b.n	8006788 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d035      	beq.n	8006756 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066ea:	4b95      	ldr	r3, [pc, #596]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a94      	ldr	r2, [pc, #592]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f6:	f7fb fe63 	bl	80023c0 <HAL_GetTick>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066fe:	f7fb fe5f 	bl	80023c0 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e241      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006710:	4b8b      	ldr	r3, [pc, #556]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800671c:	f7fb fe7e 	bl	800241c <HAL_GetREVID>
 8006720:	4602      	mov	r2, r0
 8006722:	f241 0303 	movw	r3, #4099	; 0x1003
 8006726:	429a      	cmp	r2, r3
 8006728:	d80a      	bhi.n	8006740 <HAL_RCC_OscConfig+0x348>
 800672a:	4b85      	ldr	r3, [pc, #532]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	069b      	lsls	r3, r3, #26
 8006738:	4981      	ldr	r1, [pc, #516]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800673a:	4313      	orrs	r3, r2
 800673c:	604b      	str	r3, [r1, #4]
 800673e:	e023      	b.n	8006788 <HAL_RCC_OscConfig+0x390>
 8006740:	4b7f      	ldr	r3, [pc, #508]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	497c      	ldr	r1, [pc, #496]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006750:	4313      	orrs	r3, r2
 8006752:	60cb      	str	r3, [r1, #12]
 8006754:	e018      	b.n	8006788 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006756:	4b7a      	ldr	r3, [pc, #488]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a79      	ldr	r2, [pc, #484]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800675c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb fe2d 	bl	80023c0 <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800676a:	f7fb fe29 	bl	80023c0 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e20b      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800677c:	4b70      	ldr	r3, [pc, #448]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f0      	bne.n	800676a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d036      	beq.n	8006802 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d019      	beq.n	80067d0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679c:	4b68      	ldr	r3, [pc, #416]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800679e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a0:	4a67      	ldr	r2, [pc, #412]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fb fe0a 	bl	80023c0 <HAL_GetTick>
 80067ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b0:	f7fb fe06 	bl	80023c0 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1e8      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067c2:	4b5f      	ldr	r3, [pc, #380]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0x3b8>
 80067ce:	e018      	b.n	8006802 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d0:	4b5b      	ldr	r3, [pc, #364]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	4a5a      	ldr	r2, [pc, #360]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fb fdf0 	bl	80023c0 <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fb fdec 	bl	80023c0 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e1ce      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067f6:	4b52      	ldr	r3, [pc, #328]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80067f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d036      	beq.n	800687c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006816:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a49      	ldr	r2, [pc, #292]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800681c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006822:	f7fb fdcd 	bl	80023c0 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800682a:	f7fb fdc9 	bl	80023c0 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1ab      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800683c:	4b40      	ldr	r3, [pc, #256]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x432>
 8006848:	e018      	b.n	800687c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800684a:	4b3d      	ldr	r3, [pc, #244]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a3c      	ldr	r2, [pc, #240]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006854:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006856:	f7fb fdb3 	bl	80023c0 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800685e:	f7fb fdaf 	bl	80023c0 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e191      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006870:	4b33      	ldr	r3, [pc, #204]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f0      	bne.n	800685e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8086 	beq.w	8006996 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800688a:	4b2e      	ldr	r3, [pc, #184]	; (8006944 <HAL_RCC_OscConfig+0x54c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <HAL_RCC_OscConfig+0x54c>)
 8006890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006896:	f7fb fd93 	bl	80023c0 <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800689e:	f7fb fd8f 	bl	80023c0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b64      	cmp	r3, #100	; 0x64
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e171      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b0:	4b24      	ldr	r3, [pc, #144]	; (8006944 <HAL_RCC_OscConfig+0x54c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d106      	bne.n	80068d2 <HAL_RCC_OscConfig+0x4da>
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	6713      	str	r3, [r2, #112]	; 0x70
 80068d0:	e02d      	b.n	800692e <HAL_RCC_OscConfig+0x536>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4fc>
 80068da:	4b19      	ldr	r3, [pc, #100]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	6713      	str	r3, [r2, #112]	; 0x70
 80068e6:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	6713      	str	r3, [r2, #112]	; 0x70
 80068f2:	e01c      	b.n	800692e <HAL_RCC_OscConfig+0x536>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d10c      	bne.n	8006916 <HAL_RCC_OscConfig+0x51e>
 80068fc:	4b10      	ldr	r3, [pc, #64]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006902:	f043 0304 	orr.w	r3, r3, #4
 8006906:	6713      	str	r3, [r2, #112]	; 0x70
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	4a0c      	ldr	r2, [pc, #48]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	6713      	str	r3, [r2, #112]	; 0x70
 8006914:	e00b      	b.n	800692e <HAL_RCC_OscConfig+0x536>
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	6713      	str	r3, [r2, #112]	; 0x70
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	4a06      	ldr	r2, [pc, #24]	; (8006940 <HAL_RCC_OscConfig+0x548>)
 8006928:	f023 0304 	bic.w	r3, r3, #4
 800692c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01a      	beq.n	800696c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006936:	f7fb fd43 	bl	80023c0 <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800693c:	e00f      	b.n	800695e <HAL_RCC_OscConfig+0x566>
 800693e:	bf00      	nop
 8006940:	58024400 	.word	0x58024400
 8006944:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006948:	f7fb fd3a 	bl	80023c0 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f241 3288 	movw	r2, #5000	; 0x1388
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e11a      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800695e:	4b8f      	ldr	r3, [pc, #572]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0ee      	beq.n	8006948 <HAL_RCC_OscConfig+0x550>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fb fd28 	bl	80023c0 <HAL_GetTick>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006972:	e00a      	b.n	800698a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fb fd24 	bl	80023c0 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e104      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800698a:	4b84      	ldr	r3, [pc, #528]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ee      	bne.n	8006974 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80f9 	beq.w	8006b92 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069a0:	4b7e      	ldr	r3, [pc, #504]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a8:	2b18      	cmp	r3, #24
 80069aa:	f000 80b4 	beq.w	8006b16 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	f040 8095 	bne.w	8006ae2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b8:	4b78      	ldr	r3, [pc, #480]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a77      	ldr	r2, [pc, #476]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 80069be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fb fcfc 	bl	80023c0 <HAL_GetTick>
 80069c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069cc:	f7fb fcf8 	bl	80023c0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0da      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069de:	4b6f      	ldr	r3, [pc, #444]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ea:	4b6c      	ldr	r3, [pc, #432]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 80069ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ee:	4b6c      	ldr	r3, [pc, #432]	; (8006ba0 <HAL_RCC_OscConfig+0x7a8>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069fa:	0112      	lsls	r2, r2, #4
 80069fc:	430a      	orrs	r2, r1
 80069fe:	4967      	ldr	r1, [pc, #412]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	628b      	str	r3, [r1, #40]	; 0x28
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	3b01      	subs	r3, #1
 8006a14:	025b      	lsls	r3, r3, #9
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a34:	4959      	ldr	r1, [pc, #356]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a3a:	4b58      	ldr	r3, [pc, #352]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4a57      	ldr	r2, [pc, #348]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a46:	4b55      	ldr	r3, [pc, #340]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4a:	4b56      	ldr	r3, [pc, #344]	; (8006ba4 <HAL_RCC_OscConfig+0x7ac>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a52:	00d2      	lsls	r2, r2, #3
 8006a54:	4951      	ldr	r1, [pc, #324]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a5a:	4b50      	ldr	r3, [pc, #320]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	f023 020c 	bic.w	r2, r3, #12
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	494d      	ldr	r1, [pc, #308]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a6c:	4b4b      	ldr	r3, [pc, #300]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	f023 0202 	bic.w	r2, r3, #2
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a78:	4948      	ldr	r1, [pc, #288]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a7e:	4b47      	ldr	r3, [pc, #284]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	4a46      	ldr	r2, [pc, #280]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8a:	4b44      	ldr	r3, [pc, #272]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	4a43      	ldr	r2, [pc, #268]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a96:	4b41      	ldr	r3, [pc, #260]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	4a40      	ldr	r2, [pc, #256]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006aa2:	4b3e      	ldr	r3, [pc, #248]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	4a3d      	ldr	r2, [pc, #244]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aae:	4b3b      	ldr	r3, [pc, #236]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a3a      	ldr	r2, [pc, #232]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aba:	f7fb fc81 	bl	80023c0 <HAL_GetTick>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac2:	f7fb fc7d 	bl	80023c0 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e05f      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad4:	4b31      	ldr	r3, [pc, #196]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x6ca>
 8006ae0:	e057      	b.n	8006b92 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae2:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2d      	ldr	r2, [pc, #180]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aee:	f7fb fc67 	bl	80023c0 <HAL_GetTick>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af6:	f7fb fc63 	bl	80023c0 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e045      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b08:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f0      	bne.n	8006af6 <HAL_RCC_OscConfig+0x6fe>
 8006b14:	e03d      	b.n	8006b92 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b16:	4b21      	ldr	r3, [pc, #132]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b1c:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <HAL_RCC_OscConfig+0x7a4>)
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d031      	beq.n	8006b8e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f003 0203 	and.w	r2, r3, #3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d12a      	bne.n	8006b8e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	091b      	lsrs	r3, r3, #4
 8006b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d122      	bne.n	8006b8e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d11a      	bne.n	8006b8e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	0a5b      	lsrs	r3, r3, #9
 8006b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d111      	bne.n	8006b8e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d108      	bne.n	8006b8e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	0e1b      	lsrs	r3, r3, #24
 8006b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d001      	beq.n	8006b92 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3730      	adds	r7, #48	; 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	fffffc0c 	.word	0xfffffc0c
 8006ba4:	ffff0007 	.word	0xffff0007

08006ba8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e19c      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b8a      	ldr	r3, [pc, #552]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d910      	bls.n	8006bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b87      	ldr	r3, [pc, #540]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f023 020f 	bic.w	r2, r3, #15
 8006bd2:	4985      	ldr	r1, [pc, #532]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b83      	ldr	r3, [pc, #524]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e184      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	4b7b      	ldr	r3, [pc, #492]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d908      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c08:	4b78      	ldr	r3, [pc, #480]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	4975      	ldr	r1, [pc, #468]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d010      	beq.n	8006c48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695a      	ldr	r2, [r3, #20]
 8006c2a:	4b70      	ldr	r3, [pc, #448]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d908      	bls.n	8006c48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c36:	4b6d      	ldr	r3, [pc, #436]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	496a      	ldr	r1, [pc, #424]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	4b64      	ldr	r3, [pc, #400]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d908      	bls.n	8006c76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c64:	4b61      	ldr	r3, [pc, #388]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	495e      	ldr	r1, [pc, #376]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69da      	ldr	r2, [r3, #28]
 8006c86:	4b59      	ldr	r3, [pc, #356]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d908      	bls.n	8006ca4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c92:	4b56      	ldr	r3, [pc, #344]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4953      	ldr	r1, [pc, #332]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d010      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	4b4d      	ldr	r3, [pc, #308]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d908      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc0:	4b4a      	ldr	r3, [pc, #296]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f023 020f 	bic.w	r2, r3, #15
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4947      	ldr	r1, [pc, #284]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d055      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cde:	4b43      	ldr	r3, [pc, #268]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	4940      	ldr	r1, [pc, #256]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d107      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cf8:	4b3c      	ldr	r3, [pc, #240]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d121      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0f6      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d107      	bne.n	8006d20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d10:	4b36      	ldr	r3, [pc, #216]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d115      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0ea      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d107      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d28:	4b30      	ldr	r3, [pc, #192]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0de      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d38:	4b2c      	ldr	r3, [pc, #176]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0d6      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d48:	4b28      	ldr	r3, [pc, #160]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f023 0207 	bic.w	r2, r3, #7
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4925      	ldr	r1, [pc, #148]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5a:	f7fb fb31 	bl	80023c0 <HAL_GetTick>
 8006d5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d60:	e00a      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d62:	f7fb fb2d 	bl	80023c0 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e0be      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d78:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d1eb      	bne.n	8006d62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d208      	bcs.n	8006db8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f023 020f 	bic.w	r2, r3, #15
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	490e      	ldr	r1, [pc, #56]	; (8006dec <HAL_RCC_ClockConfig+0x244>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d214      	bcs.n	8006df0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc6:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f023 020f 	bic.w	r2, r3, #15
 8006dce:	4906      	ldr	r1, [pc, #24]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd6:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <HAL_RCC_ClockConfig+0x240>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e086      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x34e>
 8006de8:	52002000 	.word	0x52002000
 8006dec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d010      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	4b3f      	ldr	r3, [pc, #252]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d208      	bcs.n	8006e1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e0c:	4b3c      	ldr	r3, [pc, #240]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	4939      	ldr	r1, [pc, #228]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d010      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695a      	ldr	r2, [r3, #20]
 8006e2e:	4b34      	ldr	r3, [pc, #208]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d208      	bcs.n	8006e4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e3a:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	492e      	ldr	r1, [pc, #184]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d010      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d208      	bcs.n	8006e7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	4922      	ldr	r1, [pc, #136]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d010      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d208      	bcs.n	8006ea8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e96:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	4917      	ldr	r1, [pc, #92]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ea8:	f000 f834 	bl	8006f14 <HAL_RCC_GetSysClockFreq>
 8006eac:	4601      	mov	r1, r0
 8006eae:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	4a12      	ldr	r2, [pc, #72]	; (8006f04 <HAL_RCC_ClockConfig+0x35c>)
 8006eba:	5cd3      	ldrb	r3, [r2, r3]
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8006ec4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ec6:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <HAL_RCC_ClockConfig+0x35c>)
 8006ed0:	5cd3      	ldrb	r3, [r2, r3]
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8006edc:	4a0a      	ldr	r2, [pc, #40]	; (8006f08 <HAL_RCC_ClockConfig+0x360>)
 8006ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_RCC_ClockConfig+0x364>)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <HAL_RCC_ClockConfig+0x368>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fb fa1e 	bl	800232c <HAL_InitTick>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
 8006f04:	0800df20 	.word	0x0800df20
 8006f08:	24000044 	.word	0x24000044
 8006f0c:	24000040 	.word	0x24000040
 8006f10:	24000048 	.word	0x24000048

08006f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b089      	sub	sp, #36	; 0x24
 8006f18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f1a:	4baf      	ldr	r3, [pc, #700]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f22:	2b18      	cmp	r3, #24
 8006f24:	f200 814e 	bhi.w	80071c4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f95 	.word	0x08006f95
 8006f34:	080071c5 	.word	0x080071c5
 8006f38:	080071c5 	.word	0x080071c5
 8006f3c:	080071c5 	.word	0x080071c5
 8006f40:	080071c5 	.word	0x080071c5
 8006f44:	080071c5 	.word	0x080071c5
 8006f48:	080071c5 	.word	0x080071c5
 8006f4c:	080071c5 	.word	0x080071c5
 8006f50:	08006fbb 	.word	0x08006fbb
 8006f54:	080071c5 	.word	0x080071c5
 8006f58:	080071c5 	.word	0x080071c5
 8006f5c:	080071c5 	.word	0x080071c5
 8006f60:	080071c5 	.word	0x080071c5
 8006f64:	080071c5 	.word	0x080071c5
 8006f68:	080071c5 	.word	0x080071c5
 8006f6c:	080071c5 	.word	0x080071c5
 8006f70:	08006fc1 	.word	0x08006fc1
 8006f74:	080071c5 	.word	0x080071c5
 8006f78:	080071c5 	.word	0x080071c5
 8006f7c:	080071c5 	.word	0x080071c5
 8006f80:	080071c5 	.word	0x080071c5
 8006f84:	080071c5 	.word	0x080071c5
 8006f88:	080071c5 	.word	0x080071c5
 8006f8c:	080071c5 	.word	0x080071c5
 8006f90:	08006fc7 	.word	0x08006fc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f94:	4b90      	ldr	r3, [pc, #576]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fa0:	4b8d      	ldr	r3, [pc, #564]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	08db      	lsrs	r3, r3, #3
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	4a8c      	ldr	r2, [pc, #560]	; (80071dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006fb2:	e10a      	b.n	80071ca <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fb4:	4b89      	ldr	r3, [pc, #548]	; (80071dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006fb6:	61bb      	str	r3, [r7, #24]
    break;
 8006fb8:	e107      	b.n	80071ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006fba:	4b89      	ldr	r3, [pc, #548]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006fbc:	61bb      	str	r3, [r7, #24]
    break;
 8006fbe:	e104      	b.n	80071ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006fc0:	4b88      	ldr	r3, [pc, #544]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006fc2:	61bb      	str	r3, [r7, #24]
    break;
 8006fc4:	e101      	b.n	80071ca <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fc6:	4b84      	ldr	r3, [pc, #528]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006fd0:	4b81      	ldr	r3, [pc, #516]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006fdc:	4b7e      	ldr	r3, [pc, #504]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006fe6:	4b7c      	ldr	r3, [pc, #496]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 80da 	beq.w	80071be <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d05a      	beq.n	80070c6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007010:	2b01      	cmp	r3, #1
 8007012:	d302      	bcc.n	800701a <HAL_RCC_GetSysClockFreq+0x106>
 8007014:	2b02      	cmp	r3, #2
 8007016:	d078      	beq.n	800710a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007018:	e099      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800701a:	4b6f      	ldr	r3, [pc, #444]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02d      	beq.n	8007082 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007026:	4b6c      	ldr	r3, [pc, #432]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	08db      	lsrs	r3, r3, #3
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	4a6a      	ldr	r2, [pc, #424]	; (80071dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007032:	fa22 f303 	lsr.w	r3, r2, r3
 8007036:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007050:	4b61      	ldr	r3, [pc, #388]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007060:	ed97 6a02 	vldr	s12, [r7, #8]
 8007064:	eddf 5a60 	vldr	s11, [pc, #384]	; 80071e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007080:	e087      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80071ec <HAL_RCC_GetSysClockFreq+0x2d8>
 8007090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007094:	4b50      	ldr	r3, [pc, #320]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070a8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80071e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80070ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c4:	e065      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80071f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80070d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d8:	4b3f      	ldr	r3, [pc, #252]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80071e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80070f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007108:	e043      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007114:	eddf 6a37 	vldr	s13, [pc, #220]	; 80071f4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711c:	4b2e      	ldr	r3, [pc, #184]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007130:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80071e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800714c:	e021      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007158:	eddf 6a25 	vldr	s13, [pc, #148]	; 80071f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800715c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007160:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007170:	ed97 6a02 	vldr	s12, [r7, #8]
 8007174:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80071e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007190:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	0a5b      	lsrs	r3, r3, #9
 8007198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719c:	3301      	adds	r3, #1
 800719e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b6:	ee17 3a90 	vmov	r3, s15
 80071ba:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80071bc:	e005      	b.n	80071ca <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
    break;
 80071c2:	e002      	b.n	80071ca <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80071c6:	61bb      	str	r3, [r7, #24]
    break;
 80071c8:	bf00      	nop
  }

  return sysclockfreq;
 80071ca:	69bb      	ldr	r3, [r7, #24]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3724      	adds	r7, #36	; 0x24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	58024400 	.word	0x58024400
 80071dc:	03d09000 	.word	0x03d09000
 80071e0:	003d0900 	.word	0x003d0900
 80071e4:	017d7840 	.word	0x017d7840
 80071e8:	46000000 	.word	0x46000000
 80071ec:	4c742400 	.word	0x4c742400
 80071f0:	4a742400 	.word	0x4a742400
 80071f4:	4bbebc20 	.word	0x4bbebc20

080071f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071fe:	f7ff fe89 	bl	8006f14 <HAL_RCC_GetSysClockFreq>
 8007202:	4601      	mov	r1, r0
 8007204:	4b10      	ldr	r3, [pc, #64]	; (8007248 <HAL_RCC_GetHCLKFreq+0x50>)
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	4a0f      	ldr	r2, [pc, #60]	; (800724c <HAL_RCC_GetHCLKFreq+0x54>)
 8007210:	5cd3      	ldrb	r3, [r2, r3]
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	fa21 f303 	lsr.w	r3, r1, r3
 800721a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <HAL_RCC_GetHCLKFreq+0x50>)
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	4a09      	ldr	r2, [pc, #36]	; (800724c <HAL_RCC_GetHCLKFreq+0x54>)
 8007226:	5cd3      	ldrb	r3, [r2, r3]
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
 8007232:	4a07      	ldr	r2, [pc, #28]	; (8007250 <HAL_RCC_GetHCLKFreq+0x58>)
 8007234:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007236:	4a07      	ldr	r2, [pc, #28]	; (8007254 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <HAL_RCC_GetHCLKFreq+0x58>)
 800723e:	681b      	ldr	r3, [r3, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	58024400 	.word	0x58024400
 800724c:	0800df20 	.word	0x0800df20
 8007250:	24000044 	.word	0x24000044
 8007254:	24000040 	.word	0x24000040

08007258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800725c:	f7ff ffcc 	bl	80071f8 <HAL_RCC_GetHCLKFreq>
 8007260:	4601      	mov	r1, r0
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	091b      	lsrs	r3, r3, #4
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	4a04      	ldr	r2, [pc, #16]	; (8007280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800726e:	5cd3      	ldrb	r3, [r2, r3]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007278:	4618      	mov	r0, r3
 800727a:	bd80      	pop	{r7, pc}
 800727c:	58024400 	.word	0x58024400
 8007280:	0800df20 	.word	0x0800df20

08007284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007288:	f7ff ffb6 	bl	80071f8 <HAL_RCC_GetHCLKFreq>
 800728c:	4601      	mov	r1, r0
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	4a04      	ldr	r2, [pc, #16]	; (80072ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800729a:	5cd3      	ldrb	r3, [r2, r3]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	58024400 	.word	0x58024400
 80072ac:	0800df20 	.word	0x0800df20

080072b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072bc:	2300      	movs	r3, #0
 80072be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d03d      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d4:	d013      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80072d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072da:	d802      	bhi.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d007      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80072e0:	e01f      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80072e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072e6:	d013      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80072e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ec:	d01c      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80072ee:	e018      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072f0:	4baf      	ldr	r3, [pc, #700]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	4aae      	ldr	r2, [pc, #696]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072fc:	e015      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3304      	adds	r3, #4
 8007302:	2102      	movs	r1, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f001 fd23 	bl	8008d50 <RCCEx_PLL2_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800730e:	e00c      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3324      	adds	r3, #36	; 0x24
 8007314:	2102      	movs	r1, #2
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fdcc 	bl	8008eb4 <RCCEx_PLL3_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007320:	e003      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
      break;
 8007326:	e000      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007330:	4b9f      	ldr	r3, [pc, #636]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800733c:	499c      	ldr	r1, [pc, #624]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800733e:	4313      	orrs	r3, r2
 8007340:	650b      	str	r3, [r1, #80]	; 0x50
 8007342:	e001      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d03d      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	2b04      	cmp	r3, #4
 800735a:	d826      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007379 	.word	0x08007379
 8007368:	08007387 	.word	0x08007387
 800736c:	08007399 	.word	0x08007399
 8007370:	080073b1 	.word	0x080073b1
 8007374:	080073b1 	.word	0x080073b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007378:	4b8d      	ldr	r3, [pc, #564]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a8c      	ldr	r2, [pc, #560]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800737e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007384:	e015      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3304      	adds	r3, #4
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f001 fcdf 	bl	8008d50 <RCCEx_PLL2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007396:	e00c      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3324      	adds	r3, #36	; 0x24
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fd88 	bl	8008eb4 <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073a8:	e003      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
      break;
 80073ae:	e000      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80073b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d109      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073b8:	4b7d      	ldr	r3, [pc, #500]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073bc:	f023 0207 	bic.w	r2, r3, #7
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c4:	497a      	ldr	r1, [pc, #488]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	650b      	str	r3, [r1, #80]	; 0x50
 80073ca:	e001      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d03e      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e0:	2b80      	cmp	r3, #128	; 0x80
 80073e2:	d01c      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d804      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d00d      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80073f0:	e01e      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80073f2:	2bc0      	cmp	r3, #192	; 0xc0
 80073f4:	d01f      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80073f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fa:	d01e      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073fc:	e018      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fe:	4b6c      	ldr	r3, [pc, #432]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4a6b      	ldr	r2, [pc, #428]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800740a:	e017      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f001 fc9c 	bl	8008d50 <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800741c:	e00e      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3324      	adds	r3, #36	; 0x24
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f001 fd45 	bl	8008eb4 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800742e:	e005      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	e002      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800743a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007442:	4b5b      	ldr	r3, [pc, #364]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007446:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	4958      	ldr	r1, [pc, #352]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007450:	4313      	orrs	r3, r2
 8007452:	650b      	str	r3, [r1, #80]	; 0x50
 8007454:	e001      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007462:	2b00      	cmp	r3, #0
 8007464:	d044      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800746c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007470:	d01f      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007476:	d805      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800747c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007480:	d00e      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007482:	e01f      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007484:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007488:	d01f      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800748a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800748e:	d01e      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007490:	e018      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007492:	4b47      	ldr	r3, [pc, #284]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	4a46      	ldr	r2, [pc, #280]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800749e:	e017      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 fc52 	bl	8008d50 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074b0:	e00e      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3324      	adds	r3, #36	; 0x24
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fcfb 	bl	8008eb4 <RCCEx_PLL3_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074c2:	e005      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
      break;
 80074c8:	e002      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80074ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074d6:	4b36      	ldr	r3, [pc, #216]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074da:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074e4:	4932      	ldr	r1, [pc, #200]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	658b      	str	r3, [r1, #88]	; 0x58
 80074ea:	e001      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d044      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007506:	d01f      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800750c:	d805      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007516:	d00e      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007518:	e01f      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800751a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800751e:	d01f      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007524:	d01e      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007526:	e018      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007528:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	4a20      	ldr	r2, [pc, #128]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800752e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007534:	e017      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3304      	adds	r3, #4
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fc07 	bl	8008d50 <RCCEx_PLL2_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007546:	e00e      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3324      	adds	r3, #36	; 0x24
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fcb0 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007558:	e005      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	75fb      	strb	r3, [r7, #23]
      break;
 800755e:	e002      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800756c:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800756e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007570:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800757a:	490d      	ldr	r1, [pc, #52]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800757c:	4313      	orrs	r3, r2
 800757e:	658b      	str	r3, [r1, #88]	; 0x58
 8007580:	e001      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d035      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007596:	2b10      	cmp	r3, #16
 8007598:	d00c      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800759a:	2b10      	cmp	r3, #16
 800759c:	d802      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01b      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80075a2:	e017      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d00c      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80075a8:	2b30      	cmp	r3, #48	; 0x30
 80075aa:	d018      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80075ac:	e012      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b4:	4baf      	ldr	r3, [pc, #700]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4aae      	ldr	r2, [pc, #696]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075c0:	e00e      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3304      	adds	r3, #4
 80075c6:	2102      	movs	r1, #2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fbc1 	bl	8008d50 <RCCEx_PLL2_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075d2:	e005      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
      break;
 80075d8:	e002      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80075da:	bf00      	nop
 80075dc:	e000      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80075de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075e6:	4ba3      	ldr	r3, [pc, #652]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f2:	49a0      	ldr	r1, [pc, #640]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075f8:	e001      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d042      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007612:	d01f      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007618:	d805      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	d00e      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007624:	e01f      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007626:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800762a:	d01f      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800762c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007630:	d01e      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007632:	e018      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007634:	4b8f      	ldr	r3, [pc, #572]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4a8e      	ldr	r2, [pc, #568]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800763a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007640:	e017      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fb81 	bl	8008d50 <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007652:	e00e      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3324      	adds	r3, #36	; 0x24
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f001 fc2a 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007664:	e005      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
      break;
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800766c:	bf00      	nop
 800766e:	e000      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007678:	4b7e      	ldr	r3, [pc, #504]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	497b      	ldr	r1, [pc, #492]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007686:	4313      	orrs	r3, r2
 8007688:	650b      	str	r3, [r1, #80]	; 0x50
 800768a:	e001      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d042      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a4:	d01b      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80076a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076aa:	d805      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d022      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80076b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b4:	d00a      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80076b6:	e01b      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80076b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076bc:	d01d      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80076be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c2:	d01c      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80076c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076c8:	d01b      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80076ca:	e011      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	2101      	movs	r1, #1
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fb3c 	bl	8008d50 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076dc:	e012      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3324      	adds	r3, #36	; 0x24
 80076e2:	2101      	movs	r1, #1
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 fbe5 	bl	8008eb4 <RCCEx_PLL3_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076ee:	e009      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e006      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076f6:	bf00      	nop
 80076f8:	e004      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076fa:	bf00      	nop
 80076fc:	e002      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800770a:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800770c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007716:	4957      	ldr	r1, [pc, #348]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007718:	4313      	orrs	r3, r2
 800771a:	650b      	str	r3, [r1, #80]	; 0x50
 800771c:	e001      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d044      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007738:	d01b      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800773a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773e:	d805      	bhi.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d022      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007748:	d00a      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800774a:	e01b      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007750:	d01d      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007756:	d01c      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800775c:	d01b      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800775e:	e011      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	2101      	movs	r1, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f001 faf2 	bl	8008d50 <RCCEx_PLL2_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007770:	e012      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3324      	adds	r3, #36	; 0x24
 8007776:	2101      	movs	r1, #1
 8007778:	4618      	mov	r0, r3
 800777a:	f001 fb9b 	bl	8008eb4 <RCCEx_PLL3_Config>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007782:	e009      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
      break;
 8007788:	e006      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800778a:	bf00      	nop
 800778c:	e004      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800778e:	bf00      	nop
 8007790:	e002      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007792:	bf00      	nop
 8007794:	e000      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800779e:	4b35      	ldr	r3, [pc, #212]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077ac:	4931      	ldr	r1, [pc, #196]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	658b      	str	r3, [r1, #88]	; 0x58
 80077b2:	e001      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d02d      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077cc:	d005      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80077ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d2:	d009      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d013      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80077d8:	e00f      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077da:	4b26      	ldr	r3, [pc, #152]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	4a25      	ldr	r2, [pc, #148]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80077e6:	e00c      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 faae 	bl	8008d50 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80077f8:	e003      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]
      break;
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007808:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007814:	4917      	ldr	r1, [pc, #92]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	650b      	str	r3, [r1, #80]	; 0x50
 800781a:	e001      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d035      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007830:	2b03      	cmp	r3, #3
 8007832:	d81b      	bhi.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	08007879 	.word	0x08007879
 8007840:	0800784d 	.word	0x0800784d
 8007844:	0800785b 	.word	0x0800785b
 8007848:	08007879 	.word	0x08007879
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a08      	ldr	r2, [pc, #32]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007858:	e00f      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3304      	adds	r3, #4
 800785e:	2102      	movs	r1, #2
 8007860:	4618      	mov	r0, r3
 8007862:	f001 fa75 	bl	8008d50 <RCCEx_PLL2_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800786a:	e006      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
      break;
 8007870:	e003      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007872:	bf00      	nop
 8007874:	58024400 	.word	0x58024400
      break;
 8007878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007880:	4bba      	ldr	r3, [pc, #744]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007884:	f023 0203 	bic.w	r2, r3, #3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788c:	49b7      	ldr	r1, [pc, #732]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800788e:	4313      	orrs	r3, r2
 8007890:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007892:	e001      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8086 	beq.w	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078a6:	4bb2      	ldr	r3, [pc, #712]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4ab1      	ldr	r2, [pc, #708]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80078ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078b2:	f7fa fd85 	bl	80023c0 <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078b8:	e009      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ba:	f7fa fd81 	bl	80023c0 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b64      	cmp	r3, #100	; 0x64
 80078c6:	d902      	bls.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	75fb      	strb	r3, [r7, #23]
        break;
 80078cc:	e005      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078ce:	4ba8      	ldr	r3, [pc, #672]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0ef      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d166      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078e0:	4ba2      	ldr	r3, [pc, #648]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078ea:	4053      	eors	r3, r2
 80078ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d013      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078f4:	4b9d      	ldr	r3, [pc, #628]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078fc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078fe:	4b9b      	ldr	r3, [pc, #620]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	4a9a      	ldr	r2, [pc, #616]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007908:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800790a:	4b98      	ldr	r3, [pc, #608]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790e:	4a97      	ldr	r2, [pc, #604]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007914:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007916:	4a95      	ldr	r2, [pc, #596]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007926:	d115      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fa fd4a 	bl	80023c0 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800792e:	e00b      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007930:	f7fa fd46 	bl	80023c0 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f241 3288 	movw	r2, #5000	; 0x1388
 800793e:	4293      	cmp	r3, r2
 8007940:	d902      	bls.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	75fb      	strb	r3, [r7, #23]
            break;
 8007946:	e005      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007948:	4b88      	ldr	r3, [pc, #544]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ed      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d126      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007968:	d10d      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800796a:	4b80      	ldr	r3, [pc, #512]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007978:	0919      	lsrs	r1, r3, #4
 800797a:	4b7e      	ldr	r3, [pc, #504]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800797c:	400b      	ands	r3, r1
 800797e:	497b      	ldr	r1, [pc, #492]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007980:	4313      	orrs	r3, r2
 8007982:	610b      	str	r3, [r1, #16]
 8007984:	e005      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007986:	4b79      	ldr	r3, [pc, #484]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4a78      	ldr	r2, [pc, #480]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800798c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007990:	6113      	str	r3, [r2, #16]
 8007992:	4b76      	ldr	r3, [pc, #472]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800799c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a0:	4972      	ldr	r1, [pc, #456]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	670b      	str	r3, [r1, #112]	; 0x70
 80079a6:	e004      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	75bb      	strb	r3, [r7, #22]
 80079ac:	e001      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d07d      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079c2:	2b28      	cmp	r3, #40	; 0x28
 80079c4:	d866      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a9b 	.word	0x08007a9b
 80079d0:	08007a95 	.word	0x08007a95
 80079d4:	08007a95 	.word	0x08007a95
 80079d8:	08007a95 	.word	0x08007a95
 80079dc:	08007a95 	.word	0x08007a95
 80079e0:	08007a95 	.word	0x08007a95
 80079e4:	08007a95 	.word	0x08007a95
 80079e8:	08007a95 	.word	0x08007a95
 80079ec:	08007a71 	.word	0x08007a71
 80079f0:	08007a95 	.word	0x08007a95
 80079f4:	08007a95 	.word	0x08007a95
 80079f8:	08007a95 	.word	0x08007a95
 80079fc:	08007a95 	.word	0x08007a95
 8007a00:	08007a95 	.word	0x08007a95
 8007a04:	08007a95 	.word	0x08007a95
 8007a08:	08007a95 	.word	0x08007a95
 8007a0c:	08007a83 	.word	0x08007a83
 8007a10:	08007a95 	.word	0x08007a95
 8007a14:	08007a95 	.word	0x08007a95
 8007a18:	08007a95 	.word	0x08007a95
 8007a1c:	08007a95 	.word	0x08007a95
 8007a20:	08007a95 	.word	0x08007a95
 8007a24:	08007a95 	.word	0x08007a95
 8007a28:	08007a95 	.word	0x08007a95
 8007a2c:	08007a9b 	.word	0x08007a9b
 8007a30:	08007a95 	.word	0x08007a95
 8007a34:	08007a95 	.word	0x08007a95
 8007a38:	08007a95 	.word	0x08007a95
 8007a3c:	08007a95 	.word	0x08007a95
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a95 	.word	0x08007a95
 8007a48:	08007a95 	.word	0x08007a95
 8007a4c:	08007a9b 	.word	0x08007a9b
 8007a50:	08007a95 	.word	0x08007a95
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007a95 	.word	0x08007a95
 8007a5c:	08007a95 	.word	0x08007a95
 8007a60:	08007a95 	.word	0x08007a95
 8007a64:	08007a95 	.word	0x08007a95
 8007a68:	08007a95 	.word	0x08007a95
 8007a6c:	08007a9b 	.word	0x08007a9b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3304      	adds	r3, #4
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 f96a 	bl	8008d50 <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a80:	e00c      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fa13 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a92:	e003      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
      break;
 8007a98:	e000      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007aa2:	4b32      	ldr	r3, [pc, #200]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aae:	492f      	ldr	r1, [pc, #188]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ab4:	e001      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d037      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d820      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007b17 	.word	0x08007b17
 8007ad8:	08007aed 	.word	0x08007aed
 8007adc:	08007aff 	.word	0x08007aff
 8007ae0:	08007b17 	.word	0x08007b17
 8007ae4:	08007b17 	.word	0x08007b17
 8007ae8:	08007b17 	.word	0x08007b17
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	2101      	movs	r1, #1
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 f92c 	bl	8008d50 <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007afc:	e00c      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3324      	adds	r3, #36	; 0x24
 8007b02:	2101      	movs	r1, #1
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 f9d5 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e000      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	f023 0207 	bic.w	r2, r3, #7
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2a:	4910      	ldr	r1, [pc, #64]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8007b30:	e001      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d040      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	d827      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007b4c:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007ba3 	.word	0x08007ba3
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007ba3 	.word	0x08007ba3
 8007b64:	08007ba3 	.word	0x08007ba3
 8007b68:	08007ba3 	.word	0x08007ba3
 8007b6c:	58024400 	.word	0x58024400
 8007b70:	58024800 	.word	0x58024800
 8007b74:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 f8e6 	bl	8008d50 <RCCEx_PLL2_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b88:	e00c      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3324      	adds	r3, #36	; 0x24
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 f98f 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b9a:	e003      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007baa:	4bb2      	ldr	r3, [pc, #712]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	f023 0207 	bic.w	r2, r3, #7
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb8:	49ae      	ldr	r1, [pc, #696]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	658b      	str	r3, [r1, #88]	; 0x58
 8007bbe:	e001      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d044      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bda:	d01b      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be0:	d805      	bhi.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d022      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bea:	d00a      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007bec:	e01b      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf2:	d01d      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf8:	d01c      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007bfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bfe:	d01b      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007c00:	e011      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3304      	adds	r3, #4
 8007c06:	2100      	movs	r1, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f8a1 	bl	8008d50 <RCCEx_PLL2_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c12:	e012      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3324      	adds	r3, #36	; 0x24
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f94a 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c24:	e009      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c40:	4b8c      	ldr	r3, [pc, #560]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c44:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c4e:	4989      	ldr	r1, [pc, #548]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	654b      	str	r3, [r1, #84]	; 0x54
 8007c54:	e001      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d044      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c70:	d01b      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c76:	d805      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d022      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c80:	d00a      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007c82:	e01b      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c88:	d01d      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007c8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c8e:	d01c      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c94:	d01b      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007c96:	e011      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 f856 	bl	8008d50 <RCCEx_PLL2_Config>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ca8:	e012      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3324      	adds	r3, #36	; 0x24
 8007cae:	2102      	movs	r1, #2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f8ff 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007cba:	e009      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc0:	e006      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e004      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007cc6:	bf00      	nop
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007cca:	bf00      	nop
 8007ccc:	e000      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cd6:	4b67      	ldr	r3, [pc, #412]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ce4:	4963      	ldr	r1, [pc, #396]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8007cea:	e001      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d044      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d06:	d01b      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d0c:	d805      	bhi.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d022      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d16:	d00a      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007d18:	e01b      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1e:	d01d      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007d20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d24:	d01c      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007d26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d2a:	d01b      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007d2c:	e011      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3304      	adds	r3, #4
 8007d32:	2100      	movs	r1, #0
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 f80b 	bl	8008d50 <RCCEx_PLL2_Config>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d3e:	e012      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3324      	adds	r3, #36	; 0x24
 8007d44:	2102      	movs	r1, #2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 f8b4 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d50:	e009      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	75fb      	strb	r3, [r7, #23]
      break;
 8007d56:	e006      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d58:	bf00      	nop
 8007d5a:	e004      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e002      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d60:	bf00      	nop
 8007d62:	e000      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10a      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d6c:	4b41      	ldr	r3, [pc, #260]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d7a:	493e      	ldr	r1, [pc, #248]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8007d80:	e001      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9c:	d10a      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3324      	adds	r3, #36	; 0x24
 8007da2:	2102      	movs	r1, #2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 f885 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007db4:	4b2f      	ldr	r3, [pc, #188]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc2:	492c      	ldr	r1, [pc, #176]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dde:	d10a      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3324      	adds	r3, #36	; 0x24
 8007de4:	2102      	movs	r1, #2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 f864 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007df6:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e04:	491b      	ldr	r1, [pc, #108]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d032      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e20:	d00d      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e26:	d016      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d111      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 ff8c 	bl	8008d50 <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e3c:	e00c      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3324      	adds	r3, #36	; 0x24
 8007e42:	2102      	movs	r1, #2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f835 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e4e:	e003      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]
      break;
 8007e54:	e000      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e6c:	4901      	ldr	r1, [pc, #4]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	658b      	str	r3, [r1, #88]	; 0x58
 8007e72:	e003      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d02f      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e92:	d00c      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e98:	d015      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9e:	d10f      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea0:	4b71      	ldr	r3, [pc, #452]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	4a70      	ldr	r2, [pc, #448]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007eac:	e00c      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3324      	adds	r3, #36	; 0x24
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fffd 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ebe:	e003      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec4:	e000      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ece:	4b66      	ldr	r3, [pc, #408]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007edc:	4962      	ldr	r1, [pc, #392]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	654b      	str	r3, [r1, #84]	; 0x54
 8007ee2:	e001      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d029      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f00:	d007      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007f02:	e00f      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f04:	4b58      	ldr	r3, [pc, #352]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4a57      	ldr	r2, [pc, #348]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f10:	e00b      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2102      	movs	r1, #2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 ff19 	bl	8008d50 <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f22:	e002      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	75fb      	strb	r3, [r7, #23]
      break;
 8007f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d109      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f30:	4b4d      	ldr	r3, [pc, #308]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f3c:	494a      	ldr	r1, [pc, #296]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f42:	e001      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3324      	adds	r3, #36	; 0x24
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 ffaa 	bl	8008eb4 <RCCEx_PLL3_Config>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d02f      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7e:	d00c      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f84:	d802      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d011      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007f8a:	e00d      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f90:	d00f      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f96:	d00e      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007f98:	e006      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9a:	4b33      	ldr	r3, [pc, #204]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	4a32      	ldr	r2, [pc, #200]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007fa6:	e007      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	75fb      	strb	r3, [r7, #23]
      break;
 8007fac:	e004      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007fae:	bf00      	nop
 8007fb0:	e002      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fbe:	4b2a      	ldr	r3, [pc, #168]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fca:	4927      	ldr	r1, [pc, #156]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	654b      	str	r3, [r1, #84]	; 0x54
 8007fd0:	e001      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fe2:	4b21      	ldr	r3, [pc, #132]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	491e      	ldr	r1, [pc, #120]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008000:	4b19      	ldr	r3, [pc, #100]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008004:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800800c:	4916      	ldr	r1, [pc, #88]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800800e:	4313      	orrs	r3, r2
 8008010:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00d      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800801e:	4b12      	ldr	r3, [pc, #72]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	4a11      	ldr	r2, [pc, #68]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008024:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008028:	6113      	str	r3, [r2, #16]
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800802c:	691a      	ldr	r2, [r3, #16]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008034:	490c      	ldr	r1, [pc, #48]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008036:	4313      	orrs	r3, r2
 8008038:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da08      	bge.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008046:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	4906      	ldr	r1, [pc, #24]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008050:	4313      	orrs	r3, r2
 8008052:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008054:	7dbb      	ldrb	r3, [r7, #22]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e000      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	58024400 	.word	0x58024400

0800806c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b090      	sub	sp, #64	; 0x40
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807a:	d150      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800807c:	4ba1      	ldr	r3, [pc, #644]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b04      	cmp	r3, #4
 800808a:	d844      	bhi.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080a9 	.word	0x080080a9
 8008098:	080080b9 	.word	0x080080b9
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	08008111 	.word	0x08008111
 80080a4:	080080d9 	.word	0x080080d9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fd03 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b6:	e241      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b8:	f107 0318 	add.w	r3, r7, #24
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fa63 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c6:	e239      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c8:	f107 030c 	add.w	r3, r7, #12
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fba7 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d6:	e231      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080d8:	4b8a      	ldr	r3, [pc, #552]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080e8:	4b87      	ldr	r3, [pc, #540]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080ec:	e226      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f4:	d102      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80080f6:	4b85      	ldr	r3, [pc, #532]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080fa:	e21f      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008102:	d102      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008104:	4b82      	ldr	r3, [pc, #520]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008108:	e218      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810e:	e215      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008110:	4b80      	ldr	r3, [pc, #512]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008114:	e212      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811a:	bf00      	nop
 800811c:	e20e      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008124:	d14f      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008126:	4b77      	ldr	r3, [pc, #476]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800812e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d01c      	beq.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	d804      	bhi.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d008      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d00e      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008142:	e03c      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008144:	2bc0      	cmp	r3, #192	; 0xc0
 8008146:	d037      	beq.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814c:	d018      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800814e:	e036      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fcaf 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800815e:	e1ed      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008160:	f107 0318 	add.w	r3, r7, #24
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fa0f 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800816e:	e1e5      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008170:	f107 030c 	add.w	r3, r7, #12
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fb53 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817e:	e1dd      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008180:	4b60      	ldr	r3, [pc, #384]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008188:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008190:	4b5d      	ldr	r3, [pc, #372]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008194:	e1d2      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800819c:	d102      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800819e:	4b5b      	ldr	r3, [pc, #364]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a2:	e1cb      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081aa:	d102      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80081ac:	4b58      	ldr	r3, [pc, #352]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b0:	e1c4      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b6:	e1c1      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081b8:	4b56      	ldr	r3, [pc, #344]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081bc:	e1be      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c2:	bf00      	nop
 80081c4:	e1ba      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081cc:	d153      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80081ce:	4b4d      	ldr	r3, [pc, #308]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80081d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081de:	d01f      	beq.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80081e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e4:	d805      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80081ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ee:	d00f      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80081f0:	e03d      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80081f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081f6:	d037      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80081f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081fc:	d018      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80081fe:	e036      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fc57 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800820e:	e195      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008210:	f107 0318 	add.w	r3, r7, #24
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f9b7 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800821e:	e18d      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fafb 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800822e:	e185      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008230:	4b34      	ldr	r3, [pc, #208]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008238:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008240:	4b31      	ldr	r3, [pc, #196]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008244:	e17a      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800824c:	d102      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800824e:	4b2f      	ldr	r3, [pc, #188]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008252:	e173      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800825a:	d102      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800825c:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008260:	e16c      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008266:	e169      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008268:	4b2a      	ldr	r3, [pc, #168]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826c:	e166      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008272:	bf00      	nop
 8008274:	e162      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827c:	d15d      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800827e:	4b21      	ldr	r3, [pc, #132]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008286:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800828e:	d01f      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008294:	d805      	bhi.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800829a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800829e:	d00f      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80082a0:	e047      	b.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80082a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082a6:	d041      	beq.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80082a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082ac:	d018      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80082ae:	e040      	b.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fbff 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082be:	e13d      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c0:	f107 0318 	add.w	r3, r7, #24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f95f 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ce:	e135      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 faa3 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082de:	e12d      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082e0:	4b08      	ldr	r3, [pc, #32]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082f0:	4b05      	ldr	r3, [pc, #20]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082f4:	e122      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fc:	d10c      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80082fe:	4b03      	ldr	r3, [pc, #12]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008302:	e11b      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008304:	58024400 	.word	0x58024400
 8008308:	03d09000 	.word	0x03d09000
 800830c:	003d0900 	.word	0x003d0900
 8008310:	017d7840 	.word	0x017d7840
 8008314:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008320:	4b89      	ldr	r3, [pc, #548]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008324:	e10a      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800832a:	e107      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800832c:	4b87      	ldr	r3, [pc, #540]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008330:	e104      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008336:	bf00      	nop
 8008338:	e100      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008340:	d153      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008342:	4b83      	ldr	r3, [pc, #524]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008346:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800834a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008352:	d01f      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008358:	d805      	bhi.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800835e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008362:	d00f      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008364:	e03d      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800836a:	d037      	beq.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800836c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008370:	d018      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008372:	e036      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fb9d 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e0db      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008384:	f107 0318 	add.w	r3, r7, #24
 8008388:	4618      	mov	r0, r3
 800838a:	f000 f8fd 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008392:	e0d3      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fa41 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a2:	e0cb      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083a4:	4b6a      	ldr	r3, [pc, #424]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80083ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083b4:	4b67      	ldr	r3, [pc, #412]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083b8:	e0c0      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c0:	d102      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80083c2:	4b65      	ldr	r3, [pc, #404]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c6:	e0b9      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ce:	d102      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80083d0:	4b5d      	ldr	r3, [pc, #372]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d4:	e0b2      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083da:	e0af      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083dc:	4b5b      	ldr	r3, [pc, #364]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e0:	e0ac      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e6:	bf00      	nop
 80083e8:	e0a8      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083f0:	d13d      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80083f2:	4b57      	ldr	r3, [pc, #348]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008402:	d00c      	beq.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008408:	d011      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d12b      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800840e:	f107 0318 	add.w	r3, r7, #24
 8008412:	4618      	mov	r0, r3
 8008414:	f000 f8b8 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800841c:	e08e      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f9fc 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800842c:	e086      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800842e:	4b48      	ldr	r3, [pc, #288]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008436:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800843e:	4b45      	ldr	r3, [pc, #276]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008442:	e07b      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844a:	d102      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800844c:	4b42      	ldr	r3, [pc, #264]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008450:	e074      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008458:	d102      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800845a:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800845e:	e06d      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008464:	e06a      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800846a:	bf00      	nop
 800846c:	e066      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008474:	d11f      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008476:	4b36      	ldr	r3, [pc, #216]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800847e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800848a:	d008      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800848c:	e00f      	b.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800848e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fb10 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800849c:	e04e      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849e:	f107 0318 	add.w	r3, r7, #24
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f870 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ac:	e046      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b2:	bf00      	nop
 80084b4:	e042      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084bc:	d13c      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80084be:	4b24      	ldr	r3, [pc, #144]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80084c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ce:	d01e      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80084d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d4:	d805      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00d      	beq.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80084da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084de:	d00e      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80084e0:	e026      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e6:	d01d      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80084e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ec:	d01d      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80084ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084f2:	d014      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80084f4:	e01c      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084f6:	f000 f831 	bl	800855c <HAL_RCCEx_GetD3PCLK1Freq>
 80084fa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80084fc:	e01e      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fe:	f107 0318 	add.w	r3, r7, #24
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f840 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800850c:	e016      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f984 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800851c:	e00e      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800851e:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008522:	e00b      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008524:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008528:	e008      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800852a:	4b07      	ldr	r3, [pc, #28]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800852e:	e005      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008534:	bf00      	nop
 8008536:	e001      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800853e:	4618      	mov	r0, r3
 8008540:	3740      	adds	r7, #64	; 0x40
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	017d7840 	.word	0x017d7840
 800854c:	00bb8000 	.word	0x00bb8000
 8008550:	58024400 	.word	0x58024400
 8008554:	03d09000 	.word	0x03d09000
 8008558:	003d0900 	.word	0x003d0900

0800855c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008560:	f7fe fe4a 	bl	80071f8 <HAL_RCC_GetHCLKFreq>
 8008564:	4601      	mov	r1, r0
 8008566:	4b06      	ldr	r3, [pc, #24]	; (8008580 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	4a04      	ldr	r2, [pc, #16]	; (8008584 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008572:	5cd3      	ldrb	r3, [r2, r3]
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800857c:	4618      	mov	r0, r3
 800857e:	bd80      	pop	{r7, pc}
 8008580:	58024400 	.word	0x58024400
 8008584:	0800df20 	.word	0x0800df20

08008588 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008588:	b480      	push	{r7}
 800858a:	b089      	sub	sp, #36	; 0x24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008590:	4b9d      	ldr	r3, [pc, #628]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800859a:	4b9b      	ldr	r3, [pc, #620]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	0b1b      	lsrs	r3, r3, #12
 80085a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085a6:	4b98      	ldr	r3, [pc, #608]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	091b      	lsrs	r3, r3, #4
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80085b2:	4b95      	ldr	r3, [pc, #596]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	08db      	lsrs	r3, r3, #3
 80085b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 810a 	beq.w	80087ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d05a      	beq.n	8008692 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d302      	bcc.n	80085e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d078      	beq.n	80086d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80085e4:	e099      	b.n	800871a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e6:	4b88      	ldr	r3, [pc, #544]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d02d      	beq.n	800864e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085f2:	4b85      	ldr	r3, [pc, #532]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	08db      	lsrs	r3, r3, #3
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	4a83      	ldr	r2, [pc, #524]	; (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80085fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008602:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	ee07 3a90 	vmov	s15, r3
 8008614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861c:	4b7a      	ldr	r3, [pc, #488]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008630:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008648:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800864c:	e087      	b.n	800875e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	ee07 3a90 	vmov	s15, r3
 8008654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008658:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800865c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008660:	4b69      	ldr	r3, [pc, #420]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008670:	ed97 6a03 	vldr	s12, [r7, #12]
 8008674:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008690:	e065      	b.n	800875e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80086a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a4:	4b58      	ldr	r3, [pc, #352]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ac:	ee07 3a90 	vmov	s15, r3
 80086b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086d4:	e043      	b.n	800875e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	ee07 3a90 	vmov	s15, r3
 80086dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800881c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80086e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e8:	4b47      	ldr	r3, [pc, #284]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008714:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008718:	e021      	b.n	800875e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008724:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872c:	4b36      	ldr	r3, [pc, #216]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008758:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800875c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800875e:	4b2a      	ldr	r3, [pc, #168]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	0a5b      	lsrs	r3, r3, #9
 8008764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008768:	ee07 3a90 	vmov	s15, r3
 800876c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008778:	edd7 6a07 	vldr	s13, [r7, #28]
 800877c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008784:	ee17 2a90 	vmov	r2, s15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800878c:	4b1e      	ldr	r3, [pc, #120]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b2:	ee17 2a90 	vmov	r2, s15
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	0e1b      	lsrs	r3, r3, #24
 80087c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e0:	ee17 2a90 	vmov	r2, s15
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087e8:	e008      	b.n	80087fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	609a      	str	r2, [r3, #8]
}
 80087fc:	bf00      	nop
 80087fe:	3724      	adds	r7, #36	; 0x24
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	58024400 	.word	0x58024400
 800880c:	03d09000 	.word	0x03d09000
 8008810:	46000000 	.word	0x46000000
 8008814:	4c742400 	.word	0x4c742400
 8008818:	4a742400 	.word	0x4a742400
 800881c:	4bbebc20 	.word	0x4bbebc20

08008820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008820:	b480      	push	{r7}
 8008822:	b089      	sub	sp, #36	; 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008828:	4b9d      	ldr	r3, [pc, #628]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008832:	4b9b      	ldr	r3, [pc, #620]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	0d1b      	lsrs	r3, r3, #20
 8008838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800883c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800883e:	4b98      	ldr	r3, [pc, #608]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800884a:	4b95      	ldr	r3, [pc, #596]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	08db      	lsrs	r3, r3, #3
 8008850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 810a 	beq.w	8008a82 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d05a      	beq.n	800892a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008874:	2b01      	cmp	r3, #1
 8008876:	d302      	bcc.n	800887e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008878:	2b02      	cmp	r3, #2
 800887a:	d078      	beq.n	800896e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800887c:	e099      	b.n	80089b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800887e:	4b88      	ldr	r3, [pc, #544]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d02d      	beq.n	80088e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800888a:	4b85      	ldr	r3, [pc, #532]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	08db      	lsrs	r3, r3, #3
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	4a83      	ldr	r2, [pc, #524]	; (8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008896:	fa22 f303 	lsr.w	r3, r2, r3
 800889a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	ee07 3a90 	vmov	s15, r3
 80088ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b4:	4b7a      	ldr	r3, [pc, #488]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088bc:	ee07 3a90 	vmov	s15, r3
 80088c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088e4:	e087      	b.n	80089f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80088f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f8:	4b69      	ldr	r3, [pc, #420]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008908:	ed97 6a03 	vldr	s12, [r7, #12]
 800890c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008924:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008928:	e065      	b.n	80089f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008934:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893c:	4b58      	ldr	r3, [pc, #352]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008950:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800896c:	e043      	b.n	80089f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008978:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800897c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008980:	4b47      	ldr	r3, [pc, #284]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008990:	ed97 6a03 	vldr	s12, [r7, #12]
 8008994:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089b0:	e021      	b.n	80089f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80089c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c4:	4b36      	ldr	r3, [pc, #216]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089cc:	ee07 3a90 	vmov	s15, r3
 80089d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	0a5b      	lsrs	r3, r3, #9
 80089fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a00:	ee07 3a90 	vmov	s15, r3
 8008a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1c:	ee17 2a90 	vmov	r2, s15
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a24:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	0c1b      	lsrs	r3, r3, #16
 8008a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a4a:	ee17 2a90 	vmov	r2, s15
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a52:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	0e1b      	lsrs	r3, r3, #24
 8008a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a78:	ee17 2a90 	vmov	r2, s15
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a80:	e008      	b.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	609a      	str	r2, [r3, #8]
}
 8008a94:	bf00      	nop
 8008a96:	3724      	adds	r7, #36	; 0x24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	46000000 	.word	0x46000000
 8008aac:	4c742400 	.word	0x4c742400
 8008ab0:	4a742400 	.word	0x4a742400
 8008ab4:	4bbebc20 	.word	0x4bbebc20

08008ab8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b089      	sub	sp, #36	; 0x24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ac0:	4b9d      	ldr	r3, [pc, #628]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008aca:	4b9b      	ldr	r3, [pc, #620]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	091b      	lsrs	r3, r3, #4
 8008ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ad6:	4b98      	ldr	r3, [pc, #608]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ae0:	4b95      	ldr	r3, [pc, #596]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae4:	08db      	lsrs	r3, r3, #3
 8008ae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	fb02 f303 	mul.w	r3, r2, r3
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 810a 	beq.w	8008d18 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d05a      	beq.n	8008bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d302      	bcc.n	8008b14 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d078      	beq.n	8008c04 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008b12:	e099      	b.n	8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b14:	4b88      	ldr	r3, [pc, #544]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d02d      	beq.n	8008b7c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b20:	4b85      	ldr	r3, [pc, #532]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	08db      	lsrs	r3, r3, #3
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	4a84      	ldr	r2, [pc, #528]	; (8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b30:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	ee07 3a90 	vmov	s15, r3
 8008b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4a:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b7a:	e087      	b.n	8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8e:	4b6a      	ldr	r3, [pc, #424]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bbe:	e065      	b.n	8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd2:	4b59      	ldr	r3, [pc, #356]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c02:	e043      	b.n	8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c16:	4b48      	ldr	r3, [pc, #288]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c46:	e021      	b.n	8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5a:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c8a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008c8c:	4b2a      	ldr	r3, [pc, #168]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	0a5b      	lsrs	r3, r3, #9
 8008c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb2:	ee17 2a90 	vmov	r2, s15
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008cba:	4b1f      	ldr	r3, [pc, #124]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	0c1b      	lsrs	r3, r3, #16
 8008cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ce0:	ee17 2a90 	vmov	r2, s15
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008ce8:	4b13      	ldr	r3, [pc, #76]	; (8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	0e1b      	lsrs	r3, r3, #24
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0e:	ee17 2a90 	vmov	r2, s15
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008d16:	e008      	b.n	8008d2a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	609a      	str	r2, [r3, #8]
}
 8008d2a:	bf00      	nop
 8008d2c:	3724      	adds	r7, #36	; 0x24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	58024400 	.word	0x58024400
 8008d3c:	03d09000 	.word	0x03d09000
 8008d40:	46000000 	.word	0x46000000
 8008d44:	4c742400 	.word	0x4c742400
 8008d48:	4a742400 	.word	0x4a742400
 8008d4c:	4bbebc20 	.word	0x4bbebc20

08008d50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d5e:	4b53      	ldr	r3, [pc, #332]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d101      	bne.n	8008d6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e099      	b.n	8008ea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d6e:	4b4f      	ldr	r3, [pc, #316]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a4e      	ldr	r2, [pc, #312]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008d74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d7a:	f7f9 fb21 	bl	80023c0 <HAL_GetTick>
 8008d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d80:	e008      	b.n	8008d94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d82:	f7f9 fb1d 	bl	80023c0 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e086      	b.n	8008ea2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d94:	4b45      	ldr	r3, [pc, #276]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f0      	bne.n	8008d82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008da0:	4b42      	ldr	r3, [pc, #264]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	031b      	lsls	r3, r3, #12
 8008dae:	493f      	ldr	r1, [pc, #252]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	628b      	str	r3, [r1, #40]	; 0x28
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	025b      	lsls	r3, r3, #9
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	041b      	lsls	r3, r3, #16
 8008dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	061b      	lsls	r3, r3, #24
 8008de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008de4:	4931      	ldr	r1, [pc, #196]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008dea:	4b30      	ldr	r3, [pc, #192]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	492d      	ldr	r1, [pc, #180]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008dfc:	4b2b      	ldr	r3, [pc, #172]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	f023 0220 	bic.w	r2, r3, #32
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	4928      	ldr	r1, [pc, #160]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e0e:	4b27      	ldr	r3, [pc, #156]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	4a26      	ldr	r2, [pc, #152]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e14:	f023 0310 	bic.w	r3, r3, #16
 8008e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e1a:	4b24      	ldr	r3, [pc, #144]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e1e:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <RCCEx_PLL2_Config+0x160>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	69d2      	ldr	r2, [r2, #28]
 8008e26:	00d2      	lsls	r2, r2, #3
 8008e28:	4920      	ldr	r1, [pc, #128]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e2e:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e34:	f043 0310 	orr.w	r3, r3, #16
 8008e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e40:	4b1a      	ldr	r3, [pc, #104]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4a19      	ldr	r2, [pc, #100]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e4c:	e00f      	b.n	8008e6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d106      	bne.n	8008e62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e54:	4b15      	ldr	r3, [pc, #84]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	4a14      	ldr	r2, [pc, #80]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e60:	e005      	b.n	8008e6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e62:	4b12      	ldr	r3, [pc, #72]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	4a11      	ldr	r2, [pc, #68]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a0e      	ldr	r2, [pc, #56]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7a:	f7f9 faa1 	bl	80023c0 <HAL_GetTick>
 8008e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e80:	e008      	b.n	8008e94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e82:	f7f9 fa9d 	bl	80023c0 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e006      	b.n	8008ea2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <RCCEx_PLL2_Config+0x15c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0f0      	beq.n	8008e82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	ffff0007 	.word	0xffff0007

08008eb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ec2:	4b53      	ldr	r3, [pc, #332]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d101      	bne.n	8008ed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e099      	b.n	8009006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ed2:	4b4f      	ldr	r3, [pc, #316]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a4e      	ldr	r2, [pc, #312]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ede:	f7f9 fa6f 	bl	80023c0 <HAL_GetTick>
 8008ee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ee4:	e008      	b.n	8008ef8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ee6:	f7f9 fa6b 	bl	80023c0 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d901      	bls.n	8008ef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e086      	b.n	8009006 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ef8:	4b45      	ldr	r3, [pc, #276]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f0      	bne.n	8008ee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f04:	4b42      	ldr	r3, [pc, #264]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	051b      	lsls	r3, r3, #20
 8008f12:	493f      	ldr	r1, [pc, #252]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	628b      	str	r3, [r1, #40]	; 0x28
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	025b      	lsls	r3, r3, #9
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	061b      	lsls	r3, r3, #24
 8008f44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f48:	4931      	ldr	r1, [pc, #196]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f4e:	4b30      	ldr	r3, [pc, #192]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	492d      	ldr	r1, [pc, #180]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f60:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	4928      	ldr	r1, [pc, #160]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f72:	4b27      	ldr	r3, [pc, #156]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a26      	ldr	r2, [pc, #152]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f7e:	4b24      	ldr	r3, [pc, #144]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f82:	4b24      	ldr	r3, [pc, #144]	; (8009014 <RCCEx_PLL3_Config+0x160>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	69d2      	ldr	r2, [r2, #28]
 8008f8a:	00d2      	lsls	r2, r2, #3
 8008f8c:	4920      	ldr	r1, [pc, #128]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f92:	4b1f      	ldr	r3, [pc, #124]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008fa4:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	4a19      	ldr	r2, [pc, #100]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fb0:	e00f      	b.n	8008fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d106      	bne.n	8008fc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008fb8:	4b15      	ldr	r3, [pc, #84]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	4a14      	ldr	r2, [pc, #80]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fc4:	e005      	b.n	8008fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fca:	4a11      	ldr	r2, [pc, #68]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a0e      	ldr	r2, [pc, #56]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fde:	f7f9 f9ef 	bl	80023c0 <HAL_GetTick>
 8008fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fe4:	e008      	b.n	8008ff8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008fe6:	f7f9 f9eb 	bl	80023c0 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d901      	bls.n	8008ff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e006      	b.n	8009006 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <RCCEx_PLL3_Config+0x15c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0f0      	beq.n	8008fe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	58024400 	.word	0x58024400
 8009014:	ffff0007 	.word	0xffff0007

08009018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e01d      	b.n	8009066 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7f8 fe28 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f000 f97c 	bl	8009354 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <HAL_TIM_Base_Start_IT+0x50>)
 8009090:	4013      	ands	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b06      	cmp	r3, #6
 8009098:	d00b      	beq.n	80090b2 <HAL_TIM_Base_Start_IT+0x42>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a0:	d007      	beq.n	80090b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	00010007 	.word	0x00010007

080090c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d122      	bne.n	8009120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d11b      	bne.n	8009120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0202 	mvn.w	r2, #2
 80090f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f905 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 800910c:	e005      	b.n	800911a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8f7 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f908 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b04      	cmp	r3, #4
 800912c:	d122      	bne.n	8009174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b04      	cmp	r3, #4
 800913a:	d11b      	bne.n	8009174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0204 	mvn.w	r2, #4
 8009144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2202      	movs	r2, #2
 800914a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8db 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 8009160:	e005      	b.n	800916e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f8cd 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8de 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b08      	cmp	r3, #8
 8009180:	d122      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b08      	cmp	r3, #8
 800918e:	d11b      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0208 	mvn.w	r2, #8
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2204      	movs	r2, #4
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8b1 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f8a3 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8b4 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b10      	cmp	r3, #16
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0210 	mvn.w	r2, #16
 80091ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2208      	movs	r2, #8
 80091f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f887 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f879 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f88a 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b01      	cmp	r3, #1
 8009228:	d10e      	bne.n	8009248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b01      	cmp	r3, #1
 8009236:	d107      	bne.n	8009248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0201 	mvn.w	r2, #1
 8009240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7f7 ff06 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d10e      	bne.n	8009274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d107      	bne.n	8009274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800926c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f99c 	bl	80095ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009282:	d10e      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b80      	cmp	r3, #128	; 0x80
 8009290:	d107      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800929a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f98f 	bl	80095c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ac:	2b40      	cmp	r3, #64	; 0x40
 80092ae:	d10e      	bne.n	80092ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ba:	2b40      	cmp	r3, #64	; 0x40
 80092bc:	d107      	bne.n	80092ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f838 	bl	800933e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d10e      	bne.n	80092fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d107      	bne.n	80092fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f06f 0220 	mvn.w	r2, #32
 80092f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f94f 	bl	8009598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
	...

08009354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a40      	ldr	r2, [pc, #256]	; (8009468 <TIM_Base_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d013      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009372:	d00f      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a3d      	ldr	r2, [pc, #244]	; (800946c <TIM_Base_SetConfig+0x118>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00b      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a3c      	ldr	r2, [pc, #240]	; (8009470 <TIM_Base_SetConfig+0x11c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d007      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a3b      	ldr	r2, [pc, #236]	; (8009474 <TIM_Base_SetConfig+0x120>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a3a      	ldr	r2, [pc, #232]	; (8009478 <TIM_Base_SetConfig+0x124>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d108      	bne.n	80093a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a2f      	ldr	r2, [pc, #188]	; (8009468 <TIM_Base_SetConfig+0x114>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d01f      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b4:	d01b      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a2c      	ldr	r2, [pc, #176]	; (800946c <TIM_Base_SetConfig+0x118>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d017      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a2b      	ldr	r2, [pc, #172]	; (8009470 <TIM_Base_SetConfig+0x11c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a2a      	ldr	r2, [pc, #168]	; (8009474 <TIM_Base_SetConfig+0x120>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00f      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a29      	ldr	r2, [pc, #164]	; (8009478 <TIM_Base_SetConfig+0x124>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00b      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a28      	ldr	r2, [pc, #160]	; (800947c <TIM_Base_SetConfig+0x128>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a27      	ldr	r2, [pc, #156]	; (8009480 <TIM_Base_SetConfig+0x12c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d003      	beq.n	80093ee <TIM_Base_SetConfig+0x9a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a26      	ldr	r2, [pc, #152]	; (8009484 <TIM_Base_SetConfig+0x130>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d108      	bne.n	8009400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a10      	ldr	r2, [pc, #64]	; (8009468 <TIM_Base_SetConfig+0x114>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00f      	beq.n	800944c <TIM_Base_SetConfig+0xf8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a12      	ldr	r2, [pc, #72]	; (8009478 <TIM_Base_SetConfig+0x124>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d00b      	beq.n	800944c <TIM_Base_SetConfig+0xf8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a11      	ldr	r2, [pc, #68]	; (800947c <TIM_Base_SetConfig+0x128>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d007      	beq.n	800944c <TIM_Base_SetConfig+0xf8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a10      	ldr	r2, [pc, #64]	; (8009480 <TIM_Base_SetConfig+0x12c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_Base_SetConfig+0xf8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a0f      	ldr	r2, [pc, #60]	; (8009484 <TIM_Base_SetConfig+0x130>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d103      	bne.n	8009454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	615a      	str	r2, [r3, #20]
}
 800945a:	bf00      	nop
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40010000 	.word	0x40010000
 800946c:	40000400 	.word	0x40000400
 8009470:	40000800 	.word	0x40000800
 8009474:	40000c00 	.word	0x40000c00
 8009478:	40010400 	.word	0x40010400
 800947c:	40014000 	.word	0x40014000
 8009480:	40014400 	.word	0x40014400
 8009484:	40014800 	.word	0x40014800

08009488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800949c:	2302      	movs	r3, #2
 800949e:	e068      	b.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a2e      	ldr	r2, [pc, #184]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a2d      	ldr	r2, [pc, #180]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d108      	bne.n	80094e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1e      	ldr	r2, [pc, #120]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d01d      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009512:	d018      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1b      	ldr	r2, [pc, #108]	; (8009588 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1a      	ldr	r2, [pc, #104]	; (800958c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00e      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a18      	ldr	r2, [pc, #96]	; (8009590 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d009      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a13      	ldr	r2, [pc, #76]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d004      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a14      	ldr	r2, [pc, #80]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d10c      	bne.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800954c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	4313      	orrs	r3, r2
 8009556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40010000 	.word	0x40010000
 8009584:	40010400 	.word	0x40010400
 8009588:	40000400 	.word	0x40000400
 800958c:	40000800 	.word	0x40000800
 8009590:	40000c00 	.word	0x40000c00
 8009594:	40001800 	.word	0x40001800

08009598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e042      	b.n	800966c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7f8 fb73 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2224      	movs	r2, #36	; 0x24
 8009602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0201 	bic.w	r2, r2, #1
 8009614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fc3a 	bl	8009e90 <UART_SetConfig>
 800961c:	4603      	mov	r3, r0
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e022      	b.n	800966c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f002 fdac 	bl	800c18c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0201 	orr.w	r2, r2, #1
 8009662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f002 fe33 	bl	800c2d0 <UART_CheckIdleState>
 800966a:	4603      	mov	r3, r0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	; 0x28
 8009678:	af02      	add	r7, sp, #8
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	4613      	mov	r3, r2
 8009682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800968a:	2b20      	cmp	r3, #32
 800968c:	f040 8083 	bne.w	8009796 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <HAL_UART_Transmit+0x28>
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e07b      	b.n	8009798 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d101      	bne.n	80096ae <HAL_UART_Transmit+0x3a>
 80096aa:	2302      	movs	r3, #2
 80096ac:	e074      	b.n	8009798 <HAL_UART_Transmit+0x124>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2221      	movs	r2, #33	; 0x21
 80096c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80096c6:	f7f8 fe7b 	bl	80023c0 <HAL_GetTick>
 80096ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	88fa      	ldrh	r2, [r7, #6]
 80096d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	88fa      	ldrh	r2, [r7, #6]
 80096d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e4:	d108      	bne.n	80096f8 <HAL_UART_Transmit+0x84>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d104      	bne.n	80096f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	61bb      	str	r3, [r7, #24]
 80096f6:	e003      	b.n	8009700 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009700:	e02c      	b.n	800975c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2200      	movs	r2, #0
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f002 fe27 	bl	800c360 <UART_WaitOnFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e03d      	b.n	8009798 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	3302      	adds	r3, #2
 8009736:	61bb      	str	r3, [r7, #24]
 8009738:	e007      	b.n	800974a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	781a      	ldrb	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	3301      	adds	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009762:	b29b      	uxth	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1cc      	bne.n	8009702 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2200      	movs	r2, #0
 8009770:	2140      	movs	r1, #64	; 0x40
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f002 fdf4 	bl	800c360 <UART_WaitOnFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e00a      	b.n	8009798 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2220      	movs	r2, #32
 8009786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	e000      	b.n	8009798 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009796:	2302      	movs	r3, #2
  }
}
 8009798:	4618      	mov	r0, r3
 800979a:	3720      	adds	r7, #32
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	4613      	mov	r3, r2
 80097ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b4:	2b20      	cmp	r3, #32
 80097b6:	d168      	bne.n	800988a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <HAL_UART_Transmit_IT+0x24>
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d101      	bne.n	80097c8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e061      	b.n	800988c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d101      	bne.n	80097d6 <HAL_UART_Transmit_IT+0x36>
 80097d2:	2302      	movs	r3, #2
 80097d4:	e05a      	b.n	800988c <HAL_UART_Transmit_IT+0xec>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2221      	movs	r2, #33	; 0x21
 8009806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800980e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009812:	d11c      	bne.n	800984e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800981c:	d107      	bne.n	800982e <HAL_UART_Transmit_IT+0x8e>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d103      	bne.n	800982e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a1b      	ldr	r2, [pc, #108]	; (8009898 <HAL_UART_Transmit_IT+0xf8>)
 800982a:	671a      	str	r2, [r3, #112]	; 0x70
 800982c:	e002      	b.n	8009834 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	4a1a      	ldr	r2, [pc, #104]	; (800989c <HAL_UART_Transmit_IT+0xfc>)
 8009832:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800984a:	609a      	str	r2, [r3, #8]
 800984c:	e01b      	b.n	8009886 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009856:	d107      	bne.n	8009868 <HAL_UART_Transmit_IT+0xc8>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d103      	bne.n	8009868 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a0f      	ldr	r2, [pc, #60]	; (80098a0 <HAL_UART_Transmit_IT+0x100>)
 8009864:	671a      	str	r2, [r3, #112]	; 0x70
 8009866:	e002      	b.n	800986e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4a0e      	ldr	r2, [pc, #56]	; (80098a4 <HAL_UART_Transmit_IT+0x104>)
 800986c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009884:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	e000      	b.n	800988c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800988a:	2302      	movs	r3, #2
  }
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	0800c79f 	.word	0x0800c79f
 800989c:	0800c705 	.word	0x0800c705
 80098a0:	0800c687 	.word	0x0800c687
 80098a4:	0800c613 	.word	0x0800c613

080098a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098bc:	2b20      	cmp	r3, #32
 80098be:	f040 80bc 	bne.w	8009a3a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <HAL_UART_Receive_IT+0x26>
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e0b4      	b.n	8009a3c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <HAL_UART_Receive_IT+0x38>
 80098dc:	2302      	movs	r3, #2
 80098de:	e0ad      	b.n	8009a3c <HAL_UART_Receive_IT+0x194>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	88fa      	ldrh	r2, [r7, #6]
 80098fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990c:	d10e      	bne.n	800992c <HAL_UART_Receive_IT+0x84>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <HAL_UART_Receive_IT+0x7a>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f240 12ff 	movw	r2, #511	; 0x1ff
 800991c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009920:	e02d      	b.n	800997e <HAL_UART_Receive_IT+0xd6>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	22ff      	movs	r2, #255	; 0xff
 8009926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800992a:	e028      	b.n	800997e <HAL_UART_Receive_IT+0xd6>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10d      	bne.n	8009950 <HAL_UART_Receive_IT+0xa8>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <HAL_UART_Receive_IT+0x9e>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	22ff      	movs	r2, #255	; 0xff
 8009940:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009944:	e01b      	b.n	800997e <HAL_UART_Receive_IT+0xd6>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	227f      	movs	r2, #127	; 0x7f
 800994a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800994e:	e016      	b.n	800997e <HAL_UART_Receive_IT+0xd6>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009958:	d10d      	bne.n	8009976 <HAL_UART_Receive_IT+0xce>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <HAL_UART_Receive_IT+0xc4>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	227f      	movs	r2, #127	; 0x7f
 8009966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800996a:	e008      	b.n	800997e <HAL_UART_Receive_IT+0xd6>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	223f      	movs	r2, #63	; 0x3f
 8009970:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009974:	e003      	b.n	800997e <HAL_UART_Receive_IT+0xd6>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2222      	movs	r2, #34	; 0x22
 800998a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f042 0201 	orr.w	r2, r2, #1
 800999c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a6:	d12a      	bne.n	80099fe <HAL_UART_Receive_IT+0x156>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099ae:	88fa      	ldrh	r2, [r7, #6]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d324      	bcc.n	80099fe <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099bc:	d107      	bne.n	80099ce <HAL_UART_Receive_IT+0x126>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d103      	bne.n	80099ce <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <HAL_UART_Receive_IT+0x1a0>)
 80099ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80099cc:	e002      	b.n	80099d4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <HAL_UART_Receive_IT+0x1a4>)
 80099d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ea:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80099fa:	609a      	str	r2, [r3, #8]
 80099fc:	e01b      	b.n	8009a36 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a06:	d107      	bne.n	8009a18 <HAL_UART_Receive_IT+0x170>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4a0f      	ldr	r2, [pc, #60]	; (8009a50 <HAL_UART_Receive_IT+0x1a8>)
 8009a14:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a16:	e002      	b.n	8009a1e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a0e      	ldr	r2, [pc, #56]	; (8009a54 <HAL_UART_Receive_IT+0x1ac>)
 8009a1c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009a34:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	e000      	b.n	8009a3c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009a3a:	2302      	movs	r3, #2
  }
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	0800cad5 	.word	0x0800cad5
 8009a4c:	0800c9cd 	.word	0x0800c9cd
 8009a50:	0800c921 	.word	0x0800c921
 8009a54:	0800c877 	.word	0x0800c877

08009a58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d170      	bne.n	8009b52 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <HAL_UART_Receive_DMA+0x24>
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e069      	b.n	8009b54 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d101      	bne.n	8009a8e <HAL_UART_Receive_DMA+0x36>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e062      	b.n	8009b54 <HAL_UART_Receive_DMA+0xfc>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	88fa      	ldrh	r2, [r7, #6]
 8009aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2222      	movs	r2, #34	; 0x22
 8009ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02c      	beq.n	8009b16 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac0:	4a26      	ldr	r2, [pc, #152]	; (8009b5c <HAL_UART_Receive_DMA+0x104>)
 8009ac2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac8:	4a25      	ldr	r2, [pc, #148]	; (8009b60 <HAL_UART_Receive_DMA+0x108>)
 8009aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad0:	4a24      	ldr	r2, [pc, #144]	; (8009b64 <HAL_UART_Receive_DMA+0x10c>)
 8009ad2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad8:	2200      	movs	r2, #0
 8009ada:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3324      	adds	r3, #36	; 0x24
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aec:	461a      	mov	r2, r3
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	f7fa faa4 	bl	800403c <HAL_DMA_Start_IT>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2210      	movs	r2, #16
 8009afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e01e      	b.n	8009b54 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b2c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0201 	orr.w	r2, r2, #1
 8009b3c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b4c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e000      	b.n	8009b54 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009b52:	2302      	movs	r3, #2
  }
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	0800c4e5 	.word	0x0800c4e5
 8009b60:	0800c54b 	.word	0x0800c54b
 8009b64:	0800c567 	.word	0x0800c567

08009b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b8e:	4013      	ands	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d118      	bne.n	8009bca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d013      	beq.n	8009bca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d104      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8145 	beq.w	8009e4a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	4798      	blx	r3
      }
      return;
 8009bc8:	e13f      	b.n	8009e4a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 80e8 	beq.w	8009da2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4ba1      	ldr	r3, [pc, #644]	; (8009e5c <HAL_UART_IRQHandler+0x2f4>)
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d105      	bne.n	8009be8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009bdc:	69ba      	ldr	r2, [r7, #24]
 8009bde:	4ba0      	ldr	r3, [pc, #640]	; (8009e60 <HAL_UART_IRQHandler+0x2f8>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 80dd 	beq.w	8009da2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d010      	beq.n	8009c14 <HAL_UART_IRQHandler+0xac>
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2201      	movs	r2, #1
 8009c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0a:	f043 0201 	orr.w	r2, r3, #1
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d010      	beq.n	8009c40 <HAL_UART_IRQHandler+0xd8>
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c36:	f043 0204 	orr.w	r2, r3, #4
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d010      	beq.n	8009c6c <HAL_UART_IRQHandler+0x104>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00b      	beq.n	8009c6c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	f043 0202 	orr.w	r2, r3, #2
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0308 	and.w	r3, r3, #8
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d015      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d104      	bne.n	8009c8a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4b76      	ldr	r3, [pc, #472]	; (8009e5c <HAL_UART_IRQHandler+0x2f4>)
 8009c84:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2208      	movs	r2, #8
 8009c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c98:	f043 0208 	orr.w	r2, r3, #8
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d011      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x168>
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00c      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc6:	f043 0220 	orr.w	r2, r3, #32
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80b9 	beq.w	8009e4e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d011      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d10:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1c:	2b40      	cmp	r3, #64	; 0x40
 8009d1e:	d004      	beq.n	8009d2a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d031      	beq.n	8009d8e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f002 fbb6 	bl	800c49c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3a:	2b40      	cmp	r3, #64	; 0x40
 8009d3c:	d123      	bne.n	8009d86 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d013      	beq.n	8009d7e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d5a:	4a42      	ldr	r2, [pc, #264]	; (8009e64 <HAL_UART_IRQHandler+0x2fc>)
 8009d5c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fa fbd4 	bl	8004510 <HAL_DMA_Abort_IT>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d017      	beq.n	8009d9e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7c:	e00f      	b.n	8009d9e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f87c 	bl	8009e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d84:	e00b      	b.n	8009d9e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f878 	bl	8009e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8c:	e007      	b.n	8009d9e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f874 	bl	8009e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009d9c:	e057      	b.n	8009e4e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9e:	bf00      	nop
    return;
 8009da0:	e055      	b.n	8009e4e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00d      	beq.n	8009dc8 <HAL_UART_IRQHandler+0x260>
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009dbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f002 ff0b 	bl	800cbdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dc6:	e045      	b.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d012      	beq.n	8009df8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d008      	beq.n	8009df8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d031      	beq.n	8009e52 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
    }
    return;
 8009df6:	e02c      	b.n	8009e52 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d008      	beq.n	8009e14 <HAL_UART_IRQHandler+0x2ac>
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f002 fd18 	bl	800c842 <UART_EndTransmit_IT>
    return;
 8009e12:	e01f      	b.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d008      	beq.n	8009e30 <HAL_UART_IRQHandler+0x2c8>
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f002 feeb 	bl	800cc04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e2e:	e011      	b.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00c      	beq.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	da09      	bge.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f002 fed5 	bl	800cbf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e46:	bf00      	nop
 8009e48:	e004      	b.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009e4a:	bf00      	nop
 8009e4c:	e002      	b.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009e4e:	bf00      	nop
 8009e50:	e000      	b.n	8009e54 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009e52:	bf00      	nop
  }
}
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	10000001 	.word	0x10000001
 8009e60:	04000120 	.word	0x04000120
 8009e64:	0800c5e7 	.word	0x0800c5e7

08009e68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009e94:	b090      	sub	sp, #64	; 0x40
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	431a      	orrs	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	69db      	ldr	r3, [r3, #28]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	4bc1      	ldr	r3, [pc, #772]	; (800a1d8 <UART_SetConfig+0x348>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009eda:	430b      	orrs	r3, r1
 8009edc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4ab7      	ldr	r2, [pc, #732]	; (800a1dc <UART_SetConfig+0x34c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d004      	beq.n	8009f0e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	4bb2      	ldr	r3, [pc, #712]	; (800a1e0 <UART_SetConfig+0x350>)
 8009f16:	4013      	ands	r3, r2
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f1e:	430b      	orrs	r3, r1
 8009f20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	f023 010f 	bic.w	r1, r3, #15
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4aa9      	ldr	r2, [pc, #676]	; (800a1e4 <UART_SetConfig+0x354>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d177      	bne.n	800a032 <UART_SetConfig+0x1a2>
 8009f42:	4ba9      	ldr	r3, [pc, #676]	; (800a1e8 <UART_SetConfig+0x358>)
 8009f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f4a:	2b28      	cmp	r3, #40	; 0x28
 8009f4c:	d86c      	bhi.n	800a028 <UART_SetConfig+0x198>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <UART_SetConfig+0xc4>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009ff9 	.word	0x08009ff9
 8009f58:	0800a029 	.word	0x0800a029
 8009f5c:	0800a029 	.word	0x0800a029
 8009f60:	0800a029 	.word	0x0800a029
 8009f64:	0800a029 	.word	0x0800a029
 8009f68:	0800a029 	.word	0x0800a029
 8009f6c:	0800a029 	.word	0x0800a029
 8009f70:	0800a029 	.word	0x0800a029
 8009f74:	0800a001 	.word	0x0800a001
 8009f78:	0800a029 	.word	0x0800a029
 8009f7c:	0800a029 	.word	0x0800a029
 8009f80:	0800a029 	.word	0x0800a029
 8009f84:	0800a029 	.word	0x0800a029
 8009f88:	0800a029 	.word	0x0800a029
 8009f8c:	0800a029 	.word	0x0800a029
 8009f90:	0800a029 	.word	0x0800a029
 8009f94:	0800a009 	.word	0x0800a009
 8009f98:	0800a029 	.word	0x0800a029
 8009f9c:	0800a029 	.word	0x0800a029
 8009fa0:	0800a029 	.word	0x0800a029
 8009fa4:	0800a029 	.word	0x0800a029
 8009fa8:	0800a029 	.word	0x0800a029
 8009fac:	0800a029 	.word	0x0800a029
 8009fb0:	0800a029 	.word	0x0800a029
 8009fb4:	0800a011 	.word	0x0800a011
 8009fb8:	0800a029 	.word	0x0800a029
 8009fbc:	0800a029 	.word	0x0800a029
 8009fc0:	0800a029 	.word	0x0800a029
 8009fc4:	0800a029 	.word	0x0800a029
 8009fc8:	0800a029 	.word	0x0800a029
 8009fcc:	0800a029 	.word	0x0800a029
 8009fd0:	0800a029 	.word	0x0800a029
 8009fd4:	0800a019 	.word	0x0800a019
 8009fd8:	0800a029 	.word	0x0800a029
 8009fdc:	0800a029 	.word	0x0800a029
 8009fe0:	0800a029 	.word	0x0800a029
 8009fe4:	0800a029 	.word	0x0800a029
 8009fe8:	0800a029 	.word	0x0800a029
 8009fec:	0800a029 	.word	0x0800a029
 8009ff0:	0800a029 	.word	0x0800a029
 8009ff4:	0800a021 	.word	0x0800a021
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ffe:	e233      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a000:	2304      	movs	r3, #4
 800a002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a006:	e22f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a008:	2308      	movs	r3, #8
 800a00a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a00e:	e22b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a010:	2310      	movs	r3, #16
 800a012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a016:	e227      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a018:	2320      	movs	r3, #32
 800a01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a01e:	e223      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a020:	2340      	movs	r3, #64	; 0x40
 800a022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a026:	e21f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a02e:	bf00      	nop
 800a030:	e21a      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a6d      	ldr	r2, [pc, #436]	; (800a1ec <UART_SetConfig+0x35c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d132      	bne.n	800a0a2 <UART_SetConfig+0x212>
 800a03c:	4b6a      	ldr	r3, [pc, #424]	; (800a1e8 <UART_SetConfig+0x358>)
 800a03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	2b05      	cmp	r3, #5
 800a046:	d827      	bhi.n	800a098 <UART_SetConfig+0x208>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <UART_SetConfig+0x1c0>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a069 	.word	0x0800a069
 800a054:	0800a071 	.word	0x0800a071
 800a058:	0800a079 	.word	0x0800a079
 800a05c:	0800a081 	.word	0x0800a081
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a091 	.word	0x0800a091
 800a068:	2300      	movs	r3, #0
 800a06a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a06e:	e1fb      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a070:	2304      	movs	r3, #4
 800a072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a076:	e1f7      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a078:	2308      	movs	r3, #8
 800a07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a07e:	e1f3      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a080:	2310      	movs	r3, #16
 800a082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a086:	e1ef      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a088:	2320      	movs	r3, #32
 800a08a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a08e:	e1eb      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a096:	e1e7      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a098:	2380      	movs	r3, #128	; 0x80
 800a09a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a09e:	bf00      	nop
 800a0a0:	e1e2      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a52      	ldr	r2, [pc, #328]	; (800a1f0 <UART_SetConfig+0x360>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d132      	bne.n	800a112 <UART_SetConfig+0x282>
 800a0ac:	4b4e      	ldr	r3, [pc, #312]	; (800a1e8 <UART_SetConfig+0x358>)
 800a0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d827      	bhi.n	800a108 <UART_SetConfig+0x278>
 800a0b8:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <UART_SetConfig+0x230>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0d9 	.word	0x0800a0d9
 800a0c4:	0800a0e1 	.word	0x0800a0e1
 800a0c8:	0800a0e9 	.word	0x0800a0e9
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a0f9 	.word	0x0800a0f9
 800a0d4:	0800a101 	.word	0x0800a101
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0de:	e1c3      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0e6:	e1bf      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ee:	e1bb      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0f6:	e1b7      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0fe:	e1b3      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a100:	2340      	movs	r3, #64	; 0x40
 800a102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a106:	e1af      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a10e:	bf00      	nop
 800a110:	e1aa      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a37      	ldr	r2, [pc, #220]	; (800a1f4 <UART_SetConfig+0x364>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d132      	bne.n	800a182 <UART_SetConfig+0x2f2>
 800a11c:	4b32      	ldr	r3, [pc, #200]	; (800a1e8 <UART_SetConfig+0x358>)
 800a11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a120:	f003 0307 	and.w	r3, r3, #7
 800a124:	2b05      	cmp	r3, #5
 800a126:	d827      	bhi.n	800a178 <UART_SetConfig+0x2e8>
 800a128:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <UART_SetConfig+0x2a0>)
 800a12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12e:	bf00      	nop
 800a130:	0800a149 	.word	0x0800a149
 800a134:	0800a151 	.word	0x0800a151
 800a138:	0800a159 	.word	0x0800a159
 800a13c:	0800a161 	.word	0x0800a161
 800a140:	0800a169 	.word	0x0800a169
 800a144:	0800a171 	.word	0x0800a171
 800a148:	2300      	movs	r3, #0
 800a14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a14e:	e18b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a150:	2304      	movs	r3, #4
 800a152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a156:	e187      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a15e:	e183      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a160:	2310      	movs	r3, #16
 800a162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a166:	e17f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a168:	2320      	movs	r3, #32
 800a16a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a16e:	e17b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a170:	2340      	movs	r3, #64	; 0x40
 800a172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a176:	e177      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a178:	2380      	movs	r3, #128	; 0x80
 800a17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a17e:	bf00      	nop
 800a180:	e172      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a1c      	ldr	r2, [pc, #112]	; (800a1f8 <UART_SetConfig+0x368>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d144      	bne.n	800a216 <UART_SetConfig+0x386>
 800a18c:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <UART_SetConfig+0x358>)
 800a18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	2b05      	cmp	r3, #5
 800a196:	d839      	bhi.n	800a20c <UART_SetConfig+0x37c>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x310>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1fd 	.word	0x0800a1fd
 800a1b4:	0800a205 	.word	0x0800a205
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1be:	e153      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1c6:	e14f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ce:	e14b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1d6:	e147      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a1d8:	cfff69f3 	.word	0xcfff69f3
 800a1dc:	58000c00 	.word	0x58000c00
 800a1e0:	11fff4ff 	.word	0x11fff4ff
 800a1e4:	40011000 	.word	0x40011000
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	40004400 	.word	0x40004400
 800a1f0:	40004800 	.word	0x40004800
 800a1f4:	40004c00 	.word	0x40004c00
 800a1f8:	40005000 	.word	0x40005000
 800a1fc:	2320      	movs	r3, #32
 800a1fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a202:	e131      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a204:	2340      	movs	r3, #64	; 0x40
 800a206:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20a:	e12d      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a20c:	2380      	movs	r3, #128	; 0x80
 800a20e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a212:	bf00      	nop
 800a214:	e128      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4ac3      	ldr	r2, [pc, #780]	; (800a528 <UART_SetConfig+0x698>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d178      	bne.n	800a312 <UART_SetConfig+0x482>
 800a220:	4bc2      	ldr	r3, [pc, #776]	; (800a52c <UART_SetConfig+0x69c>)
 800a222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a228:	2b28      	cmp	r3, #40	; 0x28
 800a22a:	d86d      	bhi.n	800a308 <UART_SetConfig+0x478>
 800a22c:	a201      	add	r2, pc, #4	; (adr r2, 800a234 <UART_SetConfig+0x3a4>)
 800a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a2d9 	.word	0x0800a2d9
 800a238:	0800a309 	.word	0x0800a309
 800a23c:	0800a309 	.word	0x0800a309
 800a240:	0800a309 	.word	0x0800a309
 800a244:	0800a309 	.word	0x0800a309
 800a248:	0800a309 	.word	0x0800a309
 800a24c:	0800a309 	.word	0x0800a309
 800a250:	0800a309 	.word	0x0800a309
 800a254:	0800a2e1 	.word	0x0800a2e1
 800a258:	0800a309 	.word	0x0800a309
 800a25c:	0800a309 	.word	0x0800a309
 800a260:	0800a309 	.word	0x0800a309
 800a264:	0800a309 	.word	0x0800a309
 800a268:	0800a309 	.word	0x0800a309
 800a26c:	0800a309 	.word	0x0800a309
 800a270:	0800a309 	.word	0x0800a309
 800a274:	0800a2e9 	.word	0x0800a2e9
 800a278:	0800a309 	.word	0x0800a309
 800a27c:	0800a309 	.word	0x0800a309
 800a280:	0800a309 	.word	0x0800a309
 800a284:	0800a309 	.word	0x0800a309
 800a288:	0800a309 	.word	0x0800a309
 800a28c:	0800a309 	.word	0x0800a309
 800a290:	0800a309 	.word	0x0800a309
 800a294:	0800a2f1 	.word	0x0800a2f1
 800a298:	0800a309 	.word	0x0800a309
 800a29c:	0800a309 	.word	0x0800a309
 800a2a0:	0800a309 	.word	0x0800a309
 800a2a4:	0800a309 	.word	0x0800a309
 800a2a8:	0800a309 	.word	0x0800a309
 800a2ac:	0800a309 	.word	0x0800a309
 800a2b0:	0800a309 	.word	0x0800a309
 800a2b4:	0800a2f9 	.word	0x0800a2f9
 800a2b8:	0800a309 	.word	0x0800a309
 800a2bc:	0800a309 	.word	0x0800a309
 800a2c0:	0800a309 	.word	0x0800a309
 800a2c4:	0800a309 	.word	0x0800a309
 800a2c8:	0800a309 	.word	0x0800a309
 800a2cc:	0800a309 	.word	0x0800a309
 800a2d0:	0800a309 	.word	0x0800a309
 800a2d4:	0800a301 	.word	0x0800a301
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2de:	e0c3      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2e6:	e0bf      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a2e8:	2308      	movs	r3, #8
 800a2ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ee:	e0bb      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2f6:	e0b7      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a2f8:	2320      	movs	r3, #32
 800a2fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2fe:	e0b3      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a300:	2340      	movs	r3, #64	; 0x40
 800a302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a306:	e0af      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a308:	2380      	movs	r3, #128	; 0x80
 800a30a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a30e:	bf00      	nop
 800a310:	e0aa      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a86      	ldr	r2, [pc, #536]	; (800a530 <UART_SetConfig+0x6a0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d132      	bne.n	800a382 <UART_SetConfig+0x4f2>
 800a31c:	4b83      	ldr	r3, [pc, #524]	; (800a52c <UART_SetConfig+0x69c>)
 800a31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a320:	f003 0307 	and.w	r3, r3, #7
 800a324:	2b05      	cmp	r3, #5
 800a326:	d827      	bhi.n	800a378 <UART_SetConfig+0x4e8>
 800a328:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <UART_SetConfig+0x4a0>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a349 	.word	0x0800a349
 800a334:	0800a351 	.word	0x0800a351
 800a338:	0800a359 	.word	0x0800a359
 800a33c:	0800a361 	.word	0x0800a361
 800a340:	0800a369 	.word	0x0800a369
 800a344:	0800a371 	.word	0x0800a371
 800a348:	2300      	movs	r3, #0
 800a34a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a34e:	e08b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a350:	2304      	movs	r3, #4
 800a352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a356:	e087      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a358:	2308      	movs	r3, #8
 800a35a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a35e:	e083      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a360:	2310      	movs	r3, #16
 800a362:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a366:	e07f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a368:	2320      	movs	r3, #32
 800a36a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a36e:	e07b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a370:	2340      	movs	r3, #64	; 0x40
 800a372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a376:	e077      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a378:	2380      	movs	r3, #128	; 0x80
 800a37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a37e:	bf00      	nop
 800a380:	e072      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a6b      	ldr	r2, [pc, #428]	; (800a534 <UART_SetConfig+0x6a4>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d132      	bne.n	800a3f2 <UART_SetConfig+0x562>
 800a38c:	4b67      	ldr	r3, [pc, #412]	; (800a52c <UART_SetConfig+0x69c>)
 800a38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a390:	f003 0307 	and.w	r3, r3, #7
 800a394:	2b05      	cmp	r3, #5
 800a396:	d827      	bhi.n	800a3e8 <UART_SetConfig+0x558>
 800a398:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <UART_SetConfig+0x510>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3c1 	.word	0x0800a3c1
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3be:	e053      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3c6:	e04f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ce:	e04b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3d6:	e047      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3d8:	2320      	movs	r3, #32
 800a3da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3de:	e043      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3e0:	2340      	movs	r3, #64	; 0x40
 800a3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3e6:	e03f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3e8:	2380      	movs	r3, #128	; 0x80
 800a3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ee:	bf00      	nop
 800a3f0:	e03a      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a50      	ldr	r2, [pc, #320]	; (800a538 <UART_SetConfig+0x6a8>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d132      	bne.n	800a462 <UART_SetConfig+0x5d2>
 800a3fc:	4b4b      	ldr	r3, [pc, #300]	; (800a52c <UART_SetConfig+0x69c>)
 800a3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a400:	f003 0307 	and.w	r3, r3, #7
 800a404:	2b05      	cmp	r3, #5
 800a406:	d827      	bhi.n	800a458 <UART_SetConfig+0x5c8>
 800a408:	a201      	add	r2, pc, #4	; (adr r2, 800a410 <UART_SetConfig+0x580>)
 800a40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40e:	bf00      	nop
 800a410:	0800a429 	.word	0x0800a429
 800a414:	0800a431 	.word	0x0800a431
 800a418:	0800a439 	.word	0x0800a439
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a449 	.word	0x0800a449
 800a424:	0800a451 	.word	0x0800a451
 800a428:	2302      	movs	r3, #2
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a42e:	e01b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a430:	2304      	movs	r3, #4
 800a432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a436:	e017      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a438:	2308      	movs	r3, #8
 800a43a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a43e:	e013      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a440:	2310      	movs	r3, #16
 800a442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a446:	e00f      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a448:	2320      	movs	r3, #32
 800a44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a44e:	e00b      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a450:	2340      	movs	r3, #64	; 0x40
 800a452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a456:	e007      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a458:	2380      	movs	r3, #128	; 0x80
 800a45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a45e:	bf00      	nop
 800a460:	e002      	b.n	800a468 <UART_SetConfig+0x5d8>
 800a462:	2380      	movs	r3, #128	; 0x80
 800a464:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a32      	ldr	r2, [pc, #200]	; (800a538 <UART_SetConfig+0x6a8>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	f040 86f7 	bne.w	800b262 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a474:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a478:	2b08      	cmp	r3, #8
 800a47a:	f000 80c0 	beq.w	800a5fe <UART_SetConfig+0x76e>
 800a47e:	2b08      	cmp	r3, #8
 800a480:	dc04      	bgt.n	800a48c <UART_SetConfig+0x5fc>
 800a482:	2b02      	cmp	r3, #2
 800a484:	d00c      	beq.n	800a4a0 <UART_SetConfig+0x610>
 800a486:	2b04      	cmp	r3, #4
 800a488:	d065      	beq.n	800a556 <UART_SetConfig+0x6c6>
 800a48a:	e27a      	b.n	800a982 <UART_SetConfig+0xaf2>
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	f000 81b0 	beq.w	800a7f2 <UART_SetConfig+0x962>
 800a492:	2b40      	cmp	r3, #64	; 0x40
 800a494:	f000 821e 	beq.w	800a8d4 <UART_SetConfig+0xa44>
 800a498:	2b10      	cmp	r3, #16
 800a49a:	f000 8104 	beq.w	800a6a6 <UART_SetConfig+0x816>
 800a49e:	e270      	b.n	800a982 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a4a0:	f7fe f85c 	bl	800855c <HAL_RCCEx_GetD3PCLK1Freq>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d04e      	beq.n	800a54c <UART_SetConfig+0x6bc>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d048      	beq.n	800a548 <UART_SetConfig+0x6b8>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d042      	beq.n	800a544 <UART_SetConfig+0x6b4>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d03c      	beq.n	800a540 <UART_SetConfig+0x6b0>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d036      	beq.n	800a53c <UART_SetConfig+0x6ac>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d026      	beq.n	800a524 <UART_SetConfig+0x694>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	2b06      	cmp	r3, #6
 800a4dc:	d020      	beq.n	800a520 <UART_SetConfig+0x690>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	2b07      	cmp	r3, #7
 800a4e4:	d01a      	beq.n	800a51c <UART_SetConfig+0x68c>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	2b08      	cmp	r3, #8
 800a4ec:	d014      	beq.n	800a518 <UART_SetConfig+0x688>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	d00e      	beq.n	800a514 <UART_SetConfig+0x684>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fa:	2b0a      	cmp	r3, #10
 800a4fc:	d008      	beq.n	800a510 <UART_SetConfig+0x680>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	2b0b      	cmp	r3, #11
 800a504:	d102      	bne.n	800a50c <UART_SetConfig+0x67c>
 800a506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a50a:	e020      	b.n	800a54e <UART_SetConfig+0x6be>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e01e      	b.n	800a54e <UART_SetConfig+0x6be>
 800a510:	2380      	movs	r3, #128	; 0x80
 800a512:	e01c      	b.n	800a54e <UART_SetConfig+0x6be>
 800a514:	2340      	movs	r3, #64	; 0x40
 800a516:	e01a      	b.n	800a54e <UART_SetConfig+0x6be>
 800a518:	2320      	movs	r3, #32
 800a51a:	e018      	b.n	800a54e <UART_SetConfig+0x6be>
 800a51c:	2310      	movs	r3, #16
 800a51e:	e016      	b.n	800a54e <UART_SetConfig+0x6be>
 800a520:	230c      	movs	r3, #12
 800a522:	e014      	b.n	800a54e <UART_SetConfig+0x6be>
 800a524:	230a      	movs	r3, #10
 800a526:	e012      	b.n	800a54e <UART_SetConfig+0x6be>
 800a528:	40011400 	.word	0x40011400
 800a52c:	58024400 	.word	0x58024400
 800a530:	40007800 	.word	0x40007800
 800a534:	40007c00 	.word	0x40007c00
 800a538:	58000c00 	.word	0x58000c00
 800a53c:	2308      	movs	r3, #8
 800a53e:	e006      	b.n	800a54e <UART_SetConfig+0x6be>
 800a540:	2306      	movs	r3, #6
 800a542:	e004      	b.n	800a54e <UART_SetConfig+0x6be>
 800a544:	2304      	movs	r3, #4
 800a546:	e002      	b.n	800a54e <UART_SetConfig+0x6be>
 800a548:	2302      	movs	r3, #2
 800a54a:	e000      	b.n	800a54e <UART_SetConfig+0x6be>
 800a54c:	2301      	movs	r3, #1
 800a54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a552:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a554:	e219      	b.n	800a98a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a556:	f107 0318 	add.w	r3, r7, #24
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe f814 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a560:	69fa      	ldr	r2, [r7, #28]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b00      	cmp	r3, #0
 800a568:	d044      	beq.n	800a5f4 <UART_SetConfig+0x764>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d03e      	beq.n	800a5f0 <UART_SetConfig+0x760>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	2b02      	cmp	r3, #2
 800a578:	d038      	beq.n	800a5ec <UART_SetConfig+0x75c>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d032      	beq.n	800a5e8 <UART_SetConfig+0x758>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	2b04      	cmp	r3, #4
 800a588:	d02c      	beq.n	800a5e4 <UART_SetConfig+0x754>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d026      	beq.n	800a5e0 <UART_SetConfig+0x750>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	2b06      	cmp	r3, #6
 800a598:	d020      	beq.n	800a5dc <UART_SetConfig+0x74c>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	d01a      	beq.n	800a5d8 <UART_SetConfig+0x748>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d014      	beq.n	800a5d4 <UART_SetConfig+0x744>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d00e      	beq.n	800a5d0 <UART_SetConfig+0x740>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b0a      	cmp	r3, #10
 800a5b8:	d008      	beq.n	800a5cc <UART_SetConfig+0x73c>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b0b      	cmp	r3, #11
 800a5c0:	d102      	bne.n	800a5c8 <UART_SetConfig+0x738>
 800a5c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5c6:	e016      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e014      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5cc:	2380      	movs	r3, #128	; 0x80
 800a5ce:	e012      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5d0:	2340      	movs	r3, #64	; 0x40
 800a5d2:	e010      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5d4:	2320      	movs	r3, #32
 800a5d6:	e00e      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	e00c      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5dc:	230c      	movs	r3, #12
 800a5de:	e00a      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5e0:	230a      	movs	r3, #10
 800a5e2:	e008      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	e006      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5e8:	2306      	movs	r3, #6
 800a5ea:	e004      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	e002      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e000      	b.n	800a5f6 <UART_SetConfig+0x766>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5fc:	e1c5      	b.n	800a98a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5fe:	f107 030c 	add.w	r3, r7, #12
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe f90c 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d044      	beq.n	800a69c <UART_SetConfig+0x80c>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b01      	cmp	r3, #1
 800a618:	d03e      	beq.n	800a698 <UART_SetConfig+0x808>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d038      	beq.n	800a694 <UART_SetConfig+0x804>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b03      	cmp	r3, #3
 800a628:	d032      	beq.n	800a690 <UART_SetConfig+0x800>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d02c      	beq.n	800a68c <UART_SetConfig+0x7fc>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b05      	cmp	r3, #5
 800a638:	d026      	beq.n	800a688 <UART_SetConfig+0x7f8>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	2b06      	cmp	r3, #6
 800a640:	d020      	beq.n	800a684 <UART_SetConfig+0x7f4>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b07      	cmp	r3, #7
 800a648:	d01a      	beq.n	800a680 <UART_SetConfig+0x7f0>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	2b08      	cmp	r3, #8
 800a650:	d014      	beq.n	800a67c <UART_SetConfig+0x7ec>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b09      	cmp	r3, #9
 800a658:	d00e      	beq.n	800a678 <UART_SetConfig+0x7e8>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b0a      	cmp	r3, #10
 800a660:	d008      	beq.n	800a674 <UART_SetConfig+0x7e4>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b0b      	cmp	r3, #11
 800a668:	d102      	bne.n	800a670 <UART_SetConfig+0x7e0>
 800a66a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a66e:	e016      	b.n	800a69e <UART_SetConfig+0x80e>
 800a670:	2301      	movs	r3, #1
 800a672:	e014      	b.n	800a69e <UART_SetConfig+0x80e>
 800a674:	2380      	movs	r3, #128	; 0x80
 800a676:	e012      	b.n	800a69e <UART_SetConfig+0x80e>
 800a678:	2340      	movs	r3, #64	; 0x40
 800a67a:	e010      	b.n	800a69e <UART_SetConfig+0x80e>
 800a67c:	2320      	movs	r3, #32
 800a67e:	e00e      	b.n	800a69e <UART_SetConfig+0x80e>
 800a680:	2310      	movs	r3, #16
 800a682:	e00c      	b.n	800a69e <UART_SetConfig+0x80e>
 800a684:	230c      	movs	r3, #12
 800a686:	e00a      	b.n	800a69e <UART_SetConfig+0x80e>
 800a688:	230a      	movs	r3, #10
 800a68a:	e008      	b.n	800a69e <UART_SetConfig+0x80e>
 800a68c:	2308      	movs	r3, #8
 800a68e:	e006      	b.n	800a69e <UART_SetConfig+0x80e>
 800a690:	2306      	movs	r3, #6
 800a692:	e004      	b.n	800a69e <UART_SetConfig+0x80e>
 800a694:	2304      	movs	r3, #4
 800a696:	e002      	b.n	800a69e <UART_SetConfig+0x80e>
 800a698:	2302      	movs	r3, #2
 800a69a:	e000      	b.n	800a69e <UART_SetConfig+0x80e>
 800a69c:	2301      	movs	r3, #1
 800a69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6a4:	e171      	b.n	800a98a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6a6:	4b7a      	ldr	r3, [pc, #488]	; (800a890 <UART_SetConfig+0xa00>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d054      	beq.n	800a75c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a6b2:	4b77      	ldr	r3, [pc, #476]	; (800a890 <UART_SetConfig+0xa00>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	08db      	lsrs	r3, r3, #3
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	4a75      	ldr	r2, [pc, #468]	; (800a894 <UART_SetConfig+0xa04>)
 800a6be:	40da      	lsrs	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d044      	beq.n	800a752 <UART_SetConfig+0x8c2>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d03e      	beq.n	800a74e <UART_SetConfig+0x8be>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d038      	beq.n	800a74a <UART_SetConfig+0x8ba>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d032      	beq.n	800a746 <UART_SetConfig+0x8b6>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d02c      	beq.n	800a742 <UART_SetConfig+0x8b2>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	2b05      	cmp	r3, #5
 800a6ee:	d026      	beq.n	800a73e <UART_SetConfig+0x8ae>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	2b06      	cmp	r3, #6
 800a6f6:	d020      	beq.n	800a73a <UART_SetConfig+0x8aa>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	2b07      	cmp	r3, #7
 800a6fe:	d01a      	beq.n	800a736 <UART_SetConfig+0x8a6>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	2b08      	cmp	r3, #8
 800a706:	d014      	beq.n	800a732 <UART_SetConfig+0x8a2>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b09      	cmp	r3, #9
 800a70e:	d00e      	beq.n	800a72e <UART_SetConfig+0x89e>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	2b0a      	cmp	r3, #10
 800a716:	d008      	beq.n	800a72a <UART_SetConfig+0x89a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	2b0b      	cmp	r3, #11
 800a71e:	d102      	bne.n	800a726 <UART_SetConfig+0x896>
 800a720:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a724:	e016      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a726:	2301      	movs	r3, #1
 800a728:	e014      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a72a:	2380      	movs	r3, #128	; 0x80
 800a72c:	e012      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	e010      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a732:	2320      	movs	r3, #32
 800a734:	e00e      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a736:	2310      	movs	r3, #16
 800a738:	e00c      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a73a:	230c      	movs	r3, #12
 800a73c:	e00a      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a73e:	230a      	movs	r3, #10
 800a740:	e008      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a742:	2308      	movs	r3, #8
 800a744:	e006      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a746:	2306      	movs	r3, #6
 800a748:	e004      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a74a:	2304      	movs	r3, #4
 800a74c:	e002      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a74e:	2302      	movs	r3, #2
 800a750:	e000      	b.n	800a754 <UART_SetConfig+0x8c4>
 800a752:	2301      	movs	r3, #1
 800a754:	fbb2 f3f3 	udiv	r3, r2, r3
 800a758:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a75a:	e116      	b.n	800a98a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	d043      	beq.n	800a7ec <UART_SetConfig+0x95c>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d03d      	beq.n	800a7e8 <UART_SetConfig+0x958>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	2b02      	cmp	r3, #2
 800a772:	d037      	beq.n	800a7e4 <UART_SetConfig+0x954>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d031      	beq.n	800a7e0 <UART_SetConfig+0x950>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	2b04      	cmp	r3, #4
 800a782:	d02b      	beq.n	800a7dc <UART_SetConfig+0x94c>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	2b05      	cmp	r3, #5
 800a78a:	d025      	beq.n	800a7d8 <UART_SetConfig+0x948>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b06      	cmp	r3, #6
 800a792:	d01f      	beq.n	800a7d4 <UART_SetConfig+0x944>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	2b07      	cmp	r3, #7
 800a79a:	d019      	beq.n	800a7d0 <UART_SetConfig+0x940>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d013      	beq.n	800a7cc <UART_SetConfig+0x93c>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	2b09      	cmp	r3, #9
 800a7aa:	d00d      	beq.n	800a7c8 <UART_SetConfig+0x938>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	2b0a      	cmp	r3, #10
 800a7b2:	d007      	beq.n	800a7c4 <UART_SetConfig+0x934>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	2b0b      	cmp	r3, #11
 800a7ba:	d101      	bne.n	800a7c0 <UART_SetConfig+0x930>
 800a7bc:	4b36      	ldr	r3, [pc, #216]	; (800a898 <UART_SetConfig+0xa08>)
 800a7be:	e016      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7c0:	4b34      	ldr	r3, [pc, #208]	; (800a894 <UART_SetConfig+0xa04>)
 800a7c2:	e014      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7c4:	4b35      	ldr	r3, [pc, #212]	; (800a89c <UART_SetConfig+0xa0c>)
 800a7c6:	e012      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7c8:	4b35      	ldr	r3, [pc, #212]	; (800a8a0 <UART_SetConfig+0xa10>)
 800a7ca:	e010      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7cc:	4b35      	ldr	r3, [pc, #212]	; (800a8a4 <UART_SetConfig+0xa14>)
 800a7ce:	e00e      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7d0:	4b35      	ldr	r3, [pc, #212]	; (800a8a8 <UART_SetConfig+0xa18>)
 800a7d2:	e00c      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7d4:	4b35      	ldr	r3, [pc, #212]	; (800a8ac <UART_SetConfig+0xa1c>)
 800a7d6:	e00a      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7d8:	4b35      	ldr	r3, [pc, #212]	; (800a8b0 <UART_SetConfig+0xa20>)
 800a7da:	e008      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7dc:	4b35      	ldr	r3, [pc, #212]	; (800a8b4 <UART_SetConfig+0xa24>)
 800a7de:	e006      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7e0:	4b35      	ldr	r3, [pc, #212]	; (800a8b8 <UART_SetConfig+0xa28>)
 800a7e2:	e004      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7e4:	4b35      	ldr	r3, [pc, #212]	; (800a8bc <UART_SetConfig+0xa2c>)
 800a7e6:	e002      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7e8:	4b35      	ldr	r3, [pc, #212]	; (800a8c0 <UART_SetConfig+0xa30>)
 800a7ea:	e000      	b.n	800a7ee <UART_SetConfig+0x95e>
 800a7ec:	4b29      	ldr	r3, [pc, #164]	; (800a894 <UART_SetConfig+0xa04>)
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7f0:	e0cb      	b.n	800a98a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d046      	beq.n	800a888 <UART_SetConfig+0x9f8>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d040      	beq.n	800a884 <UART_SetConfig+0x9f4>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b02      	cmp	r3, #2
 800a808:	d03a      	beq.n	800a880 <UART_SetConfig+0x9f0>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d034      	beq.n	800a87c <UART_SetConfig+0x9ec>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b04      	cmp	r3, #4
 800a818:	d02e      	beq.n	800a878 <UART_SetConfig+0x9e8>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b05      	cmp	r3, #5
 800a820:	d028      	beq.n	800a874 <UART_SetConfig+0x9e4>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	2b06      	cmp	r3, #6
 800a828:	d022      	beq.n	800a870 <UART_SetConfig+0x9e0>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b07      	cmp	r3, #7
 800a830:	d01c      	beq.n	800a86c <UART_SetConfig+0x9dc>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b08      	cmp	r3, #8
 800a838:	d016      	beq.n	800a868 <UART_SetConfig+0x9d8>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b09      	cmp	r3, #9
 800a840:	d00f      	beq.n	800a862 <UART_SetConfig+0x9d2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	2b0a      	cmp	r3, #10
 800a848:	d008      	beq.n	800a85c <UART_SetConfig+0x9cc>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	2b0b      	cmp	r3, #11
 800a850:	d102      	bne.n	800a858 <UART_SetConfig+0x9c8>
 800a852:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a856:	e018      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <UART_SetConfig+0xa18>)
 800a85a:	e016      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a85c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a860:	e013      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a862:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a866:	e010      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a868:	4b16      	ldr	r3, [pc, #88]	; (800a8c4 <UART_SetConfig+0xa34>)
 800a86a:	e00e      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <UART_SetConfig+0xa08>)
 800a86e:	e00c      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a870:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <UART_SetConfig+0xa38>)
 800a872:	e00a      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a874:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <UART_SetConfig+0xa3c>)
 800a876:	e008      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a878:	4b08      	ldr	r3, [pc, #32]	; (800a89c <UART_SetConfig+0xa0c>)
 800a87a:	e006      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a87c:	4b14      	ldr	r3, [pc, #80]	; (800a8d0 <UART_SetConfig+0xa40>)
 800a87e:	e004      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <UART_SetConfig+0xa10>)
 800a882:	e002      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <UART_SetConfig+0xa14>)
 800a886:	e000      	b.n	800a88a <UART_SetConfig+0x9fa>
 800a888:	4b07      	ldr	r3, [pc, #28]	; (800a8a8 <UART_SetConfig+0xa18>)
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a88c:	e07d      	b.n	800a98a <UART_SetConfig+0xafa>
 800a88e:	bf00      	nop
 800a890:	58024400 	.word	0x58024400
 800a894:	03d09000 	.word	0x03d09000
 800a898:	0003d090 	.word	0x0003d090
 800a89c:	0007a120 	.word	0x0007a120
 800a8a0:	000f4240 	.word	0x000f4240
 800a8a4:	001e8480 	.word	0x001e8480
 800a8a8:	003d0900 	.word	0x003d0900
 800a8ac:	00516155 	.word	0x00516155
 800a8b0:	0061a800 	.word	0x0061a800
 800a8b4:	007a1200 	.word	0x007a1200
 800a8b8:	00a2c2aa 	.word	0x00a2c2aa
 800a8bc:	00f42400 	.word	0x00f42400
 800a8c0:	01e84800 	.word	0x01e84800
 800a8c4:	0001e848 	.word	0x0001e848
 800a8c8:	00051615 	.word	0x00051615
 800a8cc:	00061a80 	.word	0x00061a80
 800a8d0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d04e      	beq.n	800a97a <UART_SetConfig+0xaea>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d047      	beq.n	800a974 <UART_SetConfig+0xae4>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d040      	beq.n	800a96e <UART_SetConfig+0xade>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d039      	beq.n	800a968 <UART_SetConfig+0xad8>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d032      	beq.n	800a962 <UART_SetConfig+0xad2>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b05      	cmp	r3, #5
 800a902:	d02b      	beq.n	800a95c <UART_SetConfig+0xacc>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	2b06      	cmp	r3, #6
 800a90a:	d024      	beq.n	800a956 <UART_SetConfig+0xac6>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	2b07      	cmp	r3, #7
 800a912:	d01d      	beq.n	800a950 <UART_SetConfig+0xac0>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d016      	beq.n	800a94a <UART_SetConfig+0xaba>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	2b09      	cmp	r3, #9
 800a922:	d00f      	beq.n	800a944 <UART_SetConfig+0xab4>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	2b0a      	cmp	r3, #10
 800a92a:	d008      	beq.n	800a93e <UART_SetConfig+0xaae>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2b0b      	cmp	r3, #11
 800a932:	d101      	bne.n	800a938 <UART_SetConfig+0xaa8>
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	e022      	b.n	800a97e <UART_SetConfig+0xaee>
 800a938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a93c:	e01f      	b.n	800a97e <UART_SetConfig+0xaee>
 800a93e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a942:	e01c      	b.n	800a97e <UART_SetConfig+0xaee>
 800a944:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a948:	e019      	b.n	800a97e <UART_SetConfig+0xaee>
 800a94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a94e:	e016      	b.n	800a97e <UART_SetConfig+0xaee>
 800a950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a954:	e013      	b.n	800a97e <UART_SetConfig+0xaee>
 800a956:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a95a:	e010      	b.n	800a97e <UART_SetConfig+0xaee>
 800a95c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a960:	e00d      	b.n	800a97e <UART_SetConfig+0xaee>
 800a962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a966:	e00a      	b.n	800a97e <UART_SetConfig+0xaee>
 800a968:	f241 5355 	movw	r3, #5461	; 0x1555
 800a96c:	e007      	b.n	800a97e <UART_SetConfig+0xaee>
 800a96e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a972:	e004      	b.n	800a97e <UART_SetConfig+0xaee>
 800a974:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a978:	e001      	b.n	800a97e <UART_SetConfig+0xaee>
 800a97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a980:	e003      	b.n	800a98a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a988:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f001 83e8 	beq.w	800c162 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	4613      	mov	r3, r2
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	4413      	add	r3, r2
 800a99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d305      	bcc.n	800a9ae <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d904      	bls.n	800a9b8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b4:	f001 bbd5 	b.w	800c162 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a9b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	f000 8154 	beq.w	800ac6a <UART_SetConfig+0xdda>
 800a9c2:	2b08      	cmp	r3, #8
 800a9c4:	dc06      	bgt.n	800a9d4 <UART_SetConfig+0xb44>
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d00f      	beq.n	800a9ea <UART_SetConfig+0xb5a>
 800a9ca:	2b04      	cmp	r3, #4
 800a9cc:	f000 80ac 	beq.w	800ab28 <UART_SetConfig+0xc98>
 800a9d0:	f000 bc30 	b.w	800b234 <UART_SetConfig+0x13a4>
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	f000 832d 	beq.w	800b034 <UART_SetConfig+0x11a4>
 800a9da:	2b40      	cmp	r3, #64	; 0x40
 800a9dc:	f000 83a5 	beq.w	800b12a <UART_SetConfig+0x129a>
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	f000 81e3 	beq.w	800adac <UART_SetConfig+0xf1c>
 800a9e6:	f000 bc25 	b.w	800b234 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9ea:	f7fd fdb7 	bl	800855c <HAL_RCCEx_GetD3PCLK1Freq>
 800a9ee:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f04f 0100 	mov.w	r1, #0
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d067      	beq.n	800aad0 <UART_SetConfig+0xc40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d05e      	beq.n	800aac6 <UART_SetConfig+0xc36>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d055      	beq.n	800aabc <UART_SetConfig+0xc2c>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d04c      	beq.n	800aab2 <UART_SetConfig+0xc22>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d043      	beq.n	800aaa8 <UART_SetConfig+0xc18>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b05      	cmp	r3, #5
 800aa26:	d03a      	beq.n	800aa9e <UART_SetConfig+0xc0e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2b06      	cmp	r3, #6
 800aa2e:	d031      	beq.n	800aa94 <UART_SetConfig+0xc04>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b07      	cmp	r3, #7
 800aa36:	d028      	beq.n	800aa8a <UART_SetConfig+0xbfa>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d01f      	beq.n	800aa80 <UART_SetConfig+0xbf0>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d016      	beq.n	800aa76 <UART_SetConfig+0xbe6>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	2b0a      	cmp	r3, #10
 800aa4e:	d00d      	beq.n	800aa6c <UART_SetConfig+0xbdc>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	2b0b      	cmp	r3, #11
 800aa56:	d104      	bne.n	800aa62 <UART_SetConfig+0xbd2>
 800aa58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa5c:	f04f 0400 	mov.w	r4, #0
 800aa60:	e03a      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa62:	f04f 0301 	mov.w	r3, #1
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	e035      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa70:	f04f 0400 	mov.w	r4, #0
 800aa74:	e030      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa76:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa7a:	f04f 0400 	mov.w	r4, #0
 800aa7e:	e02b      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa80:	f04f 0320 	mov.w	r3, #32
 800aa84:	f04f 0400 	mov.w	r4, #0
 800aa88:	e026      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa8a:	f04f 0310 	mov.w	r3, #16
 800aa8e:	f04f 0400 	mov.w	r4, #0
 800aa92:	e021      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa94:	f04f 030c 	mov.w	r3, #12
 800aa98:	f04f 0400 	mov.w	r4, #0
 800aa9c:	e01c      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aa9e:	f04f 030a 	mov.w	r3, #10
 800aaa2:	f04f 0400 	mov.w	r4, #0
 800aaa6:	e017      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aaa8:	f04f 0308 	mov.w	r3, #8
 800aaac:	f04f 0400 	mov.w	r4, #0
 800aab0:	e012      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aab2:	f04f 0306 	mov.w	r3, #6
 800aab6:	f04f 0400 	mov.w	r4, #0
 800aaba:	e00d      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aabc:	f04f 0304 	mov.w	r3, #4
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	e008      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aac6:	f04f 0302 	mov.w	r3, #2
 800aaca:	f04f 0400 	mov.w	r4, #0
 800aace:	e003      	b.n	800aad8 <UART_SetConfig+0xc48>
 800aad0:	f04f 0301 	mov.w	r3, #1
 800aad4:	f04f 0400 	mov.w	r4, #0
 800aad8:	461a      	mov	r2, r3
 800aada:	4623      	mov	r3, r4
 800aadc:	f7f5 fbfc 	bl	80002d8 <__aeabi_uldivmod>
 800aae0:	4603      	mov	r3, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	4619      	mov	r1, r3
 800aae6:	4622      	mov	r2, r4
 800aae8:	f04f 0300 	mov.w	r3, #0
 800aaec:	f04f 0400 	mov.w	r4, #0
 800aaf0:	0214      	lsls	r4, r2, #8
 800aaf2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aaf6:	020b      	lsls	r3, r1, #8
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	6852      	ldr	r2, [r2, #4]
 800aafc:	0852      	lsrs	r2, r2, #1
 800aafe:	4611      	mov	r1, r2
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	eb13 0b01 	adds.w	fp, r3, r1
 800ab08:	eb44 0c02 	adc.w	ip, r4, r2
 800ab0c:	4658      	mov	r0, fp
 800ab0e:	4661      	mov	r1, ip
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f04f 0400 	mov.w	r4, #0
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4623      	mov	r3, r4
 800ab1c:	f7f5 fbdc 	bl	80002d8 <__aeabi_uldivmod>
 800ab20:	4603      	mov	r3, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ab26:	e389      	b.n	800b23c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab28:	f107 0318 	add.w	r3, r7, #24
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fd fd2b 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f04f 0100 	mov.w	r1, #0
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d067      	beq.n	800ac12 <UART_SetConfig+0xd82>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d05e      	beq.n	800ac08 <UART_SetConfig+0xd78>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d055      	beq.n	800abfe <UART_SetConfig+0xd6e>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d04c      	beq.n	800abf4 <UART_SetConfig+0xd64>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	d043      	beq.n	800abea <UART_SetConfig+0xd5a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d03a      	beq.n	800abe0 <UART_SetConfig+0xd50>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	2b06      	cmp	r3, #6
 800ab70:	d031      	beq.n	800abd6 <UART_SetConfig+0xd46>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	d028      	beq.n	800abcc <UART_SetConfig+0xd3c>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b08      	cmp	r3, #8
 800ab80:	d01f      	beq.n	800abc2 <UART_SetConfig+0xd32>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d016      	beq.n	800abb8 <UART_SetConfig+0xd28>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b0a      	cmp	r3, #10
 800ab90:	d00d      	beq.n	800abae <UART_SetConfig+0xd1e>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b0b      	cmp	r3, #11
 800ab98:	d104      	bne.n	800aba4 <UART_SetConfig+0xd14>
 800ab9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab9e:	f04f 0400 	mov.w	r4, #0
 800aba2:	e03a      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800aba4:	f04f 0301 	mov.w	r3, #1
 800aba8:	f04f 0400 	mov.w	r4, #0
 800abac:	e035      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abae:	f04f 0380 	mov.w	r3, #128	; 0x80
 800abb2:	f04f 0400 	mov.w	r4, #0
 800abb6:	e030      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abb8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800abbc:	f04f 0400 	mov.w	r4, #0
 800abc0:	e02b      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abc2:	f04f 0320 	mov.w	r3, #32
 800abc6:	f04f 0400 	mov.w	r4, #0
 800abca:	e026      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abcc:	f04f 0310 	mov.w	r3, #16
 800abd0:	f04f 0400 	mov.w	r4, #0
 800abd4:	e021      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abd6:	f04f 030c 	mov.w	r3, #12
 800abda:	f04f 0400 	mov.w	r4, #0
 800abde:	e01c      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abe0:	f04f 030a 	mov.w	r3, #10
 800abe4:	f04f 0400 	mov.w	r4, #0
 800abe8:	e017      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abea:	f04f 0308 	mov.w	r3, #8
 800abee:	f04f 0400 	mov.w	r4, #0
 800abf2:	e012      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abf4:	f04f 0306 	mov.w	r3, #6
 800abf8:	f04f 0400 	mov.w	r4, #0
 800abfc:	e00d      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800abfe:	f04f 0304 	mov.w	r3, #4
 800ac02:	f04f 0400 	mov.w	r4, #0
 800ac06:	e008      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800ac08:	f04f 0302 	mov.w	r3, #2
 800ac0c:	f04f 0400 	mov.w	r4, #0
 800ac10:	e003      	b.n	800ac1a <UART_SetConfig+0xd8a>
 800ac12:	f04f 0301 	mov.w	r3, #1
 800ac16:	f04f 0400 	mov.w	r4, #0
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	f7f5 fb5b 	bl	80002d8 <__aeabi_uldivmod>
 800ac22:	4603      	mov	r3, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	4619      	mov	r1, r3
 800ac28:	4622      	mov	r2, r4
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	f04f 0400 	mov.w	r4, #0
 800ac32:	0214      	lsls	r4, r2, #8
 800ac34:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac38:	020b      	lsls	r3, r1, #8
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6852      	ldr	r2, [r2, #4]
 800ac3e:	0852      	lsrs	r2, r2, #1
 800ac40:	4611      	mov	r1, r2
 800ac42:	f04f 0200 	mov.w	r2, #0
 800ac46:	eb13 0b01 	adds.w	fp, r3, r1
 800ac4a:	eb44 0c02 	adc.w	ip, r4, r2
 800ac4e:	4658      	mov	r0, fp
 800ac50:	4661      	mov	r1, ip
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f04f 0400 	mov.w	r4, #0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	f7f5 fb3b 	bl	80002d8 <__aeabi_uldivmod>
 800ac62:	4603      	mov	r3, r0
 800ac64:	460c      	mov	r4, r1
 800ac66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac68:	e2e8      	b.n	800b23c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac6a:	f107 030c 	add.w	r3, r7, #12
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd fdd6 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f04f 0100 	mov.w	r1, #0
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d067      	beq.n	800ad54 <UART_SetConfig+0xec4>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d05e      	beq.n	800ad4a <UART_SetConfig+0xeba>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d055      	beq.n	800ad40 <UART_SetConfig+0xeb0>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d04c      	beq.n	800ad36 <UART_SetConfig+0xea6>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d043      	beq.n	800ad2c <UART_SetConfig+0xe9c>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b05      	cmp	r3, #5
 800acaa:	d03a      	beq.n	800ad22 <UART_SetConfig+0xe92>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2b06      	cmp	r3, #6
 800acb2:	d031      	beq.n	800ad18 <UART_SetConfig+0xe88>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b07      	cmp	r3, #7
 800acba:	d028      	beq.n	800ad0e <UART_SetConfig+0xe7e>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d01f      	beq.n	800ad04 <UART_SetConfig+0xe74>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	2b09      	cmp	r3, #9
 800acca:	d016      	beq.n	800acfa <UART_SetConfig+0xe6a>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	2b0a      	cmp	r3, #10
 800acd2:	d00d      	beq.n	800acf0 <UART_SetConfig+0xe60>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	2b0b      	cmp	r3, #11
 800acda:	d104      	bne.n	800ace6 <UART_SetConfig+0xe56>
 800acdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ace0:	f04f 0400 	mov.w	r4, #0
 800ace4:	e03a      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ace6:	f04f 0301 	mov.w	r3, #1
 800acea:	f04f 0400 	mov.w	r4, #0
 800acee:	e035      	b.n	800ad5c <UART_SetConfig+0xecc>
 800acf0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800acf4:	f04f 0400 	mov.w	r4, #0
 800acf8:	e030      	b.n	800ad5c <UART_SetConfig+0xecc>
 800acfa:	f04f 0340 	mov.w	r3, #64	; 0x40
 800acfe:	f04f 0400 	mov.w	r4, #0
 800ad02:	e02b      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad04:	f04f 0320 	mov.w	r3, #32
 800ad08:	f04f 0400 	mov.w	r4, #0
 800ad0c:	e026      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad0e:	f04f 0310 	mov.w	r3, #16
 800ad12:	f04f 0400 	mov.w	r4, #0
 800ad16:	e021      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad18:	f04f 030c 	mov.w	r3, #12
 800ad1c:	f04f 0400 	mov.w	r4, #0
 800ad20:	e01c      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad22:	f04f 030a 	mov.w	r3, #10
 800ad26:	f04f 0400 	mov.w	r4, #0
 800ad2a:	e017      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad2c:	f04f 0308 	mov.w	r3, #8
 800ad30:	f04f 0400 	mov.w	r4, #0
 800ad34:	e012      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad36:	f04f 0306 	mov.w	r3, #6
 800ad3a:	f04f 0400 	mov.w	r4, #0
 800ad3e:	e00d      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad40:	f04f 0304 	mov.w	r3, #4
 800ad44:	f04f 0400 	mov.w	r4, #0
 800ad48:	e008      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad4a:	f04f 0302 	mov.w	r3, #2
 800ad4e:	f04f 0400 	mov.w	r4, #0
 800ad52:	e003      	b.n	800ad5c <UART_SetConfig+0xecc>
 800ad54:	f04f 0301 	mov.w	r3, #1
 800ad58:	f04f 0400 	mov.w	r4, #0
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4623      	mov	r3, r4
 800ad60:	f7f5 faba 	bl	80002d8 <__aeabi_uldivmod>
 800ad64:	4603      	mov	r3, r0
 800ad66:	460c      	mov	r4, r1
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	f04f 0300 	mov.w	r3, #0
 800ad70:	f04f 0400 	mov.w	r4, #0
 800ad74:	0214      	lsls	r4, r2, #8
 800ad76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad7a:	020b      	lsls	r3, r1, #8
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	6852      	ldr	r2, [r2, #4]
 800ad80:	0852      	lsrs	r2, r2, #1
 800ad82:	4611      	mov	r1, r2
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	eb13 0b01 	adds.w	fp, r3, r1
 800ad8c:	eb44 0c02 	adc.w	ip, r4, r2
 800ad90:	4658      	mov	r0, fp
 800ad92:	4661      	mov	r1, ip
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f04f 0400 	mov.w	r4, #0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4623      	mov	r3, r4
 800ada0:	f7f5 fa9a 	bl	80002d8 <__aeabi_uldivmod>
 800ada4:	4603      	mov	r3, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800adaa:	e247      	b.n	800b23c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adac:	4b96      	ldr	r3, [pc, #600]	; (800b008 <UART_SetConfig+0x1178>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80a3 	beq.w	800af00 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adba:	4b93      	ldr	r3, [pc, #588]	; (800b008 <UART_SetConfig+0x1178>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	08db      	lsrs	r3, r3, #3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	4a91      	ldr	r2, [pc, #580]	; (800b00c <UART_SetConfig+0x117c>)
 800adc6:	fa22 f303 	lsr.w	r3, r2, r3
 800adca:	4618      	mov	r0, r3
 800adcc:	f04f 0100 	mov.w	r1, #0
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d067      	beq.n	800aea8 <UART_SetConfig+0x1018>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b01      	cmp	r3, #1
 800adde:	d05e      	beq.n	800ae9e <UART_SetConfig+0x100e>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d055      	beq.n	800ae94 <UART_SetConfig+0x1004>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b03      	cmp	r3, #3
 800adee:	d04c      	beq.n	800ae8a <UART_SetConfig+0xffa>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d043      	beq.n	800ae80 <UART_SetConfig+0xff0>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	2b05      	cmp	r3, #5
 800adfe:	d03a      	beq.n	800ae76 <UART_SetConfig+0xfe6>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b06      	cmp	r3, #6
 800ae06:	d031      	beq.n	800ae6c <UART_SetConfig+0xfdc>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	2b07      	cmp	r3, #7
 800ae0e:	d028      	beq.n	800ae62 <UART_SetConfig+0xfd2>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d01f      	beq.n	800ae58 <UART_SetConfig+0xfc8>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d016      	beq.n	800ae4e <UART_SetConfig+0xfbe>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	2b0a      	cmp	r3, #10
 800ae26:	d00d      	beq.n	800ae44 <UART_SetConfig+0xfb4>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	2b0b      	cmp	r3, #11
 800ae2e:	d104      	bne.n	800ae3a <UART_SetConfig+0xfaa>
 800ae30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae34:	f04f 0400 	mov.w	r4, #0
 800ae38:	e03a      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae3a:	f04f 0301 	mov.w	r3, #1
 800ae3e:	f04f 0400 	mov.w	r4, #0
 800ae42:	e035      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae44:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ae48:	f04f 0400 	mov.w	r4, #0
 800ae4c:	e030      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ae52:	f04f 0400 	mov.w	r4, #0
 800ae56:	e02b      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae58:	f04f 0320 	mov.w	r3, #32
 800ae5c:	f04f 0400 	mov.w	r4, #0
 800ae60:	e026      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae62:	f04f 0310 	mov.w	r3, #16
 800ae66:	f04f 0400 	mov.w	r4, #0
 800ae6a:	e021      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae6c:	f04f 030c 	mov.w	r3, #12
 800ae70:	f04f 0400 	mov.w	r4, #0
 800ae74:	e01c      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae76:	f04f 030a 	mov.w	r3, #10
 800ae7a:	f04f 0400 	mov.w	r4, #0
 800ae7e:	e017      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae80:	f04f 0308 	mov.w	r3, #8
 800ae84:	f04f 0400 	mov.w	r4, #0
 800ae88:	e012      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae8a:	f04f 0306 	mov.w	r3, #6
 800ae8e:	f04f 0400 	mov.w	r4, #0
 800ae92:	e00d      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae94:	f04f 0304 	mov.w	r3, #4
 800ae98:	f04f 0400 	mov.w	r4, #0
 800ae9c:	e008      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800ae9e:	f04f 0302 	mov.w	r3, #2
 800aea2:	f04f 0400 	mov.w	r4, #0
 800aea6:	e003      	b.n	800aeb0 <UART_SetConfig+0x1020>
 800aea8:	f04f 0301 	mov.w	r3, #1
 800aeac:	f04f 0400 	mov.w	r4, #0
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	4623      	mov	r3, r4
 800aeb4:	f7f5 fa10 	bl	80002d8 <__aeabi_uldivmod>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	4619      	mov	r1, r3
 800aebe:	4622      	mov	r2, r4
 800aec0:	f04f 0300 	mov.w	r3, #0
 800aec4:	f04f 0400 	mov.w	r4, #0
 800aec8:	0214      	lsls	r4, r2, #8
 800aeca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aece:	020b      	lsls	r3, r1, #8
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6852      	ldr	r2, [r2, #4]
 800aed4:	0852      	lsrs	r2, r2, #1
 800aed6:	4611      	mov	r1, r2
 800aed8:	f04f 0200 	mov.w	r2, #0
 800aedc:	eb13 0b01 	adds.w	fp, r3, r1
 800aee0:	eb44 0c02 	adc.w	ip, r4, r2
 800aee4:	4658      	mov	r0, fp
 800aee6:	4661      	mov	r1, ip
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f04f 0400 	mov.w	r4, #0
 800aef0:	461a      	mov	r2, r3
 800aef2:	4623      	mov	r3, r4
 800aef4:	f7f5 f9f0 	bl	80002d8 <__aeabi_uldivmod>
 800aef8:	4603      	mov	r3, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800aefe:	e19d      	b.n	800b23c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	d05b      	beq.n	800afc0 <UART_SetConfig+0x1130>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d053      	beq.n	800afb8 <UART_SetConfig+0x1128>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b02      	cmp	r3, #2
 800af16:	d04b      	beq.n	800afb0 <UART_SetConfig+0x1120>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d043      	beq.n	800afa8 <UART_SetConfig+0x1118>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b04      	cmp	r3, #4
 800af26:	d03b      	beq.n	800afa0 <UART_SetConfig+0x1110>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b05      	cmp	r3, #5
 800af2e:	d033      	beq.n	800af98 <UART_SetConfig+0x1108>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b06      	cmp	r3, #6
 800af36:	d02b      	beq.n	800af90 <UART_SetConfig+0x1100>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b07      	cmp	r3, #7
 800af3e:	d023      	beq.n	800af88 <UART_SetConfig+0x10f8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b08      	cmp	r3, #8
 800af46:	d01b      	beq.n	800af80 <UART_SetConfig+0x10f0>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d013      	beq.n	800af78 <UART_SetConfig+0x10e8>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b0a      	cmp	r3, #10
 800af56:	d00b      	beq.n	800af70 <UART_SetConfig+0x10e0>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b0b      	cmp	r3, #11
 800af5e:	d103      	bne.n	800af68 <UART_SetConfig+0x10d8>
 800af60:	4b2a      	ldr	r3, [pc, #168]	; (800b00c <UART_SetConfig+0x117c>)
 800af62:	f04f 0400 	mov.w	r4, #0
 800af66:	e02e      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af68:	4b29      	ldr	r3, [pc, #164]	; (800b010 <UART_SetConfig+0x1180>)
 800af6a:	f04f 0403 	mov.w	r4, #3
 800af6e:	e02a      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af70:	4b28      	ldr	r3, [pc, #160]	; (800b014 <UART_SetConfig+0x1184>)
 800af72:	f04f 0400 	mov.w	r4, #0
 800af76:	e026      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af78:	4b27      	ldr	r3, [pc, #156]	; (800b018 <UART_SetConfig+0x1188>)
 800af7a:	f04f 0400 	mov.w	r4, #0
 800af7e:	e022      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af80:	4b26      	ldr	r3, [pc, #152]	; (800b01c <UART_SetConfig+0x118c>)
 800af82:	f04f 0400 	mov.w	r4, #0
 800af86:	e01e      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af88:	4b25      	ldr	r3, [pc, #148]	; (800b020 <UART_SetConfig+0x1190>)
 800af8a:	f04f 0400 	mov.w	r4, #0
 800af8e:	e01a      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af90:	a419      	add	r4, pc, #100	; (adr r4, 800aff8 <UART_SetConfig+0x1168>)
 800af92:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af96:	e016      	b.n	800afc6 <UART_SetConfig+0x1136>
 800af98:	4b22      	ldr	r3, [pc, #136]	; (800b024 <UART_SetConfig+0x1194>)
 800af9a:	f04f 0400 	mov.w	r4, #0
 800af9e:	e012      	b.n	800afc6 <UART_SetConfig+0x1136>
 800afa0:	4b21      	ldr	r3, [pc, #132]	; (800b028 <UART_SetConfig+0x1198>)
 800afa2:	f04f 0400 	mov.w	r4, #0
 800afa6:	e00e      	b.n	800afc6 <UART_SetConfig+0x1136>
 800afa8:	a415      	add	r4, pc, #84	; (adr r4, 800b000 <UART_SetConfig+0x1170>)
 800afaa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800afae:	e00a      	b.n	800afc6 <UART_SetConfig+0x1136>
 800afb0:	4b1e      	ldr	r3, [pc, #120]	; (800b02c <UART_SetConfig+0x119c>)
 800afb2:	f04f 0400 	mov.w	r4, #0
 800afb6:	e006      	b.n	800afc6 <UART_SetConfig+0x1136>
 800afb8:	4b1d      	ldr	r3, [pc, #116]	; (800b030 <UART_SetConfig+0x11a0>)
 800afba:	f04f 0401 	mov.w	r4, #1
 800afbe:	e002      	b.n	800afc6 <UART_SetConfig+0x1136>
 800afc0:	4b13      	ldr	r3, [pc, #76]	; (800b010 <UART_SetConfig+0x1180>)
 800afc2:	f04f 0403 	mov.w	r4, #3
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6852      	ldr	r2, [r2, #4]
 800afca:	0852      	lsrs	r2, r2, #1
 800afcc:	4611      	mov	r1, r2
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	eb13 0b01 	adds.w	fp, r3, r1
 800afd6:	eb44 0c02 	adc.w	ip, r4, r2
 800afda:	4658      	mov	r0, fp
 800afdc:	4661      	mov	r1, ip
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f04f 0400 	mov.w	r4, #0
 800afe6:	461a      	mov	r2, r3
 800afe8:	4623      	mov	r3, r4
 800afea:	f7f5 f975 	bl	80002d8 <__aeabi_uldivmod>
 800afee:	4603      	mov	r3, r0
 800aff0:	460c      	mov	r4, r1
 800aff2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aff4:	e122      	b.n	800b23c <UART_SetConfig+0x13ac>
 800aff6:	bf00      	nop
 800aff8:	51615500 	.word	0x51615500
 800affc:	00000000 	.word	0x00000000
 800b000:	a2c2aa00 	.word	0xa2c2aa00
 800b004:	00000000 	.word	0x00000000
 800b008:	58024400 	.word	0x58024400
 800b00c:	03d09000 	.word	0x03d09000
 800b010:	d0900000 	.word	0xd0900000
 800b014:	07a12000 	.word	0x07a12000
 800b018:	0f424000 	.word	0x0f424000
 800b01c:	1e848000 	.word	0x1e848000
 800b020:	3d090000 	.word	0x3d090000
 800b024:	61a80000 	.word	0x61a80000
 800b028:	7a120000 	.word	0x7a120000
 800b02c:	f4240000 	.word	0xf4240000
 800b030:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d05b      	beq.n	800b0f4 <UART_SetConfig+0x1264>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b01      	cmp	r3, #1
 800b042:	d053      	beq.n	800b0ec <UART_SetConfig+0x125c>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d04b      	beq.n	800b0e4 <UART_SetConfig+0x1254>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b050:	2b03      	cmp	r3, #3
 800b052:	d043      	beq.n	800b0dc <UART_SetConfig+0x124c>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d03b      	beq.n	800b0d4 <UART_SetConfig+0x1244>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b060:	2b05      	cmp	r3, #5
 800b062:	d033      	beq.n	800b0cc <UART_SetConfig+0x123c>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b068:	2b06      	cmp	r3, #6
 800b06a:	d02b      	beq.n	800b0c4 <UART_SetConfig+0x1234>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	2b07      	cmp	r3, #7
 800b072:	d023      	beq.n	800b0bc <UART_SetConfig+0x122c>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d01b      	beq.n	800b0b4 <UART_SetConfig+0x1224>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	2b09      	cmp	r3, #9
 800b082:	d013      	beq.n	800b0ac <UART_SetConfig+0x121c>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	2b0a      	cmp	r3, #10
 800b08a:	d00b      	beq.n	800b0a4 <UART_SetConfig+0x1214>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	2b0b      	cmp	r3, #11
 800b092:	d103      	bne.n	800b09c <UART_SetConfig+0x120c>
 800b094:	4bc0      	ldr	r3, [pc, #768]	; (800b398 <UART_SetConfig+0x1508>)
 800b096:	f04f 0400 	mov.w	r4, #0
 800b09a:	e02e      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b09c:	4bbf      	ldr	r3, [pc, #764]	; (800b39c <UART_SetConfig+0x150c>)
 800b09e:	f04f 0400 	mov.w	r4, #0
 800b0a2:	e02a      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0a4:	4bbe      	ldr	r3, [pc, #760]	; (800b3a0 <UART_SetConfig+0x1510>)
 800b0a6:	f04f 0400 	mov.w	r4, #0
 800b0aa:	e026      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0ac:	4bbd      	ldr	r3, [pc, #756]	; (800b3a4 <UART_SetConfig+0x1514>)
 800b0ae:	f04f 0400 	mov.w	r4, #0
 800b0b2:	e022      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0b4:	4bbc      	ldr	r3, [pc, #752]	; (800b3a8 <UART_SetConfig+0x1518>)
 800b0b6:	f04f 0400 	mov.w	r4, #0
 800b0ba:	e01e      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0bc:	4bbb      	ldr	r3, [pc, #748]	; (800b3ac <UART_SetConfig+0x151c>)
 800b0be:	f04f 0400 	mov.w	r4, #0
 800b0c2:	e01a      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0c4:	a4b0      	add	r4, pc, #704	; (adr r4, 800b388 <UART_SetConfig+0x14f8>)
 800b0c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b0ca:	e016      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0cc:	4bb8      	ldr	r3, [pc, #736]	; (800b3b0 <UART_SetConfig+0x1520>)
 800b0ce:	f04f 0400 	mov.w	r4, #0
 800b0d2:	e012      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0d4:	4bb7      	ldr	r3, [pc, #732]	; (800b3b4 <UART_SetConfig+0x1524>)
 800b0d6:	f04f 0400 	mov.w	r4, #0
 800b0da:	e00e      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0dc:	a4ac      	add	r4, pc, #688	; (adr r4, 800b390 <UART_SetConfig+0x1500>)
 800b0de:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b0e2:	e00a      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0e4:	4bb4      	ldr	r3, [pc, #720]	; (800b3b8 <UART_SetConfig+0x1528>)
 800b0e6:	f04f 0400 	mov.w	r4, #0
 800b0ea:	e006      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0ec:	4bb3      	ldr	r3, [pc, #716]	; (800b3bc <UART_SetConfig+0x152c>)
 800b0ee:	f04f 0400 	mov.w	r4, #0
 800b0f2:	e002      	b.n	800b0fa <UART_SetConfig+0x126a>
 800b0f4:	4ba9      	ldr	r3, [pc, #676]	; (800b39c <UART_SetConfig+0x150c>)
 800b0f6:	f04f 0400 	mov.w	r4, #0
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6852      	ldr	r2, [r2, #4]
 800b0fe:	0852      	lsrs	r2, r2, #1
 800b100:	4611      	mov	r1, r2
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	eb13 0b01 	adds.w	fp, r3, r1
 800b10a:	eb44 0c02 	adc.w	ip, r4, r2
 800b10e:	4658      	mov	r0, fp
 800b110:	4661      	mov	r1, ip
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f04f 0400 	mov.w	r4, #0
 800b11a:	461a      	mov	r2, r3
 800b11c:	4623      	mov	r3, r4
 800b11e:	f7f5 f8db 	bl	80002d8 <__aeabi_uldivmod>
 800b122:	4603      	mov	r3, r0
 800b124:	460c      	mov	r4, r1
 800b126:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b128:	e088      	b.n	800b23c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d064      	beq.n	800b1fc <UART_SetConfig+0x136c>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b01      	cmp	r3, #1
 800b138:	d05b      	beq.n	800b1f2 <UART_SetConfig+0x1362>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d052      	beq.n	800b1e8 <UART_SetConfig+0x1358>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2b03      	cmp	r3, #3
 800b148:	d04a      	beq.n	800b1e0 <UART_SetConfig+0x1350>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d041      	beq.n	800b1d6 <UART_SetConfig+0x1346>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b156:	2b05      	cmp	r3, #5
 800b158:	d039      	beq.n	800b1ce <UART_SetConfig+0x133e>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	2b06      	cmp	r3, #6
 800b160:	d031      	beq.n	800b1c6 <UART_SetConfig+0x1336>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b07      	cmp	r3, #7
 800b168:	d028      	beq.n	800b1bc <UART_SetConfig+0x132c>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d01f      	beq.n	800b1b2 <UART_SetConfig+0x1322>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	2b09      	cmp	r3, #9
 800b178:	d016      	beq.n	800b1a8 <UART_SetConfig+0x1318>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	2b0a      	cmp	r3, #10
 800b180:	d00d      	beq.n	800b19e <UART_SetConfig+0x130e>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	2b0b      	cmp	r3, #11
 800b188:	d104      	bne.n	800b194 <UART_SetConfig+0x1304>
 800b18a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b18e:	f04f 0400 	mov.w	r4, #0
 800b192:	e037      	b.n	800b204 <UART_SetConfig+0x1374>
 800b194:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b198:	f04f 0400 	mov.w	r4, #0
 800b19c:	e032      	b.n	800b204 <UART_SetConfig+0x1374>
 800b19e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b1a2:	f04f 0400 	mov.w	r4, #0
 800b1a6:	e02d      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1ac:	f04f 0400 	mov.w	r4, #0
 800b1b0:	e028      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1b6:	f04f 0400 	mov.w	r4, #0
 800b1ba:	e023      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1c0:	f04f 0400 	mov.w	r4, #0
 800b1c4:	e01e      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1c6:	4b7e      	ldr	r3, [pc, #504]	; (800b3c0 <UART_SetConfig+0x1530>)
 800b1c8:	f04f 0400 	mov.w	r4, #0
 800b1cc:	e01a      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1ce:	4b7d      	ldr	r3, [pc, #500]	; (800b3c4 <UART_SetConfig+0x1534>)
 800b1d0:	f04f 0400 	mov.w	r4, #0
 800b1d4:	e016      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1da:	f04f 0400 	mov.w	r4, #0
 800b1de:	e011      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1e0:	4b79      	ldr	r3, [pc, #484]	; (800b3c8 <UART_SetConfig+0x1538>)
 800b1e2:	f04f 0400 	mov.w	r4, #0
 800b1e6:	e00d      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1ec:	f04f 0400 	mov.w	r4, #0
 800b1f0:	e008      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b1f6:	f04f 0400 	mov.w	r4, #0
 800b1fa:	e003      	b.n	800b204 <UART_SetConfig+0x1374>
 800b1fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b200:	f04f 0400 	mov.w	r4, #0
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	6852      	ldr	r2, [r2, #4]
 800b208:	0852      	lsrs	r2, r2, #1
 800b20a:	4611      	mov	r1, r2
 800b20c:	f04f 0200 	mov.w	r2, #0
 800b210:	eb13 0b01 	adds.w	fp, r3, r1
 800b214:	eb44 0c02 	adc.w	ip, r4, r2
 800b218:	4658      	mov	r0, fp
 800b21a:	4661      	mov	r1, ip
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f04f 0400 	mov.w	r4, #0
 800b224:	461a      	mov	r2, r3
 800b226:	4623      	mov	r3, r4
 800b228:	f7f5 f856 	bl	80002d8 <__aeabi_uldivmod>
 800b22c:	4603      	mov	r3, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b232:	e003      	b.n	800b23c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b23a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b242:	d309      	bcc.n	800b258 <UART_SetConfig+0x13c8>
 800b244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b24a:	d205      	bcs.n	800b258 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b252:	60da      	str	r2, [r3, #12]
 800b254:	f000 bf85 	b.w	800c162 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	f000 bf80 	b.w	800c162 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b26a:	f040 83da 	bne.w	800ba22 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b26e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b272:	2b40      	cmp	r3, #64	; 0x40
 800b274:	f200 83b3 	bhi.w	800b9de <UART_SetConfig+0x1b4e>
 800b278:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <UART_SetConfig+0x13f0>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b3cd 	.word	0x0800b3cd
 800b284:	0800b485 	.word	0x0800b485
 800b288:	0800b9df 	.word	0x0800b9df
 800b28c:	0800b9df 	.word	0x0800b9df
 800b290:	0800b53d 	.word	0x0800b53d
 800b294:	0800b9df 	.word	0x0800b9df
 800b298:	0800b9df 	.word	0x0800b9df
 800b29c:	0800b9df 	.word	0x0800b9df
 800b2a0:	0800b5f9 	.word	0x0800b5f9
 800b2a4:	0800b9df 	.word	0x0800b9df
 800b2a8:	0800b9df 	.word	0x0800b9df
 800b2ac:	0800b9df 	.word	0x0800b9df
 800b2b0:	0800b9df 	.word	0x0800b9df
 800b2b4:	0800b9df 	.word	0x0800b9df
 800b2b8:	0800b9df 	.word	0x0800b9df
 800b2bc:	0800b9df 	.word	0x0800b9df
 800b2c0:	0800b6b5 	.word	0x0800b6b5
 800b2c4:	0800b9df 	.word	0x0800b9df
 800b2c8:	0800b9df 	.word	0x0800b9df
 800b2cc:	0800b9df 	.word	0x0800b9df
 800b2d0:	0800b9df 	.word	0x0800b9df
 800b2d4:	0800b9df 	.word	0x0800b9df
 800b2d8:	0800b9df 	.word	0x0800b9df
 800b2dc:	0800b9df 	.word	0x0800b9df
 800b2e0:	0800b9df 	.word	0x0800b9df
 800b2e4:	0800b9df 	.word	0x0800b9df
 800b2e8:	0800b9df 	.word	0x0800b9df
 800b2ec:	0800b9df 	.word	0x0800b9df
 800b2f0:	0800b9df 	.word	0x0800b9df
 800b2f4:	0800b9df 	.word	0x0800b9df
 800b2f8:	0800b9df 	.word	0x0800b9df
 800b2fc:	0800b9df 	.word	0x0800b9df
 800b300:	0800b827 	.word	0x0800b827
 800b304:	0800b9df 	.word	0x0800b9df
 800b308:	0800b9df 	.word	0x0800b9df
 800b30c:	0800b9df 	.word	0x0800b9df
 800b310:	0800b9df 	.word	0x0800b9df
 800b314:	0800b9df 	.word	0x0800b9df
 800b318:	0800b9df 	.word	0x0800b9df
 800b31c:	0800b9df 	.word	0x0800b9df
 800b320:	0800b9df 	.word	0x0800b9df
 800b324:	0800b9df 	.word	0x0800b9df
 800b328:	0800b9df 	.word	0x0800b9df
 800b32c:	0800b9df 	.word	0x0800b9df
 800b330:	0800b9df 	.word	0x0800b9df
 800b334:	0800b9df 	.word	0x0800b9df
 800b338:	0800b9df 	.word	0x0800b9df
 800b33c:	0800b9df 	.word	0x0800b9df
 800b340:	0800b9df 	.word	0x0800b9df
 800b344:	0800b9df 	.word	0x0800b9df
 800b348:	0800b9df 	.word	0x0800b9df
 800b34c:	0800b9df 	.word	0x0800b9df
 800b350:	0800b9df 	.word	0x0800b9df
 800b354:	0800b9df 	.word	0x0800b9df
 800b358:	0800b9df 	.word	0x0800b9df
 800b35c:	0800b9df 	.word	0x0800b9df
 800b360:	0800b9df 	.word	0x0800b9df
 800b364:	0800b9df 	.word	0x0800b9df
 800b368:	0800b9df 	.word	0x0800b9df
 800b36c:	0800b9df 	.word	0x0800b9df
 800b370:	0800b9df 	.word	0x0800b9df
 800b374:	0800b9df 	.word	0x0800b9df
 800b378:	0800b9df 	.word	0x0800b9df
 800b37c:	0800b9df 	.word	0x0800b9df
 800b380:	0800b91d 	.word	0x0800b91d
 800b384:	f3af 8000 	nop.w
 800b388:	05161500 	.word	0x05161500
 800b38c:	00000000 	.word	0x00000000
 800b390:	0a2c2a00 	.word	0x0a2c2a00
 800b394:	00000000 	.word	0x00000000
 800b398:	003d0900 	.word	0x003d0900
 800b39c:	3d090000 	.word	0x3d090000
 800b3a0:	007a1200 	.word	0x007a1200
 800b3a4:	00f42400 	.word	0x00f42400
 800b3a8:	01e84800 	.word	0x01e84800
 800b3ac:	03d09000 	.word	0x03d09000
 800b3b0:	061a8000 	.word	0x061a8000
 800b3b4:	07a12000 	.word	0x07a12000
 800b3b8:	0f424000 	.word	0x0f424000
 800b3bc:	1e848000 	.word	0x1e848000
 800b3c0:	000aaa00 	.word	0x000aaa00
 800b3c4:	000ccc00 	.word	0x000ccc00
 800b3c8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3cc:	f7fb ff44 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 800b3d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d044      	beq.n	800b464 <UART_SetConfig+0x15d4>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d03e      	beq.n	800b460 <UART_SetConfig+0x15d0>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d038      	beq.n	800b45c <UART_SetConfig+0x15cc>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d032      	beq.n	800b458 <UART_SetConfig+0x15c8>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f6:	2b04      	cmp	r3, #4
 800b3f8:	d02c      	beq.n	800b454 <UART_SetConfig+0x15c4>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fe:	2b05      	cmp	r3, #5
 800b400:	d026      	beq.n	800b450 <UART_SetConfig+0x15c0>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	2b06      	cmp	r3, #6
 800b408:	d020      	beq.n	800b44c <UART_SetConfig+0x15bc>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	2b07      	cmp	r3, #7
 800b410:	d01a      	beq.n	800b448 <UART_SetConfig+0x15b8>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	2b08      	cmp	r3, #8
 800b418:	d014      	beq.n	800b444 <UART_SetConfig+0x15b4>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	2b09      	cmp	r3, #9
 800b420:	d00e      	beq.n	800b440 <UART_SetConfig+0x15b0>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	2b0a      	cmp	r3, #10
 800b428:	d008      	beq.n	800b43c <UART_SetConfig+0x15ac>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	2b0b      	cmp	r3, #11
 800b430:	d102      	bne.n	800b438 <UART_SetConfig+0x15a8>
 800b432:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b436:	e016      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b438:	2301      	movs	r3, #1
 800b43a:	e014      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b43c:	2380      	movs	r3, #128	; 0x80
 800b43e:	e012      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b440:	2340      	movs	r3, #64	; 0x40
 800b442:	e010      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b444:	2320      	movs	r3, #32
 800b446:	e00e      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b448:	2310      	movs	r3, #16
 800b44a:	e00c      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b44c:	230c      	movs	r3, #12
 800b44e:	e00a      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b450:	230a      	movs	r3, #10
 800b452:	e008      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b454:	2308      	movs	r3, #8
 800b456:	e006      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b458:	2306      	movs	r3, #6
 800b45a:	e004      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b45c:	2304      	movs	r3, #4
 800b45e:	e002      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b460:	2302      	movs	r3, #2
 800b462:	e000      	b.n	800b466 <UART_SetConfig+0x15d6>
 800b464:	2301      	movs	r3, #1
 800b466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b468:	fbb2 f3f3 	udiv	r3, r2, r3
 800b46c:	005a      	lsls	r2, r3, #1
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	085b      	lsrs	r3, r3, #1
 800b474:	441a      	add	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47e:	b29b      	uxth	r3, r3
 800b480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b482:	e2b0      	b.n	800b9e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b484:	f7fb fefe 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 800b488:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d044      	beq.n	800b51c <UART_SetConfig+0x168c>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b01      	cmp	r3, #1
 800b498:	d03e      	beq.n	800b518 <UART_SetConfig+0x1688>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d038      	beq.n	800b514 <UART_SetConfig+0x1684>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d032      	beq.n	800b510 <UART_SetConfig+0x1680>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d02c      	beq.n	800b50c <UART_SetConfig+0x167c>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d026      	beq.n	800b508 <UART_SetConfig+0x1678>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b06      	cmp	r3, #6
 800b4c0:	d020      	beq.n	800b504 <UART_SetConfig+0x1674>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b07      	cmp	r3, #7
 800b4c8:	d01a      	beq.n	800b500 <UART_SetConfig+0x1670>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b08      	cmp	r3, #8
 800b4d0:	d014      	beq.n	800b4fc <UART_SetConfig+0x166c>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	2b09      	cmp	r3, #9
 800b4d8:	d00e      	beq.n	800b4f8 <UART_SetConfig+0x1668>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	2b0a      	cmp	r3, #10
 800b4e0:	d008      	beq.n	800b4f4 <UART_SetConfig+0x1664>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	2b0b      	cmp	r3, #11
 800b4e8:	d102      	bne.n	800b4f0 <UART_SetConfig+0x1660>
 800b4ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4ee:	e016      	b.n	800b51e <UART_SetConfig+0x168e>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e014      	b.n	800b51e <UART_SetConfig+0x168e>
 800b4f4:	2380      	movs	r3, #128	; 0x80
 800b4f6:	e012      	b.n	800b51e <UART_SetConfig+0x168e>
 800b4f8:	2340      	movs	r3, #64	; 0x40
 800b4fa:	e010      	b.n	800b51e <UART_SetConfig+0x168e>
 800b4fc:	2320      	movs	r3, #32
 800b4fe:	e00e      	b.n	800b51e <UART_SetConfig+0x168e>
 800b500:	2310      	movs	r3, #16
 800b502:	e00c      	b.n	800b51e <UART_SetConfig+0x168e>
 800b504:	230c      	movs	r3, #12
 800b506:	e00a      	b.n	800b51e <UART_SetConfig+0x168e>
 800b508:	230a      	movs	r3, #10
 800b50a:	e008      	b.n	800b51e <UART_SetConfig+0x168e>
 800b50c:	2308      	movs	r3, #8
 800b50e:	e006      	b.n	800b51e <UART_SetConfig+0x168e>
 800b510:	2306      	movs	r3, #6
 800b512:	e004      	b.n	800b51e <UART_SetConfig+0x168e>
 800b514:	2304      	movs	r3, #4
 800b516:	e002      	b.n	800b51e <UART_SetConfig+0x168e>
 800b518:	2302      	movs	r3, #2
 800b51a:	e000      	b.n	800b51e <UART_SetConfig+0x168e>
 800b51c:	2301      	movs	r3, #1
 800b51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b520:	fbb2 f3f3 	udiv	r3, r2, r3
 800b524:	005a      	lsls	r2, r3, #1
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	085b      	lsrs	r3, r3, #1
 800b52c:	441a      	add	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	fbb2 f3f3 	udiv	r3, r2, r3
 800b536:	b29b      	uxth	r3, r3
 800b538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b53a:	e254      	b.n	800b9e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b53c:	f107 0318 	add.w	r3, r7, #24
 800b540:	4618      	mov	r0, r3
 800b542:	f7fd f821 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b546:	69fa      	ldr	r2, [r7, #28]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d044      	beq.n	800b5da <UART_SetConfig+0x174a>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	2b01      	cmp	r3, #1
 800b556:	d03e      	beq.n	800b5d6 <UART_SetConfig+0x1746>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d038      	beq.n	800b5d2 <UART_SetConfig+0x1742>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b564:	2b03      	cmp	r3, #3
 800b566:	d032      	beq.n	800b5ce <UART_SetConfig+0x173e>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	2b04      	cmp	r3, #4
 800b56e:	d02c      	beq.n	800b5ca <UART_SetConfig+0x173a>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	2b05      	cmp	r3, #5
 800b576:	d026      	beq.n	800b5c6 <UART_SetConfig+0x1736>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	2b06      	cmp	r3, #6
 800b57e:	d020      	beq.n	800b5c2 <UART_SetConfig+0x1732>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	2b07      	cmp	r3, #7
 800b586:	d01a      	beq.n	800b5be <UART_SetConfig+0x172e>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	2b08      	cmp	r3, #8
 800b58e:	d014      	beq.n	800b5ba <UART_SetConfig+0x172a>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	2b09      	cmp	r3, #9
 800b596:	d00e      	beq.n	800b5b6 <UART_SetConfig+0x1726>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	2b0a      	cmp	r3, #10
 800b59e:	d008      	beq.n	800b5b2 <UART_SetConfig+0x1722>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	2b0b      	cmp	r3, #11
 800b5a6:	d102      	bne.n	800b5ae <UART_SetConfig+0x171e>
 800b5a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ac:	e016      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e014      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5b2:	2380      	movs	r3, #128	; 0x80
 800b5b4:	e012      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	e010      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5ba:	2320      	movs	r3, #32
 800b5bc:	e00e      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5be:	2310      	movs	r3, #16
 800b5c0:	e00c      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	e00a      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5c6:	230a      	movs	r3, #10
 800b5c8:	e008      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	e006      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5ce:	2306      	movs	r3, #6
 800b5d0:	e004      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	e002      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	e000      	b.n	800b5dc <UART_SetConfig+0x174c>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e0:	005a      	lsls	r2, r3, #1
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	085b      	lsrs	r3, r3, #1
 800b5e8:	441a      	add	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5f6:	e1f6      	b.n	800b9e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5f8:	f107 030c 	add.w	r3, r7, #12
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fd f90f 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d044      	beq.n	800b696 <UART_SetConfig+0x1806>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	2b01      	cmp	r3, #1
 800b612:	d03e      	beq.n	800b692 <UART_SetConfig+0x1802>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d038      	beq.n	800b68e <UART_SetConfig+0x17fe>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b620:	2b03      	cmp	r3, #3
 800b622:	d032      	beq.n	800b68a <UART_SetConfig+0x17fa>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d02c      	beq.n	800b686 <UART_SetConfig+0x17f6>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	2b05      	cmp	r3, #5
 800b632:	d026      	beq.n	800b682 <UART_SetConfig+0x17f2>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	2b06      	cmp	r3, #6
 800b63a:	d020      	beq.n	800b67e <UART_SetConfig+0x17ee>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	2b07      	cmp	r3, #7
 800b642:	d01a      	beq.n	800b67a <UART_SetConfig+0x17ea>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d014      	beq.n	800b676 <UART_SetConfig+0x17e6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b650:	2b09      	cmp	r3, #9
 800b652:	d00e      	beq.n	800b672 <UART_SetConfig+0x17e2>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	2b0a      	cmp	r3, #10
 800b65a:	d008      	beq.n	800b66e <UART_SetConfig+0x17de>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	2b0b      	cmp	r3, #11
 800b662:	d102      	bne.n	800b66a <UART_SetConfig+0x17da>
 800b664:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b668:	e016      	b.n	800b698 <UART_SetConfig+0x1808>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e014      	b.n	800b698 <UART_SetConfig+0x1808>
 800b66e:	2380      	movs	r3, #128	; 0x80
 800b670:	e012      	b.n	800b698 <UART_SetConfig+0x1808>
 800b672:	2340      	movs	r3, #64	; 0x40
 800b674:	e010      	b.n	800b698 <UART_SetConfig+0x1808>
 800b676:	2320      	movs	r3, #32
 800b678:	e00e      	b.n	800b698 <UART_SetConfig+0x1808>
 800b67a:	2310      	movs	r3, #16
 800b67c:	e00c      	b.n	800b698 <UART_SetConfig+0x1808>
 800b67e:	230c      	movs	r3, #12
 800b680:	e00a      	b.n	800b698 <UART_SetConfig+0x1808>
 800b682:	230a      	movs	r3, #10
 800b684:	e008      	b.n	800b698 <UART_SetConfig+0x1808>
 800b686:	2308      	movs	r3, #8
 800b688:	e006      	b.n	800b698 <UART_SetConfig+0x1808>
 800b68a:	2306      	movs	r3, #6
 800b68c:	e004      	b.n	800b698 <UART_SetConfig+0x1808>
 800b68e:	2304      	movs	r3, #4
 800b690:	e002      	b.n	800b698 <UART_SetConfig+0x1808>
 800b692:	2302      	movs	r3, #2
 800b694:	e000      	b.n	800b698 <UART_SetConfig+0x1808>
 800b696:	2301      	movs	r3, #1
 800b698:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69c:	005a      	lsls	r2, r3, #1
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	085b      	lsrs	r3, r3, #1
 800b6a4:	441a      	add	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6b2:	e198      	b.n	800b9e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6b4:	4b87      	ldr	r3, [pc, #540]	; (800b8d4 <UART_SetConfig+0x1a44>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0320 	and.w	r3, r3, #32
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d05e      	beq.n	800b77e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6c0:	4b84      	ldr	r3, [pc, #528]	; (800b8d4 <UART_SetConfig+0x1a44>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	08db      	lsrs	r3, r3, #3
 800b6c6:	f003 0303 	and.w	r3, r3, #3
 800b6ca:	4a83      	ldr	r2, [pc, #524]	; (800b8d8 <UART_SetConfig+0x1a48>)
 800b6cc:	40da      	lsrs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d044      	beq.n	800b760 <UART_SetConfig+0x18d0>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d03e      	beq.n	800b75c <UART_SetConfig+0x18cc>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d038      	beq.n	800b758 <UART_SetConfig+0x18c8>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d032      	beq.n	800b754 <UART_SetConfig+0x18c4>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d02c      	beq.n	800b750 <UART_SetConfig+0x18c0>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d026      	beq.n	800b74c <UART_SetConfig+0x18bc>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b702:	2b06      	cmp	r3, #6
 800b704:	d020      	beq.n	800b748 <UART_SetConfig+0x18b8>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	2b07      	cmp	r3, #7
 800b70c:	d01a      	beq.n	800b744 <UART_SetConfig+0x18b4>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	2b08      	cmp	r3, #8
 800b714:	d014      	beq.n	800b740 <UART_SetConfig+0x18b0>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	d00e      	beq.n	800b73c <UART_SetConfig+0x18ac>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	2b0a      	cmp	r3, #10
 800b724:	d008      	beq.n	800b738 <UART_SetConfig+0x18a8>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	2b0b      	cmp	r3, #11
 800b72c:	d102      	bne.n	800b734 <UART_SetConfig+0x18a4>
 800b72e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b732:	e016      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b734:	2301      	movs	r3, #1
 800b736:	e014      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b738:	2380      	movs	r3, #128	; 0x80
 800b73a:	e012      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b73c:	2340      	movs	r3, #64	; 0x40
 800b73e:	e010      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b740:	2320      	movs	r3, #32
 800b742:	e00e      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b744:	2310      	movs	r3, #16
 800b746:	e00c      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b748:	230c      	movs	r3, #12
 800b74a:	e00a      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b74c:	230a      	movs	r3, #10
 800b74e:	e008      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b750:	2308      	movs	r3, #8
 800b752:	e006      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b754:	2306      	movs	r3, #6
 800b756:	e004      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b758:	2304      	movs	r3, #4
 800b75a:	e002      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e000      	b.n	800b762 <UART_SetConfig+0x18d2>
 800b760:	2301      	movs	r3, #1
 800b762:	fbb2 f3f3 	udiv	r3, r2, r3
 800b766:	005a      	lsls	r2, r3, #1
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	085b      	lsrs	r3, r3, #1
 800b76e:	441a      	add	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	fbb2 f3f3 	udiv	r3, r2, r3
 800b778:	b29b      	uxth	r3, r3
 800b77a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b77c:	e133      	b.n	800b9e6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d043      	beq.n	800b80e <UART_SetConfig+0x197e>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d03d      	beq.n	800b80a <UART_SetConfig+0x197a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	2b02      	cmp	r3, #2
 800b794:	d037      	beq.n	800b806 <UART_SetConfig+0x1976>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d031      	beq.n	800b802 <UART_SetConfig+0x1972>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d02b      	beq.n	800b7fe <UART_SetConfig+0x196e>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	d025      	beq.n	800b7fa <UART_SetConfig+0x196a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2b06      	cmp	r3, #6
 800b7b4:	d01f      	beq.n	800b7f6 <UART_SetConfig+0x1966>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	2b07      	cmp	r3, #7
 800b7bc:	d019      	beq.n	800b7f2 <UART_SetConfig+0x1962>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	2b08      	cmp	r3, #8
 800b7c4:	d013      	beq.n	800b7ee <UART_SetConfig+0x195e>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	2b09      	cmp	r3, #9
 800b7cc:	d00d      	beq.n	800b7ea <UART_SetConfig+0x195a>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	2b0a      	cmp	r3, #10
 800b7d4:	d007      	beq.n	800b7e6 <UART_SetConfig+0x1956>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	2b0b      	cmp	r3, #11
 800b7dc:	d101      	bne.n	800b7e2 <UART_SetConfig+0x1952>
 800b7de:	4b3f      	ldr	r3, [pc, #252]	; (800b8dc <UART_SetConfig+0x1a4c>)
 800b7e0:	e016      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7e2:	4b3f      	ldr	r3, [pc, #252]	; (800b8e0 <UART_SetConfig+0x1a50>)
 800b7e4:	e014      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7e6:	4b3f      	ldr	r3, [pc, #252]	; (800b8e4 <UART_SetConfig+0x1a54>)
 800b7e8:	e012      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7ea:	4b3f      	ldr	r3, [pc, #252]	; (800b8e8 <UART_SetConfig+0x1a58>)
 800b7ec:	e010      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7ee:	4b3f      	ldr	r3, [pc, #252]	; (800b8ec <UART_SetConfig+0x1a5c>)
 800b7f0:	e00e      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7f2:	4b3f      	ldr	r3, [pc, #252]	; (800b8f0 <UART_SetConfig+0x1a60>)
 800b7f4:	e00c      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7f6:	4b3f      	ldr	r3, [pc, #252]	; (800b8f4 <UART_SetConfig+0x1a64>)
 800b7f8:	e00a      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7fa:	4b3f      	ldr	r3, [pc, #252]	; (800b8f8 <UART_SetConfig+0x1a68>)
 800b7fc:	e008      	b.n	800b810 <UART_SetConfig+0x1980>
 800b7fe:	4b3f      	ldr	r3, [pc, #252]	; (800b8fc <UART_SetConfig+0x1a6c>)
 800b800:	e006      	b.n	800b810 <UART_SetConfig+0x1980>
 800b802:	4b3f      	ldr	r3, [pc, #252]	; (800b900 <UART_SetConfig+0x1a70>)
 800b804:	e004      	b.n	800b810 <UART_SetConfig+0x1980>
 800b806:	4b3f      	ldr	r3, [pc, #252]	; (800b904 <UART_SetConfig+0x1a74>)
 800b808:	e002      	b.n	800b810 <UART_SetConfig+0x1980>
 800b80a:	4b33      	ldr	r3, [pc, #204]	; (800b8d8 <UART_SetConfig+0x1a48>)
 800b80c:	e000      	b.n	800b810 <UART_SetConfig+0x1980>
 800b80e:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <UART_SetConfig+0x1a50>)
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	6852      	ldr	r2, [r2, #4]
 800b814:	0852      	lsrs	r2, r2, #1
 800b816:	441a      	add	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b820:	b29b      	uxth	r3, r3
 800b822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b824:	e0df      	b.n	800b9e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d045      	beq.n	800b8ba <UART_SetConfig+0x1a2a>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2b01      	cmp	r3, #1
 800b834:	d03f      	beq.n	800b8b6 <UART_SetConfig+0x1a26>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d039      	beq.n	800b8b2 <UART_SetConfig+0x1a22>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b03      	cmp	r3, #3
 800b844:	d033      	beq.n	800b8ae <UART_SetConfig+0x1a1e>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	d02d      	beq.n	800b8aa <UART_SetConfig+0x1a1a>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b05      	cmp	r3, #5
 800b854:	d027      	beq.n	800b8a6 <UART_SetConfig+0x1a16>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b06      	cmp	r3, #6
 800b85c:	d021      	beq.n	800b8a2 <UART_SetConfig+0x1a12>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b07      	cmp	r3, #7
 800b864:	d01b      	beq.n	800b89e <UART_SetConfig+0x1a0e>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	2b08      	cmp	r3, #8
 800b86c:	d015      	beq.n	800b89a <UART_SetConfig+0x1a0a>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	2b09      	cmp	r3, #9
 800b874:	d00f      	beq.n	800b896 <UART_SetConfig+0x1a06>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b0a      	cmp	r3, #10
 800b87c:	d008      	beq.n	800b890 <UART_SetConfig+0x1a00>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	2b0b      	cmp	r3, #11
 800b884:	d102      	bne.n	800b88c <UART_SetConfig+0x19fc>
 800b886:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b88a:	e017      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b88c:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <UART_SetConfig+0x1a60>)
 800b88e:	e015      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b890:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b894:	e012      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b896:	4b1c      	ldr	r3, [pc, #112]	; (800b908 <UART_SetConfig+0x1a78>)
 800b898:	e010      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b89a:	4b1c      	ldr	r3, [pc, #112]	; (800b90c <UART_SetConfig+0x1a7c>)
 800b89c:	e00e      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <UART_SetConfig+0x1a4c>)
 800b8a0:	e00c      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8a2:	4b1b      	ldr	r3, [pc, #108]	; (800b910 <UART_SetConfig+0x1a80>)
 800b8a4:	e00a      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8a6:	4b1b      	ldr	r3, [pc, #108]	; (800b914 <UART_SetConfig+0x1a84>)
 800b8a8:	e008      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8aa:	4b0e      	ldr	r3, [pc, #56]	; (800b8e4 <UART_SetConfig+0x1a54>)
 800b8ac:	e006      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8ae:	4b1a      	ldr	r3, [pc, #104]	; (800b918 <UART_SetConfig+0x1a88>)
 800b8b0:	e004      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8b2:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <UART_SetConfig+0x1a58>)
 800b8b4:	e002      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8b6:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <UART_SetConfig+0x1a5c>)
 800b8b8:	e000      	b.n	800b8bc <UART_SetConfig+0x1a2c>
 800b8ba:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <UART_SetConfig+0x1a60>)
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	6852      	ldr	r2, [r2, #4]
 800b8c0:	0852      	lsrs	r2, r2, #1
 800b8c2:	441a      	add	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8d0:	e089      	b.n	800b9e6 <UART_SetConfig+0x1b56>
 800b8d2:	bf00      	nop
 800b8d4:	58024400 	.word	0x58024400
 800b8d8:	03d09000 	.word	0x03d09000
 800b8dc:	0007a120 	.word	0x0007a120
 800b8e0:	07a12000 	.word	0x07a12000
 800b8e4:	000f4240 	.word	0x000f4240
 800b8e8:	001e8480 	.word	0x001e8480
 800b8ec:	003d0900 	.word	0x003d0900
 800b8f0:	007a1200 	.word	0x007a1200
 800b8f4:	00a2c2aa 	.word	0x00a2c2aa
 800b8f8:	00c35000 	.word	0x00c35000
 800b8fc:	00f42400 	.word	0x00f42400
 800b900:	01458554 	.word	0x01458554
 800b904:	01e84800 	.word	0x01e84800
 800b908:	0001e848 	.word	0x0001e848
 800b90c:	0003d090 	.word	0x0003d090
 800b910:	000a2c2a 	.word	0x000a2c2a
 800b914:	000c3500 	.word	0x000c3500
 800b918:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	2b00      	cmp	r3, #0
 800b922:	d04f      	beq.n	800b9c4 <UART_SetConfig+0x1b34>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d048      	beq.n	800b9be <UART_SetConfig+0x1b2e>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b930:	2b02      	cmp	r3, #2
 800b932:	d041      	beq.n	800b9b8 <UART_SetConfig+0x1b28>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d03a      	beq.n	800b9b2 <UART_SetConfig+0x1b22>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	2b04      	cmp	r3, #4
 800b942:	d033      	beq.n	800b9ac <UART_SetConfig+0x1b1c>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	2b05      	cmp	r3, #5
 800b94a:	d02c      	beq.n	800b9a6 <UART_SetConfig+0x1b16>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	2b06      	cmp	r3, #6
 800b952:	d025      	beq.n	800b9a0 <UART_SetConfig+0x1b10>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	2b07      	cmp	r3, #7
 800b95a:	d01e      	beq.n	800b99a <UART_SetConfig+0x1b0a>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	2b08      	cmp	r3, #8
 800b962:	d017      	beq.n	800b994 <UART_SetConfig+0x1b04>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	2b09      	cmp	r3, #9
 800b96a:	d010      	beq.n	800b98e <UART_SetConfig+0x1afe>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2b0a      	cmp	r3, #10
 800b972:	d009      	beq.n	800b988 <UART_SetConfig+0x1af8>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	2b0b      	cmp	r3, #11
 800b97a:	d102      	bne.n	800b982 <UART_SetConfig+0x1af2>
 800b97c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b980:	e022      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b986:	e01f      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b98c:	e01c      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b992:	e019      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b998:	e016      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b99a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b99e:	e013      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9a0:	f241 5354 	movw	r3, #5460	; 0x1554
 800b9a4:	e010      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9a6:	f641 1398 	movw	r3, #6552	; 0x1998
 800b9aa:	e00d      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9b0:	e00a      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9b2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b9b6:	e007      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9bc:	e004      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9c2:	e001      	b.n	800b9c8 <UART_SetConfig+0x1b38>
 800b9c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	6852      	ldr	r2, [r2, #4]
 800b9cc:	0852      	lsrs	r2, r2, #1
 800b9ce:	441a      	add	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9dc:	e003      	b.n	800b9e6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b9e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e8:	2b0f      	cmp	r3, #15
 800b9ea:	d916      	bls.n	800ba1a <UART_SetConfig+0x1b8a>
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f2:	d212      	bcs.n	800ba1a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	f023 030f 	bic.w	r3, r3, #15
 800b9fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba00:	085b      	lsrs	r3, r3, #1
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f003 0307 	and.w	r3, r3, #7
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ba16:	60da      	str	r2, [r3, #12]
 800ba18:	e3a3      	b.n	800c162 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba20:	e39f      	b.n	800c162 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800ba22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ba26:	2b40      	cmp	r3, #64	; 0x40
 800ba28:	f200 8388 	bhi.w	800c13c <UART_SetConfig+0x22ac>
 800ba2c:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <UART_SetConfig+0x1ba4>)
 800ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba32:	bf00      	nop
 800ba34:	0800bb39 	.word	0x0800bb39
 800ba38:	0800bbef 	.word	0x0800bbef
 800ba3c:	0800c13d 	.word	0x0800c13d
 800ba40:	0800c13d 	.word	0x0800c13d
 800ba44:	0800bca5 	.word	0x0800bca5
 800ba48:	0800c13d 	.word	0x0800c13d
 800ba4c:	0800c13d 	.word	0x0800c13d
 800ba50:	0800c13d 	.word	0x0800c13d
 800ba54:	0800bd5f 	.word	0x0800bd5f
 800ba58:	0800c13d 	.word	0x0800c13d
 800ba5c:	0800c13d 	.word	0x0800c13d
 800ba60:	0800c13d 	.word	0x0800c13d
 800ba64:	0800c13d 	.word	0x0800c13d
 800ba68:	0800c13d 	.word	0x0800c13d
 800ba6c:	0800c13d 	.word	0x0800c13d
 800ba70:	0800c13d 	.word	0x0800c13d
 800ba74:	0800be19 	.word	0x0800be19
 800ba78:	0800c13d 	.word	0x0800c13d
 800ba7c:	0800c13d 	.word	0x0800c13d
 800ba80:	0800c13d 	.word	0x0800c13d
 800ba84:	0800c13d 	.word	0x0800c13d
 800ba88:	0800c13d 	.word	0x0800c13d
 800ba8c:	0800c13d 	.word	0x0800c13d
 800ba90:	0800c13d 	.word	0x0800c13d
 800ba94:	0800c13d 	.word	0x0800c13d
 800ba98:	0800c13d 	.word	0x0800c13d
 800ba9c:	0800c13d 	.word	0x0800c13d
 800baa0:	0800c13d 	.word	0x0800c13d
 800baa4:	0800c13d 	.word	0x0800c13d
 800baa8:	0800c13d 	.word	0x0800c13d
 800baac:	0800c13d 	.word	0x0800c13d
 800bab0:	0800c13d 	.word	0x0800c13d
 800bab4:	0800bf89 	.word	0x0800bf89
 800bab8:	0800c13d 	.word	0x0800c13d
 800babc:	0800c13d 	.word	0x0800c13d
 800bac0:	0800c13d 	.word	0x0800c13d
 800bac4:	0800c13d 	.word	0x0800c13d
 800bac8:	0800c13d 	.word	0x0800c13d
 800bacc:	0800c13d 	.word	0x0800c13d
 800bad0:	0800c13d 	.word	0x0800c13d
 800bad4:	0800c13d 	.word	0x0800c13d
 800bad8:	0800c13d 	.word	0x0800c13d
 800badc:	0800c13d 	.word	0x0800c13d
 800bae0:	0800c13d 	.word	0x0800c13d
 800bae4:	0800c13d 	.word	0x0800c13d
 800bae8:	0800c13d 	.word	0x0800c13d
 800baec:	0800c13d 	.word	0x0800c13d
 800baf0:	0800c13d 	.word	0x0800c13d
 800baf4:	0800c13d 	.word	0x0800c13d
 800baf8:	0800c13d 	.word	0x0800c13d
 800bafc:	0800c13d 	.word	0x0800c13d
 800bb00:	0800c13d 	.word	0x0800c13d
 800bb04:	0800c13d 	.word	0x0800c13d
 800bb08:	0800c13d 	.word	0x0800c13d
 800bb0c:	0800c13d 	.word	0x0800c13d
 800bb10:	0800c13d 	.word	0x0800c13d
 800bb14:	0800c13d 	.word	0x0800c13d
 800bb18:	0800c13d 	.word	0x0800c13d
 800bb1c:	0800c13d 	.word	0x0800c13d
 800bb20:	0800c13d 	.word	0x0800c13d
 800bb24:	0800c13d 	.word	0x0800c13d
 800bb28:	0800c13d 	.word	0x0800c13d
 800bb2c:	0800c13d 	.word	0x0800c13d
 800bb30:	0800c13d 	.word	0x0800c13d
 800bb34:	0800c07d 	.word	0x0800c07d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb38:	f7fb fb8e 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 800bb3c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d044      	beq.n	800bbd0 <UART_SetConfig+0x1d40>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d03e      	beq.n	800bbcc <UART_SetConfig+0x1d3c>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d038      	beq.n	800bbc8 <UART_SetConfig+0x1d38>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d032      	beq.n	800bbc4 <UART_SetConfig+0x1d34>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb62:	2b04      	cmp	r3, #4
 800bb64:	d02c      	beq.n	800bbc0 <UART_SetConfig+0x1d30>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6a:	2b05      	cmp	r3, #5
 800bb6c:	d026      	beq.n	800bbbc <UART_SetConfig+0x1d2c>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	2b06      	cmp	r3, #6
 800bb74:	d020      	beq.n	800bbb8 <UART_SetConfig+0x1d28>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	2b07      	cmp	r3, #7
 800bb7c:	d01a      	beq.n	800bbb4 <UART_SetConfig+0x1d24>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb82:	2b08      	cmp	r3, #8
 800bb84:	d014      	beq.n	800bbb0 <UART_SetConfig+0x1d20>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8a:	2b09      	cmp	r3, #9
 800bb8c:	d00e      	beq.n	800bbac <UART_SetConfig+0x1d1c>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	2b0a      	cmp	r3, #10
 800bb94:	d008      	beq.n	800bba8 <UART_SetConfig+0x1d18>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	2b0b      	cmp	r3, #11
 800bb9c:	d102      	bne.n	800bba4 <UART_SetConfig+0x1d14>
 800bb9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bba2:	e016      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bba4:	2301      	movs	r3, #1
 800bba6:	e014      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bba8:	2380      	movs	r3, #128	; 0x80
 800bbaa:	e012      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbac:	2340      	movs	r3, #64	; 0x40
 800bbae:	e010      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbb0:	2320      	movs	r3, #32
 800bbb2:	e00e      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbb4:	2310      	movs	r3, #16
 800bbb6:	e00c      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	e00a      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbbc:	230a      	movs	r3, #10
 800bbbe:	e008      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	e006      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbc4:	2306      	movs	r3, #6
 800bbc6:	e004      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	e002      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbcc:	2302      	movs	r3, #2
 800bbce:	e000      	b.n	800bbd2 <UART_SetConfig+0x1d42>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbd4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	085b      	lsrs	r3, r3, #1
 800bbde:	441a      	add	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbec:	e2aa      	b.n	800c144 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbee:	f7fb fb49 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 800bbf2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d044      	beq.n	800bc86 <UART_SetConfig+0x1df6>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d03e      	beq.n	800bc82 <UART_SetConfig+0x1df2>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d038      	beq.n	800bc7e <UART_SetConfig+0x1dee>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d032      	beq.n	800bc7a <UART_SetConfig+0x1dea>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d02c      	beq.n	800bc76 <UART_SetConfig+0x1de6>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	2b05      	cmp	r3, #5
 800bc22:	d026      	beq.n	800bc72 <UART_SetConfig+0x1de2>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	2b06      	cmp	r3, #6
 800bc2a:	d020      	beq.n	800bc6e <UART_SetConfig+0x1dde>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	2b07      	cmp	r3, #7
 800bc32:	d01a      	beq.n	800bc6a <UART_SetConfig+0x1dda>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	2b08      	cmp	r3, #8
 800bc3a:	d014      	beq.n	800bc66 <UART_SetConfig+0x1dd6>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	d00e      	beq.n	800bc62 <UART_SetConfig+0x1dd2>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	2b0a      	cmp	r3, #10
 800bc4a:	d008      	beq.n	800bc5e <UART_SetConfig+0x1dce>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	2b0b      	cmp	r3, #11
 800bc52:	d102      	bne.n	800bc5a <UART_SetConfig+0x1dca>
 800bc54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc58:	e016      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e014      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc5e:	2380      	movs	r3, #128	; 0x80
 800bc60:	e012      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc62:	2340      	movs	r3, #64	; 0x40
 800bc64:	e010      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc66:	2320      	movs	r3, #32
 800bc68:	e00e      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc6a:	2310      	movs	r3, #16
 800bc6c:	e00c      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc6e:	230c      	movs	r3, #12
 800bc70:	e00a      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc72:	230a      	movs	r3, #10
 800bc74:	e008      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc76:	2308      	movs	r3, #8
 800bc78:	e006      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc7a:	2306      	movs	r3, #6
 800bc7c:	e004      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc7e:	2304      	movs	r3, #4
 800bc80:	e002      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc82:	2302      	movs	r3, #2
 800bc84:	e000      	b.n	800bc88 <UART_SetConfig+0x1df8>
 800bc86:	2301      	movs	r3, #1
 800bc88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc8a:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	441a      	add	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bca2:	e24f      	b.n	800c144 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bca4:	f107 0318 	add.w	r3, r7, #24
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7fc fc6d 	bl	8008588 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d044      	beq.n	800bd42 <UART_SetConfig+0x1eb2>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d03e      	beq.n	800bd3e <UART_SetConfig+0x1eae>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d038      	beq.n	800bd3a <UART_SetConfig+0x1eaa>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d032      	beq.n	800bd36 <UART_SetConfig+0x1ea6>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d02c      	beq.n	800bd32 <UART_SetConfig+0x1ea2>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b05      	cmp	r3, #5
 800bcde:	d026      	beq.n	800bd2e <UART_SetConfig+0x1e9e>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	2b06      	cmp	r3, #6
 800bce6:	d020      	beq.n	800bd2a <UART_SetConfig+0x1e9a>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b07      	cmp	r3, #7
 800bcee:	d01a      	beq.n	800bd26 <UART_SetConfig+0x1e96>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	2b08      	cmp	r3, #8
 800bcf6:	d014      	beq.n	800bd22 <UART_SetConfig+0x1e92>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	2b09      	cmp	r3, #9
 800bcfe:	d00e      	beq.n	800bd1e <UART_SetConfig+0x1e8e>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2b0a      	cmp	r3, #10
 800bd06:	d008      	beq.n	800bd1a <UART_SetConfig+0x1e8a>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	2b0b      	cmp	r3, #11
 800bd0e:	d102      	bne.n	800bd16 <UART_SetConfig+0x1e86>
 800bd10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd14:	e016      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e014      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd1a:	2380      	movs	r3, #128	; 0x80
 800bd1c:	e012      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd1e:	2340      	movs	r3, #64	; 0x40
 800bd20:	e010      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd22:	2320      	movs	r3, #32
 800bd24:	e00e      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd26:	2310      	movs	r3, #16
 800bd28:	e00c      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	e00a      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd2e:	230a      	movs	r3, #10
 800bd30:	e008      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd32:	2308      	movs	r3, #8
 800bd34:	e006      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd36:	2306      	movs	r3, #6
 800bd38:	e004      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd3a:	2304      	movs	r3, #4
 800bd3c:	e002      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e000      	b.n	800bd44 <UART_SetConfig+0x1eb4>
 800bd42:	2301      	movs	r3, #1
 800bd44:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	441a      	add	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd5c:	e1f2      	b.n	800c144 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd5e:	f107 030c 	add.w	r3, r7, #12
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fc fd5c 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d044      	beq.n	800bdfc <UART_SetConfig+0x1f6c>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d03e      	beq.n	800bdf8 <UART_SetConfig+0x1f68>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d038      	beq.n	800bdf4 <UART_SetConfig+0x1f64>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d032      	beq.n	800bdf0 <UART_SetConfig+0x1f60>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d02c      	beq.n	800bdec <UART_SetConfig+0x1f5c>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	2b05      	cmp	r3, #5
 800bd98:	d026      	beq.n	800bde8 <UART_SetConfig+0x1f58>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	2b06      	cmp	r3, #6
 800bda0:	d020      	beq.n	800bde4 <UART_SetConfig+0x1f54>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	2b07      	cmp	r3, #7
 800bda8:	d01a      	beq.n	800bde0 <UART_SetConfig+0x1f50>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	2b08      	cmp	r3, #8
 800bdb0:	d014      	beq.n	800bddc <UART_SetConfig+0x1f4c>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb6:	2b09      	cmp	r3, #9
 800bdb8:	d00e      	beq.n	800bdd8 <UART_SetConfig+0x1f48>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	2b0a      	cmp	r3, #10
 800bdc0:	d008      	beq.n	800bdd4 <UART_SetConfig+0x1f44>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	2b0b      	cmp	r3, #11
 800bdc8:	d102      	bne.n	800bdd0 <UART_SetConfig+0x1f40>
 800bdca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdce:	e016      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e014      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdd4:	2380      	movs	r3, #128	; 0x80
 800bdd6:	e012      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdd8:	2340      	movs	r3, #64	; 0x40
 800bdda:	e010      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bddc:	2320      	movs	r3, #32
 800bdde:	e00e      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bde0:	2310      	movs	r3, #16
 800bde2:	e00c      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bde4:	230c      	movs	r3, #12
 800bde6:	e00a      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bde8:	230a      	movs	r3, #10
 800bdea:	e008      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdec:	2308      	movs	r3, #8
 800bdee:	e006      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	e004      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	e002      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e000      	b.n	800bdfe <UART_SetConfig+0x1f6e>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	fbb2 f2f3 	udiv	r2, r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	085b      	lsrs	r3, r3, #1
 800be08:	441a      	add	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be12:	b29b      	uxth	r3, r3
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be16:	e195      	b.n	800c144 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be18:	4b87      	ldr	r3, [pc, #540]	; (800c038 <UART_SetConfig+0x21a8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 0320 	and.w	r3, r3, #32
 800be20:	2b00      	cmp	r3, #0
 800be22:	d05d      	beq.n	800bee0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be24:	4b84      	ldr	r3, [pc, #528]	; (800c038 <UART_SetConfig+0x21a8>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	08db      	lsrs	r3, r3, #3
 800be2a:	f003 0303 	and.w	r3, r3, #3
 800be2e:	4a83      	ldr	r2, [pc, #524]	; (800c03c <UART_SetConfig+0x21ac>)
 800be30:	40da      	lsrs	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	2b00      	cmp	r3, #0
 800be38:	d044      	beq.n	800bec4 <UART_SetConfig+0x2034>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d03e      	beq.n	800bec0 <UART_SetConfig+0x2030>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	2b02      	cmp	r3, #2
 800be48:	d038      	beq.n	800bebc <UART_SetConfig+0x202c>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d032      	beq.n	800beb8 <UART_SetConfig+0x2028>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	2b04      	cmp	r3, #4
 800be58:	d02c      	beq.n	800beb4 <UART_SetConfig+0x2024>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d026      	beq.n	800beb0 <UART_SetConfig+0x2020>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	2b06      	cmp	r3, #6
 800be68:	d020      	beq.n	800beac <UART_SetConfig+0x201c>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b07      	cmp	r3, #7
 800be70:	d01a      	beq.n	800bea8 <UART_SetConfig+0x2018>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	2b08      	cmp	r3, #8
 800be78:	d014      	beq.n	800bea4 <UART_SetConfig+0x2014>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7e:	2b09      	cmp	r3, #9
 800be80:	d00e      	beq.n	800bea0 <UART_SetConfig+0x2010>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b0a      	cmp	r3, #10
 800be88:	d008      	beq.n	800be9c <UART_SetConfig+0x200c>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b0b      	cmp	r3, #11
 800be90:	d102      	bne.n	800be98 <UART_SetConfig+0x2008>
 800be92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be96:	e016      	b.n	800bec6 <UART_SetConfig+0x2036>
 800be98:	2301      	movs	r3, #1
 800be9a:	e014      	b.n	800bec6 <UART_SetConfig+0x2036>
 800be9c:	2380      	movs	r3, #128	; 0x80
 800be9e:	e012      	b.n	800bec6 <UART_SetConfig+0x2036>
 800bea0:	2340      	movs	r3, #64	; 0x40
 800bea2:	e010      	b.n	800bec6 <UART_SetConfig+0x2036>
 800bea4:	2320      	movs	r3, #32
 800bea6:	e00e      	b.n	800bec6 <UART_SetConfig+0x2036>
 800bea8:	2310      	movs	r3, #16
 800beaa:	e00c      	b.n	800bec6 <UART_SetConfig+0x2036>
 800beac:	230c      	movs	r3, #12
 800beae:	e00a      	b.n	800bec6 <UART_SetConfig+0x2036>
 800beb0:	230a      	movs	r3, #10
 800beb2:	e008      	b.n	800bec6 <UART_SetConfig+0x2036>
 800beb4:	2308      	movs	r3, #8
 800beb6:	e006      	b.n	800bec6 <UART_SetConfig+0x2036>
 800beb8:	2306      	movs	r3, #6
 800beba:	e004      	b.n	800bec6 <UART_SetConfig+0x2036>
 800bebc:	2304      	movs	r3, #4
 800bebe:	e002      	b.n	800bec6 <UART_SetConfig+0x2036>
 800bec0:	2302      	movs	r3, #2
 800bec2:	e000      	b.n	800bec6 <UART_SetConfig+0x2036>
 800bec4:	2301      	movs	r3, #1
 800bec6:	fbb2 f2f3 	udiv	r2, r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	441a      	add	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bede:	e131      	b.n	800c144 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d043      	beq.n	800bf70 <UART_SetConfig+0x20e0>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2b01      	cmp	r3, #1
 800beee:	d03d      	beq.n	800bf6c <UART_SetConfig+0x20dc>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d037      	beq.n	800bf68 <UART_SetConfig+0x20d8>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	2b03      	cmp	r3, #3
 800befe:	d031      	beq.n	800bf64 <UART_SetConfig+0x20d4>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	d02b      	beq.n	800bf60 <UART_SetConfig+0x20d0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	2b05      	cmp	r3, #5
 800bf0e:	d025      	beq.n	800bf5c <UART_SetConfig+0x20cc>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf14:	2b06      	cmp	r3, #6
 800bf16:	d01f      	beq.n	800bf58 <UART_SetConfig+0x20c8>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1c:	2b07      	cmp	r3, #7
 800bf1e:	d019      	beq.n	800bf54 <UART_SetConfig+0x20c4>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf24:	2b08      	cmp	r3, #8
 800bf26:	d013      	beq.n	800bf50 <UART_SetConfig+0x20c0>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	d00d      	beq.n	800bf4c <UART_SetConfig+0x20bc>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	2b0a      	cmp	r3, #10
 800bf36:	d007      	beq.n	800bf48 <UART_SetConfig+0x20b8>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3c:	2b0b      	cmp	r3, #11
 800bf3e:	d101      	bne.n	800bf44 <UART_SetConfig+0x20b4>
 800bf40:	4b3f      	ldr	r3, [pc, #252]	; (800c040 <UART_SetConfig+0x21b0>)
 800bf42:	e016      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf44:	4b3d      	ldr	r3, [pc, #244]	; (800c03c <UART_SetConfig+0x21ac>)
 800bf46:	e014      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf48:	4b3e      	ldr	r3, [pc, #248]	; (800c044 <UART_SetConfig+0x21b4>)
 800bf4a:	e012      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf4c:	4b3e      	ldr	r3, [pc, #248]	; (800c048 <UART_SetConfig+0x21b8>)
 800bf4e:	e010      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf50:	4b3e      	ldr	r3, [pc, #248]	; (800c04c <UART_SetConfig+0x21bc>)
 800bf52:	e00e      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf54:	4b3e      	ldr	r3, [pc, #248]	; (800c050 <UART_SetConfig+0x21c0>)
 800bf56:	e00c      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf58:	4b3e      	ldr	r3, [pc, #248]	; (800c054 <UART_SetConfig+0x21c4>)
 800bf5a:	e00a      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf5c:	4b3e      	ldr	r3, [pc, #248]	; (800c058 <UART_SetConfig+0x21c8>)
 800bf5e:	e008      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf60:	4b3e      	ldr	r3, [pc, #248]	; (800c05c <UART_SetConfig+0x21cc>)
 800bf62:	e006      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf64:	4b3e      	ldr	r3, [pc, #248]	; (800c060 <UART_SetConfig+0x21d0>)
 800bf66:	e004      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf68:	4b3e      	ldr	r3, [pc, #248]	; (800c064 <UART_SetConfig+0x21d4>)
 800bf6a:	e002      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf6c:	4b3e      	ldr	r3, [pc, #248]	; (800c068 <UART_SetConfig+0x21d8>)
 800bf6e:	e000      	b.n	800bf72 <UART_SetConfig+0x20e2>
 800bf70:	4b32      	ldr	r3, [pc, #200]	; (800c03c <UART_SetConfig+0x21ac>)
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6852      	ldr	r2, [r2, #4]
 800bf76:	0852      	lsrs	r2, r2, #1
 800bf78:	441a      	add	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf86:	e0dd      	b.n	800c144 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d046      	beq.n	800c01e <UART_SetConfig+0x218e>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d040      	beq.n	800c01a <UART_SetConfig+0x218a>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d03a      	beq.n	800c016 <UART_SetConfig+0x2186>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d034      	beq.n	800c012 <UART_SetConfig+0x2182>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d02e      	beq.n	800c00e <UART_SetConfig+0x217e>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	2b05      	cmp	r3, #5
 800bfb6:	d028      	beq.n	800c00a <UART_SetConfig+0x217a>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	2b06      	cmp	r3, #6
 800bfbe:	d022      	beq.n	800c006 <UART_SetConfig+0x2176>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc4:	2b07      	cmp	r3, #7
 800bfc6:	d01c      	beq.n	800c002 <UART_SetConfig+0x2172>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	2b08      	cmp	r3, #8
 800bfce:	d016      	beq.n	800bffe <UART_SetConfig+0x216e>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	d00f      	beq.n	800bff8 <UART_SetConfig+0x2168>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	2b0a      	cmp	r3, #10
 800bfde:	d008      	beq.n	800bff2 <UART_SetConfig+0x2162>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	2b0b      	cmp	r3, #11
 800bfe6:	d102      	bne.n	800bfee <UART_SetConfig+0x215e>
 800bfe8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bfec:	e018      	b.n	800c020 <UART_SetConfig+0x2190>
 800bfee:	4b18      	ldr	r3, [pc, #96]	; (800c050 <UART_SetConfig+0x21c0>)
 800bff0:	e016      	b.n	800c020 <UART_SetConfig+0x2190>
 800bff2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bff6:	e013      	b.n	800c020 <UART_SetConfig+0x2190>
 800bff8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bffc:	e010      	b.n	800c020 <UART_SetConfig+0x2190>
 800bffe:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <UART_SetConfig+0x21dc>)
 800c000:	e00e      	b.n	800c020 <UART_SetConfig+0x2190>
 800c002:	4b0f      	ldr	r3, [pc, #60]	; (800c040 <UART_SetConfig+0x21b0>)
 800c004:	e00c      	b.n	800c020 <UART_SetConfig+0x2190>
 800c006:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <UART_SetConfig+0x21e0>)
 800c008:	e00a      	b.n	800c020 <UART_SetConfig+0x2190>
 800c00a:	4b1a      	ldr	r3, [pc, #104]	; (800c074 <UART_SetConfig+0x21e4>)
 800c00c:	e008      	b.n	800c020 <UART_SetConfig+0x2190>
 800c00e:	4b0d      	ldr	r3, [pc, #52]	; (800c044 <UART_SetConfig+0x21b4>)
 800c010:	e006      	b.n	800c020 <UART_SetConfig+0x2190>
 800c012:	4b19      	ldr	r3, [pc, #100]	; (800c078 <UART_SetConfig+0x21e8>)
 800c014:	e004      	b.n	800c020 <UART_SetConfig+0x2190>
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <UART_SetConfig+0x21b8>)
 800c018:	e002      	b.n	800c020 <UART_SetConfig+0x2190>
 800c01a:	4b0c      	ldr	r3, [pc, #48]	; (800c04c <UART_SetConfig+0x21bc>)
 800c01c:	e000      	b.n	800c020 <UART_SetConfig+0x2190>
 800c01e:	4b0c      	ldr	r3, [pc, #48]	; (800c050 <UART_SetConfig+0x21c0>)
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	6852      	ldr	r2, [r2, #4]
 800c024:	0852      	lsrs	r2, r2, #1
 800c026:	441a      	add	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c030:	b29b      	uxth	r3, r3
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c034:	e086      	b.n	800c144 <UART_SetConfig+0x22b4>
 800c036:	bf00      	nop
 800c038:	58024400 	.word	0x58024400
 800c03c:	03d09000 	.word	0x03d09000
 800c040:	0003d090 	.word	0x0003d090
 800c044:	0007a120 	.word	0x0007a120
 800c048:	000f4240 	.word	0x000f4240
 800c04c:	001e8480 	.word	0x001e8480
 800c050:	003d0900 	.word	0x003d0900
 800c054:	00516155 	.word	0x00516155
 800c058:	0061a800 	.word	0x0061a800
 800c05c:	007a1200 	.word	0x007a1200
 800c060:	00a2c2aa 	.word	0x00a2c2aa
 800c064:	00f42400 	.word	0x00f42400
 800c068:	01e84800 	.word	0x01e84800
 800c06c:	0001e848 	.word	0x0001e848
 800c070:	00051615 	.word	0x00051615
 800c074:	00061a80 	.word	0x00061a80
 800c078:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	2b00      	cmp	r3, #0
 800c082:	d04e      	beq.n	800c122 <UART_SetConfig+0x2292>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d047      	beq.n	800c11c <UART_SetConfig+0x228c>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	2b02      	cmp	r3, #2
 800c092:	d040      	beq.n	800c116 <UART_SetConfig+0x2286>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d039      	beq.n	800c110 <UART_SetConfig+0x2280>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	2b04      	cmp	r3, #4
 800c0a2:	d032      	beq.n	800c10a <UART_SetConfig+0x227a>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a8:	2b05      	cmp	r3, #5
 800c0aa:	d02b      	beq.n	800c104 <UART_SetConfig+0x2274>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b0:	2b06      	cmp	r3, #6
 800c0b2:	d024      	beq.n	800c0fe <UART_SetConfig+0x226e>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	2b07      	cmp	r3, #7
 800c0ba:	d01d      	beq.n	800c0f8 <UART_SetConfig+0x2268>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	2b08      	cmp	r3, #8
 800c0c2:	d016      	beq.n	800c0f2 <UART_SetConfig+0x2262>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	2b09      	cmp	r3, #9
 800c0ca:	d00f      	beq.n	800c0ec <UART_SetConfig+0x225c>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	2b0a      	cmp	r3, #10
 800c0d2:	d008      	beq.n	800c0e6 <UART_SetConfig+0x2256>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	2b0b      	cmp	r3, #11
 800c0da:	d101      	bne.n	800c0e0 <UART_SetConfig+0x2250>
 800c0dc:	2380      	movs	r3, #128	; 0x80
 800c0de:	e022      	b.n	800c126 <UART_SetConfig+0x2296>
 800c0e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0e4:	e01f      	b.n	800c126 <UART_SetConfig+0x2296>
 800c0e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0ea:	e01c      	b.n	800c126 <UART_SetConfig+0x2296>
 800c0ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0f0:	e019      	b.n	800c126 <UART_SetConfig+0x2296>
 800c0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0f6:	e016      	b.n	800c126 <UART_SetConfig+0x2296>
 800c0f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0fc:	e013      	b.n	800c126 <UART_SetConfig+0x2296>
 800c0fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c102:	e010      	b.n	800c126 <UART_SetConfig+0x2296>
 800c104:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c108:	e00d      	b.n	800c126 <UART_SetConfig+0x2296>
 800c10a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c10e:	e00a      	b.n	800c126 <UART_SetConfig+0x2296>
 800c110:	f241 5355 	movw	r3, #5461	; 0x1555
 800c114:	e007      	b.n	800c126 <UART_SetConfig+0x2296>
 800c116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c11a:	e004      	b.n	800c126 <UART_SetConfig+0x2296>
 800c11c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c120:	e001      	b.n	800c126 <UART_SetConfig+0x2296>
 800c122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	6852      	ldr	r2, [r2, #4]
 800c12a:	0852      	lsrs	r2, r2, #1
 800c12c:	441a      	add	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	fbb2 f3f3 	udiv	r3, r2, r3
 800c136:	b29b      	uxth	r3, r3
 800c138:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c13a:	e003      	b.n	800c144 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c146:	2b0f      	cmp	r3, #15
 800c148:	d908      	bls.n	800c15c <UART_SetConfig+0x22cc>
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c150:	d204      	bcs.n	800c15c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c158:	60da      	str	r2, [r3, #12]
 800c15a:	e002      	b.n	800c162 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c17e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c182:	4618      	mov	r0, r3
 800c184:	3740      	adds	r7, #64	; 0x40
 800c186:	46bd      	mov	sp, r7
 800c188:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c18c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c198:	f003 0301 	and.w	r3, r3, #1
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00a      	beq.n	800c1b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	f003 0302 	and.w	r3, r3, #2
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	430a      	orrs	r2, r1
 800c1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fe:	f003 0308 	and.w	r3, r3, #8
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00a      	beq.n	800c21c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	430a      	orrs	r2, r1
 800c21a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c220:	f003 0310 	and.w	r3, r3, #16
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00a      	beq.n	800c23e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	430a      	orrs	r2, r1
 800c23c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c242:	f003 0320 	and.w	r3, r3, #32
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	430a      	orrs	r2, r1
 800c25e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01a      	beq.n	800c2a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	430a      	orrs	r2, r1
 800c280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c28a:	d10a      	bne.n	800c2a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00a      	beq.n	800c2c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	605a      	str	r2, [r3, #4]
  }
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af02      	add	r7, sp, #8
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c2e0:	f7f6 f86e 	bl	80023c0 <HAL_GetTick>
 800c2e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0308 	and.w	r3, r3, #8
 800c2f0:	2b08      	cmp	r3, #8
 800c2f2:	d10e      	bne.n	800c312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f82c 	bl	800c360 <UART_WaitOnFlagUntilTimeout>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e022      	b.n	800c358 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0304 	and.w	r3, r3, #4
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d10e      	bne.n	800c33e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f816 	bl	800c360 <UART_WaitOnFlagUntilTimeout>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e00c      	b.n	800c358 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	4613      	mov	r3, r2
 800c36e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c370:	e062      	b.n	800c438 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c378:	d05e      	beq.n	800c438 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c37a:	f7f6 f821 	bl	80023c0 <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	69ba      	ldr	r2, [r7, #24]
 800c386:	429a      	cmp	r2, r3
 800c388:	d302      	bcc.n	800c390 <UART_WaitOnFlagUntilTimeout+0x30>
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d11d      	bne.n	800c3cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c39e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	689a      	ldr	r2, [r3, #8]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f022 0201 	bic.w	r2, r2, #1
 800c3ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2220      	movs	r2, #32
 800c3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e045      	b.n	800c458 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 0304 	and.w	r3, r3, #4
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d02e      	beq.n	800c438 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3e8:	d126      	bne.n	800c438 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3f2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c402:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689a      	ldr	r2, [r3, #8]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f022 0201 	bic.w	r2, r2, #1
 800c412:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2220      	movs	r2, #32
 800c418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2220      	movs	r2, #32
 800c420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2220      	movs	r2, #32
 800c428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e00f      	b.n	800c458 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	69da      	ldr	r2, [r3, #28]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	4013      	ands	r3, r2
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	429a      	cmp	r2, r3
 800c446:	bf0c      	ite	eq
 800c448:	2301      	moveq	r3, #1
 800c44a:	2300      	movne	r3, #0
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	461a      	mov	r2, r3
 800c450:	79fb      	ldrb	r3, [r7, #7]
 800c452:	429a      	cmp	r2, r3
 800c454:	d08d      	beq.n	800c372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c476:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689a      	ldr	r2, [r3, #8]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c486:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c4b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6899      	ldr	r1, [r3, #8]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	4b08      	ldr	r3, [pc, #32]	; (800c4e0 <UART_EndRxTransfer+0x44>)
 800c4c0:	400b      	ands	r3, r1
 800c4c2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c4d2:	bf00      	nop
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	effffffe 	.word	0xeffffffe

0800c4e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4fa:	d01f      	beq.n	800c53c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c512:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	689a      	ldr	r2, [r3, #8]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f022 0201 	bic.w	r2, r2, #1
 800c522:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	689a      	ldr	r2, [r3, #8]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c532:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2220      	movs	r2, #32
 800c538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f7f4 f903 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c542:	bf00      	nop
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f7fd fc85 	bl	8009e68 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c55e:	bf00      	nop
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b086      	sub	sp, #24
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c57a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c582:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c58e:	2b80      	cmp	r3, #128	; 0x80
 800c590:	d109      	bne.n	800c5a6 <UART_DMAError+0x40>
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b21      	cmp	r3, #33	; 0x21
 800c596:	d106      	bne.n	800c5a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c5a0:	6978      	ldr	r0, [r7, #20]
 800c5a2:	f7ff ff5d 	bl	800c460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b0:	2b40      	cmp	r3, #64	; 0x40
 800c5b2:	d109      	bne.n	800c5c8 <UART_DMAError+0x62>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b22      	cmp	r3, #34	; 0x22
 800c5b8:	d106      	bne.n	800c5c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c5c2:	6978      	ldr	r0, [r7, #20]
 800c5c4:	f7ff ff6a 	bl	800c49c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ce:	f043 0210 	orr.w	r2, r3, #16
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	f7fd fc4f 	bl	8009e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5de:	bf00      	nop
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7fd fc39 	bl	8009e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c620:	2b21      	cmp	r3, #33	; 0x21
 800c622:	d12a      	bne.n	800c67a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d110      	bne.n	800c652 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c63e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c64e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c650:	e013      	b.n	800c67a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c656:	781a      	ldrb	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c66e:	b29b      	uxth	r3, r3
 800c670:	3b01      	subs	r3, #1
 800c672:	b29a      	uxth	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c67a:	bf00      	nop
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c686:	b480      	push	{r7}
 800c688:	b085      	sub	sp, #20
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c694:	2b21      	cmp	r3, #33	; 0x21
 800c696:	d12f      	bne.n	800c6f8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d110      	bne.n	800c6c6 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6b2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6c2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c6c4:	e018      	b.n	800c6f8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e0:	1c9a      	adds	r2, r3, #2
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c712:	2b21      	cmp	r3, #33	; 0x21
 800c714:	d13d      	bne.n	800c792 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c71c:	81fb      	strh	r3, [r7, #14]
 800c71e:	e035      	b.n	800c78c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c726:	b29b      	uxth	r3, r3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d111      	bne.n	800c750 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c73a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c74a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c74c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c74e:	e020      	b.n	800c792 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d013      	beq.n	800c786 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c762:	781a      	ldrb	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	3b01      	subs	r3, #1
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	3b01      	subs	r3, #1
 800c78a:	81fb      	strh	r3, [r7, #14]
 800c78c:	89fb      	ldrh	r3, [r7, #14]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1c6      	bne.n	800c720 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c792:	bf00      	nop
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b085      	sub	sp, #20
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ac:	2b21      	cmp	r3, #33	; 0x21
 800c7ae:	d142      	bne.n	800c836 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7b6:	81fb      	strh	r3, [r7, #14]
 800c7b8:	e03a      	b.n	800c830 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d111      	bne.n	800c7ea <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c7d4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7e4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c7e6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c7e8:	e025      	b.n	800c836 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d018      	beq.n	800c82a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7fc:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c80c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c812:	1c9a      	adds	r2, r3, #2
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c81e:	b29b      	uxth	r3, r3
 800c820:	3b01      	subs	r3, #1
 800c822:	b29a      	uxth	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c82a:	89fb      	ldrh	r3, [r7, #14]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	81fb      	strh	r3, [r7, #14]
 800c830:	89fb      	ldrh	r3, [r7, #14]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1c1      	bne.n	800c7ba <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c858:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2220      	movs	r2, #32
 800c85e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7f3 ff2b 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c86e:	bf00      	nop
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c884:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c88c:	2b22      	cmp	r3, #34	; 0x22
 800c88e:	d13b      	bne.n	800c908 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c896:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c898:	89bb      	ldrh	r3, [r7, #12]
 800c89a:	b2d9      	uxtb	r1, r3
 800c89c:	89fb      	ldrh	r3, [r7, #14]
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a4:	400a      	ands	r2, r1
 800c8a6:	b2d2      	uxtb	r2, r2
 800c8a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d122      	bne.n	800c918 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c8e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f022 0201 	bic.w	r2, r2, #1
 800c8f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7f3 ff21 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c906:	e007      	b.n	800c918 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	699a      	ldr	r2, [r3, #24]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f042 0208 	orr.w	r2, r2, #8
 800c916:	619a      	str	r2, [r3, #24]
}
 800c918:	bf00      	nop
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c92e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c936:	2b22      	cmp	r3, #34	; 0x22
 800c938:	d13b      	bne.n	800c9b2 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c940:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c946:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c948:	89ba      	ldrh	r2, [r7, #12]
 800c94a:	89fb      	ldrh	r3, [r7, #14]
 800c94c:	4013      	ands	r3, r2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c958:	1c9a      	adds	r2, r3, #2
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c964:	b29b      	uxth	r3, r3
 800c966:	3b01      	subs	r3, #1
 800c968:	b29a      	uxth	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c976:	b29b      	uxth	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d122      	bne.n	800c9c2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c98a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689a      	ldr	r2, [r3, #8]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f022 0201 	bic.w	r2, r2, #1
 800c99a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2220      	movs	r2, #32
 800c9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7f3 fecc 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9b0:	e007      	b.n	800c9c2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	699a      	ldr	r2, [r3, #24]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f042 0208 	orr.w	r2, r2, #8
 800c9c0:	619a      	str	r2, [r3, #24]
}
 800c9c2:	bf00      	nop
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9da:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9e2:	2b22      	cmp	r3, #34	; 0x22
 800c9e4:	d166      	bne.n	800cab4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9ec:	81fb      	strh	r3, [r7, #14]
 800c9ee:	e03d      	b.n	800ca6c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9f8:	893b      	ldrh	r3, [r7, #8]
 800c9fa:	b2d9      	uxtb	r1, r3
 800c9fc:	89bb      	ldrh	r3, [r7, #12]
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca04:	400a      	ands	r2, r1
 800ca06:	b2d2      	uxtb	r2, r2
 800ca08:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca0e:	1c5a      	adds	r2, r3, #1
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d119      	bne.n	800ca66 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca40:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6899      	ldr	r1, [r3, #8]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	4b1f      	ldr	r3, [pc, #124]	; (800cacc <UART_RxISR_8BIT_FIFOEN+0x100>)
 800ca4e:	400b      	ands	r3, r1
 800ca50:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2220      	movs	r2, #32
 800ca56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7f3 fe71 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ca66:	89fb      	ldrh	r3, [r7, #14]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	81fb      	strh	r3, [r7, #14]
 800ca6c:	89fb      	ldrh	r3, [r7, #14]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1be      	bne.n	800c9f0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca78:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ca7a:	897b      	ldrh	r3, [r7, #10]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d021      	beq.n	800cac4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca86:	897a      	ldrh	r2, [r7, #10]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d21b      	bcs.n	800cac4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	689a      	ldr	r2, [r3, #8]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ca9a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a0c      	ldr	r2, [pc, #48]	; (800cad0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800caa0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f042 0220 	orr.w	r2, r2, #32
 800cab0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cab2:	e007      	b.n	800cac4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	699a      	ldr	r2, [r3, #24]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f042 0208 	orr.w	r2, r2, #8
 800cac2:	619a      	str	r2, [r3, #24]
}
 800cac4:	bf00      	nop
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	effffffe 	.word	0xeffffffe
 800cad0:	0800c877 	.word	0x0800c877

0800cad4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cae2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caea:	2b22      	cmp	r3, #34	; 0x22
 800caec:	d166      	bne.n	800cbbc <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800caf4:	82fb      	strh	r3, [r7, #22]
 800caf6:	e03d      	b.n	800cb74 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafe:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cb06:	8a3a      	ldrh	r2, [r7, #16]
 800cb08:	8abb      	ldrh	r3, [r7, #20]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb16:	1c9a      	adds	r2, r3, #2
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	3b01      	subs	r3, #1
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d119      	bne.n	800cb6e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb48:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6899      	ldr	r1, [r3, #8]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b1f      	ldr	r3, [pc, #124]	; (800cbd4 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cb56:	400b      	ands	r3, r1
 800cb58:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7f3 fded 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb6e:	8afb      	ldrh	r3, [r7, #22]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	82fb      	strh	r3, [r7, #22]
 800cb74:	8afb      	ldrh	r3, [r7, #22]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1be      	bne.n	800caf8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb80:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb82:	8a7b      	ldrh	r3, [r7, #18]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d021      	beq.n	800cbcc <UART_RxISR_16BIT_FIFOEN+0xf8>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb8e:	8a7a      	ldrh	r2, [r7, #18]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d21b      	bcs.n	800cbcc <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	689a      	ldr	r2, [r3, #8]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cba2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a0c      	ldr	r2, [pc, #48]	; (800cbd8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800cba8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f042 0220 	orr.w	r2, r2, #32
 800cbb8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbba:	e007      	b.n	800cbcc <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	699a      	ldr	r2, [r3, #24]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f042 0208 	orr.w	r2, r2, #8
 800cbca:	619a      	str	r2, [r3, #24]
}
 800cbcc:	bf00      	nop
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	effffffe 	.word	0xeffffffe
 800cbd8:	0800c921 	.word	0x0800c921

0800cbdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d101      	bne.n	800cc2e <HAL_UARTEx_DisableFifoMode+0x16>
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	e027      	b.n	800cc7e <HAL_UARTEx_DisableFifoMode+0x66>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2224      	movs	r2, #36	; 0x24
 800cc3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f022 0201 	bic.w	r2, r2, #1
 800cc54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2220      	movs	r2, #32
 800cc70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d101      	bne.n	800cca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e02d      	b.n	800ccfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2224      	movs	r2, #36	; 0x24
 800ccae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0201 	bic.w	r2, r2, #1
 800ccc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f850 	bl	800cd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d101      	bne.n	800cd1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	e02d      	b.n	800cd7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2224      	movs	r2, #36	; 0x24
 800cd2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f022 0201 	bic.w	r2, r2, #1
 800cd44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f812 	bl	800cd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b089      	sub	sp, #36	; 0x24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cd8c:	4a2f      	ldr	r2, [pc, #188]	; (800ce4c <UARTEx_SetNbDataToProcess+0xc8>)
 800cd8e:	f107 0314 	add.w	r3, r7, #20
 800cd92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd96:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cd9a:	4a2d      	ldr	r2, [pc, #180]	; (800ce50 <UARTEx_SetNbDataToProcess+0xcc>)
 800cd9c:	f107 030c 	add.w	r3, r7, #12
 800cda0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cda4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d108      	bne.n	800cdc2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cdc0:	e03d      	b.n	800ce3e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cdc2:	2308      	movs	r3, #8
 800cdc4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cdc6:	2308      	movs	r3, #8
 800cdc8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	0e5b      	lsrs	r3, r3, #25
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0307 	and.w	r3, r3, #7
 800cdd8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	0f5b      	lsrs	r3, r3, #29
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	f003 0307 	and.w	r3, r3, #7
 800cde8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cdea:	7fbb      	ldrb	r3, [r7, #30]
 800cdec:	7f3a      	ldrb	r2, [r7, #28]
 800cdee:	f107 0120 	add.w	r1, r7, #32
 800cdf2:	440a      	add	r2, r1
 800cdf4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cdf8:	fb02 f303 	mul.w	r3, r2, r3
 800cdfc:	7f3a      	ldrb	r2, [r7, #28]
 800cdfe:	f107 0120 	add.w	r1, r7, #32
 800ce02:	440a      	add	r2, r1
 800ce04:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ce08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ce14:	7ffb      	ldrb	r3, [r7, #31]
 800ce16:	7f7a      	ldrb	r2, [r7, #29]
 800ce18:	f107 0120 	add.w	r1, r7, #32
 800ce1c:	440a      	add	r2, r1
 800ce1e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ce22:	fb02 f303 	mul.w	r3, r2, r3
 800ce26:	7f7a      	ldrb	r2, [r7, #29]
 800ce28:	f107 0120 	add.w	r1, r7, #32
 800ce2c:	440a      	add	r2, r1
 800ce2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ce32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce3e:	bf00      	nop
 800ce40:	3724      	adds	r7, #36	; 0x24
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	0800df10 	.word	0x0800df10
 800ce50:	0800df18 	.word	0x0800df18

0800ce54 <__errno>:
 800ce54:	4b01      	ldr	r3, [pc, #4]	; (800ce5c <__errno+0x8>)
 800ce56:	6818      	ldr	r0, [r3, #0]
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	24000050 	.word	0x24000050

0800ce60 <__libc_init_array>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	4e0d      	ldr	r6, [pc, #52]	; (800ce98 <__libc_init_array+0x38>)
 800ce64:	4c0d      	ldr	r4, [pc, #52]	; (800ce9c <__libc_init_array+0x3c>)
 800ce66:	1ba4      	subs	r4, r4, r6
 800ce68:	10a4      	asrs	r4, r4, #2
 800ce6a:	2500      	movs	r5, #0
 800ce6c:	42a5      	cmp	r5, r4
 800ce6e:	d109      	bne.n	800ce84 <__libc_init_array+0x24>
 800ce70:	4e0b      	ldr	r6, [pc, #44]	; (800cea0 <__libc_init_array+0x40>)
 800ce72:	4c0c      	ldr	r4, [pc, #48]	; (800cea4 <__libc_init_array+0x44>)
 800ce74:	f001 f83e 	bl	800def4 <_init>
 800ce78:	1ba4      	subs	r4, r4, r6
 800ce7a:	10a4      	asrs	r4, r4, #2
 800ce7c:	2500      	movs	r5, #0
 800ce7e:	42a5      	cmp	r5, r4
 800ce80:	d105      	bne.n	800ce8e <__libc_init_array+0x2e>
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
 800ce84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce88:	4798      	blx	r3
 800ce8a:	3501      	adds	r5, #1
 800ce8c:	e7ee      	b.n	800ce6c <__libc_init_array+0xc>
 800ce8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce92:	4798      	blx	r3
 800ce94:	3501      	adds	r5, #1
 800ce96:	e7f2      	b.n	800ce7e <__libc_init_array+0x1e>
 800ce98:	0800e160 	.word	0x0800e160
 800ce9c:	0800e160 	.word	0x0800e160
 800cea0:	0800e160 	.word	0x0800e160
 800cea4:	0800e164 	.word	0x0800e164

0800cea8 <memset>:
 800cea8:	4402      	add	r2, r0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d100      	bne.n	800ceb2 <memset+0xa>
 800ceb0:	4770      	bx	lr
 800ceb2:	f803 1b01 	strb.w	r1, [r3], #1
 800ceb6:	e7f9      	b.n	800ceac <memset+0x4>

0800ceb8 <cos>:
 800ceb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceba:	eeb0 7b40 	vmov.f64	d7, d0
 800cebe:	ee17 3a90 	vmov	r3, s15
 800cec2:	4a19      	ldr	r2, [pc, #100]	; (800cf28 <cos+0x70>)
 800cec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cec8:	4293      	cmp	r3, r2
 800ceca:	dc04      	bgt.n	800ced6 <cos+0x1e>
 800cecc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800cf20 <cos+0x68>
 800ced0:	f000 faa2 	bl	800d418 <__kernel_cos>
 800ced4:	e004      	b.n	800cee0 <cos+0x28>
 800ced6:	4a15      	ldr	r2, [pc, #84]	; (800cf2c <cos+0x74>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	dd04      	ble.n	800cee6 <cos+0x2e>
 800cedc:	ee30 0b40 	vsub.f64	d0, d0, d0
 800cee0:	b005      	add	sp, #20
 800cee2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cee6:	4668      	mov	r0, sp
 800cee8:	f000 f956 	bl	800d198 <__ieee754_rem_pio2>
 800ceec:	f000 0003 	and.w	r0, r0, #3
 800cef0:	2801      	cmp	r0, #1
 800cef2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cef6:	ed9d 0b00 	vldr	d0, [sp]
 800cefa:	d007      	beq.n	800cf0c <cos+0x54>
 800cefc:	2802      	cmp	r0, #2
 800cefe:	d00a      	beq.n	800cf16 <cos+0x5e>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d0e5      	beq.n	800ced0 <cos+0x18>
 800cf04:	2001      	movs	r0, #1
 800cf06:	f000 fd8f 	bl	800da28 <__kernel_sin>
 800cf0a:	e7e9      	b.n	800cee0 <cos+0x28>
 800cf0c:	f000 fd8c 	bl	800da28 <__kernel_sin>
 800cf10:	eeb1 0b40 	vneg.f64	d0, d0
 800cf14:	e7e4      	b.n	800cee0 <cos+0x28>
 800cf16:	f000 fa7f 	bl	800d418 <__kernel_cos>
 800cf1a:	e7f9      	b.n	800cf10 <cos+0x58>
 800cf1c:	f3af 8000 	nop.w
	...
 800cf28:	3fe921fb 	.word	0x3fe921fb
 800cf2c:	7fefffff 	.word	0x7fefffff

0800cf30 <atan2>:
 800cf30:	f000 b84e 	b.w	800cfd0 <__ieee754_atan2>
 800cf34:	0000      	movs	r0, r0
	...

0800cf38 <sqrt>:
 800cf38:	b500      	push	{lr}
 800cf3a:	ed2d 8b02 	vpush	{d8}
 800cf3e:	eeb0 8b40 	vmov.f64	d8, d0
 800cf42:	b08b      	sub	sp, #44	; 0x2c
 800cf44:	f000 fa64 	bl	800d410 <__ieee754_sqrt>
 800cf48:	4b1f      	ldr	r3, [pc, #124]	; (800cfc8 <sqrt+0x90>)
 800cf4a:	f993 3000 	ldrsb.w	r3, [r3]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	d024      	beq.n	800cf9c <sqrt+0x64>
 800cf52:	eeb4 8b48 	vcmp.f64	d8, d8
 800cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5a:	d61f      	bvs.n	800cf9c <sqrt+0x64>
 800cf5c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800cfc0 <sqrt+0x88>
 800cf60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	d518      	bpl.n	800cf9c <sqrt+0x64>
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	9200      	str	r2, [sp, #0]
 800cf6e:	4a17      	ldr	r2, [pc, #92]	; (800cfcc <sqrt+0x94>)
 800cf70:	9201      	str	r2, [sp, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	9208      	str	r2, [sp, #32]
 800cf76:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cf7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cf7e:	b993      	cbnz	r3, 800cfa6 <sqrt+0x6e>
 800cf80:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf84:	4668      	mov	r0, sp
 800cf86:	f000 ff23 	bl	800ddd0 <matherr>
 800cf8a:	b190      	cbz	r0, 800cfb2 <sqrt+0x7a>
 800cf8c:	9b08      	ldr	r3, [sp, #32]
 800cf8e:	b11b      	cbz	r3, 800cf98 <sqrt+0x60>
 800cf90:	f7ff ff60 	bl	800ce54 <__errno>
 800cf94:	9b08      	ldr	r3, [sp, #32]
 800cf96:	6003      	str	r3, [r0, #0]
 800cf98:	ed9d 0b06 	vldr	d0, [sp, #24]
 800cf9c:	b00b      	add	sp, #44	; 0x2c
 800cf9e:	ecbd 8b02 	vpop	{d8}
 800cfa2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800cfac:	ed8d 6b06 	vstr	d6, [sp, #24]
 800cfb0:	d1e8      	bne.n	800cf84 <sqrt+0x4c>
 800cfb2:	f7ff ff4f 	bl	800ce54 <__errno>
 800cfb6:	2321      	movs	r3, #33	; 0x21
 800cfb8:	6003      	str	r3, [r0, #0]
 800cfba:	e7e7      	b.n	800cf8c <sqrt+0x54>
 800cfbc:	f3af 8000 	nop.w
	...
 800cfc8:	240000b4 	.word	0x240000b4
 800cfcc:	0800df38 	.word	0x0800df38

0800cfd0 <__ieee754_atan2>:
 800cfd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfd2:	ee11 6a10 	vmov	r6, s2
 800cfd6:	ee11 0a90 	vmov	r0, s3
 800cfda:	4273      	negs	r3, r6
 800cfdc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800cfe0:	4333      	orrs	r3, r6
 800cfe2:	4f6b      	ldr	r7, [pc, #428]	; (800d190 <__ieee754_atan2+0x1c0>)
 800cfe4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cfe8:	42bb      	cmp	r3, r7
 800cfea:	ed8d 0b00 	vstr	d0, [sp]
 800cfee:	d80b      	bhi.n	800d008 <__ieee754_atan2+0x38>
 800cff0:	e9dd c500 	ldrd	ip, r5, [sp]
 800cff4:	f1cc 0100 	rsb	r1, ip, #0
 800cff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cffc:	ea41 010c 	orr.w	r1, r1, ip
 800d000:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800d004:	42b9      	cmp	r1, r7
 800d006:	d906      	bls.n	800d016 <__ieee754_atan2+0x46>
 800d008:	ed9d 7b00 	vldr	d7, [sp]
 800d00c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800d010:	ed8d 7b00 	vstr	d7, [sp]
 800d014:	e063      	b.n	800d0de <__ieee754_atan2+0x10e>
 800d016:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800d01a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800d01e:	4331      	orrs	r1, r6
 800d020:	d104      	bne.n	800d02c <__ieee754_atan2+0x5c>
 800d022:	b003      	add	sp, #12
 800d024:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d028:	f000 bd56 	b.w	800dad8 <atan>
 800d02c:	1784      	asrs	r4, r0, #30
 800d02e:	f004 0402 	and.w	r4, r4, #2
 800d032:	ea53 010c 	orrs.w	r1, r3, ip
 800d036:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800d03a:	d109      	bne.n	800d050 <__ieee754_atan2+0x80>
 800d03c:	2c02      	cmp	r4, #2
 800d03e:	d078      	beq.n	800d132 <__ieee754_atan2+0x162>
 800d040:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800d138 <__ieee754_atan2+0x168>
 800d044:	ed9d 6b00 	vldr	d6, [sp]
 800d048:	2c03      	cmp	r4, #3
 800d04a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d04e:	e7df      	b.n	800d010 <__ieee754_atan2+0x40>
 800d050:	ea52 0106 	orrs.w	r1, r2, r6
 800d054:	d107      	bne.n	800d066 <__ieee754_atan2+0x96>
 800d056:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800d140 <__ieee754_atan2+0x170>
 800d05a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800d148 <__ieee754_atan2+0x178>
 800d05e:	2d00      	cmp	r5, #0
 800d060:	fe26 7b07 	vselge.f64	d7, d6, d7
 800d064:	e7d4      	b.n	800d010 <__ieee754_atan2+0x40>
 800d066:	42ba      	cmp	r2, r7
 800d068:	d120      	bne.n	800d0ac <__ieee754_atan2+0xdc>
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d111      	bne.n	800d092 <__ieee754_atan2+0xc2>
 800d06e:	2c02      	cmp	r4, #2
 800d070:	d009      	beq.n	800d086 <__ieee754_atan2+0xb6>
 800d072:	2c03      	cmp	r4, #3
 800d074:	d00a      	beq.n	800d08c <__ieee754_atan2+0xbc>
 800d076:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d150 <__ieee754_atan2+0x180>
 800d07a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800d158 <__ieee754_atan2+0x188>
 800d07e:	2c01      	cmp	r4, #1
 800d080:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d084:	e7c4      	b.n	800d010 <__ieee754_atan2+0x40>
 800d086:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d160 <__ieee754_atan2+0x190>
 800d08a:	e7c1      	b.n	800d010 <__ieee754_atan2+0x40>
 800d08c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d168 <__ieee754_atan2+0x198>
 800d090:	e7be      	b.n	800d010 <__ieee754_atan2+0x40>
 800d092:	2c02      	cmp	r4, #2
 800d094:	d04d      	beq.n	800d132 <__ieee754_atan2+0x162>
 800d096:	2c03      	cmp	r4, #3
 800d098:	d005      	beq.n	800d0a6 <__ieee754_atan2+0xd6>
 800d09a:	2c01      	cmp	r4, #1
 800d09c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800d170 <__ieee754_atan2+0x1a0>
 800d0a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d178 <__ieee754_atan2+0x1a8>
 800d0a4:	e7ec      	b.n	800d080 <__ieee754_atan2+0xb0>
 800d0a6:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800d138 <__ieee754_atan2+0x168>
 800d0aa:	e7b1      	b.n	800d010 <__ieee754_atan2+0x40>
 800d0ac:	42bb      	cmp	r3, r7
 800d0ae:	d0d2      	beq.n	800d056 <__ieee754_atan2+0x86>
 800d0b0:	1a9b      	subs	r3, r3, r2
 800d0b2:	151b      	asrs	r3, r3, #20
 800d0b4:	2b3c      	cmp	r3, #60	; 0x3c
 800d0b6:	dc16      	bgt.n	800d0e6 <__ieee754_atan2+0x116>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	da01      	bge.n	800d0c0 <__ieee754_atan2+0xf0>
 800d0bc:	333c      	adds	r3, #60	; 0x3c
 800d0be:	db17      	blt.n	800d0f0 <__ieee754_atan2+0x120>
 800d0c0:	ed9d 7b00 	vldr	d7, [sp]
 800d0c4:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800d0c8:	f000 fe00 	bl	800dccc <fabs>
 800d0cc:	f000 fd04 	bl	800dad8 <atan>
 800d0d0:	ed8d 0b00 	vstr	d0, [sp]
 800d0d4:	2c01      	cmp	r4, #1
 800d0d6:	d00e      	beq.n	800d0f6 <__ieee754_atan2+0x126>
 800d0d8:	2c02      	cmp	r4, #2
 800d0da:	d014      	beq.n	800d106 <__ieee754_atan2+0x136>
 800d0dc:	b9f4      	cbnz	r4, 800d11c <__ieee754_atan2+0x14c>
 800d0de:	ed9d 0b00 	vldr	d0, [sp]
 800d0e2:	b003      	add	sp, #12
 800d0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d140 <__ieee754_atan2+0x170>
 800d0ea:	ed8d 7b00 	vstr	d7, [sp]
 800d0ee:	e7f1      	b.n	800d0d4 <__ieee754_atan2+0x104>
 800d0f0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d178 <__ieee754_atan2+0x1a8>
 800d0f4:	e7f9      	b.n	800d0ea <__ieee754_atan2+0x11a>
 800d0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0fa:	9901      	ldr	r1, [sp, #4]
 800d0fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d100:	e9cd 2300 	strd	r2, r3, [sp]
 800d104:	e7eb      	b.n	800d0de <__ieee754_atan2+0x10e>
 800d106:	ed9d 6b00 	vldr	d6, [sp]
 800d10a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800d180 <__ieee754_atan2+0x1b0>
 800d10e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d112:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800d188 <__ieee754_atan2+0x1b8>
 800d116:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d11a:	e779      	b.n	800d010 <__ieee754_atan2+0x40>
 800d11c:	ed9d 6b00 	vldr	d6, [sp]
 800d120:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d180 <__ieee754_atan2+0x1b0>
 800d124:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d128:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800d188 <__ieee754_atan2+0x1b8>
 800d12c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d130:	e76e      	b.n	800d010 <__ieee754_atan2+0x40>
 800d132:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d188 <__ieee754_atan2+0x1b8>
 800d136:	e76b      	b.n	800d010 <__ieee754_atan2+0x40>
 800d138:	54442d18 	.word	0x54442d18
 800d13c:	c00921fb 	.word	0xc00921fb
 800d140:	54442d18 	.word	0x54442d18
 800d144:	3ff921fb 	.word	0x3ff921fb
 800d148:	54442d18 	.word	0x54442d18
 800d14c:	bff921fb 	.word	0xbff921fb
 800d150:	54442d18 	.word	0x54442d18
 800d154:	bfe921fb 	.word	0xbfe921fb
 800d158:	54442d18 	.word	0x54442d18
 800d15c:	3fe921fb 	.word	0x3fe921fb
 800d160:	7f3321d2 	.word	0x7f3321d2
 800d164:	4002d97c 	.word	0x4002d97c
 800d168:	7f3321d2 	.word	0x7f3321d2
 800d16c:	c002d97c 	.word	0xc002d97c
 800d170:	00000000 	.word	0x00000000
 800d174:	80000000 	.word	0x80000000
	...
 800d180:	33145c07 	.word	0x33145c07
 800d184:	3ca1a626 	.word	0x3ca1a626
 800d188:	54442d18 	.word	0x54442d18
 800d18c:	400921fb 	.word	0x400921fb
 800d190:	7ff00000 	.word	0x7ff00000
 800d194:	00000000 	.word	0x00000000

0800d198 <__ieee754_rem_pio2>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	eeb0 7b40 	vmov.f64	d7, d0
 800d19e:	ee17 5a90 	vmov	r5, s15
 800d1a2:	4b95      	ldr	r3, [pc, #596]	; (800d3f8 <__ieee754_rem_pio2+0x260>)
 800d1a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1a8:	429e      	cmp	r6, r3
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	dc07      	bgt.n	800d1c0 <__ieee754_rem_pio2+0x28>
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	ed84 0b00 	vstr	d0, [r4]
 800d1b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e01b      	b.n	800d1f8 <__ieee754_rem_pio2+0x60>
 800d1c0:	4b8e      	ldr	r3, [pc, #568]	; (800d3fc <__ieee754_rem_pio2+0x264>)
 800d1c2:	429e      	cmp	r6, r3
 800d1c4:	dc3b      	bgt.n	800d23e <__ieee754_rem_pio2+0xa6>
 800d1c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d1ca:	2d00      	cmp	r5, #0
 800d1cc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d3b8 <__ieee754_rem_pio2+0x220>
 800d1d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d1d4:	dd19      	ble.n	800d20a <__ieee754_rem_pio2+0x72>
 800d1d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d1da:	429e      	cmp	r6, r3
 800d1dc:	d00e      	beq.n	800d1fc <__ieee754_rem_pio2+0x64>
 800d1de:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d3c0 <__ieee754_rem_pio2+0x228>
 800d1e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d1e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d1ea:	ed84 5b00 	vstr	d5, [r4]
 800d1ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	b008      	add	sp, #32
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d3c8 <__ieee754_rem_pio2+0x230>
 800d200:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d204:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d3d0 <__ieee754_rem_pio2+0x238>
 800d208:	e7eb      	b.n	800d1e2 <__ieee754_rem_pio2+0x4a>
 800d20a:	429e      	cmp	r6, r3
 800d20c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d210:	d00e      	beq.n	800d230 <__ieee754_rem_pio2+0x98>
 800d212:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d3c0 <__ieee754_rem_pio2+0x228>
 800d216:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d21a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d21e:	ed84 5b00 	vstr	d5, [r4]
 800d222:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d226:	f04f 30ff 	mov.w	r0, #4294967295
 800d22a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d22e:	e7e3      	b.n	800d1f8 <__ieee754_rem_pio2+0x60>
 800d230:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d3c8 <__ieee754_rem_pio2+0x230>
 800d234:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d238:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d3d0 <__ieee754_rem_pio2+0x238>
 800d23c:	e7eb      	b.n	800d216 <__ieee754_rem_pio2+0x7e>
 800d23e:	4b70      	ldr	r3, [pc, #448]	; (800d400 <__ieee754_rem_pio2+0x268>)
 800d240:	429e      	cmp	r6, r3
 800d242:	dc6c      	bgt.n	800d31e <__ieee754_rem_pio2+0x186>
 800d244:	f000 fd42 	bl	800dccc <fabs>
 800d248:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d24c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d3d8 <__ieee754_rem_pio2+0x240>
 800d250:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d254:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d258:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d25c:	ee17 0a90 	vmov	r0, s15
 800d260:	eeb1 5b44 	vneg.f64	d5, d4
 800d264:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d3b8 <__ieee754_rem_pio2+0x220>
 800d268:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d26c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d3c0 <__ieee754_rem_pio2+0x228>
 800d270:	281f      	cmp	r0, #31
 800d272:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d276:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d27a:	dc08      	bgt.n	800d28e <__ieee754_rem_pio2+0xf6>
 800d27c:	1e42      	subs	r2, r0, #1
 800d27e:	4b61      	ldr	r3, [pc, #388]	; (800d404 <__ieee754_rem_pio2+0x26c>)
 800d280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d284:	42b3      	cmp	r3, r6
 800d286:	d002      	beq.n	800d28e <__ieee754_rem_pio2+0xf6>
 800d288:	ed84 6b00 	vstr	d6, [r4]
 800d28c:	e022      	b.n	800d2d4 <__ieee754_rem_pio2+0x13c>
 800d28e:	ee16 3a90 	vmov	r3, s13
 800d292:	1536      	asrs	r6, r6, #20
 800d294:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d298:	1af3      	subs	r3, r6, r3
 800d29a:	2b10      	cmp	r3, #16
 800d29c:	ddf4      	ble.n	800d288 <__ieee754_rem_pio2+0xf0>
 800d29e:	eeb0 6b40 	vmov.f64	d6, d0
 800d2a2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d3c8 <__ieee754_rem_pio2+0x230>
 800d2a6:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d2aa:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d2ae:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d2b2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d3d0 <__ieee754_rem_pio2+0x238>
 800d2b6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d2ba:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d2be:	ee13 3a90 	vmov	r3, s7
 800d2c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d2c6:	1af6      	subs	r6, r6, r3
 800d2c8:	2e31      	cmp	r6, #49	; 0x31
 800d2ca:	dc17      	bgt.n	800d2fc <__ieee754_rem_pio2+0x164>
 800d2cc:	eeb0 0b46 	vmov.f64	d0, d6
 800d2d0:	ed84 3b00 	vstr	d3, [r4]
 800d2d4:	ed94 6b00 	vldr	d6, [r4]
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d2de:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d2e2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d2e6:	da87      	bge.n	800d1f8 <__ieee754_rem_pio2+0x60>
 800d2e8:	eeb1 6b46 	vneg.f64	d6, d6
 800d2ec:	ed84 6b00 	vstr	d6, [r4]
 800d2f0:	eeb1 7b47 	vneg.f64	d7, d7
 800d2f4:	4240      	negs	r0, r0
 800d2f6:	ed84 7b02 	vstr	d7, [r4, #8]
 800d2fa:	e77d      	b.n	800d1f8 <__ieee754_rem_pio2+0x60>
 800d2fc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d3e0 <__ieee754_rem_pio2+0x248>
 800d300:	eeb0 0b46 	vmov.f64	d0, d6
 800d304:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d308:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d30c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d3e8 <__ieee754_rem_pio2+0x250>
 800d310:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d314:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d318:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d31c:	e7b4      	b.n	800d288 <__ieee754_rem_pio2+0xf0>
 800d31e:	4b3a      	ldr	r3, [pc, #232]	; (800d408 <__ieee754_rem_pio2+0x270>)
 800d320:	429e      	cmp	r6, r3
 800d322:	dd06      	ble.n	800d332 <__ieee754_rem_pio2+0x19a>
 800d324:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d328:	ed80 7b02 	vstr	d7, [r0, #8]
 800d32c:	ed80 7b00 	vstr	d7, [r0]
 800d330:	e744      	b.n	800d1bc <__ieee754_rem_pio2+0x24>
 800d332:	1532      	asrs	r2, r6, #20
 800d334:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d338:	ee10 0a10 	vmov	r0, s0
 800d33c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d340:	ec41 0b17 	vmov	d7, r0, r1
 800d344:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d348:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d3f0 <__ieee754_rem_pio2+0x258>
 800d34c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d350:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d354:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d358:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d35c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d360:	a908      	add	r1, sp, #32
 800d362:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d366:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d36a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d36e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d372:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d376:	2303      	movs	r3, #3
 800d378:	ed31 7b02 	vldmdb	r1!, {d7}
 800d37c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d384:	f103 30ff 	add.w	r0, r3, #4294967295
 800d388:	d013      	beq.n	800d3b2 <__ieee754_rem_pio2+0x21a>
 800d38a:	4920      	ldr	r1, [pc, #128]	; (800d40c <__ieee754_rem_pio2+0x274>)
 800d38c:	9101      	str	r1, [sp, #4]
 800d38e:	2102      	movs	r1, #2
 800d390:	9100      	str	r1, [sp, #0]
 800d392:	a802      	add	r0, sp, #8
 800d394:	4621      	mov	r1, r4
 800d396:	f000 f8ab 	bl	800d4f0 <__kernel_rem_pio2>
 800d39a:	2d00      	cmp	r5, #0
 800d39c:	f6bf af2c 	bge.w	800d1f8 <__ieee754_rem_pio2+0x60>
 800d3a0:	ed94 7b00 	vldr	d7, [r4]
 800d3a4:	eeb1 7b47 	vneg.f64	d7, d7
 800d3a8:	ed84 7b00 	vstr	d7, [r4]
 800d3ac:	ed94 7b02 	vldr	d7, [r4, #8]
 800d3b0:	e79e      	b.n	800d2f0 <__ieee754_rem_pio2+0x158>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	e7e0      	b.n	800d378 <__ieee754_rem_pio2+0x1e0>
 800d3b6:	bf00      	nop
 800d3b8:	54400000 	.word	0x54400000
 800d3bc:	3ff921fb 	.word	0x3ff921fb
 800d3c0:	1a626331 	.word	0x1a626331
 800d3c4:	3dd0b461 	.word	0x3dd0b461
 800d3c8:	1a600000 	.word	0x1a600000
 800d3cc:	3dd0b461 	.word	0x3dd0b461
 800d3d0:	2e037073 	.word	0x2e037073
 800d3d4:	3ba3198a 	.word	0x3ba3198a
 800d3d8:	6dc9c883 	.word	0x6dc9c883
 800d3dc:	3fe45f30 	.word	0x3fe45f30
 800d3e0:	2e000000 	.word	0x2e000000
 800d3e4:	3ba3198a 	.word	0x3ba3198a
 800d3e8:	252049c1 	.word	0x252049c1
 800d3ec:	397b839a 	.word	0x397b839a
 800d3f0:	00000000 	.word	0x00000000
 800d3f4:	41700000 	.word	0x41700000
 800d3f8:	3fe921fb 	.word	0x3fe921fb
 800d3fc:	4002d97b 	.word	0x4002d97b
 800d400:	413921fb 	.word	0x413921fb
 800d404:	0800df40 	.word	0x0800df40
 800d408:	7fefffff 	.word	0x7fefffff
 800d40c:	0800dfc0 	.word	0x0800dfc0

0800d410 <__ieee754_sqrt>:
 800d410:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d414:	4770      	bx	lr
	...

0800d418 <__kernel_cos>:
 800d418:	ee10 1a90 	vmov	r1, s1
 800d41c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d424:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d428:	da05      	bge.n	800d436 <__kernel_cos+0x1e>
 800d42a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d42e:	ee16 3a90 	vmov	r3, s13
 800d432:	2b00      	cmp	r3, #0
 800d434:	d03d      	beq.n	800d4b2 <__kernel_cos+0x9a>
 800d436:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d43a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d43e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d4b8 <__kernel_cos+0xa0>
 800d442:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d446:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d44a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d4c0 <__kernel_cos+0xa8>
 800d44e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d452:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d4c8 <__kernel_cos+0xb0>
 800d456:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d45a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d4d0 <__kernel_cos+0xb8>
 800d45e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d462:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d4d8 <__kernel_cos+0xc0>
 800d466:	4b20      	ldr	r3, [pc, #128]	; (800d4e8 <__kernel_cos+0xd0>)
 800d468:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d46c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d4e0 <__kernel_cos+0xc8>
 800d470:	4299      	cmp	r1, r3
 800d472:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d476:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d47a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d47e:	dc04      	bgt.n	800d48a <__kernel_cos+0x72>
 800d480:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d484:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d488:	4770      	bx	lr
 800d48a:	4b18      	ldr	r3, [pc, #96]	; (800d4ec <__kernel_cos+0xd4>)
 800d48c:	4299      	cmp	r1, r3
 800d48e:	dc0d      	bgt.n	800d4ac <__kernel_cos+0x94>
 800d490:	2200      	movs	r2, #0
 800d492:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d496:	ec43 2b15 	vmov	d5, r2, r3
 800d49a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d49e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4a2:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d4a6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d4aa:	4770      	bx	lr
 800d4ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d4b0:	e7f3      	b.n	800d49a <__kernel_cos+0x82>
 800d4b2:	eeb0 0b47 	vmov.f64	d0, d7
 800d4b6:	4770      	bx	lr
 800d4b8:	be8838d4 	.word	0xbe8838d4
 800d4bc:	bda8fae9 	.word	0xbda8fae9
 800d4c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d4c4:	3e21ee9e 	.word	0x3e21ee9e
 800d4c8:	809c52ad 	.word	0x809c52ad
 800d4cc:	be927e4f 	.word	0xbe927e4f
 800d4d0:	19cb1590 	.word	0x19cb1590
 800d4d4:	3efa01a0 	.word	0x3efa01a0
 800d4d8:	16c15177 	.word	0x16c15177
 800d4dc:	bf56c16c 	.word	0xbf56c16c
 800d4e0:	5555554c 	.word	0x5555554c
 800d4e4:	3fa55555 	.word	0x3fa55555
 800d4e8:	3fd33332 	.word	0x3fd33332
 800d4ec:	3fe90000 	.word	0x3fe90000

0800d4f0 <__kernel_rem_pio2>:
 800d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	ed2d 8b06 	vpush	{d8-d10}
 800d4f8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d4fc:	469b      	mov	fp, r3
 800d4fe:	460e      	mov	r6, r1
 800d500:	4bc7      	ldr	r3, [pc, #796]	; (800d820 <__kernel_rem_pio2+0x330>)
 800d502:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d504:	9002      	str	r0, [sp, #8]
 800d506:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d50a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d50c:	1ed1      	subs	r1, r2, #3
 800d50e:	2318      	movs	r3, #24
 800d510:	f06f 0417 	mvn.w	r4, #23
 800d514:	fb91 f1f3 	sdiv	r1, r1, r3
 800d518:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d51c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d520:	fb01 4404 	mla	r4, r1, r4, r4
 800d524:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d808 <__kernel_rem_pio2+0x318>
 800d528:	4414      	add	r4, r2
 800d52a:	eba1 050a 	sub.w	r5, r1, sl
 800d52e:	aa1a      	add	r2, sp, #104	; 0x68
 800d530:	eb09 070a 	add.w	r7, r9, sl
 800d534:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d538:	4696      	mov	lr, r2
 800d53a:	2300      	movs	r3, #0
 800d53c:	42bb      	cmp	r3, r7
 800d53e:	dd0f      	ble.n	800d560 <__kernel_rem_pio2+0x70>
 800d540:	af6a      	add	r7, sp, #424	; 0x1a8
 800d542:	2200      	movs	r2, #0
 800d544:	454a      	cmp	r2, r9
 800d546:	dc28      	bgt.n	800d59a <__kernel_rem_pio2+0xaa>
 800d548:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d54c:	eb0b 0302 	add.w	r3, fp, r2
 800d550:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d554:	9d02      	ldr	r5, [sp, #8]
 800d556:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d808 <__kernel_rem_pio2+0x318>
 800d55a:	f04f 0c00 	mov.w	ip, #0
 800d55e:	e016      	b.n	800d58e <__kernel_rem_pio2+0x9e>
 800d560:	42dd      	cmn	r5, r3
 800d562:	d409      	bmi.n	800d578 <__kernel_rem_pio2+0x88>
 800d564:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d568:	ee07 2a90 	vmov	s15, r2
 800d56c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d570:	ecae 7b02 	vstmia	lr!, {d7}
 800d574:	3301      	adds	r3, #1
 800d576:	e7e1      	b.n	800d53c <__kernel_rem_pio2+0x4c>
 800d578:	eeb0 7b46 	vmov.f64	d7, d6
 800d57c:	e7f8      	b.n	800d570 <__kernel_rem_pio2+0x80>
 800d57e:	ecb5 5b02 	vldmia	r5!, {d5}
 800d582:	ed33 6b02 	vldmdb	r3!, {d6}
 800d586:	f10c 0c01 	add.w	ip, ip, #1
 800d58a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d58e:	45d4      	cmp	ip, sl
 800d590:	ddf5      	ble.n	800d57e <__kernel_rem_pio2+0x8e>
 800d592:	eca7 7b02 	vstmia	r7!, {d7}
 800d596:	3201      	adds	r2, #1
 800d598:	e7d4      	b.n	800d544 <__kernel_rem_pio2+0x54>
 800d59a:	ab06      	add	r3, sp, #24
 800d59c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d5a0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d810 <__kernel_rem_pio2+0x320>
 800d5a4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d818 <__kernel_rem_pio2+0x328>
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d5ae:	9303      	str	r3, [sp, #12]
 800d5b0:	464d      	mov	r5, r9
 800d5b2:	ab92      	add	r3, sp, #584	; 0x248
 800d5b4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d5b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d5bc:	3f01      	subs	r7, #1
 800d5be:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d5c2:	00ff      	lsls	r7, r7, #3
 800d5c4:	ab92      	add	r3, sp, #584	; 0x248
 800d5c6:	19da      	adds	r2, r3, r7
 800d5c8:	3a98      	subs	r2, #152	; 0x98
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	1ae9      	subs	r1, r5, r3
 800d5ce:	2900      	cmp	r1, #0
 800d5d0:	dc4e      	bgt.n	800d670 <__kernel_rem_pio2+0x180>
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fc00 	bl	800ddd8 <scalbn>
 800d5d8:	eeb0 8b40 	vmov.f64	d8, d0
 800d5dc:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d5e0:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d5e4:	f000 fb7c 	bl	800dce0 <floor>
 800d5e8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d5ec:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d5f0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d5f4:	2c00      	cmp	r4, #0
 800d5f6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d5fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d602:	dd4a      	ble.n	800d69a <__kernel_rem_pio2+0x1aa>
 800d604:	1e69      	subs	r1, r5, #1
 800d606:	ab06      	add	r3, sp, #24
 800d608:	f1c4 0018 	rsb	r0, r4, #24
 800d60c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d610:	9a01      	ldr	r2, [sp, #4]
 800d612:	fa4c f300 	asr.w	r3, ip, r0
 800d616:	441a      	add	r2, r3
 800d618:	4083      	lsls	r3, r0
 800d61a:	9201      	str	r2, [sp, #4]
 800d61c:	ebac 0203 	sub.w	r2, ip, r3
 800d620:	ab06      	add	r3, sp, #24
 800d622:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d626:	f1c4 0317 	rsb	r3, r4, #23
 800d62a:	fa42 f803 	asr.w	r8, r2, r3
 800d62e:	f1b8 0f00 	cmp.w	r8, #0
 800d632:	dd43      	ble.n	800d6bc <__kernel_rem_pio2+0x1cc>
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	2000      	movs	r0, #0
 800d638:	3301      	adds	r3, #1
 800d63a:	9301      	str	r3, [sp, #4]
 800d63c:	4601      	mov	r1, r0
 800d63e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d642:	4285      	cmp	r5, r0
 800d644:	dc6e      	bgt.n	800d724 <__kernel_rem_pio2+0x234>
 800d646:	2c00      	cmp	r4, #0
 800d648:	dd04      	ble.n	800d654 <__kernel_rem_pio2+0x164>
 800d64a:	2c01      	cmp	r4, #1
 800d64c:	d07f      	beq.n	800d74e <__kernel_rem_pio2+0x25e>
 800d64e:	2c02      	cmp	r4, #2
 800d650:	f000 8087 	beq.w	800d762 <__kernel_rem_pio2+0x272>
 800d654:	f1b8 0f02 	cmp.w	r8, #2
 800d658:	d130      	bne.n	800d6bc <__kernel_rem_pio2+0x1cc>
 800d65a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d65e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d662:	b359      	cbz	r1, 800d6bc <__kernel_rem_pio2+0x1cc>
 800d664:	4620      	mov	r0, r4
 800d666:	f000 fbb7 	bl	800ddd8 <scalbn>
 800d66a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d66e:	e025      	b.n	800d6bc <__kernel_rem_pio2+0x1cc>
 800d670:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d674:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d678:	a806      	add	r0, sp, #24
 800d67a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d67e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d682:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d686:	ee10 1a10 	vmov	r1, s0
 800d68a:	ed32 0b02 	vldmdb	r2!, {d0}
 800d68e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d692:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d696:	3301      	adds	r3, #1
 800d698:	e798      	b.n	800d5cc <__kernel_rem_pio2+0xdc>
 800d69a:	d106      	bne.n	800d6aa <__kernel_rem_pio2+0x1ba>
 800d69c:	1e6b      	subs	r3, r5, #1
 800d69e:	aa06      	add	r2, sp, #24
 800d6a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d6a4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d6a8:	e7c1      	b.n	800d62e <__kernel_rem_pio2+0x13e>
 800d6aa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d6ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b6:	da32      	bge.n	800d71e <__kernel_rem_pio2+0x22e>
 800d6b8:	f04f 0800 	mov.w	r8, #0
 800d6bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c4:	f040 80b0 	bne.w	800d828 <__kernel_rem_pio2+0x338>
 800d6c8:	1e6b      	subs	r3, r5, #1
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4548      	cmp	r0, r9
 800d6d0:	da4e      	bge.n	800d770 <__kernel_rem_pio2+0x280>
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	f000 8088 	beq.w	800d7e8 <__kernel_rem_pio2+0x2f8>
 800d6d8:	aa06      	add	r2, sp, #24
 800d6da:	3c18      	subs	r4, #24
 800d6dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d6e0:	2900      	cmp	r1, #0
 800d6e2:	f000 808e 	beq.w	800d802 <__kernel_rem_pio2+0x312>
 800d6e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	9302      	str	r3, [sp, #8]
 800d6ee:	f000 fb73 	bl	800ddd8 <scalbn>
 800d6f2:	9b02      	ldr	r3, [sp, #8]
 800d6f4:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d6f6:	00d9      	lsls	r1, r3, #3
 800d6f8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d810 <__kernel_rem_pio2+0x320>
 800d6fc:	1850      	adds	r0, r2, r1
 800d6fe:	f100 0508 	add.w	r5, r0, #8
 800d702:	461c      	mov	r4, r3
 800d704:	2c00      	cmp	r4, #0
 800d706:	f280 80bd 	bge.w	800d884 <__kernel_rem_pio2+0x394>
 800d70a:	2500      	movs	r5, #0
 800d70c:	1b5c      	subs	r4, r3, r5
 800d70e:	2c00      	cmp	r4, #0
 800d710:	f2c0 80dd 	blt.w	800d8ce <__kernel_rem_pio2+0x3de>
 800d714:	4f43      	ldr	r7, [pc, #268]	; (800d824 <__kernel_rem_pio2+0x334>)
 800d716:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d808 <__kernel_rem_pio2+0x318>
 800d71a:	2400      	movs	r4, #0
 800d71c:	e0cb      	b.n	800d8b6 <__kernel_rem_pio2+0x3c6>
 800d71e:	f04f 0802 	mov.w	r8, #2
 800d722:	e787      	b.n	800d634 <__kernel_rem_pio2+0x144>
 800d724:	ab06      	add	r3, sp, #24
 800d726:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d72a:	b949      	cbnz	r1, 800d740 <__kernel_rem_pio2+0x250>
 800d72c:	b12b      	cbz	r3, 800d73a <__kernel_rem_pio2+0x24a>
 800d72e:	aa06      	add	r2, sp, #24
 800d730:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d734:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d738:	2301      	movs	r3, #1
 800d73a:	3001      	adds	r0, #1
 800d73c:	4619      	mov	r1, r3
 800d73e:	e780      	b.n	800d642 <__kernel_rem_pio2+0x152>
 800d740:	aa06      	add	r2, sp, #24
 800d742:	ebac 0303 	sub.w	r3, ip, r3
 800d746:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d74a:	460b      	mov	r3, r1
 800d74c:	e7f5      	b.n	800d73a <__kernel_rem_pio2+0x24a>
 800d74e:	1e68      	subs	r0, r5, #1
 800d750:	ab06      	add	r3, sp, #24
 800d752:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d756:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d75a:	aa06      	add	r2, sp, #24
 800d75c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d760:	e778      	b.n	800d654 <__kernel_rem_pio2+0x164>
 800d762:	1e68      	subs	r0, r5, #1
 800d764:	ab06      	add	r3, sp, #24
 800d766:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d76a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d76e:	e7f4      	b.n	800d75a <__kernel_rem_pio2+0x26a>
 800d770:	a906      	add	r1, sp, #24
 800d772:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d776:	3801      	subs	r0, #1
 800d778:	430a      	orrs	r2, r1
 800d77a:	e7a8      	b.n	800d6ce <__kernel_rem_pio2+0x1de>
 800d77c:	f10c 0c01 	add.w	ip, ip, #1
 800d780:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d784:	2a00      	cmp	r2, #0
 800d786:	d0f9      	beq.n	800d77c <__kernel_rem_pio2+0x28c>
 800d788:	eb0b 0305 	add.w	r3, fp, r5
 800d78c:	aa1a      	add	r2, sp, #104	; 0x68
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	1898      	adds	r0, r3, r2
 800d792:	3008      	adds	r0, #8
 800d794:	1c69      	adds	r1, r5, #1
 800d796:	3708      	adds	r7, #8
 800d798:	2200      	movs	r2, #0
 800d79a:	4465      	add	r5, ip
 800d79c:	9005      	str	r0, [sp, #20]
 800d79e:	428d      	cmp	r5, r1
 800d7a0:	f6ff af07 	blt.w	800d5b2 <__kernel_rem_pio2+0xc2>
 800d7a4:	a81a      	add	r0, sp, #104	; 0x68
 800d7a6:	eb02 0c03 	add.w	ip, r2, r3
 800d7aa:	4484      	add	ip, r0
 800d7ac:	9803      	ldr	r0, [sp, #12]
 800d7ae:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d7b2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d7b6:	9001      	str	r0, [sp, #4]
 800d7b8:	ee07 0a90 	vmov	s15, r0
 800d7bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d7c0:	9805      	ldr	r0, [sp, #20]
 800d7c2:	ed8c 7b00 	vstr	d7, [ip]
 800d7c6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d808 <__kernel_rem_pio2+0x318>
 800d7ca:	eb00 0802 	add.w	r8, r0, r2
 800d7ce:	f04f 0c00 	mov.w	ip, #0
 800d7d2:	45d4      	cmp	ip, sl
 800d7d4:	dd0c      	ble.n	800d7f0 <__kernel_rem_pio2+0x300>
 800d7d6:	eb02 0c07 	add.w	ip, r2, r7
 800d7da:	a86a      	add	r0, sp, #424	; 0x1a8
 800d7dc:	4484      	add	ip, r0
 800d7de:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d7e2:	3101      	adds	r1, #1
 800d7e4:	3208      	adds	r2, #8
 800d7e6:	e7da      	b.n	800d79e <__kernel_rem_pio2+0x2ae>
 800d7e8:	9b04      	ldr	r3, [sp, #16]
 800d7ea:	f04f 0c01 	mov.w	ip, #1
 800d7ee:	e7c7      	b.n	800d780 <__kernel_rem_pio2+0x290>
 800d7f0:	ecbe 5b02 	vldmia	lr!, {d5}
 800d7f4:	ed38 6b02 	vldmdb	r8!, {d6}
 800d7f8:	f10c 0c01 	add.w	ip, ip, #1
 800d7fc:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d800:	e7e7      	b.n	800d7d2 <__kernel_rem_pio2+0x2e2>
 800d802:	3b01      	subs	r3, #1
 800d804:	e768      	b.n	800d6d8 <__kernel_rem_pio2+0x1e8>
 800d806:	bf00      	nop
	...
 800d814:	3e700000 	.word	0x3e700000
 800d818:	00000000 	.word	0x00000000
 800d81c:	41700000 	.word	0x41700000
 800d820:	0800e108 	.word	0x0800e108
 800d824:	0800e0c8 	.word	0x0800e0c8
 800d828:	4260      	negs	r0, r4
 800d82a:	eeb0 0b48 	vmov.f64	d0, d8
 800d82e:	f000 fad3 	bl	800ddd8 <scalbn>
 800d832:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800da10 <__kernel_rem_pio2+0x520>
 800d836:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83e:	db18      	blt.n	800d872 <__kernel_rem_pio2+0x382>
 800d840:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800da18 <__kernel_rem_pio2+0x528>
 800d844:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d848:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d84c:	aa06      	add	r2, sp, #24
 800d84e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d852:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d856:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d85a:	a906      	add	r1, sp, #24
 800d85c:	ee10 3a10 	vmov	r3, s0
 800d860:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d864:	1c6b      	adds	r3, r5, #1
 800d866:	ee17 2a10 	vmov	r2, s14
 800d86a:	3418      	adds	r4, #24
 800d86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d870:	e739      	b.n	800d6e6 <__kernel_rem_pio2+0x1f6>
 800d872:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d876:	aa06      	add	r2, sp, #24
 800d878:	ee10 3a10 	vmov	r3, s0
 800d87c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d880:	462b      	mov	r3, r5
 800d882:	e730      	b.n	800d6e6 <__kernel_rem_pio2+0x1f6>
 800d884:	aa06      	add	r2, sp, #24
 800d886:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d88a:	9202      	str	r2, [sp, #8]
 800d88c:	ee07 2a90 	vmov	s15, r2
 800d890:	3c01      	subs	r4, #1
 800d892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d896:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d89a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d89e:	ed25 7b02 	vstmdb	r5!, {d7}
 800d8a2:	e72f      	b.n	800d704 <__kernel_rem_pio2+0x214>
 800d8a4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d8a8:	ecb7 5b02 	vldmia	r7!, {d5}
 800d8ac:	ed9c 6b00 	vldr	d6, [ip]
 800d8b0:	3401      	adds	r4, #1
 800d8b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d8b6:	454c      	cmp	r4, r9
 800d8b8:	dc01      	bgt.n	800d8be <__kernel_rem_pio2+0x3ce>
 800d8ba:	42a5      	cmp	r5, r4
 800d8bc:	daf2      	bge.n	800d8a4 <__kernel_rem_pio2+0x3b4>
 800d8be:	aa42      	add	r2, sp, #264	; 0x108
 800d8c0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d8c4:	ed84 7b00 	vstr	d7, [r4]
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	3808      	subs	r0, #8
 800d8cc:	e71e      	b.n	800d70c <__kernel_rem_pio2+0x21c>
 800d8ce:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d8d0:	2a03      	cmp	r2, #3
 800d8d2:	d84e      	bhi.n	800d972 <__kernel_rem_pio2+0x482>
 800d8d4:	e8df f002 	tbb	[pc, r2]
 800d8d8:	021f1f3e 	.word	0x021f1f3e
 800d8dc:	3108      	adds	r1, #8
 800d8de:	aa42      	add	r2, sp, #264	; 0x108
 800d8e0:	4411      	add	r1, r2
 800d8e2:	4608      	mov	r0, r1
 800d8e4:	461c      	mov	r4, r3
 800d8e6:	2c00      	cmp	r4, #0
 800d8e8:	dc61      	bgt.n	800d9ae <__kernel_rem_pio2+0x4be>
 800d8ea:	4608      	mov	r0, r1
 800d8ec:	461c      	mov	r4, r3
 800d8ee:	2c01      	cmp	r4, #1
 800d8f0:	dc6d      	bgt.n	800d9ce <__kernel_rem_pio2+0x4de>
 800d8f2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800da20 <__kernel_rem_pio2+0x530>
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	dc79      	bgt.n	800d9ee <__kernel_rem_pio2+0x4fe>
 800d8fa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d8fe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d902:	f1b8 0f00 	cmp.w	r8, #0
 800d906:	d178      	bne.n	800d9fa <__kernel_rem_pio2+0x50a>
 800d908:	ed86 5b00 	vstr	d5, [r6]
 800d90c:	ed86 6b02 	vstr	d6, [r6, #8]
 800d910:	ed86 7b04 	vstr	d7, [r6, #16]
 800d914:	e02d      	b.n	800d972 <__kernel_rem_pio2+0x482>
 800d916:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800da20 <__kernel_rem_pio2+0x530>
 800d91a:	3108      	adds	r1, #8
 800d91c:	aa42      	add	r2, sp, #264	; 0x108
 800d91e:	4411      	add	r1, r2
 800d920:	4618      	mov	r0, r3
 800d922:	2800      	cmp	r0, #0
 800d924:	da34      	bge.n	800d990 <__kernel_rem_pio2+0x4a0>
 800d926:	f1b8 0f00 	cmp.w	r8, #0
 800d92a:	d037      	beq.n	800d99c <__kernel_rem_pio2+0x4ac>
 800d92c:	eeb1 7b46 	vneg.f64	d7, d6
 800d930:	ed86 7b00 	vstr	d7, [r6]
 800d934:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d938:	a844      	add	r0, sp, #272	; 0x110
 800d93a:	2101      	movs	r1, #1
 800d93c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d940:	428b      	cmp	r3, r1
 800d942:	da2e      	bge.n	800d9a2 <__kernel_rem_pio2+0x4b2>
 800d944:	f1b8 0f00 	cmp.w	r8, #0
 800d948:	d001      	beq.n	800d94e <__kernel_rem_pio2+0x45e>
 800d94a:	eeb1 7b47 	vneg.f64	d7, d7
 800d94e:	ed86 7b02 	vstr	d7, [r6, #8]
 800d952:	e00e      	b.n	800d972 <__kernel_rem_pio2+0x482>
 800d954:	aa92      	add	r2, sp, #584	; 0x248
 800d956:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800da20 <__kernel_rem_pio2+0x530>
 800d95a:	4411      	add	r1, r2
 800d95c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d960:	2b00      	cmp	r3, #0
 800d962:	da0f      	bge.n	800d984 <__kernel_rem_pio2+0x494>
 800d964:	f1b8 0f00 	cmp.w	r8, #0
 800d968:	d001      	beq.n	800d96e <__kernel_rem_pio2+0x47e>
 800d96a:	eeb1 7b47 	vneg.f64	d7, d7
 800d96e:	ed86 7b00 	vstr	d7, [r6]
 800d972:	9b01      	ldr	r3, [sp, #4]
 800d974:	f003 0007 	and.w	r0, r3, #7
 800d978:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800d97c:	ecbd 8b06 	vpop	{d8-d10}
 800d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d984:	ed31 6b02 	vldmdb	r1!, {d6}
 800d988:	3b01      	subs	r3, #1
 800d98a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d98e:	e7e7      	b.n	800d960 <__kernel_rem_pio2+0x470>
 800d990:	ed31 7b02 	vldmdb	r1!, {d7}
 800d994:	3801      	subs	r0, #1
 800d996:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d99a:	e7c2      	b.n	800d922 <__kernel_rem_pio2+0x432>
 800d99c:	eeb0 7b46 	vmov.f64	d7, d6
 800d9a0:	e7c6      	b.n	800d930 <__kernel_rem_pio2+0x440>
 800d9a2:	ecb0 6b02 	vldmia	r0!, {d6}
 800d9a6:	3101      	adds	r1, #1
 800d9a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d9ac:	e7c8      	b.n	800d940 <__kernel_rem_pio2+0x450>
 800d9ae:	ed10 7b04 	vldr	d7, [r0, #-16]
 800d9b2:	ed30 5b02 	vldmdb	r0!, {d5}
 800d9b6:	3c01      	subs	r4, #1
 800d9b8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d9bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9c0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800d9c4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d9c8:	ed80 7b00 	vstr	d7, [r0]
 800d9cc:	e78b      	b.n	800d8e6 <__kernel_rem_pio2+0x3f6>
 800d9ce:	ed10 7b04 	vldr	d7, [r0, #-16]
 800d9d2:	ed30 5b02 	vldmdb	r0!, {d5}
 800d9d6:	3c01      	subs	r4, #1
 800d9d8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d9dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9e0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800d9e4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d9e8:	ed80 7b00 	vstr	d7, [r0]
 800d9ec:	e77f      	b.n	800d8ee <__kernel_rem_pio2+0x3fe>
 800d9ee:	ed31 6b02 	vldmdb	r1!, {d6}
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d9f8:	e77d      	b.n	800d8f6 <__kernel_rem_pio2+0x406>
 800d9fa:	eeb1 5b45 	vneg.f64	d5, d5
 800d9fe:	eeb1 6b46 	vneg.f64	d6, d6
 800da02:	ed86 5b00 	vstr	d5, [r6]
 800da06:	eeb1 7b47 	vneg.f64	d7, d7
 800da0a:	ed86 6b02 	vstr	d6, [r6, #8]
 800da0e:	e77f      	b.n	800d910 <__kernel_rem_pio2+0x420>
 800da10:	00000000 	.word	0x00000000
 800da14:	41700000 	.word	0x41700000
 800da18:	00000000 	.word	0x00000000
 800da1c:	3e700000 	.word	0x3e700000
	...

0800da28 <__kernel_sin>:
 800da28:	ee10 3a90 	vmov	r3, s1
 800da2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da30:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800da34:	da04      	bge.n	800da40 <__kernel_sin+0x18>
 800da36:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800da3a:	ee17 3a90 	vmov	r3, s15
 800da3e:	b35b      	cbz	r3, 800da98 <__kernel_sin+0x70>
 800da40:	ee20 6b00 	vmul.f64	d6, d0, d0
 800da44:	ee20 5b06 	vmul.f64	d5, d0, d6
 800da48:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800daa0 <__kernel_sin+0x78>
 800da4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800daa8 <__kernel_sin+0x80>
 800da50:	eea6 4b07 	vfma.f64	d4, d6, d7
 800da54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dab0 <__kernel_sin+0x88>
 800da58:	eea4 7b06 	vfma.f64	d7, d4, d6
 800da5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dab8 <__kernel_sin+0x90>
 800da60:	eea7 4b06 	vfma.f64	d4, d7, d6
 800da64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dac0 <__kernel_sin+0x98>
 800da68:	eea4 7b06 	vfma.f64	d7, d4, d6
 800da6c:	b930      	cbnz	r0, 800da7c <__kernel_sin+0x54>
 800da6e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dac8 <__kernel_sin+0xa0>
 800da72:	eea6 4b07 	vfma.f64	d4, d6, d7
 800da76:	eea4 0b05 	vfma.f64	d0, d4, d5
 800da7a:	4770      	bx	lr
 800da7c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800da80:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800da84:	eea1 7b04 	vfma.f64	d7, d1, d4
 800da88:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800da8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800dad0 <__kernel_sin+0xa8>
 800da90:	eea5 1b07 	vfma.f64	d1, d5, d7
 800da94:	ee30 0b41 	vsub.f64	d0, d0, d1
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w
 800daa0:	5acfd57c 	.word	0x5acfd57c
 800daa4:	3de5d93a 	.word	0x3de5d93a
 800daa8:	8a2b9ceb 	.word	0x8a2b9ceb
 800daac:	be5ae5e6 	.word	0xbe5ae5e6
 800dab0:	57b1fe7d 	.word	0x57b1fe7d
 800dab4:	3ec71de3 	.word	0x3ec71de3
 800dab8:	19c161d5 	.word	0x19c161d5
 800dabc:	bf2a01a0 	.word	0xbf2a01a0
 800dac0:	1110f8a6 	.word	0x1110f8a6
 800dac4:	3f811111 	.word	0x3f811111
 800dac8:	55555549 	.word	0x55555549
 800dacc:	bfc55555 	.word	0xbfc55555
 800dad0:	55555549 	.word	0x55555549
 800dad4:	3fc55555 	.word	0x3fc55555

0800dad8 <atan>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	eeb0 7b40 	vmov.f64	d7, d0
 800dade:	ee17 5a90 	vmov	r5, s15
 800dae2:	4b73      	ldr	r3, [pc, #460]	; (800dcb0 <atan+0x1d8>)
 800dae4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dae8:	429c      	cmp	r4, r3
 800daea:	dd13      	ble.n	800db14 <atan+0x3c>
 800daec:	4b71      	ldr	r3, [pc, #452]	; (800dcb4 <atan+0x1dc>)
 800daee:	429c      	cmp	r4, r3
 800daf0:	dc03      	bgt.n	800dafa <atan+0x22>
 800daf2:	d107      	bne.n	800db04 <atan+0x2c>
 800daf4:	ee10 3a10 	vmov	r3, s0
 800daf8:	b123      	cbz	r3, 800db04 <atan+0x2c>
 800dafa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dafe:	eeb0 0b47 	vmov.f64	d0, d7
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800dc40 <atan+0x168>
 800db08:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800dc48 <atan+0x170>
 800db0c:	2d00      	cmp	r5, #0
 800db0e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800db12:	e7f4      	b.n	800dafe <atan+0x26>
 800db14:	4b68      	ldr	r3, [pc, #416]	; (800dcb8 <atan+0x1e0>)
 800db16:	429c      	cmp	r4, r3
 800db18:	dc11      	bgt.n	800db3e <atan+0x66>
 800db1a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db1e:	429c      	cmp	r4, r3
 800db20:	dc0a      	bgt.n	800db38 <atan+0x60>
 800db22:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800db26:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800dc50 <atan+0x178>
 800db2a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800db2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800db32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db36:	dce2      	bgt.n	800dafe <atan+0x26>
 800db38:	f04f 33ff 	mov.w	r3, #4294967295
 800db3c:	e013      	b.n	800db66 <atan+0x8e>
 800db3e:	f000 f8c5 	bl	800dccc <fabs>
 800db42:	4b5e      	ldr	r3, [pc, #376]	; (800dcbc <atan+0x1e4>)
 800db44:	429c      	cmp	r4, r3
 800db46:	dc4f      	bgt.n	800dbe8 <atan+0x110>
 800db48:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db4c:	429c      	cmp	r4, r3
 800db4e:	dc41      	bgt.n	800dbd4 <atan+0xfc>
 800db50:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800db54:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800db58:	2300      	movs	r3, #0
 800db5a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800db5e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800db62:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800db66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dc58 <atan+0x180>
 800db6a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800db6e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800db72:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dc60 <atan+0x188>
 800db76:	eea5 3b06 	vfma.f64	d3, d5, d6
 800db7a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800dc68 <atan+0x190>
 800db7e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800db82:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dc70 <atan+0x198>
 800db86:	eea6 3b05 	vfma.f64	d3, d6, d5
 800db8a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800dc78 <atan+0x1a0>
 800db8e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800db92:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dc80 <atan+0x1a8>
 800db96:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dc88 <atan+0x1b0>
 800db9a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800db9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dc90 <atan+0x1b8>
 800dba2:	eea5 2b06 	vfma.f64	d2, d5, d6
 800dba6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dc98 <atan+0x1c0>
 800dbaa:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dbae:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dca0 <atan+0x1c8>
 800dbb2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800dbb6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dca8 <atan+0x1d0>
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dbc0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800dbc4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800dbc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dbcc:	d121      	bne.n	800dc12 <atan+0x13a>
 800dbce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dbd2:	e794      	b.n	800dafe <atan+0x26>
 800dbd4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dbd8:	2301      	movs	r3, #1
 800dbda:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dbde:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dbe2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dbe6:	e7be      	b.n	800db66 <atan+0x8e>
 800dbe8:	4b35      	ldr	r3, [pc, #212]	; (800dcc0 <atan+0x1e8>)
 800dbea:	429c      	cmp	r4, r3
 800dbec:	dc0b      	bgt.n	800dc06 <atan+0x12e>
 800dbee:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dbf2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dbf6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800dbfa:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dbfe:	2302      	movs	r3, #2
 800dc00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dc04:	e7af      	b.n	800db66 <atan+0x8e>
 800dc06:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dc0a:	2303      	movs	r3, #3
 800dc0c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc10:	e7a9      	b.n	800db66 <atan+0x8e>
 800dc12:	4a2c      	ldr	r2, [pc, #176]	; (800dcc4 <atan+0x1ec>)
 800dc14:	492c      	ldr	r1, [pc, #176]	; (800dcc8 <atan+0x1f0>)
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	441a      	add	r2, r3
 800dc1a:	440b      	add	r3, r1
 800dc1c:	ed93 5b00 	vldr	d5, [r3]
 800dc20:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc24:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc28:	ed92 6b00 	vldr	d6, [r2]
 800dc2c:	2d00      	cmp	r5, #0
 800dc2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc32:	bfb8      	it	lt
 800dc34:	eeb1 7b47 	vneglt.f64	d7, d7
 800dc38:	e761      	b.n	800dafe <atan+0x26>
 800dc3a:	bf00      	nop
 800dc3c:	f3af 8000 	nop.w
 800dc40:	54442d18 	.word	0x54442d18
 800dc44:	bff921fb 	.word	0xbff921fb
 800dc48:	54442d18 	.word	0x54442d18
 800dc4c:	3ff921fb 	.word	0x3ff921fb
 800dc50:	8800759c 	.word	0x8800759c
 800dc54:	7e37e43c 	.word	0x7e37e43c
 800dc58:	e322da11 	.word	0xe322da11
 800dc5c:	3f90ad3a 	.word	0x3f90ad3a
 800dc60:	24760deb 	.word	0x24760deb
 800dc64:	3fa97b4b 	.word	0x3fa97b4b
 800dc68:	a0d03d51 	.word	0xa0d03d51
 800dc6c:	3fb10d66 	.word	0x3fb10d66
 800dc70:	c54c206e 	.word	0xc54c206e
 800dc74:	3fb745cd 	.word	0x3fb745cd
 800dc78:	920083ff 	.word	0x920083ff
 800dc7c:	3fc24924 	.word	0x3fc24924
 800dc80:	5555550d 	.word	0x5555550d
 800dc84:	3fd55555 	.word	0x3fd55555
 800dc88:	52defd9a 	.word	0x52defd9a
 800dc8c:	bfadde2d 	.word	0xbfadde2d
 800dc90:	2c6a6c2f 	.word	0x2c6a6c2f
 800dc94:	bfa2b444 	.word	0xbfa2b444
 800dc98:	af749a6d 	.word	0xaf749a6d
 800dc9c:	bfb3b0f2 	.word	0xbfb3b0f2
 800dca0:	fe231671 	.word	0xfe231671
 800dca4:	bfbc71c6 	.word	0xbfbc71c6
 800dca8:	9998ebc4 	.word	0x9998ebc4
 800dcac:	bfc99999 	.word	0xbfc99999
 800dcb0:	440fffff 	.word	0x440fffff
 800dcb4:	7ff00000 	.word	0x7ff00000
 800dcb8:	3fdbffff 	.word	0x3fdbffff
 800dcbc:	3ff2ffff 	.word	0x3ff2ffff
 800dcc0:	40037fff 	.word	0x40037fff
 800dcc4:	0800e118 	.word	0x0800e118
 800dcc8:	0800e138 	.word	0x0800e138

0800dccc <fabs>:
 800dccc:	ec51 0b10 	vmov	r0, r1, d0
 800dcd0:	ee10 2a10 	vmov	r2, s0
 800dcd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dcd8:	ec43 2b10 	vmov	d0, r2, r3
 800dcdc:	4770      	bx	lr
	...

0800dce0 <floor>:
 800dce0:	ee10 1a90 	vmov	r1, s1
 800dce4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dce8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800dcec:	2b13      	cmp	r3, #19
 800dcee:	b530      	push	{r4, r5, lr}
 800dcf0:	ee10 0a10 	vmov	r0, s0
 800dcf4:	ee10 5a10 	vmov	r5, s0
 800dcf8:	dc33      	bgt.n	800dd62 <floor+0x82>
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	da17      	bge.n	800dd2e <floor+0x4e>
 800dcfe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ddc0 <floor+0xe0>
 800dd02:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dd06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0e:	dd09      	ble.n	800dd24 <floor+0x44>
 800dd10:	2900      	cmp	r1, #0
 800dd12:	da50      	bge.n	800ddb6 <floor+0xd6>
 800dd14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd18:	4a2b      	ldr	r2, [pc, #172]	; (800ddc8 <floor+0xe8>)
 800dd1a:	4303      	orrs	r3, r0
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	4283      	cmp	r3, r0
 800dd20:	bf18      	it	ne
 800dd22:	4611      	movne	r1, r2
 800dd24:	460b      	mov	r3, r1
 800dd26:	4602      	mov	r2, r0
 800dd28:	ec43 2b10 	vmov	d0, r2, r3
 800dd2c:	e020      	b.n	800dd70 <floor+0x90>
 800dd2e:	4a27      	ldr	r2, [pc, #156]	; (800ddcc <floor+0xec>)
 800dd30:	411a      	asrs	r2, r3
 800dd32:	ea01 0402 	and.w	r4, r1, r2
 800dd36:	4304      	orrs	r4, r0
 800dd38:	d01a      	beq.n	800dd70 <floor+0x90>
 800dd3a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ddc0 <floor+0xe0>
 800dd3e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dd42:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4a:	ddeb      	ble.n	800dd24 <floor+0x44>
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	bfbe      	ittt	lt
 800dd50:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800dd54:	fa40 f303 	asrlt.w	r3, r0, r3
 800dd58:	18c9      	addlt	r1, r1, r3
 800dd5a:	ea21 0102 	bic.w	r1, r1, r2
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e7e0      	b.n	800dd24 <floor+0x44>
 800dd62:	2b33      	cmp	r3, #51	; 0x33
 800dd64:	dd05      	ble.n	800dd72 <floor+0x92>
 800dd66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd6a:	d101      	bne.n	800dd70 <floor+0x90>
 800dd6c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dd70:	bd30      	pop	{r4, r5, pc}
 800dd72:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800dd76:	f04f 32ff 	mov.w	r2, #4294967295
 800dd7a:	40e2      	lsrs	r2, r4
 800dd7c:	4202      	tst	r2, r0
 800dd7e:	d0f7      	beq.n	800dd70 <floor+0x90>
 800dd80:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ddc0 <floor+0xe0>
 800dd84:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dd88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd90:	ddc8      	ble.n	800dd24 <floor+0x44>
 800dd92:	2900      	cmp	r1, #0
 800dd94:	da02      	bge.n	800dd9c <floor+0xbc>
 800dd96:	2b14      	cmp	r3, #20
 800dd98:	d103      	bne.n	800dda2 <floor+0xc2>
 800dd9a:	3101      	adds	r1, #1
 800dd9c:	ea20 0002 	bic.w	r0, r0, r2
 800dda0:	e7c0      	b.n	800dd24 <floor+0x44>
 800dda2:	2401      	movs	r4, #1
 800dda4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dda8:	fa04 f303 	lsl.w	r3, r4, r3
 800ddac:	4418      	add	r0, r3
 800ddae:	42a8      	cmp	r0, r5
 800ddb0:	bf38      	it	cc
 800ddb2:	1909      	addcc	r1, r1, r4
 800ddb4:	e7f2      	b.n	800dd9c <floor+0xbc>
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	4601      	mov	r1, r0
 800ddba:	e7b3      	b.n	800dd24 <floor+0x44>
 800ddbc:	f3af 8000 	nop.w
 800ddc0:	8800759c 	.word	0x8800759c
 800ddc4:	7e37e43c 	.word	0x7e37e43c
 800ddc8:	bff00000 	.word	0xbff00000
 800ddcc:	000fffff 	.word	0x000fffff

0800ddd0 <matherr>:
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	4770      	bx	lr
 800ddd4:	0000      	movs	r0, r0
	...

0800ddd8 <scalbn>:
 800ddd8:	b500      	push	{lr}
 800ddda:	ed2d 8b02 	vpush	{d8}
 800ddde:	b083      	sub	sp, #12
 800dde0:	ed8d 0b00 	vstr	d0, [sp]
 800dde4:	9b01      	ldr	r3, [sp, #4]
 800dde6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ddea:	b9a2      	cbnz	r2, 800de16 <scalbn+0x3e>
 800ddec:	9a00      	ldr	r2, [sp, #0]
 800ddee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	d03a      	beq.n	800de6c <scalbn+0x94>
 800ddf6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800deb0 <scalbn+0xd8>
 800ddfa:	4b35      	ldr	r3, [pc, #212]	; (800ded0 <scalbn+0xf8>)
 800ddfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800de00:	4298      	cmp	r0, r3
 800de02:	ed8d 7b00 	vstr	d7, [sp]
 800de06:	da11      	bge.n	800de2c <scalbn+0x54>
 800de08:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800deb8 <scalbn+0xe0>
 800de0c:	ed9d 6b00 	vldr	d6, [sp]
 800de10:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de14:	e007      	b.n	800de26 <scalbn+0x4e>
 800de16:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800de1a:	428a      	cmp	r2, r1
 800de1c:	d10a      	bne.n	800de34 <scalbn+0x5c>
 800de1e:	ed9d 7b00 	vldr	d7, [sp]
 800de22:	ee37 7b07 	vadd.f64	d7, d7, d7
 800de26:	ed8d 7b00 	vstr	d7, [sp]
 800de2a:	e01f      	b.n	800de6c <scalbn+0x94>
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800de32:	3a36      	subs	r2, #54	; 0x36
 800de34:	4402      	add	r2, r0
 800de36:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800de3a:	428a      	cmp	r2, r1
 800de3c:	dd0a      	ble.n	800de54 <scalbn+0x7c>
 800de3e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800dec0 <scalbn+0xe8>
 800de42:	eeb0 0b48 	vmov.f64	d0, d8
 800de46:	ed9d 1b00 	vldr	d1, [sp]
 800de4a:	f000 f843 	bl	800ded4 <copysign>
 800de4e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800de52:	e7e8      	b.n	800de26 <scalbn+0x4e>
 800de54:	2a00      	cmp	r2, #0
 800de56:	dd10      	ble.n	800de7a <scalbn+0xa2>
 800de58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de64:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800de68:	e9cd 0100 	strd	r0, r1, [sp]
 800de6c:	ed9d 0b00 	vldr	d0, [sp]
 800de70:	b003      	add	sp, #12
 800de72:	ecbd 8b02 	vpop	{d8}
 800de76:	f85d fb04 	ldr.w	pc, [sp], #4
 800de7a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800de7e:	da06      	bge.n	800de8e <scalbn+0xb6>
 800de80:	f24c 3350 	movw	r3, #50000	; 0xc350
 800de84:	4298      	cmp	r0, r3
 800de86:	dcda      	bgt.n	800de3e <scalbn+0x66>
 800de88:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800deb8 <scalbn+0xe0>
 800de8c:	e7d9      	b.n	800de42 <scalbn+0x6a>
 800de8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de96:	3236      	adds	r2, #54	; 0x36
 800de98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dea0:	ec41 0b17 	vmov	d7, r0, r1
 800dea4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800dec8 <scalbn+0xf0>
 800dea8:	e7b2      	b.n	800de10 <scalbn+0x38>
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w
 800deb0:	00000000 	.word	0x00000000
 800deb4:	43500000 	.word	0x43500000
 800deb8:	c2f8f359 	.word	0xc2f8f359
 800debc:	01a56e1f 	.word	0x01a56e1f
 800dec0:	8800759c 	.word	0x8800759c
 800dec4:	7e37e43c 	.word	0x7e37e43c
 800dec8:	00000000 	.word	0x00000000
 800decc:	3c900000 	.word	0x3c900000
 800ded0:	ffff3cb0 	.word	0xffff3cb0

0800ded4 <copysign>:
 800ded4:	ec51 0b10 	vmov	r0, r1, d0
 800ded8:	ee11 0a90 	vmov	r0, s3
 800dedc:	ee10 2a10 	vmov	r2, s0
 800dee0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800dee8:	ea41 0300 	orr.w	r3, r1, r0
 800deec:	ec43 2b10 	vmov	d0, r2, r3
 800def0:	4770      	bx	lr
	...

0800def4 <_init>:
 800def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def6:	bf00      	nop
 800def8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800defa:	bc08      	pop	{r3}
 800defc:	469e      	mov	lr, r3
 800defe:	4770      	bx	lr

0800df00 <_fini>:
 800df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df02:	bf00      	nop
 800df04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df06:	bc08      	pop	{r3}
 800df08:	469e      	mov	lr, r3
 800df0a:	4770      	bx	lr
