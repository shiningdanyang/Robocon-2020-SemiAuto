
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800c85c  0800c85c  0001c85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c884  0800c884  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c884  0800c884  0001c884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c88c  0800c88c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c88c  0800c88c  0001c88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c890  0800c890  0001c890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  24000000  0800c894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a44  24000030  0800c8c0  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000a74  0800c8c0  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e73d  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c62  00000000  00000000  0003e797  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  00041400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00042890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383af  00000000  00000000  00043c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011054  00000000  00000000  0007bfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173139  00000000  00000000  0008d033  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020016c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000581c  00000000  00000000  002001e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c844 	.word	0x0800c844

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	0800c844 	.word	0x0800c844

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	2400001c 	.word	0x2400001c
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f008 fdd6 	bl	800923c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f008 fea9 	bl	80093ec <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f008 fea4 	bl	80093ec <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	240009ec 	.word	0x240009ec
 80006b0:	24000938 	.word	0x24000938
 80006b4:	240009c4 	.word	0x240009c4
 80006b8:	240001a4 	.word	0x240001a4
 80006bc:	24000658 	.word	0x24000658
 80006c0:	24000840 	.word	0x24000840

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000840 	.word	0x24000840
 800072c:	24000232 	.word	0x24000232
 8000730:	240001a4 	.word	0x240001a4
 8000734:	24000910 	.word	0x24000910
 8000738:	24000938 	.word	0x24000938
 800073c:	24000718 	.word	0x24000718
 8000740:	24000078 	.word	0x24000078
 8000744:	24000104 	.word	0x24000104

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 fc38 	bl	8009008 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f008 fd4a 	bl	800923c <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000840 	.word	0x24000840
 80007c8:	24000051 	.word	0x24000051
 80007cc:	240001a4 	.word	0x240001a4
 80007d0:	24000910 	.word	0x24000910
 80007d4:	24000938 	.word	0x24000938
 80007d8:	240009ec 	.word	0x240009ec
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000a68 	.word	0x24000a68
 80007e4:	24000078 	.word	0x24000078
 80007e8:	24000918 	.word	0x24000918

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f008 fc9a 	bl	8009134 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000840 	.word	0x24000840

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f008 fc87 	bl	8009134 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000840 	.word	0x24000840

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	24000232 	.word	0x24000232

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 fc67 	bl	8009134 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000938 	.word	0x24000938

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	24000718 	.word	0x24000718

0800089c <peripheralADC_Init>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 80008a0:	2203      	movs	r2, #3
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <peripheralADC_Init+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <peripheralADC_Init+0x18>)
 80008a6:	f001 fe21 	bl	80024ec <HAL_ADC_Start_DMA>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000a08 	.word	0x24000a08
 80008b4:	24000740 	.word	0x24000740

080008b8 <controlMotor1>:
void roR_pit_yaw_mixSpeed(void);
void brake(void);

#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bfb8      	it	lt
 80008c6:	425b      	neglt	r3, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <controlMotor1+0x48>)
 80008cc:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db07      	blt.n	80008e4 <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <controlMotor1+0x48>)
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <controlMotor1+0x48>)
 80008e0:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 80008e2:	e006      	b.n	80008f2 <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <controlMotor1+0x48>)
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <controlMotor1+0x48>)
 80008f0:	721a      	strb	r2, [r3, #8]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2400000c 	.word	0x2400000c

08000904 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <controlMotor2+0x48>)
 8000918:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db07      	blt.n	8000930 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <controlMotor2+0x48>)
 8000922:	7a1b      	ldrb	r3, [r3, #8]
 8000924:	f023 0302 	bic.w	r3, r3, #2
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <controlMotor2+0x48>)
 800092c:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 800092e:	e006      	b.n	800093e <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <controlMotor2+0x48>)
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <controlMotor2+0x48>)
 800093c:	721a      	strb	r2, [r3, #8]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	2400000c 	.word	0x2400000c

08000950 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <controlMotor3+0x48>)
 8000964:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db07      	blt.n	800097c <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <controlMotor3+0x48>)
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <controlMotor3+0x48>)
 8000978:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 800097a:	e006      	b.n	800098a <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <controlMotor3+0x48>)
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <controlMotor3+0x48>)
 8000988:	721a      	strb	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2400000c 	.word	0x2400000c

0800099c <controlMotor4>:
void controlMotor4(int _speed)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <controlMotor4+0x48>)
 80009b0:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db07      	blt.n	80009c8 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <controlMotor4+0x48>)
 80009ba:	7a1b      	ldrb	r3, [r3, #8]
 80009bc:	f023 0308 	bic.w	r3, r3, #8
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <controlMotor4+0x48>)
 80009c4:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 80009c6:	e006      	b.n	80009d6 <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <controlMotor4+0x48>)
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <controlMotor4+0x48>)
 80009d4:	721a      	strb	r2, [r3, #8]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400000c 	.word	0x2400000c

080009e8 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff ff63 	bl	80008b8 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
 80009f6:	f7ff ff85 	bl	8000904 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff ffa8 	bl	8000950 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ffca 	bl	800099c <controlMotor4>
	spinalCordTrans();
 8000a08:	f7ff ff26 	bl	8000858 <spinalCordTrans>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <positionControl_Init+0x18>)
 8000a16:	f007 fff5 	bl	8008a04 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <positionControl_Init+0x1c>)
 8000a20:	f005 f946 	bl	8005cb0 <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000a10 	.word	0x24000a10
 8000a2c:	58021000 	.word	0x58021000

08000a30 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d16e      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d16a      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8000a4c:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11e      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5a:	4837      	ldr	r0, [pc, #220]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a5c:	f005 f928 	bl	8005cb0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a64:	4834      	ldr	r0, [pc, #208]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a66:	f005 f93c 	bl	8005ce2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a32      	ldr	r2, [pc, #200]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a72:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a7c:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2bc7      	cmp	r3, #199	; 0xc7
 8000a84:	dd05      	ble.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d11f      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa0:	4825      	ldr	r0, [pc, #148]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000aa2:	f005 f905 	bl	8005cb0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	4823      	ldr	r0, [pc, #140]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000aac:	f005 f919 	bl	8005ce2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ab8:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ac2:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000acc:	db05      	blt.n	8000ada <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d11f      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000aea:	f005 f8e1 	bl	8005cb0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000af4:	f005 f8f5 	bl	8005ce2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b00:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b0a:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b14:	db05      	blt.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000a10 	.word	0x24000a10
 8000b30:	240008d8 	.word	0x240008d8
 8000b34:	240009cc 	.word	0x240009cc
 8000b38:	58020c00 	.word	0x58020c00
 8000b3c:	240008d0 	.word	0x240008d0
 8000b40:	24000914 	.word	0x24000914

08000b44 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	e01f      	b.n	8000b94 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000b64:	2201      	movs	r2, #1
 8000b66:	2104      	movs	r1, #4
 8000b68:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <SendByteSPI+0x60>)
 8000b6a:	f005 f8a1 	bl	8005cb0 <HAL_GPIO_WritePin>
 8000b6e:	e004      	b.n	8000b7a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2104      	movs	r1, #4
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <SendByteSPI+0x60>)
 8000b76:	f005 f89b 	bl	8005cb0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <SendByteSPI+0x64>)
 8000b80:	f005 f896 	bl	8005cb0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000b84:	2201      	movs	r2, #1
 8000b86:	2101      	movs	r1, #1
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <SendByteSPI+0x64>)
 8000b8a:	f005 f891 	bl	8005cb0 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	dddc      	ble.n	8000b54 <SendByteSPI+0x10>

	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58021800 	.word	0x58021800
 8000ba8:	58020400 	.word	0x58020400

08000bac <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2101      	movs	r1, #1
 8000bba:	480f      	ldr	r0, [pc, #60]	; (8000bf8 <ST7920_SendCmd+0x4c>)
 8000bbc:	f005 f878 	bl	8005cb0 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 8000bc0:	20f8      	movs	r0, #248	; 0xf8
 8000bc2:	f7ff ffbf 	bl	8000b44 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffb8 	bl	8000b44 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ffb2 	bl	8000b44 <SendByteSPI>
	delayUs(50);
 8000be0:	2032      	movs	r0, #50	; 0x32
 8000be2:	f7ff fd19 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <ST7920_SendCmd+0x4c>)
 8000bec:	f005 f860 	bl	8005cb0 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58021800 	.word	0x58021800

08000bfc <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <ST7920_Init+0x7c>)
 8000c06:	f005 f853 	bl	8005cb0 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f001 f8ae 	bl	8001d6c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000c10:	2201      	movs	r2, #1
 8000c12:	2108      	movs	r1, #8
 8000c14:	4818      	ldr	r0, [pc, #96]	; (8000c78 <ST7920_Init+0x7c>)
 8000c16:	f005 f84b 	bl	8005cb0 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000c1a:	2032      	movs	r0, #50	; 0x32
 8000c1c:	f001 f8a6 	bl	8001d6c <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000c20:	2030      	movs	r0, #48	; 0x30
 8000c22:	f7ff ffc3 	bl	8000bac <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000c26:	206e      	movs	r0, #110	; 0x6e
 8000c28:	f7ff fcf6 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000c2c:	2030      	movs	r0, #48	; 0x30
 8000c2e:	f7ff ffbd 	bl	8000bac <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f7ff fcf0 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000c38:	2008      	movs	r0, #8
 8000c3a:	f7ff ffb7 	bl	8000bac <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000c3e:	206e      	movs	r0, #110	; 0x6e
 8000c40:	f7ff fcea 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffb1 	bl	8000bac <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000c4a:	200c      	movs	r0, #12
 8000c4c:	f001 f88e 	bl	8001d6c <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000c50:	2006      	movs	r0, #6
 8000c52:	f7ff ffab 	bl	8000bac <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000c56:	2001      	movs	r0, #1
 8000c58:	f001 f888 	bl	8001d6c <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000c5c:	200c      	movs	r0, #12
 8000c5e:	f7ff ffa5 	bl	8000bac <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000c62:	2001      	movs	r0, #1
 8000c64:	f001 f882 	bl	8001d6c <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f7ff ff9f 	bl	8000bac <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f001 f87c 	bl	8001d6c <HAL_Delay>

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58021800 	.word	0x58021800

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f000 ffe2 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 f836 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c88:	f000 fb16 	bl	80012b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c8c:	f000 fad4 	bl	8001238 <MX_DMA_Init>
  MX_ADC3_Init();
 8000c90:	f000 f8e6 	bl	8000e60 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000c94:	f000 f9ec 	bl	8001070 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c98:	f000 fa36 	bl	8001108 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000c9c:	f000 f964 	bl	8000f68 <MX_TIM7_Init>
  MX_UART7_Init();
 8000ca0:	f000 f99a 	bl	8000fd8 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000ca4:	f000 fa7c 	bl	80011a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8000ca8:	f7ff fc96 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 8000cac:	f7ff fcda 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8000cb0:	f7ff fdf4 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8000cb4:	f7ff feac 	bl	8000a10 <positionControl_Init>
  ST7920_Init();
 8000cb8:	f7ff ffa0 	bl	8000bfc <ST7920_Init>

  tracking = 1000;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <main+0x70>)
 8000cbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cc2:	601a      	str	r2, [r3, #0]
  brake();
 8000cc4:	f7ff fe90 	bl	80009e8 <brake>
  compassReset();
 8000cc8:	f7ff fd90 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <main+0x74>)
 8000cd2:	f004 ffed 	bl	8005cb0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000cd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cda:	f001 f847 	bl	8001d6c <HAL_Delay>
  while (1)
  {
//	  testPWM();
//////////////////////////////////////////////////////////////////////
//	  readADC();
	  tracking++;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <main+0x70>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a01      	ldr	r2, [pc, #4]	; (8000cec <main+0x70>)
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e7f9      	b.n	8000cde <main+0x62>
 8000cea:	bf00      	nop
 8000cec:	240008e4 	.word	0x240008e4
 8000cf0:	58020400 	.word	0x58020400

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0cc      	sub	sp, #304	; 0x130
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cfe:	224c      	movs	r2, #76	; 0x4c
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00b fd96 	bl	800c834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00b fd8f 	bl	800c834 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	23bc      	movs	r3, #188	; 0xbc
 8000d1e:	461a      	mov	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f00b fd87 	bl	800c834 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d26:	2002      	movs	r0, #2
 8000d28:	f004 fff6 	bl	8005d18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <SystemClock_Config+0x164>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <SystemClock_Config+0x164>)
 8000d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <SystemClock_Config+0x164>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <SystemClock_Config+0x168>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <SystemClock_Config+0x168>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d56:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <SystemClock_Config+0x168>)
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	f003 0201 	and.w	r2, r3, #1
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d66:	bf00      	nop
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <SystemClock_Config+0x164>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d74:	d1f8      	bne.n	8000d68 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d9a:	233c      	movs	r3, #60	; 0x3c
 8000d9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000db2:	230c      	movs	r3, #12
 8000db4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 ffdf 	bl	8005d8c <HAL_RCC_OscConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000dd4:	f000 fb86 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	233f      	movs	r3, #63	; 0x3f
 8000dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dea:	2308      	movs	r3, #8
 8000dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 fb93 	bl	800653c <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000e1c:	f000 fb62 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2203      	movs	r2, #3
 8000e26:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2200      	movs	r2, #0
 8000e36:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f005 ff01 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000e48:	f000 fb4c 	bl	80014e4 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	58024800 	.word	0x58024800
 8000e5c:	58000400 	.word	0x58000400

08000e60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000e78:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000e7a:	4a37      	ldr	r2, [pc, #220]	; (8000f58 <MX_ADC3_Init+0xf8>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e92:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	481f      	ldr	r0, [pc, #124]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000ed8:	f001 f968 	bl	80021ac <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ee2:	f000 faff 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC3_Init+0xfc>)
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eea:	2306      	movs	r3, #6
 8000eec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000eee:	2306      	movs	r3, #6
 8000ef0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ef6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000f06:	f001 fbd3 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000f10:	f000 fae8 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_ADC3_Init+0x100>)
 8000f16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000f22:	f001 fbc5 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000f2c:	f000 fada 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_ADC3_Init+0x104>)
 8000f32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f34:	2312      	movs	r3, #18
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_ADC3_Init+0xf4>)
 8000f3e:	f001 fbb7 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8000f48:	f000 facc 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000740 	.word	0x24000740
 8000f58:	58026000 	.word	0x58026000
 8000f5c:	04300002 	.word	0x04300002
 8000f60:	2a000400 	.word	0x2a000400
 8000f64:	2e300800 	.word	0x2e300800

08000f68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <MX_TIM7_Init+0x6c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000f80:	f640 125f 	movw	r2, #2399	; 0x95f
 8000f84:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000f8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000f9c:	f007 fd06 	bl	80089ac <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000fa6:	f000 fa9d 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM7_Init+0x68>)
 8000fb8:	f007 ff30 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000fc2:	f000 fa8f 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000a10 	.word	0x24000a10
 8000fd4:	40001400 	.word	0x40001400

08000fd8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_UART7_Init+0x90>)
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <MX_UART7_Init+0x94>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_UART7_Init+0x90>)
 8000fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_UART7_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_UART7_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_UART7_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_UART7_Init+0x90>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_UART7_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_UART7_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_UART7_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_UART7_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_UART7_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001020:	4811      	ldr	r0, [pc, #68]	; (8001068 <MX_UART7_Init+0x90>)
 8001022:	f007 ffa1 	bl	8008f68 <HAL_UART_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800102c:	f000 fa5a 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_UART7_Init+0x90>)
 8001034:	f00b faf5 	bl	800c622 <HAL_UARTEx_SetTxFifoThreshold>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800103e:	f000 fa51 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <MX_UART7_Init+0x90>)
 8001046:	f00b fb2a 	bl	800c69e <HAL_UARTEx_SetRxFifoThreshold>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001050:	f000 fa48 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_UART7_Init+0x90>)
 8001056:	f00b faab 	bl	800c5b0 <HAL_UARTEx_DisableFifoMode>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001060:	f000 fa40 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24000078 	.word	0x24000078
 800106c:	40007800 	.word	0x40007800

08001070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_USART1_UART_Init+0x90>)
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <MX_USART1_UART_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_USART1_UART_Init+0x90>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_USART1_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_USART1_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_USART1_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_USART1_UART_Init+0x90>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010ba:	f007 ff55 	bl	8008f68 <HAL_UART_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010c4:	f000 fa0e 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010cc:	f00b faa9 	bl	800c622 <HAL_UARTEx_SetTxFifoThreshold>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010d6:	f000 fa05 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010de:	f00b fade 	bl	800c69e <HAL_UARTEx_SetRxFifoThreshold>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010e8:	f000 f9fc 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_USART1_UART_Init+0x90>)
 80010ee:	f00b fa5f 	bl	800c5b0 <HAL_UARTEx_DisableFifoMode>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010f8:	f000 f9f4 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24000840 	.word	0x24000840
 8001104:	40011000 	.word	0x40011000

08001108 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_USART3_UART_Init+0x90>)
 800110e:	4a23      	ldr	r2, [pc, #140]	; (800119c <MX_USART3_UART_Init+0x94>)
 8001110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001114:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_USART3_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_USART3_UART_Init+0x90>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_USART3_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_USART3_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001150:	4811      	ldr	r0, [pc, #68]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001152:	f007 ff09 	bl	8008f68 <HAL_UART_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 f9c2 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001164:	f00b fa5d 	bl	800c622 <HAL_UARTEx_SetTxFifoThreshold>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800116e:	f000 f9b9 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001172:	2100      	movs	r1, #0
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001176:	f00b fa92 	bl	800c69e <HAL_UARTEx_SetRxFifoThreshold>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001180:	f000 f9b0 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_USART3_UART_Init+0x90>)
 8001186:	f00b fa13 	bl	800c5b0 <HAL_UARTEx_DisableFifoMode>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 f9a8 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	240001a4 	.word	0x240001a4
 800119c:	40004800 	.word	0x40004800

080011a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <MX_USART6_UART_Init+0x94>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011e8:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011ea:	f007 febd 	bl	8008f68 <HAL_UART_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80011f4:	f000 f976 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_USART6_UART_Init+0x90>)
 80011fc:	f00b fa11 	bl	800c622 <HAL_UARTEx_SetTxFifoThreshold>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001206:	f000 f96d 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_USART6_UART_Init+0x90>)
 800120e:	f00b fa46 	bl	800c69e <HAL_UARTEx_SetRxFifoThreshold>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 f964 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_USART6_UART_Init+0x90>)
 800121e:	f00b f9c7 	bl	800c5b0 <HAL_UARTEx_DisableFifoMode>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001228:	f000 f95c 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	24000938 	.word	0x24000938
 8001234:	40011400 	.word	0x40011400

08001238 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_DMA_Init+0x7c>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_DMA_Init+0x7c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_DMA_Init+0x7c>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_DMA_Init+0x7c>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <MX_DMA_Init+0x7c>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_DMA_Init+0x7c>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	200d      	movs	r0, #13
 8001280:	f002 f815 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001284:	200d      	movs	r0, #13
 8001286:	f002 f82c 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	200e      	movs	r0, #14
 8001290:	f002 f80d 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001294:	200e      	movs	r0, #14
 8001296:	f002 f824 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	203a      	movs	r0, #58	; 0x3a
 80012a0:	f002 f805 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a4:	203a      	movs	r0, #58	; 0x3a
 80012a6:	f002 f81c 	bl	80032e2 <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	58024400 	.word	0x58024400

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ce:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <MX_GPIO_Init+0x214>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4a7d      	ldr	r2, [pc, #500]	; (80014cc <MX_GPIO_Init+0x214>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4b7b      	ldr	r3, [pc, #492]	; (80014cc <MX_GPIO_Init+0x214>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b77      	ldr	r3, [pc, #476]	; (80014cc <MX_GPIO_Init+0x214>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4a76      	ldr	r2, [pc, #472]	; (80014cc <MX_GPIO_Init+0x214>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4b73      	ldr	r3, [pc, #460]	; (80014cc <MX_GPIO_Init+0x214>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b70      	ldr	r3, [pc, #448]	; (80014cc <MX_GPIO_Init+0x214>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <MX_GPIO_Init+0x214>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <MX_GPIO_Init+0x214>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <MX_GPIO_Init+0x214>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a67      	ldr	r2, [pc, #412]	; (80014cc <MX_GPIO_Init+0x214>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b64      	ldr	r3, [pc, #400]	; (80014cc <MX_GPIO_Init+0x214>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <MX_GPIO_Init+0x214>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a5f      	ldr	r2, [pc, #380]	; (80014cc <MX_GPIO_Init+0x214>)
 800134e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b5d      	ldr	r3, [pc, #372]	; (80014cc <MX_GPIO_Init+0x214>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001364:	4b59      	ldr	r3, [pc, #356]	; (80014cc <MX_GPIO_Init+0x214>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a58      	ldr	r2, [pc, #352]	; (80014cc <MX_GPIO_Init+0x214>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b55      	ldr	r3, [pc, #340]	; (80014cc <MX_GPIO_Init+0x214>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <MX_GPIO_Init+0x214>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a50      	ldr	r2, [pc, #320]	; (80014cc <MX_GPIO_Init+0x214>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <MX_GPIO_Init+0x214>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f240 7104 	movw	r1, #1796	; 0x704
 80013a6:	484a      	ldr	r0, [pc, #296]	; (80014d0 <MX_GPIO_Init+0x218>)
 80013a8:	f004 fc82 	bl	8005cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80013ac:	2200      	movs	r2, #0
 80013ae:	f242 0167 	movw	r1, #8295	; 0x2067
 80013b2:	4848      	ldr	r0, [pc, #288]	; (80014d4 <MX_GPIO_Init+0x21c>)
 80013b4:	f004 fc7c 	bl	8005cb0 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 80013b8:	2200      	movs	r2, #0
 80013ba:	f643 610d 	movw	r1, #15885	; 0x3e0d
 80013be:	4846      	ldr	r0, [pc, #280]	; (80014d8 <MX_GPIO_Init+0x220>)
 80013c0:	f004 fc76 	bl	8005cb0 <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2182      	movs	r1, #130	; 0x82
 80013c8:	4844      	ldr	r0, [pc, #272]	; (80014dc <MX_GPIO_Init+0x224>)
 80013ca:	f004 fc71 	bl	8005cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013d4:	4842      	ldr	r0, [pc, #264]	; (80014e0 <MX_GPIO_Init+0x228>)
 80013d6:	f004 fc6b 	bl	8005cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80013da:	f240 7304 	movw	r3, #1796	; 0x704
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4837      	ldr	r0, [pc, #220]	; (80014d0 <MX_GPIO_Init+0x218>)
 80013f4:	f004 faac 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80013f8:	f242 0367 	movw	r3, #8295	; 0x2067
 80013fc:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	4830      	ldr	r0, [pc, #192]	; (80014d4 <MX_GPIO_Init+0x21c>)
 8001412:	f004 fa9d 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001416:	230d      	movs	r3, #13
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	482a      	ldr	r0, [pc, #168]	; (80014d8 <MX_GPIO_Init+0x220>)
 800142e:	f004 fa8f 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4824      	ldr	r0, [pc, #144]	; (80014dc <MX_GPIO_Init+0x224>)
 800144a:	f004 fa81 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 800144e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <MX_GPIO_Init+0x228>)
 8001468:	f004 fa72 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 800146c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4816      	ldr	r0, [pc, #88]	; (80014e0 <MX_GPIO_Init+0x228>)
 8001486:	f004 fa63 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 800148a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800148e:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_GPIO_Init+0x220>)
 80014a4:	f004 fa54 	bl	8005950 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_GPIO_Init+0x224>)
 80014c0:	f004 fa46 	bl	8005950 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	; 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020000 	.word	0x58020000
 80014d4:	58020400 	.word	0x58020400
 80014d8:	58021800 	.word	0x58021800
 80014dc:	58021000 	.word	0x58021000
 80014e0:	58020c00 	.word	0x58020c00

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_MspInit+0x30>)
 80014fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001500:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x30>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x30>)
 800150c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	58024400 	.word	0x58024400

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a33      	ldr	r2, [pc, #204]	; (8001614 <HAL_ADC_MspInit+0xec>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d15f      	bne.n	800160a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_ADC_MspInit+0xf0>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	4a31      	ldr	r2, [pc, #196]	; (8001618 <HAL_ADC_MspInit+0xf0>)
 8001552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_ADC_MspInit+0xf0>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_ADC_MspInit+0xf0>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <HAL_ADC_MspInit+0xf0>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_ADC_MspInit+0xf0>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8001586:	2303      	movs	r3, #3
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158a:	2303      	movs	r3, #3
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4820      	ldr	r0, [pc, #128]	; (800161c <HAL_ADC_MspInit+0xf4>)
 800159a:	f004 f9d9 	bl	8005950 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800159e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80015a2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80015a6:	f000 fc0f 	bl	8001dc8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015ac:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_ADC_MspInit+0xfc>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015b2:	2273      	movs	r2, #115	; 0x73
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 80015f0:	f001 fe92 	bl	8003318 <HAL_DMA_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80015fa:	f7ff ff73 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 8001602:	64da      	str	r2, [r3, #76]	; 0x4c
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_ADC_MspInit+0xf8>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58026000 	.word	0x58026000
 8001618:	58024400 	.word	0x58024400
 800161c:	58020800 	.word	0x58020800
 8001620:	24000678 	.word	0x24000678
 8001624:	40020040 	.word	0x40020040

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2037      	movs	r0, #55	; 0x37
 800165e:	f001 fe26 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001662:	2037      	movs	r0, #55	; 0x37
 8001664:	f001 fe3d 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40001400 	.word	0x40001400
 8001674:	58024400 	.word	0x58024400

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b090      	sub	sp, #64	; 0x40
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4aa3      	ldr	r2, [pc, #652]	; (8001924 <HAL_UART_MspInit+0x2ac>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d136      	bne.n	8001708 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800169a:	4ba3      	ldr	r3, [pc, #652]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 800169c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a0:	4aa1      	ldr	r2, [pc, #644]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80016a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016aa:	4b9f      	ldr	r3, [pc, #636]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80016ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	4a9a      	ldr	r2, [pc, #616]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c8:	4b97      	ldr	r3, [pc, #604]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 80016d6:	23c0      	movs	r3, #192	; 0xc0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80016e6:	2307      	movs	r3, #7
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ee:	4619      	mov	r1, r3
 80016f0:	488e      	ldr	r0, [pc, #568]	; (800192c <HAL_UART_MspInit+0x2b4>)
 80016f2:	f004 f92d 	bl	8005950 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2104      	movs	r1, #4
 80016fa:	2052      	movs	r0, #82	; 0x52
 80016fc:	f001 fdd7 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001700:	2052      	movs	r0, #82	; 0x52
 8001702:	f001 fdee 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001706:	e108      	b.n	800191a <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a88      	ldr	r2, [pc, #544]	; (8001930 <HAL_UART_MspInit+0x2b8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d165      	bne.n	80017de <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001718:	4a83      	ldr	r2, [pc, #524]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001722:	4b81      	ldr	r3, [pc, #516]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001740:	4b79      	ldr	r3, [pc, #484]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 800174e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001760:	2304      	movs	r3, #4
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001768:	4619      	mov	r1, r3
 800176a:	4872      	ldr	r0, [pc, #456]	; (8001934 <HAL_UART_MspInit+0x2bc>)
 800176c:	f004 f8f0 	bl	8005950 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 8001772:	4a72      	ldr	r2, [pc, #456]	; (800193c <HAL_UART_MspInit+0x2c4>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001776:	4b70      	ldr	r3, [pc, #448]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 8001778:	2229      	movs	r2, #41	; 0x29
 800177a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 800179e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017b0:	4861      	ldr	r0, [pc, #388]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 80017b2:	f001 fdb1 	bl	8003318 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 80017bc:	f7ff fe92 	bl	80014e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 80017c4:	679a      	str	r2, [r3, #120]	; 0x78
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_UART_MspInit+0x2c0>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2101      	movs	r1, #1
 80017d0:	2025      	movs	r0, #37	; 0x25
 80017d2:	f001 fd6c 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017d6:	2025      	movs	r0, #37	; 0x25
 80017d8:	f001 fd83 	bl	80032e2 <HAL_NVIC_EnableIRQ>
}
 80017dc:	e09d      	b.n	800191a <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_UART_MspInit+0x2c8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d15d      	bne.n	80018a4 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80017ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ee:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80017fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001824:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001836:	2307      	movs	r3, #7
 8001838:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183e:	4619      	mov	r1, r3
 8001840:	483c      	ldr	r0, [pc, #240]	; (8001934 <HAL_UART_MspInit+0x2bc>)
 8001842:	f004 f885 	bl	8005950 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001848:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <HAL_UART_MspInit+0x2d0>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800184c:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 800184e:	222d      	movs	r2, #45	; 0x2d
 8001850:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001864:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001878:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001886:	482f      	ldr	r0, [pc, #188]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 8001888:	f001 fd46 	bl	8003318 <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001892:	f7ff fe27 	bl	80014e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a2a      	ldr	r2, [pc, #168]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 800189a:	679a      	str	r2, [r3, #120]	; 0x78
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <HAL_UART_MspInit+0x2cc>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018a2:	e03a      	b.n	800191a <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_UART_MspInit+0x2d4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d135      	bne.n	800191a <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80018b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80018c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_UART_MspInit+0x2b0>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 80018ea:	23c0      	movs	r3, #192	; 0xc0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80018fa:	2307      	movs	r3, #7
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <HAL_UART_MspInit+0x2d8>)
 8001906:	f004 f823 	bl	8005950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2102      	movs	r1, #2
 800190e:	2047      	movs	r0, #71	; 0x47
 8001910:	f001 fccd 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001914:	2047      	movs	r0, #71	; 0x47
 8001916:	f001 fce4 	bl	80032e2 <HAL_NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3740      	adds	r7, #64	; 0x40
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40007800 	.word	0x40007800
 8001928:	58024400 	.word	0x58024400
 800192c:	58021400 	.word	0x58021400
 8001930:	40011000 	.word	0x40011000
 8001934:	58020400 	.word	0x58020400
 8001938:	240007a8 	.word	0x240007a8
 800193c:	40020058 	.word	0x40020058
 8001940:	40004800 	.word	0x40004800
 8001944:	2400011c 	.word	0x2400011c
 8001948:	40020440 	.word	0x40020440
 800194c:	40011400 	.word	0x40011400
 8001950:	58020800 	.word	0x58020800

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <SysTick_Handler+0x2c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <SysTick_Handler+0x2c>)
 80019b2:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SysTick_Handler+0x2c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d904      	bls.n	80019c6 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Handler+0x2c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 80019c2:	f7fe ff29 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 f9b1 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	24000830 	.word	0x24000830

080019d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <DMA1_Stream2_IRQHandler+0x10>)
 80019da:	f002 fca7 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24000678 	.word	0x24000678

080019e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <DMA1_Stream3_IRQHandler+0x24>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <DMA1_Stream3_IRQHandler+0x24>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <DMA1_Stream3_IRQHandler+0x28>)
 8001a00:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a02:	4804      	ldr	r0, [pc, #16]	; (8001a14 <DMA1_Stream3_IRQHandler+0x2c>)
 8001a04:	f002 fc92 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24000658 	.word	0x24000658
 8001a10:	24000708 	.word	0x24000708
 8001a14:	240007a8 	.word	0x240007a8

08001a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <USART1_IRQHandler+0x10>)
 8001a1e:	f007 fd6d 	bl	80094fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24000840 	.word	0x24000840

08001a2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM7_IRQHandler+0x10>)
 8001a32:	f007 f811 	bl	8008a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	24000a10 	.word	0x24000a10

08001a40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d135      	bne.n	8001ab8 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <DMA2_Stream2_IRQHandler+0xac>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	b2d1      	uxtb	r1, r2
 8001a54:	4a25      	ldr	r2, [pc, #148]	; (8001aec <DMA2_Stream2_IRQHandler+0xac>)
 8001a56:	7011      	strb	r1, [r2, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <DMA2_Stream2_IRQHandler+0xb0>)
 8001a5c:	7819      	ldrb	r1, [r3, #0]
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001a60:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <DMA2_Stream2_IRQHandler+0xac>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d926      	bls.n	8001ab8 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <DMA2_Stream2_IRQHandler+0xac>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <DMA2_Stream2_IRQHandler+0xb8>)
 8001a8a:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001a96:	78db      	ldrb	r3, [r3, #3]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <DMA2_Stream2_IRQHandler+0xbc>)
 8001aa0:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001aa4:	791b      	ldrb	r3, [r3, #4]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <DMA2_Stream2_IRQHandler+0xb4>)
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <DMA2_Stream2_IRQHandler+0xc0>)
 8001ab6:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <DMA2_Stream2_IRQHandler+0xb0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2baa      	cmp	r3, #170	; 0xaa
 8001abe:	d106      	bne.n	8001ace <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e006      	b.n	8001adc <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d002      	beq.n	8001adc <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <DMA2_Stream2_IRQHandler+0xc4>)
 8001ade:	f002 fc25 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2400004c 	.word	0x2400004c
 8001aec:	24000738 	.word	0x24000738
 8001af0:	240009c4 	.word	0x240009c4
 8001af4:	24000650 	.word	0x24000650
 8001af8:	240008dc 	.word	0x240008dc
 8001afc:	240008de 	.word	0x240008de
 8001b00:	240009d8 	.word	0x240009d8
 8001b04:	2400011c 	.word	0x2400011c

08001b08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <USART6_IRQHandler+0x10>)
 8001b0e:	f007 fcf5 	bl	80094fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	24000938 	.word	0x24000938

08001b1c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <UART7_IRQHandler+0x10>)
 8001b22:	f007 fceb 	bl	80094fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	24000078 	.word	0x24000078

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <SystemInit+0xac>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <SystemInit+0xac>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <SystemInit+0xb0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <SystemInit+0xb0>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <SystemInit+0xb0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <SystemInit+0xb0>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4921      	ldr	r1, [pc, #132]	; (8001be0 <SystemInit+0xb0>)
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <SystemInit+0xb4>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <SystemInit+0xb0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <SystemInit+0xb0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <SystemInit+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <SystemInit+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <SystemInit+0xb0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <SystemInit+0xb0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <SystemInit+0xb0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <SystemInit+0xb0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <SystemInit+0xb0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <SystemInit+0xb0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <SystemInit+0xb0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <SystemInit+0xb0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <SystemInit+0xb0>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <SystemInit+0xb0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <SystemInit+0xb8>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <SystemInit+0xbc>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bc2:	d202      	bcs.n	8001bca <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <SystemInit+0xc0>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SystemInit+0xac>)
 8001bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00
 8001be0:	58024400 	.word	0x58024400
 8001be4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001be8:	5c001000 	.word	0x5c001000
 8001bec:	ffff0000 	.word	0xffff0000
 8001bf0:	51008108 	.word	0x51008108

08001bf4 <Reset_Handler>:
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopFillZerobss+0x14>
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	e003      	b.n	8001c04 <LoopCopyDataInit>

08001bfc <CopyDataInit>:
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <LoopFillZerobss+0x18>)
 8001bfe:	585b      	ldr	r3, [r3, r1]
 8001c00:	5043      	str	r3, [r0, r1]
 8001c02:	3104      	adds	r1, #4

08001c04 <LoopCopyDataInit>:
 8001c04:	480b      	ldr	r0, [pc, #44]	; (8001c34 <LoopFillZerobss+0x1c>)
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <LoopFillZerobss+0x20>)
 8001c08:	1842      	adds	r2, r0, r1
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3f6      	bcc.n	8001bfc <CopyDataInit>
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopFillZerobss+0x24>)
 8001c10:	e002      	b.n	8001c18 <LoopFillZerobss>

08001c12 <FillZerobss>:
 8001c12:	2300      	movs	r3, #0
 8001c14:	f842 3b04 	str.w	r3, [r2], #4

08001c18 <LoopFillZerobss>:
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <LoopFillZerobss+0x28>)
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3f9      	bcc.n	8001c12 <FillZerobss>
 8001c1e:	f7ff ff87 	bl	8001b30 <SystemInit>
 8001c22:	f00a fde3 	bl	800c7ec <__libc_init_array>
 8001c26:	f7ff f829 	bl	8000c7c <main>
 8001c2a:	4770      	bx	lr
 8001c2c:	24080000 	.word	0x24080000
 8001c30:	0800c894 	.word	0x0800c894
 8001c34:	24000000 	.word	0x24000000
 8001c38:	2400002c 	.word	0x2400002c
 8001c3c:	24000030 	.word	0x24000030
 8001c40:	24000a74 	.word	0x24000a74

08001c44 <ADC3_IRQHandler>:
 8001c44:	e7fe      	b.n	8001c44 <ADC3_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f001 fb22 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c54:	f004 fe28 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_Init+0x68>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_Init+0x6c>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8001c70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_Init+0x68>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_Init+0x6c>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_Init+0x70>)
 8001c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_Init+0x74>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 f814 	bl	8001cc0 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e002      	b.n	8001ca8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca2:	f7ff fc27 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	0800c86c 	.word	0x0800c86c
 8001cb8:	24000020 	.word	0x24000020
 8001cbc:	2400001c 	.word	0x2400001c

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_InitTick+0x60>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e021      	b.n	8001d18 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_InitTick+0x64>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_InitTick+0x60>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fb07 	bl	80032fe <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f001 fad1 	bl	80032ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x68>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	24000028 	.word	0x24000028
 8001d24:	2400001c 	.word	0x2400001c
 8001d28:	24000024 	.word	0x24000024

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	24000028 	.word	0x24000028
 8001d50:	24000a70 	.word	0x24000a70

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	24000a70 	.word	0x24000a70

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff ffee 	bl	8001d54 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_Delay+0x40>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	24000028 	.word	0x24000028

08001db0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetREVID+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0c1b      	lsrs	r3, r3, #16
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	5c001000 	.word	0x5c001000

08001dc8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	4904      	ldr	r1, [pc, #16]	; (8001df0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	58000400 	.word	0x58000400

08001df4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e5c:	b490      	push	{r4, r7}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3360      	adds	r3, #96	; 0x60
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	611a      	str	r2, [r3, #16]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ec8:	b490      	push	{r4, r7}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3360      	adds	r3, #96	; 0x60
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	6023      	str	r3, [r4, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc90      	pop	{r4, r7}
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f1e:	b490      	push	{r4, r7}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3330      	adds	r3, #48	; 0x30
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	4413      	add	r3, r2
 8001f3c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f3e:	6822      	ldr	r2, [r4, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	211f      	movs	r1, #31
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 011f 	and.w	r1, r3, #31
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc90      	pop	{r4, r7}
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60da      	str	r2, [r3, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f96:	b490      	push	{r4, r7}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3314      	adds	r3, #20
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	0e5b      	lsrs	r3, r3, #25
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	0d1b      	lsrs	r3, r3, #20
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2107      	movs	r1, #7
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	0d1b      	lsrs	r3, r3, #20
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc90      	pop	{r4, r7}
 8001fe4:	4770      	bx	lr
	...

08001fe8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0318 	and.w	r3, r3, #24
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <LL_ADC_SetChannelSingleDiff+0x44>)
 800200c:	40d9      	lsrs	r1, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	400b      	ands	r3, r1
 8002012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	000fffff 	.word	0x000fffff

08002030 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <LL_ADC_DisableDeepPowerDown+0x20>)
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6093      	str	r3, [r2, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	5fffffc0 	.word	0x5fffffc0

08002070 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002084:	d101      	bne.n	800208a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <LL_ADC_EnableInternalRegulator+0x24>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	6fffffc0 	.word	0x6fffffc0

080020c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020d4:	d101      	bne.n	80020da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <LL_ADC_Enable+0x24>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	7fffffc0 	.word	0x7fffffc0

08002110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <LL_ADC_IsEnabled+0x18>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <LL_ADC_IsEnabled+0x1a>
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <LL_ADC_REG_StartConversion+0x24>)
 8002146:	4013      	ands	r3, r2
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	7fffffc0 	.word	0x7fffffc0

08002160 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d101      	bne.n	8002178 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d101      	bne.n	800219e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e18e      	b.n	80024e4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff f9a7 	bl	8001528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff3f 	bl	8002070 <LL_ADC_IsDeepPowerDownEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff25 	bl	800204c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff5a 	bl	80020c0 <LL_ADC_IsInternalRegulatorEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d113      	bne.n	800223a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff3e 	bl	8002098 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800221c:	4b9a      	ldr	r3, [pc, #616]	; (8002488 <HAL_ADC_Init+0x2dc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	4a9a      	ldr	r2, [pc, #616]	; (800248c <HAL_ADC_Init+0x2e0>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800222c:	e002      	b.n	8002234 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3b01      	subs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff3e 	bl	80020c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff78 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 8002270:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8129 	bne.w	80024d2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8125 	bne.w	80024d2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002290:	f043 0202 	orr.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff37 	bl	8002110 <LL_ADC_IsEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d136      	bne.n	8002316 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a78      	ldr	r2, [pc, #480]	; (8002490 <HAL_ADC_Init+0x2e4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_ADC_Init+0x110>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	; (8002494 <HAL_ADC_Init+0x2e8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10e      	bne.n	80022da <HAL_ADC_Init+0x12e>
 80022bc:	4874      	ldr	r0, [pc, #464]	; (8002490 <HAL_ADC_Init+0x2e4>)
 80022be:	f7ff ff27 	bl	8002110 <LL_ADC_IsEnabled>
 80022c2:	4604      	mov	r4, r0
 80022c4:	4873      	ldr	r0, [pc, #460]	; (8002494 <HAL_ADC_Init+0x2e8>)
 80022c6:	f7ff ff23 	bl	8002110 <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4323      	orrs	r3, r4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	e008      	b.n	80022ec <HAL_ADC_Init+0x140>
 80022da:	486f      	ldr	r0, [pc, #444]	; (8002498 <HAL_ADC_Init+0x2ec>)
 80022dc:	f7ff ff18 	bl	8002110 <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a66      	ldr	r2, [pc, #408]	; (8002490 <HAL_ADC_Init+0x2e4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_Init+0x158>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_ADC_Init+0x2e8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_ADC_Init+0x15c>
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_ADC_Init+0x2f0>)
 8002306:	e000      	b.n	800230a <HAL_ADC_Init+0x15e>
 8002308:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <HAL_ADC_Init+0x2f4>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7ff fd6f 	bl	8001df4 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002316:	f7ff fd4b 	bl	8001db0 <HAL_GetREVID>
 800231a:	4602      	mov	r2, r0
 800231c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002320:	429a      	cmp	r2, r3
 8002322:	d914      	bls.n	800234e <HAL_ADC_Init+0x1a2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d110      	bne.n	800234e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7d5b      	ldrb	r3, [r3, #21]
 8002330:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002336:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800233c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7f1b      	ldrb	r3, [r3, #28]
 8002342:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002344:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002346:	f043 030c 	orr.w	r3, r3, #12
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	e00d      	b.n	800236a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7d5b      	ldrb	r3, [r3, #21]
 8002352:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002358:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800235e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7f1b      	ldrb	r3, [r3, #28]
 8002364:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7f1b      	ldrb	r3, [r3, #28]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	3b01      	subs	r3, #1
 8002378:	045b      	lsls	r3, r3, #17
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_ADC_Init+0x2f8>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fed3 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 80023ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fee0 	bl	8002186 <LL_ADC_INJ_IsConversionOngoing>
 80023c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d14a      	bne.n	8002464 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d147      	bne.n	8002464 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7d1b      	ldrb	r3, [r3, #20]
 80023d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_ADC_Init+0x2fc>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	69b9      	ldr	r1, [r7, #24]
 80023f2:	430b      	orrs	r3, r1
 80023f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d11b      	bne.n	8002438 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_ADC_Init+0x300>)
 800240e:	4013      	ands	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002414:	3a01      	subs	r2, #1
 8002416:	0411      	lsls	r1, r2, #16
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002428:	430a      	orrs	r2, r1
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	e007      	b.n	8002448 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fd52 	bl	8002f08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d121      	bne.n	80024b0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f023 010f 	bic.w	r1, r3, #15
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	1e5a      	subs	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
 8002484:	e01c      	b.n	80024c0 <HAL_ADC_Init+0x314>
 8002486:	bf00      	nop
 8002488:	2400001c 	.word	0x2400001c
 800248c:	053e2d63 	.word	0x053e2d63
 8002490:	40022000 	.word	0x40022000
 8002494:	40022100 	.word	0x40022100
 8002498:	58026000 	.word	0x58026000
 800249c:	40022300 	.word	0x40022300
 80024a0:	58026300 	.word	0x58026300
 80024a4:	fff0c003 	.word	0xfff0c003
 80024a8:	ffffbffc 	.word	0xffffbffc
 80024ac:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020f 	bic.w	r2, r2, #15
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f023 0303 	bic.w	r3, r3, #3
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
 80024d0:	e007      	b.n	80024e2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3724      	adds	r7, #36	; 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}

080024ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a55      	ldr	r2, [pc, #340]	; (8002654 <HAL_ADC_Start_DMA+0x168>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_Start_DMA+0x20>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a54      	ldr	r2, [pc, #336]	; (8002658 <HAL_ADC_Start_DMA+0x16c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_ADC_Start_DMA+0x24>
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_ADC_Start_DMA+0x170>)
 800250e:	e000      	b.n	8002512 <HAL_ADC_Start_DMA+0x26>
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_ADC_Start_DMA+0x174>)
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fd8c 	bl	8002030 <LL_ADC_GetMultimode>
 8002518:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fe1e 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 808c 	bne.w	8002644 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_ADC_Start_DMA+0x4e>
 8002536:	2302      	movs	r3, #2
 8002538:	e087      	b.n	800264a <HAL_ADC_Start_DMA+0x15e>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d002      	beq.n	8002554 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b09      	cmp	r3, #9
 8002552:	d170      	bne.n	8002636 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fbbf 	bl	8002cd8 <ADC_Enable>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d163      	bne.n	800262c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002568:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_ADC_Start_DMA+0x178>)
 800256a:	4013      	ands	r3, r2
 800256c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a37      	ldr	r2, [pc, #220]	; (8002658 <HAL_ADC_Start_DMA+0x16c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d002      	beq.n	8002584 <HAL_ADC_Start_DMA+0x98>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e000      	b.n	8002586 <HAL_ADC_Start_DMA+0x9a>
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_ADC_Start_DMA+0x168>)
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4293      	cmp	r3, r2
 800258c:	d002      	beq.n	8002594 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	f023 0206 	bic.w	r2, r3, #6
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	659a      	str	r2, [r3, #88]	; 0x58
 80025b8:	e002      	b.n	80025c0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_ADC_Start_DMA+0x17c>)
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_ADC_Start_DMA+0x180>)
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <HAL_ADC_Start_DMA+0x184>)
 80025d6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	221c      	movs	r2, #28
 80025de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0210 	orr.w	r2, r2, #16
 80025f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7ff fcb4 	bl	8001f70 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3340      	adds	r3, #64	; 0x40
 8002612:	4619      	mov	r1, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f001 f9da 	bl	80039d0 <HAL_DMA_Start_IT>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fd87 	bl	8002138 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800262a:	e00d      	b.n	8002648 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002634:	e008      	b.n	8002648 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002642:	e001      	b.n	8002648 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002644:	2302      	movs	r3, #2
 8002646:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000
 8002658:	40022100 	.word	0x40022100
 800265c:	40022300 	.word	0x40022300
 8002660:	58026300 	.word	0x58026300
 8002664:	fffff0fe 	.word	0xfffff0fe
 8002668:	08002de1 	.word	0x08002de1
 800266c:	08002eb9 	.word	0x08002eb9
 8002670:	08002ed5 	.word	0x08002ed5

08002674 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b099      	sub	sp, #100	; 0x64
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a99      	ldr	r2, [pc, #612]	; (8002930 <HAL_ADC_ConfigChannel+0x280>)
 80026ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x2a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e2e6      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x5f8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fd3a 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 82cb 	bne.w	8002c8a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d108      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x62>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	e00f      	b.n	8002732 <HAL_ADC_ConfigChannel+0x82>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2201      	movs	r2, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	69d1      	ldr	r1, [r2, #28]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	f7ff fbe6 	bl	8001f1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fd02 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 800275c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fd0f 	bl	8002186 <LL_ADC_INJ_IsConversionOngoing>
 8002768:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 80b3 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 80af 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	461a      	mov	r2, r3
 8002788:	f7ff fc05 	bl	8001f96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800278c:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_ADC_ConfigChannel+0x284>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002798:	d10b      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x102>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	e01d      	b.n	80027ee <HAL_ADC_ConfigChannel+0x13e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x128>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	e00a      	b.n	80027ee <HAL_ADC_ConfigChannel+0x13e>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d027      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	f7ff fb29 	bl	8001e5c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6919      	ldr	r1, [r3, #16]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7e5b      	ldrb	r3, [r3, #25]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x170>
 800281a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800281e:	e000      	b.n	8002822 <HAL_ADC_ConfigChannel+0x172>
 8002820:	2300      	movs	r3, #0
 8002822:	461a      	mov	r2, r3
 8002824:	f7ff fb50 	bl	8001ec8 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7e1b      	ldrb	r3, [r3, #24]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_ADC_ConfigChannel+0x18e>
 8002838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x190>
 800283e:	2300      	movs	r3, #0
 8002840:	461a      	mov	r2, r3
 8002842:	f7ff fb28 	bl	8001e96 <LL_ADC_SetDataRightShift>
 8002846:	e047      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	069b      	lsls	r3, r3, #26
 8002858:	429a      	cmp	r2, r3
 800285a:	d107      	bne.n	800286c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800286a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	069b      	lsls	r3, r3, #26
 800287c:	429a      	cmp	r2, r3
 800287e:	d107      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800288e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	069b      	lsls	r3, r3, #26
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028b2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fc17 	bl	8002110 <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 81d9 	bne.w	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7ff fb76 	bl	8001fe8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_ADC_ConfigChannel+0x280>)
 8002902:	4293      	cmp	r3, r2
 8002904:	f040 8101 	bne.w	8002b0a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x288>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2b09      	cmp	r3, #9
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e016      	b.n	800295e <HAL_ADC_ConfigChannel+0x2ae>
 8002930:	47ff0000 	.word	0x47ff0000
 8002934:	5c001000 	.word	0x5c001000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2b09      	cmp	r3, #9
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295e:	2b00      	cmp	r3, #0
 8002960:	d064      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <HAL_ADC_ConfigChannel+0x2ce>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	3301      	adds	r3, #1
 8002976:	069b      	lsls	r3, r3, #26
 8002978:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297c:	e00e      	b.n	800299c <HAL_ADC_ConfigChannel+0x2ec>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3301      	adds	r3, #1
 8002996:	069b      	lsls	r3, r3, #26
 8002998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x30c>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	3301      	adds	r3, #1
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	e010      	b.n	80029de <HAL_ADC_ConfigChannel+0x32e>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	ea42 0103 	orr.w	r1, r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x354>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	3301      	adds	r3, #1
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	e011      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x378>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	e069      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x398>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	3301      	adds	r3, #1
 8002a40:	069b      	lsls	r3, r3, #26
 8002a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a46:	e00e      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x3b6>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	61fb      	str	r3, [r7, #28]
  return result;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x3d6>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	e010      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x3f8>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	617b      	str	r3, [r7, #20]
  return result;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	ea42 0103 	orr.w	r1, r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x424>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	3b1e      	subs	r3, #30
 8002acc:	051b      	lsls	r3, r3, #20
 8002ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	e014      	b.n	8002afe <HAL_ADC_ConfigChannel+0x44e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	3b1e      	subs	r3, #30
 8002af8:	051b      	lsls	r3, r3, #20
 8002afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afe:	430b      	orrs	r3, r1
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	6892      	ldr	r2, [r2, #8]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7ff fa46 	bl	8001f96 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f280 80c4 	bge.w	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a65      	ldr	r2, [pc, #404]	; (8002cb0 <HAL_ADC_ConfigChannel+0x600>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x478>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a64      	ldr	r2, [pc, #400]	; (8002cb4 <HAL_ADC_ConfigChannel+0x604>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x47c>
 8002b28:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_ADC_ConfigChannel+0x608>)
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x47e>
 8002b2c:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_ADC_ConfigChannel+0x60c>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f986 	bl	8001e40 <LL_ADC_GetCommonPathInternalCh>
 8002b34:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5d      	ldr	r2, [pc, #372]	; (8002cb0 <HAL_ADC_ConfigChannel+0x600>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0x49a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_ADC_ConfigChannel+0x604>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10e      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x4b8>
 8002b4a:	4859      	ldr	r0, [pc, #356]	; (8002cb0 <HAL_ADC_ConfigChannel+0x600>)
 8002b4c:	f7ff fae0 	bl	8002110 <LL_ADC_IsEnabled>
 8002b50:	4604      	mov	r4, r0
 8002b52:	4858      	ldr	r0, [pc, #352]	; (8002cb4 <HAL_ADC_ConfigChannel+0x604>)
 8002b54:	f7ff fadc 	bl	8002110 <LL_ADC_IsEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e008      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x4ca>
 8002b68:	4855      	ldr	r0, [pc, #340]	; (8002cc0 <HAL_ADC_ConfigChannel+0x610>)
 8002b6a:	f7ff fad1 	bl	8002110 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d07b      	beq.n	8002c76 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_ADC_ConfigChannel+0x614>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d12e      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x536>
 8002b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d129      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_ADC_ConfigChannel+0x610>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d17f      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_ADC_ConfigChannel+0x600>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x500>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a42      	ldr	r2, [pc, #264]	; (8002cb4 <HAL_ADC_ConfigChannel+0x604>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x504>
 8002bb0:	4a41      	ldr	r2, [pc, #260]	; (8002cb8 <HAL_ADC_ConfigChannel+0x608>)
 8002bb2:	e000      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x506>
 8002bb4:	4a41      	ldr	r2, [pc, #260]	; (8002cbc <HAL_ADC_ConfigChannel+0x60c>)
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7ff f92b 	bl	8001e1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <HAL_ADC_ConfigChannel+0x618>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <HAL_ADC_ConfigChannel+0x61c>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002bd6:	e002      	b.n	8002bde <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002be4:	e05a      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a39      	ldr	r2, [pc, #228]	; (8002cd0 <HAL_ADC_ConfigChannel+0x620>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d11e      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x57e>
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <HAL_ADC_ConfigChannel+0x610>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d14b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a29      	ldr	r2, [pc, #164]	; (8002cb0 <HAL_ADC_ConfigChannel+0x600>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x568>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <HAL_ADC_ConfigChannel+0x604>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x56c>
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_ADC_ConfigChannel+0x608>)
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x56e>
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <HAL_ADC_ConfigChannel+0x60c>)
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f7ff f8f7 	bl	8001e1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c2c:	e036      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_ADC_ConfigChannel+0x624>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d131      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
 8002c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d12c      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_ADC_ConfigChannel+0x610>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d127      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_ADC_ConfigChannel+0x600>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x5b0>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_ADC_ConfigChannel+0x604>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x5b4>
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_ADC_ConfigChannel+0x608>)
 8002c62:	e000      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x5b6>
 8002c64:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_ADC_ConfigChannel+0x60c>)
 8002c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f7ff f8d3 	bl	8001e1a <LL_ADC_SetCommonPathInternalCh>
 8002c74:	e012      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c88:	e008      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3764      	adds	r7, #100	; 0x64
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40022100 	.word	0x40022100
 8002cb8:	40022300 	.word	0x40022300
 8002cbc:	58026300 	.word	0x58026300
 8002cc0:	58026000 	.word	0x58026000
 8002cc4:	cb840000 	.word	0xcb840000
 8002cc8:	2400001c 	.word	0x2400001c
 8002ccc:	053e2d63 	.word	0x053e2d63
 8002cd0:	c7520000 	.word	0xc7520000
 8002cd4:	cfb80000 	.word	0xcfb80000

08002cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fa13 	bl	8002110 <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d167      	bne.n	8002dc0 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <ADC_Enable+0xf4>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e053      	b.n	8002dc2 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f9e2 	bl	80020e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d24:	f7ff f816 	bl	8001d54 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <ADC_Enable+0xf8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <ADC_Enable+0x66>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <ADC_Enable+0xfc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <ADC_Enable+0x6a>
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <ADC_Enable+0x100>)
 8002d40:	e000      	b.n	8002d44 <ADC_Enable+0x6c>
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <ADC_Enable+0x104>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f973 	bl	8002030 <LL_ADC_GetMultimode>
 8002d4a:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <ADC_Enable+0xfc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d002      	beq.n	8002d5c <ADC_Enable+0x84>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e000      	b.n	8002d5e <ADC_Enable+0x86>
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <ADC_Enable+0xf8>)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d129      	bne.n	8002dc0 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d6c:	e021      	b.n	8002db2 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f9cc 	bl	8002110 <LL_ADC_IsEnabled>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f9b0 	bl	80020e8 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d88:	f7fe ffe4 	bl	8001d54 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d90d      	bls.n	8002db2 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e007      	b.n	8002dc2 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d1d6      	bne.n	8002d6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	8000003f 	.word	0x8000003f
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40022100 	.word	0x40022100
 8002dd8:	40022300 	.word	0x40022300
 8002ddc:	58026300 	.word	0x58026300

08002de0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d14b      	bne.n	8002e92 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d021      	beq.n	8002e58 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f86d 	bl	8001ef8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d032      	beq.n	8002e8a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d12b      	bne.n	8002e8a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11f      	bne.n	8002e8a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
 8002e56:	e018      	b.n	8002e8a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d111      	bne.n	8002e8a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fbf2 	bl	8002674 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e90:	e00e      	b.n	8002eb0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fbfc 	bl	800269c <HAL_ADC_ErrorCallback>
}
 8002ea4:	e004      	b.n	8002eb0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff fbde 	bl	8002688 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fbce 	bl	800269c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a70      	ldr	r2, [pc, #448]	; (80030d8 <ADC_ConfigureBoostMode+0x1d0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <ADC_ConfigureBoostMode+0x1c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6f      	ldr	r2, [pc, #444]	; (80030dc <ADC_ConfigureBoostMode+0x1d4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d109      	bne.n	8002f38 <ADC_ConfigureBoostMode+0x30>
 8002f24:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <ADC_ConfigureBoostMode+0x1d8>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e008      	b.n	8002f4a <ADC_ConfigureBoostMode+0x42>
 8002f38:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <ADC_ConfigureBoostMode+0x1dc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f4e:	f003 fe1d 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8002f52:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f5c:	d006      	beq.n	8002f6c <ADC_ConfigureBoostMode+0x64>
 8002f5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f62:	d00b      	beq.n	8002f7c <ADC_ConfigureBoostMode+0x74>
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d000      	beq.n	8002f6c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002f6a:	e05d      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	60fb      	str	r3, [r7, #12]
        break;
 8002f7a:	e055      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	60fb      	str	r3, [r7, #12]
        break;
 8002f82:	e051      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f88:	f004 fd3a 	bl	8007a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f8c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f96:	d02a      	beq.n	8002fee <ADC_ConfigureBoostMode+0xe6>
 8002f98:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f9c:	d813      	bhi.n	8002fc6 <ADC_ConfigureBoostMode+0xbe>
 8002f9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fa2:	d024      	beq.n	8002fee <ADC_ConfigureBoostMode+0xe6>
 8002fa4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fa8:	d806      	bhi.n	8002fb8 <ADC_ConfigureBoostMode+0xb0>
 8002faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fae:	d01e      	beq.n	8002fee <ADC_ConfigureBoostMode+0xe6>
 8002fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fb4:	d01b      	beq.n	8002fee <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002fb6:	e037      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbc:	d017      	beq.n	8002fee <ADC_ConfigureBoostMode+0xe6>
 8002fbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fc2:	d014      	beq.n	8002fee <ADC_ConfigureBoostMode+0xe6>
        break;
 8002fc4:	e030      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002fc6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fca:	d021      	beq.n	8003010 <ADC_ConfigureBoostMode+0x108>
 8002fcc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fd0:	d806      	bhi.n	8002fe0 <ADC_ConfigureBoostMode+0xd8>
 8002fd2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fd6:	d013      	beq.n	8003000 <ADC_ConfigureBoostMode+0xf8>
 8002fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fdc:	d014      	beq.n	8003008 <ADC_ConfigureBoostMode+0x100>
        break;
 8002fde:	e023      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002fe0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002fe4:	d018      	beq.n	8003018 <ADC_ConfigureBoostMode+0x110>
 8002fe6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002fea:	d019      	beq.n	8003020 <ADC_ConfigureBoostMode+0x118>
        break;
 8002fec:	e01c      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0c9b      	lsrs	r3, r3, #18
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
        break;
 8002ffe:	e013      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
      break;
 8003006:	e00f      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e00b      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	099b      	lsrs	r3, r3, #6
 8003014:	60fb      	str	r3, [r7, #12]
        break;
 8003016:	e007      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	09db      	lsrs	r3, r3, #7
 800301c:	60fb      	str	r3, [r7, #12]
        break;
 800301e:	e003      	b.n	8003028 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	60fb      	str	r3, [r7, #12]
        break;
 8003026:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003028:	f7fe fec2 	bl	8001db0 <HAL_GetREVID>
 800302c:	4602      	mov	r2, r0
 800302e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003032:	429a      	cmp	r2, r3
 8003034:	d815      	bhi.n	8003062 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a2b      	ldr	r2, [pc, #172]	; (80030e8 <ADC_ConfigureBoostMode+0x1e0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d908      	bls.n	8003050 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800304e:	e03e      	b.n	80030ce <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	e035      	b.n	80030ce <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a20      	ldr	r2, [pc, #128]	; (80030ec <ADC_ConfigureBoostMode+0x1e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d808      	bhi.n	8003082 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	e025      	b.n	80030ce <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <ADC_ConfigureBoostMode+0x1e8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d80a      	bhi.n	80030a0 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309c:	609a      	str	r2, [r3, #8]
}
 800309e:	e016      	b.n	80030ce <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <ADC_ConfigureBoostMode+0x1ec>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d80a      	bhi.n	80030be <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	e007      	b.n	80030ce <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030cc:	609a      	str	r2, [r3, #8]
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40022100 	.word	0x40022100
 80030e0:	40022300 	.word	0x40022300
 80030e4:	58026300 	.word	0x58026300
 80030e8:	01312d00 	.word	0x01312d00
 80030ec:	005f5e10 	.word	0x005f5e10
 80030f0:	00bebc20 	.word	0x00bebc20
 80030f4:	017d7840 	.word	0x017d7840

080030f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <__NVIC_SetPriorityGrouping+0x40>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	4313      	orrs	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <__NVIC_SetPriorityGrouping+0x40>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	05fa0000 	.word	0x05fa0000

08003140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff29 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff40 	bl	8003140 <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff90 	bl	80031ec <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5f 	bl	8003198 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff33 	bl	800315c <__NVIC_EnableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffa4 	bl	8003254 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7fe fd18 	bl	8001d54 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e316      	b.n	800395e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_DMA_Init+0x1b8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d04a      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_DMA_Init+0x1bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d045      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_DMA_Init+0x1c0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d040      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a62      	ldr	r2, [pc, #392]	; (80034dc <HAL_DMA_Init+0x1c4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d03b      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a60      	ldr	r2, [pc, #384]	; (80034e0 <HAL_DMA_Init+0x1c8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d036      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5f      	ldr	r2, [pc, #380]	; (80034e4 <HAL_DMA_Init+0x1cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d031      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_DMA_Init+0x1d0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02c      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	; (80034ec <HAL_DMA_Init+0x1d4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d027      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5a      	ldr	r2, [pc, #360]	; (80034f0 <HAL_DMA_Init+0x1d8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a59      	ldr	r2, [pc, #356]	; (80034f4 <HAL_DMA_Init+0x1dc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01d      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_DMA_Init+0x1e0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_DMA_Init+0x1e4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_DMA_Init+0x1e8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a53      	ldr	r2, [pc, #332]	; (8003504 <HAL_DMA_Init+0x1ec>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_DMA_Init+0x1f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_DMA_Init+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Init+0xbc>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_DMA_Init+0xbe>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 813b 	beq.w	8003652 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_DMA_Init+0x1b8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d04a      	beq.n	800348c <HAL_DMA_Init+0x174>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_DMA_Init+0x1bc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d045      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_DMA_Init+0x1c0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d040      	beq.n	800348c <HAL_DMA_Init+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_DMA_Init+0x1c4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d03b      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_DMA_Init+0x1c8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d036      	beq.n	800348c <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_DMA_Init+0x1cc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d031      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_DMA_Init+0x1d0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d02c      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_DMA_Init+0x1d4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d027      	beq.n	800348c <HAL_DMA_Init+0x174>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_DMA_Init+0x1d8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_DMA_Init+0x1dc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01d      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_DMA_Init+0x1e0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_DMA_Init+0x174>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_DMA_Init+0x1e4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_DMA_Init+0x1e8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_DMA_Init+0x174>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_DMA_Init+0x1ec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_DMA_Init+0x1f0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_DMA_Init+0x1f4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <HAL_DMA_Init+0x186>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e007      	b.n	80034ae <HAL_DMA_Init+0x196>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ae:	e02f      	b.n	8003510 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b0:	f7fe fc50 	bl	8001d54 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d928      	bls.n	8003510 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2203      	movs	r2, #3
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e246      	b.n	800395e <HAL_DMA_Init+0x646>
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1c8      	bne.n	80034b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4b83      	ldr	r3, [pc, #524]	; (8003738 <HAL_DMA_Init+0x420>)
 800352a:	4013      	ands	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003536:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b04      	cmp	r3, #4
 8003562:	d107      	bne.n	8003574 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4313      	orrs	r3, r2
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003574:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_DMA_Init+0x424>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b71      	ldr	r3, [pc, #452]	; (8003740 <HAL_DMA_Init+0x428>)
 800357a:	4013      	ands	r3, r2
 800357c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003580:	d328      	bcc.n	80035d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b28      	cmp	r3, #40	; 0x28
 8003588:	d903      	bls.n	8003592 <HAL_DMA_Init+0x27a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b2e      	cmp	r3, #46	; 0x2e
 8003590:	d917      	bls.n	80035c2 <HAL_DMA_Init+0x2aa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b3e      	cmp	r3, #62	; 0x3e
 8003598:	d903      	bls.n	80035a2 <HAL_DMA_Init+0x28a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b42      	cmp	r3, #66	; 0x42
 80035a0:	d90f      	bls.n	80035c2 <HAL_DMA_Init+0x2aa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b46      	cmp	r3, #70	; 0x46
 80035a8:	d903      	bls.n	80035b2 <HAL_DMA_Init+0x29a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b48      	cmp	r3, #72	; 0x48
 80035b0:	d907      	bls.n	80035c2 <HAL_DMA_Init+0x2aa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b4e      	cmp	r3, #78	; 0x4e
 80035b8:	d905      	bls.n	80035c6 <HAL_DMA_Init+0x2ae>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b52      	cmp	r3, #82	; 0x52
 80035c0:	d801      	bhi.n	80035c6 <HAL_DMA_Init+0x2ae>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_DMA_Init+0x2b0>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d117      	bne.n	800362e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f002 f813 	bl	800563c <DMA_CheckFifoParam>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e197      	b.n	800395e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 ff4e 	bl	80054d8 <DMA_CalcBaseAndBitshift>
 800363c:	4603      	mov	r3, r0
 800363e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	223f      	movs	r2, #63	; 0x3f
 800364a:	409a      	lsls	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e0cd      	b.n	80037ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_DMA_Init+0x42c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a39      	ldr	r2, [pc, #228]	; (8003748 <HAL_DMA_Init+0x430>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a38      	ldr	r2, [pc, #224]	; (800374c <HAL_DMA_Init+0x434>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a36      	ldr	r2, [pc, #216]	; (8003750 <HAL_DMA_Init+0x438>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a35      	ldr	r2, [pc, #212]	; (8003754 <HAL_DMA_Init+0x43c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_DMA_Init+0x440>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_DMA_Init+0x444>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_DMA_Init+0x448>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_DMA_Init+0x38e>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_DMA_Init+0x390>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8097 	beq.w	80037dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <HAL_DMA_Init+0x42c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d021      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_DMA_Init+0x430>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01c      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a21      	ldr	r2, [pc, #132]	; (800374c <HAL_DMA_Init+0x434>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d017      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_DMA_Init+0x438>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d012      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_DMA_Init+0x43c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00d      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_DMA_Init+0x440>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d008      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_DMA_Init+0x444>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_DMA_Init+0x448>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_DMA_Init+0x44c>)
 800371a:	4013      	ands	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d020      	beq.n	8003768 <HAL_DMA_Init+0x450>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d102      	bne.n	8003734 <HAL_DMA_Init+0x41c>
 800372e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003732:	e01a      	b.n	800376a <HAL_DMA_Init+0x452>
 8003734:	2300      	movs	r3, #0
 8003736:	e018      	b.n	800376a <HAL_DMA_Init+0x452>
 8003738:	fe10803f 	.word	0xfe10803f
 800373c:	5c001000 	.word	0x5c001000
 8003740:	ffff0000 	.word	0xffff0000
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494
 8003764:	fffe000f 	.word	0xfffe000f
 8003768:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68d2      	ldr	r2, [r2, #12]
 800376e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003798:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b6e      	ldr	r3, [pc, #440]	; (8003968 <HAL_DMA_Init+0x650>)
 80037b0:	4413      	add	r3, r2
 80037b2:	4a6e      	ldr	r2, [pc, #440]	; (800396c <HAL_DMA_Init+0x654>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f001 fe89 	bl	80054d8 <DMA_CalcBaseAndBitshift>
 80037c6:	4603      	mov	r3, r0
 80037c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	e008      	b.n	80037ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2203      	movs	r2, #3
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0b7      	b.n	800395e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5f      	ldr	r2, [pc, #380]	; (8003970 <HAL_DMA_Init+0x658>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d072      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_DMA_Init+0x65c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d06d      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_DMA_Init+0x660>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d068      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5a      	ldr	r2, [pc, #360]	; (800397c <HAL_DMA_Init+0x664>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d063      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a59      	ldr	r2, [pc, #356]	; (8003980 <HAL_DMA_Init+0x668>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d05e      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a57      	ldr	r2, [pc, #348]	; (8003984 <HAL_DMA_Init+0x66c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d059      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_DMA_Init+0x670>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d054      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a54      	ldr	r2, [pc, #336]	; (800398c <HAL_DMA_Init+0x674>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04f      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a53      	ldr	r2, [pc, #332]	; (8003990 <HAL_DMA_Init+0x678>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d04a      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_DMA_Init+0x67c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d045      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_DMA_Init+0x680>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d040      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4e      	ldr	r2, [pc, #312]	; (800399c <HAL_DMA_Init+0x684>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d03b      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4d      	ldr	r2, [pc, #308]	; (80039a0 <HAL_DMA_Init+0x688>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d036      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_DMA_Init+0x68c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d031      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_DMA_Init+0x690>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d02c      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a48      	ldr	r2, [pc, #288]	; (80039ac <HAL_DMA_Init+0x694>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d027      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a47      	ldr	r2, [pc, #284]	; (80039b0 <HAL_DMA_Init+0x698>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a45      	ldr	r2, [pc, #276]	; (80039b4 <HAL_DMA_Init+0x69c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01d      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a44      	ldr	r2, [pc, #272]	; (80039b8 <HAL_DMA_Init+0x6a0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d018      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a42      	ldr	r2, [pc, #264]	; (80039bc <HAL_DMA_Init+0x6a4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_DMA_Init+0x6a8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <HAL_DMA_Init+0x6ac>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3e      	ldr	r2, [pc, #248]	; (80039c8 <HAL_DMA_Init+0x6b0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <HAL_DMA_Init+0x6b4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Init+0x5ca>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_Init+0x5cc>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d032      	beq.n	800394e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 ff23 	bl	8005734 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d102      	bne.n	80038fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003910:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d010      	beq.n	800393c <HAL_DMA_Init+0x624>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b08      	cmp	r3, #8
 8003920:	d80c      	bhi.n	800393c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f001 ffa0 	bl	8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e008      	b.n	800394e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	a7fdabf8 	.word	0xa7fdabf8
 800396c:	cccccccd 	.word	0xcccccccd
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	58025408 	.word	0x58025408
 80039b4:	5802541c 	.word	0x5802541c
 80039b8:	58025430 	.word	0x58025430
 80039bc:	58025444 	.word	0x58025444
 80039c0:	58025458 	.word	0x58025458
 80039c4:	5802546c 	.word	0x5802546c
 80039c8:	58025480 	.word	0x58025480
 80039cc:	58025494 	.word	0x58025494

080039d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e226      	b.n	8003e3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_DMA_Start_IT+0x2a>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e21f      	b.n	8003e3a <HAL_DMA_Start_IT+0x46a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f040 820a 	bne.w	8003e24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a68      	ldr	r2, [pc, #416]	; (8003bc4 <HAL_DMA_Start_IT+0x1f4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04a      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a66      	ldr	r2, [pc, #408]	; (8003bc8 <HAL_DMA_Start_IT+0x1f8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_DMA_Start_IT+0x1fc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d040      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a63      	ldr	r2, [pc, #396]	; (8003bd0 <HAL_DMA_Start_IT+0x200>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d03b      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a62      	ldr	r2, [pc, #392]	; (8003bd4 <HAL_DMA_Start_IT+0x204>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d036      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a60      	ldr	r2, [pc, #384]	; (8003bd8 <HAL_DMA_Start_IT+0x208>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d031      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5f      	ldr	r2, [pc, #380]	; (8003bdc <HAL_DMA_Start_IT+0x20c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02c      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5d      	ldr	r2, [pc, #372]	; (8003be0 <HAL_DMA_Start_IT+0x210>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d027      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5c      	ldr	r2, [pc, #368]	; (8003be4 <HAL_DMA_Start_IT+0x214>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <HAL_DMA_Start_IT+0x218>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a59      	ldr	r2, [pc, #356]	; (8003bec <HAL_DMA_Start_IT+0x21c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_DMA_Start_IT+0x220>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a56      	ldr	r2, [pc, #344]	; (8003bf4 <HAL_DMA_Start_IT+0x224>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <HAL_DMA_Start_IT+0x228>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_DMA_Start_IT+0x22c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a51      	ldr	r2, [pc, #324]	; (8003c00 <HAL_DMA_Start_IT+0x230>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_Start_IT+0x100>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_DMA_Start_IT+0x110>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f001 fb4a 	bl	8005180 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <HAL_DMA_Start_IT+0x1f4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	; (8003bc8 <HAL_DMA_Start_IT+0x1f8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a31      	ldr	r2, [pc, #196]	; (8003bcc <HAL_DMA_Start_IT+0x1fc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a30      	ldr	r2, [pc, #192]	; (8003bd0 <HAL_DMA_Start_IT+0x200>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_DMA_Start_IT+0x204>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_DMA_Start_IT+0x208>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_DMA_Start_IT+0x20c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <HAL_DMA_Start_IT+0x210>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_DMA_Start_IT+0x214>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <HAL_DMA_Start_IT+0x218>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_DMA_Start_IT+0x21c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_DMA_Start_IT+0x220>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_DMA_Start_IT+0x224>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_DMA_Start_IT+0x228>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_DMA_Start_IT+0x22c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_DMA_Start_IT+0x230>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Start_IT+0x1c0>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_Start_IT+0x1c2>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d036      	beq.n	8003c04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 021e 	bic.w	r2, r3, #30
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0216 	orr.w	r2, r2, #22
 8003ba8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03e      	beq.n	8003c30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e035      	b.n	8003c30 <HAL_DMA_Start_IT+0x260>
 8003bc4:	40020010 	.word	0x40020010
 8003bc8:	40020028 	.word	0x40020028
 8003bcc:	40020040 	.word	0x40020040
 8003bd0:	40020058 	.word	0x40020058
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40020088 	.word	0x40020088
 8003bdc:	400200a0 	.word	0x400200a0
 8003be0:	400200b8 	.word	0x400200b8
 8003be4:	40020410 	.word	0x40020410
 8003be8:	40020428 	.word	0x40020428
 8003bec:	40020440 	.word	0x40020440
 8003bf0:	40020458 	.word	0x40020458
 8003bf4:	40020470 	.word	0x40020470
 8003bf8:	40020488 	.word	0x40020488
 8003bfc:	400204a0 	.word	0x400204a0
 8003c00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 020e 	bic.w	r2, r3, #14
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 020a 	orr.w	r2, r2, #10
 8003c16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0204 	orr.w	r2, r2, #4
 8003c2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <HAL_DMA_Start_IT+0x474>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d072      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a82      	ldr	r2, [pc, #520]	; (8003e48 <HAL_DMA_Start_IT+0x478>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d06d      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a80      	ldr	r2, [pc, #512]	; (8003e4c <HAL_DMA_Start_IT+0x47c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d068      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7f      	ldr	r2, [pc, #508]	; (8003e50 <HAL_DMA_Start_IT+0x480>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d063      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7d      	ldr	r2, [pc, #500]	; (8003e54 <HAL_DMA_Start_IT+0x484>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d05e      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7c      	ldr	r2, [pc, #496]	; (8003e58 <HAL_DMA_Start_IT+0x488>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d059      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7a      	ldr	r2, [pc, #488]	; (8003e5c <HAL_DMA_Start_IT+0x48c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d054      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a79      	ldr	r2, [pc, #484]	; (8003e60 <HAL_DMA_Start_IT+0x490>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d04f      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a77      	ldr	r2, [pc, #476]	; (8003e64 <HAL_DMA_Start_IT+0x494>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d04a      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a76      	ldr	r2, [pc, #472]	; (8003e68 <HAL_DMA_Start_IT+0x498>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d045      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a74      	ldr	r2, [pc, #464]	; (8003e6c <HAL_DMA_Start_IT+0x49c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d040      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a73      	ldr	r2, [pc, #460]	; (8003e70 <HAL_DMA_Start_IT+0x4a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d03b      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a71      	ldr	r2, [pc, #452]	; (8003e74 <HAL_DMA_Start_IT+0x4a4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d036      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a70      	ldr	r2, [pc, #448]	; (8003e78 <HAL_DMA_Start_IT+0x4a8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d031      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_DMA_Start_IT+0x4ac>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02c      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6d      	ldr	r2, [pc, #436]	; (8003e80 <HAL_DMA_Start_IT+0x4b0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d027      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	; (8003e84 <HAL_DMA_Start_IT+0x4b4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_DMA_Start_IT+0x4b8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	; (8003e8c <HAL_DMA_Start_IT+0x4bc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a67      	ldr	r2, [pc, #412]	; (8003e90 <HAL_DMA_Start_IT+0x4c0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a65      	ldr	r2, [pc, #404]	; (8003e94 <HAL_DMA_Start_IT+0x4c4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a64      	ldr	r2, [pc, #400]	; (8003e98 <HAL_DMA_Start_IT+0x4c8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a62      	ldr	r2, [pc, #392]	; (8003e9c <HAL_DMA_Start_IT+0x4cc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a61      	ldr	r2, [pc, #388]	; (8003ea0 <HAL_DMA_Start_IT+0x4d0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_Start_IT+0x354>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_DMA_Start_IT+0x356>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01a      	beq.n	8003d60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <HAL_DMA_Start_IT+0x474>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d04a      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a36      	ldr	r2, [pc, #216]	; (8003e48 <HAL_DMA_Start_IT+0x478>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d045      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_DMA_Start_IT+0x47c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d040      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <HAL_DMA_Start_IT+0x480>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d03b      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <HAL_DMA_Start_IT+0x484>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d036      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_DMA_Start_IT+0x488>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d031      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <HAL_DMA_Start_IT+0x48c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02c      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <HAL_DMA_Start_IT+0x490>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d027      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <HAL_DMA_Start_IT+0x494>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2a      	ldr	r2, [pc, #168]	; (8003e68 <HAL_DMA_Start_IT+0x498>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01d      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <HAL_DMA_Start_IT+0x49c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a27      	ldr	r2, [pc, #156]	; (8003e70 <HAL_DMA_Start_IT+0x4a0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_DMA_Start_IT+0x4a4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <HAL_DMA_Start_IT+0x4a8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_DMA_Start_IT+0x4ac>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_DMA_Start_IT+0x4b0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d108      	bne.n	8003e12 <HAL_DMA_Start_IT+0x442>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e012      	b.n	8003e38 <HAL_DMA_Start_IT+0x468>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e009      	b.n	8003e38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40020010 	.word	0x40020010
 8003e48:	40020028 	.word	0x40020028
 8003e4c:	40020040 	.word	0x40020040
 8003e50:	40020058 	.word	0x40020058
 8003e54:	40020070 	.word	0x40020070
 8003e58:	40020088 	.word	0x40020088
 8003e5c:	400200a0 	.word	0x400200a0
 8003e60:	400200b8 	.word	0x400200b8
 8003e64:	40020410 	.word	0x40020410
 8003e68:	40020428 	.word	0x40020428
 8003e6c:	40020440 	.word	0x40020440
 8003e70:	40020458 	.word	0x40020458
 8003e74:	40020470 	.word	0x40020470
 8003e78:	40020488 	.word	0x40020488
 8003e7c:	400204a0 	.word	0x400204a0
 8003e80:	400204b8 	.word	0x400204b8
 8003e84:	58025408 	.word	0x58025408
 8003e88:	5802541c 	.word	0x5802541c
 8003e8c:	58025430 	.word	0x58025430
 8003e90:	58025444 	.word	0x58025444
 8003e94:	58025458 	.word	0x58025458
 8003e98:	5802546c 	.word	0x5802546c
 8003e9c:	58025480 	.word	0x58025480
 8003ea0:	58025494 	.word	0x58025494

08003ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e205      	b.n	80042c2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d004      	beq.n	8003ecc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e1fa      	b.n	80042c2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a8c      	ldr	r2, [pc, #560]	; (8004104 <HAL_DMA_Abort_IT+0x260>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d04a      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a8b      	ldr	r2, [pc, #556]	; (8004108 <HAL_DMA_Abort_IT+0x264>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d045      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a89      	ldr	r2, [pc, #548]	; (800410c <HAL_DMA_Abort_IT+0x268>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d040      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a88      	ldr	r2, [pc, #544]	; (8004110 <HAL_DMA_Abort_IT+0x26c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d03b      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a86      	ldr	r2, [pc, #536]	; (8004114 <HAL_DMA_Abort_IT+0x270>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d036      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a85      	ldr	r2, [pc, #532]	; (8004118 <HAL_DMA_Abort_IT+0x274>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d031      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a83      	ldr	r2, [pc, #524]	; (800411c <HAL_DMA_Abort_IT+0x278>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02c      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a82      	ldr	r2, [pc, #520]	; (8004120 <HAL_DMA_Abort_IT+0x27c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d027      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a80      	ldr	r2, [pc, #512]	; (8004124 <HAL_DMA_Abort_IT+0x280>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7f      	ldr	r2, [pc, #508]	; (8004128 <HAL_DMA_Abort_IT+0x284>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01d      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7d      	ldr	r2, [pc, #500]	; (800412c <HAL_DMA_Abort_IT+0x288>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	; (8004130 <HAL_DMA_Abort_IT+0x28c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a7a      	ldr	r2, [pc, #488]	; (8004134 <HAL_DMA_Abort_IT+0x290>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a79      	ldr	r2, [pc, #484]	; (8004138 <HAL_DMA_Abort_IT+0x294>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a77      	ldr	r2, [pc, #476]	; (800413c <HAL_DMA_Abort_IT+0x298>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_DMA_Abort_IT+0xc8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a76      	ldr	r2, [pc, #472]	; (8004140 <HAL_DMA_Abort_IT+0x29c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_DMA_Abort_IT+0xcc>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_DMA_Abort_IT+0xce>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d065      	beq.n	8004042 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a60      	ldr	r2, [pc, #384]	; (8004104 <HAL_DMA_Abort_IT+0x260>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d04a      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5e      	ldr	r2, [pc, #376]	; (8004108 <HAL_DMA_Abort_IT+0x264>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d045      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5d      	ldr	r2, [pc, #372]	; (800410c <HAL_DMA_Abort_IT+0x268>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d040      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5b      	ldr	r2, [pc, #364]	; (8004110 <HAL_DMA_Abort_IT+0x26c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d03b      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5a      	ldr	r2, [pc, #360]	; (8004114 <HAL_DMA_Abort_IT+0x270>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d036      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	; (8004118 <HAL_DMA_Abort_IT+0x274>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d031      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a57      	ldr	r2, [pc, #348]	; (800411c <HAL_DMA_Abort_IT+0x278>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d02c      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_DMA_Abort_IT+0x27c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d027      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a54      	ldr	r2, [pc, #336]	; (8004124 <HAL_DMA_Abort_IT+0x280>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d022      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	; (8004128 <HAL_DMA_Abort_IT+0x284>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01d      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a51      	ldr	r2, [pc, #324]	; (800412c <HAL_DMA_Abort_IT+0x288>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4f      	ldr	r2, [pc, #316]	; (8004130 <HAL_DMA_Abort_IT+0x28c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <HAL_DMA_Abort_IT+0x290>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4c      	ldr	r2, [pc, #304]	; (8004138 <HAL_DMA_Abort_IT+0x294>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4b      	ldr	r2, [pc, #300]	; (800413c <HAL_DMA_Abort_IT+0x298>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_DMA_Abort_IT+0x17a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a49      	ldr	r2, [pc, #292]	; (8004140 <HAL_DMA_Abort_IT+0x29c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <HAL_DMA_Abort_IT+0x18c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e147      	b.n	80042c0 <HAL_DMA_Abort_IT+0x41c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e13e      	b.n	80042c0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 020e 	bic.w	r2, r2, #14
 8004050:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2b      	ldr	r2, [pc, #172]	; (8004104 <HAL_DMA_Abort_IT+0x260>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04a      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a29      	ldr	r2, [pc, #164]	; (8004108 <HAL_DMA_Abort_IT+0x264>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d045      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <HAL_DMA_Abort_IT+0x268>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d040      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_DMA_Abort_IT+0x26c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d03b      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <HAL_DMA_Abort_IT+0x270>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d036      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_DMA_Abort_IT+0x274>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d031      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <HAL_DMA_Abort_IT+0x278>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d02c      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <HAL_DMA_Abort_IT+0x27c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <HAL_DMA_Abort_IT+0x280>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_DMA_Abort_IT+0x284>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_DMA_Abort_IT+0x288>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_DMA_Abort_IT+0x28c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_DMA_Abort_IT+0x290>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a17      	ldr	r2, [pc, #92]	; (8004138 <HAL_DMA_Abort_IT+0x294>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <HAL_DMA_Abort_IT+0x298>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x24e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <HAL_DMA_Abort_IT+0x29c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d128      	bne.n	8004144 <HAL_DMA_Abort_IT+0x2a0>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e027      	b.n	8004154 <HAL_DMA_Abort_IT+0x2b0>
 8004104:	40020010 	.word	0x40020010
 8004108:	40020028 	.word	0x40020028
 800410c:	40020040 	.word	0x40020040
 8004110:	40020058 	.word	0x40020058
 8004114:	40020070 	.word	0x40020070
 8004118:	40020088 	.word	0x40020088
 800411c:	400200a0 	.word	0x400200a0
 8004120:	400200b8 	.word	0x400200b8
 8004124:	40020410 	.word	0x40020410
 8004128:	40020428 	.word	0x40020428
 800412c:	40020440 	.word	0x40020440
 8004130:	40020458 	.word	0x40020458
 8004134:	40020470 	.word	0x40020470
 8004138:	40020488 	.word	0x40020488
 800413c:	400204a0 	.word	0x400204a0
 8004140:	400204b8 	.word	0x400204b8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5c      	ldr	r2, [pc, #368]	; (80042cc <HAL_DMA_Abort_IT+0x428>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d072      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <HAL_DMA_Abort_IT+0x42c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d06d      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a59      	ldr	r2, [pc, #356]	; (80042d4 <HAL_DMA_Abort_IT+0x430>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d068      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_DMA_Abort_IT+0x434>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d063      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a56      	ldr	r2, [pc, #344]	; (80042dc <HAL_DMA_Abort_IT+0x438>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d05e      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a55      	ldr	r2, [pc, #340]	; (80042e0 <HAL_DMA_Abort_IT+0x43c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d059      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a53      	ldr	r2, [pc, #332]	; (80042e4 <HAL_DMA_Abort_IT+0x440>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d054      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_DMA_Abort_IT+0x444>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04f      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a50      	ldr	r2, [pc, #320]	; (80042ec <HAL_DMA_Abort_IT+0x448>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d04a      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a4f      	ldr	r2, [pc, #316]	; (80042f0 <HAL_DMA_Abort_IT+0x44c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d045      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a4d      	ldr	r2, [pc, #308]	; (80042f4 <HAL_DMA_Abort_IT+0x450>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d040      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a4c      	ldr	r2, [pc, #304]	; (80042f8 <HAL_DMA_Abort_IT+0x454>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d03b      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a4a      	ldr	r2, [pc, #296]	; (80042fc <HAL_DMA_Abort_IT+0x458>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d036      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a49      	ldr	r2, [pc, #292]	; (8004300 <HAL_DMA_Abort_IT+0x45c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d031      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a47      	ldr	r2, [pc, #284]	; (8004304 <HAL_DMA_Abort_IT+0x460>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02c      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a46      	ldr	r2, [pc, #280]	; (8004308 <HAL_DMA_Abort_IT+0x464>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d027      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a44      	ldr	r2, [pc, #272]	; (800430c <HAL_DMA_Abort_IT+0x468>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d022      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a43      	ldr	r2, [pc, #268]	; (8004310 <HAL_DMA_Abort_IT+0x46c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d01d      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a41      	ldr	r2, [pc, #260]	; (8004314 <HAL_DMA_Abort_IT+0x470>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d018      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <HAL_DMA_Abort_IT+0x474>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3e      	ldr	r2, [pc, #248]	; (800431c <HAL_DMA_Abort_IT+0x478>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <HAL_DMA_Abort_IT+0x47c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <HAL_DMA_Abort_IT+0x480>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_DMA_Abort_IT+0x3a0>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <HAL_DMA_Abort_IT+0x484>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Abort_IT+0x3a4>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_DMA_Abort_IT+0x3a6>
 8004248:	2300      	movs	r3, #0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d028      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800427c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004294:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800429e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40020010 	.word	0x40020010
 80042d0:	40020028 	.word	0x40020028
 80042d4:	40020040 	.word	0x40020040
 80042d8:	40020058 	.word	0x40020058
 80042dc:	40020070 	.word	0x40020070
 80042e0:	40020088 	.word	0x40020088
 80042e4:	400200a0 	.word	0x400200a0
 80042e8:	400200b8 	.word	0x400200b8
 80042ec:	40020410 	.word	0x40020410
 80042f0:	40020428 	.word	0x40020428
 80042f4:	40020440 	.word	0x40020440
 80042f8:	40020458 	.word	0x40020458
 80042fc:	40020470 	.word	0x40020470
 8004300:	40020488 	.word	0x40020488
 8004304:	400204a0 	.word	0x400204a0
 8004308:	400204b8 	.word	0x400204b8
 800430c:	58025408 	.word	0x58025408
 8004310:	5802541c 	.word	0x5802541c
 8004314:	58025430 	.word	0x58025430
 8004318:	58025444 	.word	0x58025444
 800431c:	58025458 	.word	0x58025458
 8004320:	5802546c 	.word	0x5802546c
 8004324:	58025480 	.word	0x58025480
 8004328:	58025494 	.word	0x58025494

0800432c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004338:	4b67      	ldr	r3, [pc, #412]	; (80044d8 <HAL_DMA_IRQHandler+0x1ac>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a67      	ldr	r2, [pc, #412]	; (80044dc <HAL_DMA_IRQHandler+0x1b0>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5f      	ldr	r2, [pc, #380]	; (80044e0 <HAL_DMA_IRQHandler+0x1b4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04a      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a5d      	ldr	r2, [pc, #372]	; (80044e4 <HAL_DMA_IRQHandler+0x1b8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d045      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a5c      	ldr	r2, [pc, #368]	; (80044e8 <HAL_DMA_IRQHandler+0x1bc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d040      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a5a      	ldr	r2, [pc, #360]	; (80044ec <HAL_DMA_IRQHandler+0x1c0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03b      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a59      	ldr	r2, [pc, #356]	; (80044f0 <HAL_DMA_IRQHandler+0x1c4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d036      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a57      	ldr	r2, [pc, #348]	; (80044f4 <HAL_DMA_IRQHandler+0x1c8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a56      	ldr	r2, [pc, #344]	; (80044f8 <HAL_DMA_IRQHandler+0x1cc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d02c      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a54      	ldr	r2, [pc, #336]	; (80044fc <HAL_DMA_IRQHandler+0x1d0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d027      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a53      	ldr	r2, [pc, #332]	; (8004500 <HAL_DMA_IRQHandler+0x1d4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a51      	ldr	r2, [pc, #324]	; (8004504 <HAL_DMA_IRQHandler+0x1d8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a50      	ldr	r2, [pc, #320]	; (8004508 <HAL_DMA_IRQHandler+0x1dc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a4e      	ldr	r2, [pc, #312]	; (800450c <HAL_DMA_IRQHandler+0x1e0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_DMA_IRQHandler+0x1e4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a4b      	ldr	r2, [pc, #300]	; (8004514 <HAL_DMA_IRQHandler+0x1e8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <HAL_DMA_IRQHandler+0x1ec>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_IRQHandler+0xd2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a48      	ldr	r2, [pc, #288]	; (800451c <HAL_DMA_IRQHandler+0x1f0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_IRQHandler+0xd6>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_DMA_IRQHandler+0xd8>
 8004402:	2300      	movs	r3, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 842b 	beq.w	8004c60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2208      	movs	r2, #8
 8004414:	409a      	lsls	r2, r3
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a2 	beq.w	8004564 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2e      	ldr	r2, [pc, #184]	; (80044e0 <HAL_DMA_IRQHandler+0x1b4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d04a      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2d      	ldr	r2, [pc, #180]	; (80044e4 <HAL_DMA_IRQHandler+0x1b8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d045      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <HAL_DMA_IRQHandler+0x1bc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d040      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_DMA_IRQHandler+0x1c0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d03b      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_DMA_IRQHandler+0x1c4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d036      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <HAL_DMA_IRQHandler+0x1c8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d031      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <HAL_DMA_IRQHandler+0x1cc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02c      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <HAL_DMA_IRQHandler+0x1d0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d027      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_DMA_IRQHandler+0x1d4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_DMA_IRQHandler+0x1d8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d01d      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_DMA_IRQHandler+0x1dc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_DMA_IRQHandler+0x1e0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <HAL_DMA_IRQHandler+0x1e4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_DMA_IRQHandler+0x1e8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_DMA_IRQHandler+0x1ec>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x194>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_DMA_IRQHandler+0x1f0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d12f      	bne.n	8004520 <HAL_DMA_IRQHandler+0x1f4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e02e      	b.n	8004534 <HAL_DMA_IRQHandler+0x208>
 80044d6:	bf00      	nop
 80044d8:	2400001c 	.word	0x2400001c
 80044dc:	1b4e81b5 	.word	0x1b4e81b5
 80044e0:	40020010 	.word	0x40020010
 80044e4:	40020028 	.word	0x40020028
 80044e8:	40020040 	.word	0x40020040
 80044ec:	40020058 	.word	0x40020058
 80044f0:	40020070 	.word	0x40020070
 80044f4:	40020088 	.word	0x40020088
 80044f8:	400200a0 	.word	0x400200a0
 80044fc:	400200b8 	.word	0x400200b8
 8004500:	40020410 	.word	0x40020410
 8004504:	40020428 	.word	0x40020428
 8004508:	40020440 	.word	0x40020440
 800450c:	40020458 	.word	0x40020458
 8004510:	40020470 	.word	0x40020470
 8004514:	40020488 	.word	0x40020488
 8004518:	400204a0 	.word	0x400204a0
 800451c:	400204b8 	.word	0x400204b8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2208      	movs	r2, #8
 8004552:	409a      	lsls	r2, r3
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d06e      	beq.n	8004658 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a69      	ldr	r2, [pc, #420]	; (8004724 <HAL_DMA_IRQHandler+0x3f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d04a      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a67      	ldr	r2, [pc, #412]	; (8004728 <HAL_DMA_IRQHandler+0x3fc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d045      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a66      	ldr	r2, [pc, #408]	; (800472c <HAL_DMA_IRQHandler+0x400>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d040      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a64      	ldr	r2, [pc, #400]	; (8004730 <HAL_DMA_IRQHandler+0x404>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d03b      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a63      	ldr	r2, [pc, #396]	; (8004734 <HAL_DMA_IRQHandler+0x408>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d036      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <HAL_DMA_IRQHandler+0x40c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d031      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a60      	ldr	r2, [pc, #384]	; (800473c <HAL_DMA_IRQHandler+0x410>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d02c      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <HAL_DMA_IRQHandler+0x414>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d027      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a5d      	ldr	r2, [pc, #372]	; (8004744 <HAL_DMA_IRQHandler+0x418>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d022      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5b      	ldr	r2, [pc, #364]	; (8004748 <HAL_DMA_IRQHandler+0x41c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01d      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a5a      	ldr	r2, [pc, #360]	; (800474c <HAL_DMA_IRQHandler+0x420>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_DMA_IRQHandler+0x424>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a57      	ldr	r2, [pc, #348]	; (8004754 <HAL_DMA_IRQHandler+0x428>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a55      	ldr	r2, [pc, #340]	; (8004758 <HAL_DMA_IRQHandler+0x42c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a54      	ldr	r2, [pc, #336]	; (800475c <HAL_DMA_IRQHandler+0x430>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_DMA_IRQHandler+0x2ee>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_DMA_IRQHandler+0x434>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10a      	bne.n	8004630 <HAL_DMA_IRQHandler+0x304>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf14      	ite	ne
 8004628:	2301      	movne	r3, #1
 800462a:	2300      	moveq	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e003      	b.n	8004638 <HAL_DMA_IRQHandler+0x30c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2201      	movs	r2, #1
 8004646:	409a      	lsls	r2, r3
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f043 0202 	orr.w	r2, r3, #2
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2204      	movs	r2, #4
 8004662:	409a      	lsls	r2, r3
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 808f 	beq.w	800478c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <HAL_DMA_IRQHandler+0x3f8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d04a      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <HAL_DMA_IRQHandler+0x3fc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d045      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a29      	ldr	r2, [pc, #164]	; (800472c <HAL_DMA_IRQHandler+0x400>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d040      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <HAL_DMA_IRQHandler+0x404>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d03b      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a26      	ldr	r2, [pc, #152]	; (8004734 <HAL_DMA_IRQHandler+0x408>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d036      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <HAL_DMA_IRQHandler+0x40c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d031      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a23      	ldr	r2, [pc, #140]	; (800473c <HAL_DMA_IRQHandler+0x410>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d02c      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a21      	ldr	r2, [pc, #132]	; (8004740 <HAL_DMA_IRQHandler+0x414>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d027      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a20      	ldr	r2, [pc, #128]	; (8004744 <HAL_DMA_IRQHandler+0x418>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d022      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_DMA_IRQHandler+0x41c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01d      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_DMA_IRQHandler+0x420>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d018      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <HAL_DMA_IRQHandler+0x424>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_DMA_IRQHandler+0x428>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_DMA_IRQHandler+0x42c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a17      	ldr	r2, [pc, #92]	; (800475c <HAL_DMA_IRQHandler+0x430>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_DMA_IRQHandler+0x3e2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a15      	ldr	r2, [pc, #84]	; (8004760 <HAL_DMA_IRQHandler+0x434>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d12a      	bne.n	8004764 <HAL_DMA_IRQHandler+0x438>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e023      	b.n	800476c <HAL_DMA_IRQHandler+0x440>
 8004724:	40020010 	.word	0x40020010
 8004728:	40020028 	.word	0x40020028
 800472c:	40020040 	.word	0x40020040
 8004730:	40020058 	.word	0x40020058
 8004734:	40020070 	.word	0x40020070
 8004738:	40020088 	.word	0x40020088
 800473c:	400200a0 	.word	0x400200a0
 8004740:	400200b8 	.word	0x400200b8
 8004744:	40020410 	.word	0x40020410
 8004748:	40020428 	.word	0x40020428
 800474c:	40020440 	.word	0x40020440
 8004750:	40020458 	.word	0x40020458
 8004754:	40020470 	.word	0x40020470
 8004758:	40020488 	.word	0x40020488
 800475c:	400204a0 	.word	0x400204a0
 8004760:	400204b8 	.word	0x400204b8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2204      	movs	r2, #4
 800477a:	409a      	lsls	r2, r3
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2210      	movs	r2, #16
 8004796:	409a      	lsls	r2, r3
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a6 	beq.w	80048ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a85      	ldr	r2, [pc, #532]	; (80049bc <HAL_DMA_IRQHandler+0x690>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d04a      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a83      	ldr	r2, [pc, #524]	; (80049c0 <HAL_DMA_IRQHandler+0x694>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d045      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a82      	ldr	r2, [pc, #520]	; (80049c4 <HAL_DMA_IRQHandler+0x698>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d040      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a80      	ldr	r2, [pc, #512]	; (80049c8 <HAL_DMA_IRQHandler+0x69c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d03b      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7f      	ldr	r2, [pc, #508]	; (80049cc <HAL_DMA_IRQHandler+0x6a0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d036      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7d      	ldr	r2, [pc, #500]	; (80049d0 <HAL_DMA_IRQHandler+0x6a4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7c      	ldr	r2, [pc, #496]	; (80049d4 <HAL_DMA_IRQHandler+0x6a8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d02c      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a7a      	ldr	r2, [pc, #488]	; (80049d8 <HAL_DMA_IRQHandler+0x6ac>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d027      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a79      	ldr	r2, [pc, #484]	; (80049dc <HAL_DMA_IRQHandler+0x6b0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a77      	ldr	r2, [pc, #476]	; (80049e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a76      	ldr	r2, [pc, #472]	; (80049e4 <HAL_DMA_IRQHandler+0x6b8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a74      	ldr	r2, [pc, #464]	; (80049e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a73      	ldr	r2, [pc, #460]	; (80049ec <HAL_DMA_IRQHandler+0x6c0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a71      	ldr	r2, [pc, #452]	; (80049f0 <HAL_DMA_IRQHandler+0x6c4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a70      	ldr	r2, [pc, #448]	; (80049f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_DMA_IRQHandler+0x516>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6e      	ldr	r2, [pc, #440]	; (80049f8 <HAL_DMA_IRQHandler+0x6cc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10a      	bne.n	8004858 <HAL_DMA_IRQHandler+0x52c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e009      	b.n	800486c <HAL_DMA_IRQHandler+0x540>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03e      	beq.n	80048ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2210      	movs	r2, #16
 800487a:	409a      	lsls	r2, r3
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d018      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d108      	bne.n	80048ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d024      	beq.n	80048ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
 80048ac:	e01f      	b.n	80048ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
 80048be:	e016      	b.n	80048ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0208 	bic.w	r2, r2, #8
 80048dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2220      	movs	r2, #32
 80048f8:	409a      	lsls	r2, r3
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8110 	beq.w	8004b24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <HAL_DMA_IRQHandler+0x690>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d04a      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <HAL_DMA_IRQHandler+0x694>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d045      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <HAL_DMA_IRQHandler+0x698>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d040      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a28      	ldr	r2, [pc, #160]	; (80049c8 <HAL_DMA_IRQHandler+0x69c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d03b      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <HAL_DMA_IRQHandler+0x6a0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d036      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <HAL_DMA_IRQHandler+0x6a4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d031      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <HAL_DMA_IRQHandler+0x6a8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02c      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a22      	ldr	r2, [pc, #136]	; (80049d8 <HAL_DMA_IRQHandler+0x6ac>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d027      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <HAL_DMA_IRQHandler+0x6b0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d022      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d01d      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_DMA_IRQHandler+0x6b8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1a      	ldr	r2, [pc, #104]	; (80049ec <HAL_DMA_IRQHandler+0x6c0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_DMA_IRQHandler+0x6c4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x678>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <HAL_DMA_IRQHandler+0x6cc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d12b      	bne.n	80049fc <HAL_DMA_IRQHandler+0x6d0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e02a      	b.n	8004a10 <HAL_DMA_IRQHandler+0x6e4>
 80049ba:	bf00      	nop
 80049bc:	40020010 	.word	0x40020010
 80049c0:	40020028 	.word	0x40020028
 80049c4:	40020040 	.word	0x40020040
 80049c8:	40020058 	.word	0x40020058
 80049cc:	40020070 	.word	0x40020070
 80049d0:	40020088 	.word	0x40020088
 80049d4:	400200a0 	.word	0x400200a0
 80049d8:	400200b8 	.word	0x400200b8
 80049dc:	40020410 	.word	0x40020410
 80049e0:	40020428 	.word	0x40020428
 80049e4:	40020440 	.word	0x40020440
 80049e8:	40020458 	.word	0x40020458
 80049ec:	40020470 	.word	0x40020470
 80049f0:	40020488 	.word	0x40020488
 80049f4:	400204a0 	.word	0x400204a0
 80049f8:	400204b8 	.word	0x400204b8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8087 	beq.w	8004b24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2220      	movs	r2, #32
 8004a20:	409a      	lsls	r2, r3
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d139      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0216 	bic.w	r2, r2, #22
 8004a40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x736>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0208 	bic.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	223f      	movs	r2, #63	; 0x3f
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 834a 	beq.w	8005130 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
          }
          return;
 8004aa4:	e344      	b.n	8005130 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
 8004ad2:	e027      	b.n	8004b24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d023      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
 8004ae4:	e01e      	b.n	8004b24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0210 	bic.w	r2, r2, #16
 8004b02:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8306 	beq.w	800513a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8088 	beq.w	8004c4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a7a      	ldr	r2, [pc, #488]	; (8004d34 <HAL_DMA_IRQHandler+0xa08>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d04a      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a79      	ldr	r2, [pc, #484]	; (8004d38 <HAL_DMA_IRQHandler+0xa0c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d045      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a77      	ldr	r2, [pc, #476]	; (8004d3c <HAL_DMA_IRQHandler+0xa10>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d040      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a76      	ldr	r2, [pc, #472]	; (8004d40 <HAL_DMA_IRQHandler+0xa14>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d03b      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a74      	ldr	r2, [pc, #464]	; (8004d44 <HAL_DMA_IRQHandler+0xa18>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d036      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a73      	ldr	r2, [pc, #460]	; (8004d48 <HAL_DMA_IRQHandler+0xa1c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d031      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a71      	ldr	r2, [pc, #452]	; (8004d4c <HAL_DMA_IRQHandler+0xa20>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02c      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a70      	ldr	r2, [pc, #448]	; (8004d50 <HAL_DMA_IRQHandler+0xa24>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d027      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6e      	ldr	r2, [pc, #440]	; (8004d54 <HAL_DMA_IRQHandler+0xa28>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6d      	ldr	r2, [pc, #436]	; (8004d58 <HAL_DMA_IRQHandler+0xa2c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01d      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6b      	ldr	r2, [pc, #428]	; (8004d5c <HAL_DMA_IRQHandler+0xa30>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6a      	ldr	r2, [pc, #424]	; (8004d60 <HAL_DMA_IRQHandler+0xa34>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_DMA_IRQHandler+0xa38>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a67      	ldr	r2, [pc, #412]	; (8004d68 <HAL_DMA_IRQHandler+0xa3c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a65      	ldr	r2, [pc, #404]	; (8004d6c <HAL_DMA_IRQHandler+0xa40>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x8b8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a64      	ldr	r2, [pc, #400]	; (8004d70 <HAL_DMA_IRQHandler+0xa44>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <HAL_DMA_IRQHandler+0x8ca>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e007      	b.n	8004c06 <HAL_DMA_IRQHandler+0x8da>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d307      	bcc.n	8004c22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f2      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x8da>
 8004c20:	e000      	b.n	8004c24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c22:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c42:	e003      	b.n	8004c4c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8272 	beq.w	800513a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
 8004c5e:	e26c      	b.n	800513a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a43      	ldr	r2, [pc, #268]	; (8004d74 <HAL_DMA_IRQHandler+0xa48>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a42      	ldr	r2, [pc, #264]	; (8004d78 <HAL_DMA_IRQHandler+0xa4c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <HAL_DMA_IRQHandler+0xa50>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <HAL_DMA_IRQHandler+0xa54>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3d      	ldr	r2, [pc, #244]	; (8004d84 <HAL_DMA_IRQHandler+0xa58>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3c      	ldr	r2, [pc, #240]	; (8004d88 <HAL_DMA_IRQHandler+0xa5c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3a      	ldr	r2, [pc, #232]	; (8004d8c <HAL_DMA_IRQHandler+0xa60>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x984>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a39      	ldr	r2, [pc, #228]	; (8004d90 <HAL_DMA_IRQHandler+0xa64>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x988>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x98a>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 823f 	beq.w	800513a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2204      	movs	r2, #4
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80cd 	beq.w	8004e74 <HAL_DMA_IRQHandler+0xb48>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80c7 	beq.w	8004e74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2204      	movs	r2, #4
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d049      	beq.n	8004d94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8210 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d1c:	e20a      	b.n	8005134 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8206 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d30:	e200      	b.n	8005134 <HAL_DMA_IRQHandler+0xe08>
 8004d32:	bf00      	nop
 8004d34:	40020010 	.word	0x40020010
 8004d38:	40020028 	.word	0x40020028
 8004d3c:	40020040 	.word	0x40020040
 8004d40:	40020058 	.word	0x40020058
 8004d44:	40020070 	.word	0x40020070
 8004d48:	40020088 	.word	0x40020088
 8004d4c:	400200a0 	.word	0x400200a0
 8004d50:	400200b8 	.word	0x400200b8
 8004d54:	40020410 	.word	0x40020410
 8004d58:	40020428 	.word	0x40020428
 8004d5c:	40020440 	.word	0x40020440
 8004d60:	40020458 	.word	0x40020458
 8004d64:	40020470 	.word	0x40020470
 8004d68:	40020488 	.word	0x40020488
 8004d6c:	400204a0 	.word	0x400204a0
 8004d70:	400204b8 	.word	0x400204b8
 8004d74:	58025408 	.word	0x58025408
 8004d78:	5802541c 	.word	0x5802541c
 8004d7c:	58025430 	.word	0x58025430
 8004d80:	58025444 	.word	0x58025444
 8004d84:	58025458 	.word	0x58025458
 8004d88:	5802546c 	.word	0x5802546c
 8004d8c:	58025480 	.word	0x58025480
 8004d90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d160      	bne.n	8004e60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a8c      	ldr	r2, [pc, #560]	; (8004fd4 <HAL_DMA_IRQHandler+0xca8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d04a      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a8a      	ldr	r2, [pc, #552]	; (8004fd8 <HAL_DMA_IRQHandler+0xcac>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d045      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a89      	ldr	r2, [pc, #548]	; (8004fdc <HAL_DMA_IRQHandler+0xcb0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d040      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a87      	ldr	r2, [pc, #540]	; (8004fe0 <HAL_DMA_IRQHandler+0xcb4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d03b      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a86      	ldr	r2, [pc, #536]	; (8004fe4 <HAL_DMA_IRQHandler+0xcb8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d036      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a84      	ldr	r2, [pc, #528]	; (8004fe8 <HAL_DMA_IRQHandler+0xcbc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d031      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a83      	ldr	r2, [pc, #524]	; (8004fec <HAL_DMA_IRQHandler+0xcc0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d02c      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a81      	ldr	r2, [pc, #516]	; (8004ff0 <HAL_DMA_IRQHandler+0xcc4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d027      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a80      	ldr	r2, [pc, #512]	; (8004ff4 <HAL_DMA_IRQHandler+0xcc8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a7e      	ldr	r2, [pc, #504]	; (8004ff8 <HAL_DMA_IRQHandler+0xccc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7d      	ldr	r2, [pc, #500]	; (8004ffc <HAL_DMA_IRQHandler+0xcd0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7b      	ldr	r2, [pc, #492]	; (8005000 <HAL_DMA_IRQHandler+0xcd4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7a      	ldr	r2, [pc, #488]	; (8005004 <HAL_DMA_IRQHandler+0xcd8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a78      	ldr	r2, [pc, #480]	; (8005008 <HAL_DMA_IRQHandler+0xcdc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a77      	ldr	r2, [pc, #476]	; (800500c <HAL_DMA_IRQHandler+0xce0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xb12>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a75      	ldr	r2, [pc, #468]	; (8005010 <HAL_DMA_IRQHandler+0xce4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d108      	bne.n	8004e50 <HAL_DMA_IRQHandler+0xb24>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0208 	bic.w	r2, r2, #8
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e007      	b.n	8004e60 <HAL_DMA_IRQHandler+0xb34>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8165 	beq.w	8005134 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e72:	e15f      	b.n	8005134 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80c5 	beq.w	8005014 <HAL_DMA_IRQHandler+0xce8>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80bf 	beq.w	8005014 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d018      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 813a 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ecc:	e134      	b.n	8005138 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8130 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee0:	e12a      	b.n	8005138 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d168      	bne.n	8004fbe <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a38      	ldr	r2, [pc, #224]	; (8004fd4 <HAL_DMA_IRQHandler+0xca8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d04a      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a37      	ldr	r2, [pc, #220]	; (8004fd8 <HAL_DMA_IRQHandler+0xcac>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d045      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a35      	ldr	r2, [pc, #212]	; (8004fdc <HAL_DMA_IRQHandler+0xcb0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d040      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a34      	ldr	r2, [pc, #208]	; (8004fe0 <HAL_DMA_IRQHandler+0xcb4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d03b      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a32      	ldr	r2, [pc, #200]	; (8004fe4 <HAL_DMA_IRQHandler+0xcb8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d036      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a31      	ldr	r2, [pc, #196]	; (8004fe8 <HAL_DMA_IRQHandler+0xcbc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d031      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <HAL_DMA_IRQHandler+0xcc0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02c      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2e      	ldr	r2, [pc, #184]	; (8004ff0 <HAL_DMA_IRQHandler+0xcc4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d027      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <HAL_DMA_IRQHandler+0xcc8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_DMA_IRQHandler+0xccc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01d      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <HAL_DMA_IRQHandler+0xcd0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_DMA_IRQHandler+0xcd4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a26      	ldr	r2, [pc, #152]	; (8005004 <HAL_DMA_IRQHandler+0xcd8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a25      	ldr	r2, [pc, #148]	; (8005008 <HAL_DMA_IRQHandler+0xcdc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	; (800500c <HAL_DMA_IRQHandler+0xce0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xc60>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_DMA_IRQHandler+0xce4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <HAL_DMA_IRQHandler+0xc72>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0214 	bic.w	r2, r2, #20
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e007      	b.n	8004fae <HAL_DMA_IRQHandler+0xc82>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 020a 	bic.w	r2, r2, #10
 8004fac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80b8 	beq.w	8005138 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd0:	e0b2      	b.n	8005138 <HAL_DMA_IRQHandler+0xe0c>
 8004fd2:	bf00      	nop
 8004fd4:	40020010 	.word	0x40020010
 8004fd8:	40020028 	.word	0x40020028
 8004fdc:	40020040 	.word	0x40020040
 8004fe0:	40020058 	.word	0x40020058
 8004fe4:	40020070 	.word	0x40020070
 8004fe8:	40020088 	.word	0x40020088
 8004fec:	400200a0 	.word	0x400200a0
 8004ff0:	400200b8 	.word	0x400200b8
 8004ff4:	40020410 	.word	0x40020410
 8004ff8:	40020428 	.word	0x40020428
 8004ffc:	40020440 	.word	0x40020440
 8005000:	40020458 	.word	0x40020458
 8005004:	40020470 	.word	0x40020470
 8005008:	40020488 	.word	0x40020488
 800500c:	400204a0 	.word	0x400204a0
 8005010:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	2208      	movs	r2, #8
 800501e:	409a      	lsls	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8088 	beq.w	800513a <HAL_DMA_IRQHandler+0xe0e>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8082 	beq.w	800513a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a41      	ldr	r2, [pc, #260]	; (8005140 <HAL_DMA_IRQHandler+0xe14>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d04a      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3f      	ldr	r2, [pc, #252]	; (8005144 <HAL_DMA_IRQHandler+0xe18>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d045      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3e      	ldr	r2, [pc, #248]	; (8005148 <HAL_DMA_IRQHandler+0xe1c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d040      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3c      	ldr	r2, [pc, #240]	; (800514c <HAL_DMA_IRQHandler+0xe20>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d03b      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a3b      	ldr	r2, [pc, #236]	; (8005150 <HAL_DMA_IRQHandler+0xe24>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d036      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a39      	ldr	r2, [pc, #228]	; (8005154 <HAL_DMA_IRQHandler+0xe28>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d031      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a38      	ldr	r2, [pc, #224]	; (8005158 <HAL_DMA_IRQHandler+0xe2c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d02c      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a36      	ldr	r2, [pc, #216]	; (800515c <HAL_DMA_IRQHandler+0xe30>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d027      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a35      	ldr	r2, [pc, #212]	; (8005160 <HAL_DMA_IRQHandler+0xe34>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d022      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a33      	ldr	r2, [pc, #204]	; (8005164 <HAL_DMA_IRQHandler+0xe38>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a32      	ldr	r2, [pc, #200]	; (8005168 <HAL_DMA_IRQHandler+0xe3c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a30      	ldr	r2, [pc, #192]	; (800516c <HAL_DMA_IRQHandler+0xe40>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2f      	ldr	r2, [pc, #188]	; (8005170 <HAL_DMA_IRQHandler+0xe44>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2d      	ldr	r2, [pc, #180]	; (8005174 <HAL_DMA_IRQHandler+0xe48>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <HAL_DMA_IRQHandler+0xe4c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xdaa>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a2a      	ldr	r2, [pc, #168]	; (800517c <HAL_DMA_IRQHandler+0xe50>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <HAL_DMA_IRQHandler+0xdbc>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 021c 	bic.w	r2, r2, #28
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e007      	b.n	80050f8 <HAL_DMA_IRQHandler+0xdcc>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 020e 	bic.w	r2, r2, #14
 80050f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
 800512e:	e004      	b.n	800513a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005138:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800513a:	3728      	adds	r7, #40	; 0x28
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8

08005180 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a84      	ldr	r2, [pc, #528]	; (80053b0 <DMA_SetConfig+0x230>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d072      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a82      	ldr	r2, [pc, #520]	; (80053b4 <DMA_SetConfig+0x234>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d06d      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a81      	ldr	r2, [pc, #516]	; (80053b8 <DMA_SetConfig+0x238>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d068      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a7f      	ldr	r2, [pc, #508]	; (80053bc <DMA_SetConfig+0x23c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d063      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a7e      	ldr	r2, [pc, #504]	; (80053c0 <DMA_SetConfig+0x240>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d05e      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a7c      	ldr	r2, [pc, #496]	; (80053c4 <DMA_SetConfig+0x244>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d059      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a7b      	ldr	r2, [pc, #492]	; (80053c8 <DMA_SetConfig+0x248>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d054      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a79      	ldr	r2, [pc, #484]	; (80053cc <DMA_SetConfig+0x24c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d04f      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a78      	ldr	r2, [pc, #480]	; (80053d0 <DMA_SetConfig+0x250>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d04a      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a76      	ldr	r2, [pc, #472]	; (80053d4 <DMA_SetConfig+0x254>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d045      	beq.n	800528a <DMA_SetConfig+0x10a>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a75      	ldr	r2, [pc, #468]	; (80053d8 <DMA_SetConfig+0x258>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d040      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a73      	ldr	r2, [pc, #460]	; (80053dc <DMA_SetConfig+0x25c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d03b      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a72      	ldr	r2, [pc, #456]	; (80053e0 <DMA_SetConfig+0x260>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d036      	beq.n	800528a <DMA_SetConfig+0x10a>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a70      	ldr	r2, [pc, #448]	; (80053e4 <DMA_SetConfig+0x264>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d031      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6f      	ldr	r2, [pc, #444]	; (80053e8 <DMA_SetConfig+0x268>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d02c      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a6d      	ldr	r2, [pc, #436]	; (80053ec <DMA_SetConfig+0x26c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d027      	beq.n	800528a <DMA_SetConfig+0x10a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a6c      	ldr	r2, [pc, #432]	; (80053f0 <DMA_SetConfig+0x270>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a6a      	ldr	r2, [pc, #424]	; (80053f4 <DMA_SetConfig+0x274>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01d      	beq.n	800528a <DMA_SetConfig+0x10a>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a69      	ldr	r2, [pc, #420]	; (80053f8 <DMA_SetConfig+0x278>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a67      	ldr	r2, [pc, #412]	; (80053fc <DMA_SetConfig+0x27c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a66      	ldr	r2, [pc, #408]	; (8005400 <DMA_SetConfig+0x280>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <DMA_SetConfig+0x10a>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a64      	ldr	r2, [pc, #400]	; (8005404 <DMA_SetConfig+0x284>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a63      	ldr	r2, [pc, #396]	; (8005408 <DMA_SetConfig+0x288>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <DMA_SetConfig+0x10a>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a61      	ldr	r2, [pc, #388]	; (800540c <DMA_SetConfig+0x28c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <DMA_SetConfig+0x10e>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <DMA_SetConfig+0x110>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800529c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a3e      	ldr	r2, [pc, #248]	; (80053b0 <DMA_SetConfig+0x230>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d04a      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a3d      	ldr	r2, [pc, #244]	; (80053b4 <DMA_SetConfig+0x234>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d045      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a3b      	ldr	r2, [pc, #236]	; (80053b8 <DMA_SetConfig+0x238>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d040      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a3a      	ldr	r2, [pc, #232]	; (80053bc <DMA_SetConfig+0x23c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d03b      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a38      	ldr	r2, [pc, #224]	; (80053c0 <DMA_SetConfig+0x240>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d036      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a37      	ldr	r2, [pc, #220]	; (80053c4 <DMA_SetConfig+0x244>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d031      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a35      	ldr	r2, [pc, #212]	; (80053c8 <DMA_SetConfig+0x248>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d02c      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a34      	ldr	r2, [pc, #208]	; (80053cc <DMA_SetConfig+0x24c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d027      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a32      	ldr	r2, [pc, #200]	; (80053d0 <DMA_SetConfig+0x250>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d022      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a31      	ldr	r2, [pc, #196]	; (80053d4 <DMA_SetConfig+0x254>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d01d      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <DMA_SetConfig+0x258>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <DMA_SetConfig+0x25c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <DMA_SetConfig+0x260>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <DMA_SetConfig+0x264>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <DMA_SetConfig+0x268>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <DMA_SetConfig+0x1d0>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a28      	ldr	r2, [pc, #160]	; (80053ec <DMA_SetConfig+0x26c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <DMA_SetConfig+0x1d4>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <DMA_SetConfig+0x1d6>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d05a      	beq.n	8005410 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	223f      	movs	r2, #63	; 0x3f
 8005364:	409a      	lsls	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005378:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d108      	bne.n	800539c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800539a:	e087      	b.n	80054ac <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
}
 80053ac:	e07e      	b.n	80054ac <DMA_SetConfig+0x32c>
 80053ae:	bf00      	nop
 80053b0:	40020010 	.word	0x40020010
 80053b4:	40020028 	.word	0x40020028
 80053b8:	40020040 	.word	0x40020040
 80053bc:	40020058 	.word	0x40020058
 80053c0:	40020070 	.word	0x40020070
 80053c4:	40020088 	.word	0x40020088
 80053c8:	400200a0 	.word	0x400200a0
 80053cc:	400200b8 	.word	0x400200b8
 80053d0:	40020410 	.word	0x40020410
 80053d4:	40020428 	.word	0x40020428
 80053d8:	40020440 	.word	0x40020440
 80053dc:	40020458 	.word	0x40020458
 80053e0:	40020470 	.word	0x40020470
 80053e4:	40020488 	.word	0x40020488
 80053e8:	400204a0 	.word	0x400204a0
 80053ec:	400204b8 	.word	0x400204b8
 80053f0:	58025408 	.word	0x58025408
 80053f4:	5802541c 	.word	0x5802541c
 80053f8:	58025430 	.word	0x58025430
 80053fc:	58025444 	.word	0x58025444
 8005400:	58025458 	.word	0x58025458
 8005404:	5802546c 	.word	0x5802546c
 8005408:	58025480 	.word	0x58025480
 800540c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a28      	ldr	r2, [pc, #160]	; (80054b8 <DMA_SetConfig+0x338>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d022      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a27      	ldr	r2, [pc, #156]	; (80054bc <DMA_SetConfig+0x33c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01d      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a25      	ldr	r2, [pc, #148]	; (80054c0 <DMA_SetConfig+0x340>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a24      	ldr	r2, [pc, #144]	; (80054c4 <DMA_SetConfig+0x344>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <DMA_SetConfig+0x348>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a21      	ldr	r2, [pc, #132]	; (80054cc <DMA_SetConfig+0x34c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <DMA_SetConfig+0x350>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <DMA_SetConfig+0x2e0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <DMA_SetConfig+0x354>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <DMA_SetConfig+0x2e4>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <DMA_SetConfig+0x2e6>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d020      	beq.n	80054ac <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2201      	movs	r2, #1
 8005474:	409a      	lsls	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d108      	bne.n	800549c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	60da      	str	r2, [r3, #12]
}
 800549a:	e007      	b.n	80054ac <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	58025408 	.word	0x58025408
 80054bc:	5802541c 	.word	0x5802541c
 80054c0:	58025430 	.word	0x58025430
 80054c4:	58025444 	.word	0x58025444
 80054c8:	58025458 	.word	0x58025458
 80054cc:	5802546c 	.word	0x5802546c
 80054d0:	58025480 	.word	0x58025480
 80054d4:	58025494 	.word	0x58025494

080054d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a42      	ldr	r2, [pc, #264]	; (80055f0 <DMA_CalcBaseAndBitshift+0x118>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d04a      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a41      	ldr	r2, [pc, #260]	; (80055f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d045      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3f      	ldr	r2, [pc, #252]	; (80055f8 <DMA_CalcBaseAndBitshift+0x120>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d040      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3e      	ldr	r2, [pc, #248]	; (80055fc <DMA_CalcBaseAndBitshift+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d03b      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <DMA_CalcBaseAndBitshift+0x128>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d036      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <DMA_CalcBaseAndBitshift+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d031      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a39      	ldr	r2, [pc, #228]	; (8005608 <DMA_CalcBaseAndBitshift+0x130>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02c      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a38      	ldr	r2, [pc, #224]	; (800560c <DMA_CalcBaseAndBitshift+0x134>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d027      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a36      	ldr	r2, [pc, #216]	; (8005610 <DMA_CalcBaseAndBitshift+0x138>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a35      	ldr	r2, [pc, #212]	; (8005614 <DMA_CalcBaseAndBitshift+0x13c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d01d      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a33      	ldr	r2, [pc, #204]	; (8005618 <DMA_CalcBaseAndBitshift+0x140>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a32      	ldr	r2, [pc, #200]	; (800561c <DMA_CalcBaseAndBitshift+0x144>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a30      	ldr	r2, [pc, #192]	; (8005620 <DMA_CalcBaseAndBitshift+0x148>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <DMA_CalcBaseAndBitshift+0x14c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <DMA_CalcBaseAndBitshift+0x150>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <DMA_CalcBaseAndBitshift+0xa8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2c      	ldr	r2, [pc, #176]	; (800562c <DMA_CalcBaseAndBitshift+0x154>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <DMA_CalcBaseAndBitshift+0xac>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <DMA_CalcBaseAndBitshift+0xae>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d024      	beq.n	80055d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	3b10      	subs	r3, #16
 8005592:	4a27      	ldr	r2, [pc, #156]	; (8005630 <DMA_CalcBaseAndBitshift+0x158>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	4a24      	ldr	r2, [pc, #144]	; (8005634 <DMA_CalcBaseAndBitshift+0x15c>)
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d908      	bls.n	80055c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <DMA_CalcBaseAndBitshift+0x160>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	1d1a      	adds	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	659a      	str	r2, [r3, #88]	; 0x58
 80055c2:	e00d      	b.n	80055e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <DMA_CalcBaseAndBitshift+0x160>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6593      	str	r3, [r2, #88]	; 0x58
 80055d2:	e005      	b.n	80055e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40020010 	.word	0x40020010
 80055f4:	40020028 	.word	0x40020028
 80055f8:	40020040 	.word	0x40020040
 80055fc:	40020058 	.word	0x40020058
 8005600:	40020070 	.word	0x40020070
 8005604:	40020088 	.word	0x40020088
 8005608:	400200a0 	.word	0x400200a0
 800560c:	400200b8 	.word	0x400200b8
 8005610:	40020410 	.word	0x40020410
 8005614:	40020428 	.word	0x40020428
 8005618:	40020440 	.word	0x40020440
 800561c:	40020458 	.word	0x40020458
 8005620:	40020470 	.word	0x40020470
 8005624:	40020488 	.word	0x40020488
 8005628:	400204a0 	.word	0x400204a0
 800562c:	400204b8 	.word	0x400204b8
 8005630:	aaaaaaab 	.word	0xaaaaaaab
 8005634:	0800c87c 	.word	0x0800c87c
 8005638:	fffffc00 	.word	0xfffffc00

0800563c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d120      	bne.n	8005692 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	2b03      	cmp	r3, #3
 8005656:	d858      	bhi.n	800570a <DMA_CheckFifoParam+0xce>
 8005658:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <DMA_CheckFifoParam+0x24>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005671 	.word	0x08005671
 8005664:	08005683 	.word	0x08005683
 8005668:	08005671 	.word	0x08005671
 800566c:	0800570b 	.word	0x0800570b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d048      	beq.n	800570e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005680:	e045      	b.n	800570e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800568a:	d142      	bne.n	8005712 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005690:	e03f      	b.n	8005712 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569a:	d123      	bne.n	80056e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d838      	bhi.n	8005716 <DMA_CheckFifoParam+0xda>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <DMA_CheckFifoParam+0x70>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056c3 	.word	0x080056c3
 80056b4:	080056bd 	.word	0x080056bd
 80056b8:	080056d5 	.word	0x080056d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
        break;
 80056c0:	e030      	b.n	8005724 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d025      	beq.n	800571a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d2:	e022      	b.n	800571a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056dc:	d11f      	bne.n	800571e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056e2:	e01c      	b.n	800571e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d902      	bls.n	80056f2 <DMA_CheckFifoParam+0xb6>
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d003      	beq.n	80056f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056f0:	e018      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
        break;
 80056f6:	e015      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00e      	beq.n	8005722 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
    break;
 8005708:	e00b      	b.n	8005722 <DMA_CheckFifoParam+0xe6>
        break;
 800570a:	bf00      	nop
 800570c:	e00a      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        break;
 800570e:	bf00      	nop
 8005710:	e008      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        break;
 8005712:	bf00      	nop
 8005714:	e006      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        break;
 8005716:	bf00      	nop
 8005718:	e004      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        break;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
        break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <DMA_CheckFifoParam+0xe8>
    break;
 8005722:	bf00      	nop
    }
  }

  return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop

08005734 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a38      	ldr	r2, [pc, #224]	; (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d022      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a36      	ldr	r2, [pc, #216]	; (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a35      	ldr	r2, [pc, #212]	; (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a33      	ldr	r2, [pc, #204]	; (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a32      	ldr	r2, [pc, #200]	; (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a30      	ldr	r2, [pc, #192]	; (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2f      	ldr	r2, [pc, #188]	; (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01a      	beq.n	80057d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	3b08      	subs	r3, #8
 80057a4:	4a28      	ldr	r2, [pc, #160]	; (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4b26      	ldr	r3, [pc, #152]	; (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a24      	ldr	r2, [pc, #144]	; (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2201      	movs	r2, #1
 80057ca:	409a      	lsls	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057d0:	e024      	b.n	800581c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	3b10      	subs	r3, #16
 80057da:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d806      	bhi.n	80057fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d902      	bls.n	80057fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3308      	adds	r3, #8
 80057f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4b18      	ldr	r3, [pc, #96]	; (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800580c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	58025408 	.word	0x58025408
 800582c:	5802541c 	.word	0x5802541c
 8005830:	58025430 	.word	0x58025430
 8005834:	58025444 	.word	0x58025444
 8005838:	58025458 	.word	0x58025458
 800583c:	5802546c 	.word	0x5802546c
 8005840:	58025480 	.word	0x58025480
 8005844:	58025494 	.word	0x58025494
 8005848:	cccccccd 	.word	0xcccccccd
 800584c:	16009600 	.word	0x16009600
 8005850:	58025880 	.word	0x58025880
 8005854:	aaaaaaab 	.word	0xaaaaaaab
 8005858:	400204b8 	.word	0x400204b8
 800585c:	4002040f 	.word	0x4002040f
 8005860:	10008200 	.word	0x10008200
 8005864:	40020880 	.word	0x40020880

08005868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d04a      	beq.n	8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d847      	bhi.n	8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a25      	ldr	r2, [pc, #148]	; (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d022      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a24      	ldr	r2, [pc, #144]	; (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d01d      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d018      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	; (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00e      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1b      	ldr	r2, [pc, #108]	; (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058f0:	671a      	str	r2, [r3, #112]	; 0x70
 80058f2:	e009      	b.n	8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	461a      	mov	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a11      	ldr	r2, [pc, #68]	; (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005906:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	2201      	movs	r2, #1
 800590e:	409a      	lsls	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	58025408 	.word	0x58025408
 8005924:	5802541c 	.word	0x5802541c
 8005928:	58025430 	.word	0x58025430
 800592c:	58025444 	.word	0x58025444
 8005930:	58025458 	.word	0x58025458
 8005934:	5802546c 	.word	0x5802546c
 8005938:	58025480 	.word	0x58025480
 800593c:	58025494 	.word	0x58025494
 8005940:	1600963f 	.word	0x1600963f
 8005944:	58025940 	.word	0x58025940
 8005948:	1000823f 	.word	0x1000823f
 800594c:	40020940 	.word	0x40020940

08005950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	; 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800595e:	4b89      	ldr	r3, [pc, #548]	; (8005b84 <HAL_GPIO_Init+0x234>)
 8005960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005962:	e194      	b.n	8005c8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	2101      	movs	r1, #1
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	4013      	ands	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8186 	beq.w	8005c88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d00b      	beq.n	800599c <HAL_GPIO_Init+0x4c>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d007      	beq.n	800599c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005990:	2b11      	cmp	r3, #17
 8005992:	d003      	beq.n	800599c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b12      	cmp	r3, #18
 800599a:	d130      	bne.n	80059fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2203      	movs	r2, #3
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059d2:	2201      	movs	r2, #1
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	f003 0201 	and.w	r2, r3, #1
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	2203      	movs	r2, #3
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_Init+0xee>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b12      	cmp	r3, #18
 8005a3c:	d123      	bne.n	8005a86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	08da      	lsrs	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3208      	adds	r2, #8
 8005a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	220f      	movs	r2, #15
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	08da      	lsrs	r2, r3, #3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3208      	adds	r2, #8
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	2203      	movs	r2, #3
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0203 	and.w	r2, r3, #3
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80e0 	beq.w	8005c88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac8:	4b2f      	ldr	r3, [pc, #188]	; (8005b88 <HAL_GPIO_Init+0x238>)
 8005aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ace:	4a2e      	ldr	r2, [pc, #184]	; (8005b88 <HAL_GPIO_Init+0x238>)
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ad8:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <HAL_GPIO_Init+0x238>)
 8005ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae6:	4a29      	ldr	r2, [pc, #164]	; (8005b8c <HAL_GPIO_Init+0x23c>)
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	3302      	adds	r3, #2
 8005aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	220f      	movs	r2, #15
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43db      	mvns	r3, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4013      	ands	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <HAL_GPIO_Init+0x240>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d052      	beq.n	8005bb8 <HAL_GPIO_Init+0x268>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <HAL_GPIO_Init+0x244>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d031      	beq.n	8005b7e <HAL_GPIO_Init+0x22e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <HAL_GPIO_Init+0x248>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02b      	beq.n	8005b7a <HAL_GPIO_Init+0x22a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <HAL_GPIO_Init+0x24c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d025      	beq.n	8005b76 <HAL_GPIO_Init+0x226>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <HAL_GPIO_Init+0x250>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01f      	beq.n	8005b72 <HAL_GPIO_Init+0x222>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <HAL_GPIO_Init+0x254>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d019      	beq.n	8005b6e <HAL_GPIO_Init+0x21e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_GPIO_Init+0x258>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_GPIO_Init+0x21a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a19      	ldr	r2, [pc, #100]	; (8005bac <HAL_GPIO_Init+0x25c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00d      	beq.n	8005b66 <HAL_GPIO_Init+0x216>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_GPIO_Init+0x260>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <HAL_GPIO_Init+0x212>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <HAL_GPIO_Init+0x264>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d101      	bne.n	8005b5e <HAL_GPIO_Init+0x20e>
 8005b5a:	2309      	movs	r3, #9
 8005b5c:	e02d      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b5e:	230a      	movs	r3, #10
 8005b60:	e02b      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b62:	2308      	movs	r3, #8
 8005b64:	e029      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b66:	2307      	movs	r3, #7
 8005b68:	e027      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b6a:	2306      	movs	r3, #6
 8005b6c:	e025      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b6e:	2305      	movs	r3, #5
 8005b70:	e023      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b72:	2304      	movs	r3, #4
 8005b74:	e021      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b76:	2303      	movs	r3, #3
 8005b78:	e01f      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e01d      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e01b      	b.n	8005bba <HAL_GPIO_Init+0x26a>
 8005b82:	bf00      	nop
 8005b84:	58000080 	.word	0x58000080
 8005b88:	58024400 	.word	0x58024400
 8005b8c:	58000400 	.word	0x58000400
 8005b90:	58020000 	.word	0x58020000
 8005b94:	58020400 	.word	0x58020400
 8005b98:	58020800 	.word	0x58020800
 8005b9c:	58020c00 	.word	0x58020c00
 8005ba0:	58021000 	.word	0x58021000
 8005ba4:	58021400 	.word	0x58021400
 8005ba8:	58021800 	.word	0x58021800
 8005bac:	58021c00 	.word	0x58021c00
 8005bb0:	58022000 	.word	0x58022000
 8005bb4:	58022400 	.word	0x58022400
 8005bb8:	2300      	movs	r3, #0
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	f002 0203 	and.w	r2, r2, #3
 8005bc0:	0092      	lsls	r2, r2, #2
 8005bc2:	4093      	lsls	r3, r2
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bca:	4938      	ldr	r1, [pc, #224]	; (8005cac <HAL_GPIO_Init+0x35c>)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f47f ae63 	bne.w	8005964 <HAL_GPIO_Init+0x14>
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	3724      	adds	r7, #36	; 0x24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	58000400 	.word	0x58000400

08005cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cc0:	787b      	ldrb	r3, [r7, #1]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ccc:	e003      	b.n	8005cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cce:	887b      	ldrh	r3, [r7, #2]
 8005cd0:	041a      	lsls	r2, r3, #16
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	619a      	str	r2, [r3, #24]
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	887b      	ldrh	r3, [r7, #2]
 8005cf4:	401a      	ands	r2, r3
 8005cf6:	887b      	ldrh	r3, [r7, #2]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d104      	bne.n	8005d06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	041a      	lsls	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005d04:	e002      	b.n	8005d0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	619a      	str	r2, [r3, #24]
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d20:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d00a      	beq.n	8005d42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d001      	beq.n	8005d3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e01f      	b.n	8005d7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e01d      	b.n	8005d7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f023 0207 	bic.w	r2, r3, #7
 8005d4a:	490f      	ldr	r1, [pc, #60]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d52:	f7fb ffff 	bl	8001d54 <HAL_GetTick>
 8005d56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d58:	e009      	b.n	8005d6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d5a:	f7fb fffb 	bl	8001d54 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d68:	d901      	bls.n	8005d6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e007      	b.n	8005d7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	d1ee      	bne.n	8005d5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	58024800 	.word	0x58024800

08005d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08c      	sub	sp, #48	; 0x30
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e3c4      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8087 	beq.w	8005eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dac:	4ba2      	ldr	r3, [pc, #648]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005db6:	4ba0      	ldr	r3, [pc, #640]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d007      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x46>
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	2b18      	cmp	r3, #24
 8005dc6:	d110      	bne.n	8005dea <HAL_RCC_OscConfig+0x5e>
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d10b      	bne.n	8005dea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd2:	4b99      	ldr	r3, [pc, #612]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d06c      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x12c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d168      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e39e      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d106      	bne.n	8005e02 <HAL_RCC_OscConfig+0x76>
 8005df4:	4b90      	ldr	r3, [pc, #576]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a8f      	ldr	r2, [pc, #572]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e02e      	b.n	8005e60 <HAL_RCC_OscConfig+0xd4>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10c      	bne.n	8005e24 <HAL_RCC_OscConfig+0x98>
 8005e0a:	4b8b      	ldr	r3, [pc, #556]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a8a      	ldr	r2, [pc, #552]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	4b88      	ldr	r3, [pc, #544]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a87      	ldr	r2, [pc, #540]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e01d      	b.n	8005e60 <HAL_RCC_OscConfig+0xd4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCC_OscConfig+0xbc>
 8005e2e:	4b82      	ldr	r3, [pc, #520]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a81      	ldr	r2, [pc, #516]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	4b7f      	ldr	r3, [pc, #508]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a7e      	ldr	r2, [pc, #504]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	e00b      	b.n	8005e60 <HAL_RCC_OscConfig+0xd4>
 8005e48:	4b7b      	ldr	r3, [pc, #492]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a7a      	ldr	r2, [pc, #488]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	4b78      	ldr	r3, [pc, #480]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a77      	ldr	r2, [pc, #476]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d013      	beq.n	8005e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fb ff74 	bl	8001d54 <HAL_GetTick>
 8005e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e70:	f7fb ff70 	bl	8001d54 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	; 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e352      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e82:	4b6d      	ldr	r3, [pc, #436]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCC_OscConfig+0xe4>
 8005e8e:	e014      	b.n	8005eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fb ff60 	bl	8001d54 <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fb ff5c 	bl	8001d54 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e33e      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eaa:	4b63      	ldr	r3, [pc, #396]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x10c>
 8005eb6:	e000      	b.n	8005eba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8092 	beq.w	8005fec <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ed0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ed2:	4b59      	ldr	r3, [pc, #356]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_RCC_OscConfig+0x162>
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b18      	cmp	r3, #24
 8005ee2:	d12d      	bne.n	8005f40 <HAL_RCC_OscConfig+0x1b4>
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d128      	bne.n	8005f40 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eee:	4b52      	ldr	r3, [pc, #328]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCC_OscConfig+0x17a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e310      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	f7fb ff53 	bl	8001db0 <HAL_GetREVID>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d80a      	bhi.n	8005f2a <HAL_RCC_OscConfig+0x19e>
 8005f14:	4b48      	ldr	r3, [pc, #288]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	4945      	ldr	r1, [pc, #276]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f28:	e060      	b.n	8005fec <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	4b43      	ldr	r3, [pc, #268]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	061b      	lsls	r3, r3, #24
 8005f38:	493f      	ldr	r1, [pc, #252]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f3e:	e055      	b.n	8005fec <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d038      	beq.n	8005fba <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f48:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 0219 	bic.w	r2, r3, #25
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4938      	ldr	r1, [pc, #224]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5a:	f7fb fefb 	bl	8001d54 <HAL_GetTick>
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f60:	e008      	b.n	8005f74 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f62:	f7fb fef7 	bl	8001d54 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e2d9      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f74:	4b30      	ldr	r3, [pc, #192]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0f0      	beq.n	8005f62 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f80:	f7fb ff16 	bl	8001db0 <HAL_GetREVID>
 8005f84:	4602      	mov	r2, r0
 8005f86:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d80a      	bhi.n	8005fa4 <HAL_RCC_OscConfig+0x218>
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	031b      	lsls	r3, r3, #12
 8005f9c:	4926      	ldr	r1, [pc, #152]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	604b      	str	r3, [r1, #4]
 8005fa2:	e023      	b.n	8005fec <HAL_RCC_OscConfig+0x260>
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	4921      	ldr	r1, [pc, #132]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	e018      	b.n	8005fec <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fba:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc6:	f7fb fec5 	bl	8001d54 <HAL_GetTick>
 8005fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fce:	f7fb fec1 	bl	8001d54 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e2a3      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe0:	4b15      	ldr	r3, [pc, #84]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8091 	beq.w	800611c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006002:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d007      	beq.n	8006020 <HAL_RCC_OscConfig+0x294>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b18      	cmp	r3, #24
 8006014:	d12f      	bne.n	8006076 <HAL_RCC_OscConfig+0x2ea>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d12a      	bne.n	8006076 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_OscConfig+0x2ac>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_RCC_OscConfig+0x2b0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d003      	beq.n	800603c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e277      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
 8006038:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800603c:	f7fb feb8 	bl	8001db0 <HAL_GetREVID>
 8006040:	4602      	mov	r2, r0
 8006042:	f241 0303 	movw	r3, #4099	; 0x1003
 8006046:	429a      	cmp	r2, r3
 8006048:	d80a      	bhi.n	8006060 <HAL_RCC_OscConfig+0x2d4>
 800604a:	4ba2      	ldr	r3, [pc, #648]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	069b      	lsls	r3, r3, #26
 8006058:	499e      	ldr	r1, [pc, #632]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800605e:	e05d      	b.n	800611c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006060:	4b9c      	ldr	r3, [pc, #624]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	061b      	lsls	r3, r3, #24
 800606e:	4999      	ldr	r1, [pc, #612]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006070:	4313      	orrs	r3, r2
 8006072:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006074:	e052      	b.n	800611c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d035      	beq.n	80060ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800607e:	4b95      	ldr	r3, [pc, #596]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a94      	ldr	r2, [pc, #592]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fb fe63 	bl	8001d54 <HAL_GetTick>
 800608e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006092:	f7fb fe5f 	bl	8001d54 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e241      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a4:	4b8b      	ldr	r3, [pc, #556]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b0:	f7fb fe7e 	bl	8001db0 <HAL_GetREVID>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d80a      	bhi.n	80060d4 <HAL_RCC_OscConfig+0x348>
 80060be:	4b85      	ldr	r3, [pc, #532]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	069b      	lsls	r3, r3, #26
 80060cc:	4981      	ldr	r1, [pc, #516]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]
 80060d2:	e023      	b.n	800611c <HAL_RCC_OscConfig+0x390>
 80060d4:	4b7f      	ldr	r3, [pc, #508]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	061b      	lsls	r3, r3, #24
 80060e2:	497c      	ldr	r1, [pc, #496]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60cb      	str	r3, [r1, #12]
 80060e8:	e018      	b.n	800611c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060ea:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a79      	ldr	r2, [pc, #484]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80060f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fb fe2d 	bl	8001d54 <HAL_GetTick>
 80060fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060fe:	f7fb fe29 	bl	8001d54 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e20b      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006110:	4b70      	ldr	r3, [pc, #448]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f0      	bne.n	80060fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d036      	beq.n	8006196 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d019      	beq.n	8006164 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006130:	4b68      	ldr	r3, [pc, #416]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006134:	4a67      	ldr	r2, [pc, #412]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613c:	f7fb fe0a 	bl	8001d54 <HAL_GetTick>
 8006140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006144:	f7fb fe06 	bl	8001d54 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e1e8      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006156:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f0      	beq.n	8006144 <HAL_RCC_OscConfig+0x3b8>
 8006162:	e018      	b.n	8006196 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006164:	4b5b      	ldr	r3, [pc, #364]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006168:	4a5a      	ldr	r2, [pc, #360]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006170:	f7fb fdf0 	bl	8001d54 <HAL_GetTick>
 8006174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006178:	f7fb fdec 	bl	8001d54 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e1ce      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800618a:	4b52      	ldr	r3, [pc, #328]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800618c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d036      	beq.n	8006210 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d019      	beq.n	80061de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061aa:	4b4a      	ldr	r3, [pc, #296]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a49      	ldr	r2, [pc, #292]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80061b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061b6:	f7fb fdcd 	bl	8001d54 <HAL_GetTick>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061be:	f7fb fdc9 	bl	8001d54 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e1ab      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061d0:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x432>
 80061dc:	e018      	b.n	8006210 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061de:	4b3d      	ldr	r3, [pc, #244]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a3c      	ldr	r2, [pc, #240]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80061e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061ea:	f7fb fdb3 	bl	8001d54 <HAL_GetTick>
 80061ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061f2:	f7fb fdaf 	bl	8001d54 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e191      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006204:	4b33      	ldr	r3, [pc, #204]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f0      	bne.n	80061f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8086 	beq.w	800632a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <HAL_RCC_OscConfig+0x54c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2d      	ldr	r2, [pc, #180]	; (80062d8 <HAL_RCC_OscConfig+0x54c>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800622a:	f7fb fd93 	bl	8001d54 <HAL_GetTick>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006232:	f7fb fd8f 	bl	8001d54 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b64      	cmp	r3, #100	; 0x64
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e171      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006244:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <HAL_RCC_OscConfig+0x54c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d106      	bne.n	8006266 <HAL_RCC_OscConfig+0x4da>
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
 8006264:	e02d      	b.n	80062c2 <HAL_RCC_OscConfig+0x536>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10c      	bne.n	8006288 <HAL_RCC_OscConfig+0x4fc>
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
 8006286:	e01c      	b.n	80062c2 <HAL_RCC_OscConfig+0x536>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b05      	cmp	r3, #5
 800628e:	d10c      	bne.n	80062aa <HAL_RCC_OscConfig+0x51e>
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 8006296:	f043 0304 	orr.w	r3, r3, #4
 800629a:	6713      	str	r3, [r2, #112]	; 0x70
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	e00b      	b.n	80062c2 <HAL_RCC_OscConfig+0x536>
 80062aa:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6713      	str	r3, [r2, #112]	; 0x70
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	4a06      	ldr	r2, [pc, #24]	; (80062d4 <HAL_RCC_OscConfig+0x548>)
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01a      	beq.n	8006300 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ca:	f7fb fd43 	bl	8001d54 <HAL_GetTick>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d0:	e00f      	b.n	80062f2 <HAL_RCC_OscConfig+0x566>
 80062d2:	bf00      	nop
 80062d4:	58024400 	.word	0x58024400
 80062d8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062dc:	f7fb fd3a 	bl	8001d54 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e11a      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f2:	4b8f      	ldr	r3, [pc, #572]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0ee      	beq.n	80062dc <HAL_RCC_OscConfig+0x550>
 80062fe:	e014      	b.n	800632a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006300:	f7fb fd28 	bl	8001d54 <HAL_GetTick>
 8006304:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fb fd24 	bl	8001d54 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e104      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800631e:	4b84      	ldr	r3, [pc, #528]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ee      	bne.n	8006308 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80f9 	beq.w	8006526 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006334:	4b7e      	ldr	r3, [pc, #504]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800633c:	2b18      	cmp	r3, #24
 800633e:	f000 80b4 	beq.w	80064aa <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	2b02      	cmp	r3, #2
 8006348:	f040 8095 	bne.w	8006476 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634c:	4b78      	ldr	r3, [pc, #480]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a77      	ldr	r2, [pc, #476]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fb fcfc 	bl	8001d54 <HAL_GetTick>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006360:	f7fb fcf8 	bl	8001d54 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e0da      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006372:	4b6f      	ldr	r3, [pc, #444]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800637e:	4b6c      	ldr	r3, [pc, #432]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006382:	4b6c      	ldr	r3, [pc, #432]	; (8006534 <HAL_RCC_OscConfig+0x7a8>)
 8006384:	4013      	ands	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	430a      	orrs	r2, r1
 8006392:	4967      	ldr	r1, [pc, #412]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006394:	4313      	orrs	r3, r2
 8006396:	628b      	str	r3, [r1, #40]	; 0x28
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	3b01      	subs	r3, #1
 800639e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	3b01      	subs	r3, #1
 80063a8:	025b      	lsls	r3, r3, #9
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	3b01      	subs	r3, #1
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	3b01      	subs	r3, #1
 80063c2:	061b      	lsls	r3, r3, #24
 80063c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063c8:	4959      	ldr	r1, [pc, #356]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80063ce:	4b58      	ldr	r3, [pc, #352]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a57      	ldr	r2, [pc, #348]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063da:	4b55      	ldr	r3, [pc, #340]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063de:	4b56      	ldr	r3, [pc, #344]	; (8006538 <HAL_RCC_OscConfig+0x7ac>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063e6:	00d2      	lsls	r2, r2, #3
 80063e8:	4951      	ldr	r1, [pc, #324]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063ee:	4b50      	ldr	r3, [pc, #320]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	f023 020c 	bic.w	r2, r3, #12
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	494d      	ldr	r1, [pc, #308]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	f023 0202 	bic.w	r2, r3, #2
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640c:	4948      	ldr	r1, [pc, #288]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006412:	4b47      	ldr	r3, [pc, #284]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a46      	ldr	r2, [pc, #280]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641e:	4b44      	ldr	r3, [pc, #272]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a43      	ldr	r2, [pc, #268]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800642a:	4b41      	ldr	r3, [pc, #260]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	4a40      	ldr	r2, [pc, #256]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006436:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a3d      	ldr	r2, [pc, #244]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006442:	4b3b      	ldr	r3, [pc, #236]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3a      	ldr	r2, [pc, #232]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800644c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644e:	f7fb fc81 	bl	8001d54 <HAL_GetTick>
 8006452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006456:	f7fb fc7d 	bl	8001d54 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e05f      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006468:	4b31      	ldr	r3, [pc, #196]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x6ca>
 8006474:	e057      	b.n	8006526 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006476:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2d      	ldr	r2, [pc, #180]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800647c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006482:	f7fb fc67 	bl	8001d54 <HAL_GetTick>
 8006486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800648a:	f7fb fc63 	bl	8001d54 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e045      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800649c:	4b24      	ldr	r3, [pc, #144]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f0      	bne.n	800648a <HAL_RCC_OscConfig+0x6fe>
 80064a8:	e03d      	b.n	8006526 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064aa:	4b21      	ldr	r3, [pc, #132]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <HAL_RCC_OscConfig+0x7a4>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d031      	beq.n	8006522 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f003 0203 	and.w	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d12a      	bne.n	8006522 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d8:	429a      	cmp	r2, r3
 80064da:	d122      	bne.n	8006522 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d11a      	bne.n	8006522 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	0a5b      	lsrs	r3, r3, #9
 80064f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d111      	bne.n	8006522 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800650c:	429a      	cmp	r2, r3
 800650e:	d108      	bne.n	8006522 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	0e1b      	lsrs	r3, r3, #24
 8006514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800651e:	429a      	cmp	r2, r3
 8006520:	d001      	beq.n	8006526 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3730      	adds	r7, #48	; 0x30
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	58024400 	.word	0x58024400
 8006534:	fffffc0c 	.word	0xfffffc0c
 8006538:	ffff0007 	.word	0xffff0007

0800653c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e19c      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	4b8a      	ldr	r3, [pc, #552]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d910      	bls.n	8006580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b87      	ldr	r3, [pc, #540]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 020f 	bic.w	r2, r3, #15
 8006566:	4985      	ldr	r1, [pc, #532]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b83      	ldr	r3, [pc, #524]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e184      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006598:	429a      	cmp	r2, r3
 800659a:	d908      	bls.n	80065ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800659c:	4b78      	ldr	r3, [pc, #480]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	4975      	ldr	r1, [pc, #468]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	4b70      	ldr	r3, [pc, #448]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d908      	bls.n	80065dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ca:	4b6d      	ldr	r3, [pc, #436]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	496a      	ldr	r1, [pc, #424]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	4b64      	ldr	r3, [pc, #400]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d908      	bls.n	800660a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065f8:	4b61      	ldr	r3, [pc, #388]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	495e      	ldr	r1, [pc, #376]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006606:	4313      	orrs	r3, r2
 8006608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d010      	beq.n	8006638 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	4b59      	ldr	r3, [pc, #356]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006622:	429a      	cmp	r2, r3
 8006624:	d908      	bls.n	8006638 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006626:	4b56      	ldr	r3, [pc, #344]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	4953      	ldr	r1, [pc, #332]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006634:	4313      	orrs	r3, r2
 8006636:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	4b4d      	ldr	r3, [pc, #308]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	429a      	cmp	r2, r3
 8006652:	d908      	bls.n	8006666 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006654:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f023 020f 	bic.w	r2, r3, #15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4947      	ldr	r1, [pc, #284]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006662:	4313      	orrs	r3, r2
 8006664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d055      	beq.n	800671e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006672:	4b43      	ldr	r3, [pc, #268]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4940      	ldr	r1, [pc, #256]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006680:	4313      	orrs	r3, r2
 8006682:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d107      	bne.n	800669c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800668c:	4b3c      	ldr	r3, [pc, #240]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d121      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0f6      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066a4:	4b36      	ldr	r3, [pc, #216]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d115      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0ea      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066bc:	4b30      	ldr	r3, [pc, #192]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0de      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066cc:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0d6      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066dc:	4b28      	ldr	r3, [pc, #160]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f023 0207 	bic.w	r2, r3, #7
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4925      	ldr	r1, [pc, #148]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ee:	f7fb fb31 	bl	8001d54 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f4:	e00a      	b.n	800670c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f6:	f7fb fb2d 	bl	8001d54 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f241 3288 	movw	r2, #5000	; 0x1388
 8006704:	4293      	cmp	r3, r2
 8006706:	d901      	bls.n	800670c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e0be      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670c:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	429a      	cmp	r2, r3
 800671c:	d1eb      	bne.n	80066f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d010      	beq.n	800674c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	429a      	cmp	r2, r3
 8006738:	d208      	bcs.n	800674c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f023 020f 	bic.w	r2, r3, #15
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	490e      	ldr	r1, [pc, #56]	; (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006748:	4313      	orrs	r3, r2
 800674a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d214      	bcs.n	8006784 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675a:	4b08      	ldr	r3, [pc, #32]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 020f 	bic.w	r2, r3, #15
 8006762:	4906      	ldr	r1, [pc, #24]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676a:	4b04      	ldr	r3, [pc, #16]	; (800677c <HAL_RCC_ClockConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e086      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
 800677c:	52002000 	.word	0x52002000
 8006780:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d010      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	4b3f      	ldr	r3, [pc, #252]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800679c:	429a      	cmp	r2, r3
 800679e:	d208      	bcs.n	80067b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a0:	4b3c      	ldr	r3, [pc, #240]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	4939      	ldr	r1, [pc, #228]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d010      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	4b34      	ldr	r3, [pc, #208]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d208      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	492e      	ldr	r1, [pc, #184]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	4b28      	ldr	r3, [pc, #160]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d208      	bcs.n	800680e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067fc:	4b25      	ldr	r3, [pc, #148]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	4922      	ldr	r1, [pc, #136]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 800680a:	4313      	orrs	r3, r2
 800680c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d010      	beq.n	800683c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006826:	429a      	cmp	r2, r3
 8006828:	d208      	bcs.n	800683c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800682a:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	4917      	ldr	r1, [pc, #92]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006838:	4313      	orrs	r3, r2
 800683a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800683c:	f000 f834 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006840:	4601      	mov	r1, r0
 8006842:	4b14      	ldr	r3, [pc, #80]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	4a12      	ldr	r2, [pc, #72]	; (8006898 <HAL_RCC_ClockConfig+0x35c>)
 800684e:	5cd3      	ldrb	r3, [r2, r3]
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	fa21 f303 	lsr.w	r3, r1, r3
 8006858:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800685a:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <HAL_RCC_ClockConfig+0x358>)
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <HAL_RCC_ClockConfig+0x35c>)
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	4a0a      	ldr	r2, [pc, #40]	; (800689c <HAL_RCC_ClockConfig+0x360>)
 8006872:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <HAL_RCC_ClockConfig+0x364>)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <HAL_RCC_ClockConfig+0x368>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fb fa1e 	bl	8001cc0 <HAL_InitTick>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	58024400 	.word	0x58024400
 8006898:	0800c86c 	.word	0x0800c86c
 800689c:	24000020 	.word	0x24000020
 80068a0:	2400001c 	.word	0x2400001c
 80068a4:	24000024 	.word	0x24000024

080068a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ae:	4baf      	ldr	r3, [pc, #700]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068b6:	2b18      	cmp	r3, #24
 80068b8:	f200 814e 	bhi.w	8006b58 <HAL_RCC_GetSysClockFreq+0x2b0>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	08006929 	.word	0x08006929
 80068c8:	08006b59 	.word	0x08006b59
 80068cc:	08006b59 	.word	0x08006b59
 80068d0:	08006b59 	.word	0x08006b59
 80068d4:	08006b59 	.word	0x08006b59
 80068d8:	08006b59 	.word	0x08006b59
 80068dc:	08006b59 	.word	0x08006b59
 80068e0:	08006b59 	.word	0x08006b59
 80068e4:	0800694f 	.word	0x0800694f
 80068e8:	08006b59 	.word	0x08006b59
 80068ec:	08006b59 	.word	0x08006b59
 80068f0:	08006b59 	.word	0x08006b59
 80068f4:	08006b59 	.word	0x08006b59
 80068f8:	08006b59 	.word	0x08006b59
 80068fc:	08006b59 	.word	0x08006b59
 8006900:	08006b59 	.word	0x08006b59
 8006904:	08006955 	.word	0x08006955
 8006908:	08006b59 	.word	0x08006b59
 800690c:	08006b59 	.word	0x08006b59
 8006910:	08006b59 	.word	0x08006b59
 8006914:	08006b59 	.word	0x08006b59
 8006918:	08006b59 	.word	0x08006b59
 800691c:	08006b59 	.word	0x08006b59
 8006920:	08006b59 	.word	0x08006b59
 8006924:	0800695b 	.word	0x0800695b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006928:	4b90      	ldr	r3, [pc, #576]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006934:	4b8d      	ldr	r3, [pc, #564]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	08db      	lsrs	r3, r3, #3
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	4a8c      	ldr	r2, [pc, #560]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006946:	e10a      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006948:	4b89      	ldr	r3, [pc, #548]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800694a:	61bb      	str	r3, [r7, #24]
    break;
 800694c:	e107      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800694e:	4b89      	ldr	r3, [pc, #548]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006950:	61bb      	str	r3, [r7, #24]
    break;
 8006952:	e104      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006954:	4b88      	ldr	r3, [pc, #544]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006956:	61bb      	str	r3, [r7, #24]
    break;
 8006958:	e101      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800695a:	4b84      	ldr	r3, [pc, #528]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006964:	4b81      	ldr	r3, [pc, #516]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006970:	4b7e      	ldr	r3, [pc, #504]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800697a:	4b7c      	ldr	r3, [pc, #496]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800697c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80da 	beq.w	8006b52 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d05a      	beq.n	8006a5a <HAL_RCC_GetSysClockFreq+0x1b2>
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d302      	bcc.n	80069ae <HAL_RCC_GetSysClockFreq+0x106>
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d078      	beq.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f6>
 80069ac:	e099      	b.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ae:	4b6f      	ldr	r3, [pc, #444]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02d      	beq.n	8006a16 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069ba:	4b6c      	ldr	r3, [pc, #432]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	4a6a      	ldr	r2, [pc, #424]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e4:	4b61      	ldr	r3, [pc, #388]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>
 80069fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a14:	e087      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a20:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006b80 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a28:	4b50      	ldr	r3, [pc, #320]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a30:	ee07 3a90 	vmov	s15, r3
 8006a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a38:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a3c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a58:	e065      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a64:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006b84 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6c:	4b3f      	ldr	r3, [pc, #252]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a9c:	e043      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006b88 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab0:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006adc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae0:	e021      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006b84 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af4:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b04:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b08:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b24:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b26:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	0a5b      	lsrs	r3, r3, #9
 8006b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b30:	3301      	adds	r3, #1
 8006b32:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b4a:	ee17 3a90 	vmov	r3, s15
 8006b4e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b50:	e005      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
    break;
 8006b56:	e002      	b.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b5a:	61bb      	str	r3, [r7, #24]
    break;
 8006b5c:	bf00      	nop
  }

  return sysclockfreq;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3724      	adds	r7, #36	; 0x24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	03d09000 	.word	0x03d09000
 8006b74:	003d0900 	.word	0x003d0900
 8006b78:	017d7840 	.word	0x017d7840
 8006b7c:	46000000 	.word	0x46000000
 8006b80:	4c742400 	.word	0x4c742400
 8006b84:	4a742400 	.word	0x4a742400
 8006b88:	4bbebc20 	.word	0x4bbebc20

08006b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b92:	f7ff fe89 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006b96:	4601      	mov	r1, r0
 8006b98:	4b10      	ldr	r3, [pc, #64]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	4a0f      	ldr	r2, [pc, #60]	; (8006be0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	fa21 f303 	lsr.w	r3, r1, r3
 8006bae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bba:	5cd3      	ldrb	r3, [r2, r3]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bca:	4a07      	ldr	r2, [pc, #28]	; (8006be8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	0800c86c 	.word	0x0800c86c
 8006be4:	24000020 	.word	0x24000020
 8006be8:	2400001c 	.word	0x2400001c

08006bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bf0:	f7ff ffcc 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	091b      	lsrs	r3, r3, #4
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c02:	5cd3      	ldrb	r3, [r2, r3]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	58024400 	.word	0x58024400
 8006c14:	0800c86c 	.word	0x0800c86c

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c1c:	f7ff ffb6 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006c20:	4601      	mov	r1, r0
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c2e:	5cd3      	ldrb	r3, [r2, r3]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	0800c86c 	.word	0x0800c86c

08006c44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c50:	2300      	movs	r3, #0
 8006c52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d03d      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c68:	d013      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c6e:	d802      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006c74:	e01f      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c7a:	d013      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c80:	d01c      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006c82:	e018      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4baf      	ldr	r3, [pc, #700]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4aae      	ldr	r2, [pc, #696]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c90:	e015      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 fd23 	bl	80086e4 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ca2:	e00c      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	2102      	movs	r1, #2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fdcc 	bl	8008848 <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cba:	e000      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cc4:	4b9f      	ldr	r3, [pc, #636]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd0:	499c      	ldr	r1, [pc, #624]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8006cd6:	e001      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d03d      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d826      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006cf0:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d0d 	.word	0x08006d0d
 8006cfc:	08006d1b 	.word	0x08006d1b
 8006d00:	08006d2d 	.word	0x08006d2d
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d0c:	4b8d      	ldr	r3, [pc, #564]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a8c      	ldr	r2, [pc, #560]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d18:	e015      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fcdf 	bl	80086e4 <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d2a:	e00c      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3324      	adds	r3, #36	; 0x24
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fd88 	bl	8008848 <RCCEx_PLL3_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
      break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d4c:	4b7d      	ldr	r3, [pc, #500]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d50:	f023 0207 	bic.w	r2, r3, #7
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	497a      	ldr	r1, [pc, #488]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	650b      	str	r3, [r1, #80]	; 0x50
 8006d5e:	e001      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d03e      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d01c      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d804      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d80:	2b40      	cmp	r3, #64	; 0x40
 8006d82:	d00d      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006d84:	e01e      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006d86:	2bc0      	cmp	r3, #192	; 0xc0
 8006d88:	d01f      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8e:	d01e      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d90:	e018      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d92:	4b6c      	ldr	r3, [pc, #432]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	4a6b      	ldr	r2, [pc, #428]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d9e:	e017      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3304      	adds	r3, #4
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fc9c 	bl	80086e4 <RCCEx_PLL2_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006db0:	e00e      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3324      	adds	r3, #36	; 0x24
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fd45 	bl	8008848 <RCCEx_PLL3_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dc2:	e005      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc8:	e002      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006dd6:	4b5b      	ldr	r3, [pc, #364]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	4958      	ldr	r1, [pc, #352]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	650b      	str	r3, [r1, #80]	; 0x50
 8006de8:	e001      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d044      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e04:	d01f      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e0a:	d805      	bhi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e14:	d00e      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006e16:	e01f      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006e18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e1c:	d01f      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006e1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e22:	d01e      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e24:	e018      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e26:	4b47      	ldr	r3, [pc, #284]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	4a46      	ldr	r2, [pc, #280]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e32:	e017      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 fc52 	bl	80086e4 <RCCEx_PLL2_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e44:	e00e      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3324      	adds	r3, #36	; 0x24
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fcfb 	bl	8008848 <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e56:	e005      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5c:	e002      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e000      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e6a:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e78:	4932      	ldr	r1, [pc, #200]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e7e:	e001      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d044      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e9a:	d01f      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea0:	d805      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eaa:	d00e      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006eac:	e01f      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006eae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006eb2:	d01f      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eb8:	d01e      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006eba:	e018      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebc:	4b21      	ldr	r3, [pc, #132]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ec8:	e017      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fc07 	bl	80086e4 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006eda:	e00e      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3324      	adds	r3, #36	; 0x24
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 fcb0 	bl	8008848 <RCCEx_PLL3_Config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eec:	e005      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef2:	e002      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f0e:	490d      	ldr	r1, [pc, #52]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	658b      	str	r3, [r1, #88]	; 0x58
 8006f14:	e001      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d035      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d00c      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d802      	bhi.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01b      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006f36:	e017      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d00c      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d018      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006f40:	e012      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f48:	4baf      	ldr	r3, [pc, #700]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4aae      	ldr	r2, [pc, #696]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f54:	e00e      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 fbc1 	bl	80086e4 <RCCEx_PLL2_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f66:	e005      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f7a:	4ba3      	ldr	r3, [pc, #652]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	49a0      	ldr	r1, [pc, #640]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f8c:	e001      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d042      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa6:	d01f      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fac:	d805      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006fb8:	e01f      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fbe:	d01f      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc4:	d01e      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006fc6:	e018      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc8:	4b8f      	ldr	r3, [pc, #572]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	4a8e      	ldr	r2, [pc, #568]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fd4:	e017      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 fb81 	bl	80086e4 <RCCEx_PLL2_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fe6:	e00e      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fc2a 	bl	8008848 <RCCEx_PLL3_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ff8:	e005      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800700c:	4b7e      	ldr	r3, [pc, #504]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007010:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007018:	497b      	ldr	r1, [pc, #492]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800701a:	4313      	orrs	r3, r2
 800701c:	650b      	str	r3, [r1, #80]	; 0x50
 800701e:	e001      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d042      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007038:	d01b      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800703a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800703e:	d805      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d022      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007048:	d00a      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800704a:	e01b      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800704c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007050:	d01d      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007056:	d01c      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800705c:	d01b      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800705e:	e011      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fb3c 	bl	80086e4 <RCCEx_PLL2_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007070:	e012      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3324      	adds	r3, #36	; 0x24
 8007076:	2101      	movs	r1, #1
 8007078:	4618      	mov	r0, r3
 800707a:	f001 fbe5 	bl	8008848 <RCCEx_PLL3_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007082:	e009      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	e006      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800708a:	bf00      	nop
 800708c:	e004      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800708e:	bf00      	nop
 8007090:	e002      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007092:	bf00      	nop
 8007094:	e000      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800709e:	4b5a      	ldr	r3, [pc, #360]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	4957      	ldr	r1, [pc, #348]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	650b      	str	r3, [r1, #80]	; 0x50
 80070b0:	e001      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d044      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070cc:	d01b      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80070ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d2:	d805      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d022      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80070d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070de:	e01b      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d01d      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80070e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ea:	d01c      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80070ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f0:	d01b      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80070f2:	e011      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 faf2 	bl	80086e4 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007104:	e012      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3324      	adds	r3, #36	; 0x24
 800710a:	2101      	movs	r1, #1
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fb9b 	bl	8008848 <RCCEx_PLL3_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007116:	e009      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
      break;
 800711c:	e006      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800711e:	bf00      	nop
 8007120:	e004      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800712a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007132:	4b35      	ldr	r3, [pc, #212]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007140:	4931      	ldr	r1, [pc, #196]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007142:	4313      	orrs	r3, r2
 8007144:	658b      	str	r3, [r1, #88]	; 0x58
 8007146:	e001      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02d      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007160:	d005      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007166:	d009      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d013      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800716c:	e00f      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800717a:	e00c      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3304      	adds	r3, #4
 8007180:	2101      	movs	r1, #1
 8007182:	4618      	mov	r0, r3
 8007184:	f001 faae 	bl	80086e4 <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800718c:	e003      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
      break;
 8007192:	e000      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800719c:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800719e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a8:	4917      	ldr	r1, [pc, #92]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	650b      	str	r3, [r1, #80]	; 0x50
 80071ae:	e001      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d035      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d81b      	bhi.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	0800720d 	.word	0x0800720d
 80071d4:	080071e1 	.word	0x080071e1
 80071d8:	080071ef 	.word	0x080071ef
 80071dc:	0800720d 	.word	0x0800720d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e0:	4b09      	ldr	r3, [pc, #36]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a08      	ldr	r2, [pc, #32]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071ec:	e00f      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	2102      	movs	r1, #2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 fa75 	bl	80086e4 <RCCEx_PLL2_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071fe:	e006      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
      break;
 8007204:	e003      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
      break;
 800720c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007214:	4bba      	ldr	r3, [pc, #744]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007218:	f023 0203 	bic.w	r2, r3, #3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	49b7      	ldr	r1, [pc, #732]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007222:	4313      	orrs	r3, r2
 8007224:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007226:	e001      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8086 	beq.w	8007346 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800723a:	4bb2      	ldr	r3, [pc, #712]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4ab1      	ldr	r2, [pc, #708]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007246:	f7fa fd85 	bl	8001d54 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724c:	e009      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724e:	f7fa fd81 	bl	8001d54 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b64      	cmp	r3, #100	; 0x64
 800725a:	d902      	bls.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	75fb      	strb	r3, [r7, #23]
        break;
 8007260:	e005      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007262:	4ba8      	ldr	r3, [pc, #672]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0ef      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d166      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007274:	4ba2      	ldr	r3, [pc, #648]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800727e:	4053      	eors	r3, r2
 8007280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007288:	4b9d      	ldr	r3, [pc, #628]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007290:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007292:	4b9b      	ldr	r3, [pc, #620]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	4a9a      	ldr	r2, [pc, #616]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800729c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800729e:	4b98      	ldr	r3, [pc, #608]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a97      	ldr	r2, [pc, #604]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072aa:	4a95      	ldr	r2, [pc, #596]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ba:	d115      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072bc:	f7fa fd4a 	bl	8001d54 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072c2:	e00b      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c4:	f7fa fd46 	bl	8001d54 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d902      	bls.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	75fb      	strb	r3, [r7, #23]
            break;
 80072da:	e005      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072dc:	4b88      	ldr	r3, [pc, #544]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0ed      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d126      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fc:	d10d      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80072fe:	4b80      	ldr	r3, [pc, #512]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800730c:	0919      	lsrs	r1, r3, #4
 800730e:	4b7e      	ldr	r3, [pc, #504]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007310:	400b      	ands	r3, r1
 8007312:	497b      	ldr	r1, [pc, #492]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007314:	4313      	orrs	r3, r2
 8007316:	610b      	str	r3, [r1, #16]
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800731a:	4b79      	ldr	r3, [pc, #484]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	4a78      	ldr	r2, [pc, #480]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007320:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007324:	6113      	str	r3, [r2, #16]
 8007326:	4b76      	ldr	r3, [pc, #472]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007334:	4972      	ldr	r1, [pc, #456]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007336:	4313      	orrs	r3, r2
 8007338:	670b      	str	r3, [r1, #112]	; 0x70
 800733a:	e004      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	75bb      	strb	r3, [r7, #22]
 8007340:	e001      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d07d      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007356:	2b28      	cmp	r3, #40	; 0x28
 8007358:	d866      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	0800742f 	.word	0x0800742f
 8007364:	08007429 	.word	0x08007429
 8007368:	08007429 	.word	0x08007429
 800736c:	08007429 	.word	0x08007429
 8007370:	08007429 	.word	0x08007429
 8007374:	08007429 	.word	0x08007429
 8007378:	08007429 	.word	0x08007429
 800737c:	08007429 	.word	0x08007429
 8007380:	08007405 	.word	0x08007405
 8007384:	08007429 	.word	0x08007429
 8007388:	08007429 	.word	0x08007429
 800738c:	08007429 	.word	0x08007429
 8007390:	08007429 	.word	0x08007429
 8007394:	08007429 	.word	0x08007429
 8007398:	08007429 	.word	0x08007429
 800739c:	08007429 	.word	0x08007429
 80073a0:	08007417 	.word	0x08007417
 80073a4:	08007429 	.word	0x08007429
 80073a8:	08007429 	.word	0x08007429
 80073ac:	08007429 	.word	0x08007429
 80073b0:	08007429 	.word	0x08007429
 80073b4:	08007429 	.word	0x08007429
 80073b8:	08007429 	.word	0x08007429
 80073bc:	08007429 	.word	0x08007429
 80073c0:	0800742f 	.word	0x0800742f
 80073c4:	08007429 	.word	0x08007429
 80073c8:	08007429 	.word	0x08007429
 80073cc:	08007429 	.word	0x08007429
 80073d0:	08007429 	.word	0x08007429
 80073d4:	08007429 	.word	0x08007429
 80073d8:	08007429 	.word	0x08007429
 80073dc:	08007429 	.word	0x08007429
 80073e0:	0800742f 	.word	0x0800742f
 80073e4:	08007429 	.word	0x08007429
 80073e8:	08007429 	.word	0x08007429
 80073ec:	08007429 	.word	0x08007429
 80073f0:	08007429 	.word	0x08007429
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007429 	.word	0x08007429
 8007400:	0800742f 	.word	0x0800742f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3304      	adds	r3, #4
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f96a 	bl	80086e4 <RCCEx_PLL2_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007414:	e00c      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3324      	adds	r3, #36	; 0x24
 800741a:	2101      	movs	r1, #1
 800741c:	4618      	mov	r0, r3
 800741e:	f001 fa13 	bl	8008848 <RCCEx_PLL3_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]
      break;
 800742c:	e000      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800742e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007436:	4b32      	ldr	r3, [pc, #200]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007442:	492f      	ldr	r1, [pc, #188]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007444:	4313      	orrs	r3, r2
 8007446:	654b      	str	r3, [r1, #84]	; 0x54
 8007448:	e001      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d037      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745e:	2b05      	cmp	r3, #5
 8007460:	d820      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	080074ab 	.word	0x080074ab
 800746c:	08007481 	.word	0x08007481
 8007470:	08007493 	.word	0x08007493
 8007474:	080074ab 	.word	0x080074ab
 8007478:	080074ab 	.word	0x080074ab
 800747c:	080074ab 	.word	0x080074ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f001 f92c 	bl	80086e4 <RCCEx_PLL2_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007490:	e00c      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3324      	adds	r3, #36	; 0x24
 8007496:	2101      	movs	r1, #1
 8007498:	4618      	mov	r0, r3
 800749a:	f001 f9d5 	bl	8008848 <RCCEx_PLL3_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074a2:	e003      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
      break;
 80074a8:	e000      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80074aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d109      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	f023 0207 	bic.w	r2, r3, #7
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074be:	4910      	ldr	r1, [pc, #64]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	654b      	str	r3, [r1, #84]	; 0x54
 80074c4:	e001      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d040      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d827      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80074e0:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	08007537 	.word	0x08007537
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	0800751f 	.word	0x0800751f
 80074f4:	08007537 	.word	0x08007537
 80074f8:	08007537 	.word	0x08007537
 80074fc:	08007537 	.word	0x08007537
 8007500:	58024400 	.word	0x58024400
 8007504:	58024800 	.word	0x58024800
 8007508:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	2101      	movs	r1, #1
 8007512:	4618      	mov	r0, r3
 8007514:	f001 f8e6 	bl	80086e4 <RCCEx_PLL2_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800751c:	e00c      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	; 0x24
 8007522:	2101      	movs	r1, #1
 8007524:	4618      	mov	r0, r3
 8007526:	f001 f98f 	bl	8008848 <RCCEx_PLL3_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800752e:	e003      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	e000      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800753e:	4bb2      	ldr	r3, [pc, #712]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007542:	f023 0207 	bic.w	r2, r3, #7
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	49ae      	ldr	r1, [pc, #696]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800754e:	4313      	orrs	r3, r2
 8007550:	658b      	str	r3, [r1, #88]	; 0x58
 8007552:	e001      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d044      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756e:	d01b      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007574:	d805      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d022      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800757a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800757e:	d00a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007580:	e01b      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007586:	d01d      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800758c:	d01c      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800758e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007592:	d01b      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007594:	e011      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3304      	adds	r3, #4
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f001 f8a1 	bl	80086e4 <RCCEx_PLL2_Config>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075a6:	e012      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3324      	adds	r3, #36	; 0x24
 80075ac:	2102      	movs	r1, #2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f94a 	bl	8008848 <RCCEx_PLL3_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075b8:	e009      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
      break;
 80075be:	e006      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075c0:	bf00      	nop
 80075c2:	e004      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075c4:	bf00      	nop
 80075c6:	e002      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075c8:	bf00      	nop
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075d4:	4b8c      	ldr	r3, [pc, #560]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e2:	4989      	ldr	r1, [pc, #548]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	654b      	str	r3, [r1, #84]	; 0x54
 80075e8:	e001      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d044      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007604:	d01b      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760a:	d805      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d022      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007614:	d00a      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007616:	e01b      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761c:	d01d      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800761e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007622:	d01c      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007628:	d01b      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800762a:	e011      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f856 	bl	80086e4 <RCCEx_PLL2_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800763c:	e012      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3324      	adds	r3, #36	; 0x24
 8007642:	2102      	movs	r1, #2
 8007644:	4618      	mov	r0, r3
 8007646:	f001 f8ff 	bl	8008848 <RCCEx_PLL3_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800764e:	e009      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
      break;
 8007654:	e006      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007656:	bf00      	nop
 8007658:	e004      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800765a:	bf00      	nop
 800765c:	e002      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800765e:	bf00      	nop
 8007660:	e000      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800766a:	4b67      	ldr	r3, [pc, #412]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800766c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007678:	4963      	ldr	r1, [pc, #396]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800767a:	4313      	orrs	r3, r2
 800767c:	658b      	str	r3, [r1, #88]	; 0x58
 800767e:	e001      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768c:	2b00      	cmp	r3, #0
 800768e:	d044      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800769a:	d01b      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800769c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a0:	d805      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d022      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076aa:	d00a      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80076ac:	e01b      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80076ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b2:	d01d      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80076b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076b8:	d01c      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80076ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076be:	d01b      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80076c0:	e011      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3304      	adds	r3, #4
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 f80b 	bl	80086e4 <RCCEx_PLL2_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076d2:	e012      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	2102      	movs	r1, #2
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 f8b4 	bl	8008848 <RCCEx_PLL3_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076e4:	e009      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
      break;
 80076ea:	e006      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076ec:	bf00      	nop
 80076ee:	e004      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076f0:	bf00      	nop
 80076f2:	e002      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007700:	4b41      	ldr	r3, [pc, #260]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800770e:	493e      	ldr	r1, [pc, #248]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007710:	4313      	orrs	r3, r2
 8007712:	658b      	str	r3, [r1, #88]	; 0x58
 8007714:	e001      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01a      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007730:	d10a      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3324      	adds	r3, #36	; 0x24
 8007736:	2102      	movs	r1, #2
 8007738:	4618      	mov	r0, r3
 800773a:	f001 f885 	bl	8008848 <RCCEx_PLL3_Config>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007748:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800774a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007756:	492c      	ldr	r1, [pc, #176]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007758:	4313      	orrs	r3, r2
 800775a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01a      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007772:	d10a      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3324      	adds	r3, #36	; 0x24
 8007778:	2102      	movs	r1, #2
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f864 	bl	8008848 <RCCEx_PLL3_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800778a:	4b1f      	ldr	r3, [pc, #124]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007798:	491b      	ldr	r1, [pc, #108]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800779a:	4313      	orrs	r3, r2
 800779c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d032      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d00d      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80077b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ba:	d016      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d111      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 ff8c 	bl	80086e4 <RCCEx_PLL2_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077d0:	e00c      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3324      	adds	r3, #36	; 0x24
 80077d6:	2102      	movs	r1, #2
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 f835 	bl	8008848 <RCCEx_PLL3_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077e2:	e003      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
      break;
 80077e8:	e000      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80077ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10c      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077f2:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007800:	4901      	ldr	r1, [pc, #4]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007802:	4313      	orrs	r3, r2
 8007804:	658b      	str	r3, [r1, #88]	; 0x58
 8007806:	e003      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02f      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007826:	d00c      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800782c:	d015      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800782e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007832:	d10f      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007834:	4b71      	ldr	r3, [pc, #452]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	4a70      	ldr	r2, [pc, #448]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800783a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800783e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007840:	e00c      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3324      	adds	r3, #36	; 0x24
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fffd 	bl	8008848 <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007852:	e003      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	e000      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800785a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007862:	4b66      	ldr	r3, [pc, #408]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007870:	4962      	ldr	r1, [pc, #392]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007872:	4313      	orrs	r3, r2
 8007874:	654b      	str	r3, [r1, #84]	; 0x54
 8007876:	e001      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d029      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007894:	d007      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007896:	e00f      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007898:	4b58      	ldr	r3, [pc, #352]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a57      	ldr	r2, [pc, #348]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800789e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078a4:	e00b      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3304      	adds	r3, #4
 80078aa:	2102      	movs	r1, #2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 ff19 	bl	80086e4 <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078b6:	e002      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078c4:	4b4d      	ldr	r3, [pc, #308]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d0:	494a      	ldr	r1, [pc, #296]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078d6:	e001      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3324      	adds	r3, #36	; 0x24
 80078ec:	2102      	movs	r1, #2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 ffaa 	bl	8008848 <RCCEx_PLL3_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d02f      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800790e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007912:	d00c      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007918:	d802      	bhi.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d011      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800791e:	e00d      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007924:	d00f      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800792a:	d00e      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800792c:	e006      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792e:	4b33      	ldr	r3, [pc, #204]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	4a32      	ldr	r2, [pc, #200]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800793a:	e007      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
      break;
 8007940:	e004      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007942:	bf00      	nop
 8007944:	e002      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800794a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007952:	4b2a      	ldr	r3, [pc, #168]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795e:	4927      	ldr	r1, [pc, #156]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007960:	4313      	orrs	r3, r2
 8007962:	654b      	str	r3, [r1, #84]	; 0x54
 8007964:	e001      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007976:	4b21      	ldr	r3, [pc, #132]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	491e      	ldr	r1, [pc, #120]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007984:	4313      	orrs	r3, r2
 8007986:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007994:	4b19      	ldr	r3, [pc, #100]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007998:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a0:	4916      	ldr	r1, [pc, #88]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079b2:	4b12      	ldr	r3, [pc, #72]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	4a11      	ldr	r2, [pc, #68]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079bc:	6113      	str	r3, [r2, #16]
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079c8:	490c      	ldr	r1, [pc, #48]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da08      	bge.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	4906      	ldr	r1, [pc, #24]	; (80079fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80079e8:	7dbb      	ldrb	r3, [r7, #22]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	58024400 	.word	0x58024400

08007a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b090      	sub	sp, #64	; 0x40
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0e:	d150      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a10:	4ba1      	ldr	r3, [pc, #644]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d844      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007a20:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a3d 	.word	0x08007a3d
 8007a2c:	08007a4d 	.word	0x08007a4d
 8007a30:	08007a5d 	.word	0x08007a5d
 8007a34:	08007aa5 	.word	0x08007aa5
 8007a38:	08007a6d 	.word	0x08007a6d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fd03 	bl	800844c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a4a:	e241      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4c:	f107 0318 	add.w	r3, r7, #24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fa63 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a5a:	e239      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5c:	f107 030c 	add.w	r3, r7, #12
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fba7 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a6a:	e231      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a6c:	4b8a      	ldr	r3, [pc, #552]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a7c:	4b87      	ldr	r3, [pc, #540]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a80:	e226      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a88:	d102      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007a8a:	4b85      	ldr	r3, [pc, #532]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8e:	e21f      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a96:	d102      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007a98:	4b82      	ldr	r3, [pc, #520]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9c:	e218      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa2:	e215      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007aa4:	4b80      	ldr	r3, [pc, #512]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa8:	e212      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aae:	bf00      	nop
 8007ab0:	e20e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab8:	d14f      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007aba:	4b77      	ldr	r3, [pc, #476]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007abe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d01c      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d804      	bhi.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d008      	beq.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d00e      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007ad6:	e03c      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8007ada:	d037      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae0:	d018      	beq.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007ae2:	e036      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fcaf 	bl	800844c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007af2:	e1ed      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af4:	f107 0318 	add.w	r3, r7, #24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fa0f 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b02:	e1e5      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fb53 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b12:	e1dd      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b14:	4b60      	ldr	r3, [pc, #384]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b24:	4b5d      	ldr	r3, [pc, #372]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b28:	e1d2      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b30:	d102      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007b32:	4b5b      	ldr	r3, [pc, #364]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b36:	e1cb      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007b40:	4b58      	ldr	r3, [pc, #352]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b44:	e1c4      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4a:	e1c1      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b4c:	4b56      	ldr	r3, [pc, #344]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b50:	e1be      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b56:	bf00      	nop
 8007b58:	e1ba      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b60:	d153      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007b62:	4b4d      	ldr	r3, [pc, #308]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b72:	d01f      	beq.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b78:	d805      	bhi.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b82:	d00f      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007b84:	e03d      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007b86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b8a:	d037      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b90:	d018      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007b92:	e036      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fc57 	bl	800844c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba2:	e195      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba4:	f107 0318 	add.w	r3, r7, #24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f9b7 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb2:	e18d      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb4:	f107 030c 	add.w	r3, r7, #12
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fafb 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc2:	e185      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bc4:	4b34      	ldr	r3, [pc, #208]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bd4:	4b31      	ldr	r3, [pc, #196]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bd8:	e17a      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007be0:	d102      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007be2:	4b2f      	ldr	r3, [pc, #188]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be6:	e173      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007bf0:	4b2c      	ldr	r3, [pc, #176]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf4:	e16c      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bfa:	e169      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bfc:	4b2a      	ldr	r3, [pc, #168]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c00:	e166      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c06:	bf00      	nop
 8007c08:	e162      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c10:	d15d      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007c12:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c22:	d01f      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c28:	d805      	bhi.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007c2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c32:	d00f      	beq.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007c34:	e047      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007c36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c3a:	d041      	beq.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c40:	d018      	beq.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007c42:	e040      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fbff 	bl	800844c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c52:	e13d      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c54:	f107 0318 	add.w	r3, r7, #24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f95f 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e135      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 faa3 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c72:	e12d      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c74:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c88:	e122      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c90:	d10c      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007c92:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e11b      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	03d09000 	.word	0x03d09000
 8007ca0:	003d0900 	.word	0x003d0900
 8007ca4:	017d7840 	.word	0x017d7840
 8007ca8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb2:	d102      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007cb4:	4b89      	ldr	r3, [pc, #548]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb8:	e10a      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cbe:	e107      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cc0:	4b87      	ldr	r3, [pc, #540]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc4:	e104      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cca:	bf00      	nop
 8007ccc:	e100      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d153      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007cd6:	4b83      	ldr	r3, [pc, #524]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cda:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cde:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d01f      	beq.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cec:	d805      	bhi.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf6:	d00f      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007cf8:	e03d      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cfe:	d037      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d04:	d018      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007d06:	e036      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fb9d 	bl	800844c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d16:	e0db      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d18:	f107 0318 	add.w	r3, r7, #24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 f8fd 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d26:	e0d3      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d28:	f107 030c 	add.w	r3, r7, #12
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fa41 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d36:	e0cb      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d38:	4b6a      	ldr	r3, [pc, #424]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d48:	4b67      	ldr	r3, [pc, #412]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d4c:	e0c0      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d54:	d102      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007d56:	4b65      	ldr	r3, [pc, #404]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5a:	e0b9      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007d64:	4b5d      	ldr	r3, [pc, #372]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d68:	e0b2      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6e:	e0af      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d70:	4b5b      	ldr	r3, [pc, #364]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d74:	e0ac      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d7a:	bf00      	nop
 8007d7c:	e0a8      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d84:	d13d      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007d86:	4b57      	ldr	r3, [pc, #348]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d96:	d00c      	beq.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d9c:	d011      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d12b      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da2:	f107 0318 	add.w	r3, r7, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f8b8 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db0:	e08e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db2:	f107 030c 	add.w	r3, r7, #12
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f9fc 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc0:	e086      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dc2:	4b48      	ldr	r3, [pc, #288]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dd2:	4b45      	ldr	r3, [pc, #276]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007dd6:	e07b      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dde:	d102      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007de0:	4b42      	ldr	r3, [pc, #264]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de4:	e074      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dec:	d102      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007dee:	4b3b      	ldr	r3, [pc, #236]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df2:	e06d      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df8:	e06a      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfe:	bf00      	nop
 8007e00:	e066      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e08:	d11f      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007e0a:	4b36      	ldr	r3, [pc, #216]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1e:	d008      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fb10 	bl	800844c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e30:	e04e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e32:	f107 0318 	add.w	r3, r7, #24
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f870 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e40:	e046      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e46:	bf00      	nop
 8007e48:	e042      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e50:	d13c      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e56:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e5a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e62:	d01e      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e68:	d805      	bhi.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e72:	d00e      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007e74:	e026      	b.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7a:	d01d      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e80:	d01d      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007e82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e86:	d014      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007e88:	e01c      	b.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e8a:	f000 f831 	bl	8007ef0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007e90:	e01e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f840 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea0:	e016      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f984 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb0:	e00e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb6:	e00b      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007ebe:	4b07      	ldr	r3, [pc, #28]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec2:	e005      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec8:	bf00      	nop
 8007eca:	e001      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3740      	adds	r7, #64	; 0x40
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	017d7840 	.word	0x017d7840
 8007ee0:	00bb8000 	.word	0x00bb8000
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	03d09000 	.word	0x03d09000
 8007eec:	003d0900 	.word	0x003d0900

08007ef0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ef4:	f7fe fe4a 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8007ef8:	4601      	mov	r1, r0
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	4a04      	ldr	r2, [pc, #16]	; (8007f18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f06:	5cd3      	ldrb	r3, [r2, r3]
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	58024400 	.word	0x58024400
 8007f18:	0800c86c 	.word	0x0800c86c

08007f1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b089      	sub	sp, #36	; 0x24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f24:	4b9d      	ldr	r3, [pc, #628]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f2e:	4b9b      	ldr	r3, [pc, #620]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	0b1b      	lsrs	r3, r3, #12
 8007f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f3a:	4b98      	ldr	r3, [pc, #608]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	091b      	lsrs	r3, r3, #4
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f46:	4b95      	ldr	r3, [pc, #596]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	08db      	lsrs	r3, r3, #3
 8007f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 810a 	beq.w	800817e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d05a      	beq.n	8008026 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d302      	bcc.n	8007f7a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d078      	beq.n	800806a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007f78:	e099      	b.n	80080ae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7a:	4b88      	ldr	r3, [pc, #544]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d02d      	beq.n	8007fe2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f86:	4b85      	ldr	r3, [pc, #532]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	08db      	lsrs	r3, r3, #3
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	4a83      	ldr	r2, [pc, #524]	; (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007f92:	fa22 f303 	lsr.w	r3, r2, r3
 8007f96:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb0:	4b7a      	ldr	r3, [pc, #488]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fdc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fe0:	e087      	b.n	80080f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff4:	4b69      	ldr	r3, [pc, #420]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008004:	ed97 6a03 	vldr	s12, [r7, #12]
 8008008:	eddf 5a66 	vldr	s11, [pc, #408]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800800c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008020:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008024:	e065      	b.n	80080f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	ee07 3a90 	vmov	s15, r3
 800802c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008030:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008038:	4b58      	ldr	r3, [pc, #352]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008048:	ed97 6a03 	vldr	s12, [r7, #12]
 800804c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800805c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008064:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008068:	e043      	b.n	80080f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008074:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807c:	4b47      	ldr	r3, [pc, #284]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008090:	eddf 5a44 	vldr	s11, [pc, #272]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ac:	e021      	b.n	80080f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80080bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c0:	4b36      	ldr	r3, [pc, #216]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080f0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	0a5b      	lsrs	r3, r3, #9
 80080f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800810c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008118:	ee17 2a90 	vmov	r2, s15
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008120:	4b1e      	ldr	r3, [pc, #120]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800813a:	edd7 6a07 	vldr	s13, [r7, #28]
 800813e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008146:	ee17 2a90 	vmov	r2, s15
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	0e1b      	lsrs	r3, r3, #24
 8008154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008168:	edd7 6a07 	vldr	s13, [r7, #28]
 800816c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008174:	ee17 2a90 	vmov	r2, s15
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800817c:	e008      	b.n	8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	609a      	str	r2, [r3, #8]
}
 8008190:	bf00      	nop
 8008192:	3724      	adds	r7, #36	; 0x24
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	58024400 	.word	0x58024400
 80081a0:	03d09000 	.word	0x03d09000
 80081a4:	46000000 	.word	0x46000000
 80081a8:	4c742400 	.word	0x4c742400
 80081ac:	4a742400 	.word	0x4a742400
 80081b0:	4bbebc20 	.word	0x4bbebc20

080081b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b089      	sub	sp, #36	; 0x24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081bc:	4b9d      	ldr	r3, [pc, #628]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081c6:	4b9b      	ldr	r3, [pc, #620]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	0d1b      	lsrs	r3, r3, #20
 80081cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081d2:	4b98      	ldr	r3, [pc, #608]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081de:	4b95      	ldr	r3, [pc, #596]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 810a 	beq.w	8008416 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d05a      	beq.n	80082be <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008208:	2b01      	cmp	r3, #1
 800820a:	d302      	bcc.n	8008212 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800820c:	2b02      	cmp	r3, #2
 800820e:	d078      	beq.n	8008302 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008210:	e099      	b.n	8008346 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008212:	4b88      	ldr	r3, [pc, #544]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d02d      	beq.n	800827a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800821e:	4b85      	ldr	r3, [pc, #532]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	08db      	lsrs	r3, r3, #3
 8008224:	f003 0303 	and.w	r3, r3, #3
 8008228:	4a83      	ldr	r2, [pc, #524]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800822a:	fa22 f303 	lsr.w	r3, r2, r3
 800822e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008248:	4b7a      	ldr	r3, [pc, #488]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008258:	ed97 6a03 	vldr	s12, [r7, #12]
 800825c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008274:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008278:	e087      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008284:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828c:	4b69      	ldr	r3, [pc, #420]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829c:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80082a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082bc:	e065      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80082cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d0:	4b58      	ldr	r3, [pc, #352]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80082e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008300:	e043      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008314:	4b47      	ldr	r3, [pc, #284]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	ee07 3a90 	vmov	s15, r3
 8008320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008324:	ed97 6a03 	vldr	s12, [r7, #12]
 8008328:	eddf 5a44 	vldr	s11, [pc, #272]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800832c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008344:	e021      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	ee07 3a90 	vmov	s15, r3
 800834c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008350:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008358:	4b36      	ldr	r3, [pc, #216]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008368:	ed97 6a03 	vldr	s12, [r7, #12]
 800836c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008384:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008388:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800838a:	4b2a      	ldr	r3, [pc, #168]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	0a5b      	lsrs	r3, r3, #9
 8008390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008394:	ee07 3a90 	vmov	s15, r3
 8008398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b0:	ee17 2a90 	vmov	r2, s15
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083de:	ee17 2a90 	vmov	r2, s15
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	0e1b      	lsrs	r3, r3, #24
 80083ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008400:	edd7 6a07 	vldr	s13, [r7, #28]
 8008404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840c:	ee17 2a90 	vmov	r2, s15
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008414:	e008      	b.n	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	609a      	str	r2, [r3, #8]
}
 8008428:	bf00      	nop
 800842a:	3724      	adds	r7, #36	; 0x24
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	58024400 	.word	0x58024400
 8008438:	03d09000 	.word	0x03d09000
 800843c:	46000000 	.word	0x46000000
 8008440:	4c742400 	.word	0x4c742400
 8008444:	4a742400 	.word	0x4a742400
 8008448:	4bbebc20 	.word	0x4bbebc20

0800844c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800844c:	b480      	push	{r7}
 800844e:	b089      	sub	sp, #36	; 0x24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008454:	4b9d      	ldr	r3, [pc, #628]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800845e:	4b9b      	ldr	r3, [pc, #620]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008462:	091b      	lsrs	r3, r3, #4
 8008464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008468:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800846a:	4b98      	ldr	r3, [pc, #608]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008474:	4b95      	ldr	r3, [pc, #596]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008478:	08db      	lsrs	r3, r3, #3
 800847a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	fb02 f303 	mul.w	r3, r2, r3
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 810a 	beq.w	80086ac <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d05a      	beq.n	8008554 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d302      	bcc.n	80084a8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d078      	beq.n	8008598 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80084a6:	e099      	b.n	80085dc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084a8:	4b88      	ldr	r3, [pc, #544]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d02d      	beq.n	8008510 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084b4:	4b85      	ldr	r3, [pc, #532]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	08db      	lsrs	r3, r3, #3
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	4a84      	ldr	r2, [pc, #528]	; (80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
 80084c4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084de:	4b7b      	ldr	r3, [pc, #492]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80084f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800850e:	e087      	b.n	8008620 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800851e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008522:	4b6a      	ldr	r3, [pc, #424]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008532:	ed97 6a03 	vldr	s12, [r7, #12]
 8008536:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800853a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008552:	e065      	b.n	8008620 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008566:	4b59      	ldr	r3, [pc, #356]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008576:	ed97 6a03 	vldr	s12, [r7, #12]
 800857a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800857e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800858a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008596:	e043      	b.n	8008620 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085aa:	4b48      	ldr	r3, [pc, #288]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80085be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085da:	e021      	b.n	8008620 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80085ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ee:	4b37      	ldr	r3, [pc, #220]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008602:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800861e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008620:	4b2a      	ldr	r3, [pc, #168]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008624:	0a5b      	lsrs	r3, r3, #9
 8008626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800863a:	edd7 6a07 	vldr	s13, [r7, #28]
 800863e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008646:	ee17 2a90 	vmov	r2, s15
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800864e:	4b1f      	ldr	r3, [pc, #124]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008668:	edd7 6a07 	vldr	s13, [r7, #28]
 800866c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008674:	ee17 2a90 	vmov	r2, s15
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800867c:	4b13      	ldr	r3, [pc, #76]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	0e1b      	lsrs	r3, r3, #24
 8008682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008696:	edd7 6a07 	vldr	s13, [r7, #28]
 800869a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800869e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a2:	ee17 2a90 	vmov	r2, s15
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086aa:	e008      	b.n	80086be <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	609a      	str	r2, [r3, #8]
}
 80086be:	bf00      	nop
 80086c0:	3724      	adds	r7, #36	; 0x24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	58024400 	.word	0x58024400
 80086d0:	03d09000 	.word	0x03d09000
 80086d4:	46000000 	.word	0x46000000
 80086d8:	4c742400 	.word	0x4c742400
 80086dc:	4a742400 	.word	0x4a742400
 80086e0:	4bbebc20 	.word	0x4bbebc20

080086e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086f2:	4b53      	ldr	r3, [pc, #332]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d101      	bne.n	8008702 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e099      	b.n	8008836 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008702:	4b4f      	ldr	r3, [pc, #316]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a4e      	ldr	r2, [pc, #312]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008708:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800870c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870e:	f7f9 fb21 	bl	8001d54 <HAL_GetTick>
 8008712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008714:	e008      	b.n	8008728 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008716:	f7f9 fb1d 	bl	8001d54 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e086      	b.n	8008836 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008728:	4b45      	ldr	r3, [pc, #276]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1f0      	bne.n	8008716 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008734:	4b42      	ldr	r3, [pc, #264]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	031b      	lsls	r3, r3, #12
 8008742:	493f      	ldr	r1, [pc, #252]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008744:	4313      	orrs	r3, r2
 8008746:	628b      	str	r3, [r1, #40]	; 0x28
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	3b01      	subs	r3, #1
 800874e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	3b01      	subs	r3, #1
 8008758:	025b      	lsls	r3, r3, #9
 800875a:	b29b      	uxth	r3, r3
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	3b01      	subs	r3, #1
 8008764:	041b      	lsls	r3, r3, #16
 8008766:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	3b01      	subs	r3, #1
 8008772:	061b      	lsls	r3, r3, #24
 8008774:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008778:	4931      	ldr	r1, [pc, #196]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 800877a:	4313      	orrs	r3, r2
 800877c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800877e:	4b30      	ldr	r3, [pc, #192]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	492d      	ldr	r1, [pc, #180]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 800878c:	4313      	orrs	r3, r2
 800878e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008790:	4b2b      	ldr	r3, [pc, #172]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	f023 0220 	bic.w	r2, r3, #32
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	4928      	ldr	r1, [pc, #160]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087a2:	4b27      	ldr	r3, [pc, #156]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	4a26      	ldr	r2, [pc, #152]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087a8:	f023 0310 	bic.w	r3, r3, #16
 80087ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ae:	4b24      	ldr	r3, [pc, #144]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <RCCEx_PLL2_Config+0x160>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	69d2      	ldr	r2, [r2, #28]
 80087ba:	00d2      	lsls	r2, r2, #3
 80087bc:	4920      	ldr	r1, [pc, #128]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087c2:	4b1f      	ldr	r3, [pc, #124]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	4a1e      	ldr	r2, [pc, #120]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	f043 0310 	orr.w	r3, r3, #16
 80087cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087d4:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	4a19      	ldr	r2, [pc, #100]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087e0:	e00f      	b.n	8008802 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d106      	bne.n	80087f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a14      	ldr	r2, [pc, #80]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f4:	e005      	b.n	8008802 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087f6:	4b12      	ldr	r3, [pc, #72]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	4a11      	ldr	r2, [pc, #68]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 80087fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008800:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008802:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 8008808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800880c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880e:	f7f9 faa1 	bl	8001d54 <HAL_GetTick>
 8008812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008814:	e008      	b.n	8008828 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008816:	f7f9 fa9d 	bl	8001d54 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e006      	b.n	8008836 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <RCCEx_PLL2_Config+0x15c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	58024400 	.word	0x58024400
 8008844:	ffff0007 	.word	0xffff0007

08008848 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008856:	4b53      	ldr	r3, [pc, #332]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b03      	cmp	r3, #3
 8008860:	d101      	bne.n	8008866 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e099      	b.n	800899a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008866:	4b4f      	ldr	r3, [pc, #316]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a4e      	ldr	r2, [pc, #312]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800886c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008872:	f7f9 fa6f 	bl	8001d54 <HAL_GetTick>
 8008876:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008878:	e008      	b.n	800888c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800887a:	f7f9 fa6b 	bl	8001d54 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e086      	b.n	800899a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800888c:	4b45      	ldr	r3, [pc, #276]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008898:	4b42      	ldr	r3, [pc, #264]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	051b      	lsls	r3, r3, #20
 80088a6:	493f      	ldr	r1, [pc, #252]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	628b      	str	r3, [r1, #40]	; 0x28
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	025b      	lsls	r3, r3, #9
 80088be:	b29b      	uxth	r3, r3
 80088c0:	431a      	orrs	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ce:	431a      	orrs	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	061b      	lsls	r3, r3, #24
 80088d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088dc:	4931      	ldr	r1, [pc, #196]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088e2:	4b30      	ldr	r3, [pc, #192]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	492d      	ldr	r1, [pc, #180]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088f4:	4b2b      	ldr	r3, [pc, #172]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	4928      	ldr	r1, [pc, #160]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008906:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	4a26      	ldr	r2, [pc, #152]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800890c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008916:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <RCCEx_PLL3_Config+0x160>)
 8008918:	4013      	ands	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	69d2      	ldr	r2, [r2, #28]
 800891e:	00d2      	lsls	r2, r2, #3
 8008920:	4920      	ldr	r1, [pc, #128]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008926:	4b1f      	ldr	r3, [pc, #124]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	4a1e      	ldr	r2, [pc, #120]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800892c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008938:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	4a19      	ldr	r2, [pc, #100]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800893e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008944:	e00f      	b.n	8008966 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d106      	bne.n	800895a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800894c:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a14      	ldr	r2, [pc, #80]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008958:	e005      	b.n	8008966 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800895a:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	4a11      	ldr	r2, [pc, #68]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a0e      	ldr	r2, [pc, #56]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800896c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008972:	f7f9 f9ef 	bl	8001d54 <HAL_GetTick>
 8008976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008978:	e008      	b.n	800898c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800897a:	f7f9 f9eb 	bl	8001d54 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e006      	b.n	800899a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <RCCEx_PLL3_Config+0x15c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f0      	beq.n	800897a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	58024400 	.word	0x58024400
 80089a8:	ffff0007 	.word	0xffff0007

080089ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e01d      	b.n	80089fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7f8 fe28 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f000 f97c 	bl	8008ce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <HAL_TIM_Base_Start_IT+0x50>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b06      	cmp	r3, #6
 8008a2c:	d00b      	beq.n	8008a46 <HAL_TIM_Base_Start_IT+0x42>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a34:	d007      	beq.n	8008a46 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0201 	orr.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	00010007 	.word	0x00010007

08008a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d122      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d11b      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0202 	mvn.w	r2, #2
 8008a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f905 	bl	8008caa <HAL_TIM_IC_CaptureCallback>
 8008aa0:	e005      	b.n	8008aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f8f7 	bl	8008c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f908 	bl	8008cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d122      	bne.n	8008b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d11b      	bne.n	8008b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f06f 0204 	mvn.w	r2, #4
 8008ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2202      	movs	r2, #2
 8008ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8db 	bl	8008caa <HAL_TIM_IC_CaptureCallback>
 8008af4:	e005      	b.n	8008b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8cd 	bl	8008c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8de 	bl	8008cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	d122      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d11b      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0208 	mvn.w	r2, #8
 8008b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2204      	movs	r2, #4
 8008b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f8b1 	bl	8008caa <HAL_TIM_IC_CaptureCallback>
 8008b48:	e005      	b.n	8008b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f8a3 	bl	8008c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f8b4 	bl	8008cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0310 	and.w	r3, r3, #16
 8008b66:	2b10      	cmp	r3, #16
 8008b68:	d122      	bne.n	8008bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d11b      	bne.n	8008bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0210 	mvn.w	r2, #16
 8008b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2208      	movs	r2, #8
 8008b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f887 	bl	8008caa <HAL_TIM_IC_CaptureCallback>
 8008b9c:	e005      	b.n	8008baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f879 	bl	8008c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f88a 	bl	8008cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d10e      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d107      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f06f 0201 	mvn.w	r2, #1
 8008bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7f7 ff2a 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d10e      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf4:	2b80      	cmp	r3, #128	; 0x80
 8008bf6:	d107      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f99c 	bl	8008f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d10e      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b80      	cmp	r3, #128	; 0x80
 8008c24:	d107      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f98f 	bl	8008f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c40:	2b40      	cmp	r3, #64	; 0x40
 8008c42:	d10e      	bne.n	8008c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b40      	cmp	r3, #64	; 0x40
 8008c50:	d107      	bne.n	8008c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f838 	bl	8008cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	d10e      	bne.n	8008c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d107      	bne.n	8008c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f06f 0220 	mvn.w	r2, #32
 8008c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f94f 	bl	8008f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a40      	ldr	r2, [pc, #256]	; (8008dfc <TIM_Base_SetConfig+0x114>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d013      	beq.n	8008d28 <TIM_Base_SetConfig+0x40>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d06:	d00f      	beq.n	8008d28 <TIM_Base_SetConfig+0x40>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a3d      	ldr	r2, [pc, #244]	; (8008e00 <TIM_Base_SetConfig+0x118>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00b      	beq.n	8008d28 <TIM_Base_SetConfig+0x40>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a3c      	ldr	r2, [pc, #240]	; (8008e04 <TIM_Base_SetConfig+0x11c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d007      	beq.n	8008d28 <TIM_Base_SetConfig+0x40>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a3b      	ldr	r2, [pc, #236]	; (8008e08 <TIM_Base_SetConfig+0x120>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_Base_SetConfig+0x40>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a3a      	ldr	r2, [pc, #232]	; (8008e0c <TIM_Base_SetConfig+0x124>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d108      	bne.n	8008d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a2f      	ldr	r2, [pc, #188]	; (8008dfc <TIM_Base_SetConfig+0x114>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d01f      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d48:	d01b      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2c      	ldr	r2, [pc, #176]	; (8008e00 <TIM_Base_SetConfig+0x118>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d017      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a2b      	ldr	r2, [pc, #172]	; (8008e04 <TIM_Base_SetConfig+0x11c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d013      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a2a      	ldr	r2, [pc, #168]	; (8008e08 <TIM_Base_SetConfig+0x120>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00f      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a29      	ldr	r2, [pc, #164]	; (8008e0c <TIM_Base_SetConfig+0x124>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00b      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a28      	ldr	r2, [pc, #160]	; (8008e10 <TIM_Base_SetConfig+0x128>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a27      	ldr	r2, [pc, #156]	; (8008e14 <TIM_Base_SetConfig+0x12c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d003      	beq.n	8008d82 <TIM_Base_SetConfig+0x9a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <TIM_Base_SetConfig+0x130>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d108      	bne.n	8008d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a10      	ldr	r2, [pc, #64]	; (8008dfc <TIM_Base_SetConfig+0x114>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00f      	beq.n	8008de0 <TIM_Base_SetConfig+0xf8>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a12      	ldr	r2, [pc, #72]	; (8008e0c <TIM_Base_SetConfig+0x124>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00b      	beq.n	8008de0 <TIM_Base_SetConfig+0xf8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a11      	ldr	r2, [pc, #68]	; (8008e10 <TIM_Base_SetConfig+0x128>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d007      	beq.n	8008de0 <TIM_Base_SetConfig+0xf8>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a10      	ldr	r2, [pc, #64]	; (8008e14 <TIM_Base_SetConfig+0x12c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d003      	beq.n	8008de0 <TIM_Base_SetConfig+0xf8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a0f      	ldr	r2, [pc, #60]	; (8008e18 <TIM_Base_SetConfig+0x130>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d103      	bne.n	8008de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	615a      	str	r2, [r3, #20]
}
 8008dee:	bf00      	nop
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40010000 	.word	0x40010000
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40010400 	.word	0x40010400
 8008e10:	40014000 	.word	0x40014000
 8008e14:	40014400 	.word	0x40014400
 8008e18:	40014800 	.word	0x40014800

08008e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d101      	bne.n	8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e30:	2302      	movs	r3, #2
 8008e32:	e068      	b.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a2e      	ldr	r2, [pc, #184]	; (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a2d      	ldr	r2, [pc, #180]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d108      	bne.n	8008e7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1e      	ldr	r2, [pc, #120]	; (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d01d      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea6:	d018      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d013      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a1a      	ldr	r2, [pc, #104]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00e      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d009      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a13      	ldr	r2, [pc, #76]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d004      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a14      	ldr	r2, [pc, #80]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40000400 	.word	0x40000400
 8008f20:	40000800 	.word	0x40000800
 8008f24:	40000c00 	.word	0x40000c00
 8008f28:	40001800 	.word	0x40001800

08008f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e042      	b.n	8009000 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7f8 fb73 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2224      	movs	r2, #36	; 0x24
 8008f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0201 	bic.w	r2, r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fc3c 	bl	8009828 <UART_SetConfig>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e022      	b.n	8009000 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 fdae 	bl	800bb24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0201 	orr.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f002 fe35 	bl	800bc68 <UART_CheckIdleState>
 8008ffe:	4603      	mov	r3, r0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af02      	add	r7, sp, #8
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800901e:	2b20      	cmp	r3, #32
 8009020:	f040 8083 	bne.w	800912a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <HAL_UART_Transmit+0x28>
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e07b      	b.n	800912c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_UART_Transmit+0x3a>
 800903e:	2302      	movs	r3, #2
 8009040:	e074      	b.n	800912c <HAL_UART_Transmit+0x124>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2221      	movs	r2, #33	; 0x21
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800905a:	f7f8 fe7b 	bl	8001d54 <HAL_GetTick>
 800905e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	88fa      	ldrh	r2, [r7, #6]
 800906c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009078:	d108      	bne.n	800908c <HAL_UART_Transmit+0x84>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	e003      	b.n	8009094 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009094:	e02c      	b.n	80090f0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2200      	movs	r2, #0
 800909e:	2180      	movs	r1, #128	; 0x80
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f002 fe29 	bl	800bcf8 <UART_WaitOnFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e03d      	b.n	800912c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	3302      	adds	r3, #2
 80090ca:	61bb      	str	r3, [r7, #24]
 80090cc:	e007      	b.n	80090de <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3301      	adds	r3, #1
 80090dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1cc      	bne.n	8009096 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2200      	movs	r2, #0
 8009104:	2140      	movs	r1, #64	; 0x40
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f002 fdf6 	bl	800bcf8 <UART_WaitOnFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e00a      	b.n	800912c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2220      	movs	r2, #32
 800911a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e000      	b.n	800912c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800912a:	2302      	movs	r3, #2
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009148:	2b20      	cmp	r3, #32
 800914a:	d168      	bne.n	800921e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_UART_Transmit_IT+0x24>
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e061      	b.n	8009220 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_UART_Transmit_IT+0x36>
 8009166:	2302      	movs	r3, #2
 8009168:	e05a      	b.n	8009220 <HAL_UART_Transmit_IT+0xec>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	88fa      	ldrh	r2, [r7, #6]
 800917c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2221      	movs	r2, #33	; 0x21
 800919a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a6:	d11c      	bne.n	80091e2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b0:	d107      	bne.n	80091c2 <HAL_UART_Transmit_IT+0x8e>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4a1b      	ldr	r2, [pc, #108]	; (800922c <HAL_UART_Transmit_IT+0xf8>)
 80091be:	671a      	str	r2, [r3, #112]	; 0x70
 80091c0:	e002      	b.n	80091c8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4a1a      	ldr	r2, [pc, #104]	; (8009230 <HAL_UART_Transmit_IT+0xfc>)
 80091c6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	e01b      	b.n	800921a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ea:	d107      	bne.n	80091fc <HAL_UART_Transmit_IT+0xc8>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a0f      	ldr	r2, [pc, #60]	; (8009234 <HAL_UART_Transmit_IT+0x100>)
 80091f8:	671a      	str	r2, [r3, #112]	; 0x70
 80091fa:	e002      	b.n	8009202 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4a0e      	ldr	r2, [pc, #56]	; (8009238 <HAL_UART_Transmit_IT+0x104>)
 8009200:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009218:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	e000      	b.n	8009220 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800921e:	2302      	movs	r3, #2
  }
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	0800c137 	.word	0x0800c137
 8009230:	0800c09d 	.word	0x0800c09d
 8009234:	0800c01f 	.word	0x0800c01f
 8009238:	0800bfab 	.word	0x0800bfab

0800923c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009250:	2b20      	cmp	r3, #32
 8009252:	f040 80bc 	bne.w	80093ce <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <HAL_UART_Receive_IT+0x26>
 800925c:	88fb      	ldrh	r3, [r7, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e0b4      	b.n	80093d0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_UART_Receive_IT+0x38>
 8009270:	2302      	movs	r3, #2
 8009272:	e0ad      	b.n	80093d0 <HAL_UART_Receive_IT+0x194>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	88fa      	ldrh	r2, [r7, #6]
 8009286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	88fa      	ldrh	r2, [r7, #6]
 800928e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a0:	d10e      	bne.n	80092c0 <HAL_UART_Receive_IT+0x84>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <HAL_UART_Receive_IT+0x7a>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092b4:	e02d      	b.n	8009312 <HAL_UART_Receive_IT+0xd6>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	22ff      	movs	r2, #255	; 0xff
 80092ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092be:	e028      	b.n	8009312 <HAL_UART_Receive_IT+0xd6>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10d      	bne.n	80092e4 <HAL_UART_Receive_IT+0xa8>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d104      	bne.n	80092da <HAL_UART_Receive_IT+0x9e>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	22ff      	movs	r2, #255	; 0xff
 80092d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092d8:	e01b      	b.n	8009312 <HAL_UART_Receive_IT+0xd6>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	227f      	movs	r2, #127	; 0x7f
 80092de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092e2:	e016      	b.n	8009312 <HAL_UART_Receive_IT+0xd6>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092ec:	d10d      	bne.n	800930a <HAL_UART_Receive_IT+0xce>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d104      	bne.n	8009300 <HAL_UART_Receive_IT+0xc4>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	227f      	movs	r2, #127	; 0x7f
 80092fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092fe:	e008      	b.n	8009312 <HAL_UART_Receive_IT+0xd6>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	223f      	movs	r2, #63	; 0x3f
 8009304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009308:	e003      	b.n	8009312 <HAL_UART_Receive_IT+0xd6>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2222      	movs	r2, #34	; 0x22
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0201 	orr.w	r2, r2, #1
 8009330:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800933a:	d12a      	bne.n	8009392 <HAL_UART_Receive_IT+0x156>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	429a      	cmp	r2, r3
 8009346:	d324      	bcc.n	8009392 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009350:	d107      	bne.n	8009362 <HAL_UART_Receive_IT+0x126>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d103      	bne.n	8009362 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4a1f      	ldr	r2, [pc, #124]	; (80093dc <HAL_UART_Receive_IT+0x1a0>)
 800935e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009360:	e002      	b.n	8009368 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a1e      	ldr	r2, [pc, #120]	; (80093e0 <HAL_UART_Receive_IT+0x1a4>)
 8009366:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800937e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800938e:	609a      	str	r2, [r3, #8]
 8009390:	e01b      	b.n	80093ca <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939a:	d107      	bne.n	80093ac <HAL_UART_Receive_IT+0x170>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d103      	bne.n	80093ac <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4a0f      	ldr	r2, [pc, #60]	; (80093e4 <HAL_UART_Receive_IT+0x1a8>)
 80093a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80093aa:	e002      	b.n	80093b2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4a0e      	ldr	r2, [pc, #56]	; (80093e8 <HAL_UART_Receive_IT+0x1ac>)
 80093b0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80093c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e000      	b.n	80093d0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80093ce:	2302      	movs	r3, #2
  }
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	0800c46d 	.word	0x0800c46d
 80093e0:	0800c365 	.word	0x0800c365
 80093e4:	0800c2b9 	.word	0x0800c2b9
 80093e8:	0800c20f 	.word	0x0800c20f

080093ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009400:	2b20      	cmp	r3, #32
 8009402:	d170      	bne.n	80094e6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <HAL_UART_Receive_DMA+0x24>
 800940a:	88fb      	ldrh	r3, [r7, #6]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e069      	b.n	80094e8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <HAL_UART_Receive_DMA+0x36>
 800941e:	2302      	movs	r3, #2
 8009420:	e062      	b.n	80094e8 <HAL_UART_Receive_DMA+0xfc>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	88fa      	ldrh	r2, [r7, #6]
 8009434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2222      	movs	r2, #34	; 0x22
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02c      	beq.n	80094aa <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009454:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <HAL_UART_Receive_DMA+0x104>)
 8009456:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800945c:	4a25      	ldr	r2, [pc, #148]	; (80094f4 <HAL_UART_Receive_DMA+0x108>)
 800945e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009464:	4a24      	ldr	r2, [pc, #144]	; (80094f8 <HAL_UART_Receive_DMA+0x10c>)
 8009466:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800946c:	2200      	movs	r2, #0
 800946e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3324      	adds	r3, #36	; 0x24
 800947a:	4619      	mov	r1, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009480:	461a      	mov	r2, r3
 8009482:	88fb      	ldrh	r3, [r7, #6]
 8009484:	f7fa faa4 	bl	80039d0 <HAL_DMA_Start_IT>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00d      	beq.n	80094aa <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2210      	movs	r2, #16
 8009492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e01e      	b.n	80094e8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094c0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0201 	orr.w	r2, r2, #1
 80094d0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094e0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e000      	b.n	80094e8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80094e6:	2302      	movs	r3, #2
  }
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	0800be7d 	.word	0x0800be7d
 80094f4:	0800bee3 	.word	0x0800bee3
 80094f8:	0800beff 	.word	0x0800beff

080094fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800951c:	69fa      	ldr	r2, [r7, #28]
 800951e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009522:	4013      	ands	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d118      	bne.n	800955e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d013      	beq.n	800955e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d009      	beq.n	800955e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 8145 	beq.w	80097de <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	4798      	blx	r3
      }
      return;
 800955c:	e13f      	b.n	80097de <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 80e8 	beq.w	8009736 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	4ba1      	ldr	r3, [pc, #644]	; (80097f0 <HAL_UART_IRQHandler+0x2f4>)
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d105      	bne.n	800957c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	4ba0      	ldr	r3, [pc, #640]	; (80097f4 <HAL_UART_IRQHandler+0x2f8>)
 8009574:	4013      	ands	r3, r2
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 80dd 	beq.w	8009736 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d010      	beq.n	80095a8 <HAL_UART_IRQHandler+0xac>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2201      	movs	r2, #1
 8009596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800959e:	f043 0201 	orr.w	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d010      	beq.n	80095d4 <HAL_UART_IRQHandler+0xd8>
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2202      	movs	r2, #2
 80095c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ca:	f043 0204 	orr.w	r2, r3, #4
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d010      	beq.n	8009600 <HAL_UART_IRQHandler+0x104>
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2204      	movs	r2, #4
 80095ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f6:	f043 0202 	orr.w	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d015      	beq.n	8009636 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	4b76      	ldr	r3, [pc, #472]	; (80097f0 <HAL_UART_IRQHandler+0x2f4>)
 8009618:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00b      	beq.n	8009636 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2208      	movs	r2, #8
 8009624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962c:	f043 0208 	orr.w	r2, r3, #8
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800963c:	2b00      	cmp	r3, #0
 800963e:	d011      	beq.n	8009664 <HAL_UART_IRQHandler+0x168>
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965a:	f043 0220 	orr.w	r2, r3, #32
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 80b9 	beq.w	80097e2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d011      	beq.n	800969e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b0:	2b40      	cmp	r3, #64	; 0x40
 80096b2:	d004      	beq.n	80096be <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d031      	beq.n	8009722 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f002 fbb8 	bl	800be34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d123      	bne.n	800971a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d013      	beq.n	8009712 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ee:	4a42      	ldr	r2, [pc, #264]	; (80097f8 <HAL_UART_IRQHandler+0x2fc>)
 80096f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fa fbd4 	bl	8003ea4 <HAL_DMA_Abort_IT>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d017      	beq.n	8009732 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009710:	e00f      	b.n	8009732 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f87c 	bl	8009810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	e00b      	b.n	8009732 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f878 	bl	8009810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	e007      	b.n	8009732 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f874 	bl	8009810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009730:	e057      	b.n	80097e2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009732:	bf00      	nop
    return;
 8009734:	e055      	b.n	80097e2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00d      	beq.n	800975c <HAL_UART_IRQHandler+0x260>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d008      	beq.n	800975c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f002 ff0d 	bl	800c574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800975a:	e045      	b.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009762:	2b00      	cmp	r3, #0
 8009764:	d012      	beq.n	800978c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d008      	beq.n	800978c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977e:	2b00      	cmp	r3, #0
 8009780:	d031      	beq.n	80097e6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
    }
    return;
 800978a:	e02c      	b.n	80097e6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d008      	beq.n	80097a8 <HAL_UART_IRQHandler+0x2ac>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f002 fd1a 	bl	800c1da <UART_EndTransmit_IT>
    return;
 80097a6:	e01f      	b.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d008      	beq.n	80097c4 <HAL_UART_IRQHandler+0x2c8>
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f002 feed 	bl	800c59c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097c2:	e011      	b.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da09      	bge.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 fed7 	bl	800c588 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097da:	bf00      	nop
 80097dc:	e004      	b.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80097de:	bf00      	nop
 80097e0:	e002      	b.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80097e6:	bf00      	nop
  }
}
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	10000001 	.word	0x10000001
 80097f4:	04000120 	.word	0x04000120
 80097f8:	0800bf7f 	.word	0x0800bf7f

080097fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	0000      	movs	r0, r0
	...

08009828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009828:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800982c:	b090      	sub	sp, #64	; 0x40
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009832:	2300      	movs	r3, #0
 8009834:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800983c:	2300      	movs	r3, #0
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	4313      	orrs	r3, r2
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800985c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800985e:	4313      	orrs	r3, r2
 8009860:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4bc1      	ldr	r3, [pc, #772]	; (8009b70 <UART_SetConfig+0x348>)
 800986a:	4013      	ands	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009872:	430b      	orrs	r3, r1
 8009874:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4ab7      	ldr	r2, [pc, #732]	; (8009b74 <UART_SetConfig+0x34c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d004      	beq.n	80098a6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098a2:	4313      	orrs	r3, r2
 80098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	4bb2      	ldr	r3, [pc, #712]	; (8009b78 <UART_SetConfig+0x350>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098b6:	430b      	orrs	r3, r1
 80098b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	f023 010f 	bic.w	r1, r3, #15
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4aa9      	ldr	r2, [pc, #676]	; (8009b7c <UART_SetConfig+0x354>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d177      	bne.n	80099ca <UART_SetConfig+0x1a2>
 80098da:	4ba9      	ldr	r3, [pc, #676]	; (8009b80 <UART_SetConfig+0x358>)
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e2:	2b28      	cmp	r3, #40	; 0x28
 80098e4:	d86c      	bhi.n	80099c0 <UART_SetConfig+0x198>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0xc4>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009991 	.word	0x08009991
 80098f0:	080099c1 	.word	0x080099c1
 80098f4:	080099c1 	.word	0x080099c1
 80098f8:	080099c1 	.word	0x080099c1
 80098fc:	080099c1 	.word	0x080099c1
 8009900:	080099c1 	.word	0x080099c1
 8009904:	080099c1 	.word	0x080099c1
 8009908:	080099c1 	.word	0x080099c1
 800990c:	08009999 	.word	0x08009999
 8009910:	080099c1 	.word	0x080099c1
 8009914:	080099c1 	.word	0x080099c1
 8009918:	080099c1 	.word	0x080099c1
 800991c:	080099c1 	.word	0x080099c1
 8009920:	080099c1 	.word	0x080099c1
 8009924:	080099c1 	.word	0x080099c1
 8009928:	080099c1 	.word	0x080099c1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099c1 	.word	0x080099c1
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099c1 	.word	0x080099c1
 800993c:	080099c1 	.word	0x080099c1
 8009940:	080099c1 	.word	0x080099c1
 8009944:	080099c1 	.word	0x080099c1
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099c1 	.word	0x080099c1
 8009954:	080099c1 	.word	0x080099c1
 8009958:	080099c1 	.word	0x080099c1
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099b1 	.word	0x080099b1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099c1 	.word	0x080099c1
 8009984:	080099c1 	.word	0x080099c1
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2301      	movs	r3, #1
 8009992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009996:	e233      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800999e:	e22f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099a6:	e22b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ae:	e227      	b.n	8009e00 <UART_SetConfig+0x5d8>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099b6:	e223      	b.n	8009e00 <UART_SetConfig+0x5d8>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e21f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	bf00      	nop
 80099c8:	e21a      	b.n	8009e00 <UART_SetConfig+0x5d8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a6d      	ldr	r2, [pc, #436]	; (8009b84 <UART_SetConfig+0x35c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d132      	bne.n	8009a3a <UART_SetConfig+0x212>
 80099d4:	4b6a      	ldr	r3, [pc, #424]	; (8009b80 <UART_SetConfig+0x358>)
 80099d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	2b05      	cmp	r3, #5
 80099de:	d827      	bhi.n	8009a30 <UART_SetConfig+0x208>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0x1c0>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a11 	.word	0x08009a11
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a06:	e1fb      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a0e:	e1f7      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a16:	e1f3      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a1e:	e1ef      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a20:	2320      	movs	r3, #32
 8009a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a26:	e1eb      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e1e7      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	bf00      	nop
 8009a38:	e1e2      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a52      	ldr	r2, [pc, #328]	; (8009b88 <UART_SetConfig+0x360>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d132      	bne.n	8009aaa <UART_SetConfig+0x282>
 8009a44:	4b4e      	ldr	r3, [pc, #312]	; (8009b80 <UART_SetConfig+0x358>)
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d827      	bhi.n	8009aa0 <UART_SetConfig+0x278>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0x230>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a81 	.word	0x08009a81
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a76:	e1c3      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a7e:	e1bf      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a86:	e1bb      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a8e:	e1b7      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a96:	e1b3      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	e1af      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aa6:	bf00      	nop
 8009aa8:	e1aa      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a37      	ldr	r2, [pc, #220]	; (8009b8c <UART_SetConfig+0x364>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d132      	bne.n	8009b1a <UART_SetConfig+0x2f2>
 8009ab4:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <UART_SetConfig+0x358>)
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	2b05      	cmp	r3, #5
 8009abe:	d827      	bhi.n	8009b10 <UART_SetConfig+0x2e8>
 8009ac0:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <UART_SetConfig+0x2a0>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009ae1 	.word	0x08009ae1
 8009acc:	08009ae9 	.word	0x08009ae9
 8009ad0:	08009af1 	.word	0x08009af1
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ae6:	e18b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009ae8:	2304      	movs	r3, #4
 8009aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aee:	e187      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009af0:	2308      	movs	r3, #8
 8009af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009af6:	e183      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009af8:	2310      	movs	r3, #16
 8009afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009afe:	e17f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b00:	2320      	movs	r3, #32
 8009b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b06:	e17b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b08:	2340      	movs	r3, #64	; 0x40
 8009b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b0e:	e177      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b10:	2380      	movs	r3, #128	; 0x80
 8009b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b16:	bf00      	nop
 8009b18:	e172      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a1c      	ldr	r2, [pc, #112]	; (8009b90 <UART_SetConfig+0x368>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d144      	bne.n	8009bae <UART_SetConfig+0x386>
 8009b24:	4b16      	ldr	r3, [pc, #88]	; (8009b80 <UART_SetConfig+0x358>)
 8009b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	2b05      	cmp	r3, #5
 8009b2e:	d839      	bhi.n	8009ba4 <UART_SetConfig+0x37c>
 8009b30:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x310>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b95 	.word	0x08009b95
 8009b4c:	08009b9d 	.word	0x08009b9d
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b56:	e153      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b5e:	e14f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b66:	e14b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b6e:	e147      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b70:	cfff69f3 	.word	0xcfff69f3
 8009b74:	58000c00 	.word	0x58000c00
 8009b78:	11fff4ff 	.word	0x11fff4ff
 8009b7c:	40011000 	.word	0x40011000
 8009b80:	58024400 	.word	0x58024400
 8009b84:	40004400 	.word	0x40004400
 8009b88:	40004800 	.word	0x40004800
 8009b8c:	40004c00 	.word	0x40004c00
 8009b90:	40005000 	.word	0x40005000
 8009b94:	2320      	movs	r3, #32
 8009b96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b9a:	e131      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009b9c:	2340      	movs	r3, #64	; 0x40
 8009b9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ba2:	e12d      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009ba4:	2380      	movs	r3, #128	; 0x80
 8009ba6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009baa:	bf00      	nop
 8009bac:	e128      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4ac3      	ldr	r2, [pc, #780]	; (8009ec0 <UART_SetConfig+0x698>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d178      	bne.n	8009caa <UART_SetConfig+0x482>
 8009bb8:	4bc2      	ldr	r3, [pc, #776]	; (8009ec4 <UART_SetConfig+0x69c>)
 8009bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc0:	2b28      	cmp	r3, #40	; 0x28
 8009bc2:	d86d      	bhi.n	8009ca0 <UART_SetConfig+0x478>
 8009bc4:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0x3a4>)
 8009bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bca:	bf00      	nop
 8009bcc:	08009c71 	.word	0x08009c71
 8009bd0:	08009ca1 	.word	0x08009ca1
 8009bd4:	08009ca1 	.word	0x08009ca1
 8009bd8:	08009ca1 	.word	0x08009ca1
 8009bdc:	08009ca1 	.word	0x08009ca1
 8009be0:	08009ca1 	.word	0x08009ca1
 8009be4:	08009ca1 	.word	0x08009ca1
 8009be8:	08009ca1 	.word	0x08009ca1
 8009bec:	08009c79 	.word	0x08009c79
 8009bf0:	08009ca1 	.word	0x08009ca1
 8009bf4:	08009ca1 	.word	0x08009ca1
 8009bf8:	08009ca1 	.word	0x08009ca1
 8009bfc:	08009ca1 	.word	0x08009ca1
 8009c00:	08009ca1 	.word	0x08009ca1
 8009c04:	08009ca1 	.word	0x08009ca1
 8009c08:	08009ca1 	.word	0x08009ca1
 8009c0c:	08009c81 	.word	0x08009c81
 8009c10:	08009ca1 	.word	0x08009ca1
 8009c14:	08009ca1 	.word	0x08009ca1
 8009c18:	08009ca1 	.word	0x08009ca1
 8009c1c:	08009ca1 	.word	0x08009ca1
 8009c20:	08009ca1 	.word	0x08009ca1
 8009c24:	08009ca1 	.word	0x08009ca1
 8009c28:	08009ca1 	.word	0x08009ca1
 8009c2c:	08009c89 	.word	0x08009c89
 8009c30:	08009ca1 	.word	0x08009ca1
 8009c34:	08009ca1 	.word	0x08009ca1
 8009c38:	08009ca1 	.word	0x08009ca1
 8009c3c:	08009ca1 	.word	0x08009ca1
 8009c40:	08009ca1 	.word	0x08009ca1
 8009c44:	08009ca1 	.word	0x08009ca1
 8009c48:	08009ca1 	.word	0x08009ca1
 8009c4c:	08009c91 	.word	0x08009c91
 8009c50:	08009ca1 	.word	0x08009ca1
 8009c54:	08009ca1 	.word	0x08009ca1
 8009c58:	08009ca1 	.word	0x08009ca1
 8009c5c:	08009ca1 	.word	0x08009ca1
 8009c60:	08009ca1 	.word	0x08009ca1
 8009c64:	08009ca1 	.word	0x08009ca1
 8009c68:	08009ca1 	.word	0x08009ca1
 8009c6c:	08009c99 	.word	0x08009c99
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c76:	e0c3      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c7e:	e0bf      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009c80:	2308      	movs	r3, #8
 8009c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c86:	e0bb      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c8e:	e0b7      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009c90:	2320      	movs	r3, #32
 8009c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c96:	e0b3      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009c98:	2340      	movs	r3, #64	; 0x40
 8009c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9e:	e0af      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009ca0:	2380      	movs	r3, #128	; 0x80
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca6:	bf00      	nop
 8009ca8:	e0aa      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a86      	ldr	r2, [pc, #536]	; (8009ec8 <UART_SetConfig+0x6a0>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d132      	bne.n	8009d1a <UART_SetConfig+0x4f2>
 8009cb4:	4b83      	ldr	r3, [pc, #524]	; (8009ec4 <UART_SetConfig+0x69c>)
 8009cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	2b05      	cmp	r3, #5
 8009cbe:	d827      	bhi.n	8009d10 <UART_SetConfig+0x4e8>
 8009cc0:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <UART_SetConfig+0x4a0>)
 8009cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc6:	bf00      	nop
 8009cc8:	08009ce1 	.word	0x08009ce1
 8009ccc:	08009ce9 	.word	0x08009ce9
 8009cd0:	08009cf1 	.word	0x08009cf1
 8009cd4:	08009cf9 	.word	0x08009cf9
 8009cd8:	08009d01 	.word	0x08009d01
 8009cdc:	08009d09 	.word	0x08009d09
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ce6:	e08b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009ce8:	2304      	movs	r3, #4
 8009cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cee:	e087      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cf6:	e083      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cfe:	e07f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d00:	2320      	movs	r3, #32
 8009d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d06:	e07b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d08:	2340      	movs	r3, #64	; 0x40
 8009d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d0e:	e077      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d10:	2380      	movs	r3, #128	; 0x80
 8009d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d16:	bf00      	nop
 8009d18:	e072      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a6b      	ldr	r2, [pc, #428]	; (8009ecc <UART_SetConfig+0x6a4>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d132      	bne.n	8009d8a <UART_SetConfig+0x562>
 8009d24:	4b67      	ldr	r3, [pc, #412]	; (8009ec4 <UART_SetConfig+0x69c>)
 8009d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	2b05      	cmp	r3, #5
 8009d2e:	d827      	bhi.n	8009d80 <UART_SetConfig+0x558>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0x510>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d51 	.word	0x08009d51
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009d69 	.word	0x08009d69
 8009d48:	08009d71 	.word	0x08009d71
 8009d4c:	08009d79 	.word	0x08009d79
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d56:	e053      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d58:	2304      	movs	r3, #4
 8009d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d5e:	e04f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d60:	2308      	movs	r3, #8
 8009d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d66:	e04b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d68:	2310      	movs	r3, #16
 8009d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d6e:	e047      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d70:	2320      	movs	r3, #32
 8009d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d76:	e043      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d7e:	e03f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d86:	bf00      	nop
 8009d88:	e03a      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a50      	ldr	r2, [pc, #320]	; (8009ed0 <UART_SetConfig+0x6a8>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d132      	bne.n	8009dfa <UART_SetConfig+0x5d2>
 8009d94:	4b4b      	ldr	r3, [pc, #300]	; (8009ec4 <UART_SetConfig+0x69c>)
 8009d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d98:	f003 0307 	and.w	r3, r3, #7
 8009d9c:	2b05      	cmp	r3, #5
 8009d9e:	d827      	bhi.n	8009df0 <UART_SetConfig+0x5c8>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <UART_SetConfig+0x580>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009dc1 	.word	0x08009dc1
 8009dac:	08009dc9 	.word	0x08009dc9
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009dd9 	.word	0x08009dd9
 8009db8:	08009de1 	.word	0x08009de1
 8009dbc:	08009de9 	.word	0x08009de9
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	e01b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dce:	e017      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dd6:	e013      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dde:	e00f      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009de0:	2320      	movs	r3, #32
 8009de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009de6:	e00b      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009de8:	2340      	movs	r3, #64	; 0x40
 8009dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dee:	e007      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009df0:	2380      	movs	r3, #128	; 0x80
 8009df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009df6:	bf00      	nop
 8009df8:	e002      	b.n	8009e00 <UART_SetConfig+0x5d8>
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a32      	ldr	r2, [pc, #200]	; (8009ed0 <UART_SetConfig+0x6a8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	f040 86f7 	bne.w	800abfa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	f000 80c0 	beq.w	8009f96 <UART_SetConfig+0x76e>
 8009e16:	2b08      	cmp	r3, #8
 8009e18:	dc04      	bgt.n	8009e24 <UART_SetConfig+0x5fc>
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d00c      	beq.n	8009e38 <UART_SetConfig+0x610>
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d065      	beq.n	8009eee <UART_SetConfig+0x6c6>
 8009e22:	e27a      	b.n	800a31a <UART_SetConfig+0xaf2>
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	f000 81b0 	beq.w	800a18a <UART_SetConfig+0x962>
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	f000 821e 	beq.w	800a26c <UART_SetConfig+0xa44>
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	f000 8104 	beq.w	800a03e <UART_SetConfig+0x816>
 8009e36:	e270      	b.n	800a31a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e38:	f7fe f85a 	bl	8007ef0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d04e      	beq.n	8009ee4 <UART_SetConfig+0x6bc>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d048      	beq.n	8009ee0 <UART_SetConfig+0x6b8>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d042      	beq.n	8009edc <UART_SetConfig+0x6b4>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d03c      	beq.n	8009ed8 <UART_SetConfig+0x6b0>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d036      	beq.n	8009ed4 <UART_SetConfig+0x6ac>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d026      	beq.n	8009ebc <UART_SetConfig+0x694>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	2b06      	cmp	r3, #6
 8009e74:	d020      	beq.n	8009eb8 <UART_SetConfig+0x690>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b07      	cmp	r3, #7
 8009e7c:	d01a      	beq.n	8009eb4 <UART_SetConfig+0x68c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b08      	cmp	r3, #8
 8009e84:	d014      	beq.n	8009eb0 <UART_SetConfig+0x688>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b09      	cmp	r3, #9
 8009e8c:	d00e      	beq.n	8009eac <UART_SetConfig+0x684>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b0a      	cmp	r3, #10
 8009e94:	d008      	beq.n	8009ea8 <UART_SetConfig+0x680>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b0b      	cmp	r3, #11
 8009e9c:	d102      	bne.n	8009ea4 <UART_SetConfig+0x67c>
 8009e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea2:	e020      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e01e      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ea8:	2380      	movs	r3, #128	; 0x80
 8009eaa:	e01c      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	e01a      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	e018      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	e016      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009eb8:	230c      	movs	r3, #12
 8009eba:	e014      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ebc:	230a      	movs	r3, #10
 8009ebe:	e012      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ec0:	40011400 	.word	0x40011400
 8009ec4:	58024400 	.word	0x58024400
 8009ec8:	40007800 	.word	0x40007800
 8009ecc:	40007c00 	.word	0x40007c00
 8009ed0:	58000c00 	.word	0x58000c00
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	e006      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ed8:	2306      	movs	r3, #6
 8009eda:	e004      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009edc:	2304      	movs	r3, #4
 8009ede:	e002      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e000      	b.n	8009ee6 <UART_SetConfig+0x6be>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eec:	e219      	b.n	800a322 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eee:	f107 0318 	add.w	r3, r7, #24
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe f812 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ef8:	69fa      	ldr	r2, [r7, #28]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d044      	beq.n	8009f8c <UART_SetConfig+0x764>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d03e      	beq.n	8009f88 <UART_SetConfig+0x760>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d038      	beq.n	8009f84 <UART_SetConfig+0x75c>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d032      	beq.n	8009f80 <UART_SetConfig+0x758>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d02c      	beq.n	8009f7c <UART_SetConfig+0x754>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	d026      	beq.n	8009f78 <UART_SetConfig+0x750>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b06      	cmp	r3, #6
 8009f30:	d020      	beq.n	8009f74 <UART_SetConfig+0x74c>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b07      	cmp	r3, #7
 8009f38:	d01a      	beq.n	8009f70 <UART_SetConfig+0x748>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	d014      	beq.n	8009f6c <UART_SetConfig+0x744>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b09      	cmp	r3, #9
 8009f48:	d00e      	beq.n	8009f68 <UART_SetConfig+0x740>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b0a      	cmp	r3, #10
 8009f50:	d008      	beq.n	8009f64 <UART_SetConfig+0x73c>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b0b      	cmp	r3, #11
 8009f58:	d102      	bne.n	8009f60 <UART_SetConfig+0x738>
 8009f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f5e:	e016      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f60:	2301      	movs	r3, #1
 8009f62:	e014      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f64:	2380      	movs	r3, #128	; 0x80
 8009f66:	e012      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f68:	2340      	movs	r3, #64	; 0x40
 8009f6a:	e010      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f6c:	2320      	movs	r3, #32
 8009f6e:	e00e      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f70:	2310      	movs	r3, #16
 8009f72:	e00c      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f74:	230c      	movs	r3, #12
 8009f76:	e00a      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f78:	230a      	movs	r3, #10
 8009f7a:	e008      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	e006      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f80:	2306      	movs	r3, #6
 8009f82:	e004      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f84:	2304      	movs	r3, #4
 8009f86:	e002      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e000      	b.n	8009f8e <UART_SetConfig+0x766>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f94:	e1c5      	b.n	800a322 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f96:	f107 030c 	add.w	r3, r7, #12
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe f90a 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d044      	beq.n	800a034 <UART_SetConfig+0x80c>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d03e      	beq.n	800a030 <UART_SetConfig+0x808>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d038      	beq.n	800a02c <UART_SetConfig+0x804>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d032      	beq.n	800a028 <UART_SetConfig+0x800>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b04      	cmp	r3, #4
 8009fc8:	d02c      	beq.n	800a024 <UART_SetConfig+0x7fc>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	d026      	beq.n	800a020 <UART_SetConfig+0x7f8>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b06      	cmp	r3, #6
 8009fd8:	d020      	beq.n	800a01c <UART_SetConfig+0x7f4>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b07      	cmp	r3, #7
 8009fe0:	d01a      	beq.n	800a018 <UART_SetConfig+0x7f0>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d014      	beq.n	800a014 <UART_SetConfig+0x7ec>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b09      	cmp	r3, #9
 8009ff0:	d00e      	beq.n	800a010 <UART_SetConfig+0x7e8>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b0a      	cmp	r3, #10
 8009ff8:	d008      	beq.n	800a00c <UART_SetConfig+0x7e4>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b0b      	cmp	r3, #11
 800a000:	d102      	bne.n	800a008 <UART_SetConfig+0x7e0>
 800a002:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a006:	e016      	b.n	800a036 <UART_SetConfig+0x80e>
 800a008:	2301      	movs	r3, #1
 800a00a:	e014      	b.n	800a036 <UART_SetConfig+0x80e>
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	e012      	b.n	800a036 <UART_SetConfig+0x80e>
 800a010:	2340      	movs	r3, #64	; 0x40
 800a012:	e010      	b.n	800a036 <UART_SetConfig+0x80e>
 800a014:	2320      	movs	r3, #32
 800a016:	e00e      	b.n	800a036 <UART_SetConfig+0x80e>
 800a018:	2310      	movs	r3, #16
 800a01a:	e00c      	b.n	800a036 <UART_SetConfig+0x80e>
 800a01c:	230c      	movs	r3, #12
 800a01e:	e00a      	b.n	800a036 <UART_SetConfig+0x80e>
 800a020:	230a      	movs	r3, #10
 800a022:	e008      	b.n	800a036 <UART_SetConfig+0x80e>
 800a024:	2308      	movs	r3, #8
 800a026:	e006      	b.n	800a036 <UART_SetConfig+0x80e>
 800a028:	2306      	movs	r3, #6
 800a02a:	e004      	b.n	800a036 <UART_SetConfig+0x80e>
 800a02c:	2304      	movs	r3, #4
 800a02e:	e002      	b.n	800a036 <UART_SetConfig+0x80e>
 800a030:	2302      	movs	r3, #2
 800a032:	e000      	b.n	800a036 <UART_SetConfig+0x80e>
 800a034:	2301      	movs	r3, #1
 800a036:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03c:	e171      	b.n	800a322 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a03e:	4b7a      	ldr	r3, [pc, #488]	; (800a228 <UART_SetConfig+0xa00>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d054      	beq.n	800a0f4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a04a:	4b77      	ldr	r3, [pc, #476]	; (800a228 <UART_SetConfig+0xa00>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	08db      	lsrs	r3, r3, #3
 800a050:	f003 0303 	and.w	r3, r3, #3
 800a054:	4a75      	ldr	r2, [pc, #468]	; (800a22c <UART_SetConfig+0xa04>)
 800a056:	40da      	lsrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d044      	beq.n	800a0ea <UART_SetConfig+0x8c2>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b01      	cmp	r3, #1
 800a066:	d03e      	beq.n	800a0e6 <UART_SetConfig+0x8be>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d038      	beq.n	800a0e2 <UART_SetConfig+0x8ba>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2b03      	cmp	r3, #3
 800a076:	d032      	beq.n	800a0de <UART_SetConfig+0x8b6>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d02c      	beq.n	800a0da <UART_SetConfig+0x8b2>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b05      	cmp	r3, #5
 800a086:	d026      	beq.n	800a0d6 <UART_SetConfig+0x8ae>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b06      	cmp	r3, #6
 800a08e:	d020      	beq.n	800a0d2 <UART_SetConfig+0x8aa>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b07      	cmp	r3, #7
 800a096:	d01a      	beq.n	800a0ce <UART_SetConfig+0x8a6>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d014      	beq.n	800a0ca <UART_SetConfig+0x8a2>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b09      	cmp	r3, #9
 800a0a6:	d00e      	beq.n	800a0c6 <UART_SetConfig+0x89e>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b0a      	cmp	r3, #10
 800a0ae:	d008      	beq.n	800a0c2 <UART_SetConfig+0x89a>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2b0b      	cmp	r3, #11
 800a0b6:	d102      	bne.n	800a0be <UART_SetConfig+0x896>
 800a0b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0bc:	e016      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e014      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0c2:	2380      	movs	r3, #128	; 0x80
 800a0c4:	e012      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0c6:	2340      	movs	r3, #64	; 0x40
 800a0c8:	e010      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0ca:	2320      	movs	r3, #32
 800a0cc:	e00e      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0ce:	2310      	movs	r3, #16
 800a0d0:	e00c      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	e00a      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0d6:	230a      	movs	r3, #10
 800a0d8:	e008      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0da:	2308      	movs	r3, #8
 800a0dc:	e006      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0de:	2306      	movs	r3, #6
 800a0e0:	e004      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	e002      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e000      	b.n	800a0ec <UART_SetConfig+0x8c4>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a0f2:	e116      	b.n	800a322 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d043      	beq.n	800a184 <UART_SetConfig+0x95c>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	2b01      	cmp	r3, #1
 800a102:	d03d      	beq.n	800a180 <UART_SetConfig+0x958>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d037      	beq.n	800a17c <UART_SetConfig+0x954>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b03      	cmp	r3, #3
 800a112:	d031      	beq.n	800a178 <UART_SetConfig+0x950>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d02b      	beq.n	800a174 <UART_SetConfig+0x94c>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b05      	cmp	r3, #5
 800a122:	d025      	beq.n	800a170 <UART_SetConfig+0x948>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b06      	cmp	r3, #6
 800a12a:	d01f      	beq.n	800a16c <UART_SetConfig+0x944>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b07      	cmp	r3, #7
 800a132:	d019      	beq.n	800a168 <UART_SetConfig+0x940>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b08      	cmp	r3, #8
 800a13a:	d013      	beq.n	800a164 <UART_SetConfig+0x93c>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b09      	cmp	r3, #9
 800a142:	d00d      	beq.n	800a160 <UART_SetConfig+0x938>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b0a      	cmp	r3, #10
 800a14a:	d007      	beq.n	800a15c <UART_SetConfig+0x934>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b0b      	cmp	r3, #11
 800a152:	d101      	bne.n	800a158 <UART_SetConfig+0x930>
 800a154:	4b36      	ldr	r3, [pc, #216]	; (800a230 <UART_SetConfig+0xa08>)
 800a156:	e016      	b.n	800a186 <UART_SetConfig+0x95e>
 800a158:	4b34      	ldr	r3, [pc, #208]	; (800a22c <UART_SetConfig+0xa04>)
 800a15a:	e014      	b.n	800a186 <UART_SetConfig+0x95e>
 800a15c:	4b35      	ldr	r3, [pc, #212]	; (800a234 <UART_SetConfig+0xa0c>)
 800a15e:	e012      	b.n	800a186 <UART_SetConfig+0x95e>
 800a160:	4b35      	ldr	r3, [pc, #212]	; (800a238 <UART_SetConfig+0xa10>)
 800a162:	e010      	b.n	800a186 <UART_SetConfig+0x95e>
 800a164:	4b35      	ldr	r3, [pc, #212]	; (800a23c <UART_SetConfig+0xa14>)
 800a166:	e00e      	b.n	800a186 <UART_SetConfig+0x95e>
 800a168:	4b35      	ldr	r3, [pc, #212]	; (800a240 <UART_SetConfig+0xa18>)
 800a16a:	e00c      	b.n	800a186 <UART_SetConfig+0x95e>
 800a16c:	4b35      	ldr	r3, [pc, #212]	; (800a244 <UART_SetConfig+0xa1c>)
 800a16e:	e00a      	b.n	800a186 <UART_SetConfig+0x95e>
 800a170:	4b35      	ldr	r3, [pc, #212]	; (800a248 <UART_SetConfig+0xa20>)
 800a172:	e008      	b.n	800a186 <UART_SetConfig+0x95e>
 800a174:	4b35      	ldr	r3, [pc, #212]	; (800a24c <UART_SetConfig+0xa24>)
 800a176:	e006      	b.n	800a186 <UART_SetConfig+0x95e>
 800a178:	4b35      	ldr	r3, [pc, #212]	; (800a250 <UART_SetConfig+0xa28>)
 800a17a:	e004      	b.n	800a186 <UART_SetConfig+0x95e>
 800a17c:	4b35      	ldr	r3, [pc, #212]	; (800a254 <UART_SetConfig+0xa2c>)
 800a17e:	e002      	b.n	800a186 <UART_SetConfig+0x95e>
 800a180:	4b35      	ldr	r3, [pc, #212]	; (800a258 <UART_SetConfig+0xa30>)
 800a182:	e000      	b.n	800a186 <UART_SetConfig+0x95e>
 800a184:	4b29      	ldr	r3, [pc, #164]	; (800a22c <UART_SetConfig+0xa04>)
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a188:	e0cb      	b.n	800a322 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d046      	beq.n	800a220 <UART_SetConfig+0x9f8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b01      	cmp	r3, #1
 800a198:	d040      	beq.n	800a21c <UART_SetConfig+0x9f4>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d03a      	beq.n	800a218 <UART_SetConfig+0x9f0>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d034      	beq.n	800a214 <UART_SetConfig+0x9ec>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d02e      	beq.n	800a210 <UART_SetConfig+0x9e8>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d028      	beq.n	800a20c <UART_SetConfig+0x9e4>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b06      	cmp	r3, #6
 800a1c0:	d022      	beq.n	800a208 <UART_SetConfig+0x9e0>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	d01c      	beq.n	800a204 <UART_SetConfig+0x9dc>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b08      	cmp	r3, #8
 800a1d0:	d016      	beq.n	800a200 <UART_SetConfig+0x9d8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b09      	cmp	r3, #9
 800a1d8:	d00f      	beq.n	800a1fa <UART_SetConfig+0x9d2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b0a      	cmp	r3, #10
 800a1e0:	d008      	beq.n	800a1f4 <UART_SetConfig+0x9cc>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b0b      	cmp	r3, #11
 800a1e8:	d102      	bne.n	800a1f0 <UART_SetConfig+0x9c8>
 800a1ea:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a1ee:	e018      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a1f0:	4b13      	ldr	r3, [pc, #76]	; (800a240 <UART_SetConfig+0xa18>)
 800a1f2:	e016      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a1f4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a1f8:	e013      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a1fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a1fe:	e010      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a200:	4b16      	ldr	r3, [pc, #88]	; (800a25c <UART_SetConfig+0xa34>)
 800a202:	e00e      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a204:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <UART_SetConfig+0xa08>)
 800a206:	e00c      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <UART_SetConfig+0xa38>)
 800a20a:	e00a      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a20c:	4b15      	ldr	r3, [pc, #84]	; (800a264 <UART_SetConfig+0xa3c>)
 800a20e:	e008      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a210:	4b08      	ldr	r3, [pc, #32]	; (800a234 <UART_SetConfig+0xa0c>)
 800a212:	e006      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a214:	4b14      	ldr	r3, [pc, #80]	; (800a268 <UART_SetConfig+0xa40>)
 800a216:	e004      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a218:	4b07      	ldr	r3, [pc, #28]	; (800a238 <UART_SetConfig+0xa10>)
 800a21a:	e002      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a21c:	4b07      	ldr	r3, [pc, #28]	; (800a23c <UART_SetConfig+0xa14>)
 800a21e:	e000      	b.n	800a222 <UART_SetConfig+0x9fa>
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <UART_SetConfig+0xa18>)
 800a222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a224:	e07d      	b.n	800a322 <UART_SetConfig+0xafa>
 800a226:	bf00      	nop
 800a228:	58024400 	.word	0x58024400
 800a22c:	03d09000 	.word	0x03d09000
 800a230:	0003d090 	.word	0x0003d090
 800a234:	0007a120 	.word	0x0007a120
 800a238:	000f4240 	.word	0x000f4240
 800a23c:	001e8480 	.word	0x001e8480
 800a240:	003d0900 	.word	0x003d0900
 800a244:	00516155 	.word	0x00516155
 800a248:	0061a800 	.word	0x0061a800
 800a24c:	007a1200 	.word	0x007a1200
 800a250:	00a2c2aa 	.word	0x00a2c2aa
 800a254:	00f42400 	.word	0x00f42400
 800a258:	01e84800 	.word	0x01e84800
 800a25c:	0001e848 	.word	0x0001e848
 800a260:	00051615 	.word	0x00051615
 800a264:	00061a80 	.word	0x00061a80
 800a268:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d04e      	beq.n	800a312 <UART_SetConfig+0xaea>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d047      	beq.n	800a30c <UART_SetConfig+0xae4>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	2b02      	cmp	r3, #2
 800a282:	d040      	beq.n	800a306 <UART_SetConfig+0xade>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d039      	beq.n	800a300 <UART_SetConfig+0xad8>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b04      	cmp	r3, #4
 800a292:	d032      	beq.n	800a2fa <UART_SetConfig+0xad2>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b05      	cmp	r3, #5
 800a29a:	d02b      	beq.n	800a2f4 <UART_SetConfig+0xacc>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b06      	cmp	r3, #6
 800a2a2:	d024      	beq.n	800a2ee <UART_SetConfig+0xac6>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b07      	cmp	r3, #7
 800a2aa:	d01d      	beq.n	800a2e8 <UART_SetConfig+0xac0>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d016      	beq.n	800a2e2 <UART_SetConfig+0xaba>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b09      	cmp	r3, #9
 800a2ba:	d00f      	beq.n	800a2dc <UART_SetConfig+0xab4>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	2b0a      	cmp	r3, #10
 800a2c2:	d008      	beq.n	800a2d6 <UART_SetConfig+0xaae>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b0b      	cmp	r3, #11
 800a2ca:	d101      	bne.n	800a2d0 <UART_SetConfig+0xaa8>
 800a2cc:	2380      	movs	r3, #128	; 0x80
 800a2ce:	e022      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d4:	e01f      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2da:	e01c      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2e0:	e019      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e6:	e016      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2ec:	e013      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a2f2:	e010      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a2f8:	e00d      	b.n	800a316 <UART_SetConfig+0xaee>
 800a2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2fe:	e00a      	b.n	800a316 <UART_SetConfig+0xaee>
 800a300:	f241 5355 	movw	r3, #5461	; 0x1555
 800a304:	e007      	b.n	800a316 <UART_SetConfig+0xaee>
 800a306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a30a:	e004      	b.n	800a316 <UART_SetConfig+0xaee>
 800a30c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a310:	e001      	b.n	800a316 <UART_SetConfig+0xaee>
 800a312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a318:	e003      	b.n	800a322 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a320:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	f001 83e8 	beq.w	800bafa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4613      	mov	r3, r2
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	4413      	add	r3, r2
 800a334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a336:	429a      	cmp	r2, r3
 800a338:	d305      	bcc.n	800a346 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a342:	429a      	cmp	r2, r3
 800a344:	d904      	bls.n	800a350 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34c:	f001 bbd5 	b.w	800bafa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a350:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a354:	2b08      	cmp	r3, #8
 800a356:	f000 8154 	beq.w	800a602 <UART_SetConfig+0xdda>
 800a35a:	2b08      	cmp	r3, #8
 800a35c:	dc06      	bgt.n	800a36c <UART_SetConfig+0xb44>
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d00f      	beq.n	800a382 <UART_SetConfig+0xb5a>
 800a362:	2b04      	cmp	r3, #4
 800a364:	f000 80ac 	beq.w	800a4c0 <UART_SetConfig+0xc98>
 800a368:	f000 bc30 	b.w	800abcc <UART_SetConfig+0x13a4>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	f000 832d 	beq.w	800a9cc <UART_SetConfig+0x11a4>
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	f000 83a5 	beq.w	800aac2 <UART_SetConfig+0x129a>
 800a378:	2b10      	cmp	r3, #16
 800a37a:	f000 81e3 	beq.w	800a744 <UART_SetConfig+0xf1c>
 800a37e:	f000 bc25 	b.w	800abcc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a382:	f7fd fdb5 	bl	8007ef0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a386:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	4618      	mov	r0, r3
 800a38c:	f04f 0100 	mov.w	r1, #0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	2b00      	cmp	r3, #0
 800a396:	d067      	beq.n	800a468 <UART_SetConfig+0xc40>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d05e      	beq.n	800a45e <UART_SetConfig+0xc36>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d055      	beq.n	800a454 <UART_SetConfig+0xc2c>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d04c      	beq.n	800a44a <UART_SetConfig+0xc22>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d043      	beq.n	800a440 <UART_SetConfig+0xc18>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b05      	cmp	r3, #5
 800a3be:	d03a      	beq.n	800a436 <UART_SetConfig+0xc0e>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b06      	cmp	r3, #6
 800a3c6:	d031      	beq.n	800a42c <UART_SetConfig+0xc04>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b07      	cmp	r3, #7
 800a3ce:	d028      	beq.n	800a422 <UART_SetConfig+0xbfa>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d01f      	beq.n	800a418 <UART_SetConfig+0xbf0>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d016      	beq.n	800a40e <UART_SetConfig+0xbe6>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b0a      	cmp	r3, #10
 800a3e6:	d00d      	beq.n	800a404 <UART_SetConfig+0xbdc>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b0b      	cmp	r3, #11
 800a3ee:	d104      	bne.n	800a3fa <UART_SetConfig+0xbd2>
 800a3f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3f4:	f04f 0400 	mov.w	r4, #0
 800a3f8:	e03a      	b.n	800a470 <UART_SetConfig+0xc48>
 800a3fa:	f04f 0301 	mov.w	r3, #1
 800a3fe:	f04f 0400 	mov.w	r4, #0
 800a402:	e035      	b.n	800a470 <UART_SetConfig+0xc48>
 800a404:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a408:	f04f 0400 	mov.w	r4, #0
 800a40c:	e030      	b.n	800a470 <UART_SetConfig+0xc48>
 800a40e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a412:	f04f 0400 	mov.w	r4, #0
 800a416:	e02b      	b.n	800a470 <UART_SetConfig+0xc48>
 800a418:	f04f 0320 	mov.w	r3, #32
 800a41c:	f04f 0400 	mov.w	r4, #0
 800a420:	e026      	b.n	800a470 <UART_SetConfig+0xc48>
 800a422:	f04f 0310 	mov.w	r3, #16
 800a426:	f04f 0400 	mov.w	r4, #0
 800a42a:	e021      	b.n	800a470 <UART_SetConfig+0xc48>
 800a42c:	f04f 030c 	mov.w	r3, #12
 800a430:	f04f 0400 	mov.w	r4, #0
 800a434:	e01c      	b.n	800a470 <UART_SetConfig+0xc48>
 800a436:	f04f 030a 	mov.w	r3, #10
 800a43a:	f04f 0400 	mov.w	r4, #0
 800a43e:	e017      	b.n	800a470 <UART_SetConfig+0xc48>
 800a440:	f04f 0308 	mov.w	r3, #8
 800a444:	f04f 0400 	mov.w	r4, #0
 800a448:	e012      	b.n	800a470 <UART_SetConfig+0xc48>
 800a44a:	f04f 0306 	mov.w	r3, #6
 800a44e:	f04f 0400 	mov.w	r4, #0
 800a452:	e00d      	b.n	800a470 <UART_SetConfig+0xc48>
 800a454:	f04f 0304 	mov.w	r3, #4
 800a458:	f04f 0400 	mov.w	r4, #0
 800a45c:	e008      	b.n	800a470 <UART_SetConfig+0xc48>
 800a45e:	f04f 0302 	mov.w	r3, #2
 800a462:	f04f 0400 	mov.w	r4, #0
 800a466:	e003      	b.n	800a470 <UART_SetConfig+0xc48>
 800a468:	f04f 0301 	mov.w	r3, #1
 800a46c:	f04f 0400 	mov.w	r4, #0
 800a470:	461a      	mov	r2, r3
 800a472:	4623      	mov	r3, r4
 800a474:	f7f5 ff30 	bl	80002d8 <__aeabi_uldivmod>
 800a478:	4603      	mov	r3, r0
 800a47a:	460c      	mov	r4, r1
 800a47c:	4619      	mov	r1, r3
 800a47e:	4622      	mov	r2, r4
 800a480:	f04f 0300 	mov.w	r3, #0
 800a484:	f04f 0400 	mov.w	r4, #0
 800a488:	0214      	lsls	r4, r2, #8
 800a48a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a48e:	020b      	lsls	r3, r1, #8
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6852      	ldr	r2, [r2, #4]
 800a494:	0852      	lsrs	r2, r2, #1
 800a496:	4611      	mov	r1, r2
 800a498:	f04f 0200 	mov.w	r2, #0
 800a49c:	eb13 0b01 	adds.w	fp, r3, r1
 800a4a0:	eb44 0c02 	adc.w	ip, r4, r2
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	4661      	mov	r1, ip
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f04f 0400 	mov.w	r4, #0
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	f7f5 ff10 	bl	80002d8 <__aeabi_uldivmod>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4be:	e389      	b.n	800abd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4c0:	f107 0318 	add.w	r3, r7, #24
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fd fd29 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f04f 0100 	mov.w	r1, #0
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d067      	beq.n	800a5aa <UART_SetConfig+0xd82>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d05e      	beq.n	800a5a0 <UART_SetConfig+0xd78>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d055      	beq.n	800a596 <UART_SetConfig+0xd6e>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d04c      	beq.n	800a58c <UART_SetConfig+0xd64>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d043      	beq.n	800a582 <UART_SetConfig+0xd5a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b05      	cmp	r3, #5
 800a500:	d03a      	beq.n	800a578 <UART_SetConfig+0xd50>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b06      	cmp	r3, #6
 800a508:	d031      	beq.n	800a56e <UART_SetConfig+0xd46>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b07      	cmp	r3, #7
 800a510:	d028      	beq.n	800a564 <UART_SetConfig+0xd3c>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b08      	cmp	r3, #8
 800a518:	d01f      	beq.n	800a55a <UART_SetConfig+0xd32>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b09      	cmp	r3, #9
 800a520:	d016      	beq.n	800a550 <UART_SetConfig+0xd28>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b0a      	cmp	r3, #10
 800a528:	d00d      	beq.n	800a546 <UART_SetConfig+0xd1e>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b0b      	cmp	r3, #11
 800a530:	d104      	bne.n	800a53c <UART_SetConfig+0xd14>
 800a532:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a536:	f04f 0400 	mov.w	r4, #0
 800a53a:	e03a      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a53c:	f04f 0301 	mov.w	r3, #1
 800a540:	f04f 0400 	mov.w	r4, #0
 800a544:	e035      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a546:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a54a:	f04f 0400 	mov.w	r4, #0
 800a54e:	e030      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a550:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a554:	f04f 0400 	mov.w	r4, #0
 800a558:	e02b      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a55a:	f04f 0320 	mov.w	r3, #32
 800a55e:	f04f 0400 	mov.w	r4, #0
 800a562:	e026      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a564:	f04f 0310 	mov.w	r3, #16
 800a568:	f04f 0400 	mov.w	r4, #0
 800a56c:	e021      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a56e:	f04f 030c 	mov.w	r3, #12
 800a572:	f04f 0400 	mov.w	r4, #0
 800a576:	e01c      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a578:	f04f 030a 	mov.w	r3, #10
 800a57c:	f04f 0400 	mov.w	r4, #0
 800a580:	e017      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a582:	f04f 0308 	mov.w	r3, #8
 800a586:	f04f 0400 	mov.w	r4, #0
 800a58a:	e012      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a58c:	f04f 0306 	mov.w	r3, #6
 800a590:	f04f 0400 	mov.w	r4, #0
 800a594:	e00d      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a596:	f04f 0304 	mov.w	r3, #4
 800a59a:	f04f 0400 	mov.w	r4, #0
 800a59e:	e008      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a5a0:	f04f 0302 	mov.w	r3, #2
 800a5a4:	f04f 0400 	mov.w	r4, #0
 800a5a8:	e003      	b.n	800a5b2 <UART_SetConfig+0xd8a>
 800a5aa:	f04f 0301 	mov.w	r3, #1
 800a5ae:	f04f 0400 	mov.w	r4, #0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4623      	mov	r3, r4
 800a5b6:	f7f5 fe8f 	bl	80002d8 <__aeabi_uldivmod>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	460c      	mov	r4, r1
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	f04f 0400 	mov.w	r4, #0
 800a5ca:	0214      	lsls	r4, r2, #8
 800a5cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5d0:	020b      	lsls	r3, r1, #8
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	6852      	ldr	r2, [r2, #4]
 800a5d6:	0852      	lsrs	r2, r2, #1
 800a5d8:	4611      	mov	r1, r2
 800a5da:	f04f 0200 	mov.w	r2, #0
 800a5de:	eb13 0b01 	adds.w	fp, r3, r1
 800a5e2:	eb44 0c02 	adc.w	ip, r4, r2
 800a5e6:	4658      	mov	r0, fp
 800a5e8:	4661      	mov	r1, ip
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f04f 0400 	mov.w	r4, #0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	f7f5 fe6f 	bl	80002d8 <__aeabi_uldivmod>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a600:	e2e8      	b.n	800abd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4618      	mov	r0, r3
 800a608:	f7fd fdd4 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	4618      	mov	r0, r3
 800a610:	f04f 0100 	mov.w	r1, #0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d067      	beq.n	800a6ec <UART_SetConfig+0xec4>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b01      	cmp	r3, #1
 800a622:	d05e      	beq.n	800a6e2 <UART_SetConfig+0xeba>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d055      	beq.n	800a6d8 <UART_SetConfig+0xeb0>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b03      	cmp	r3, #3
 800a632:	d04c      	beq.n	800a6ce <UART_SetConfig+0xea6>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d043      	beq.n	800a6c4 <UART_SetConfig+0xe9c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b05      	cmp	r3, #5
 800a642:	d03a      	beq.n	800a6ba <UART_SetConfig+0xe92>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b06      	cmp	r3, #6
 800a64a:	d031      	beq.n	800a6b0 <UART_SetConfig+0xe88>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b07      	cmp	r3, #7
 800a652:	d028      	beq.n	800a6a6 <UART_SetConfig+0xe7e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d01f      	beq.n	800a69c <UART_SetConfig+0xe74>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b09      	cmp	r3, #9
 800a662:	d016      	beq.n	800a692 <UART_SetConfig+0xe6a>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b0a      	cmp	r3, #10
 800a66a:	d00d      	beq.n	800a688 <UART_SetConfig+0xe60>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b0b      	cmp	r3, #11
 800a672:	d104      	bne.n	800a67e <UART_SetConfig+0xe56>
 800a674:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a678:	f04f 0400 	mov.w	r4, #0
 800a67c:	e03a      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a67e:	f04f 0301 	mov.w	r3, #1
 800a682:	f04f 0400 	mov.w	r4, #0
 800a686:	e035      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a688:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a68c:	f04f 0400 	mov.w	r4, #0
 800a690:	e030      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a692:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a696:	f04f 0400 	mov.w	r4, #0
 800a69a:	e02b      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a69c:	f04f 0320 	mov.w	r3, #32
 800a6a0:	f04f 0400 	mov.w	r4, #0
 800a6a4:	e026      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6a6:	f04f 0310 	mov.w	r3, #16
 800a6aa:	f04f 0400 	mov.w	r4, #0
 800a6ae:	e021      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6b0:	f04f 030c 	mov.w	r3, #12
 800a6b4:	f04f 0400 	mov.w	r4, #0
 800a6b8:	e01c      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6ba:	f04f 030a 	mov.w	r3, #10
 800a6be:	f04f 0400 	mov.w	r4, #0
 800a6c2:	e017      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6c4:	f04f 0308 	mov.w	r3, #8
 800a6c8:	f04f 0400 	mov.w	r4, #0
 800a6cc:	e012      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6ce:	f04f 0306 	mov.w	r3, #6
 800a6d2:	f04f 0400 	mov.w	r4, #0
 800a6d6:	e00d      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6d8:	f04f 0304 	mov.w	r3, #4
 800a6dc:	f04f 0400 	mov.w	r4, #0
 800a6e0:	e008      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6e2:	f04f 0302 	mov.w	r3, #2
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	e003      	b.n	800a6f4 <UART_SetConfig+0xecc>
 800a6ec:	f04f 0301 	mov.w	r3, #1
 800a6f0:	f04f 0400 	mov.w	r4, #0
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	f7f5 fdee 	bl	80002d8 <__aeabi_uldivmod>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	460c      	mov	r4, r1
 800a700:	4619      	mov	r1, r3
 800a702:	4622      	mov	r2, r4
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	f04f 0400 	mov.w	r4, #0
 800a70c:	0214      	lsls	r4, r2, #8
 800a70e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a712:	020b      	lsls	r3, r1, #8
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	6852      	ldr	r2, [r2, #4]
 800a718:	0852      	lsrs	r2, r2, #1
 800a71a:	4611      	mov	r1, r2
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	eb13 0b01 	adds.w	fp, r3, r1
 800a724:	eb44 0c02 	adc.w	ip, r4, r2
 800a728:	4658      	mov	r0, fp
 800a72a:	4661      	mov	r1, ip
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f04f 0400 	mov.w	r4, #0
 800a734:	461a      	mov	r2, r3
 800a736:	4623      	mov	r3, r4
 800a738:	f7f5 fdce 	bl	80002d8 <__aeabi_uldivmod>
 800a73c:	4603      	mov	r3, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a742:	e247      	b.n	800abd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a744:	4b96      	ldr	r3, [pc, #600]	; (800a9a0 <UART_SetConfig+0x1178>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0320 	and.w	r3, r3, #32
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80a3 	beq.w	800a898 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a752:	4b93      	ldr	r3, [pc, #588]	; (800a9a0 <UART_SetConfig+0x1178>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	4a91      	ldr	r2, [pc, #580]	; (800a9a4 <UART_SetConfig+0x117c>)
 800a75e:	fa22 f303 	lsr.w	r3, r2, r3
 800a762:	4618      	mov	r0, r3
 800a764:	f04f 0100 	mov.w	r1, #0
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d067      	beq.n	800a840 <UART_SetConfig+0x1018>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b01      	cmp	r3, #1
 800a776:	d05e      	beq.n	800a836 <UART_SetConfig+0x100e>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d055      	beq.n	800a82c <UART_SetConfig+0x1004>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b03      	cmp	r3, #3
 800a786:	d04c      	beq.n	800a822 <UART_SetConfig+0xffa>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d043      	beq.n	800a818 <UART_SetConfig+0xff0>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b05      	cmp	r3, #5
 800a796:	d03a      	beq.n	800a80e <UART_SetConfig+0xfe6>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b06      	cmp	r3, #6
 800a79e:	d031      	beq.n	800a804 <UART_SetConfig+0xfdc>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b07      	cmp	r3, #7
 800a7a6:	d028      	beq.n	800a7fa <UART_SetConfig+0xfd2>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d01f      	beq.n	800a7f0 <UART_SetConfig+0xfc8>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b09      	cmp	r3, #9
 800a7b6:	d016      	beq.n	800a7e6 <UART_SetConfig+0xfbe>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b0a      	cmp	r3, #10
 800a7be:	d00d      	beq.n	800a7dc <UART_SetConfig+0xfb4>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	2b0b      	cmp	r3, #11
 800a7c6:	d104      	bne.n	800a7d2 <UART_SetConfig+0xfaa>
 800a7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7cc:	f04f 0400 	mov.w	r4, #0
 800a7d0:	e03a      	b.n	800a848 <UART_SetConfig+0x1020>
 800a7d2:	f04f 0301 	mov.w	r3, #1
 800a7d6:	f04f 0400 	mov.w	r4, #0
 800a7da:	e035      	b.n	800a848 <UART_SetConfig+0x1020>
 800a7dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a7e0:	f04f 0400 	mov.w	r4, #0
 800a7e4:	e030      	b.n	800a848 <UART_SetConfig+0x1020>
 800a7e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a7ea:	f04f 0400 	mov.w	r4, #0
 800a7ee:	e02b      	b.n	800a848 <UART_SetConfig+0x1020>
 800a7f0:	f04f 0320 	mov.w	r3, #32
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	e026      	b.n	800a848 <UART_SetConfig+0x1020>
 800a7fa:	f04f 0310 	mov.w	r3, #16
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	e021      	b.n	800a848 <UART_SetConfig+0x1020>
 800a804:	f04f 030c 	mov.w	r3, #12
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	e01c      	b.n	800a848 <UART_SetConfig+0x1020>
 800a80e:	f04f 030a 	mov.w	r3, #10
 800a812:	f04f 0400 	mov.w	r4, #0
 800a816:	e017      	b.n	800a848 <UART_SetConfig+0x1020>
 800a818:	f04f 0308 	mov.w	r3, #8
 800a81c:	f04f 0400 	mov.w	r4, #0
 800a820:	e012      	b.n	800a848 <UART_SetConfig+0x1020>
 800a822:	f04f 0306 	mov.w	r3, #6
 800a826:	f04f 0400 	mov.w	r4, #0
 800a82a:	e00d      	b.n	800a848 <UART_SetConfig+0x1020>
 800a82c:	f04f 0304 	mov.w	r3, #4
 800a830:	f04f 0400 	mov.w	r4, #0
 800a834:	e008      	b.n	800a848 <UART_SetConfig+0x1020>
 800a836:	f04f 0302 	mov.w	r3, #2
 800a83a:	f04f 0400 	mov.w	r4, #0
 800a83e:	e003      	b.n	800a848 <UART_SetConfig+0x1020>
 800a840:	f04f 0301 	mov.w	r3, #1
 800a844:	f04f 0400 	mov.w	r4, #0
 800a848:	461a      	mov	r2, r3
 800a84a:	4623      	mov	r3, r4
 800a84c:	f7f5 fd44 	bl	80002d8 <__aeabi_uldivmod>
 800a850:	4603      	mov	r3, r0
 800a852:	460c      	mov	r4, r1
 800a854:	4619      	mov	r1, r3
 800a856:	4622      	mov	r2, r4
 800a858:	f04f 0300 	mov.w	r3, #0
 800a85c:	f04f 0400 	mov.w	r4, #0
 800a860:	0214      	lsls	r4, r2, #8
 800a862:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a866:	020b      	lsls	r3, r1, #8
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6852      	ldr	r2, [r2, #4]
 800a86c:	0852      	lsrs	r2, r2, #1
 800a86e:	4611      	mov	r1, r2
 800a870:	f04f 0200 	mov.w	r2, #0
 800a874:	eb13 0b01 	adds.w	fp, r3, r1
 800a878:	eb44 0c02 	adc.w	ip, r4, r2
 800a87c:	4658      	mov	r0, fp
 800a87e:	4661      	mov	r1, ip
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f04f 0400 	mov.w	r4, #0
 800a888:	461a      	mov	r2, r3
 800a88a:	4623      	mov	r3, r4
 800a88c:	f7f5 fd24 	bl	80002d8 <__aeabi_uldivmod>
 800a890:	4603      	mov	r3, r0
 800a892:	460c      	mov	r4, r1
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a896:	e19d      	b.n	800abd4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d05b      	beq.n	800a958 <UART_SetConfig+0x1130>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d053      	beq.n	800a950 <UART_SetConfig+0x1128>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d04b      	beq.n	800a948 <UART_SetConfig+0x1120>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d043      	beq.n	800a940 <UART_SetConfig+0x1118>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d03b      	beq.n	800a938 <UART_SetConfig+0x1110>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b05      	cmp	r3, #5
 800a8c6:	d033      	beq.n	800a930 <UART_SetConfig+0x1108>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b06      	cmp	r3, #6
 800a8ce:	d02b      	beq.n	800a928 <UART_SetConfig+0x1100>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b07      	cmp	r3, #7
 800a8d6:	d023      	beq.n	800a920 <UART_SetConfig+0x10f8>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d01b      	beq.n	800a918 <UART_SetConfig+0x10f0>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b09      	cmp	r3, #9
 800a8e6:	d013      	beq.n	800a910 <UART_SetConfig+0x10e8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b0a      	cmp	r3, #10
 800a8ee:	d00b      	beq.n	800a908 <UART_SetConfig+0x10e0>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b0b      	cmp	r3, #11
 800a8f6:	d103      	bne.n	800a900 <UART_SetConfig+0x10d8>
 800a8f8:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <UART_SetConfig+0x117c>)
 800a8fa:	f04f 0400 	mov.w	r4, #0
 800a8fe:	e02e      	b.n	800a95e <UART_SetConfig+0x1136>
 800a900:	4b29      	ldr	r3, [pc, #164]	; (800a9a8 <UART_SetConfig+0x1180>)
 800a902:	f04f 0403 	mov.w	r4, #3
 800a906:	e02a      	b.n	800a95e <UART_SetConfig+0x1136>
 800a908:	4b28      	ldr	r3, [pc, #160]	; (800a9ac <UART_SetConfig+0x1184>)
 800a90a:	f04f 0400 	mov.w	r4, #0
 800a90e:	e026      	b.n	800a95e <UART_SetConfig+0x1136>
 800a910:	4b27      	ldr	r3, [pc, #156]	; (800a9b0 <UART_SetConfig+0x1188>)
 800a912:	f04f 0400 	mov.w	r4, #0
 800a916:	e022      	b.n	800a95e <UART_SetConfig+0x1136>
 800a918:	4b26      	ldr	r3, [pc, #152]	; (800a9b4 <UART_SetConfig+0x118c>)
 800a91a:	f04f 0400 	mov.w	r4, #0
 800a91e:	e01e      	b.n	800a95e <UART_SetConfig+0x1136>
 800a920:	4b25      	ldr	r3, [pc, #148]	; (800a9b8 <UART_SetConfig+0x1190>)
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e01a      	b.n	800a95e <UART_SetConfig+0x1136>
 800a928:	a419      	add	r4, pc, #100	; (adr r4, 800a990 <UART_SetConfig+0x1168>)
 800a92a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a92e:	e016      	b.n	800a95e <UART_SetConfig+0x1136>
 800a930:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <UART_SetConfig+0x1194>)
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e012      	b.n	800a95e <UART_SetConfig+0x1136>
 800a938:	4b21      	ldr	r3, [pc, #132]	; (800a9c0 <UART_SetConfig+0x1198>)
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	e00e      	b.n	800a95e <UART_SetConfig+0x1136>
 800a940:	a415      	add	r4, pc, #84	; (adr r4, 800a998 <UART_SetConfig+0x1170>)
 800a942:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a946:	e00a      	b.n	800a95e <UART_SetConfig+0x1136>
 800a948:	4b1e      	ldr	r3, [pc, #120]	; (800a9c4 <UART_SetConfig+0x119c>)
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e006      	b.n	800a95e <UART_SetConfig+0x1136>
 800a950:	4b1d      	ldr	r3, [pc, #116]	; (800a9c8 <UART_SetConfig+0x11a0>)
 800a952:	f04f 0401 	mov.w	r4, #1
 800a956:	e002      	b.n	800a95e <UART_SetConfig+0x1136>
 800a958:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <UART_SetConfig+0x1180>)
 800a95a:	f04f 0403 	mov.w	r4, #3
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6852      	ldr	r2, [r2, #4]
 800a962:	0852      	lsrs	r2, r2, #1
 800a964:	4611      	mov	r1, r2
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	eb13 0b01 	adds.w	fp, r3, r1
 800a96e:	eb44 0c02 	adc.w	ip, r4, r2
 800a972:	4658      	mov	r0, fp
 800a974:	4661      	mov	r1, ip
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f04f 0400 	mov.w	r4, #0
 800a97e:	461a      	mov	r2, r3
 800a980:	4623      	mov	r3, r4
 800a982:	f7f5 fca9 	bl	80002d8 <__aeabi_uldivmod>
 800a986:	4603      	mov	r3, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a98c:	e122      	b.n	800abd4 <UART_SetConfig+0x13ac>
 800a98e:	bf00      	nop
 800a990:	51615500 	.word	0x51615500
 800a994:	00000000 	.word	0x00000000
 800a998:	a2c2aa00 	.word	0xa2c2aa00
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	58024400 	.word	0x58024400
 800a9a4:	03d09000 	.word	0x03d09000
 800a9a8:	d0900000 	.word	0xd0900000
 800a9ac:	07a12000 	.word	0x07a12000
 800a9b0:	0f424000 	.word	0x0f424000
 800a9b4:	1e848000 	.word	0x1e848000
 800a9b8:	3d090000 	.word	0x3d090000
 800a9bc:	61a80000 	.word	0x61a80000
 800a9c0:	7a120000 	.word	0x7a120000
 800a9c4:	f4240000 	.word	0xf4240000
 800a9c8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d05b      	beq.n	800aa8c <UART_SetConfig+0x1264>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d053      	beq.n	800aa84 <UART_SetConfig+0x125c>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d04b      	beq.n	800aa7c <UART_SetConfig+0x1254>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d043      	beq.n	800aa74 <UART_SetConfig+0x124c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2b04      	cmp	r3, #4
 800a9f2:	d03b      	beq.n	800aa6c <UART_SetConfig+0x1244>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b05      	cmp	r3, #5
 800a9fa:	d033      	beq.n	800aa64 <UART_SetConfig+0x123c>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b06      	cmp	r3, #6
 800aa02:	d02b      	beq.n	800aa5c <UART_SetConfig+0x1234>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b07      	cmp	r3, #7
 800aa0a:	d023      	beq.n	800aa54 <UART_SetConfig+0x122c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d01b      	beq.n	800aa4c <UART_SetConfig+0x1224>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b09      	cmp	r3, #9
 800aa1a:	d013      	beq.n	800aa44 <UART_SetConfig+0x121c>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b0a      	cmp	r3, #10
 800aa22:	d00b      	beq.n	800aa3c <UART_SetConfig+0x1214>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b0b      	cmp	r3, #11
 800aa2a:	d103      	bne.n	800aa34 <UART_SetConfig+0x120c>
 800aa2c:	4bc0      	ldr	r3, [pc, #768]	; (800ad30 <UART_SetConfig+0x1508>)
 800aa2e:	f04f 0400 	mov.w	r4, #0
 800aa32:	e02e      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa34:	4bbf      	ldr	r3, [pc, #764]	; (800ad34 <UART_SetConfig+0x150c>)
 800aa36:	f04f 0400 	mov.w	r4, #0
 800aa3a:	e02a      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa3c:	4bbe      	ldr	r3, [pc, #760]	; (800ad38 <UART_SetConfig+0x1510>)
 800aa3e:	f04f 0400 	mov.w	r4, #0
 800aa42:	e026      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa44:	4bbd      	ldr	r3, [pc, #756]	; (800ad3c <UART_SetConfig+0x1514>)
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	e022      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa4c:	4bbc      	ldr	r3, [pc, #752]	; (800ad40 <UART_SetConfig+0x1518>)
 800aa4e:	f04f 0400 	mov.w	r4, #0
 800aa52:	e01e      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa54:	4bbb      	ldr	r3, [pc, #748]	; (800ad44 <UART_SetConfig+0x151c>)
 800aa56:	f04f 0400 	mov.w	r4, #0
 800aa5a:	e01a      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa5c:	a4b0      	add	r4, pc, #704	; (adr r4, 800ad20 <UART_SetConfig+0x14f8>)
 800aa5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa62:	e016      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa64:	4bb8      	ldr	r3, [pc, #736]	; (800ad48 <UART_SetConfig+0x1520>)
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	e012      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa6c:	4bb7      	ldr	r3, [pc, #732]	; (800ad4c <UART_SetConfig+0x1524>)
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e00e      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa74:	a4ac      	add	r4, pc, #688	; (adr r4, 800ad28 <UART_SetConfig+0x1500>)
 800aa76:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa7a:	e00a      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa7c:	4bb4      	ldr	r3, [pc, #720]	; (800ad50 <UART_SetConfig+0x1528>)
 800aa7e:	f04f 0400 	mov.w	r4, #0
 800aa82:	e006      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa84:	4bb3      	ldr	r3, [pc, #716]	; (800ad54 <UART_SetConfig+0x152c>)
 800aa86:	f04f 0400 	mov.w	r4, #0
 800aa8a:	e002      	b.n	800aa92 <UART_SetConfig+0x126a>
 800aa8c:	4ba9      	ldr	r3, [pc, #676]	; (800ad34 <UART_SetConfig+0x150c>)
 800aa8e:	f04f 0400 	mov.w	r4, #0
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6852      	ldr	r2, [r2, #4]
 800aa96:	0852      	lsrs	r2, r2, #1
 800aa98:	4611      	mov	r1, r2
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	eb13 0b01 	adds.w	fp, r3, r1
 800aaa2:	eb44 0c02 	adc.w	ip, r4, r2
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	4661      	mov	r1, ip
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	461a      	mov	r2, r3
 800aab4:	4623      	mov	r3, r4
 800aab6:	f7f5 fc0f 	bl	80002d8 <__aeabi_uldivmod>
 800aaba:	4603      	mov	r3, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aac0:	e088      	b.n	800abd4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d064      	beq.n	800ab94 <UART_SetConfig+0x136c>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d05b      	beq.n	800ab8a <UART_SetConfig+0x1362>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d052      	beq.n	800ab80 <UART_SetConfig+0x1358>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d04a      	beq.n	800ab78 <UART_SetConfig+0x1350>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d041      	beq.n	800ab6e <UART_SetConfig+0x1346>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b05      	cmp	r3, #5
 800aaf0:	d039      	beq.n	800ab66 <UART_SetConfig+0x133e>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	2b06      	cmp	r3, #6
 800aaf8:	d031      	beq.n	800ab5e <UART_SetConfig+0x1336>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b07      	cmp	r3, #7
 800ab00:	d028      	beq.n	800ab54 <UART_SetConfig+0x132c>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2b08      	cmp	r3, #8
 800ab08:	d01f      	beq.n	800ab4a <UART_SetConfig+0x1322>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d016      	beq.n	800ab40 <UART_SetConfig+0x1318>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b0a      	cmp	r3, #10
 800ab18:	d00d      	beq.n	800ab36 <UART_SetConfig+0x130e>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b0b      	cmp	r3, #11
 800ab20:	d104      	bne.n	800ab2c <UART_SetConfig+0x1304>
 800ab22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab26:	f04f 0400 	mov.w	r4, #0
 800ab2a:	e037      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab30:	f04f 0400 	mov.w	r4, #0
 800ab34:	e032      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab3a:	f04f 0400 	mov.w	r4, #0
 800ab3e:	e02d      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab44:	f04f 0400 	mov.w	r4, #0
 800ab48:	e028      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab4e:	f04f 0400 	mov.w	r4, #0
 800ab52:	e023      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab58:	f04f 0400 	mov.w	r4, #0
 800ab5c:	e01e      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab5e:	4b7e      	ldr	r3, [pc, #504]	; (800ad58 <UART_SetConfig+0x1530>)
 800ab60:	f04f 0400 	mov.w	r4, #0
 800ab64:	e01a      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab66:	4b7d      	ldr	r3, [pc, #500]	; (800ad5c <UART_SetConfig+0x1534>)
 800ab68:	f04f 0400 	mov.w	r4, #0
 800ab6c:	e016      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab72:	f04f 0400 	mov.w	r4, #0
 800ab76:	e011      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab78:	4b79      	ldr	r3, [pc, #484]	; (800ad60 <UART_SetConfig+0x1538>)
 800ab7a:	f04f 0400 	mov.w	r4, #0
 800ab7e:	e00d      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab84:	f04f 0400 	mov.w	r4, #0
 800ab88:	e008      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab8e:	f04f 0400 	mov.w	r4, #0
 800ab92:	e003      	b.n	800ab9c <UART_SetConfig+0x1374>
 800ab94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab98:	f04f 0400 	mov.w	r4, #0
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	6852      	ldr	r2, [r2, #4]
 800aba0:	0852      	lsrs	r2, r2, #1
 800aba2:	4611      	mov	r1, r2
 800aba4:	f04f 0200 	mov.w	r2, #0
 800aba8:	eb13 0b01 	adds.w	fp, r3, r1
 800abac:	eb44 0c02 	adc.w	ip, r4, r2
 800abb0:	4658      	mov	r0, fp
 800abb2:	4661      	mov	r1, ip
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f04f 0400 	mov.w	r4, #0
 800abbc:	461a      	mov	r2, r3
 800abbe:	4623      	mov	r3, r4
 800abc0:	f7f5 fb8a 	bl	80002d8 <__aeabi_uldivmod>
 800abc4:	4603      	mov	r3, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abca:	e003      	b.n	800abd4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800abd2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abda:	d309      	bcc.n	800abf0 <UART_SetConfig+0x13c8>
 800abdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe2:	d205      	bcs.n	800abf0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abea:	60da      	str	r2, [r3, #12]
 800abec:	f000 bf85 	b.w	800bafa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abf6:	f000 bf80 	b.w	800bafa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac02:	f040 83da 	bne.w	800b3ba <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800ac06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac0a:	2b40      	cmp	r3, #64	; 0x40
 800ac0c:	f200 83b3 	bhi.w	800b376 <UART_SetConfig+0x1b4e>
 800ac10:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <UART_SetConfig+0x13f0>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ad65 	.word	0x0800ad65
 800ac1c:	0800ae1d 	.word	0x0800ae1d
 800ac20:	0800b377 	.word	0x0800b377
 800ac24:	0800b377 	.word	0x0800b377
 800ac28:	0800aed5 	.word	0x0800aed5
 800ac2c:	0800b377 	.word	0x0800b377
 800ac30:	0800b377 	.word	0x0800b377
 800ac34:	0800b377 	.word	0x0800b377
 800ac38:	0800af91 	.word	0x0800af91
 800ac3c:	0800b377 	.word	0x0800b377
 800ac40:	0800b377 	.word	0x0800b377
 800ac44:	0800b377 	.word	0x0800b377
 800ac48:	0800b377 	.word	0x0800b377
 800ac4c:	0800b377 	.word	0x0800b377
 800ac50:	0800b377 	.word	0x0800b377
 800ac54:	0800b377 	.word	0x0800b377
 800ac58:	0800b04d 	.word	0x0800b04d
 800ac5c:	0800b377 	.word	0x0800b377
 800ac60:	0800b377 	.word	0x0800b377
 800ac64:	0800b377 	.word	0x0800b377
 800ac68:	0800b377 	.word	0x0800b377
 800ac6c:	0800b377 	.word	0x0800b377
 800ac70:	0800b377 	.word	0x0800b377
 800ac74:	0800b377 	.word	0x0800b377
 800ac78:	0800b377 	.word	0x0800b377
 800ac7c:	0800b377 	.word	0x0800b377
 800ac80:	0800b377 	.word	0x0800b377
 800ac84:	0800b377 	.word	0x0800b377
 800ac88:	0800b377 	.word	0x0800b377
 800ac8c:	0800b377 	.word	0x0800b377
 800ac90:	0800b377 	.word	0x0800b377
 800ac94:	0800b377 	.word	0x0800b377
 800ac98:	0800b1bf 	.word	0x0800b1bf
 800ac9c:	0800b377 	.word	0x0800b377
 800aca0:	0800b377 	.word	0x0800b377
 800aca4:	0800b377 	.word	0x0800b377
 800aca8:	0800b377 	.word	0x0800b377
 800acac:	0800b377 	.word	0x0800b377
 800acb0:	0800b377 	.word	0x0800b377
 800acb4:	0800b377 	.word	0x0800b377
 800acb8:	0800b377 	.word	0x0800b377
 800acbc:	0800b377 	.word	0x0800b377
 800acc0:	0800b377 	.word	0x0800b377
 800acc4:	0800b377 	.word	0x0800b377
 800acc8:	0800b377 	.word	0x0800b377
 800accc:	0800b377 	.word	0x0800b377
 800acd0:	0800b377 	.word	0x0800b377
 800acd4:	0800b377 	.word	0x0800b377
 800acd8:	0800b377 	.word	0x0800b377
 800acdc:	0800b377 	.word	0x0800b377
 800ace0:	0800b377 	.word	0x0800b377
 800ace4:	0800b377 	.word	0x0800b377
 800ace8:	0800b377 	.word	0x0800b377
 800acec:	0800b377 	.word	0x0800b377
 800acf0:	0800b377 	.word	0x0800b377
 800acf4:	0800b377 	.word	0x0800b377
 800acf8:	0800b377 	.word	0x0800b377
 800acfc:	0800b377 	.word	0x0800b377
 800ad00:	0800b377 	.word	0x0800b377
 800ad04:	0800b377 	.word	0x0800b377
 800ad08:	0800b377 	.word	0x0800b377
 800ad0c:	0800b377 	.word	0x0800b377
 800ad10:	0800b377 	.word	0x0800b377
 800ad14:	0800b377 	.word	0x0800b377
 800ad18:	0800b2b5 	.word	0x0800b2b5
 800ad1c:	f3af 8000 	nop.w
 800ad20:	05161500 	.word	0x05161500
 800ad24:	00000000 	.word	0x00000000
 800ad28:	0a2c2a00 	.word	0x0a2c2a00
 800ad2c:	00000000 	.word	0x00000000
 800ad30:	003d0900 	.word	0x003d0900
 800ad34:	3d090000 	.word	0x3d090000
 800ad38:	007a1200 	.word	0x007a1200
 800ad3c:	00f42400 	.word	0x00f42400
 800ad40:	01e84800 	.word	0x01e84800
 800ad44:	03d09000 	.word	0x03d09000
 800ad48:	061a8000 	.word	0x061a8000
 800ad4c:	07a12000 	.word	0x07a12000
 800ad50:	0f424000 	.word	0x0f424000
 800ad54:	1e848000 	.word	0x1e848000
 800ad58:	000aaa00 	.word	0x000aaa00
 800ad5c:	000ccc00 	.word	0x000ccc00
 800ad60:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad64:	f7fb ff42 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 800ad68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d044      	beq.n	800adfc <UART_SetConfig+0x15d4>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d03e      	beq.n	800adf8 <UART_SetConfig+0x15d0>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d038      	beq.n	800adf4 <UART_SetConfig+0x15cc>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d032      	beq.n	800adf0 <UART_SetConfig+0x15c8>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d02c      	beq.n	800adec <UART_SetConfig+0x15c4>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b05      	cmp	r3, #5
 800ad98:	d026      	beq.n	800ade8 <UART_SetConfig+0x15c0>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b06      	cmp	r3, #6
 800ada0:	d020      	beq.n	800ade4 <UART_SetConfig+0x15bc>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b07      	cmp	r3, #7
 800ada8:	d01a      	beq.n	800ade0 <UART_SetConfig+0x15b8>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d014      	beq.n	800addc <UART_SetConfig+0x15b4>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b09      	cmp	r3, #9
 800adb8:	d00e      	beq.n	800add8 <UART_SetConfig+0x15b0>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2b0a      	cmp	r3, #10
 800adc0:	d008      	beq.n	800add4 <UART_SetConfig+0x15ac>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	2b0b      	cmp	r3, #11
 800adc8:	d102      	bne.n	800add0 <UART_SetConfig+0x15a8>
 800adca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adce:	e016      	b.n	800adfe <UART_SetConfig+0x15d6>
 800add0:	2301      	movs	r3, #1
 800add2:	e014      	b.n	800adfe <UART_SetConfig+0x15d6>
 800add4:	2380      	movs	r3, #128	; 0x80
 800add6:	e012      	b.n	800adfe <UART_SetConfig+0x15d6>
 800add8:	2340      	movs	r3, #64	; 0x40
 800adda:	e010      	b.n	800adfe <UART_SetConfig+0x15d6>
 800addc:	2320      	movs	r3, #32
 800adde:	e00e      	b.n	800adfe <UART_SetConfig+0x15d6>
 800ade0:	2310      	movs	r3, #16
 800ade2:	e00c      	b.n	800adfe <UART_SetConfig+0x15d6>
 800ade4:	230c      	movs	r3, #12
 800ade6:	e00a      	b.n	800adfe <UART_SetConfig+0x15d6>
 800ade8:	230a      	movs	r3, #10
 800adea:	e008      	b.n	800adfe <UART_SetConfig+0x15d6>
 800adec:	2308      	movs	r3, #8
 800adee:	e006      	b.n	800adfe <UART_SetConfig+0x15d6>
 800adf0:	2306      	movs	r3, #6
 800adf2:	e004      	b.n	800adfe <UART_SetConfig+0x15d6>
 800adf4:	2304      	movs	r3, #4
 800adf6:	e002      	b.n	800adfe <UART_SetConfig+0x15d6>
 800adf8:	2302      	movs	r3, #2
 800adfa:	e000      	b.n	800adfe <UART_SetConfig+0x15d6>
 800adfc:	2301      	movs	r3, #1
 800adfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae04:	005a      	lsls	r2, r3, #1
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	441a      	add	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae1a:	e2b0      	b.n	800b37e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae1c:	f7fb fefc 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 800ae20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d044      	beq.n	800aeb4 <UART_SetConfig+0x168c>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d03e      	beq.n	800aeb0 <UART_SetConfig+0x1688>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d038      	beq.n	800aeac <UART_SetConfig+0x1684>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d032      	beq.n	800aea8 <UART_SetConfig+0x1680>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d02c      	beq.n	800aea4 <UART_SetConfig+0x167c>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b05      	cmp	r3, #5
 800ae50:	d026      	beq.n	800aea0 <UART_SetConfig+0x1678>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d020      	beq.n	800ae9c <UART_SetConfig+0x1674>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	2b07      	cmp	r3, #7
 800ae60:	d01a      	beq.n	800ae98 <UART_SetConfig+0x1670>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d014      	beq.n	800ae94 <UART_SetConfig+0x166c>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d00e      	beq.n	800ae90 <UART_SetConfig+0x1668>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b0a      	cmp	r3, #10
 800ae78:	d008      	beq.n	800ae8c <UART_SetConfig+0x1664>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b0b      	cmp	r3, #11
 800ae80:	d102      	bne.n	800ae88 <UART_SetConfig+0x1660>
 800ae82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae86:	e016      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e014      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800ae8c:	2380      	movs	r3, #128	; 0x80
 800ae8e:	e012      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800ae90:	2340      	movs	r3, #64	; 0x40
 800ae92:	e010      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800ae94:	2320      	movs	r3, #32
 800ae96:	e00e      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800ae98:	2310      	movs	r3, #16
 800ae9a:	e00c      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	e00a      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800aea0:	230a      	movs	r3, #10
 800aea2:	e008      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800aea4:	2308      	movs	r3, #8
 800aea6:	e006      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800aea8:	2306      	movs	r3, #6
 800aeaa:	e004      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800aeac:	2304      	movs	r3, #4
 800aeae:	e002      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e000      	b.n	800aeb6 <UART_SetConfig+0x168e>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebc:	005a      	lsls	r2, r3, #1
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	085b      	lsrs	r3, r3, #1
 800aec4:	441a      	add	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aed2:	e254      	b.n	800b37e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aed4:	f107 0318 	add.w	r3, r7, #24
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fd f81f 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d044      	beq.n	800af72 <UART_SetConfig+0x174a>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d03e      	beq.n	800af6e <UART_SetConfig+0x1746>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d038      	beq.n	800af6a <UART_SetConfig+0x1742>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d032      	beq.n	800af66 <UART_SetConfig+0x173e>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	2b04      	cmp	r3, #4
 800af06:	d02c      	beq.n	800af62 <UART_SetConfig+0x173a>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b05      	cmp	r3, #5
 800af0e:	d026      	beq.n	800af5e <UART_SetConfig+0x1736>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b06      	cmp	r3, #6
 800af16:	d020      	beq.n	800af5a <UART_SetConfig+0x1732>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b07      	cmp	r3, #7
 800af1e:	d01a      	beq.n	800af56 <UART_SetConfig+0x172e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b08      	cmp	r3, #8
 800af26:	d014      	beq.n	800af52 <UART_SetConfig+0x172a>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b09      	cmp	r3, #9
 800af2e:	d00e      	beq.n	800af4e <UART_SetConfig+0x1726>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b0a      	cmp	r3, #10
 800af36:	d008      	beq.n	800af4a <UART_SetConfig+0x1722>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b0b      	cmp	r3, #11
 800af3e:	d102      	bne.n	800af46 <UART_SetConfig+0x171e>
 800af40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af44:	e016      	b.n	800af74 <UART_SetConfig+0x174c>
 800af46:	2301      	movs	r3, #1
 800af48:	e014      	b.n	800af74 <UART_SetConfig+0x174c>
 800af4a:	2380      	movs	r3, #128	; 0x80
 800af4c:	e012      	b.n	800af74 <UART_SetConfig+0x174c>
 800af4e:	2340      	movs	r3, #64	; 0x40
 800af50:	e010      	b.n	800af74 <UART_SetConfig+0x174c>
 800af52:	2320      	movs	r3, #32
 800af54:	e00e      	b.n	800af74 <UART_SetConfig+0x174c>
 800af56:	2310      	movs	r3, #16
 800af58:	e00c      	b.n	800af74 <UART_SetConfig+0x174c>
 800af5a:	230c      	movs	r3, #12
 800af5c:	e00a      	b.n	800af74 <UART_SetConfig+0x174c>
 800af5e:	230a      	movs	r3, #10
 800af60:	e008      	b.n	800af74 <UART_SetConfig+0x174c>
 800af62:	2308      	movs	r3, #8
 800af64:	e006      	b.n	800af74 <UART_SetConfig+0x174c>
 800af66:	2306      	movs	r3, #6
 800af68:	e004      	b.n	800af74 <UART_SetConfig+0x174c>
 800af6a:	2304      	movs	r3, #4
 800af6c:	e002      	b.n	800af74 <UART_SetConfig+0x174c>
 800af6e:	2302      	movs	r3, #2
 800af70:	e000      	b.n	800af74 <UART_SetConfig+0x174c>
 800af72:	2301      	movs	r3, #1
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	005a      	lsls	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	441a      	add	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af8e:	e1f6      	b.n	800b37e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af90:	f107 030c 	add.w	r3, r7, #12
 800af94:	4618      	mov	r0, r3
 800af96:	f7fd f90d 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d044      	beq.n	800b02e <UART_SetConfig+0x1806>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d03e      	beq.n	800b02a <UART_SetConfig+0x1802>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d038      	beq.n	800b026 <UART_SetConfig+0x17fe>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d032      	beq.n	800b022 <UART_SetConfig+0x17fa>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d02c      	beq.n	800b01e <UART_SetConfig+0x17f6>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	2b05      	cmp	r3, #5
 800afca:	d026      	beq.n	800b01a <UART_SetConfig+0x17f2>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	2b06      	cmp	r3, #6
 800afd2:	d020      	beq.n	800b016 <UART_SetConfig+0x17ee>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	2b07      	cmp	r3, #7
 800afda:	d01a      	beq.n	800b012 <UART_SetConfig+0x17ea>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	2b08      	cmp	r3, #8
 800afe2:	d014      	beq.n	800b00e <UART_SetConfig+0x17e6>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	2b09      	cmp	r3, #9
 800afea:	d00e      	beq.n	800b00a <UART_SetConfig+0x17e2>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	2b0a      	cmp	r3, #10
 800aff2:	d008      	beq.n	800b006 <UART_SetConfig+0x17de>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b0b      	cmp	r3, #11
 800affa:	d102      	bne.n	800b002 <UART_SetConfig+0x17da>
 800affc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b000:	e016      	b.n	800b030 <UART_SetConfig+0x1808>
 800b002:	2301      	movs	r3, #1
 800b004:	e014      	b.n	800b030 <UART_SetConfig+0x1808>
 800b006:	2380      	movs	r3, #128	; 0x80
 800b008:	e012      	b.n	800b030 <UART_SetConfig+0x1808>
 800b00a:	2340      	movs	r3, #64	; 0x40
 800b00c:	e010      	b.n	800b030 <UART_SetConfig+0x1808>
 800b00e:	2320      	movs	r3, #32
 800b010:	e00e      	b.n	800b030 <UART_SetConfig+0x1808>
 800b012:	2310      	movs	r3, #16
 800b014:	e00c      	b.n	800b030 <UART_SetConfig+0x1808>
 800b016:	230c      	movs	r3, #12
 800b018:	e00a      	b.n	800b030 <UART_SetConfig+0x1808>
 800b01a:	230a      	movs	r3, #10
 800b01c:	e008      	b.n	800b030 <UART_SetConfig+0x1808>
 800b01e:	2308      	movs	r3, #8
 800b020:	e006      	b.n	800b030 <UART_SetConfig+0x1808>
 800b022:	2306      	movs	r3, #6
 800b024:	e004      	b.n	800b030 <UART_SetConfig+0x1808>
 800b026:	2304      	movs	r3, #4
 800b028:	e002      	b.n	800b030 <UART_SetConfig+0x1808>
 800b02a:	2302      	movs	r3, #2
 800b02c:	e000      	b.n	800b030 <UART_SetConfig+0x1808>
 800b02e:	2301      	movs	r3, #1
 800b030:	fbb2 f3f3 	udiv	r3, r2, r3
 800b034:	005a      	lsls	r2, r3, #1
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	085b      	lsrs	r3, r3, #1
 800b03c:	441a      	add	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	fbb2 f3f3 	udiv	r3, r2, r3
 800b046:	b29b      	uxth	r3, r3
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b04a:	e198      	b.n	800b37e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b04c:	4b87      	ldr	r3, [pc, #540]	; (800b26c <UART_SetConfig+0x1a44>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d05e      	beq.n	800b116 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b058:	4b84      	ldr	r3, [pc, #528]	; (800b26c <UART_SetConfig+0x1a44>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	08db      	lsrs	r3, r3, #3
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	4a83      	ldr	r2, [pc, #524]	; (800b270 <UART_SetConfig+0x1a48>)
 800b064:	40da      	lsrs	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d044      	beq.n	800b0f8 <UART_SetConfig+0x18d0>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	2b01      	cmp	r3, #1
 800b074:	d03e      	beq.n	800b0f4 <UART_SetConfig+0x18cc>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d038      	beq.n	800b0f0 <UART_SetConfig+0x18c8>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	2b03      	cmp	r3, #3
 800b084:	d032      	beq.n	800b0ec <UART_SetConfig+0x18c4>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d02c      	beq.n	800b0e8 <UART_SetConfig+0x18c0>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b05      	cmp	r3, #5
 800b094:	d026      	beq.n	800b0e4 <UART_SetConfig+0x18bc>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b06      	cmp	r3, #6
 800b09c:	d020      	beq.n	800b0e0 <UART_SetConfig+0x18b8>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b07      	cmp	r3, #7
 800b0a4:	d01a      	beq.n	800b0dc <UART_SetConfig+0x18b4>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d014      	beq.n	800b0d8 <UART_SetConfig+0x18b0>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	2b09      	cmp	r3, #9
 800b0b4:	d00e      	beq.n	800b0d4 <UART_SetConfig+0x18ac>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	2b0a      	cmp	r3, #10
 800b0bc:	d008      	beq.n	800b0d0 <UART_SetConfig+0x18a8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b0b      	cmp	r3, #11
 800b0c4:	d102      	bne.n	800b0cc <UART_SetConfig+0x18a4>
 800b0c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ca:	e016      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e014      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0d0:	2380      	movs	r3, #128	; 0x80
 800b0d2:	e012      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0d4:	2340      	movs	r3, #64	; 0x40
 800b0d6:	e010      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0d8:	2320      	movs	r3, #32
 800b0da:	e00e      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0dc:	2310      	movs	r3, #16
 800b0de:	e00c      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	e00a      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0e4:	230a      	movs	r3, #10
 800b0e6:	e008      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	e006      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0ec:	2306      	movs	r3, #6
 800b0ee:	e004      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	e002      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e000      	b.n	800b0fa <UART_SetConfig+0x18d2>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fe:	005a      	lsls	r2, r3, #1
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	085b      	lsrs	r3, r3, #1
 800b106:	441a      	add	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b110:	b29b      	uxth	r3, r3
 800b112:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b114:	e133      	b.n	800b37e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d043      	beq.n	800b1a6 <UART_SetConfig+0x197e>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	2b01      	cmp	r3, #1
 800b124:	d03d      	beq.n	800b1a2 <UART_SetConfig+0x197a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d037      	beq.n	800b19e <UART_SetConfig+0x1976>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	2b03      	cmp	r3, #3
 800b134:	d031      	beq.n	800b19a <UART_SetConfig+0x1972>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d02b      	beq.n	800b196 <UART_SetConfig+0x196e>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b05      	cmp	r3, #5
 800b144:	d025      	beq.n	800b192 <UART_SetConfig+0x196a>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b06      	cmp	r3, #6
 800b14c:	d01f      	beq.n	800b18e <UART_SetConfig+0x1966>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b07      	cmp	r3, #7
 800b154:	d019      	beq.n	800b18a <UART_SetConfig+0x1962>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b08      	cmp	r3, #8
 800b15c:	d013      	beq.n	800b186 <UART_SetConfig+0x195e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b09      	cmp	r3, #9
 800b164:	d00d      	beq.n	800b182 <UART_SetConfig+0x195a>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b0a      	cmp	r3, #10
 800b16c:	d007      	beq.n	800b17e <UART_SetConfig+0x1956>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b0b      	cmp	r3, #11
 800b174:	d101      	bne.n	800b17a <UART_SetConfig+0x1952>
 800b176:	4b3f      	ldr	r3, [pc, #252]	; (800b274 <UART_SetConfig+0x1a4c>)
 800b178:	e016      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b17a:	4b3f      	ldr	r3, [pc, #252]	; (800b278 <UART_SetConfig+0x1a50>)
 800b17c:	e014      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b17e:	4b3f      	ldr	r3, [pc, #252]	; (800b27c <UART_SetConfig+0x1a54>)
 800b180:	e012      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b182:	4b3f      	ldr	r3, [pc, #252]	; (800b280 <UART_SetConfig+0x1a58>)
 800b184:	e010      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b186:	4b3f      	ldr	r3, [pc, #252]	; (800b284 <UART_SetConfig+0x1a5c>)
 800b188:	e00e      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b18a:	4b3f      	ldr	r3, [pc, #252]	; (800b288 <UART_SetConfig+0x1a60>)
 800b18c:	e00c      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b18e:	4b3f      	ldr	r3, [pc, #252]	; (800b28c <UART_SetConfig+0x1a64>)
 800b190:	e00a      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b192:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <UART_SetConfig+0x1a68>)
 800b194:	e008      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b196:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <UART_SetConfig+0x1a6c>)
 800b198:	e006      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b19a:	4b3f      	ldr	r3, [pc, #252]	; (800b298 <UART_SetConfig+0x1a70>)
 800b19c:	e004      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b19e:	4b3f      	ldr	r3, [pc, #252]	; (800b29c <UART_SetConfig+0x1a74>)
 800b1a0:	e002      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b1a2:	4b33      	ldr	r3, [pc, #204]	; (800b270 <UART_SetConfig+0x1a48>)
 800b1a4:	e000      	b.n	800b1a8 <UART_SetConfig+0x1980>
 800b1a6:	4b34      	ldr	r3, [pc, #208]	; (800b278 <UART_SetConfig+0x1a50>)
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	6852      	ldr	r2, [r2, #4]
 800b1ac:	0852      	lsrs	r2, r2, #1
 800b1ae:	441a      	add	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1bc:	e0df      	b.n	800b37e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d045      	beq.n	800b252 <UART_SetConfig+0x1a2a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d03f      	beq.n	800b24e <UART_SetConfig+0x1a26>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d039      	beq.n	800b24a <UART_SetConfig+0x1a22>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d033      	beq.n	800b246 <UART_SetConfig+0x1a1e>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d02d      	beq.n	800b242 <UART_SetConfig+0x1a1a>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d027      	beq.n	800b23e <UART_SetConfig+0x1a16>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b06      	cmp	r3, #6
 800b1f4:	d021      	beq.n	800b23a <UART_SetConfig+0x1a12>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b07      	cmp	r3, #7
 800b1fc:	d01b      	beq.n	800b236 <UART_SetConfig+0x1a0e>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	2b08      	cmp	r3, #8
 800b204:	d015      	beq.n	800b232 <UART_SetConfig+0x1a0a>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b09      	cmp	r3, #9
 800b20c:	d00f      	beq.n	800b22e <UART_SetConfig+0x1a06>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b0a      	cmp	r3, #10
 800b214:	d008      	beq.n	800b228 <UART_SetConfig+0x1a00>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2b0b      	cmp	r3, #11
 800b21c:	d102      	bne.n	800b224 <UART_SetConfig+0x19fc>
 800b21e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b222:	e017      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b224:	4b18      	ldr	r3, [pc, #96]	; (800b288 <UART_SetConfig+0x1a60>)
 800b226:	e015      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b228:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b22c:	e012      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b22e:	4b1c      	ldr	r3, [pc, #112]	; (800b2a0 <UART_SetConfig+0x1a78>)
 800b230:	e010      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b232:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <UART_SetConfig+0x1a7c>)
 800b234:	e00e      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b236:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <UART_SetConfig+0x1a4c>)
 800b238:	e00c      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b23a:	4b1b      	ldr	r3, [pc, #108]	; (800b2a8 <UART_SetConfig+0x1a80>)
 800b23c:	e00a      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b23e:	4b1b      	ldr	r3, [pc, #108]	; (800b2ac <UART_SetConfig+0x1a84>)
 800b240:	e008      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b242:	4b0e      	ldr	r3, [pc, #56]	; (800b27c <UART_SetConfig+0x1a54>)
 800b244:	e006      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b246:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <UART_SetConfig+0x1a88>)
 800b248:	e004      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b24a:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <UART_SetConfig+0x1a58>)
 800b24c:	e002      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b24e:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <UART_SetConfig+0x1a5c>)
 800b250:	e000      	b.n	800b254 <UART_SetConfig+0x1a2c>
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <UART_SetConfig+0x1a60>)
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6852      	ldr	r2, [r2, #4]
 800b258:	0852      	lsrs	r2, r2, #1
 800b25a:	441a      	add	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	fbb2 f3f3 	udiv	r3, r2, r3
 800b264:	b29b      	uxth	r3, r3
 800b266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b268:	e089      	b.n	800b37e <UART_SetConfig+0x1b56>
 800b26a:	bf00      	nop
 800b26c:	58024400 	.word	0x58024400
 800b270:	03d09000 	.word	0x03d09000
 800b274:	0007a120 	.word	0x0007a120
 800b278:	07a12000 	.word	0x07a12000
 800b27c:	000f4240 	.word	0x000f4240
 800b280:	001e8480 	.word	0x001e8480
 800b284:	003d0900 	.word	0x003d0900
 800b288:	007a1200 	.word	0x007a1200
 800b28c:	00a2c2aa 	.word	0x00a2c2aa
 800b290:	00c35000 	.word	0x00c35000
 800b294:	00f42400 	.word	0x00f42400
 800b298:	01458554 	.word	0x01458554
 800b29c:	01e84800 	.word	0x01e84800
 800b2a0:	0001e848 	.word	0x0001e848
 800b2a4:	0003d090 	.word	0x0003d090
 800b2a8:	000a2c2a 	.word	0x000a2c2a
 800b2ac:	000c3500 	.word	0x000c3500
 800b2b0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d04f      	beq.n	800b35c <UART_SetConfig+0x1b34>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d048      	beq.n	800b356 <UART_SetConfig+0x1b2e>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d041      	beq.n	800b350 <UART_SetConfig+0x1b28>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d03a      	beq.n	800b34a <UART_SetConfig+0x1b22>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	2b04      	cmp	r3, #4
 800b2da:	d033      	beq.n	800b344 <UART_SetConfig+0x1b1c>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e0:	2b05      	cmp	r3, #5
 800b2e2:	d02c      	beq.n	800b33e <UART_SetConfig+0x1b16>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e8:	2b06      	cmp	r3, #6
 800b2ea:	d025      	beq.n	800b338 <UART_SetConfig+0x1b10>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	2b07      	cmp	r3, #7
 800b2f2:	d01e      	beq.n	800b332 <UART_SetConfig+0x1b0a>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d017      	beq.n	800b32c <UART_SetConfig+0x1b04>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	2b09      	cmp	r3, #9
 800b302:	d010      	beq.n	800b326 <UART_SetConfig+0x1afe>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	2b0a      	cmp	r3, #10
 800b30a:	d009      	beq.n	800b320 <UART_SetConfig+0x1af8>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	2b0b      	cmp	r3, #11
 800b312:	d102      	bne.n	800b31a <UART_SetConfig+0x1af2>
 800b314:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b318:	e022      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b31a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b31e:	e01f      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b324:	e01c      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32a:	e019      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b32c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b330:	e016      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b336:	e013      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b338:	f241 5354 	movw	r3, #5460	; 0x1554
 800b33c:	e010      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b33e:	f641 1398 	movw	r3, #6552	; 0x1998
 800b342:	e00d      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b348:	e00a      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b34a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b34e:	e007      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b354:	e004      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b35a:	e001      	b.n	800b360 <UART_SetConfig+0x1b38>
 800b35c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6852      	ldr	r2, [r2, #4]
 800b364:	0852      	lsrs	r2, r2, #1
 800b366:	441a      	add	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b370:	b29b      	uxth	r3, r3
 800b372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b374:	e003      	b.n	800b37e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b37c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	2b0f      	cmp	r3, #15
 800b382:	d916      	bls.n	800b3b2 <UART_SetConfig+0x1b8a>
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38a:	d212      	bcs.n	800b3b2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	b29b      	uxth	r3, r3
 800b390:	f023 030f 	bic.w	r3, r3, #15
 800b394:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b398:	085b      	lsrs	r3, r3, #1
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3ae:	60da      	str	r2, [r3, #12]
 800b3b0:	e3a3      	b.n	800bafa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b8:	e39f      	b.n	800bafa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b3ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3be:	2b40      	cmp	r3, #64	; 0x40
 800b3c0:	f200 8388 	bhi.w	800bad4 <UART_SetConfig+0x22ac>
 800b3c4:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <UART_SetConfig+0x1ba4>)
 800b3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ca:	bf00      	nop
 800b3cc:	0800b4d1 	.word	0x0800b4d1
 800b3d0:	0800b587 	.word	0x0800b587
 800b3d4:	0800bad5 	.word	0x0800bad5
 800b3d8:	0800bad5 	.word	0x0800bad5
 800b3dc:	0800b63d 	.word	0x0800b63d
 800b3e0:	0800bad5 	.word	0x0800bad5
 800b3e4:	0800bad5 	.word	0x0800bad5
 800b3e8:	0800bad5 	.word	0x0800bad5
 800b3ec:	0800b6f7 	.word	0x0800b6f7
 800b3f0:	0800bad5 	.word	0x0800bad5
 800b3f4:	0800bad5 	.word	0x0800bad5
 800b3f8:	0800bad5 	.word	0x0800bad5
 800b3fc:	0800bad5 	.word	0x0800bad5
 800b400:	0800bad5 	.word	0x0800bad5
 800b404:	0800bad5 	.word	0x0800bad5
 800b408:	0800bad5 	.word	0x0800bad5
 800b40c:	0800b7b1 	.word	0x0800b7b1
 800b410:	0800bad5 	.word	0x0800bad5
 800b414:	0800bad5 	.word	0x0800bad5
 800b418:	0800bad5 	.word	0x0800bad5
 800b41c:	0800bad5 	.word	0x0800bad5
 800b420:	0800bad5 	.word	0x0800bad5
 800b424:	0800bad5 	.word	0x0800bad5
 800b428:	0800bad5 	.word	0x0800bad5
 800b42c:	0800bad5 	.word	0x0800bad5
 800b430:	0800bad5 	.word	0x0800bad5
 800b434:	0800bad5 	.word	0x0800bad5
 800b438:	0800bad5 	.word	0x0800bad5
 800b43c:	0800bad5 	.word	0x0800bad5
 800b440:	0800bad5 	.word	0x0800bad5
 800b444:	0800bad5 	.word	0x0800bad5
 800b448:	0800bad5 	.word	0x0800bad5
 800b44c:	0800b921 	.word	0x0800b921
 800b450:	0800bad5 	.word	0x0800bad5
 800b454:	0800bad5 	.word	0x0800bad5
 800b458:	0800bad5 	.word	0x0800bad5
 800b45c:	0800bad5 	.word	0x0800bad5
 800b460:	0800bad5 	.word	0x0800bad5
 800b464:	0800bad5 	.word	0x0800bad5
 800b468:	0800bad5 	.word	0x0800bad5
 800b46c:	0800bad5 	.word	0x0800bad5
 800b470:	0800bad5 	.word	0x0800bad5
 800b474:	0800bad5 	.word	0x0800bad5
 800b478:	0800bad5 	.word	0x0800bad5
 800b47c:	0800bad5 	.word	0x0800bad5
 800b480:	0800bad5 	.word	0x0800bad5
 800b484:	0800bad5 	.word	0x0800bad5
 800b488:	0800bad5 	.word	0x0800bad5
 800b48c:	0800bad5 	.word	0x0800bad5
 800b490:	0800bad5 	.word	0x0800bad5
 800b494:	0800bad5 	.word	0x0800bad5
 800b498:	0800bad5 	.word	0x0800bad5
 800b49c:	0800bad5 	.word	0x0800bad5
 800b4a0:	0800bad5 	.word	0x0800bad5
 800b4a4:	0800bad5 	.word	0x0800bad5
 800b4a8:	0800bad5 	.word	0x0800bad5
 800b4ac:	0800bad5 	.word	0x0800bad5
 800b4b0:	0800bad5 	.word	0x0800bad5
 800b4b4:	0800bad5 	.word	0x0800bad5
 800b4b8:	0800bad5 	.word	0x0800bad5
 800b4bc:	0800bad5 	.word	0x0800bad5
 800b4c0:	0800bad5 	.word	0x0800bad5
 800b4c4:	0800bad5 	.word	0x0800bad5
 800b4c8:	0800bad5 	.word	0x0800bad5
 800b4cc:	0800ba15 	.word	0x0800ba15
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4d0:	f7fb fb8c 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 800b4d4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d044      	beq.n	800b568 <UART_SetConfig+0x1d40>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d03e      	beq.n	800b564 <UART_SetConfig+0x1d3c>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d038      	beq.n	800b560 <UART_SetConfig+0x1d38>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d032      	beq.n	800b55c <UART_SetConfig+0x1d34>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d02c      	beq.n	800b558 <UART_SetConfig+0x1d30>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b05      	cmp	r3, #5
 800b504:	d026      	beq.n	800b554 <UART_SetConfig+0x1d2c>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b06      	cmp	r3, #6
 800b50c:	d020      	beq.n	800b550 <UART_SetConfig+0x1d28>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b07      	cmp	r3, #7
 800b514:	d01a      	beq.n	800b54c <UART_SetConfig+0x1d24>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d014      	beq.n	800b548 <UART_SetConfig+0x1d20>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	2b09      	cmp	r3, #9
 800b524:	d00e      	beq.n	800b544 <UART_SetConfig+0x1d1c>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	2b0a      	cmp	r3, #10
 800b52c:	d008      	beq.n	800b540 <UART_SetConfig+0x1d18>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	2b0b      	cmp	r3, #11
 800b534:	d102      	bne.n	800b53c <UART_SetConfig+0x1d14>
 800b536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b53a:	e016      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b53c:	2301      	movs	r3, #1
 800b53e:	e014      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	e012      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b544:	2340      	movs	r3, #64	; 0x40
 800b546:	e010      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b548:	2320      	movs	r3, #32
 800b54a:	e00e      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b54c:	2310      	movs	r3, #16
 800b54e:	e00c      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b550:	230c      	movs	r3, #12
 800b552:	e00a      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b554:	230a      	movs	r3, #10
 800b556:	e008      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b558:	2308      	movs	r3, #8
 800b55a:	e006      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b55c:	2306      	movs	r3, #6
 800b55e:	e004      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b560:	2304      	movs	r3, #4
 800b562:	e002      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b564:	2302      	movs	r3, #2
 800b566:	e000      	b.n	800b56a <UART_SetConfig+0x1d42>
 800b568:	2301      	movs	r3, #1
 800b56a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b56c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	085b      	lsrs	r3, r3, #1
 800b576:	441a      	add	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b580:	b29b      	uxth	r3, r3
 800b582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b584:	e2aa      	b.n	800badc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b586:	f7fb fb47 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 800b58a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b590:	2b00      	cmp	r3, #0
 800b592:	d044      	beq.n	800b61e <UART_SetConfig+0x1df6>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d03e      	beq.n	800b61a <UART_SetConfig+0x1df2>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d038      	beq.n	800b616 <UART_SetConfig+0x1dee>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d032      	beq.n	800b612 <UART_SetConfig+0x1dea>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d02c      	beq.n	800b60e <UART_SetConfig+0x1de6>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	2b05      	cmp	r3, #5
 800b5ba:	d026      	beq.n	800b60a <UART_SetConfig+0x1de2>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b06      	cmp	r3, #6
 800b5c2:	d020      	beq.n	800b606 <UART_SetConfig+0x1dde>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	2b07      	cmp	r3, #7
 800b5ca:	d01a      	beq.n	800b602 <UART_SetConfig+0x1dda>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d014      	beq.n	800b5fe <UART_SetConfig+0x1dd6>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	2b09      	cmp	r3, #9
 800b5da:	d00e      	beq.n	800b5fa <UART_SetConfig+0x1dd2>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	2b0a      	cmp	r3, #10
 800b5e2:	d008      	beq.n	800b5f6 <UART_SetConfig+0x1dce>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	2b0b      	cmp	r3, #11
 800b5ea:	d102      	bne.n	800b5f2 <UART_SetConfig+0x1dca>
 800b5ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f0:	e016      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e014      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b5f6:	2380      	movs	r3, #128	; 0x80
 800b5f8:	e012      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b5fa:	2340      	movs	r3, #64	; 0x40
 800b5fc:	e010      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b5fe:	2320      	movs	r3, #32
 800b600:	e00e      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b602:	2310      	movs	r3, #16
 800b604:	e00c      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b606:	230c      	movs	r3, #12
 800b608:	e00a      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b60a:	230a      	movs	r3, #10
 800b60c:	e008      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b60e:	2308      	movs	r3, #8
 800b610:	e006      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b612:	2306      	movs	r3, #6
 800b614:	e004      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b616:	2304      	movs	r3, #4
 800b618:	e002      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b61a:	2302      	movs	r3, #2
 800b61c:	e000      	b.n	800b620 <UART_SetConfig+0x1df8>
 800b61e:	2301      	movs	r3, #1
 800b620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b622:	fbb2 f2f3 	udiv	r2, r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	085b      	lsrs	r3, r3, #1
 800b62c:	441a      	add	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	fbb2 f3f3 	udiv	r3, r2, r3
 800b636:	b29b      	uxth	r3, r3
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b63a:	e24f      	b.n	800badc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b63c:	f107 0318 	add.w	r3, r7, #24
 800b640:	4618      	mov	r0, r3
 800b642:	f7fc fc6b 	bl	8007f1c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d044      	beq.n	800b6da <UART_SetConfig+0x1eb2>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b654:	2b01      	cmp	r3, #1
 800b656:	d03e      	beq.n	800b6d6 <UART_SetConfig+0x1eae>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d038      	beq.n	800b6d2 <UART_SetConfig+0x1eaa>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	2b03      	cmp	r3, #3
 800b666:	d032      	beq.n	800b6ce <UART_SetConfig+0x1ea6>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d02c      	beq.n	800b6ca <UART_SetConfig+0x1ea2>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	2b05      	cmp	r3, #5
 800b676:	d026      	beq.n	800b6c6 <UART_SetConfig+0x1e9e>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b06      	cmp	r3, #6
 800b67e:	d020      	beq.n	800b6c2 <UART_SetConfig+0x1e9a>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b07      	cmp	r3, #7
 800b686:	d01a      	beq.n	800b6be <UART_SetConfig+0x1e96>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b08      	cmp	r3, #8
 800b68e:	d014      	beq.n	800b6ba <UART_SetConfig+0x1e92>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b09      	cmp	r3, #9
 800b696:	d00e      	beq.n	800b6b6 <UART_SetConfig+0x1e8e>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b0a      	cmp	r3, #10
 800b69e:	d008      	beq.n	800b6b2 <UART_SetConfig+0x1e8a>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b0b      	cmp	r3, #11
 800b6a6:	d102      	bne.n	800b6ae <UART_SetConfig+0x1e86>
 800b6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ac:	e016      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e014      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6b2:	2380      	movs	r3, #128	; 0x80
 800b6b4:	e012      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6b6:	2340      	movs	r3, #64	; 0x40
 800b6b8:	e010      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	e00e      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6be:	2310      	movs	r3, #16
 800b6c0:	e00c      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6c2:	230c      	movs	r3, #12
 800b6c4:	e00a      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6c6:	230a      	movs	r3, #10
 800b6c8:	e008      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6ca:	2308      	movs	r3, #8
 800b6cc:	e006      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6ce:	2306      	movs	r3, #6
 800b6d0:	e004      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6d2:	2304      	movs	r3, #4
 800b6d4:	e002      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	e000      	b.n	800b6dc <UART_SetConfig+0x1eb4>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	441a      	add	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6f4:	e1f2      	b.n	800badc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6f6:	f107 030c 	add.w	r3, r7, #12
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fc fd5a 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	2b00      	cmp	r3, #0
 800b708:	d044      	beq.n	800b794 <UART_SetConfig+0x1f6c>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d03e      	beq.n	800b790 <UART_SetConfig+0x1f68>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b716:	2b02      	cmp	r3, #2
 800b718:	d038      	beq.n	800b78c <UART_SetConfig+0x1f64>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d032      	beq.n	800b788 <UART_SetConfig+0x1f60>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	2b04      	cmp	r3, #4
 800b728:	d02c      	beq.n	800b784 <UART_SetConfig+0x1f5c>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	2b05      	cmp	r3, #5
 800b730:	d026      	beq.n	800b780 <UART_SetConfig+0x1f58>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	2b06      	cmp	r3, #6
 800b738:	d020      	beq.n	800b77c <UART_SetConfig+0x1f54>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	2b07      	cmp	r3, #7
 800b740:	d01a      	beq.n	800b778 <UART_SetConfig+0x1f50>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2b08      	cmp	r3, #8
 800b748:	d014      	beq.n	800b774 <UART_SetConfig+0x1f4c>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74e:	2b09      	cmp	r3, #9
 800b750:	d00e      	beq.n	800b770 <UART_SetConfig+0x1f48>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b0a      	cmp	r3, #10
 800b758:	d008      	beq.n	800b76c <UART_SetConfig+0x1f44>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	2b0b      	cmp	r3, #11
 800b760:	d102      	bne.n	800b768 <UART_SetConfig+0x1f40>
 800b762:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b766:	e016      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b768:	2301      	movs	r3, #1
 800b76a:	e014      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b76c:	2380      	movs	r3, #128	; 0x80
 800b76e:	e012      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b770:	2340      	movs	r3, #64	; 0x40
 800b772:	e010      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b774:	2320      	movs	r3, #32
 800b776:	e00e      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b778:	2310      	movs	r3, #16
 800b77a:	e00c      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b77c:	230c      	movs	r3, #12
 800b77e:	e00a      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b780:	230a      	movs	r3, #10
 800b782:	e008      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b784:	2308      	movs	r3, #8
 800b786:	e006      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b788:	2306      	movs	r3, #6
 800b78a:	e004      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b78c:	2304      	movs	r3, #4
 800b78e:	e002      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b790:	2302      	movs	r3, #2
 800b792:	e000      	b.n	800b796 <UART_SetConfig+0x1f6e>
 800b794:	2301      	movs	r3, #1
 800b796:	fbb2 f2f3 	udiv	r2, r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	085b      	lsrs	r3, r3, #1
 800b7a0:	441a      	add	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7ae:	e195      	b.n	800badc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b0:	4b87      	ldr	r3, [pc, #540]	; (800b9d0 <UART_SetConfig+0x21a8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0320 	and.w	r3, r3, #32
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d05d      	beq.n	800b878 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7bc:	4b84      	ldr	r3, [pc, #528]	; (800b9d0 <UART_SetConfig+0x21a8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	08db      	lsrs	r3, r3, #3
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	4a83      	ldr	r2, [pc, #524]	; (800b9d4 <UART_SetConfig+0x21ac>)
 800b7c8:	40da      	lsrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d044      	beq.n	800b85c <UART_SetConfig+0x2034>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d03e      	beq.n	800b858 <UART_SetConfig+0x2030>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d038      	beq.n	800b854 <UART_SetConfig+0x202c>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d032      	beq.n	800b850 <UART_SetConfig+0x2028>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d02c      	beq.n	800b84c <UART_SetConfig+0x2024>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	2b05      	cmp	r3, #5
 800b7f8:	d026      	beq.n	800b848 <UART_SetConfig+0x2020>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2b06      	cmp	r3, #6
 800b800:	d020      	beq.n	800b844 <UART_SetConfig+0x201c>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2b07      	cmp	r3, #7
 800b808:	d01a      	beq.n	800b840 <UART_SetConfig+0x2018>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	2b08      	cmp	r3, #8
 800b810:	d014      	beq.n	800b83c <UART_SetConfig+0x2014>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b09      	cmp	r3, #9
 800b818:	d00e      	beq.n	800b838 <UART_SetConfig+0x2010>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	2b0a      	cmp	r3, #10
 800b820:	d008      	beq.n	800b834 <UART_SetConfig+0x200c>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	2b0b      	cmp	r3, #11
 800b828:	d102      	bne.n	800b830 <UART_SetConfig+0x2008>
 800b82a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82e:	e016      	b.n	800b85e <UART_SetConfig+0x2036>
 800b830:	2301      	movs	r3, #1
 800b832:	e014      	b.n	800b85e <UART_SetConfig+0x2036>
 800b834:	2380      	movs	r3, #128	; 0x80
 800b836:	e012      	b.n	800b85e <UART_SetConfig+0x2036>
 800b838:	2340      	movs	r3, #64	; 0x40
 800b83a:	e010      	b.n	800b85e <UART_SetConfig+0x2036>
 800b83c:	2320      	movs	r3, #32
 800b83e:	e00e      	b.n	800b85e <UART_SetConfig+0x2036>
 800b840:	2310      	movs	r3, #16
 800b842:	e00c      	b.n	800b85e <UART_SetConfig+0x2036>
 800b844:	230c      	movs	r3, #12
 800b846:	e00a      	b.n	800b85e <UART_SetConfig+0x2036>
 800b848:	230a      	movs	r3, #10
 800b84a:	e008      	b.n	800b85e <UART_SetConfig+0x2036>
 800b84c:	2308      	movs	r3, #8
 800b84e:	e006      	b.n	800b85e <UART_SetConfig+0x2036>
 800b850:	2306      	movs	r3, #6
 800b852:	e004      	b.n	800b85e <UART_SetConfig+0x2036>
 800b854:	2304      	movs	r3, #4
 800b856:	e002      	b.n	800b85e <UART_SetConfig+0x2036>
 800b858:	2302      	movs	r3, #2
 800b85a:	e000      	b.n	800b85e <UART_SetConfig+0x2036>
 800b85c:	2301      	movs	r3, #1
 800b85e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	441a      	add	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b872:	b29b      	uxth	r3, r3
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b876:	e131      	b.n	800badc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d043      	beq.n	800b908 <UART_SetConfig+0x20e0>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	2b01      	cmp	r3, #1
 800b886:	d03d      	beq.n	800b904 <UART_SetConfig+0x20dc>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d037      	beq.n	800b900 <UART_SetConfig+0x20d8>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	2b03      	cmp	r3, #3
 800b896:	d031      	beq.n	800b8fc <UART_SetConfig+0x20d4>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d02b      	beq.n	800b8f8 <UART_SetConfig+0x20d0>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b05      	cmp	r3, #5
 800b8a6:	d025      	beq.n	800b8f4 <UART_SetConfig+0x20cc>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b06      	cmp	r3, #6
 800b8ae:	d01f      	beq.n	800b8f0 <UART_SetConfig+0x20c8>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	2b07      	cmp	r3, #7
 800b8b6:	d019      	beq.n	800b8ec <UART_SetConfig+0x20c4>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b08      	cmp	r3, #8
 800b8be:	d013      	beq.n	800b8e8 <UART_SetConfig+0x20c0>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	2b09      	cmp	r3, #9
 800b8c6:	d00d      	beq.n	800b8e4 <UART_SetConfig+0x20bc>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	2b0a      	cmp	r3, #10
 800b8ce:	d007      	beq.n	800b8e0 <UART_SetConfig+0x20b8>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b0b      	cmp	r3, #11
 800b8d6:	d101      	bne.n	800b8dc <UART_SetConfig+0x20b4>
 800b8d8:	4b3f      	ldr	r3, [pc, #252]	; (800b9d8 <UART_SetConfig+0x21b0>)
 800b8da:	e016      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8dc:	4b3d      	ldr	r3, [pc, #244]	; (800b9d4 <UART_SetConfig+0x21ac>)
 800b8de:	e014      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8e0:	4b3e      	ldr	r3, [pc, #248]	; (800b9dc <UART_SetConfig+0x21b4>)
 800b8e2:	e012      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8e4:	4b3e      	ldr	r3, [pc, #248]	; (800b9e0 <UART_SetConfig+0x21b8>)
 800b8e6:	e010      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8e8:	4b3e      	ldr	r3, [pc, #248]	; (800b9e4 <UART_SetConfig+0x21bc>)
 800b8ea:	e00e      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8ec:	4b3e      	ldr	r3, [pc, #248]	; (800b9e8 <UART_SetConfig+0x21c0>)
 800b8ee:	e00c      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8f0:	4b3e      	ldr	r3, [pc, #248]	; (800b9ec <UART_SetConfig+0x21c4>)
 800b8f2:	e00a      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8f4:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <UART_SetConfig+0x21c8>)
 800b8f6:	e008      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	; (800b9f4 <UART_SetConfig+0x21cc>)
 800b8fa:	e006      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b8fc:	4b3e      	ldr	r3, [pc, #248]	; (800b9f8 <UART_SetConfig+0x21d0>)
 800b8fe:	e004      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b900:	4b3e      	ldr	r3, [pc, #248]	; (800b9fc <UART_SetConfig+0x21d4>)
 800b902:	e002      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b904:	4b3e      	ldr	r3, [pc, #248]	; (800ba00 <UART_SetConfig+0x21d8>)
 800b906:	e000      	b.n	800b90a <UART_SetConfig+0x20e2>
 800b908:	4b32      	ldr	r3, [pc, #200]	; (800b9d4 <UART_SetConfig+0x21ac>)
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6852      	ldr	r2, [r2, #4]
 800b90e:	0852      	lsrs	r2, r2, #1
 800b910:	441a      	add	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b91e:	e0dd      	b.n	800badc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d046      	beq.n	800b9b6 <UART_SetConfig+0x218e>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d040      	beq.n	800b9b2 <UART_SetConfig+0x218a>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	2b02      	cmp	r3, #2
 800b936:	d03a      	beq.n	800b9ae <UART_SetConfig+0x2186>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d034      	beq.n	800b9aa <UART_SetConfig+0x2182>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	2b04      	cmp	r3, #4
 800b946:	d02e      	beq.n	800b9a6 <UART_SetConfig+0x217e>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b05      	cmp	r3, #5
 800b94e:	d028      	beq.n	800b9a2 <UART_SetConfig+0x217a>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	2b06      	cmp	r3, #6
 800b956:	d022      	beq.n	800b99e <UART_SetConfig+0x2176>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2b07      	cmp	r3, #7
 800b95e:	d01c      	beq.n	800b99a <UART_SetConfig+0x2172>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b08      	cmp	r3, #8
 800b966:	d016      	beq.n	800b996 <UART_SetConfig+0x216e>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b09      	cmp	r3, #9
 800b96e:	d00f      	beq.n	800b990 <UART_SetConfig+0x2168>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b0a      	cmp	r3, #10
 800b976:	d008      	beq.n	800b98a <UART_SetConfig+0x2162>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b0b      	cmp	r3, #11
 800b97e:	d102      	bne.n	800b986 <UART_SetConfig+0x215e>
 800b980:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b984:	e018      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b986:	4b18      	ldr	r3, [pc, #96]	; (800b9e8 <UART_SetConfig+0x21c0>)
 800b988:	e016      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b98a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b98e:	e013      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b990:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b994:	e010      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b996:	4b1b      	ldr	r3, [pc, #108]	; (800ba04 <UART_SetConfig+0x21dc>)
 800b998:	e00e      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b99a:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <UART_SetConfig+0x21b0>)
 800b99c:	e00c      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b99e:	4b1a      	ldr	r3, [pc, #104]	; (800ba08 <UART_SetConfig+0x21e0>)
 800b9a0:	e00a      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <UART_SetConfig+0x21e4>)
 800b9a4:	e008      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <UART_SetConfig+0x21b4>)
 800b9a8:	e006      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b9aa:	4b19      	ldr	r3, [pc, #100]	; (800ba10 <UART_SetConfig+0x21e8>)
 800b9ac:	e004      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <UART_SetConfig+0x21b8>)
 800b9b0:	e002      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <UART_SetConfig+0x21bc>)
 800b9b4:	e000      	b.n	800b9b8 <UART_SetConfig+0x2190>
 800b9b6:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <UART_SetConfig+0x21c0>)
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6852      	ldr	r2, [r2, #4]
 800b9bc:	0852      	lsrs	r2, r2, #1
 800b9be:	441a      	add	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9cc:	e086      	b.n	800badc <UART_SetConfig+0x22b4>
 800b9ce:	bf00      	nop
 800b9d0:	58024400 	.word	0x58024400
 800b9d4:	03d09000 	.word	0x03d09000
 800b9d8:	0003d090 	.word	0x0003d090
 800b9dc:	0007a120 	.word	0x0007a120
 800b9e0:	000f4240 	.word	0x000f4240
 800b9e4:	001e8480 	.word	0x001e8480
 800b9e8:	003d0900 	.word	0x003d0900
 800b9ec:	00516155 	.word	0x00516155
 800b9f0:	0061a800 	.word	0x0061a800
 800b9f4:	007a1200 	.word	0x007a1200
 800b9f8:	00a2c2aa 	.word	0x00a2c2aa
 800b9fc:	00f42400 	.word	0x00f42400
 800ba00:	01e84800 	.word	0x01e84800
 800ba04:	0001e848 	.word	0x0001e848
 800ba08:	00051615 	.word	0x00051615
 800ba0c:	00061a80 	.word	0x00061a80
 800ba10:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d04e      	beq.n	800baba <UART_SetConfig+0x2292>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d047      	beq.n	800bab4 <UART_SetConfig+0x228c>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d040      	beq.n	800baae <UART_SetConfig+0x2286>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d039      	beq.n	800baa8 <UART_SetConfig+0x2280>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d032      	beq.n	800baa2 <UART_SetConfig+0x227a>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	2b05      	cmp	r3, #5
 800ba42:	d02b      	beq.n	800ba9c <UART_SetConfig+0x2274>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b06      	cmp	r3, #6
 800ba4a:	d024      	beq.n	800ba96 <UART_SetConfig+0x226e>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	2b07      	cmp	r3, #7
 800ba52:	d01d      	beq.n	800ba90 <UART_SetConfig+0x2268>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d016      	beq.n	800ba8a <UART_SetConfig+0x2262>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b09      	cmp	r3, #9
 800ba62:	d00f      	beq.n	800ba84 <UART_SetConfig+0x225c>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2b0a      	cmp	r3, #10
 800ba6a:	d008      	beq.n	800ba7e <UART_SetConfig+0x2256>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b0b      	cmp	r3, #11
 800ba72:	d101      	bne.n	800ba78 <UART_SetConfig+0x2250>
 800ba74:	2380      	movs	r3, #128	; 0x80
 800ba76:	e022      	b.n	800babe <UART_SetConfig+0x2296>
 800ba78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba7c:	e01f      	b.n	800babe <UART_SetConfig+0x2296>
 800ba7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba82:	e01c      	b.n	800babe <UART_SetConfig+0x2296>
 800ba84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba88:	e019      	b.n	800babe <UART_SetConfig+0x2296>
 800ba8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba8e:	e016      	b.n	800babe <UART_SetConfig+0x2296>
 800ba90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba94:	e013      	b.n	800babe <UART_SetConfig+0x2296>
 800ba96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ba9a:	e010      	b.n	800babe <UART_SetConfig+0x2296>
 800ba9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800baa0:	e00d      	b.n	800babe <UART_SetConfig+0x2296>
 800baa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baa6:	e00a      	b.n	800babe <UART_SetConfig+0x2296>
 800baa8:	f241 5355 	movw	r3, #5461	; 0x1555
 800baac:	e007      	b.n	800babe <UART_SetConfig+0x2296>
 800baae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bab2:	e004      	b.n	800babe <UART_SetConfig+0x2296>
 800bab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bab8:	e001      	b.n	800babe <UART_SetConfig+0x2296>
 800baba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	6852      	ldr	r2, [r2, #4]
 800bac2:	0852      	lsrs	r2, r2, #1
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bace:	b29b      	uxth	r3, r3
 800bad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bad2:	e003      	b.n	800badc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800badc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bade:	2b0f      	cmp	r3, #15
 800bae0:	d908      	bls.n	800baf4 <UART_SetConfig+0x22cc>
 800bae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae8:	d204      	bcs.n	800baf4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baf0:	60da      	str	r2, [r3, #12]
 800baf2:	e002      	b.n	800bafa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bb16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3740      	adds	r7, #64	; 0x40
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bb24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb30:	f003 0301 	and.w	r3, r3, #1
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00a      	beq.n	800bb4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	430a      	orrs	r2, r1
 800bb4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00a      	beq.n	800bb70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00a      	beq.n	800bb92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb96:	f003 0308 	and.w	r3, r3, #8
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb8:	f003 0310 	and.w	r3, r3, #16
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00a      	beq.n	800bbd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	430a      	orrs	r2, r1
 800bbd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbda:	f003 0320 	and.w	r3, r3, #32
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	430a      	orrs	r2, r1
 800bbf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01a      	beq.n	800bc3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	430a      	orrs	r2, r1
 800bc18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc22:	d10a      	bne.n	800bc3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	430a      	orrs	r2, r1
 800bc38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00a      	beq.n	800bc5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	605a      	str	r2, [r3, #4]
  }
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af02      	add	r7, sp, #8
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bc78:	f7f6 f86c 	bl	8001d54 <HAL_GetTick>
 800bc7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0308 	and.w	r3, r3, #8
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d10e      	bne.n	800bcaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f82c 	bl	800bcf8 <UART_WaitOnFlagUntilTimeout>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e022      	b.n	800bcf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d10e      	bne.n	800bcd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f816 	bl	800bcf8 <UART_WaitOnFlagUntilTimeout>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e00c      	b.n	800bcf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	4613      	mov	r3, r2
 800bd06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd08:	e062      	b.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd10:	d05e      	beq.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd12:	f7f6 f81f 	bl	8001d54 <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	69ba      	ldr	r2, [r7, #24]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d302      	bcc.n	800bd28 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d11d      	bne.n	800bd64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689a      	ldr	r2, [r3, #8]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f022 0201 	bic.w	r2, r2, #1
 800bd46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e045      	b.n	800bdf0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0304 	and.w	r3, r3, #4
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d02e      	beq.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd80:	d126      	bne.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd8a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0201 	bic.w	r2, r2, #1
 800bdaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2220      	movs	r2, #32
 800bdb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e00f      	b.n	800bdf0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69da      	ldr	r2, [r3, #28]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	4013      	ands	r3, r2
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	bf0c      	ite	eq
 800bde0:	2301      	moveq	r3, #1
 800bde2:	2300      	movne	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	461a      	mov	r2, r3
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d08d      	beq.n	800bd0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689a      	ldr	r2, [r3, #8]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800be1e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2220      	movs	r2, #32
 800be24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6899      	ldr	r1, [r3, #8]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4b08      	ldr	r3, [pc, #32]	; (800be78 <UART_EndRxTransfer+0x44>)
 800be58:	400b      	ands	r3, r1
 800be5a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2220      	movs	r2, #32
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	effffffe 	.word	0xeffffffe

0800be7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be92:	d01f      	beq.n	800bed4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800beaa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f022 0201 	bic.w	r2, r2, #1
 800beba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2220      	movs	r2, #32
 800bed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7f4 fc37 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beda:	bf00      	nop
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f7fd fc83 	bl	80097fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bef6:	bf00      	nop
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b086      	sub	sp, #24
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf26:	2b80      	cmp	r3, #128	; 0x80
 800bf28:	d109      	bne.n	800bf3e <UART_DMAError+0x40>
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	2b21      	cmp	r3, #33	; 0x21
 800bf2e:	d106      	bne.n	800bf3e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bf38:	6978      	ldr	r0, [r7, #20]
 800bf3a:	f7ff ff5d 	bl	800bdf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf48:	2b40      	cmp	r3, #64	; 0x40
 800bf4a:	d109      	bne.n	800bf60 <UART_DMAError+0x62>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b22      	cmp	r3, #34	; 0x22
 800bf50:	d106      	bne.n	800bf60 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bf5a:	6978      	ldr	r0, [r7, #20]
 800bf5c:	f7ff ff6a 	bl	800be34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf66:	f043 0210 	orr.w	r2, r3, #16
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf70:	6978      	ldr	r0, [r7, #20]
 800bf72:	f7fd fc4d 	bl	8009810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf76:	bf00      	nop
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7fd fc37 	bl	8009810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfa2:	bf00      	nop
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb8:	2b21      	cmp	r3, #33	; 0x21
 800bfba:	d12a      	bne.n	800c012 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d110      	bne.n	800bfea <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfd6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfe6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bfe8:	e013      	b.n	800c012 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfee:	781a      	ldrb	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c006:	b29b      	uxth	r3, r3
 800c008:	3b01      	subs	r3, #1
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c02c:	2b21      	cmp	r3, #33	; 0x21
 800c02e:	d12f      	bne.n	800c090 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c036:	b29b      	uxth	r3, r3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d110      	bne.n	800c05e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c04a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c05a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c05c:	e018      	b.n	800c090 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c062:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	461a      	mov	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c072:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c078:	1c9a      	adds	r2, r3, #2
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c084:	b29b      	uxth	r3, r3
 800c086:	3b01      	subs	r3, #1
 800c088:	b29a      	uxth	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0aa:	2b21      	cmp	r3, #33	; 0x21
 800c0ac:	d13d      	bne.n	800c12a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0b4:	81fb      	strh	r3, [r7, #14]
 800c0b6:	e035      	b.n	800c124 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d111      	bne.n	800c0e8 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c0d2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0e2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c0e4:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c0e6:	e020      	b.n	800c12a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d013      	beq.n	800c11e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0fa:	781a      	ldrb	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c112:	b29b      	uxth	r3, r3
 800c114:	3b01      	subs	r3, #1
 800c116:	b29a      	uxth	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c11e:	89fb      	ldrh	r3, [r7, #14]
 800c120:	3b01      	subs	r3, #1
 800c122:	81fb      	strh	r3, [r7, #14]
 800c124:	89fb      	ldrh	r3, [r7, #14]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1c6      	bne.n	800c0b8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c12a:	bf00      	nop
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c136:	b480      	push	{r7}
 800c138:	b085      	sub	sp, #20
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c144:	2b21      	cmp	r3, #33	; 0x21
 800c146:	d142      	bne.n	800c1ce <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c14e:	81fb      	strh	r3, [r7, #14]
 800c150:	e03a      	b.n	800c1c8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c158:	b29b      	uxth	r3, r3
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d111      	bne.n	800c182 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689a      	ldr	r2, [r3, #8]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c16c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c17c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c17e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c180:	e025      	b.n	800c1ce <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d018      	beq.n	800c1c2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c194:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1a4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1aa:	1c9a      	adds	r2, r3, #2
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c1c2:	89fb      	ldrh	r3, [r7, #14]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	81fb      	strh	r3, [r7, #14]
 800c1c8:	89fb      	ldrh	r3, [r7, #14]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1c1      	bne.n	800c152 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c1ce:	bf00      	nop
 800c1d0:	3714      	adds	r7, #20
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b082      	sub	sp, #8
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1f0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2220      	movs	r2, #32
 800c1f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7f4 fa5f 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c206:	bf00      	nop
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c21c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c224:	2b22      	cmp	r3, #34	; 0x22
 800c226:	d13b      	bne.n	800c2a0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c230:	89bb      	ldrh	r3, [r7, #12]
 800c232:	b2d9      	uxtb	r1, r3
 800c234:	89fb      	ldrh	r3, [r7, #14]
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23c:	400a      	ands	r2, r1
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c246:	1c5a      	adds	r2, r3, #1
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c252:	b29b      	uxth	r3, r3
 800c254:	3b01      	subs	r3, #1
 800c256:	b29a      	uxth	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c264:	b29b      	uxth	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d122      	bne.n	800c2b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c278:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0201 	bic.w	r2, r2, #1
 800c288:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2220      	movs	r2, #32
 800c28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7f4 fa55 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c29e:	e007      	b.n	800c2b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f042 0208 	orr.w	r2, r2, #8
 800c2ae:	619a      	str	r2, [r3, #24]
}
 800c2b0:	bf00      	nop
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ce:	2b22      	cmp	r3, #34	; 0x22
 800c2d0:	d13b      	bne.n	800c34a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2de:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2e0:	89ba      	ldrh	r2, [r7, #12]
 800c2e2:	89fb      	ldrh	r3, [r7, #14]
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f0:	1c9a      	adds	r2, r3, #2
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b01      	subs	r3, #1
 800c300:	b29a      	uxth	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c30e:	b29b      	uxth	r3, r3
 800c310:	2b00      	cmp	r3, #0
 800c312:	d122      	bne.n	800c35a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c322:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	689a      	ldr	r2, [r3, #8]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0201 	bic.w	r2, r2, #1
 800c332:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2220      	movs	r2, #32
 800c338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7f4 fa00 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c348:	e007      	b.n	800c35a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	699a      	ldr	r2, [r3, #24]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f042 0208 	orr.w	r2, r2, #8
 800c358:	619a      	str	r2, [r3, #24]
}
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c372:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c37a:	2b22      	cmp	r3, #34	; 0x22
 800c37c:	d166      	bne.n	800c44c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c384:	81fb      	strh	r3, [r7, #14]
 800c386:	e03d      	b.n	800c404 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c390:	893b      	ldrh	r3, [r7, #8]
 800c392:	b2d9      	uxtb	r1, r3
 800c394:	89bb      	ldrh	r3, [r7, #12]
 800c396:	b2da      	uxtb	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39c:	400a      	ands	r2, r1
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d119      	bne.n	800c3fe <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6899      	ldr	r1, [r3, #8]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	4b1f      	ldr	r3, [pc, #124]	; (800c464 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c3e6:	400b      	ands	r3, r1
 800c3e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2220      	movs	r2, #32
 800c3ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7f4 f9a5 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c3fe:	89fb      	ldrh	r3, [r7, #14]
 800c400:	3b01      	subs	r3, #1
 800c402:	81fb      	strh	r3, [r7, #14]
 800c404:	89fb      	ldrh	r3, [r7, #14]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1be      	bne.n	800c388 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c410:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c412:	897b      	ldrh	r3, [r7, #10]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d021      	beq.n	800c45c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c41e:	897a      	ldrh	r2, [r7, #10]
 800c420:	429a      	cmp	r2, r3
 800c422:	d21b      	bcs.n	800c45c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689a      	ldr	r2, [r3, #8]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c432:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a0c      	ldr	r2, [pc, #48]	; (800c468 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c438:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f042 0220 	orr.w	r2, r2, #32
 800c448:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c44a:	e007      	b.n	800c45c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699a      	ldr	r2, [r3, #24]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f042 0208 	orr.w	r2, r2, #8
 800c45a:	619a      	str	r2, [r3, #24]
}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	effffffe 	.word	0xeffffffe
 800c468:	0800c20f 	.word	0x0800c20f

0800c46c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c47a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c482:	2b22      	cmp	r3, #34	; 0x22
 800c484:	d166      	bne.n	800c554 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c48c:	82fb      	strh	r3, [r7, #22]
 800c48e:	e03d      	b.n	800c50c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c49c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c49e:	8a3a      	ldrh	r2, [r7, #16]
 800c4a0:	8abb      	ldrh	r3, [r7, #20]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ae:	1c9a      	adds	r2, r3, #2
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d119      	bne.n	800c506 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6899      	ldr	r1, [r3, #8]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	4b1f      	ldr	r3, [pc, #124]	; (800c56c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c4ee:	400b      	ands	r3, r1
 800c4f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7f4 f921 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c506:	8afb      	ldrh	r3, [r7, #22]
 800c508:	3b01      	subs	r3, #1
 800c50a:	82fb      	strh	r3, [r7, #22]
 800c50c:	8afb      	ldrh	r3, [r7, #22]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1be      	bne.n	800c490 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c518:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c51a:	8a7b      	ldrh	r3, [r7, #18]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d021      	beq.n	800c564 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c526:	8a7a      	ldrh	r2, [r7, #18]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d21b      	bcs.n	800c564 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689a      	ldr	r2, [r3, #8]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c53a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a0c      	ldr	r2, [pc, #48]	; (800c570 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c540:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f042 0220 	orr.w	r2, r2, #32
 800c550:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c552:	e007      	b.n	800c564 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	699a      	ldr	r2, [r3, #24]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0208 	orr.w	r2, r2, #8
 800c562:	619a      	str	r2, [r3, #24]
}
 800c564:	bf00      	nop
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	effffffe 	.word	0xeffffffe
 800c570:	0800c2b9 	.word	0x0800c2b9

0800c574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d101      	bne.n	800c5c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	e027      	b.n	800c616 <HAL_UARTEx_DisableFifoMode+0x66>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2224      	movs	r2, #36	; 0x24
 800c5d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0201 	bic.w	r2, r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c5f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2220      	movs	r2, #32
 800c608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c632:	2b01      	cmp	r3, #1
 800c634:	d101      	bne.n	800c63a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c636:	2302      	movs	r3, #2
 800c638:	e02d      	b.n	800c696 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2224      	movs	r2, #36	; 0x24
 800c646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f022 0201 	bic.w	r2, r2, #1
 800c660:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	683a      	ldr	r2, [r7, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f850 	bl	800c71c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2220      	movs	r2, #32
 800c688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b084      	sub	sp, #16
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d101      	bne.n	800c6b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	e02d      	b.n	800c712 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2224      	movs	r2, #36	; 0x24
 800c6c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0201 	bic.w	r2, r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f812 	bl	800c71c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2220      	movs	r2, #32
 800c704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b089      	sub	sp, #36	; 0x24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c724:	4a2f      	ldr	r2, [pc, #188]	; (800c7e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c726:	f107 0314 	add.w	r3, r7, #20
 800c72a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c72e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c732:	4a2d      	ldr	r2, [pc, #180]	; (800c7e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c734:	f107 030c 	add.w	r3, r7, #12
 800c738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c73c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c744:	2b00      	cmp	r3, #0
 800c746:	d108      	bne.n	800c75a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c758:	e03d      	b.n	800c7d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c75a:	2308      	movs	r3, #8
 800c75c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c75e:	2308      	movs	r3, #8
 800c760:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	0e5b      	lsrs	r3, r3, #25
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 0307 	and.w	r3, r3, #7
 800c770:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	0f5b      	lsrs	r3, r3, #29
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	f003 0307 	and.w	r3, r3, #7
 800c780:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c782:	7fbb      	ldrb	r3, [r7, #30]
 800c784:	7f3a      	ldrb	r2, [r7, #28]
 800c786:	f107 0120 	add.w	r1, r7, #32
 800c78a:	440a      	add	r2, r1
 800c78c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c790:	fb02 f303 	mul.w	r3, r2, r3
 800c794:	7f3a      	ldrb	r2, [r7, #28]
 800c796:	f107 0120 	add.w	r1, r7, #32
 800c79a:	440a      	add	r2, r1
 800c79c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c7a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c7ac:	7ffb      	ldrb	r3, [r7, #31]
 800c7ae:	7f7a      	ldrb	r2, [r7, #29]
 800c7b0:	f107 0120 	add.w	r1, r7, #32
 800c7b4:	440a      	add	r2, r1
 800c7b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c7ba:	fb02 f303 	mul.w	r3, r2, r3
 800c7be:	7f7a      	ldrb	r2, [r7, #29]
 800c7c0:	f107 0120 	add.w	r1, r7, #32
 800c7c4:	440a      	add	r2, r1
 800c7c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c7ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7d6:	bf00      	nop
 800c7d8:	3724      	adds	r7, #36	; 0x24
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	0800c85c 	.word	0x0800c85c
 800c7e8:	0800c864 	.word	0x0800c864

0800c7ec <__libc_init_array>:
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	4e0d      	ldr	r6, [pc, #52]	; (800c824 <__libc_init_array+0x38>)
 800c7f0:	4c0d      	ldr	r4, [pc, #52]	; (800c828 <__libc_init_array+0x3c>)
 800c7f2:	1ba4      	subs	r4, r4, r6
 800c7f4:	10a4      	asrs	r4, r4, #2
 800c7f6:	2500      	movs	r5, #0
 800c7f8:	42a5      	cmp	r5, r4
 800c7fa:	d109      	bne.n	800c810 <__libc_init_array+0x24>
 800c7fc:	4e0b      	ldr	r6, [pc, #44]	; (800c82c <__libc_init_array+0x40>)
 800c7fe:	4c0c      	ldr	r4, [pc, #48]	; (800c830 <__libc_init_array+0x44>)
 800c800:	f000 f820 	bl	800c844 <_init>
 800c804:	1ba4      	subs	r4, r4, r6
 800c806:	10a4      	asrs	r4, r4, #2
 800c808:	2500      	movs	r5, #0
 800c80a:	42a5      	cmp	r5, r4
 800c80c:	d105      	bne.n	800c81a <__libc_init_array+0x2e>
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c814:	4798      	blx	r3
 800c816:	3501      	adds	r5, #1
 800c818:	e7ee      	b.n	800c7f8 <__libc_init_array+0xc>
 800c81a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c81e:	4798      	blx	r3
 800c820:	3501      	adds	r5, #1
 800c822:	e7f2      	b.n	800c80a <__libc_init_array+0x1e>
 800c824:	0800c88c 	.word	0x0800c88c
 800c828:	0800c88c 	.word	0x0800c88c
 800c82c:	0800c88c 	.word	0x0800c88c
 800c830:	0800c890 	.word	0x0800c890

0800c834 <memset>:
 800c834:	4402      	add	r2, r0
 800c836:	4603      	mov	r3, r0
 800c838:	4293      	cmp	r3, r2
 800c83a:	d100      	bne.n	800c83e <memset+0xa>
 800c83c:	4770      	bx	lr
 800c83e:	f803 1b01 	strb.w	r1, [r3], #1
 800c842:	e7f9      	b.n	800c838 <memset+0x4>

0800c844 <_init>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	bf00      	nop
 800c848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84a:	bc08      	pop	{r3}
 800c84c:	469e      	mov	lr, r3
 800c84e:	4770      	bx	lr

0800c850 <_fini>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr
