
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf8c  0800cf8c  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf8c  0800cf8c  0001cf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf94  0800cf94  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  24000000  0800cf9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  24000040  0800cfdc  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000c44  0800cfdc  00020c44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fa3  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f68  00000000  00000000  00041011  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  00043f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00045610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003866c  00000000  00000000  00046ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001275a  00000000  00000000  0007f20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001739ec  00000000  00000000  00091966  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00205352  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  002053d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cf4c 	.word	0x0800cf4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800cf4c 	.word	0x0800cf4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000030 	.word	0x24000030
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f009 f95c 	bl	8009948 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f009 fa2f 	bl	8009af8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f009 fa2a 	bl	8009af8 <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	24000b4c 	.word	0x24000b4c
 80006b0:	24000a98 	.word	0x24000a98
 80006b4:	24000b24 	.word	0x24000b24
 80006b8:	240001bc 	.word	0x240001bc
 80006bc:	240006d8 	.word	0x240006d8
 80006c0:	24000928 	.word	0x24000928

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000928 	.word	0x24000928
 800072c:	240002b0 	.word	0x240002b0
 8000730:	240001bc 	.word	0x240001bc
 8000734:	24000a70 	.word	0x24000a70
 8000738:	24000a98 	.word	0x24000a98
 800073c:	24000798 	.word	0x24000798
 8000740:	24000090 	.word	0x24000090
 8000744:	2400011c 	.word	0x2400011c

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 ffbe 	bl	8009714 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f009 f8d0 	bl	8009948 <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000928 	.word	0x24000928
 80007c8:	24000069 	.word	0x24000069
 80007cc:	240001bc 	.word	0x240001bc
 80007d0:	24000a70 	.word	0x24000a70
 80007d4:	24000a98 	.word	0x24000a98
 80007d8:	24000b4c 	.word	0x24000b4c
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000c38 	.word	0x24000c38
 80007e4:	24000090 	.word	0x24000090
 80007e8:	24000a78 	.word	0x24000a78

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f009 f820 	bl	8009840 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000928 	.word	0x24000928

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f009 f80d 	bl	8009840 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000928 	.word	0x24000928

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	240002b0 	.word	0x240002b0

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 ffed 	bl	8009840 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000a98 	.word	0x24000a98

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	24000798 	.word	0x24000798

0800089c <peripheralADC_Init>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <readADC>:
		HAL_ADC_Start_DMA(&rollRigt, (uint32_t*)pitchRawValue, 1);
		HAL_ADC_Start_DMA(&pitch, (uint32_t*)pitchRawValue, 3);
}
#endif
void readADC(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&rollLeft);
 80008b0:	4838      	ldr	r0, [pc, #224]	; (8000994 <readADC+0xe8>)
 80008b2:	f002 f853 	bl	800295c <HAL_ADC_Start>
	HAL_ADC_Start(&rollRigt);
 80008b6:	4838      	ldr	r0, [pc, #224]	; (8000998 <readADC+0xec>)
 80008b8:	f002 f850 	bl	800295c <HAL_ADC_Start>
	HAL_ADC_Start(&pitch);
 80008bc:	4837      	ldr	r0, [pc, #220]	; (800099c <readADC+0xf0>)
 80008be:	f002 f84d 	bl	800295c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&rollLeft, 1);
 80008c2:	2101      	movs	r1, #1
 80008c4:	4833      	ldr	r0, [pc, #204]	; (8000994 <readADC+0xe8>)
 80008c6:	f002 f913 	bl	8002af0 <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&rollRigt, 1);
 80008ca:	2101      	movs	r1, #1
 80008cc:	4832      	ldr	r0, [pc, #200]	; (8000998 <readADC+0xec>)
 80008ce:	f002 f90f 	bl	8002af0 <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&pitch, 1);
 80008d2:	2101      	movs	r1, #1
 80008d4:	4831      	ldr	r0, [pc, #196]	; (800099c <readADC+0xf0>)
 80008d6:	f002 f90b 	bl	8002af0 <HAL_ADC_PollForConversion>
	leftRawADC = HAL_ADC_GetValue(&rollLeft);
 80008da:	482e      	ldr	r0, [pc, #184]	; (8000994 <readADC+0xe8>)
 80008dc:	f002 f9f4 	bl	8002cc8 <HAL_ADC_GetValue>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <readADC+0xf4>)
 80008e6:	801a      	strh	r2, [r3, #0]
	rigtRawADC = HAL_ADC_GetValue(&rollRigt);
 80008e8:	482b      	ldr	r0, [pc, #172]	; (8000998 <readADC+0xec>)
 80008ea:	f002 f9ed 	bl	8002cc8 <HAL_ADC_GetValue>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <readADC+0xf8>)
 80008f4:	801a      	strh	r2, [r3, #0]
	pitchRawADC = HAL_ADC_GetValue(&pitch);
 80008f6:	4829      	ldr	r0, [pc, #164]	; (800099c <readADC+0xf0>)
 80008f8:	f002 f9e6 	bl	8002cc8 <HAL_ADC_GetValue>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <readADC+0xfc>)
 8000902:	801a      	strh	r2, [r3, #0]
	leftRawDistance = a_Linear *leftRawADC + b_Linear;
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <readADC+0xf4>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	ee07 3a90 	vmov	s15, r3
 800090c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <readADC+0x100>)
 8000912:	ed93 7b00 	vldr	d7, [r3]
 8000916:	ee26 6b07 	vmul.f64	d6, d6, d7
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <readADC+0x104>)
 800091c:	ed93 7b00 	vldr	d7, [r3]
 8000920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000924:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000928:	ee17 3a90 	vmov	r3, s15
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <readADC+0x108>)
 8000930:	801a      	strh	r2, [r3, #0]
	rigtRawDistance = a_Linear *rigtRawADC + b_Linear;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <readADC+0xf8>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <readADC+0x100>)
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <readADC+0x104>)
 800094a:	ed93 7b00 	vldr	d7, [r3]
 800094e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000952:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000956:	ee17 3a90 	vmov	r3, s15
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <readADC+0x10c>)
 800095e:	801a      	strh	r2, [r3, #0]
	pitchRawDistance = a_Linear *pitchRawADC + b_Linear;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <readADC+0xfc>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <readADC+0x100>)
 800096e:	ed93 7b00 	vldr	d7, [r3]
 8000972:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <readADC+0x104>)
 8000978:	ed93 7b00 	vldr	d7, [r3]
 800097c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000980:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000984:	ee17 3a90 	vmov	r3, s15
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <readADC+0x110>)
 800098c:	801a      	strh	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	240007b8 	.word	0x240007b8
 8000998:	2400024c 	.word	0x2400024c
 800099c:	24000824 	.word	0x24000824
 80009a0:	24000c28 	.word	0x24000c28
 80009a4:	24000248 	.word	0x24000248
 80009a8:	2400011e 	.word	0x2400011e
 80009ac:	24000020 	.word	0x24000020
 80009b0:	24000028 	.word	0x24000028
 80009b4:	24000088 	.word	0x24000088
 80009b8:	24000130 	.word	0x24000130
 80009bc:	24000c3a 	.word	0x24000c3a

080009c0 <controlMotor1>:
void roR_pit_yaw_mixSpeed(void);
void brake(void);

#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <controlMotor1+0x48>)
 80009d4:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db07      	blt.n	80009ec <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <controlMotor1+0x48>)
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <controlMotor1+0x48>)
 80009e8:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 80009ea:	e006      	b.n	80009fa <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <controlMotor1+0x48>)
 80009ee:	7a1b      	ldrb	r3, [r3, #8]
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <controlMotor1+0x48>)
 80009f8:	721a      	strb	r2, [r3, #8]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	2400000c 	.word	0x2400000c

08000a0c <controlMotor2>:
void controlMotor2(int _speed)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bfb8      	it	lt
 8000a1a:	425b      	neglt	r3, r3
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <controlMotor2+0x48>)
 8000a20:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db07      	blt.n	8000a38 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <controlMotor2+0x48>)
 8000a2a:	7a1b      	ldrb	r3, [r3, #8]
 8000a2c:	f023 0302 	bic.w	r3, r3, #2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <controlMotor2+0x48>)
 8000a34:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000a36:	e006      	b.n	8000a46 <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <controlMotor2+0x48>)
 8000a3a:	7a1b      	ldrb	r3, [r3, #8]
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <controlMotor2+0x48>)
 8000a44:	721a      	strb	r2, [r3, #8]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2400000c 	.word	0x2400000c

08000a58 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <controlMotor3+0x48>)
 8000a6c:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db07      	blt.n	8000a84 <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <controlMotor3+0x48>)
 8000a76:	7a1b      	ldrb	r3, [r3, #8]
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <controlMotor3+0x48>)
 8000a80:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 8000a82:	e006      	b.n	8000a92 <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <controlMotor3+0x48>)
 8000a86:	7a1b      	ldrb	r3, [r3, #8]
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <controlMotor3+0x48>)
 8000a90:	721a      	strb	r2, [r3, #8]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2400000c 	.word	0x2400000c

08000aa4 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bfb8      	it	lt
 8000ab2:	425b      	neglt	r3, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <controlMotor4+0x48>)
 8000ab8:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db07      	blt.n	8000ad0 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <controlMotor4+0x48>)
 8000ac2:	7a1b      	ldrb	r3, [r3, #8]
 8000ac4:	f023 0308 	bic.w	r3, r3, #8
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <controlMotor4+0x48>)
 8000acc:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 8000ace:	e006      	b.n	8000ade <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <controlMotor4+0x48>)
 8000ad2:	7a1b      	ldrb	r3, [r3, #8]
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <controlMotor4+0x48>)
 8000adc:	721a      	strb	r2, [r3, #8]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2400000c 	.word	0x2400000c

08000af0 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff63 	bl	80009c0 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f7ff ff85 	bl	8000a0c <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff ffa8 	bl	8000a58 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ffca 	bl	8000aa4 <controlMotor4>
	spinalCordTrans();
 8000b10:	f7ff fea2 	bl	8000858 <spinalCordTrans>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <positionControl_Init+0x18>)
 8000b1e:	f008 faf7 	bl	8009110 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <positionControl_Init+0x1c>)
 8000b28:	f005 fc48 	bl	80063bc <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	24000be0 	.word	0x24000be0
 8000b34:	58021000 	.word	0x58021000

08000b38 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d16e      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d16a      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8000b54:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11e      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b62:	4837      	ldr	r0, [pc, #220]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b64:	f005 fc2a 	bl	80063bc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6c:	4834      	ldr	r0, [pc, #208]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b6e:	f005 fc3e 	bl	80063ee <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b7a:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b84:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2bc7      	cmp	r3, #199	; 0xc7
 8000b8c:	dd05      	ble.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d11f      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4825      	ldr	r0, [pc, #148]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000baa:	f005 fc07 	bl	80063bc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb2:	4823      	ldr	r0, [pc, #140]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bb4:	f005 fc1b 	bl	80063ee <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bc0:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bca:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000bd4:	db05      	blt.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d11f      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bf2:	f005 fbe3 	bl	80063bc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfa:	4811      	ldr	r0, [pc, #68]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000bfc:	f005 fbf7 	bl	80063ee <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c08:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c12:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000c1c:	db05      	blt.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24000be0 	.word	0x24000be0
 8000c38:	240009c0 	.word	0x240009c0
 8000c3c:	24000b2c 	.word	0x24000b2c
 8000c40:	58020c00 	.word	0x58020c00
 8000c44:	240009b8 	.word	0x240009b8
 8000c48:	24000a74 	.word	0x24000a74

08000c4c <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e01f      	b.n	8000c9c <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2104      	movs	r1, #4
 8000c70:	480e      	ldr	r0, [pc, #56]	; (8000cac <SendByteSPI+0x60>)
 8000c72:	f005 fba3 	bl	80063bc <HAL_GPIO_WritePin>
 8000c76:	e004      	b.n	8000c82 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <SendByteSPI+0x60>)
 8000c7e:	f005 fb9d 	bl	80063bc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <SendByteSPI+0x64>)
 8000c88:	f005 fb98 	bl	80063bc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <SendByteSPI+0x64>)
 8000c92:	f005 fb93 	bl	80063bc <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	dddc      	ble.n	8000c5c <SendByteSPI+0x10>

	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58021800 	.word	0x58021800
 8000cb0:	58020400 	.word	0x58020400

08000cb4 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <ST7920_SendCmd+0x4c>)
 8000cc4:	f005 fb7a 	bl	80063bc <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 8000cc8:	20f8      	movs	r0, #248	; 0xf8
 8000cca:	f7ff ffbf 	bl	8000c4c <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f023 030f 	bic.w	r3, r3, #15
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffb8 	bl	8000c4c <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffb2 	bl	8000c4c <SendByteSPI>
	delayUs(50);
 8000ce8:	2032      	movs	r0, #50	; 0x32
 8000cea:	f7ff fc95 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <ST7920_SendCmd+0x4c>)
 8000cf4:	f005 fb62 	bl	80063bc <HAL_GPIO_WritePin>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58021800 	.word	0x58021800

08000d04 <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	481c      	ldr	r0, [pc, #112]	; (8000d80 <ST7920_Init+0x7c>)
 8000d0e:	f005 fb55 	bl	80063bc <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000d12:	200a      	movs	r0, #10
 8000d14:	f001 fa68 	bl	80021e8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <ST7920_Init+0x7c>)
 8000d1e:	f005 fb4d 	bl	80063bc <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000d22:	2032      	movs	r0, #50	; 0x32
 8000d24:	f001 fa60 	bl	80021e8 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000d28:	2030      	movs	r0, #48	; 0x30
 8000d2a:	f7ff ffc3 	bl	8000cb4 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000d2e:	206e      	movs	r0, #110	; 0x6e
 8000d30:	f7ff fc72 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000d34:	2030      	movs	r0, #48	; 0x30
 8000d36:	f7ff ffbd 	bl	8000cb4 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000d3a:	2028      	movs	r0, #40	; 0x28
 8000d3c:	f7ff fc6c 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000d40:	2008      	movs	r0, #8
 8000d42:	f7ff ffb7 	bl	8000cb4 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000d46:	206e      	movs	r0, #110	; 0x6e
 8000d48:	f7ff fc66 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff ffb1 	bl	8000cb4 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000d52:	200c      	movs	r0, #12
 8000d54:	f001 fa48 	bl	80021e8 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000d58:	2006      	movs	r0, #6
 8000d5a:	f7ff ffab 	bl	8000cb4 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f001 fa42 	bl	80021e8 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000d64:	200c      	movs	r0, #12
 8000d66:	f7ff ffa5 	bl	8000cb4 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f001 fa3c 	bl	80021e8 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff ff9f 	bl	8000cb4 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000d76:	2001      	movs	r0, #1
 8000d78:	f001 fa36 	bl	80021e8 <HAL_Delay>

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58021800 	.word	0x58021800

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f001 f99c 	bl	80020c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f83c 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f000 fbe8 	bl	8001564 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d94:	f000 fb96 	bl	80014c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d98:	f000 f8ec 	bl	8000f74 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000d9c:	f000 f9c6 	bl	800112c <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000da0:	f000 faac 	bl	80012fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000da4:	f000 faf6 	bl	8001394 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000da8:	f000 fa24 	bl	80011f4 <MX_TIM7_Init>
  MX_UART7_Init();
 8000dac:	f000 fa5a 	bl	8001264 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000db0:	f000 fb3c 	bl	800142c <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8000db4:	f000 f956 	bl	8001064 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8000db8:	f7ff fc0e 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 8000dbc:	f7ff fc52 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8000dc0:	f7ff fd6c 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8000dc4:	f7ff fea8 	bl	8000b18 <positionControl_Init>
  ST7920_Init();
 8000dc8:	f7ff ff9c 	bl	8000d04 <ST7920_Init>

  tracking = 1000;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <main+0x7c>)
 8000dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd2:	601a      	str	r2, [r3, #0]
  brake();
 8000dd4:	f7ff fe8c 	bl	8000af0 <brake>
  compassReset();
 8000dd8:	f7ff fd08 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <main+0x80>)
 8000de2:	f005 faeb 	bl	80063bc <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000de6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dea:	f001 f9fd 	bl	80021e8 <HAL_Delay>
  while (1)
  {
//	  testPWM();
//////////////////////////////////////////////////////////////////////
//	  readADC();
	  tracking++;
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <main+0x7c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a02      	ldr	r2, [pc, #8]	; (8000e00 <main+0x7c>)
 8000df6:	6013      	str	r3, [r2, #0]
	  readADC();
 8000df8:	f7ff fd58 	bl	80008ac <readADC>
	  tracking++;
 8000dfc:	e7f7      	b.n	8000dee <main+0x6a>
 8000dfe:	bf00      	nop
 8000e00:	24000a44 	.word	0x24000a44
 8000e04:	58020400 	.word	0x58020400

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0cc      	sub	sp, #304	; 0x130
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e12:	224c      	movs	r2, #76	; 0x4c
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00c f890 	bl	800cf3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e20:	2220      	movs	r2, #32
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00c f889 	bl	800cf3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	23bc      	movs	r3, #188	; 0xbc
 8000e32:	461a      	mov	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f00c f881 	bl	800cf3c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f005 faf2 	bl	8006424 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <SystemClock_Config+0x164>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <SystemClock_Config+0x164>)
 8000e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <SystemClock_Config+0x164>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <SystemClock_Config+0x168>)
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	4a43      	ldr	r2, [pc, #268]	; (8000f70 <SystemClock_Config+0x168>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <SystemClock_Config+0x168>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e7a:	bf00      	nop
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <SystemClock_Config+0x164>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e88:	d1f8      	bne.n	8000e7c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000eae:	233c      	movs	r3, #60	; 0x3c
 8000eb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fadb 	bl	8006498 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ee8:	f000 fc52 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	233f      	movs	r3, #63	; 0x3f
 8000eee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000efe:	2308      	movs	r3, #8
 8000f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f0a:	2340      	movs	r3, #64	; 0x40
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f18:	2340      	movs	r3, #64	; 0x40
 8000f1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f1e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f22:	2104      	movs	r1, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fe8f 	bl	8006c48 <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000f30:	f000 fc2e 	bl	8001790 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2203      	movs	r2, #3
 8000f3a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2200      	movs	r2, #0
 8000f4a:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 f9fd 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000f5c:	f000 fc18 	bl	8001790 <Error_Handler>
  }
}
 8000f60:	bf00      	nop
 8000f62:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	58024800 	.word	0x58024800
 8000f70:	58000400 	.word	0x58000400

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000f9a:	4a30      	ldr	r2, [pc, #192]	; (800105c <MX_ADC1_Init+0xe8>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fa0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000ff8:	f001 fb10 	bl	800261c <HAL_ADC_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 fbc5 	bl	8001790 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <MX_ADC1_Init+0xe4>)
 8001012:	f002 fb1d 	bl	8003650 <HAL_ADCEx_MultiModeConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800101c:	f000 fbb8 	bl	8001790 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_ADC1_Init+0xec>)
 8001022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001024:	2306      	movs	r3, #6
 8001026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800102c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001030:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001032:	2304      	movs	r3, #4
 8001034:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_ADC1_Init+0xe4>)
 8001040:	f001 fe50 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800104a:	f000 fba1 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	240007b8 	.word	0x240007b8
 800105c:	40022000 	.word	0x40022000
 8001060:	2e300800 	.word	0x2e300800

08001064 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_ADC2_Init+0xbc>)
 800107e:	4a29      	ldr	r2, [pc, #164]	; (8001124 <MX_ADC2_Init+0xc0>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <MX_ADC2_Init+0xbc>)
 8001084:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001088:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_ADC2_Init+0xbc>)
 800108c:	2208      	movs	r2, #8
 800108e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_ADC2_Init+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_ADC2_Init+0xbc>)
 8001098:	2204      	movs	r2, #4
 800109a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ADC2_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_ADC2_Init+0xbc>)
 80010dc:	f001 fa9e 	bl	800261c <HAL_ADC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80010e6:	f000 fb53 	bl	8001790 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_ADC2_Init+0xc4>)
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ee:	2306      	movs	r3, #6
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fc:	2304      	movs	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_ADC2_Init+0xbc>)
 800110a:	f001 fdeb 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001114:	f000 fb3c 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2400024c 	.word	0x2400024c
 8001124:	40022100 	.word	0x40022100
 8001128:	2a000400 	.word	0x2a000400

0800112c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001146:	4a29      	ldr	r2, [pc, #164]	; (80011ec <MX_ADC3_Init+0xc0>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_ADC3_Init+0xbc>)
 800114c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001150:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001154:	2208      	movs	r2, #8
 8001156:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC3_Init+0xbc>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001160:	2204      	movs	r2, #4
 8001162:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC3_Init+0xbc>)
 800116c:	2200      	movs	r2, #0
 800116e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001172:	2201      	movs	r2, #1
 8001174:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC3_Init+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ADC3_Init+0xbc>)
 800118a:	2200      	movs	r2, #0
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001190:	2200      	movs	r2, #0
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_ADC3_Init+0xbc>)
 8001196:	2200      	movs	r2, #0
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_ADC3_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_ADC3_Init+0xbc>)
 80011a4:	f001 fa3a 	bl	800261c <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80011ae:	f000 faef 	bl	8001790 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC3_Init+0xc4>)
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c4:	2304      	movs	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_ADC3_Init+0xbc>)
 80011d2:	f001 fd87 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80011dc:	f000 fad8 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	24000824 	.word	0x24000824
 80011ec:	58026000 	.word	0x58026000
 80011f0:	04300002 	.word	0x04300002

080011f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM7_Init+0x68>)
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <MX_TIM7_Init+0x6c>)
 8001208:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_TIM7_Init+0x68>)
 800120c:	f640 125f 	movw	r2, #2399	; 0x95f
 8001210:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_TIM7_Init+0x68>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_TIM7_Init+0x68>)
 800121a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_TIM7_Init+0x68>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_TIM7_Init+0x68>)
 8001228:	f007 ff46 	bl	80090b8 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001232:	f000 faad 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_TIM7_Init+0x68>)
 8001244:	f008 f970 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800124e:	f000 fa9f 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24000be0 	.word	0x24000be0
 8001260:	40001400 	.word	0x40001400

08001264 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_UART7_Init+0x90>)
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <MX_UART7_Init+0x94>)
 800126c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_UART7_Init+0x90>)
 8001270:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001274:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_UART7_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_UART7_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_UART7_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_UART7_Init+0x90>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_UART7_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_UART7_Init+0x90>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_UART7_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_UART7_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_UART7_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_UART7_Init+0x90>)
 80012ae:	f008 f9e1 	bl	8009674 <HAL_UART_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80012b8:	f000 fa6a 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012bc:	2100      	movs	r1, #0
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_UART7_Init+0x90>)
 80012c0:	f00b fd33 	bl	800cd2a <HAL_UARTEx_SetTxFifoThreshold>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80012ca:	f000 fa61 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <MX_UART7_Init+0x90>)
 80012d2:	f00b fd68 	bl	800cda6 <HAL_UARTEx_SetRxFifoThreshold>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80012dc:	f000 fa58 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_UART7_Init+0x90>)
 80012e2:	f00b fce9 	bl	800ccb8 <HAL_UARTEx_DisableFifoMode>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80012ec:	f000 fa50 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	24000090 	.word	0x24000090
 80012f8:	40007800 	.word	0x40007800

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001302:	4a23      	ldr	r2, [pc, #140]	; (8001390 <MX_USART1_UART_Init+0x94>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_USART1_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_USART1_UART_Init+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_USART1_UART_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001346:	f008 f995 	bl	8009674 <HAL_UART_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001350:	f000 fa1e 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_USART1_UART_Init+0x90>)
 8001358:	f00b fce7 	bl	800cd2a <HAL_UARTEx_SetTxFifoThreshold>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001362:	f000 fa15 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001366:	2100      	movs	r1, #0
 8001368:	4808      	ldr	r0, [pc, #32]	; (800138c <MX_USART1_UART_Init+0x90>)
 800136a:	f00b fd1c 	bl	800cda6 <HAL_UARTEx_SetRxFifoThreshold>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001374:	f000 fa0c 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_USART1_UART_Init+0x90>)
 800137a:	f00b fc9d 	bl	800ccb8 <HAL_UARTEx_DisableFifoMode>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001384:	f000 fa04 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	24000928 	.word	0x24000928
 8001390:	40011000 	.word	0x40011000

08001394 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_USART3_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	; (8001428 <MX_USART3_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013a0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80013a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013de:	f008 f949 	bl	8009674 <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 f9d2 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_USART3_UART_Init+0x90>)
 80013f0:	f00b fc9b 	bl	800cd2a <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f000 f9c9 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <MX_USART3_UART_Init+0x90>)
 8001402:	f00b fcd0 	bl	800cda6 <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 f9c0 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_USART3_UART_Init+0x90>)
 8001412:	f00b fc51 	bl	800ccb8 <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 f9b8 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	240001bc 	.word	0x240001bc
 8001428:	40004800 	.word	0x40004800

0800142c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <MX_USART6_UART_Init+0x94>)
 8001434:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800143c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_USART6_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_USART6_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_USART6_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001476:	f008 f8fd 	bl	8009674 <HAL_UART_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001480:	f000 f986 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_USART6_UART_Init+0x90>)
 8001488:	f00b fc4f 	bl	800cd2a <HAL_UARTEx_SetTxFifoThreshold>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001492:	f000 f97d 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <MX_USART6_UART_Init+0x90>)
 800149a:	f00b fc84 	bl	800cda6 <HAL_UARTEx_SetRxFifoThreshold>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80014a4:	f000 f974 	bl	8001790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_USART6_UART_Init+0x90>)
 80014aa:	f00b fc05 	bl	800ccb8 <HAL_UARTEx_DisableFifoMode>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f000 f96c 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24000a98 	.word	0x24000a98
 80014c0:	40011400 	.word	0x40011400

080014c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_DMA_Init+0x9c>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d0:	4a23      	ldr	r2, [pc, #140]	; (8001560 <MX_DMA_Init+0x9c>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_DMA_Init+0x9c>)
 80014dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_DMA_Init+0x9c>)
 80014ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_DMA_Init+0x9c>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_DMA_Init+0x9c>)
 80014fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200b      	movs	r0, #11
 800150c:	f002 fa55 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001510:	200b      	movs	r0, #11
 8001512:	f002 fa6c 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	200c      	movs	r0, #12
 800151c:	f002 fa4d 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001520:	200c      	movs	r0, #12
 8001522:	f002 fa64 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	200d      	movs	r0, #13
 800152c:	f002 fa45 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001530:	200d      	movs	r0, #13
 8001532:	f002 fa5c 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	200e      	movs	r0, #14
 800153c:	f002 fa3d 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001540:	200e      	movs	r0, #14
 8001542:	f002 fa54 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	203a      	movs	r0, #58	; 0x3a
 800154c:	f002 fa35 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001550:	203a      	movs	r0, #58	; 0x3a
 8001552:	f002 fa4c 	bl	80039ee <HAL_NVIC_EnableIRQ>

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	58024400 	.word	0x58024400

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157a:	4b7f      	ldr	r3, [pc, #508]	; (8001778 <MX_GPIO_Init+0x214>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	4a7d      	ldr	r2, [pc, #500]	; (8001778 <MX_GPIO_Init+0x214>)
 8001582:	f043 0320 	orr.w	r3, r3, #32
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <MX_GPIO_Init+0x214>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001598:	4b77      	ldr	r3, [pc, #476]	; (8001778 <MX_GPIO_Init+0x214>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	4a76      	ldr	r2, [pc, #472]	; (8001778 <MX_GPIO_Init+0x214>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a8:	4b73      	ldr	r3, [pc, #460]	; (8001778 <MX_GPIO_Init+0x214>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <MX_GPIO_Init+0x214>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015bc:	4a6e      	ldr	r2, [pc, #440]	; (8001778 <MX_GPIO_Init+0x214>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c6:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <MX_GPIO_Init+0x214>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <MX_GPIO_Init+0x214>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	4a67      	ldr	r2, [pc, #412]	; (8001778 <MX_GPIO_Init+0x214>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e4:	4b64      	ldr	r3, [pc, #400]	; (8001778 <MX_GPIO_Init+0x214>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f2:	4b61      	ldr	r3, [pc, #388]	; (8001778 <MX_GPIO_Init+0x214>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f8:	4a5f      	ldr	r2, [pc, #380]	; (8001778 <MX_GPIO_Init+0x214>)
 80015fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <MX_GPIO_Init+0x214>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <MX_GPIO_Init+0x214>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001616:	4a58      	ldr	r2, [pc, #352]	; (8001778 <MX_GPIO_Init+0x214>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <MX_GPIO_Init+0x214>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <MX_GPIO_Init+0x214>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <MX_GPIO_Init+0x214>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <MX_GPIO_Init+0x214>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f240 7104 	movw	r1, #1796	; 0x704
 8001652:	484a      	ldr	r0, [pc, #296]	; (800177c <MX_GPIO_Init+0x218>)
 8001654:	f004 feb2 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001658:	2200      	movs	r2, #0
 800165a:	f242 0167 	movw	r1, #8295	; 0x2067
 800165e:	4848      	ldr	r0, [pc, #288]	; (8001780 <MX_GPIO_Init+0x21c>)
 8001660:	f004 feac 	bl	80063bc <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001664:	2200      	movs	r2, #0
 8001666:	f643 610d 	movw	r1, #15885	; 0x3e0d
 800166a:	4846      	ldr	r0, [pc, #280]	; (8001784 <MX_GPIO_Init+0x220>)
 800166c:	f004 fea6 	bl	80063bc <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2182      	movs	r1, #130	; 0x82
 8001674:	4844      	ldr	r0, [pc, #272]	; (8001788 <MX_GPIO_Init+0x224>)
 8001676:	f004 fea1 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001680:	4842      	ldr	r0, [pc, #264]	; (800178c <MX_GPIO_Init+0x228>)
 8001682:	f004 fe9b 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001686:	f240 7304 	movw	r3, #1796	; 0x704
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <MX_GPIO_Init+0x218>)
 80016a0:	f004 fcdc 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80016a4:	f242 0367 	movw	r3, #8295	; 0x2067
 80016a8:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4830      	ldr	r0, [pc, #192]	; (8001780 <MX_GPIO_Init+0x21c>)
 80016be:	f004 fccd 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80016c2:	230d      	movs	r3, #13
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	482a      	ldr	r0, [pc, #168]	; (8001784 <MX_GPIO_Init+0x220>)
 80016da:	f004 fcbf 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	4824      	ldr	r0, [pc, #144]	; (8001788 <MX_GPIO_Init+0x224>)
 80016f6:	f004 fcb1 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 80016fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	481e      	ldr	r0, [pc, #120]	; (800178c <MX_GPIO_Init+0x228>)
 8001714:	f004 fca2 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4816      	ldr	r0, [pc, #88]	; (800178c <MX_GPIO_Init+0x228>)
 8001732:	f004 fc93 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001736:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800173a:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_GPIO_Init+0x220>)
 8001750:	f004 fc84 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <MX_GPIO_Init+0x224>)
 800176c:	f004 fc76 	bl	800605c <HAL_GPIO_Init>

}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	; 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	58024400 	.word	0x58024400
 800177c:	58020000 	.word	0x58020000
 8001780:	58020400 	.word	0x58020400
 8001784:	58021800 	.word	0x58021800
 8001788:	58021000 	.word	0x58021000
 800178c:	58020c00 	.word	0x58020c00

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_MspInit+0x30>)
 80017a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x30>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x30>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	58024400 	.word	0x58024400

080017d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	; 0x38
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a96      	ldr	r2, [pc, #600]	; (8001a4c <HAL_ADC_MspInit+0x278>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d163      	bne.n	80018be <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017f6:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <HAL_ADC_MspInit+0x27c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a94      	ldr	r2, [pc, #592]	; (8001a50 <HAL_ADC_MspInit+0x27c>)
 80017fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001800:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_ADC_MspInit+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10e      	bne.n	8001826 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001808:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 800180a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800180e:	4a91      	ldr	r2, [pc, #580]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001818:	4b8e      	ldr	r3, [pc, #568]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 800181a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a89      	ldr	r2, [pc, #548]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_INP11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001844:	2302      	movs	r3, #2
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	2303      	movs	r3, #3
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4880      	ldr	r0, [pc, #512]	; (8001a58 <HAL_ADC_MspInit+0x284>)
 8001858:	f004 fc00 	bl	800605c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800185c:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 800185e:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <HAL_ADC_MspInit+0x28c>)
 8001860:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001862:	4b7e      	ldr	r3, [pc, #504]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 8001864:	2209      	movs	r2, #9
 8001866:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001868:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 8001876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800187c:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 800187e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001882:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001884:	4b75      	ldr	r3, [pc, #468]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 800188e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001892:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001894:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189a:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018a0:	486e      	ldr	r0, [pc, #440]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 80018a2:	f002 f8bf 	bl	8003a24 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80018ac:	f7ff ff70 	bl	8001790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 80018b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_ADC_MspInit+0x288>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80018bc:	e0c1      	b.n	8001a42 <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a68      	ldr	r2, [pc, #416]	; (8001a64 <HAL_ADC_MspInit+0x290>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d163      	bne.n	8001990 <HAL_ADC_MspInit+0x1bc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_ADC_MspInit+0x27c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	4a60      	ldr	r2, [pc, #384]	; (8001a50 <HAL_ADC_MspInit+0x27c>)
 80018d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_ADC_MspInit+0x27c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10e      	bne.n	80018f8 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018da:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80018dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018e0:	4a5c      	ldr	r2, [pc, #368]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018ea:	4b5a      	ldr	r3, [pc, #360]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80018ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001916:	2301      	movs	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	2303      	movs	r3, #3
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	484b      	ldr	r0, [pc, #300]	; (8001a58 <HAL_ADC_MspInit+0x284>)
 800192a:	f004 fb97 	bl	800605c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800192e:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001930:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <HAL_ADC_MspInit+0x298>)
 8001932:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001936:	220a      	movs	r2, #10
 8001938:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001946:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001954:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001964:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196c:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001972:	483d      	ldr	r0, [pc, #244]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001974:	f002 f856 	bl	8003a24 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800197e:	f7ff ff07 	bl	8001790 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 8001986:	64da      	str	r2, [r3, #76]	; 0x4c
 8001988:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_ADC_MspInit+0x294>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800198e:	e058      	b.n	8001a42 <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_ADC_MspInit+0x29c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d153      	bne.n	8001a42 <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	4a2c      	ldr	r2, [pc, #176]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019be:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_ADC_MspInit+0x280>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80019d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80019da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80019de:	f000 fc31 	bl	8002244 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_ADC_MspInit+0x2a4>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 80019ea:	2273      	movs	r2, #115	; 0x73
 80019ec:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 80019fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a00:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a10:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001a26:	4813      	ldr	r0, [pc, #76]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a28:	f001 fffc 	bl	8003a24 <HAL_DMA_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_ADC_MspInit+0x262>
      Error_Handler();
 8001a32:	f7ff fead 	bl	8001790 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_ADC_MspInit+0x2a0>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	24000060 	.word	0x24000060
 8001a54:	58024400 	.word	0x58024400
 8001a58:	58020800 	.word	0x58020800
 8001a5c:	240009c8 	.word	0x240009c8
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40022100 	.word	0x40022100
 8001a68:	24000b5c 	.word	0x24000b5c
 8001a6c:	40020028 	.word	0x40020028
 8001a70:	58026000 	.word	0x58026000
 8001a74:	240006f8 	.word	0x240006f8
 8001a78:	40020040 	.word	0x40020040

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_TIM_Base_MspInit+0x48>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d116      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_Base_MspInit+0x4c>)
 8001aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2037      	movs	r0, #55	; 0x37
 8001ab2:	f001 ff82 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ab6:	2037      	movs	r0, #55	; 0x37
 8001ab8:	f001 ff99 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40001400 	.word	0x40001400
 8001ac8:	58024400 	.word	0x58024400

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b090      	sub	sp, #64	; 0x40
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4aa3      	ldr	r2, [pc, #652]	; (8001d78 <HAL_UART_MspInit+0x2ac>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d136      	bne.n	8001b5c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001aee:	4ba3      	ldr	r3, [pc, #652]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	4aa1      	ldr	r2, [pc, #644]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001afe:	4b9f      	ldr	r3, [pc, #636]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0c:	4b9b      	ldr	r3, [pc, #620]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	4a9a      	ldr	r2, [pc, #616]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1c:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	4619      	mov	r1, r3
 8001b44:	488e      	ldr	r0, [pc, #568]	; (8001d80 <HAL_UART_MspInit+0x2b4>)
 8001b46:	f004 fa89 	bl	800605c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	2052      	movs	r0, #82	; 0x52
 8001b50:	f001 ff33 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001b54:	2052      	movs	r0, #82	; 0x52
 8001b56:	f001 ff4a 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b5a:	e108      	b.n	8001d6e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a88      	ldr	r2, [pc, #544]	; (8001d84 <HAL_UART_MspInit+0x2b8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d165      	bne.n	8001c32 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b66:	4b85      	ldr	r3, [pc, #532]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b6c:	4a83      	ldr	r2, [pc, #524]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b76:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	4a7c      	ldr	r2, [pc, #496]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b94:	4b79      	ldr	r3, [pc, #484]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001ba2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4872      	ldr	r0, [pc, #456]	; (8001d88 <HAL_UART_MspInit+0x2bc>)
 8001bc0:	f004 fa4c 	bl	800605c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001bc4:	4b71      	ldr	r3, [pc, #452]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bc6:	4a72      	ldr	r2, [pc, #456]	; (8001d90 <HAL_UART_MspInit+0x2c4>)
 8001bc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001bca:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bcc:	2229      	movs	r2, #41	; 0x29
 8001bce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bdc:	4b6b      	ldr	r3, [pc, #428]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be4:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bea:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c04:	4861      	ldr	r0, [pc, #388]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001c06:	f001 ff0d 	bl	8003a24 <HAL_DMA_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001c10:	f7ff fdbe 	bl	8001790 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001c18:	679a      	str	r2, [r3, #120]	; 0x78
 8001c1a:	4a5c      	ldr	r2, [pc, #368]	; (8001d8c <HAL_UART_MspInit+0x2c0>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2101      	movs	r1, #1
 8001c24:	2025      	movs	r0, #37	; 0x25
 8001c26:	f001 fec8 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2a:	2025      	movs	r0, #37	; 0x25
 8001c2c:	f001 fedf 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 8001c30:	e09d      	b.n	8001d6e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_UART_MspInit+0x2c8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d15d      	bne.n	8001cf8 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c42:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001c78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	483c      	ldr	r0, [pc, #240]	; (8001d88 <HAL_UART_MspInit+0x2bc>)
 8001c96:	f004 f9e1 	bl	800605c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001c9c:	4a3f      	ldr	r2, [pc, #252]	; (8001d9c <HAL_UART_MspInit+0x2d0>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001ca2:	222d      	movs	r2, #45	; 0x2d
 8001ca4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca6:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cac:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001cda:	482f      	ldr	r0, [pc, #188]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cdc:	f001 fea2 	bl	8003a24 <HAL_DMA_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001ce6:	f7ff fd53 	bl	8001790 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cee:	679a      	str	r2, [r3, #120]	; 0x78
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <HAL_UART_MspInit+0x2cc>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cf6:	e03a      	b.n	8001d6e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_UART_MspInit+0x2d4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d135      	bne.n	8001d6e <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_UART_MspInit+0x2b0>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001d3e:	23c0      	movs	r3, #192	; 0xc0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d56:	4619      	mov	r1, r3
 8001d58:	4812      	ldr	r0, [pc, #72]	; (8001da4 <HAL_UART_MspInit+0x2d8>)
 8001d5a:	f004 f97f 	bl	800605c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2102      	movs	r1, #2
 8001d62:	2047      	movs	r0, #71	; 0x47
 8001d64:	f001 fe29 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d68:	2047      	movs	r0, #71	; 0x47
 8001d6a:	f001 fe40 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3740      	adds	r7, #64	; 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40007800 	.word	0x40007800
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	58021400 	.word	0x58021400
 8001d84:	40011000 	.word	0x40011000
 8001d88:	58020400 	.word	0x58020400
 8001d8c:	2400088c 	.word	0x2400088c
 8001d90:	40020058 	.word	0x40020058
 8001d94:	40004800 	.word	0x40004800
 8001d98:	24000134 	.word	0x24000134
 8001d9c:	40020440 	.word	0x40020440
 8001da0:	40011400 	.word	0x40011400
 8001da4:	58020800 	.word	0x58020800

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <SysTick_Handler+0x2c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <SysTick_Handler+0x2c>)
 8001e06:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SysTick_Handler+0x2c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d904      	bls.n	8001e1a <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Handler+0x2c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001e16:	f7fe fcff 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1a:	f000 f9c5 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000918 	.word	0x24000918

08001e28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <DMA1_Stream0_IRQHandler+0x10>)
 8001e2e:	f002 fe03 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	240009c8 	.word	0x240009c8

08001e3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//	leftRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
//	rigtRawDistance = a_Linear *pitchRawValue[1] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[2] + b_Linear;
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <DMA1_Stream1_IRQHandler+0x10>)
 8001e42:	f002 fdf9 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	24000b5c 	.word	0x24000b5c

08001e50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA1_Stream2_IRQHandler+0x10>)
 8001e56:	f002 fdef 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	240006f8 	.word	0x240006f8

08001e64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <DMA1_Stream3_IRQHandler+0x24>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <DMA1_Stream3_IRQHandler+0x24>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <DMA1_Stream3_IRQHandler+0x28>)
 8001e7c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <DMA1_Stream3_IRQHandler+0x2c>)
 8001e80:	f002 fdda 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	240006d8 	.word	0x240006d8
 8001e8c:	24000788 	.word	0x24000788
 8001e90:	2400088c 	.word	0x2400088c

08001e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <USART1_IRQHandler+0x10>)
 8001e9a:	f007 feb5 	bl	8009c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	24000928 	.word	0x24000928

08001ea8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM7_IRQHandler+0x10>)
 8001eae:	f007 f959 	bl	8009164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	24000be0 	.word	0x24000be0

08001ebc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d135      	bne.n	8001f34 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <DMA2_Stream2_IRQHandler+0xac>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	b2d1      	uxtb	r1, r2
 8001ed0:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <DMA2_Stream2_IRQHandler+0xac>)
 8001ed2:	7011      	strb	r1, [r2, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <DMA2_Stream2_IRQHandler+0xb0>)
 8001ed8:	7819      	ldrb	r1, [r3, #0]
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001edc:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <DMA2_Stream2_IRQHandler+0xac>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d926      	bls.n	8001f34 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <DMA2_Stream2_IRQHandler+0xac>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <DMA2_Stream2_IRQHandler+0xa8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <DMA2_Stream2_IRQHandler+0xb8>)
 8001f06:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <DMA2_Stream2_IRQHandler+0xbc>)
 8001f1c:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f20:	791b      	ldrb	r3, [r3, #4]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f28:	795b      	ldrb	r3, [r3, #5]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <DMA2_Stream2_IRQHandler+0xc0>)
 8001f32:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <DMA2_Stream2_IRQHandler+0xb0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2baa      	cmp	r3, #170	; 0xaa
 8001f3a:	d106      	bne.n	8001f4a <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e006      	b.n	8001f58 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <DMA2_Stream2_IRQHandler+0xc4>)
 8001f5a:	f002 fd6d 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2400005c 	.word	0x2400005c
 8001f68:	2400081c 	.word	0x2400081c
 8001f6c:	24000b24 	.word	0x24000b24
 8001f70:	240006d0 	.word	0x240006d0
 8001f74:	240009c4 	.word	0x240009c4
 8001f78:	240009c6 	.word	0x240009c6
 8001f7c:	24000b38 	.word	0x24000b38
 8001f80:	24000134 	.word	0x24000134

08001f84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <USART6_IRQHandler+0x10>)
 8001f8a:	f007 fe3d 	bl	8009c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	24000a98 	.word	0x24000a98

08001f98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <UART7_IRQHandler+0x10>)
 8001f9e:	f007 fe33 	bl	8009c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	24000090 	.word	0x24000090

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <SystemInit+0xac>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a28      	ldr	r2, [pc, #160]	; (8002058 <SystemInit+0xac>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <SystemInit+0xb0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <SystemInit+0xb0>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <SystemInit+0xb0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <SystemInit+0xb0>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4921      	ldr	r1, [pc, #132]	; (800205c <SystemInit+0xb0>)
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <SystemInit+0xb4>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SystemInit+0xb0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <SystemInit+0xb0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <SystemInit+0xb0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <SystemInit+0xb0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <SystemInit+0xb0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <SystemInit+0xb0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <SystemInit+0xb0>)
 8002004:	2200      	movs	r2, #0
 8002006:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <SystemInit+0xb0>)
 800200a:	2200      	movs	r2, #0
 800200c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <SystemInit+0xb0>)
 8002010:	2200      	movs	r2, #0
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <SystemInit+0xb0>)
 8002016:	2200      	movs	r2, #0
 8002018:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <SystemInit+0xb0>)
 800201c:	2200      	movs	r2, #0
 800201e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <SystemInit+0xb0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <SystemInit+0xb0>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <SystemInit+0xb0>)
 800202e:	2200      	movs	r2, #0
 8002030:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <SystemInit+0xb8>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <SystemInit+0xbc>)
 8002038:	4013      	ands	r3, r2
 800203a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203e:	d202      	bcs.n	8002046 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <SystemInit+0xc0>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SystemInit+0xac>)
 8002048:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00
 800205c:	58024400 	.word	0x58024400
 8002060:	eaf6ed7f 	.word	0xeaf6ed7f
 8002064:	5c001000 	.word	0x5c001000
 8002068:	ffff0000 	.word	0xffff0000
 800206c:	51008108 	.word	0x51008108

08002070 <Reset_Handler>:
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x14>
 8002074:	2100      	movs	r1, #0
 8002076:	e003      	b.n	8002080 <LoopCopyDataInit>

08002078 <CopyDataInit>:
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopFillZerobss+0x18>)
 800207a:	585b      	ldr	r3, [r3, r1]
 800207c:	5043      	str	r3, [r0, r1]
 800207e:	3104      	adds	r1, #4

08002080 <LoopCopyDataInit>:
 8002080:	480b      	ldr	r0, [pc, #44]	; (80020b0 <LoopFillZerobss+0x1c>)
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <LoopFillZerobss+0x20>)
 8002084:	1842      	adds	r2, r0, r1
 8002086:	429a      	cmp	r2, r3
 8002088:	d3f6      	bcc.n	8002078 <CopyDataInit>
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopFillZerobss+0x24>)
 800208c:	e002      	b.n	8002094 <LoopFillZerobss>

0800208e <FillZerobss>:
 800208e:	2300      	movs	r3, #0
 8002090:	f842 3b04 	str.w	r3, [r2], #4

08002094 <LoopFillZerobss>:
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <LoopFillZerobss+0x28>)
 8002096:	429a      	cmp	r2, r3
 8002098:	d3f9      	bcc.n	800208e <FillZerobss>
 800209a:	f7ff ff87 	bl	8001fac <SystemInit>
 800209e:	f00a ff29 	bl	800cef4 <__libc_init_array>
 80020a2:	f7fe fe6f 	bl	8000d84 <main>
 80020a6:	4770      	bx	lr
 80020a8:	24080000 	.word	0x24080000
 80020ac:	0800cf9c 	.word	0x0800cf9c
 80020b0:	24000000 	.word	0x24000000
 80020b4:	24000040 	.word	0x24000040
 80020b8:	24000040 	.word	0x24000040
 80020bc:	24000c44 	.word	0x24000c44

080020c0 <ADC3_IRQHandler>:
 80020c0:	e7fe      	b.n	80020c0 <ADC3_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f001 fc6a 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020d0:	f004 ff70 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 80020d4:	4601      	mov	r1, r0
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_Init+0x68>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_Init+0x6c>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa21 f303 	lsr.w	r3, r1, r3
 80020ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_Init+0x68>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_Init+0x6c>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_Init+0x70>)
 8002106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002108:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_Init+0x74>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210e:	2000      	movs	r0, #0
 8002110:	f000 f814 	bl	800213c <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e002      	b.n	8002124 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800211e:	f7ff fb3f 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	58024400 	.word	0x58024400
 8002130:	0800cf74 	.word	0x0800cf74
 8002134:	24000034 	.word	0x24000034
 8002138:	24000030 	.word	0x24000030

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_InitTick+0x60>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e021      	b.n	8002194 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_InitTick+0x64>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_InitTick+0x60>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fc4f 	bl	8003a0a <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f001 fc19 	bl	80039ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <HAL_InitTick+0x68>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2400003c 	.word	0x2400003c
 80021a0:	24000030 	.word	0x24000030
 80021a4:	24000038 	.word	0x24000038

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2400003c 	.word	0x2400003c
 80021cc:	24000c40 	.word	0x24000c40

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	24000c40 	.word	0x24000c40

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_Delay+0x40>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2400003c 	.word	0x2400003c

0800222c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_GetREVID+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0c1b      	lsrs	r3, r3, #16
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	5c001000 	.word	0x5c001000

08002244 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	43db      	mvns	r3, r3
 8002256:	401a      	ands	r2, r3
 8002258:	4904      	ldr	r1, [pc, #16]	; (800226c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	58000400 	.word	0x58000400

08002270 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022d8:	b490      	push	{r4, r7}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3360      	adds	r3, #96	; 0x60
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	430b      	orrs	r3, r1
 8002304:	4313      	orrs	r3, r2
 8002306:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bc90      	pop	{r4, r7}
 8002310:	4770      	bx	lr

08002312 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	611a      	str	r2, [r3, #16]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002344:	b490      	push	{r4, r7}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3360      	adds	r3, #96	; 0x60
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4313      	orrs	r3, r2
 8002368:	6023      	str	r3, [r4, #0]
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bc90      	pop	{r4, r7}
 8002372:	4770      	bx	lr

08002374 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800239a:	b490      	push	{r4, r7}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3330      	adds	r3, #48	; 0x30
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	4413      	add	r3, r2
 80023b8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	211f      	movs	r1, #31
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	401a      	ands	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 011f 	and.w	r1, r3, #31
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc90      	pop	{r4, r7}
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023ec:	b490      	push	{r4, r7}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3314      	adds	r3, #20
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	0e5b      	lsrs	r3, r3, #25
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800240c:	6822      	ldr	r2, [r4, #0]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	0d1b      	lsrs	r3, r3, #20
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2107      	movs	r1, #7
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0d1b      	lsrs	r3, r3, #20
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bc90      	pop	{r4, r7}
 800243a:	4770      	bx	lr

0800243c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0318 	and.w	r3, r3, #24
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002460:	40d9      	lsrs	r1, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	400b      	ands	r3, r1
 8002466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	000fffff 	.word	0x000fffff

08002484 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 031f 	and.w	r3, r3, #31
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	5fffffc0 	.word	0x5fffffc0

080024e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f4:	d101      	bne.n	80024fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <LL_ADC_EnableInternalRegulator+0x24>)
 8002516:	4013      	ands	r3, r2
 8002518:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	6fffffc0 	.word	0x6fffffc0

08002530 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002544:	d101      	bne.n	800254a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <LL_ADC_Enable+0x24>)
 8002566:	4013      	ands	r3, r2
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	7fffffc0 	.word	0x7fffffc0

08002580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <LL_ADC_IsEnabled+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_IsEnabled+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <LL_ADC_REG_StartConversion+0x24>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	7fffffc0 	.word	0x7fffffc0

080025d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d101      	bne.n	80025e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b08      	cmp	r3, #8
 8002608:	d101      	bne.n	800260e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e18e      	b.n	8002954 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff f8c5 	bl	80017d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff3f 	bl	80024e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff25 	bl	80024bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff5a 	bl	8002530 <LL_ADC_IsInternalRegulatorEnabled>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d113      	bne.n	80026aa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff3e 	bl	8002508 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800268c:	4b9a      	ldr	r3, [pc, #616]	; (80028f8 <HAL_ADC_Init+0x2dc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <HAL_ADC_Init+0x2e0>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800269c:	e002      	b.n	80026a4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f9      	bne.n	800269e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff3e 	bl	8002530 <LL_ADC_IsInternalRegulatorEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f043 0210 	orr.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff78 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 80026e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8129 	bne.w	8002942 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 8125 	bne.w	8002942 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002700:	f043 0202 	orr.w	r2, r3, #2
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff37 	bl	8002580 <LL_ADC_IsEnabled>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d136      	bne.n	8002786 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a78      	ldr	r2, [pc, #480]	; (8002900 <HAL_ADC_Init+0x2e4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_ADC_Init+0x110>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_ADC_Init+0x2e8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10e      	bne.n	800274a <HAL_ADC_Init+0x12e>
 800272c:	4874      	ldr	r0, [pc, #464]	; (8002900 <HAL_ADC_Init+0x2e4>)
 800272e:	f7ff ff27 	bl	8002580 <LL_ADC_IsEnabled>
 8002732:	4604      	mov	r4, r0
 8002734:	4873      	ldr	r0, [pc, #460]	; (8002904 <HAL_ADC_Init+0x2e8>)
 8002736:	f7ff ff23 	bl	8002580 <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	4323      	orrs	r3, r4
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e008      	b.n	800275c <HAL_ADC_Init+0x140>
 800274a:	486f      	ldr	r0, [pc, #444]	; (8002908 <HAL_ADC_Init+0x2ec>)
 800274c:	f7ff ff18 	bl	8002580 <LL_ADC_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a66      	ldr	r2, [pc, #408]	; (8002900 <HAL_ADC_Init+0x2e4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_ADC_Init+0x158>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_ADC_Init+0x2e8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_ADC_Init+0x15c>
 8002774:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_ADC_Init+0x2f0>)
 8002776:	e000      	b.n	800277a <HAL_ADC_Init+0x15e>
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_ADC_Init+0x2f4>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7ff fd75 	bl	8002270 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002786:	f7ff fd51 	bl	800222c <HAL_GetREVID>
 800278a:	4602      	mov	r2, r0
 800278c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002790:	429a      	cmp	r2, r3
 8002792:	d914      	bls.n	80027be <HAL_ADC_Init+0x1a2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d110      	bne.n	80027be <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7d5b      	ldrb	r3, [r3, #21]
 80027a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7f1b      	ldrb	r3, [r3, #28]
 80027b2:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80027b4:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027b6:	f043 030c 	orr.w	r3, r3, #12
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e00d      	b.n	80027da <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7d5b      	ldrb	r3, [r3, #21]
 80027c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7f1b      	ldrb	r3, [r3, #28]
 80027d4:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7f1b      	ldrb	r3, [r3, #28]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	045b      	lsls	r3, r3, #17
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_ADC_Init+0x2f8>)
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	430b      	orrs	r3, r1
 800281e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fed3 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 800282a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fee0 	bl	80025f6 <LL_ADC_INJ_IsConversionOngoing>
 8002836:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d14a      	bne.n	80028d4 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d147      	bne.n	80028d4 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7d1b      	ldrb	r3, [r3, #20]
 8002848:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_ADC_Init+0x2fc>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	69b9      	ldr	r1, [r7, #24]
 8002862:	430b      	orrs	r3, r1
 8002864:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286c:	2b01      	cmp	r3, #1
 800286e:	d11b      	bne.n	80028a8 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_ADC_Init+0x300>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002884:	3a01      	subs	r2, #1
 8002886:	0411      	lsls	r1, r2, #16
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002898:	430a      	orrs	r2, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	611a      	str	r2, [r3, #16]
 80028a6:	e007      	b.n	80028b8 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fda0 	bl	8003414 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d121      	bne.n	8002920 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f023 010f 	bic.w	r1, r3, #15
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
 80028f4:	e01c      	b.n	8002930 <HAL_ADC_Init+0x314>
 80028f6:	bf00      	nop
 80028f8:	24000030 	.word	0x24000030
 80028fc:	053e2d63 	.word	0x053e2d63
 8002900:	40022000 	.word	0x40022000
 8002904:	40022100 	.word	0x40022100
 8002908:	58026000 	.word	0x58026000
 800290c:	40022300 	.word	0x40022300
 8002910:	58026300 	.word	0x58026300
 8002914:	fff0c003 	.word	0xfff0c003
 8002918:	ffffbffc 	.word	0xffffbffc
 800291c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 020f 	bic.w	r2, r2, #15
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f023 0303 	bic.w	r3, r3, #3
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
 8002940:	e007      	b.n	8002952 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002952:	7ffb      	ldrb	r3, [r7, #31]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3724      	adds	r7, #36	; 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}

0800295c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5c      	ldr	r2, [pc, #368]	; (8002adc <HAL_ADC_Start+0x180>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_ADC_Start+0x1c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5b      	ldr	r2, [pc, #364]	; (8002ae0 <HAL_ADC_Start+0x184>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_ADC_Start+0x20>
 8002978:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <HAL_ADC_Start+0x188>)
 800297a:	e000      	b.n	800297e <HAL_ADC_Start+0x22>
 800297c:	4b5a      	ldr	r3, [pc, #360]	; (8002ae8 <HAL_ADC_Start+0x18c>)
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fd80 	bl	8002484 <LL_ADC_GetMultimode>
 8002984:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fe20 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 809a 	bne.w	8002acc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_Start+0x4a>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e095      	b.n	8002ad2 <HAL_ADC_Start+0x176>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fcac 	bl	800330c <ADC_Enable>
 80029b4:	4603      	mov	r3, r0
 80029b6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8081 	bne.w	8002ac2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029c4:	4b49      	ldr	r3, [pc, #292]	; (8002aec <HAL_ADC_Start+0x190>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a42      	ldr	r2, [pc, #264]	; (8002ae0 <HAL_ADC_Start+0x184>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d002      	beq.n	80029e0 <HAL_ADC_Start+0x84>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e000      	b.n	80029e2 <HAL_ADC_Start+0x86>
 80029e0:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <HAL_ADC_Start+0x180>)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d002      	beq.n	80029f0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f023 0206 	bic.w	r2, r3, #6
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	659a      	str	r2, [r3, #88]	; 0x58
 8002a16:	e002      	b.n	8002a1e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	221c      	movs	r2, #28
 8002a24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <HAL_ADC_Start+0x184>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d002      	beq.n	8002a3e <HAL_ADC_Start+0xe2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	e000      	b.n	8002a40 <HAL_ADC_Start+0xe4>
 8002a3e:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_ADC_Start+0x180>)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d008      	beq.n	8002a5a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d002      	beq.n	8002a5a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d114      	bne.n	8002a84 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fd93 	bl	80025a8 <LL_ADC_REG_StartConversion>
 8002a82:	e025      	b.n	8002ad0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_ADC_Start+0x184>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_Start+0x144>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADC_Start+0x146>
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_ADC_Start+0x180>)
 8002aa2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00f      	beq.n	8002ad0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ab8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
 8002ac0:	e006      	b.n	8002ad0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002aca:	e001      	b.n	8002ad0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022100 	.word	0x40022100
 8002ae4:	40022300 	.word	0x40022300
 8002ae8:	58026300 	.word	0x58026300
 8002aec:	fffff0fe 	.word	0xfffff0fe

08002af0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_ADC_PollForConversion+0x1c8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_ADC_PollForConversion+0x1e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <HAL_ADC_PollForConversion+0x1cc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_PollForConversion+0x22>
 8002b0e:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_ADC_PollForConversion+0x1d0>)
 8002b10:	e000      	b.n	8002b14 <HAL_ADC_PollForConversion+0x24>
 8002b12:	4b6c      	ldr	r3, [pc, #432]	; (8002cc4 <HAL_ADC_PollForConversion+0x1d4>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fcb5 	bl	8002484 <LL_ADC_GetMultimode>
 8002b1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d102      	bne.n	8002b2a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b24:	2308      	movs	r3, #8
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	e037      	b.n	8002b9a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d002      	beq.n	8002b3c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d111      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0aa      	b.n	8002cb0 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002b5e:	e01c      	b.n	8002b9a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_ADC_PollForConversion+0x1c8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_PollForConversion+0x84>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <HAL_ADC_PollForConversion+0x1cc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_PollForConversion+0x88>
 8002b74:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <HAL_ADC_PollForConversion+0x1d0>)
 8002b76:	e000      	b.n	8002b7a <HAL_ADC_PollForConversion+0x8a>
 8002b78:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_ADC_PollForConversion+0x1d4>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fc90 	bl	80024a0 <LL_ADC_GetMultiDMATransfer>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0220 	orr.w	r2, r3, #32
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e08c      	b.n	8002cb0 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b96:	2304      	movs	r3, #4
 8002b98:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b9a:	f7ff fb19 	bl	80021d0 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ba0:	e01a      	b.n	8002bd8 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d016      	beq.n	8002bd8 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002baa:	f7ff fb11 	bl	80021d0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <HAL_ADC_PollForConversion+0xd0>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e06b      	b.n	8002cb0 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0dd      	beq.n	8002ba2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fbbc 	bl	8002374 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01c      	beq.n	8002c3c <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7d5b      	ldrb	r3, [r3, #21]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d111      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_ADC_PollForConversion+0x1cc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d002      	beq.n	8002c4c <HAL_ADC_PollForConversion+0x15c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e000      	b.n	8002c4e <HAL_ADC_PollForConversion+0x15e>
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_ADC_PollForConversion+0x1c8>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d008      	beq.n	8002c68 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d002      	beq.n	8002c68 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d104      	bne.n	8002c72 <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e00c      	b.n	8002c8c <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_ADC_PollForConversion+0x1cc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d002      	beq.n	8002c82 <HAL_ADC_PollForConversion+0x192>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	e000      	b.n	8002c84 <HAL_ADC_PollForConversion+0x194>
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_ADC_PollForConversion+0x1c8>)
 8002c84:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d104      	bne.n	8002c9c <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2208      	movs	r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e008      	b.n	8002cae <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	220c      	movs	r2, #12
 8002cac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40022100 	.word	0x40022100
 8002cc0:	40022300 	.word	0x40022300
 8002cc4:	58026300 	.word	0x58026300

08002cc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b099      	sub	sp, #100	; 0x64
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a99      	ldr	r2, [pc, #612]	; (8002f64 <HAL_ADC_ConfigChannel+0x280>)
 8002cfe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x2a>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e2e6      	b.n	80032dc <HAL_ADC_ConfigChannel+0x5f8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fc58 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 82cb 	bne.w	80032be <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d108      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x62>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2201      	movs	r2, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	e00f      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x82>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2201      	movs	r2, #1
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	69d1      	ldr	r1, [r2, #28]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f7ff fb0a 	bl	800239a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc20 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fc2d 	bl	80025f6 <LL_ADC_INJ_IsConversionOngoing>
 8002d9c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 80b3 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 80af 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff fb16 	bl	80023ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dc0:	4b69      	ldr	r3, [pc, #420]	; (8002f68 <HAL_ADC_ConfigChannel+0x284>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dcc:	d10b      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x102>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	e01d      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x13e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x128>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	e00a      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x13e>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d027      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6919      	ldr	r1, [r3, #16]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3a:	f7ff fa4d 	bl	80022d8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6919      	ldr	r1, [r3, #16]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	7e5b      	ldrb	r3, [r3, #25]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x170>
 8002e4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e52:	e000      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x172>
 8002e54:	2300      	movs	r3, #0
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7ff fa74 	bl	8002344 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6919      	ldr	r1, [r3, #16]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d102      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x18e>
 8002e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e70:	e000      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x190>
 8002e72:	2300      	movs	r3, #0
 8002e74:	461a      	mov	r2, r3
 8002e76:	f7ff fa4c 	bl	8002312 <LL_ADC_SetDataRightShift>
 8002e7a:	e047      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e9e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ec2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	069b      	lsls	r3, r3, #26
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d107      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	069b      	lsls	r3, r3, #26
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fb35 	bl	8002580 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 81d9 	bne.w	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f7ff fa86 	bl	800243c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <HAL_ADC_ConfigChannel+0x280>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	f040 8101 	bne.w	800313e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x288>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e016      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x2ae>
 8002f64:	47ff0000 	.word	0x47ff0000
 8002f68:	5c001000 	.word	0x5c001000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d064      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d107      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x2ce>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	0e9b      	lsrs	r3, r3, #26
 8002fa8:	3301      	adds	r3, #1
 8002faa:	069b      	lsls	r3, r3, #26
 8002fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb0:	e00e      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x2ec>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	069b      	lsls	r3, r3, #26
 8002fcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x30c>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0e9b      	lsrs	r3, r3, #26
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	e010      	b.n	8003012 <HAL_ADC_ConfigChannel+0x32e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	ea42 0103 	orr.w	r1, r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x354>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	3301      	adds	r3, #1
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	051b      	lsls	r3, r3, #20
 8003036:	e011      	b.n	800305c <HAL_ADC_ConfigChannel+0x378>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305c:	430b      	orrs	r3, r1
 800305e:	e069      	b.n	8003134 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_ADC_ConfigChannel+0x398>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	3301      	adds	r3, #1
 8003074:	069b      	lsls	r3, r3, #26
 8003076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800307a:	e00e      	b.n	800309a <HAL_ADC_ConfigChannel+0x3b6>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	61fb      	str	r3, [r7, #28]
  return result;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x3d6>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	e010      	b.n	80030dc <HAL_ADC_ConfigChannel+0x3f8>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	617b      	str	r3, [r7, #20]
  return result;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	ea42 0103 	orr.w	r1, r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x424>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	3301      	adds	r3, #1
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	3b1e      	subs	r3, #30
 8003100:	051b      	lsls	r3, r3, #20
 8003102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003106:	e014      	b.n	8003132 <HAL_ADC_ConfigChannel+0x44e>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	60fb      	str	r3, [r7, #12]
  return result;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	3b1e      	subs	r3, #30
 800312c:	051b      	lsls	r3, r3, #20
 800312e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003132:	430b      	orrs	r3, r1
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	6892      	ldr	r2, [r2, #8]
 8003138:	4619      	mov	r1, r3
 800313a:	f7ff f957 	bl	80023ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f280 80c4 	bge.w	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_ADC_ConfigChannel+0x600>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_ADC_ConfigChannel+0x478>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a64      	ldr	r2, [pc, #400]	; (80032e8 <HAL_ADC_ConfigChannel+0x604>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x47c>
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_ADC_ConfigChannel+0x608>)
 800315e:	e000      	b.n	8003162 <HAL_ADC_ConfigChannel+0x47e>
 8003160:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_ADC_ConfigChannel+0x60c>)
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f8aa 	bl	80022bc <LL_ADC_GetCommonPathInternalCh>
 8003168:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5d      	ldr	r2, [pc, #372]	; (80032e4 <HAL_ADC_ConfigChannel+0x600>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_ADC_ConfigChannel+0x49a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5b      	ldr	r2, [pc, #364]	; (80032e8 <HAL_ADC_ConfigChannel+0x604>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10e      	bne.n	800319c <HAL_ADC_ConfigChannel+0x4b8>
 800317e:	4859      	ldr	r0, [pc, #356]	; (80032e4 <HAL_ADC_ConfigChannel+0x600>)
 8003180:	f7ff f9fe 	bl	8002580 <LL_ADC_IsEnabled>
 8003184:	4604      	mov	r4, r0
 8003186:	4858      	ldr	r0, [pc, #352]	; (80032e8 <HAL_ADC_ConfigChannel+0x604>)
 8003188:	f7ff f9fa 	bl	8002580 <LL_ADC_IsEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	4323      	orrs	r3, r4
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_ADC_ConfigChannel+0x4ca>
 800319c:	4855      	ldr	r0, [pc, #340]	; (80032f4 <HAL_ADC_ConfigChannel+0x610>)
 800319e:	f7ff f9ef 	bl	8002580 <LL_ADC_IsEnabled>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d07b      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a50      	ldr	r2, [pc, #320]	; (80032f8 <HAL_ADC_ConfigChannel+0x614>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d12e      	bne.n	800321a <HAL_ADC_ConfigChannel+0x536>
 80031bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d129      	bne.n	800321a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_ADC_ConfigChannel+0x610>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d17f      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a43      	ldr	r2, [pc, #268]	; (80032e4 <HAL_ADC_ConfigChannel+0x600>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x500>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a42      	ldr	r2, [pc, #264]	; (80032e8 <HAL_ADC_ConfigChannel+0x604>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x504>
 80031e4:	4a41      	ldr	r2, [pc, #260]	; (80032ec <HAL_ADC_ConfigChannel+0x608>)
 80031e6:	e000      	b.n	80031ea <HAL_ADC_ConfigChannel+0x506>
 80031e8:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <HAL_ADC_ConfigChannel+0x60c>)
 80031ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7ff f84f 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80031f8:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_ADC_ConfigChannel+0x618>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	4a40      	ldr	r2, [pc, #256]	; (8003300 <HAL_ADC_ConfigChannel+0x61c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3b01      	subs	r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003218:	e05a      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a39      	ldr	r2, [pc, #228]	; (8003304 <HAL_ADC_ConfigChannel+0x620>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d11e      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x57e>
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d119      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <HAL_ADC_ConfigChannel+0x610>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d14b      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <HAL_ADC_ConfigChannel+0x600>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_ADC_ConfigChannel+0x568>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <HAL_ADC_ConfigChannel+0x604>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x56c>
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_ADC_ConfigChannel+0x608>)
 800324e:	e000      	b.n	8003252 <HAL_ADC_ConfigChannel+0x56e>
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_ADC_ConfigChannel+0x60c>)
 8003252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7ff f81b 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003260:	e036      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a28      	ldr	r2, [pc, #160]	; (8003308 <HAL_ADC_ConfigChannel+0x624>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d131      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12c      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_ADC_ConfigChannel+0x610>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d127      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_ADC_ConfigChannel+0x600>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x5b0>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_ADC_ConfigChannel+0x604>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5b4>
 8003294:	4a15      	ldr	r2, [pc, #84]	; (80032ec <HAL_ADC_ConfigChannel+0x608>)
 8003296:	e000      	b.n	800329a <HAL_ADC_ConfigChannel+0x5b6>
 8003298:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <HAL_ADC_ConfigChannel+0x60c>)
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7fe fff7 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
 80032a8:	e012      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80032bc:	e008      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3764      	adds	r7, #100	; 0x64
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40022100 	.word	0x40022100
 80032ec:	40022300 	.word	0x40022300
 80032f0:	58026300 	.word	0x58026300
 80032f4:	58026000 	.word	0x58026000
 80032f8:	cb840000 	.word	0xcb840000
 80032fc:	24000030 	.word	0x24000030
 8003300:	053e2d63 	.word	0x053e2d63
 8003304:	c7520000 	.word	0xc7520000
 8003308:	cfb80000 	.word	0xcfb80000

0800330c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f931 	bl	8002580 <LL_ADC_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d167      	bne.n	80033f4 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <ADC_Enable+0xf4>)
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e053      	b.n	80033f6 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f900 	bl	8002558 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003358:	f7fe ff3a 	bl	80021d0 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a28      	ldr	r2, [pc, #160]	; (8003404 <ADC_Enable+0xf8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <ADC_Enable+0x66>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <ADC_Enable+0xfc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <ADC_Enable+0x6a>
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <ADC_Enable+0x100>)
 8003374:	e000      	b.n	8003378 <ADC_Enable+0x6c>
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <ADC_Enable+0x104>)
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f883 	bl	8002484 <LL_ADC_GetMultimode>
 800337e:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <ADC_Enable+0xfc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d002      	beq.n	8003390 <ADC_Enable+0x84>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e000      	b.n	8003392 <ADC_Enable+0x86>
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <ADC_Enable+0xf8>)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4293      	cmp	r3, r2
 8003398:	d025      	beq.n	80033e6 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d129      	bne.n	80033f4 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033a0:	e021      	b.n	80033e6 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f8ea 	bl	8002580 <LL_ADC_IsEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f8ce 	bl	8002558 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033bc:	f7fe ff08 	bl	80021d0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d90d      	bls.n	80033e6 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e007      	b.n	80033f6 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d1d6      	bne.n	80033a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	8000003f 	.word	0x8000003f
 8003404:	40022000 	.word	0x40022000
 8003408:	40022100 	.word	0x40022100
 800340c:	40022300 	.word	0x40022300
 8003410:	58026300 	.word	0x58026300

08003414 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <ADC_ConfigureBoostMode+0x1d0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <ADC_ConfigureBoostMode+0x1c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <ADC_ConfigureBoostMode+0x1d4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d109      	bne.n	8003444 <ADC_ConfigureBoostMode+0x30>
 8003430:	4b6e      	ldr	r3, [pc, #440]	; (80035ec <ADC_ConfigureBoostMode+0x1d8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e008      	b.n	8003456 <ADC_ConfigureBoostMode+0x42>
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <ADC_ConfigureBoostMode+0x1dc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01a      	beq.n	8003490 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800345a:	f003 ff1d 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 800345e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003468:	d006      	beq.n	8003478 <ADC_ConfigureBoostMode+0x64>
 800346a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800346e:	d00b      	beq.n	8003488 <ADC_ConfigureBoostMode+0x74>
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d000      	beq.n	8003478 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003476:	e05d      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	e055      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	60fb      	str	r3, [r7, #12]
        break;
 800348e:	e051      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003490:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003494:	f004 fe3a 	bl	800810c <HAL_RCCEx_GetPeriphCLKFreq>
 8003498:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034a2:	d02a      	beq.n	80034fa <ADC_ConfigureBoostMode+0xe6>
 80034a4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034a8:	d813      	bhi.n	80034d2 <ADC_ConfigureBoostMode+0xbe>
 80034aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ae:	d024      	beq.n	80034fa <ADC_ConfigureBoostMode+0xe6>
 80034b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b4:	d806      	bhi.n	80034c4 <ADC_ConfigureBoostMode+0xb0>
 80034b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ba:	d01e      	beq.n	80034fa <ADC_ConfigureBoostMode+0xe6>
 80034bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034c0:	d01b      	beq.n	80034fa <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80034c2:	e037      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80034c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c8:	d017      	beq.n	80034fa <ADC_ConfigureBoostMode+0xe6>
 80034ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034ce:	d014      	beq.n	80034fa <ADC_ConfigureBoostMode+0xe6>
        break;
 80034d0:	e030      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80034d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034d6:	d021      	beq.n	800351c <ADC_ConfigureBoostMode+0x108>
 80034d8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034dc:	d806      	bhi.n	80034ec <ADC_ConfigureBoostMode+0xd8>
 80034de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034e2:	d013      	beq.n	800350c <ADC_ConfigureBoostMode+0xf8>
 80034e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e8:	d014      	beq.n	8003514 <ADC_ConfigureBoostMode+0x100>
        break;
 80034ea:	e023      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80034ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034f0:	d018      	beq.n	8003524 <ADC_ConfigureBoostMode+0x110>
 80034f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034f6:	d019      	beq.n	800352c <ADC_ConfigureBoostMode+0x118>
        break;
 80034f8:	e01c      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0c9b      	lsrs	r3, r3, #18
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	60fb      	str	r3, [r7, #12]
        break;
 800350a:	e013      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	60fb      	str	r3, [r7, #12]
      break;
 8003512:	e00f      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	60fb      	str	r3, [r7, #12]
        break;
 800351a:	e00b      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	60fb      	str	r3, [r7, #12]
        break;
 8003522:	e007      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	09db      	lsrs	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
        break;
 800352a:	e003      	b.n	8003534 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	60fb      	str	r3, [r7, #12]
        break;
 8003532:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003534:	f7fe fe7a 	bl	800222c <HAL_GetREVID>
 8003538:	4602      	mov	r2, r0
 800353a:	f241 0303 	movw	r3, #4099	; 0x1003
 800353e:	429a      	cmp	r2, r3
 8003540:	d815      	bhi.n	800356e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <ADC_ConfigureBoostMode+0x1e0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d908      	bls.n	800355c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003558:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800355a:	e03e      	b.n	80035da <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	e035      	b.n	80035da <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <ADC_ConfigureBoostMode+0x1e4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d808      	bhi.n	800358e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	e025      	b.n	80035da <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <ADC_ConfigureBoostMode+0x1e8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d80a      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	e016      	b.n	80035da <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a14      	ldr	r2, [pc, #80]	; (8003600 <ADC_ConfigureBoostMode+0x1ec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d80a      	bhi.n	80035ca <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	e007      	b.n	80035da <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40022100 	.word	0x40022100
 80035ec:	40022300 	.word	0x40022300
 80035f0:	58026300 	.word	0x58026300
 80035f4:	01312d00 	.word	0x01312d00
 80035f8:	005f5e10 	.word	0x005f5e10
 80035fc:	00bebc20 	.word	0x00bebc20
 8003600:	017d7840 	.word	0x017d7840

08003604 <LL_ADC_IsEnabled>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <LL_ADC_IsEnabled+0x18>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <LL_ADC_IsEnabled+0x1a>
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_REG_IsConversionOngoing>:
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d101      	bne.n	8003642 <LL_ADC_REG_IsConversionOngoing+0x18>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b09f      	sub	sp, #124	; 0x7c
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800366a:	2302      	movs	r3, #2
 800366c:	e0ba      	b.n	80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5c      	ldr	r2, [pc, #368]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003680:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	e001      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e09d      	b.n	80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ffbd 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 80036b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ffb7 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d17f      	bne.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d17c      	bne.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a47      	ldr	r2, [pc, #284]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a46      	ldr	r2, [pc, #280]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d101      	bne.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036de:	e000      	b.n	80036e2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d039      	beq.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10e      	bne.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003712:	4836      	ldr	r0, [pc, #216]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003714:	f7ff ff76 	bl	8003604 <LL_ADC_IsEnabled>
 8003718:	4604      	mov	r4, r0
 800371a:	4835      	ldr	r0, [pc, #212]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800371c:	f7ff ff72 	bl	8003604 <LL_ADC_IsEnabled>
 8003720:	4603      	mov	r3, r0
 8003722:	4323      	orrs	r3, r4
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e008      	b.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003730:	4832      	ldr	r0, [pc, #200]	; (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003732:	f7ff ff67 	bl	8003604 <LL_ADC_IsEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d047      	beq.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800374c:	4013      	ands	r3, r2
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	430a      	orrs	r2, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800375e:	e03a      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10e      	bne.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003780:	481a      	ldr	r0, [pc, #104]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003782:	f7ff ff3f 	bl	8003604 <LL_ADC_IsEnabled>
 8003786:	4604      	mov	r4, r0
 8003788:	4819      	ldr	r0, [pc, #100]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800378a:	f7ff ff3b 	bl	8003604 <LL_ADC_IsEnabled>
 800378e:	4603      	mov	r3, r0
 8003790:	4323      	orrs	r3, r4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e008      	b.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800379e:	4817      	ldr	r0, [pc, #92]	; (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037a0:	f7ff ff30 	bl	8003604 <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d010      	beq.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037be:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c0:	e009      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037d4:	e000      	b.n	80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	377c      	adds	r7, #124	; 0x7c
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	40022000 	.word	0x40022000
 80037f0:	40022100 	.word	0x40022100
 80037f4:	40022300 	.word	0x40022300
 80037f8:	58026300 	.word	0x58026300
 80037fc:	58026000 	.word	0x58026000
 8003800:	fffff0e0 	.word	0xfffff0e0

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <__NVIC_SetPriorityGrouping+0x40>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003832:	4a04      	ldr	r2, [pc, #16]	; (8003844 <__NVIC_SetPriorityGrouping+0x40>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60d3      	str	r3, [r2, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00
 8003848:	05fa0000 	.word	0x05fa0000

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff29 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff40 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff90 	bl	80038f8 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5f 	bl	80038a4 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff33 	bl	8003868 <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffa4 	bl	8003960 <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7fe fbd0 	bl	80021d0 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e316      	b.n	800406a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a66      	ldr	r2, [pc, #408]	; (8003bdc <HAL_DMA_Init+0x1b8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04a      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_DMA_Init+0x1bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d045      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a63      	ldr	r2, [pc, #396]	; (8003be4 <HAL_DMA_Init+0x1c0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d040      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a62      	ldr	r2, [pc, #392]	; (8003be8 <HAL_DMA_Init+0x1c4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d03b      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_DMA_Init+0x1c8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d036      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5f      	ldr	r2, [pc, #380]	; (8003bf0 <HAL_DMA_Init+0x1cc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_DMA_Init+0x1d0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02c      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5c      	ldr	r2, [pc, #368]	; (8003bf8 <HAL_DMA_Init+0x1d4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d027      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5a      	ldr	r2, [pc, #360]	; (8003bfc <HAL_DMA_Init+0x1d8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a59      	ldr	r2, [pc, #356]	; (8003c00 <HAL_DMA_Init+0x1dc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_DMA_Init+0x1e0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a56      	ldr	r2, [pc, #344]	; (8003c08 <HAL_DMA_Init+0x1e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a54      	ldr	r2, [pc, #336]	; (8003c0c <HAL_DMA_Init+0x1e8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a53      	ldr	r2, [pc, #332]	; (8003c10 <HAL_DMA_Init+0x1ec>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <HAL_DMA_Init+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a50      	ldr	r2, [pc, #320]	; (8003c18 <HAL_DMA_Init+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_DMA_Init+0xbc>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_DMA_Init+0xbe>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 813b 	beq.w	8003d5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a37      	ldr	r2, [pc, #220]	; (8003bdc <HAL_DMA_Init+0x1b8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a36      	ldr	r2, [pc, #216]	; (8003be0 <HAL_DMA_Init+0x1bc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a34      	ldr	r2, [pc, #208]	; (8003be4 <HAL_DMA_Init+0x1c0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <HAL_DMA_Init+0x1c4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a31      	ldr	r2, [pc, #196]	; (8003bec <HAL_DMA_Init+0x1c8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a30      	ldr	r2, [pc, #192]	; (8003bf0 <HAL_DMA_Init+0x1cc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <HAL_DMA_Init+0x1d0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <HAL_DMA_Init+0x1d4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_DMA_Init+0x1d8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <HAL_DMA_Init+0x1dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <HAL_DMA_Init+0x1e0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <HAL_DMA_Init+0x1e4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <HAL_DMA_Init+0x1e8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <HAL_DMA_Init+0x1ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_DMA_Init+0x1f0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_DMA_Init+0x1f4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <HAL_DMA_Init+0x186>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e007      	b.n	8003bba <HAL_DMA_Init+0x196>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bba:	e02f      	b.n	8003c1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbc:	f7fe fb08 	bl	80021d0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d928      	bls.n	8003c1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e246      	b.n	800406a <HAL_DMA_Init+0x646>
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1c8      	bne.n	8003bbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4b83      	ldr	r3, [pc, #524]	; (8003e44 <HAL_DMA_Init+0x420>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d107      	bne.n	8003c80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c80:	4b71      	ldr	r3, [pc, #452]	; (8003e48 <HAL_DMA_Init+0x424>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b71      	ldr	r3, [pc, #452]	; (8003e4c <HAL_DMA_Init+0x428>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d328      	bcc.n	8003ce0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b28      	cmp	r3, #40	; 0x28
 8003c94:	d903      	bls.n	8003c9e <HAL_DMA_Init+0x27a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c9c:	d917      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca4:	d903      	bls.n	8003cae <HAL_DMA_Init+0x28a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b42      	cmp	r3, #66	; 0x42
 8003cac:	d90f      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b46      	cmp	r3, #70	; 0x46
 8003cb4:	d903      	bls.n	8003cbe <HAL_DMA_Init+0x29a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b48      	cmp	r3, #72	; 0x48
 8003cbc:	d907      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8003cc4:	d905      	bls.n	8003cd2 <HAL_DMA_Init+0x2ae>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b52      	cmp	r3, #82	; 0x52
 8003ccc:	d801      	bhi.n	8003cd2 <HAL_DMA_Init+0x2ae>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_DMA_Init+0x2b0>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f002 f813 	bl	8005d48 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e197      	b.n	800406a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 ff4e 	bl	8005be4 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	223f      	movs	r2, #63	; 0x3f
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e0cd      	b.n	8003efa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <HAL_DMA_Init+0x42c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <HAL_DMA_Init+0x430>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_DMA_Init+0x434>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a36      	ldr	r2, [pc, #216]	; (8003e5c <HAL_DMA_Init+0x438>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <HAL_DMA_Init+0x43c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	; (8003e64 <HAL_DMA_Init+0x440>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a32      	ldr	r2, [pc, #200]	; (8003e68 <HAL_DMA_Init+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <HAL_DMA_Init+0x448>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_Init+0x38e>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_DMA_Init+0x390>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_DMA_Init+0x42c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d021      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_DMA_Init+0x430>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01c      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_DMA_Init+0x434>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d017      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_DMA_Init+0x438>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d012      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_DMA_Init+0x43c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00d      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_DMA_Init+0x440>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d008      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_DMA_Init+0x444>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_DMA_Init+0x448>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_DMA_Init+0x44c>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d020      	beq.n	8003e74 <HAL_DMA_Init+0x450>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d102      	bne.n	8003e40 <HAL_DMA_Init+0x41c>
 8003e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e3e:	e01a      	b.n	8003e76 <HAL_DMA_Init+0x452>
 8003e40:	2300      	movs	r3, #0
 8003e42:	e018      	b.n	8003e76 <HAL_DMA_Init+0x452>
 8003e44:	fe10803f 	.word	0xfe10803f
 8003e48:	5c001000 	.word	0x5c001000
 8003e4c:	ffff0000 	.word	0xffff0000
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494
 8003e70:	fffe000f 	.word	0xfffe000f
 8003e74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ea4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_DMA_Init+0x650>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_DMA_Init+0x654>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 fe89 	bl	8005be4 <DMA_CalcBaseAndBitshift>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e008      	b.n	8003efa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2240      	movs	r2, #64	; 0x40
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0b7      	b.n	800406a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5f      	ldr	r2, [pc, #380]	; (800407c <HAL_DMA_Init+0x658>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d072      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5d      	ldr	r2, [pc, #372]	; (8004080 <HAL_DMA_Init+0x65c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d06d      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5c      	ldr	r2, [pc, #368]	; (8004084 <HAL_DMA_Init+0x660>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d068      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_DMA_Init+0x664>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d063      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a59      	ldr	r2, [pc, #356]	; (800408c <HAL_DMA_Init+0x668>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d05e      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a57      	ldr	r2, [pc, #348]	; (8004090 <HAL_DMA_Init+0x66c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d059      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_DMA_Init+0x670>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d054      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a54      	ldr	r2, [pc, #336]	; (8004098 <HAL_DMA_Init+0x674>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04f      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a53      	ldr	r2, [pc, #332]	; (800409c <HAL_DMA_Init+0x678>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d04a      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a51      	ldr	r2, [pc, #324]	; (80040a0 <HAL_DMA_Init+0x67c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d045      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a50      	ldr	r2, [pc, #320]	; (80040a4 <HAL_DMA_Init+0x680>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d040      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4e      	ldr	r2, [pc, #312]	; (80040a8 <HAL_DMA_Init+0x684>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d03b      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4d      	ldr	r2, [pc, #308]	; (80040ac <HAL_DMA_Init+0x688>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d036      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	; (80040b0 <HAL_DMA_Init+0x68c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d031      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <HAL_DMA_Init+0x690>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d02c      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a48      	ldr	r2, [pc, #288]	; (80040b8 <HAL_DMA_Init+0x694>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d027      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a47      	ldr	r2, [pc, #284]	; (80040bc <HAL_DMA_Init+0x698>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a45      	ldr	r2, [pc, #276]	; (80040c0 <HAL_DMA_Init+0x69c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01d      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a44      	ldr	r2, [pc, #272]	; (80040c4 <HAL_DMA_Init+0x6a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	; (80040c8 <HAL_DMA_Init+0x6a4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <HAL_DMA_Init+0x6a8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <HAL_DMA_Init+0x6ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <HAL_DMA_Init+0x6b0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <HAL_DMA_Init+0x6b4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_Init+0x5ca>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_Init+0x5cc>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f001 ff23 	bl	8005e40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d102      	bne.n	8004008 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800401c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_DMA_Init+0x624>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b08      	cmp	r3, #8
 800402c:	d80c      	bhi.n	8004048 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 ffa0 	bl	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	e008      	b.n	800405a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	a7fdabf8 	.word	0xa7fdabf8
 8004078:	cccccccd 	.word	0xcccccccd
 800407c:	40020010 	.word	0x40020010
 8004080:	40020028 	.word	0x40020028
 8004084:	40020040 	.word	0x40020040
 8004088:	40020058 	.word	0x40020058
 800408c:	40020070 	.word	0x40020070
 8004090:	40020088 	.word	0x40020088
 8004094:	400200a0 	.word	0x400200a0
 8004098:	400200b8 	.word	0x400200b8
 800409c:	40020410 	.word	0x40020410
 80040a0:	40020428 	.word	0x40020428
 80040a4:	40020440 	.word	0x40020440
 80040a8:	40020458 	.word	0x40020458
 80040ac:	40020470 	.word	0x40020470
 80040b0:	40020488 	.word	0x40020488
 80040b4:	400204a0 	.word	0x400204a0
 80040b8:	400204b8 	.word	0x400204b8
 80040bc:	58025408 	.word	0x58025408
 80040c0:	5802541c 	.word	0x5802541c
 80040c4:	58025430 	.word	0x58025430
 80040c8:	58025444 	.word	0x58025444
 80040cc:	58025458 	.word	0x58025458
 80040d0:	5802546c 	.word	0x5802546c
 80040d4:	58025480 	.word	0x58025480
 80040d8:	58025494 	.word	0x58025494

080040dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e226      	b.n	8004546 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DMA_Start_IT+0x2a>
 8004102:	2302      	movs	r3, #2
 8004104:	e21f      	b.n	8004546 <HAL_DMA_Start_IT+0x46a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 820a 	bne.w	8004530 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a68      	ldr	r2, [pc, #416]	; (80042d0 <HAL_DMA_Start_IT+0x1f4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d04a      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a66      	ldr	r2, [pc, #408]	; (80042d4 <HAL_DMA_Start_IT+0x1f8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d045      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_DMA_Start_IT+0x1fc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d040      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a63      	ldr	r2, [pc, #396]	; (80042dc <HAL_DMA_Start_IT+0x200>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d03b      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a62      	ldr	r2, [pc, #392]	; (80042e0 <HAL_DMA_Start_IT+0x204>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d036      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a60      	ldr	r2, [pc, #384]	; (80042e4 <HAL_DMA_Start_IT+0x208>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d031      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5f      	ldr	r2, [pc, #380]	; (80042e8 <HAL_DMA_Start_IT+0x20c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d02c      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5d      	ldr	r2, [pc, #372]	; (80042ec <HAL_DMA_Start_IT+0x210>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d027      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_DMA_Start_IT+0x214>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5a      	ldr	r2, [pc, #360]	; (80042f4 <HAL_DMA_Start_IT+0x218>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01d      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a59      	ldr	r2, [pc, #356]	; (80042f8 <HAL_DMA_Start_IT+0x21c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a57      	ldr	r2, [pc, #348]	; (80042fc <HAL_DMA_Start_IT+0x220>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a56      	ldr	r2, [pc, #344]	; (8004300 <HAL_DMA_Start_IT+0x224>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_DMA_Start_IT+0x228>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a53      	ldr	r2, [pc, #332]	; (8004308 <HAL_DMA_Start_IT+0x22c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a51      	ldr	r2, [pc, #324]	; (800430c <HAL_DMA_Start_IT+0x230>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <HAL_DMA_Start_IT+0x100>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e007      	b.n	80041ec <HAL_DMA_Start_IT+0x110>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 fb4a 	bl	800588c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <HAL_DMA_Start_IT+0x1f4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d04a      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	; (80042d4 <HAL_DMA_Start_IT+0x1f8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d045      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	; (80042d8 <HAL_DMA_Start_IT+0x1fc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d040      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	; (80042dc <HAL_DMA_Start_IT+0x200>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d03b      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_DMA_Start_IT+0x204>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d036      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_DMA_Start_IT+0x208>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d031      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	; (80042e8 <HAL_DMA_Start_IT+0x20c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <HAL_DMA_Start_IT+0x210>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d027      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_DMA_Start_IT+0x214>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d022      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <HAL_DMA_Start_IT+0x218>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d01d      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	; (80042f8 <HAL_DMA_Start_IT+0x21c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_DMA_Start_IT+0x220>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_DMA_Start_IT+0x224>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_DMA_Start_IT+0x228>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_DMA_Start_IT+0x22c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_DMA_Start_IT+0x230>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_DMA_Start_IT+0x1c0>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_DMA_Start_IT+0x1c2>
 800429c:	2300      	movs	r3, #0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 021e 	bic.w	r2, r3, #30
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0216 	orr.w	r2, r2, #22
 80042b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d03e      	beq.n	800433c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e035      	b.n	800433c <HAL_DMA_Start_IT+0x260>
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020e 	bic.w	r2, r3, #14
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 020a 	orr.w	r2, r2, #10
 8004322:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0204 	orr.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a83      	ldr	r2, [pc, #524]	; (8004550 <HAL_DMA_Start_IT+0x474>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d072      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a82      	ldr	r2, [pc, #520]	; (8004554 <HAL_DMA_Start_IT+0x478>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d06d      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a80      	ldr	r2, [pc, #512]	; (8004558 <HAL_DMA_Start_IT+0x47c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d068      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7f      	ldr	r2, [pc, #508]	; (800455c <HAL_DMA_Start_IT+0x480>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d063      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7d      	ldr	r2, [pc, #500]	; (8004560 <HAL_DMA_Start_IT+0x484>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d05e      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <HAL_DMA_Start_IT+0x488>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d059      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_DMA_Start_IT+0x48c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d054      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a79      	ldr	r2, [pc, #484]	; (800456c <HAL_DMA_Start_IT+0x490>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04f      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a77      	ldr	r2, [pc, #476]	; (8004570 <HAL_DMA_Start_IT+0x494>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04a      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a76      	ldr	r2, [pc, #472]	; (8004574 <HAL_DMA_Start_IT+0x498>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d045      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_DMA_Start_IT+0x49c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d040      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	; (800457c <HAL_DMA_Start_IT+0x4a0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03b      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a71      	ldr	r2, [pc, #452]	; (8004580 <HAL_DMA_Start_IT+0x4a4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d036      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_DMA_Start_IT+0x4a8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d031      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_DMA_Start_IT+0x4ac>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6d      	ldr	r2, [pc, #436]	; (800458c <HAL_DMA_Start_IT+0x4b0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d027      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_DMA_Start_IT+0x4b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6a      	ldr	r2, [pc, #424]	; (8004594 <HAL_DMA_Start_IT+0x4b8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_DMA_Start_IT+0x4bc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a67      	ldr	r2, [pc, #412]	; (800459c <HAL_DMA_Start_IT+0x4c0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_DMA_Start_IT+0x4c4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a64      	ldr	r2, [pc, #400]	; (80045a4 <HAL_DMA_Start_IT+0x4c8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a62      	ldr	r2, [pc, #392]	; (80045a8 <HAL_DMA_Start_IT+0x4cc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_DMA_Start_IT+0x4d0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Start_IT+0x354>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_DMA_Start_IT+0x356>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01a      	beq.n	800446c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004452:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a37      	ldr	r2, [pc, #220]	; (8004550 <HAL_DMA_Start_IT+0x474>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d04a      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a36      	ldr	r2, [pc, #216]	; (8004554 <HAL_DMA_Start_IT+0x478>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d045      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a34      	ldr	r2, [pc, #208]	; (8004558 <HAL_DMA_Start_IT+0x47c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d040      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a33      	ldr	r2, [pc, #204]	; (800455c <HAL_DMA_Start_IT+0x480>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d03b      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a31      	ldr	r2, [pc, #196]	; (8004560 <HAL_DMA_Start_IT+0x484>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d036      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a30      	ldr	r2, [pc, #192]	; (8004564 <HAL_DMA_Start_IT+0x488>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d031      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <HAL_DMA_Start_IT+0x48c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02c      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	; (800456c <HAL_DMA_Start_IT+0x490>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d027      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <HAL_DMA_Start_IT+0x494>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d022      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_DMA_Start_IT+0x498>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d01d      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <HAL_DMA_Start_IT+0x49c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d018      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_DMA_Start_IT+0x4a0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <HAL_DMA_Start_IT+0x4a4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_DMA_Start_IT+0x4a8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <HAL_DMA_Start_IT+0x4ac>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	; (800458c <HAL_DMA_Start_IT+0x4b0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <HAL_DMA_Start_IT+0x442>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e012      	b.n	8004544 <HAL_DMA_Start_IT+0x468>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e009      	b.n	8004544 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800453e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004544:	7dfb      	ldrb	r3, [r7, #23]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8
 8004590:	58025408 	.word	0x58025408
 8004594:	5802541c 	.word	0x5802541c
 8004598:	58025430 	.word	0x58025430
 800459c:	58025444 	.word	0x58025444
 80045a0:	58025458 	.word	0x58025458
 80045a4:	5802546c 	.word	0x5802546c
 80045a8:	58025480 	.word	0x58025480
 80045ac:	58025494 	.word	0x58025494

080045b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e205      	b.n	80049ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e1fa      	b.n	80049ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a8c      	ldr	r2, [pc, #560]	; (8004810 <HAL_DMA_Abort_IT+0x260>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d04a      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a8b      	ldr	r2, [pc, #556]	; (8004814 <HAL_DMA_Abort_IT+0x264>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d045      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a89      	ldr	r2, [pc, #548]	; (8004818 <HAL_DMA_Abort_IT+0x268>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d040      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a88      	ldr	r2, [pc, #544]	; (800481c <HAL_DMA_Abort_IT+0x26c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03b      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a86      	ldr	r2, [pc, #536]	; (8004820 <HAL_DMA_Abort_IT+0x270>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d036      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a85      	ldr	r2, [pc, #532]	; (8004824 <HAL_DMA_Abort_IT+0x274>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d031      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <HAL_DMA_Abort_IT+0x278>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02c      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a82      	ldr	r2, [pc, #520]	; (800482c <HAL_DMA_Abort_IT+0x27c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d027      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_DMA_Abort_IT+0x280>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7f      	ldr	r2, [pc, #508]	; (8004834 <HAL_DMA_Abort_IT+0x284>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7d      	ldr	r2, [pc, #500]	; (8004838 <HAL_DMA_Abort_IT+0x288>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7c      	ldr	r2, [pc, #496]	; (800483c <HAL_DMA_Abort_IT+0x28c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_DMA_Abort_IT+0x290>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a79      	ldr	r2, [pc, #484]	; (8004844 <HAL_DMA_Abort_IT+0x294>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_DMA_Abort_IT+0x298>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a76      	ldr	r2, [pc, #472]	; (800484c <HAL_DMA_Abort_IT+0x29c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_DMA_Abort_IT+0xcc>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_DMA_Abort_IT+0xce>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d065      	beq.n	800474e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_DMA_Abort_IT+0x260>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_DMA_Abort_IT+0x264>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5d      	ldr	r2, [pc, #372]	; (8004818 <HAL_DMA_Abort_IT+0x268>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5b      	ldr	r2, [pc, #364]	; (800481c <HAL_DMA_Abort_IT+0x26c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <HAL_DMA_Abort_IT+0x270>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_DMA_Abort_IT+0x274>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_DMA_Abort_IT+0x278>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a55      	ldr	r2, [pc, #340]	; (800482c <HAL_DMA_Abort_IT+0x27c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a54      	ldr	r2, [pc, #336]	; (8004830 <HAL_DMA_Abort_IT+0x280>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_DMA_Abort_IT+0x284>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a51      	ldr	r2, [pc, #324]	; (8004838 <HAL_DMA_Abort_IT+0x288>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4f      	ldr	r2, [pc, #316]	; (800483c <HAL_DMA_Abort_IT+0x28c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a4e      	ldr	r2, [pc, #312]	; (8004840 <HAL_DMA_Abort_IT+0x290>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a4c      	ldr	r2, [pc, #304]	; (8004844 <HAL_DMA_Abort_IT+0x294>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4b      	ldr	r2, [pc, #300]	; (8004848 <HAL_DMA_Abort_IT+0x298>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_DMA_Abort_IT+0x29c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <HAL_DMA_Abort_IT+0x18c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e147      	b.n	80049cc <HAL_DMA_Abort_IT+0x41c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e13e      	b.n	80049cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 020e 	bic.w	r2, r2, #14
 800475c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <HAL_DMA_Abort_IT+0x260>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d04a      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a29      	ldr	r2, [pc, #164]	; (8004814 <HAL_DMA_Abort_IT+0x264>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d045      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_DMA_Abort_IT+0x268>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d040      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a26      	ldr	r2, [pc, #152]	; (800481c <HAL_DMA_Abort_IT+0x26c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d03b      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_DMA_Abort_IT+0x270>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d036      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a23      	ldr	r2, [pc, #140]	; (8004824 <HAL_DMA_Abort_IT+0x274>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d031      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_DMA_Abort_IT+0x278>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d02c      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_DMA_Abort_IT+0x27c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d027      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_DMA_Abort_IT+0x280>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d022      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_DMA_Abort_IT+0x284>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01d      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_DMA_Abort_IT+0x288>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <HAL_DMA_Abort_IT+0x28c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_DMA_Abort_IT+0x290>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_DMA_Abort_IT+0x294>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_DMA_Abort_IT+0x298>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <HAL_DMA_Abort_IT+0x29c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d128      	bne.n	8004850 <HAL_DMA_Abort_IT+0x2a0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e027      	b.n	8004860 <HAL_DMA_Abort_IT+0x2b0>
 8004810:	40020010 	.word	0x40020010
 8004814:	40020028 	.word	0x40020028
 8004818:	40020040 	.word	0x40020040
 800481c:	40020058 	.word	0x40020058
 8004820:	40020070 	.word	0x40020070
 8004824:	40020088 	.word	0x40020088
 8004828:	400200a0 	.word	0x400200a0
 800482c:	400200b8 	.word	0x400200b8
 8004830:	40020410 	.word	0x40020410
 8004834:	40020428 	.word	0x40020428
 8004838:	40020440 	.word	0x40020440
 800483c:	40020458 	.word	0x40020458
 8004840:	40020470 	.word	0x40020470
 8004844:	40020488 	.word	0x40020488
 8004848:	400204a0 	.word	0x400204a0
 800484c:	400204b8 	.word	0x400204b8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5c      	ldr	r2, [pc, #368]	; (80049d8 <HAL_DMA_Abort_IT+0x428>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d072      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <HAL_DMA_Abort_IT+0x42c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d06d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a59      	ldr	r2, [pc, #356]	; (80049e0 <HAL_DMA_Abort_IT+0x430>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d068      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <HAL_DMA_Abort_IT+0x434>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d063      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <HAL_DMA_Abort_IT+0x438>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d05e      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a55      	ldr	r2, [pc, #340]	; (80049ec <HAL_DMA_Abort_IT+0x43c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d059      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a53      	ldr	r2, [pc, #332]	; (80049f0 <HAL_DMA_Abort_IT+0x440>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d054      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a52      	ldr	r2, [pc, #328]	; (80049f4 <HAL_DMA_Abort_IT+0x444>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d04f      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a50      	ldr	r2, [pc, #320]	; (80049f8 <HAL_DMA_Abort_IT+0x448>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d04a      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4f      	ldr	r2, [pc, #316]	; (80049fc <HAL_DMA_Abort_IT+0x44c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d045      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_DMA_Abort_IT+0x450>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d040      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_DMA_Abort_IT+0x454>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d03b      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <HAL_DMA_Abort_IT+0x458>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d036      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <HAL_DMA_Abort_IT+0x45c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d031      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a47      	ldr	r2, [pc, #284]	; (8004a10 <HAL_DMA_Abort_IT+0x460>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02c      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a46      	ldr	r2, [pc, #280]	; (8004a14 <HAL_DMA_Abort_IT+0x464>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d027      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a44      	ldr	r2, [pc, #272]	; (8004a18 <HAL_DMA_Abort_IT+0x468>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <HAL_DMA_Abort_IT+0x46c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a41      	ldr	r2, [pc, #260]	; (8004a20 <HAL_DMA_Abort_IT+0x470>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <HAL_DMA_Abort_IT+0x474>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3e      	ldr	r2, [pc, #248]	; (8004a28 <HAL_DMA_Abort_IT+0x478>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <HAL_DMA_Abort_IT+0x47c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <HAL_DMA_Abort_IT+0x480>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3a      	ldr	r2, [pc, #232]	; (8004a34 <HAL_DMA_Abort_IT+0x484>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Abort_IT+0x3a4>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_DMA_Abort_IT+0x3a6>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d028      	beq.n	80049ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004968:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004988:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40020010 	.word	0x40020010
 80049dc:	40020028 	.word	0x40020028
 80049e0:	40020040 	.word	0x40020040
 80049e4:	40020058 	.word	0x40020058
 80049e8:	40020070 	.word	0x40020070
 80049ec:	40020088 	.word	0x40020088
 80049f0:	400200a0 	.word	0x400200a0
 80049f4:	400200b8 	.word	0x400200b8
 80049f8:	40020410 	.word	0x40020410
 80049fc:	40020428 	.word	0x40020428
 8004a00:	40020440 	.word	0x40020440
 8004a04:	40020458 	.word	0x40020458
 8004a08:	40020470 	.word	0x40020470
 8004a0c:	40020488 	.word	0x40020488
 8004a10:	400204a0 	.word	0x400204a0
 8004a14:	400204b8 	.word	0x400204b8
 8004a18:	58025408 	.word	0x58025408
 8004a1c:	5802541c 	.word	0x5802541c
 8004a20:	58025430 	.word	0x58025430
 8004a24:	58025444 	.word	0x58025444
 8004a28:	58025458 	.word	0x58025458
 8004a2c:	5802546c 	.word	0x5802546c
 8004a30:	58025480 	.word	0x58025480
 8004a34:	58025494 	.word	0x58025494

08004a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a44:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_DMA_IRQHandler+0x1ac>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a67      	ldr	r2, [pc, #412]	; (8004be8 <HAL_DMA_IRQHandler+0x1b0>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0a9b      	lsrs	r3, r3, #10
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	; (8004bec <HAL_DMA_IRQHandler+0x1b4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d04a      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5d      	ldr	r2, [pc, #372]	; (8004bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d045      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5c      	ldr	r2, [pc, #368]	; (8004bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d040      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5a      	ldr	r2, [pc, #360]	; (8004bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d03b      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a59      	ldr	r2, [pc, #356]	; (8004bfc <HAL_DMA_IRQHandler+0x1c4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d036      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <HAL_DMA_IRQHandler+0x1c8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d031      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a56      	ldr	r2, [pc, #344]	; (8004c04 <HAL_DMA_IRQHandler+0x1cc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d02c      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a54      	ldr	r2, [pc, #336]	; (8004c08 <HAL_DMA_IRQHandler+0x1d0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d027      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a53      	ldr	r2, [pc, #332]	; (8004c0c <HAL_DMA_IRQHandler+0x1d4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <HAL_DMA_IRQHandler+0x1d8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a50      	ldr	r2, [pc, #320]	; (8004c14 <HAL_DMA_IRQHandler+0x1dc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a4e      	ldr	r2, [pc, #312]	; (8004c18 <HAL_DMA_IRQHandler+0x1e0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a4d      	ldr	r2, [pc, #308]	; (8004c1c <HAL_DMA_IRQHandler+0x1e4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a4b      	ldr	r2, [pc, #300]	; (8004c20 <HAL_DMA_IRQHandler+0x1e8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <HAL_DMA_IRQHandler+0x1ec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a48      	ldr	r2, [pc, #288]	; (8004c28 <HAL_DMA_IRQHandler+0x1f0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_DMA_IRQHandler+0xd6>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_DMA_IRQHandler+0xd8>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 842b 	beq.w	800536c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2208      	movs	r2, #8
 8004b20:	409a      	lsls	r2, r3
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a2 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_DMA_IRQHandler+0x1b4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2a      	ldr	r2, [pc, #168]	; (8004bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a28      	ldr	r2, [pc, #160]	; (8004bfc <HAL_DMA_IRQHandler+0x1c4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <HAL_DMA_IRQHandler+0x1c8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <HAL_DMA_IRQHandler+0x1cc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <HAL_DMA_IRQHandler+0x1d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_DMA_IRQHandler+0x1d4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <HAL_DMA_IRQHandler+0x1d8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <HAL_DMA_IRQHandler+0x1dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <HAL_DMA_IRQHandler+0x1e0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <HAL_DMA_IRQHandler+0x1e4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_DMA_IRQHandler+0x1e8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <HAL_DMA_IRQHandler+0x1ec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_DMA_IRQHandler+0x1f0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d12f      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x1f4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e02e      	b.n	8004c40 <HAL_DMA_IRQHandler+0x208>
 8004be2:	bf00      	nop
 8004be4:	24000030 	.word	0x24000030
 8004be8:	1b4e81b5 	.word	0x1b4e81b5
 8004bec:	40020010 	.word	0x40020010
 8004bf0:	40020028 	.word	0x40020028
 8004bf4:	40020040 	.word	0x40020040
 8004bf8:	40020058 	.word	0x40020058
 8004bfc:	40020070 	.word	0x40020070
 8004c00:	40020088 	.word	0x40020088
 8004c04:	400200a0 	.word	0x400200a0
 8004c08:	400200b8 	.word	0x400200b8
 8004c0c:	40020410 	.word	0x40020410
 8004c10:	40020428 	.word	0x40020428
 8004c14:	40020440 	.word	0x40020440
 8004c18:	40020458 	.word	0x40020458
 8004c1c:	40020470 	.word	0x40020470
 8004c20:	40020488 	.word	0x40020488
 8004c24:	400204a0 	.word	0x400204a0
 8004c28:	400204b8 	.word	0x400204b8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06e      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a69      	ldr	r2, [pc, #420]	; (8004e30 <HAL_DMA_IRQHandler+0x3f8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d04a      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a67      	ldr	r2, [pc, #412]	; (8004e34 <HAL_DMA_IRQHandler+0x3fc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d045      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a66      	ldr	r2, [pc, #408]	; (8004e38 <HAL_DMA_IRQHandler+0x400>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d040      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a64      	ldr	r2, [pc, #400]	; (8004e3c <HAL_DMA_IRQHandler+0x404>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d03b      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a63      	ldr	r2, [pc, #396]	; (8004e40 <HAL_DMA_IRQHandler+0x408>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d036      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a61      	ldr	r2, [pc, #388]	; (8004e44 <HAL_DMA_IRQHandler+0x40c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d031      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a60      	ldr	r2, [pc, #384]	; (8004e48 <HAL_DMA_IRQHandler+0x410>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d02c      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5e      	ldr	r2, [pc, #376]	; (8004e4c <HAL_DMA_IRQHandler+0x414>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d027      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5d      	ldr	r2, [pc, #372]	; (8004e50 <HAL_DMA_IRQHandler+0x418>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_DMA_IRQHandler+0x41c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01d      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5a      	ldr	r2, [pc, #360]	; (8004e58 <HAL_DMA_IRQHandler+0x420>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_DMA_IRQHandler+0x424>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a57      	ldr	r2, [pc, #348]	; (8004e60 <HAL_DMA_IRQHandler+0x428>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <HAL_DMA_IRQHandler+0x42c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a54      	ldr	r2, [pc, #336]	; (8004e68 <HAL_DMA_IRQHandler+0x430>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a52      	ldr	r2, [pc, #328]	; (8004e6c <HAL_DMA_IRQHandler+0x434>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10a      	bne.n	8004d3c <HAL_DMA_IRQHandler+0x304>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e003      	b.n	8004d44 <HAL_DMA_IRQHandler+0x30c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f043 0202 	orr.w	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 808f 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <HAL_DMA_IRQHandler+0x3f8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d04a      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_DMA_IRQHandler+0x3fc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d045      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <HAL_DMA_IRQHandler+0x400>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d040      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <HAL_DMA_IRQHandler+0x404>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d03b      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <HAL_DMA_IRQHandler+0x408>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d036      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <HAL_DMA_IRQHandler+0x40c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d031      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <HAL_DMA_IRQHandler+0x410>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d02c      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_DMA_IRQHandler+0x414>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d027      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a20      	ldr	r2, [pc, #128]	; (8004e50 <HAL_DMA_IRQHandler+0x418>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_DMA_IRQHandler+0x41c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01d      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <HAL_DMA_IRQHandler+0x420>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d018      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_DMA_IRQHandler+0x424>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_DMA_IRQHandler+0x428>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_DMA_IRQHandler+0x42c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <HAL_DMA_IRQHandler+0x430>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <HAL_DMA_IRQHandler+0x434>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d12a      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x438>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e023      	b.n	8004e78 <HAL_DMA_IRQHandler+0x440>
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2204      	movs	r2, #4
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f043 0204 	orr.w	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a6 	beq.w	8004ffa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a85      	ldr	r2, [pc, #532]	; (80050c8 <HAL_DMA_IRQHandler+0x690>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a83      	ldr	r2, [pc, #524]	; (80050cc <HAL_DMA_IRQHandler+0x694>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a82      	ldr	r2, [pc, #520]	; (80050d0 <HAL_DMA_IRQHandler+0x698>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a80      	ldr	r2, [pc, #512]	; (80050d4 <HAL_DMA_IRQHandler+0x69c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7f      	ldr	r2, [pc, #508]	; (80050d8 <HAL_DMA_IRQHandler+0x6a0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7d      	ldr	r2, [pc, #500]	; (80050dc <HAL_DMA_IRQHandler+0x6a4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <HAL_DMA_IRQHandler+0x6ac>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a79      	ldr	r2, [pc, #484]	; (80050e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_DMA_IRQHandler+0x6b4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a76      	ldr	r2, [pc, #472]	; (80050f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a74      	ldr	r2, [pc, #464]	; (80050f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	; (80050f8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a71      	ldr	r2, [pc, #452]	; (80050fc <HAL_DMA_IRQHandler+0x6c4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a70      	ldr	r2, [pc, #448]	; (8005100 <HAL_DMA_IRQHandler+0x6c8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	; (8005104 <HAL_DMA_IRQHandler+0x6cc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10a      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x52c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e009      	b.n	8004f78 <HAL_DMA_IRQHandler+0x540>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d03e      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2210      	movs	r2, #16
 8004f86:	409a      	lsls	r2, r3
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d024      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
 8004fb8:	e01f      	b.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01b      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	e016      	b.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0208 	bic.w	r2, r2, #8
 8004fe8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2220      	movs	r2, #32
 8005004:	409a      	lsls	r2, r3
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8110 	beq.w	8005230 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <HAL_DMA_IRQHandler+0x690>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d04a      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <HAL_DMA_IRQHandler+0x694>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d045      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_DMA_IRQHandler+0x698>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d040      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <HAL_DMA_IRQHandler+0x69c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d03b      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_DMA_IRQHandler+0x6a0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d036      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_DMA_IRQHandler+0x6a4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d031      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02c      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <HAL_DMA_IRQHandler+0x6ac>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d027      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a20      	ldr	r2, [pc, #128]	; (80050e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1f      	ldr	r2, [pc, #124]	; (80050ec <HAL_DMA_IRQHandler+0x6b4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01d      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_DMA_IRQHandler+0x6b8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_DMA_IRQHandler+0x6c0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_DMA_IRQHandler+0x6c4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_DMA_IRQHandler+0x6c8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <HAL_DMA_IRQHandler+0x6cc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d12b      	bne.n	8005108 <HAL_DMA_IRQHandler+0x6d0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e02a      	b.n	800511c <HAL_DMA_IRQHandler+0x6e4>
 80050c6:	bf00      	nop
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8087 	beq.w	8005230 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2220      	movs	r2, #32
 800512c:	409a      	lsls	r2, r3
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b04      	cmp	r3, #4
 800513c:	d139      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0216 	bic.w	r2, r2, #22
 800514c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_DMA_IRQHandler+0x736>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0208 	bic.w	r2, r2, #8
 800517c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	223f      	movs	r2, #63	; 0x3f
 8005188:	409a      	lsls	r2, r3
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 834a 	beq.w	800583c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
          }
          return;
 80051b0:	e344      	b.n	800583c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d018      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02c      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e027      	b.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d023      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
 80051f0:	e01e      	b.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0210 	bic.w	r2, r2, #16
 800520e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8306 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8088 	beq.w	8005358 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_DMA_IRQHandler+0xa08>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a79      	ldr	r2, [pc, #484]	; (8005444 <HAL_DMA_IRQHandler+0xa0c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d045      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a77      	ldr	r2, [pc, #476]	; (8005448 <HAL_DMA_IRQHandler+0xa10>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d040      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a76      	ldr	r2, [pc, #472]	; (800544c <HAL_DMA_IRQHandler+0xa14>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d03b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a74      	ldr	r2, [pc, #464]	; (8005450 <HAL_DMA_IRQHandler+0xa18>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d036      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a73      	ldr	r2, [pc, #460]	; (8005454 <HAL_DMA_IRQHandler+0xa1c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d031      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a71      	ldr	r2, [pc, #452]	; (8005458 <HAL_DMA_IRQHandler+0xa20>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a70      	ldr	r2, [pc, #448]	; (800545c <HAL_DMA_IRQHandler+0xa24>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d027      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6e      	ldr	r2, [pc, #440]	; (8005460 <HAL_DMA_IRQHandler+0xa28>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <HAL_DMA_IRQHandler+0xa2c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01d      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a6b      	ldr	r2, [pc, #428]	; (8005468 <HAL_DMA_IRQHandler+0xa30>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a6a      	ldr	r2, [pc, #424]	; (800546c <HAL_DMA_IRQHandler+0xa34>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a68      	ldr	r2, [pc, #416]	; (8005470 <HAL_DMA_IRQHandler+0xa38>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a67      	ldr	r2, [pc, #412]	; (8005474 <HAL_DMA_IRQHandler+0xa3c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <HAL_DMA_IRQHandler+0xa40>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a64      	ldr	r2, [pc, #400]	; (800547c <HAL_DMA_IRQHandler+0xa44>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <HAL_DMA_IRQHandler+0x8ca>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e007      	b.n	8005312 <HAL_DMA_IRQHandler+0x8da>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	429a      	cmp	r2, r3
 800531c:	d307      	bcc.n	800532e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f2      	bne.n	8005312 <HAL_DMA_IRQHandler+0x8da>
 800532c:	e000      	b.n	8005330 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800532e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2203      	movs	r2, #3
 800534a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800534e:	e003      	b.n	8005358 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8272 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	e26c      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a43      	ldr	r2, [pc, #268]	; (8005480 <HAL_DMA_IRQHandler+0xa48>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d022      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a42      	ldr	r2, [pc, #264]	; (8005484 <HAL_DMA_IRQHandler+0xa4c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01d      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a40      	ldr	r2, [pc, #256]	; (8005488 <HAL_DMA_IRQHandler+0xa50>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3f      	ldr	r2, [pc, #252]	; (800548c <HAL_DMA_IRQHandler+0xa54>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <HAL_DMA_IRQHandler+0xa58>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <HAL_DMA_IRQHandler+0xa5c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <HAL_DMA_IRQHandler+0xa60>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a39      	ldr	r2, [pc, #228]	; (800549c <HAL_DMA_IRQHandler+0xa64>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_DMA_IRQHandler+0x988>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_DMA_IRQHandler+0x98a>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 823f 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	2204      	movs	r2, #4
 80053da:	409a      	lsls	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80cd 	beq.w	8005580 <HAL_DMA_IRQHandler+0xb48>
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80c7 	beq.w	8005580 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2204      	movs	r2, #4
 80053fc:	409a      	lsls	r2, r3
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d049      	beq.n	80054a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8210 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005428:	e20a      	b.n	8005840 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8206 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543c:	e200      	b.n	8005840 <HAL_DMA_IRQHandler+0xe08>
 800543e:	bf00      	nop
 8005440:	40020010 	.word	0x40020010
 8005444:	40020028 	.word	0x40020028
 8005448:	40020040 	.word	0x40020040
 800544c:	40020058 	.word	0x40020058
 8005450:	40020070 	.word	0x40020070
 8005454:	40020088 	.word	0x40020088
 8005458:	400200a0 	.word	0x400200a0
 800545c:	400200b8 	.word	0x400200b8
 8005460:	40020410 	.word	0x40020410
 8005464:	40020428 	.word	0x40020428
 8005468:	40020440 	.word	0x40020440
 800546c:	40020458 	.word	0x40020458
 8005470:	40020470 	.word	0x40020470
 8005474:	40020488 	.word	0x40020488
 8005478:	400204a0 	.word	0x400204a0
 800547c:	400204b8 	.word	0x400204b8
 8005480:	58025408 	.word	0x58025408
 8005484:	5802541c 	.word	0x5802541c
 8005488:	58025430 	.word	0x58025430
 800548c:	58025444 	.word	0x58025444
 8005490:	58025458 	.word	0x58025458
 8005494:	5802546c 	.word	0x5802546c
 8005498:	58025480 	.word	0x58025480
 800549c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d160      	bne.n	800556c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a8c      	ldr	r2, [pc, #560]	; (80056e0 <HAL_DMA_IRQHandler+0xca8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04a      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a8a      	ldr	r2, [pc, #552]	; (80056e4 <HAL_DMA_IRQHandler+0xcac>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d045      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a89      	ldr	r2, [pc, #548]	; (80056e8 <HAL_DMA_IRQHandler+0xcb0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d040      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a87      	ldr	r2, [pc, #540]	; (80056ec <HAL_DMA_IRQHandler+0xcb4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d03b      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a86      	ldr	r2, [pc, #536]	; (80056f0 <HAL_DMA_IRQHandler+0xcb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d036      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a84      	ldr	r2, [pc, #528]	; (80056f4 <HAL_DMA_IRQHandler+0xcbc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d031      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a83      	ldr	r2, [pc, #524]	; (80056f8 <HAL_DMA_IRQHandler+0xcc0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d02c      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a81      	ldr	r2, [pc, #516]	; (80056fc <HAL_DMA_IRQHandler+0xcc4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d027      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a80      	ldr	r2, [pc, #512]	; (8005700 <HAL_DMA_IRQHandler+0xcc8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7e      	ldr	r2, [pc, #504]	; (8005704 <HAL_DMA_IRQHandler+0xccc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7d      	ldr	r2, [pc, #500]	; (8005708 <HAL_DMA_IRQHandler+0xcd0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7b      	ldr	r2, [pc, #492]	; (800570c <HAL_DMA_IRQHandler+0xcd4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7a      	ldr	r2, [pc, #488]	; (8005710 <HAL_DMA_IRQHandler+0xcd8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a78      	ldr	r2, [pc, #480]	; (8005714 <HAL_DMA_IRQHandler+0xcdc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a77      	ldr	r2, [pc, #476]	; (8005718 <HAL_DMA_IRQHandler+0xce0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a75      	ldr	r2, [pc, #468]	; (800571c <HAL_DMA_IRQHandler+0xce4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <HAL_DMA_IRQHandler+0xb24>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0208 	bic.w	r2, r2, #8
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e007      	b.n	800556c <HAL_DMA_IRQHandler+0xb34>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8165 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800557e:	e15f      	b.n	8005840 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2202      	movs	r2, #2
 800558a:	409a      	lsls	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80c5 	beq.w	8005720 <HAL_DMA_IRQHandler+0xce8>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80bf 	beq.w	8005720 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	2202      	movs	r2, #2
 80055ac:	409a      	lsls	r2, r3
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d018      	beq.n	80055ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 813a 	beq.w	8005844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055d8:	e134      	b.n	8005844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8130 	beq.w	8005844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ec:	e12a      	b.n	8005844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d168      	bne.n	80056ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <HAL_DMA_IRQHandler+0xca8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d04a      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_DMA_IRQHandler+0xcac>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d045      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a35      	ldr	r2, [pc, #212]	; (80056e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d040      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_DMA_IRQHandler+0xcb4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d03b      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a32      	ldr	r2, [pc, #200]	; (80056f0 <HAL_DMA_IRQHandler+0xcb8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d036      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_IRQHandler+0xcbc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d031      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <HAL_DMA_IRQHandler+0xcc0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d02c      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_IRQHandler+0xcc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d027      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <HAL_DMA_IRQHandler+0xcc8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d022      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_IRQHandler+0xccc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d01d      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_DMA_IRQHandler+0xcd0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_IRQHandler+0xcd4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <HAL_DMA_IRQHandler+0xcd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_IRQHandler+0xcdc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_DMA_IRQHandler+0xce0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_IRQHandler+0xce4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <HAL_DMA_IRQHandler+0xc72>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0214 	bic.w	r2, r2, #20
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e007      	b.n	80056ba <HAL_DMA_IRQHandler+0xc82>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 020a 	bic.w	r2, r2, #10
 80056b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80b8 	beq.w	8005844 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056dc:	e0b2      	b.n	8005844 <HAL_DMA_IRQHandler+0xe0c>
 80056de:	bf00      	nop
 80056e0:	40020010 	.word	0x40020010
 80056e4:	40020028 	.word	0x40020028
 80056e8:	40020040 	.word	0x40020040
 80056ec:	40020058 	.word	0x40020058
 80056f0:	40020070 	.word	0x40020070
 80056f4:	40020088 	.word	0x40020088
 80056f8:	400200a0 	.word	0x400200a0
 80056fc:	400200b8 	.word	0x400200b8
 8005700:	40020410 	.word	0x40020410
 8005704:	40020428 	.word	0x40020428
 8005708:	40020440 	.word	0x40020440
 800570c:	40020458 	.word	0x40020458
 8005710:	40020470 	.word	0x40020470
 8005714:	40020488 	.word	0x40020488
 8005718:	400204a0 	.word	0x400204a0
 800571c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2208      	movs	r2, #8
 800572a:	409a      	lsls	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8088 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8082 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a41      	ldr	r2, [pc, #260]	; (800584c <HAL_DMA_IRQHandler+0xe14>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04a      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3f      	ldr	r2, [pc, #252]	; (8005850 <HAL_DMA_IRQHandler+0xe18>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d045      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3e      	ldr	r2, [pc, #248]	; (8005854 <HAL_DMA_IRQHandler+0xe1c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d040      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3c      	ldr	r2, [pc, #240]	; (8005858 <HAL_DMA_IRQHandler+0xe20>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d03b      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <HAL_DMA_IRQHandler+0xe24>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d036      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a39      	ldr	r2, [pc, #228]	; (8005860 <HAL_DMA_IRQHandler+0xe28>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d031      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a38      	ldr	r2, [pc, #224]	; (8005864 <HAL_DMA_IRQHandler+0xe2c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d02c      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a36      	ldr	r2, [pc, #216]	; (8005868 <HAL_DMA_IRQHandler+0xe30>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d027      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a35      	ldr	r2, [pc, #212]	; (800586c <HAL_DMA_IRQHandler+0xe34>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a33      	ldr	r2, [pc, #204]	; (8005870 <HAL_DMA_IRQHandler+0xe38>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01d      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a32      	ldr	r2, [pc, #200]	; (8005874 <HAL_DMA_IRQHandler+0xe3c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a30      	ldr	r2, [pc, #192]	; (8005878 <HAL_DMA_IRQHandler+0xe40>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <HAL_DMA_IRQHandler+0xe44>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_DMA_IRQHandler+0xe48>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <HAL_DMA_IRQHandler+0xe4c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_DMA_IRQHandler+0xe50>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <HAL_DMA_IRQHandler+0xdbc>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 021c 	bic.w	r2, r2, #28
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e007      	b.n	8005804 <HAL_DMA_IRQHandler+0xdcc>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 020e 	bic.w	r2, r2, #14
 8005802:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2201      	movs	r2, #1
 800580e:	409a      	lsls	r2, r3
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	e004      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800583c:	bf00      	nop
 800583e:	e002      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005844:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005846:	3728      	adds	r7, #40	; 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40020010 	.word	0x40020010
 8005850:	40020028 	.word	0x40020028
 8005854:	40020040 	.word	0x40020040
 8005858:	40020058 	.word	0x40020058
 800585c:	40020070 	.word	0x40020070
 8005860:	40020088 	.word	0x40020088
 8005864:	400200a0 	.word	0x400200a0
 8005868:	400200b8 	.word	0x400200b8
 800586c:	40020410 	.word	0x40020410
 8005870:	40020428 	.word	0x40020428
 8005874:	40020440 	.word	0x40020440
 8005878:	40020458 	.word	0x40020458
 800587c:	40020470 	.word	0x40020470
 8005880:	40020488 	.word	0x40020488
 8005884:	400204a0 	.word	0x400204a0
 8005888:	400204b8 	.word	0x400204b8

0800588c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a84      	ldr	r2, [pc, #528]	; (8005abc <DMA_SetConfig+0x230>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d072      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a82      	ldr	r2, [pc, #520]	; (8005ac0 <DMA_SetConfig+0x234>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d06d      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a81      	ldr	r2, [pc, #516]	; (8005ac4 <DMA_SetConfig+0x238>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d068      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a7f      	ldr	r2, [pc, #508]	; (8005ac8 <DMA_SetConfig+0x23c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d063      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a7e      	ldr	r2, [pc, #504]	; (8005acc <DMA_SetConfig+0x240>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d05e      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a7c      	ldr	r2, [pc, #496]	; (8005ad0 <DMA_SetConfig+0x244>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d059      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7b      	ldr	r2, [pc, #492]	; (8005ad4 <DMA_SetConfig+0x248>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d054      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a79      	ldr	r2, [pc, #484]	; (8005ad8 <DMA_SetConfig+0x24c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d04f      	beq.n	8005996 <DMA_SetConfig+0x10a>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a78      	ldr	r2, [pc, #480]	; (8005adc <DMA_SetConfig+0x250>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d04a      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a76      	ldr	r2, [pc, #472]	; (8005ae0 <DMA_SetConfig+0x254>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d045      	beq.n	8005996 <DMA_SetConfig+0x10a>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a75      	ldr	r2, [pc, #468]	; (8005ae4 <DMA_SetConfig+0x258>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d040      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a73      	ldr	r2, [pc, #460]	; (8005ae8 <DMA_SetConfig+0x25c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d03b      	beq.n	8005996 <DMA_SetConfig+0x10a>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a72      	ldr	r2, [pc, #456]	; (8005aec <DMA_SetConfig+0x260>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d036      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a70      	ldr	r2, [pc, #448]	; (8005af0 <DMA_SetConfig+0x264>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d031      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a6f      	ldr	r2, [pc, #444]	; (8005af4 <DMA_SetConfig+0x268>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d02c      	beq.n	8005996 <DMA_SetConfig+0x10a>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a6d      	ldr	r2, [pc, #436]	; (8005af8 <DMA_SetConfig+0x26c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d027      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6c      	ldr	r2, [pc, #432]	; (8005afc <DMA_SetConfig+0x270>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6a      	ldr	r2, [pc, #424]	; (8005b00 <DMA_SetConfig+0x274>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <DMA_SetConfig+0x10a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a69      	ldr	r2, [pc, #420]	; (8005b04 <DMA_SetConfig+0x278>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a67      	ldr	r2, [pc, #412]	; (8005b08 <DMA_SetConfig+0x27c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <DMA_SetConfig+0x10a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a66      	ldr	r2, [pc, #408]	; (8005b0c <DMA_SetConfig+0x280>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a64      	ldr	r2, [pc, #400]	; (8005b10 <DMA_SetConfig+0x284>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <DMA_SetConfig+0x10a>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a63      	ldr	r2, [pc, #396]	; (8005b14 <DMA_SetConfig+0x288>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <DMA_SetConfig+0x10a>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a61      	ldr	r2, [pc, #388]	; (8005b18 <DMA_SetConfig+0x28c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <DMA_SetConfig+0x10e>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <DMA_SetConfig+0x110>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a3e      	ldr	r2, [pc, #248]	; (8005abc <DMA_SetConfig+0x230>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d04a      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a3d      	ldr	r2, [pc, #244]	; (8005ac0 <DMA_SetConfig+0x234>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d045      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3b      	ldr	r2, [pc, #236]	; (8005ac4 <DMA_SetConfig+0x238>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d040      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <DMA_SetConfig+0x23c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d03b      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a38      	ldr	r2, [pc, #224]	; (8005acc <DMA_SetConfig+0x240>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d036      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a37      	ldr	r2, [pc, #220]	; (8005ad0 <DMA_SetConfig+0x244>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d031      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a35      	ldr	r2, [pc, #212]	; (8005ad4 <DMA_SetConfig+0x248>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d02c      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a34      	ldr	r2, [pc, #208]	; (8005ad8 <DMA_SetConfig+0x24c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d027      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a32      	ldr	r2, [pc, #200]	; (8005adc <DMA_SetConfig+0x250>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d022      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a31      	ldr	r2, [pc, #196]	; (8005ae0 <DMA_SetConfig+0x254>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d01d      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2f      	ldr	r2, [pc, #188]	; (8005ae4 <DMA_SetConfig+0x258>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2e      	ldr	r2, [pc, #184]	; (8005ae8 <DMA_SetConfig+0x25c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <DMA_SetConfig+0x260>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <DMA_SetConfig+0x264>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <DMA_SetConfig+0x268>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <DMA_SetConfig+0x1d0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a28      	ldr	r2, [pc, #160]	; (8005af8 <DMA_SetConfig+0x26c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <DMA_SetConfig+0x1d4>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <DMA_SetConfig+0x1d6>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d05a      	beq.n	8005b1c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	223f      	movs	r2, #63	; 0x3f
 8005a70:	409a      	lsls	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d108      	bne.n	8005aa8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005aa6:	e087      	b.n	8005bb8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
}
 8005ab8:	e07e      	b.n	8005bb8 <DMA_SetConfig+0x32c>
 8005aba:	bf00      	nop
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <DMA_SetConfig+0x338>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <DMA_SetConfig+0x33c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d01d      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <DMA_SetConfig+0x340>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <DMA_SetConfig+0x344>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <DMA_SetConfig+0x348>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <DMA_SetConfig+0x34c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <DMA_SetConfig+0x350>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <DMA_SetConfig+0x2e0>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <DMA_SetConfig+0x354>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <DMA_SetConfig+0x2e4>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <DMA_SetConfig+0x2e6>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d020      	beq.n	8005bb8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	2201      	movs	r2, #1
 8005b80:	409a      	lsls	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d108      	bne.n	8005ba8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	60da      	str	r2, [r3, #12]
}
 8005ba6:	e007      	b.n	8005bb8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	58025408 	.word	0x58025408
 8005bc8:	5802541c 	.word	0x5802541c
 8005bcc:	58025430 	.word	0x58025430
 8005bd0:	58025444 	.word	0x58025444
 8005bd4:	58025458 	.word	0x58025458
 8005bd8:	5802546c 	.word	0x5802546c
 8005bdc:	58025480 	.word	0x58025480
 8005be0:	58025494 	.word	0x58025494

08005be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a42      	ldr	r2, [pc, #264]	; (8005cfc <DMA_CalcBaseAndBitshift+0x118>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d04a      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a41      	ldr	r2, [pc, #260]	; (8005d00 <DMA_CalcBaseAndBitshift+0x11c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d045      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a3f      	ldr	r2, [pc, #252]	; (8005d04 <DMA_CalcBaseAndBitshift+0x120>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d040      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a3e      	ldr	r2, [pc, #248]	; (8005d08 <DMA_CalcBaseAndBitshift+0x124>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d03b      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a3c      	ldr	r2, [pc, #240]	; (8005d0c <DMA_CalcBaseAndBitshift+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d036      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d031      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a39      	ldr	r2, [pc, #228]	; (8005d14 <DMA_CalcBaseAndBitshift+0x130>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02c      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a38      	ldr	r2, [pc, #224]	; (8005d18 <DMA_CalcBaseAndBitshift+0x134>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d027      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a36      	ldr	r2, [pc, #216]	; (8005d1c <DMA_CalcBaseAndBitshift+0x138>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d022      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a35      	ldr	r2, [pc, #212]	; (8005d20 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d01d      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <DMA_CalcBaseAndBitshift+0x140>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d018      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a32      	ldr	r2, [pc, #200]	; (8005d28 <DMA_CalcBaseAndBitshift+0x144>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a30      	ldr	r2, [pc, #192]	; (8005d2c <DMA_CalcBaseAndBitshift+0x148>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00e      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2f      	ldr	r2, [pc, #188]	; (8005d30 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d009      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <DMA_CalcBaseAndBitshift+0x150>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <DMA_CalcBaseAndBitshift+0xa8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <DMA_CalcBaseAndBitshift+0x154>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <DMA_CalcBaseAndBitshift+0xac>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <DMA_CalcBaseAndBitshift+0xae>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d024      	beq.n	8005ce0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	3b10      	subs	r3, #16
 8005c9e:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <DMA_CalcBaseAndBitshift+0x158>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cb0:	5cd3      	ldrb	r3, [r2, r3]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d908      	bls.n	8005cd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <DMA_CalcBaseAndBitshift+0x160>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	1d1a      	adds	r2, r3, #4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	659a      	str	r2, [r3, #88]	; 0x58
 8005cce:	e00d      	b.n	8005cec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <DMA_CalcBaseAndBitshift+0x160>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005cde:	e005      	b.n	8005cec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	40020010 	.word	0x40020010
 8005d00:	40020028 	.word	0x40020028
 8005d04:	40020040 	.word	0x40020040
 8005d08:	40020058 	.word	0x40020058
 8005d0c:	40020070 	.word	0x40020070
 8005d10:	40020088 	.word	0x40020088
 8005d14:	400200a0 	.word	0x400200a0
 8005d18:	400200b8 	.word	0x400200b8
 8005d1c:	40020410 	.word	0x40020410
 8005d20:	40020428 	.word	0x40020428
 8005d24:	40020440 	.word	0x40020440
 8005d28:	40020458 	.word	0x40020458
 8005d2c:	40020470 	.word	0x40020470
 8005d30:	40020488 	.word	0x40020488
 8005d34:	400204a0 	.word	0x400204a0
 8005d38:	400204b8 	.word	0x400204b8
 8005d3c:	aaaaaaab 	.word	0xaaaaaaab
 8005d40:	0800cf84 	.word	0x0800cf84
 8005d44:	fffffc00 	.word	0xfffffc00

08005d48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d120      	bne.n	8005d9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d858      	bhi.n	8005e16 <DMA_CheckFifoParam+0xce>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <DMA_CheckFifoParam+0x24>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8f 	.word	0x08005d8f
 8005d74:	08005d7d 	.word	0x08005d7d
 8005d78:	08005e17 	.word	0x08005e17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d048      	beq.n	8005e1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d8c:	e045      	b.n	8005e1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d96:	d142      	bne.n	8005e1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d9c:	e03f      	b.n	8005e1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da6:	d123      	bne.n	8005df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d838      	bhi.n	8005e22 <DMA_CheckFifoParam+0xda>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <DMA_CheckFifoParam+0x70>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005dcf 	.word	0x08005dcf
 8005dc0:	08005dc9 	.word	0x08005dc9
 8005dc4:	08005de1 	.word	0x08005de1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	73fb      	strb	r3, [r7, #15]
        break;
 8005dcc:	e030      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d025      	beq.n	8005e26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dde:	e022      	b.n	8005e26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005de8:	d11f      	bne.n	8005e2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dee:	e01c      	b.n	8005e2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d902      	bls.n	8005dfe <DMA_CheckFifoParam+0xb6>
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d003      	beq.n	8005e04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005dfc:	e018      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
        break;
 8005e02:	e015      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
    break;
 8005e14:	e00b      	b.n	8005e2e <DMA_CheckFifoParam+0xe6>
        break;
 8005e16:	bf00      	nop
 8005e18:	e00a      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e008      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e006      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        break;
 8005e22:	bf00      	nop
 8005e24:	e004      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        break;
 8005e26:	bf00      	nop
 8005e28:	e002      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e000      	b.n	8005e30 <DMA_CheckFifoParam+0xe8>
    break;
 8005e2e:	bf00      	nop
    }
  }

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop

08005e40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a38      	ldr	r2, [pc, #224]	; (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d022      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a36      	ldr	r2, [pc, #216]	; (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01d      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d018      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a33      	ldr	r2, [pc, #204]	; (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a32      	ldr	r2, [pc, #200]	; (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00e      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d009      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2f      	ldr	r2, [pc, #188]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01a      	beq.n	8005ede <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	3b08      	subs	r3, #8
 8005eb0:	4a28      	ldr	r2, [pc, #160]	; (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ecc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005edc:	e024      	b.n	8005f28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	3b10      	subs	r3, #16
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	; (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d806      	bhi.n	8005f06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a1b      	ldr	r2, [pc, #108]	; (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d902      	bls.n	8005f06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3308      	adds	r3, #8
 8005f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	58025408 	.word	0x58025408
 8005f38:	5802541c 	.word	0x5802541c
 8005f3c:	58025430 	.word	0x58025430
 8005f40:	58025444 	.word	0x58025444
 8005f44:	58025458 	.word	0x58025458
 8005f48:	5802546c 	.word	0x5802546c
 8005f4c:	58025480 	.word	0x58025480
 8005f50:	58025494 	.word	0x58025494
 8005f54:	cccccccd 	.word	0xcccccccd
 8005f58:	16009600 	.word	0x16009600
 8005f5c:	58025880 	.word	0x58025880
 8005f60:	aaaaaaab 	.word	0xaaaaaaab
 8005f64:	400204b8 	.word	0x400204b8
 8005f68:	4002040f 	.word	0x4002040f
 8005f6c:	10008200 	.word	0x10008200
 8005f70:	40020880 	.word	0x40020880

08005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d04a      	beq.n	8006020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d847      	bhi.n	8006020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a25      	ldr	r2, [pc, #148]	; (800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a24      	ldr	r2, [pc, #144]	; (8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a22      	ldr	r2, [pc, #136]	; (8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d101      	bne.n	8005fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a15      	ldr	r2, [pc, #84]	; (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ffc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ffe:	e009      	b.n	8006014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	461a      	mov	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a11      	ldr	r2, [pc, #68]	; (8006058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006012:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3b01      	subs	r3, #1
 8006018:	2201      	movs	r2, #1
 800601a:	409a      	lsls	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	58025408 	.word	0x58025408
 8006030:	5802541c 	.word	0x5802541c
 8006034:	58025430 	.word	0x58025430
 8006038:	58025444 	.word	0x58025444
 800603c:	58025458 	.word	0x58025458
 8006040:	5802546c 	.word	0x5802546c
 8006044:	58025480 	.word	0x58025480
 8006048:	58025494 	.word	0x58025494
 800604c:	1600963f 	.word	0x1600963f
 8006050:	58025940 	.word	0x58025940
 8006054:	1000823f 	.word	0x1000823f
 8006058:	40020940 	.word	0x40020940

0800605c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800606a:	4b89      	ldr	r3, [pc, #548]	; (8006290 <HAL_GPIO_Init+0x234>)
 800606c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800606e:	e194      	b.n	800639a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	2101      	movs	r1, #1
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	fa01 f303 	lsl.w	r3, r1, r3
 800607c:	4013      	ands	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8186 	beq.w	8006394 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d00b      	beq.n	80060a8 <HAL_GPIO_Init+0x4c>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d007      	beq.n	80060a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800609c:	2b11      	cmp	r3, #17
 800609e:	d003      	beq.n	80060a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b12      	cmp	r3, #18
 80060a6:	d130      	bne.n	800610a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	2203      	movs	r2, #3
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4013      	ands	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060de:	2201      	movs	r2, #1
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	f003 0201 	and.w	r2, r3, #1
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4313      	orrs	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	2203      	movs	r2, #3
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4313      	orrs	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0xee>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b12      	cmp	r3, #18
 8006148:	d123      	bne.n	8006192 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	08da      	lsrs	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3208      	adds	r2, #8
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	220f      	movs	r2, #15
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	4313      	orrs	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	08da      	lsrs	r2, r3, #3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3208      	adds	r2, #8
 800618c:	69b9      	ldr	r1, [r7, #24]
 800618e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	2203      	movs	r2, #3
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f003 0203 	and.w	r2, r3, #3
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80e0 	beq.w	8006394 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d4:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <HAL_GPIO_Init+0x238>)
 80061d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061da:	4a2e      	ldr	r2, [pc, #184]	; (8006294 <HAL_GPIO_Init+0x238>)
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061e4:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <HAL_GPIO_Init+0x238>)
 80061e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061f2:	4a29      	ldr	r2, [pc, #164]	; (8006298 <HAL_GPIO_Init+0x23c>)
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	3302      	adds	r3, #2
 80061fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	220f      	movs	r2, #15
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a20      	ldr	r2, [pc, #128]	; (800629c <HAL_GPIO_Init+0x240>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d052      	beq.n	80062c4 <HAL_GPIO_Init+0x268>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <HAL_GPIO_Init+0x244>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d031      	beq.n	800628a <HAL_GPIO_Init+0x22e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <HAL_GPIO_Init+0x248>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d02b      	beq.n	8006286 <HAL_GPIO_Init+0x22a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <HAL_GPIO_Init+0x24c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d025      	beq.n	8006282 <HAL_GPIO_Init+0x226>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <HAL_GPIO_Init+0x250>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01f      	beq.n	800627e <HAL_GPIO_Init+0x222>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <HAL_GPIO_Init+0x254>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d019      	beq.n	800627a <HAL_GPIO_Init+0x21e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <HAL_GPIO_Init+0x258>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_GPIO_Init+0x21a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_GPIO_Init+0x25c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00d      	beq.n	8006272 <HAL_GPIO_Init+0x216>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a18      	ldr	r2, [pc, #96]	; (80062bc <HAL_GPIO_Init+0x260>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <HAL_GPIO_Init+0x212>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <HAL_GPIO_Init+0x264>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <HAL_GPIO_Init+0x20e>
 8006266:	2309      	movs	r3, #9
 8006268:	e02d      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 800626a:	230a      	movs	r3, #10
 800626c:	e02b      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 800626e:	2308      	movs	r3, #8
 8006270:	e029      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 8006272:	2307      	movs	r3, #7
 8006274:	e027      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 8006276:	2306      	movs	r3, #6
 8006278:	e025      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 800627a:	2305      	movs	r3, #5
 800627c:	e023      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 800627e:	2304      	movs	r3, #4
 8006280:	e021      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 8006282:	2303      	movs	r3, #3
 8006284:	e01f      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 8006286:	2302      	movs	r3, #2
 8006288:	e01d      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 800628a:	2301      	movs	r3, #1
 800628c:	e01b      	b.n	80062c6 <HAL_GPIO_Init+0x26a>
 800628e:	bf00      	nop
 8006290:	58000080 	.word	0x58000080
 8006294:	58024400 	.word	0x58024400
 8006298:	58000400 	.word	0x58000400
 800629c:	58020000 	.word	0x58020000
 80062a0:	58020400 	.word	0x58020400
 80062a4:	58020800 	.word	0x58020800
 80062a8:	58020c00 	.word	0x58020c00
 80062ac:	58021000 	.word	0x58021000
 80062b0:	58021400 	.word	0x58021400
 80062b4:	58021800 	.word	0x58021800
 80062b8:	58021c00 	.word	0x58021c00
 80062bc:	58022000 	.word	0x58022000
 80062c0:	58022400 	.word	0x58022400
 80062c4:	2300      	movs	r3, #0
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	f002 0203 	and.w	r2, r2, #3
 80062cc:	0092      	lsls	r2, r2, #2
 80062ce:	4093      	lsls	r3, r2
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d6:	4938      	ldr	r1, [pc, #224]	; (80063b8 <HAL_GPIO_Init+0x35c>)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	089b      	lsrs	r3, r3, #2
 80062dc:	3302      	adds	r3, #2
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	43db      	mvns	r3, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4013      	ands	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	43db      	mvns	r3, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4013      	ands	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800635e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800638c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	3301      	adds	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f ae63 	bne.w	8006070 <HAL_GPIO_Init+0x14>
  }
}
 80063aa:	bf00      	nop
 80063ac:	3724      	adds	r7, #36	; 0x24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	58000400 	.word	0x58000400

080063bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063d2:	887a      	ldrh	r2, [r7, #2]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063d8:	e003      	b.n	80063e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	041a      	lsls	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	619a      	str	r2, [r3, #24]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	401a      	ands	r2, r3
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	429a      	cmp	r2, r3
 8006406:	d104      	bne.n	8006412 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006408:	887b      	ldrh	r3, [r7, #2]
 800640a:	041a      	lsls	r2, r3, #16
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006410:	e002      	b.n	8006418 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006412:	887a      	ldrh	r2, [r7, #2]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	619a      	str	r2, [r3, #24]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800642c:	4b19      	ldr	r3, [pc, #100]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00a      	beq.n	800644e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006438:	4b16      	ldr	r3, [pc, #88]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e01f      	b.n	800648a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e01d      	b.n	800648a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800644e:	4b11      	ldr	r3, [pc, #68]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f023 0207 	bic.w	r2, r3, #7
 8006456:	490f      	ldr	r1, [pc, #60]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4313      	orrs	r3, r2
 800645c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800645e:	f7fb feb7 	bl	80021d0 <HAL_GetTick>
 8006462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006464:	e009      	b.n	800647a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006466:	f7fb feb3 	bl	80021d0 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006474:	d901      	bls.n	800647a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e007      	b.n	800648a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_PWREx_ConfigSupply+0x70>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006486:	d1ee      	bne.n	8006466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	58024800 	.word	0x58024800

08006498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e3c4      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8087 	beq.w	80065c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b8:	4ba2      	ldr	r3, [pc, #648]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064c2:	4ba0      	ldr	r3, [pc, #640]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d007      	beq.n	80064de <HAL_RCC_OscConfig+0x46>
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	2b18      	cmp	r3, #24
 80064d2:	d110      	bne.n	80064f6 <HAL_RCC_OscConfig+0x5e>
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d10b      	bne.n	80064f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064de:	4b99      	ldr	r3, [pc, #612]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d06c      	beq.n	80065c4 <HAL_RCC_OscConfig+0x12c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d168      	bne.n	80065c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e39e      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	d106      	bne.n	800650e <HAL_RCC_OscConfig+0x76>
 8006500:	4b90      	ldr	r3, [pc, #576]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a8f      	ldr	r2, [pc, #572]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e02e      	b.n	800656c <HAL_RCC_OscConfig+0xd4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10c      	bne.n	8006530 <HAL_RCC_OscConfig+0x98>
 8006516:	4b8b      	ldr	r3, [pc, #556]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a8a      	ldr	r2, [pc, #552]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4b88      	ldr	r3, [pc, #544]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a87      	ldr	r2, [pc, #540]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e01d      	b.n	800656c <HAL_RCC_OscConfig+0xd4>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006538:	d10c      	bne.n	8006554 <HAL_RCC_OscConfig+0xbc>
 800653a:	4b82      	ldr	r3, [pc, #520]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a81      	ldr	r2, [pc, #516]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4b7f      	ldr	r3, [pc, #508]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a7e      	ldr	r2, [pc, #504]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e00b      	b.n	800656c <HAL_RCC_OscConfig+0xd4>
 8006554:	4b7b      	ldr	r3, [pc, #492]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a7a      	ldr	r2, [pc, #488]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b78      	ldr	r3, [pc, #480]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a77      	ldr	r2, [pc, #476]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800656a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fb fe2c 	bl	80021d0 <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800657c:	f7fb fe28 	bl	80021d0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	; 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e352      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0xe4>
 800659a:	e014      	b.n	80065c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fb fe18 	bl	80021d0 <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a4:	f7fb fe14 	bl	80021d0 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	; 0x64
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e33e      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065b6:	4b63      	ldr	r3, [pc, #396]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x10c>
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8092 	beq.w	80066f8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d4:	4b5b      	ldr	r3, [pc, #364]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065de:	4b59      	ldr	r3, [pc, #356]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_RCC_OscConfig+0x162>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b18      	cmp	r3, #24
 80065ee:	d12d      	bne.n	800664c <HAL_RCC_OscConfig+0x1b4>
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d128      	bne.n	800664c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065fa:	4b52      	ldr	r3, [pc, #328]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_RCC_OscConfig+0x17a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e310      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006612:	f7fb fe0b 	bl	800222c <HAL_GetREVID>
 8006616:	4602      	mov	r2, r0
 8006618:	f241 0303 	movw	r3, #4099	; 0x1003
 800661c:	429a      	cmp	r2, r3
 800661e:	d80a      	bhi.n	8006636 <HAL_RCC_OscConfig+0x19e>
 8006620:	4b48      	ldr	r3, [pc, #288]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	031b      	lsls	r3, r3, #12
 800662e:	4945      	ldr	r1, [pc, #276]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	4313      	orrs	r3, r2
 8006632:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006634:	e060      	b.n	80066f8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006636:	4b43      	ldr	r3, [pc, #268]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	061b      	lsls	r3, r3, #24
 8006644:	493f      	ldr	r1, [pc, #252]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800664a:	e055      	b.n	80066f8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d038      	beq.n	80066c6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006654:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f023 0219 	bic.w	r2, r3, #25
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4938      	ldr	r1, [pc, #224]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006662:	4313      	orrs	r3, r2
 8006664:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006666:	f7fb fdb3 	bl	80021d0 <HAL_GetTick>
 800666a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800666e:	f7fb fdaf 	bl	80021d0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e2d9      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006680:	4b30      	ldr	r3, [pc, #192]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668c:	f7fb fdce 	bl	800222c <HAL_GetREVID>
 8006690:	4602      	mov	r2, r0
 8006692:	f241 0303 	movw	r3, #4099	; 0x1003
 8006696:	429a      	cmp	r2, r3
 8006698:	d80a      	bhi.n	80066b0 <HAL_RCC_OscConfig+0x218>
 800669a:	4b2a      	ldr	r3, [pc, #168]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	031b      	lsls	r3, r3, #12
 80066a8:	4926      	ldr	r1, [pc, #152]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	604b      	str	r3, [r1, #4]
 80066ae:	e023      	b.n	80066f8 <HAL_RCC_OscConfig+0x260>
 80066b0:	4b24      	ldr	r3, [pc, #144]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	061b      	lsls	r3, r3, #24
 80066be:	4921      	ldr	r1, [pc, #132]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]
 80066c4:	e018      	b.n	80066f8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c6:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80066cc:	f023 0301 	bic.w	r3, r3, #1
 80066d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d2:	f7fb fd7d 	bl	80021d0 <HAL_GetTick>
 80066d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066da:	f7fb fd79 	bl	80021d0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e2a3      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066ec:	4b15      	ldr	r3, [pc, #84]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8091 	beq.w	8006828 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006706:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b08      	cmp	r3, #8
 800671a:	d007      	beq.n	800672c <HAL_RCC_OscConfig+0x294>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b18      	cmp	r3, #24
 8006720:	d12f      	bne.n	8006782 <HAL_RCC_OscConfig+0x2ea>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d12a      	bne.n	8006782 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <HAL_RCC_OscConfig+0x2ac>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_RCC_OscConfig+0x2b0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	2b80      	cmp	r3, #128	; 0x80
 800673e:	d003      	beq.n	8006748 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e277      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
 8006744:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006748:	f7fb fd70 	bl	800222c <HAL_GetREVID>
 800674c:	4602      	mov	r2, r0
 800674e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006752:	429a      	cmp	r2, r3
 8006754:	d80a      	bhi.n	800676c <HAL_RCC_OscConfig+0x2d4>
 8006756:	4ba2      	ldr	r3, [pc, #648]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	069b      	lsls	r3, r3, #26
 8006764:	499e      	ldr	r1, [pc, #632]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006766:	4313      	orrs	r3, r2
 8006768:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800676a:	e05d      	b.n	8006828 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800676c:	4b9c      	ldr	r3, [pc, #624]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	061b      	lsls	r3, r3, #24
 800677a:	4999      	ldr	r1, [pc, #612]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800677c:	4313      	orrs	r3, r2
 800677e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006780:	e052      	b.n	8006828 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d035      	beq.n	80067f6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800678a:	4b95      	ldr	r3, [pc, #596]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a94      	ldr	r2, [pc, #592]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006796:	f7fb fd1b 	bl	80021d0 <HAL_GetTick>
 800679a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800679e:	f7fb fd17 	bl	80021d0 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e241      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067b0:	4b8b      	ldr	r3, [pc, #556]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0f0      	beq.n	800679e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067bc:	f7fb fd36 	bl	800222c <HAL_GetREVID>
 80067c0:	4602      	mov	r2, r0
 80067c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d80a      	bhi.n	80067e0 <HAL_RCC_OscConfig+0x348>
 80067ca:	4b85      	ldr	r3, [pc, #532]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	069b      	lsls	r3, r3, #26
 80067d8:	4981      	ldr	r1, [pc, #516]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	604b      	str	r3, [r1, #4]
 80067de:	e023      	b.n	8006828 <HAL_RCC_OscConfig+0x390>
 80067e0:	4b7f      	ldr	r3, [pc, #508]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	061b      	lsls	r3, r3, #24
 80067ee:	497c      	ldr	r1, [pc, #496]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60cb      	str	r3, [r1, #12]
 80067f4:	e018      	b.n	8006828 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067f6:	4b7a      	ldr	r3, [pc, #488]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a79      	ldr	r2, [pc, #484]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80067fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006802:	f7fb fce5 	bl	80021d0 <HAL_GetTick>
 8006806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006808:	e008      	b.n	800681c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800680a:	f7fb fce1 	bl	80021d0 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e20b      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800681c:	4b70      	ldr	r3, [pc, #448]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f0      	bne.n	800680a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d036      	beq.n	80068a2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d019      	beq.n	8006870 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800683c:	4b68      	ldr	r3, [pc, #416]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800683e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006840:	4a67      	ldr	r2, [pc, #412]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006848:	f7fb fcc2 	bl	80021d0 <HAL_GetTick>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006850:	f7fb fcbe 	bl	80021d0 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e1e8      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006862:	4b5f      	ldr	r3, [pc, #380]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <HAL_RCC_OscConfig+0x3b8>
 800686e:	e018      	b.n	80068a2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006870:	4b5b      	ldr	r3, [pc, #364]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006874:	4a5a      	ldr	r2, [pc, #360]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687c:	f7fb fca8 	bl	80021d0 <HAL_GetTick>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006884:	f7fb fca4 	bl	80021d0 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e1ce      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006896:	4b52      	ldr	r3, [pc, #328]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d036      	beq.n	800691c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d019      	beq.n	80068ea <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068b6:	4b4a      	ldr	r3, [pc, #296]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a49      	ldr	r2, [pc, #292]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80068bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068c2:	f7fb fc85 	bl	80021d0 <HAL_GetTick>
 80068c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068ca:	f7fb fc81 	bl	80021d0 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e1ab      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068dc:	4b40      	ldr	r3, [pc, #256]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCC_OscConfig+0x432>
 80068e8:	e018      	b.n	800691c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ea:	4b3d      	ldr	r3, [pc, #244]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a3c      	ldr	r2, [pc, #240]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80068f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068f6:	f7fb fc6b 	bl	80021d0 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068fe:	f7fb fc67 	bl	80021d0 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e191      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006910:	4b33      	ldr	r3, [pc, #204]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1f0      	bne.n	80068fe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8086 	beq.w	8006a36 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800692a:	4b2e      	ldr	r3, [pc, #184]	; (80069e4 <HAL_RCC_OscConfig+0x54c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a2d      	ldr	r2, [pc, #180]	; (80069e4 <HAL_RCC_OscConfig+0x54c>)
 8006930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006936:	f7fb fc4b 	bl	80021d0 <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800693e:	f7fb fc47 	bl	80021d0 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b64      	cmp	r3, #100	; 0x64
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e171      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006950:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <HAL_RCC_OscConfig+0x54c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d106      	bne.n	8006972 <HAL_RCC_OscConfig+0x4da>
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4a1d      	ldr	r2, [pc, #116]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800696a:	f043 0301 	orr.w	r3, r3, #1
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	e02d      	b.n	80069ce <HAL_RCC_OscConfig+0x536>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10c      	bne.n	8006994 <HAL_RCC_OscConfig+0x4fc>
 800697a:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	6713      	str	r3, [r2, #112]	; 0x70
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800698c:	f023 0304 	bic.w	r3, r3, #4
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
 8006992:	e01c      	b.n	80069ce <HAL_RCC_OscConfig+0x536>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b05      	cmp	r3, #5
 800699a:	d10c      	bne.n	80069b6 <HAL_RCC_OscConfig+0x51e>
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069a2:	f043 0304 	orr.w	r3, r3, #4
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
 80069b4:	e00b      	b.n	80069ce <HAL_RCC_OscConfig+0x536>
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	6713      	str	r3, [r2, #112]	; 0x70
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c6:	4a06      	ldr	r2, [pc, #24]	; (80069e0 <HAL_RCC_OscConfig+0x548>)
 80069c8:	f023 0304 	bic.w	r3, r3, #4
 80069cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01a      	beq.n	8006a0c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d6:	f7fb fbfb 	bl	80021d0 <HAL_GetTick>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069dc:	e00f      	b.n	80069fe <HAL_RCC_OscConfig+0x566>
 80069de:	bf00      	nop
 80069e0:	58024400 	.word	0x58024400
 80069e4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fb fbf2 	bl	80021d0 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e11a      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069fe:	4b8f      	ldr	r3, [pc, #572]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ee      	beq.n	80069e8 <HAL_RCC_OscConfig+0x550>
 8006a0a:	e014      	b.n	8006a36 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0c:	f7fb fbe0 	bl	80021d0 <HAL_GetTick>
 8006a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a12:	e00a      	b.n	8006a2a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a14:	f7fb fbdc 	bl	80021d0 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e104      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a2a:	4b84      	ldr	r3, [pc, #528]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1ee      	bne.n	8006a14 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80f9 	beq.w	8006c32 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a40:	4b7e      	ldr	r3, [pc, #504]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a48:	2b18      	cmp	r3, #24
 8006a4a:	f000 80b4 	beq.w	8006bb6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	f040 8095 	bne.w	8006b82 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a58:	4b78      	ldr	r3, [pc, #480]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a77      	ldr	r2, [pc, #476]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fb fbb4 	bl	80021d0 <HAL_GetTick>
 8006a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a6c:	f7fb fbb0 	bl	80021d0 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e0da      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a7e:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f0      	bne.n	8006a6c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a8a:	4b6c      	ldr	r3, [pc, #432]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <HAL_RCC_OscConfig+0x7a8>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a9a:	0112      	lsls	r2, r2, #4
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	4967      	ldr	r1, [pc, #412]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	628b      	str	r3, [r1, #40]	; 0x28
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	025b      	lsls	r3, r3, #9
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	3b01      	subs	r3, #1
 8006ace:	061b      	lsls	r3, r3, #24
 8006ad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ad4:	4959      	ldr	r1, [pc, #356]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ada:	4b58      	ldr	r3, [pc, #352]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	4a57      	ldr	r2, [pc, #348]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ae6:	4b55      	ldr	r3, [pc, #340]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aea:	4b56      	ldr	r3, [pc, #344]	; (8006c44 <HAL_RCC_OscConfig+0x7ac>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006af2:	00d2      	lsls	r2, r2, #3
 8006af4:	4951      	ldr	r1, [pc, #324]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006afa:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	f023 020c 	bic.w	r2, r3, #12
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	494d      	ldr	r1, [pc, #308]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b0c:	4b4b      	ldr	r3, [pc, #300]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	f023 0202 	bic.w	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b18:	4948      	ldr	r1, [pc, #288]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b1e:	4b47      	ldr	r3, [pc, #284]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	4a46      	ldr	r2, [pc, #280]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2a:	4b44      	ldr	r3, [pc, #272]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	4a43      	ldr	r2, [pc, #268]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b36:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	4a40      	ldr	r2, [pc, #256]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b42:	4b3e      	ldr	r3, [pc, #248]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b4e:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a3a      	ldr	r2, [pc, #232]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5a:	f7fb fb39 	bl	80021d0 <HAL_GetTick>
 8006b5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b62:	f7fb fb35 	bl	80021d0 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e05f      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b74:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCC_OscConfig+0x6ca>
 8006b80:	e057      	b.n	8006c32 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b82:	4b2e      	ldr	r3, [pc, #184]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a2d      	ldr	r2, [pc, #180]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8e:	f7fb fb1f 	bl	80021d0 <HAL_GetTick>
 8006b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b96:	f7fb fb1b 	bl	80021d0 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e045      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba8:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1f0      	bne.n	8006b96 <HAL_RCC_OscConfig+0x6fe>
 8006bb4:	e03d      	b.n	8006c32 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bb6:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bbc:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <HAL_RCC_OscConfig+0x7a4>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d031      	beq.n	8006c2e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0203 	and.w	r2, r3, #3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d12a      	bne.n	8006c2e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	091b      	lsrs	r3, r3, #4
 8006bdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d122      	bne.n	8006c2e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d11a      	bne.n	8006c2e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	0a5b      	lsrs	r3, r3, #9
 8006bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d111      	bne.n	8006c2e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d108      	bne.n	8006c2e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	0e1b      	lsrs	r3, r3, #24
 8006c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d001      	beq.n	8006c32 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3730      	adds	r7, #48	; 0x30
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	fffffc0c 	.word	0xfffffc0c
 8006c44:	ffff0007 	.word	0xffff0007

08006c48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e19c      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b8a      	ldr	r3, [pc, #552]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d910      	bls.n	8006c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b87      	ldr	r3, [pc, #540]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 020f 	bic.w	r2, r3, #15
 8006c72:	4985      	ldr	r1, [pc, #532]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b83      	ldr	r3, [pc, #524]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e184      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d908      	bls.n	8006cba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ca8:	4b78      	ldr	r3, [pc, #480]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	4975      	ldr	r1, [pc, #468]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d010      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695a      	ldr	r2, [r3, #20]
 8006cca:	4b70      	ldr	r3, [pc, #448]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d908      	bls.n	8006ce8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cd6:	4b6d      	ldr	r3, [pc, #436]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	496a      	ldr	r1, [pc, #424]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699a      	ldr	r2, [r3, #24]
 8006cf8:	4b64      	ldr	r3, [pc, #400]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d908      	bls.n	8006d16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d04:	4b61      	ldr	r3, [pc, #388]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	495e      	ldr	r1, [pc, #376]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d010      	beq.n	8006d44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d908      	bls.n	8006d44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d32:	4b56      	ldr	r3, [pc, #344]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	4953      	ldr	r1, [pc, #332]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	4b4d      	ldr	r3, [pc, #308]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d908      	bls.n	8006d72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d60:	4b4a      	ldr	r3, [pc, #296]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f023 020f 	bic.w	r2, r3, #15
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	4947      	ldr	r1, [pc, #284]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d055      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d7e:	4b43      	ldr	r3, [pc, #268]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	4940      	ldr	r1, [pc, #256]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d107      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d98:	4b3c      	ldr	r3, [pc, #240]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d121      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0f6      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006db0:	4b36      	ldr	r3, [pc, #216]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d115      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0ea      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dc8:	4b30      	ldr	r3, [pc, #192]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0de      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dd8:	4b2c      	ldr	r3, [pc, #176]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0d6      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006de8:	4b28      	ldr	r3, [pc, #160]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f023 0207 	bic.w	r2, r3, #7
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4925      	ldr	r1, [pc, #148]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfa:	f7fb f9e9 	bl	80021d0 <HAL_GetTick>
 8006dfe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e00:	e00a      	b.n	8006e18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e02:	f7fb f9e5 	bl	80021d0 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e0be      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e18:	4b1c      	ldr	r3, [pc, #112]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d1eb      	bne.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d010      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d208      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	490e      	ldr	r1, [pc, #56]	; (8006e8c <HAL_RCC_ClockConfig+0x244>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e58:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d214      	bcs.n	8006e90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f023 020f 	bic.w	r2, r3, #15
 8006e6e:	4906      	ldr	r1, [pc, #24]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e76:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <HAL_RCC_ClockConfig+0x240>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e086      	b.n	8006f96 <HAL_RCC_ClockConfig+0x34e>
 8006e88:	52002000 	.word	0x52002000
 8006e8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d010      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	4b3f      	ldr	r3, [pc, #252]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d208      	bcs.n	8006ebe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006eac:	4b3c      	ldr	r3, [pc, #240]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	4939      	ldr	r1, [pc, #228]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d010      	beq.n	8006eec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	4b34      	ldr	r3, [pc, #208]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d208      	bcs.n	8006eec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eda:	4b31      	ldr	r3, [pc, #196]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	492e      	ldr	r1, [pc, #184]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	4b28      	ldr	r3, [pc, #160]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d208      	bcs.n	8006f1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4922      	ldr	r1, [pc, #136]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d010      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69da      	ldr	r2, [r3, #28]
 8006f2a:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d208      	bcs.n	8006f48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f36:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	4917      	ldr	r1, [pc, #92]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f48:	f000 f834 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	0a1b      	lsrs	r3, r3, #8
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	4a12      	ldr	r2, [pc, #72]	; (8006fa4 <HAL_RCC_ClockConfig+0x35c>)
 8006f5a:	5cd3      	ldrb	r3, [r2, r3]
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	fa21 f303 	lsr.w	r3, r1, r3
 8006f64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <HAL_RCC_ClockConfig+0x358>)
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	4a0d      	ldr	r2, [pc, #52]	; (8006fa4 <HAL_RCC_ClockConfig+0x35c>)
 8006f70:	5cd3      	ldrb	r3, [r2, r3]
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7c:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <HAL_RCC_ClockConfig+0x360>)
 8006f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <HAL_RCC_ClockConfig+0x364>)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <HAL_RCC_ClockConfig+0x368>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fb f8d6 	bl	800213c <HAL_InitTick>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	0800cf74 	.word	0x0800cf74
 8006fa8:	24000034 	.word	0x24000034
 8006fac:	24000030 	.word	0x24000030
 8006fb0:	24000038 	.word	0x24000038

08006fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b089      	sub	sp, #36	; 0x24
 8006fb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fba:	4baf      	ldr	r3, [pc, #700]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc2:	2b18      	cmp	r3, #24
 8006fc4:	f200 814e 	bhi.w	8007264 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007265 	.word	0x08007265
 8006fd8:	08007265 	.word	0x08007265
 8006fdc:	08007265 	.word	0x08007265
 8006fe0:	08007265 	.word	0x08007265
 8006fe4:	08007265 	.word	0x08007265
 8006fe8:	08007265 	.word	0x08007265
 8006fec:	08007265 	.word	0x08007265
 8006ff0:	0800705b 	.word	0x0800705b
 8006ff4:	08007265 	.word	0x08007265
 8006ff8:	08007265 	.word	0x08007265
 8006ffc:	08007265 	.word	0x08007265
 8007000:	08007265 	.word	0x08007265
 8007004:	08007265 	.word	0x08007265
 8007008:	08007265 	.word	0x08007265
 800700c:	08007265 	.word	0x08007265
 8007010:	08007061 	.word	0x08007061
 8007014:	08007265 	.word	0x08007265
 8007018:	08007265 	.word	0x08007265
 800701c:	08007265 	.word	0x08007265
 8007020:	08007265 	.word	0x08007265
 8007024:	08007265 	.word	0x08007265
 8007028:	08007265 	.word	0x08007265
 800702c:	08007265 	.word	0x08007265
 8007030:	08007067 	.word	0x08007067
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007034:	4b90      	ldr	r3, [pc, #576]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007040:	4b8d      	ldr	r3, [pc, #564]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	4a8c      	ldr	r2, [pc, #560]	; (800727c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
 8007050:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007052:	e10a      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007054:	4b89      	ldr	r3, [pc, #548]	; (800727c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007056:	61bb      	str	r3, [r7, #24]
    break;
 8007058:	e107      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800705a:	4b89      	ldr	r3, [pc, #548]	; (8007280 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800705c:	61bb      	str	r3, [r7, #24]
    break;
 800705e:	e104      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007060:	4b88      	ldr	r3, [pc, #544]	; (8007284 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007062:	61bb      	str	r3, [r7, #24]
    break;
 8007064:	e101      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007066:	4b84      	ldr	r3, [pc, #528]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007070:	4b81      	ldr	r3, [pc, #516]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800707c:	4b7e      	ldr	r3, [pc, #504]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007086:	4b7c      	ldr	r3, [pc, #496]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80da 	beq.w	800725e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d05a      	beq.n	8007166 <HAL_RCC_GetSysClockFreq+0x1b2>
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d302      	bcc.n	80070ba <HAL_RCC_GetSysClockFreq+0x106>
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d078      	beq.n	80071aa <HAL_RCC_GetSysClockFreq+0x1f6>
 80070b8:	e099      	b.n	80071ee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ba:	4b6f      	ldr	r3, [pc, #444]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d02d      	beq.n	8007122 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070c6:	4b6c      	ldr	r3, [pc, #432]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	08db      	lsrs	r3, r3, #3
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	4a6a      	ldr	r2, [pc, #424]	; (800727c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070d2:	fa22 f303 	lsr.w	r3, r2, r3
 80070d6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	ee07 3a90 	vmov	s15, r3
 80070e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f0:	4b61      	ldr	r3, [pc, #388]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007100:	ed97 6a02 	vldr	s12, [r7, #8]
 8007104:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007288 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007120:	e087      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800728c <HAL_RCC_GetSysClockFreq+0x2d8>
 8007130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007134:	4b50      	ldr	r3, [pc, #320]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007144:	ed97 6a02 	vldr	s12, [r7, #8]
 8007148:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007288 <HAL_RCC_GetSysClockFreq+0x2d4>
 800714c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007164:	e065      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007170:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007290 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007178:	4b3f      	ldr	r3, [pc, #252]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007188:	ed97 6a02 	vldr	s12, [r7, #8]
 800718c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007288 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a8:	e043      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007294 <HAL_RCC_GetSysClockFreq+0x2e0>
 80071b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071bc:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007288 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ec:	e021      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007290 <HAL_RCC_GetSysClockFreq+0x2dc>
 80071fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007200:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007210:	ed97 6a02 	vldr	s12, [r7, #8]
 8007214:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007288 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007230:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	0a5b      	lsrs	r3, r3, #9
 8007238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723c:	3301      	adds	r3, #1
 800723e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800724a:	edd7 6a07 	vldr	s13, [r7, #28]
 800724e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007256:	ee17 3a90 	vmov	r3, s15
 800725a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800725c:	e005      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
    break;
 8007262:	e002      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007266:	61bb      	str	r3, [r7, #24]
    break;
 8007268:	bf00      	nop
  }

  return sysclockfreq;
 800726a:	69bb      	ldr	r3, [r7, #24]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3724      	adds	r7, #36	; 0x24
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	58024400 	.word	0x58024400
 800727c:	03d09000 	.word	0x03d09000
 8007280:	003d0900 	.word	0x003d0900
 8007284:	017d7840 	.word	0x017d7840
 8007288:	46000000 	.word	0x46000000
 800728c:	4c742400 	.word	0x4c742400
 8007290:	4a742400 	.word	0x4a742400
 8007294:	4bbebc20 	.word	0x4bbebc20

08007298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800729e:	f7ff fe89 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 80072a2:	4601      	mov	r1, r0
 80072a4:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	4a0f      	ldr	r2, [pc, #60]	; (80072ec <HAL_RCC_GetHCLKFreq+0x54>)
 80072b0:	5cd3      	ldrb	r3, [r2, r3]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	fa21 f303 	lsr.w	r3, r1, r3
 80072ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	4a09      	ldr	r2, [pc, #36]	; (80072ec <HAL_RCC_GetHCLKFreq+0x54>)
 80072c6:	5cd3      	ldrb	r3, [r2, r3]
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	fa22 f303 	lsr.w	r3, r2, r3
 80072d2:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072d6:	4a07      	ldr	r2, [pc, #28]	; (80072f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072de:	681b      	ldr	r3, [r3, #0]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	58024400 	.word	0x58024400
 80072ec:	0800cf74 	.word	0x0800cf74
 80072f0:	24000034 	.word	0x24000034
 80072f4:	24000030 	.word	0x24000030

080072f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072fc:	f7ff ffcc 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 8007300:	4601      	mov	r1, r0
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	091b      	lsrs	r3, r3, #4
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	4a04      	ldr	r2, [pc, #16]	; (8007320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800730e:	5cd3      	ldrb	r3, [r2, r3]
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}
 800731c:	58024400 	.word	0x58024400
 8007320:	0800cf74 	.word	0x0800cf74

08007324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007328:	f7ff ffb6 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 800732c:	4601      	mov	r1, r0
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <HAL_RCC_GetPCLK2Freq+0x28>)
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007344:	4618      	mov	r0, r3
 8007346:	bd80      	pop	{r7, pc}
 8007348:	58024400 	.word	0x58024400
 800734c:	0800cf74 	.word	0x0800cf74

08007350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007358:	2300      	movs	r3, #0
 800735a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800735c:	2300      	movs	r3, #0
 800735e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d03d      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007374:	d013      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800737a:	d802      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007380:	e01f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007386:	d013      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800738c:	d01c      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800738e:	e018      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007390:	4baf      	ldr	r3, [pc, #700]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	4aae      	ldr	r2, [pc, #696]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800739a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800739c:	e015      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3304      	adds	r3, #4
 80073a2:	2102      	movs	r1, #2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fd23 	bl	8008df0 <RCCEx_PLL2_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073ae:	e00c      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3324      	adds	r3, #36	; 0x24
 80073b4:	2102      	movs	r1, #2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 fdcc 	bl	8008f54 <RCCEx_PLL3_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073c0:	e003      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
      break;
 80073c6:	e000      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80073c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073d0:	4b9f      	ldr	r3, [pc, #636]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073dc:	499c      	ldr	r1, [pc, #624]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	650b      	str	r3, [r1, #80]	; 0x50
 80073e2:	e001      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d03d      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d826      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007419 	.word	0x08007419
 8007408:	08007427 	.word	0x08007427
 800740c:	08007439 	.word	0x08007439
 8007410:	08007451 	.word	0x08007451
 8007414:	08007451 	.word	0x08007451
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007418:	4b8d      	ldr	r3, [pc, #564]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	4a8c      	ldr	r2, [pc, #560]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800741e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007424:	e015      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f001 fcdf 	bl	8008df0 <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007436:	e00c      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3324      	adds	r3, #36	; 0x24
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fd88 	bl	8008f54 <RCCEx_PLL3_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
      break;
 800744e:	e000      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007458:	4b7d      	ldr	r3, [pc, #500]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	f023 0207 	bic.w	r2, r3, #7
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007464:	497a      	ldr	r1, [pc, #488]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007466:	4313      	orrs	r3, r2
 8007468:	650b      	str	r3, [r1, #80]	; 0x50
 800746a:	e001      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007478:	2b00      	cmp	r3, #0
 800747a:	d03e      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007480:	2b80      	cmp	r3, #128	; 0x80
 8007482:	d01c      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d804      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d00d      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007490:	e01e      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007492:	2bc0      	cmp	r3, #192	; 0xc0
 8007494:	d01f      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800749a:	d01e      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800749c:	e018      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749e:	4b6c      	ldr	r3, [pc, #432]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	4a6b      	ldr	r2, [pc, #428]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074aa:	e017      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 fc9c 	bl	8008df0 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074bc:	e00e      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3324      	adds	r3, #36	; 0x24
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fd45 	bl	8008f54 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074ce:	e005      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
      break;
 80074d4:	e002      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80074da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074e2:	4b5b      	ldr	r3, [pc, #364]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	4958      	ldr	r1, [pc, #352]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	650b      	str	r3, [r1, #80]	; 0x50
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007502:	2b00      	cmp	r3, #0
 8007504:	d044      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800750c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007510:	d01f      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007516:	d805      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800751c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007520:	d00e      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007522:	e01f      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007528:	d01f      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800752a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800752e:	d01e      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007530:	e018      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007532:	4b47      	ldr	r3, [pc, #284]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	4a46      	ldr	r2, [pc, #280]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800753c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800753e:	e017      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fc52 	bl	8008df0 <RCCEx_PLL2_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007550:	e00e      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3324      	adds	r3, #36	; 0x24
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fcfb 	bl	8008f54 <RCCEx_PLL3_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007562:	e005      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800756e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007584:	4932      	ldr	r1, [pc, #200]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007586:	4313      	orrs	r3, r2
 8007588:	658b      	str	r3, [r1, #88]	; 0x58
 800758a:	e001      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007598:	2b00      	cmp	r3, #0
 800759a:	d044      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075a6:	d01f      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80075a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ac:	d805      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80075b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075b6:	d00e      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80075b8:	e01f      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80075ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075be:	d01f      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80075c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c4:	d01e      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80075c6:	e018      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c8:	4b21      	ldr	r3, [pc, #132]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075d4:	e017      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 fc07 	bl	8008df0 <RCCEx_PLL2_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075e6:	e00e      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3324      	adds	r3, #36	; 0x24
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 fcb0 	bl	8008f54 <RCCEx_PLL3_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075f8:	e005      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	75fb      	strb	r3, [r7, #23]
      break;
 80075fe:	e002      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800760e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007610:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800761a:	490d      	ldr	r1, [pc, #52]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800761c:	4313      	orrs	r3, r2
 800761e:	658b      	str	r3, [r1, #88]	; 0x58
 8007620:	e001      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d035      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	2b10      	cmp	r3, #16
 8007638:	d00c      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800763a:	2b10      	cmp	r3, #16
 800763c:	d802      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01b      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007642:	e017      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007644:	2b20      	cmp	r3, #32
 8007646:	d00c      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007648:	2b30      	cmp	r3, #48	; 0x30
 800764a:	d018      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800764c:	e012      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800764e:	bf00      	nop
 8007650:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007654:	4baf      	ldr	r3, [pc, #700]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4aae      	ldr	r2, [pc, #696]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800765a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007660:	e00e      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	2102      	movs	r1, #2
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fbc1 	bl	8008df0 <RCCEx_PLL2_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007672:	e005      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800767e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007686:	4ba3      	ldr	r3, [pc, #652]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007692:	49a0      	ldr	r1, [pc, #640]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007694:	4313      	orrs	r3, r2
 8007696:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007698:	e001      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d042      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b2:	d01f      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80076b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b8:	d805      	bhi.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80076be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c2:	d00e      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80076c4:	e01f      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80076c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076ca:	d01f      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80076cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076d0:	d01e      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80076d2:	e018      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d4:	4b8f      	ldr	r3, [pc, #572]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	4a8e      	ldr	r2, [pc, #568]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076e0:	e017      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3304      	adds	r3, #4
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 fb81 	bl	8008df0 <RCCEx_PLL2_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076f2:	e00e      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fc2a 	bl	8008f54 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007704:	e005      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	75fb      	strb	r3, [r7, #23]
      break;
 800770a:	e002      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007718:	4b7e      	ldr	r3, [pc, #504]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800771a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007724:	497b      	ldr	r1, [pc, #492]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007726:	4313      	orrs	r3, r2
 8007728:	650b      	str	r3, [r1, #80]	; 0x50
 800772a:	e001      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d042      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007744:	d01b      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800774a:	d805      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d022      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007754:	d00a      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007756:	e01b      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800775c:	d01d      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800775e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007762:	d01c      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007768:	d01b      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800776a:	e011      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3304      	adds	r3, #4
 8007770:	2101      	movs	r1, #1
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fb3c 	bl	8008df0 <RCCEx_PLL2_Config>
 8007778:	4603      	mov	r3, r0
 800777a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800777c:	e012      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	2101      	movs	r1, #1
 8007784:	4618      	mov	r0, r3
 8007786:	f001 fbe5 	bl	8008f54 <RCCEx_PLL3_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800778e:	e009      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
      break;
 8007794:	e006      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007796:	bf00      	nop
 8007798:	e004      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800779a:	bf00      	nop
 800779c:	e002      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80077a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077aa:	4b5a      	ldr	r3, [pc, #360]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b6:	4957      	ldr	r1, [pc, #348]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	650b      	str	r3, [r1, #80]	; 0x50
 80077bc:	e001      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d044      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d8:	d01b      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077de:	d805      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d022      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80077ea:	e01b      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80077ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f0:	d01d      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077f6:	d01c      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80077f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077fc:	d01b      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077fe:	e011      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f001 faf2 	bl	8008df0 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007810:	e012      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3324      	adds	r3, #36	; 0x24
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fb9b 	bl	8008f54 <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007822:	e009      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800783e:	4b35      	ldr	r3, [pc, #212]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800784c:	4931      	ldr	r1, [pc, #196]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800784e:	4313      	orrs	r3, r2
 8007850:	658b      	str	r3, [r1, #88]	; 0x58
 8007852:	e001      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d02d      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786c:	d005      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007872:	d009      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d013      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787a:	4b26      	ldr	r3, [pc, #152]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	4a25      	ldr	r2, [pc, #148]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007886:	e00c      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3304      	adds	r3, #4
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f001 faae 	bl	8008df0 <RCCEx_PLL2_Config>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007898:	e003      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
      break;
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80078a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b4:	4917      	ldr	r1, [pc, #92]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	650b      	str	r3, [r1, #80]	; 0x50
 80078ba:	e001      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d035      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d81b      	bhi.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078d4:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007919 	.word	0x08007919
 80078e0:	080078ed 	.word	0x080078ed
 80078e4:	080078fb 	.word	0x080078fb
 80078e8:	08007919 	.word	0x08007919
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ec:	4b09      	ldr	r3, [pc, #36]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078f8:	e00f      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2102      	movs	r1, #2
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fa75 	bl	8008df0 <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800790a:	e006      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
      break;
 8007910:	e003      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
      break;
 8007918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007920:	4bba      	ldr	r3, [pc, #744]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	f023 0203 	bic.w	r2, r3, #3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792c:	49b7      	ldr	r1, [pc, #732]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800792e:	4313      	orrs	r3, r2
 8007930:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007932:	e001      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8086 	beq.w	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007946:	4bb2      	ldr	r3, [pc, #712]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4ab1      	ldr	r2, [pc, #708]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800794c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007952:	f7fa fc3d 	bl	80021d0 <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007958:	e009      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800795a:	f7fa fc39 	bl	80021d0 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b64      	cmp	r3, #100	; 0x64
 8007966:	d902      	bls.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	75fb      	strb	r3, [r7, #23]
        break;
 800796c:	e005      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800796e:	4ba8      	ldr	r3, [pc, #672]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0ef      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d166      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007980:	4ba2      	ldr	r3, [pc, #648]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800798a:	4053      	eors	r3, r2
 800798c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007990:	2b00      	cmp	r3, #0
 8007992:	d013      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007994:	4b9d      	ldr	r3, [pc, #628]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800799e:	4b9b      	ldr	r3, [pc, #620]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	4a9a      	ldr	r2, [pc, #616]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079aa:	4b98      	ldr	r3, [pc, #608]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ae:	4a97      	ldr	r2, [pc, #604]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079b6:	4a95      	ldr	r2, [pc, #596]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c6:	d115      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c8:	f7fa fc02 	bl	80021d0 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ce:	e00b      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d0:	f7fa fbfe 	bl	80021d0 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	4293      	cmp	r3, r2
 80079e0:	d902      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	75fb      	strb	r3, [r7, #23]
            break;
 80079e6:	e005      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e8:	4b88      	ldr	r3, [pc, #544]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0ed      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d126      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a08:	d10d      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007a0a:	4b80      	ldr	r3, [pc, #512]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a18:	0919      	lsrs	r1, r3, #4
 8007a1a:	4b7e      	ldr	r3, [pc, #504]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007a1c:	400b      	ands	r3, r1
 8007a1e:	497b      	ldr	r1, [pc, #492]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	610b      	str	r3, [r1, #16]
 8007a24:	e005      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007a26:	4b79      	ldr	r3, [pc, #484]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	4a78      	ldr	r2, [pc, #480]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a30:	6113      	str	r3, [r2, #16]
 8007a32:	4b76      	ldr	r3, [pc, #472]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a40:	4972      	ldr	r1, [pc, #456]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	670b      	str	r3, [r1, #112]	; 0x70
 8007a46:	e004      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	75bb      	strb	r3, [r7, #22]
 8007a4c:	e001      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d07d      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a62:	2b28      	cmp	r3, #40	; 0x28
 8007a64:	d866      	bhi.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007b3b 	.word	0x08007b3b
 8007a70:	08007b35 	.word	0x08007b35
 8007a74:	08007b35 	.word	0x08007b35
 8007a78:	08007b35 	.word	0x08007b35
 8007a7c:	08007b35 	.word	0x08007b35
 8007a80:	08007b35 	.word	0x08007b35
 8007a84:	08007b35 	.word	0x08007b35
 8007a88:	08007b35 	.word	0x08007b35
 8007a8c:	08007b11 	.word	0x08007b11
 8007a90:	08007b35 	.word	0x08007b35
 8007a94:	08007b35 	.word	0x08007b35
 8007a98:	08007b35 	.word	0x08007b35
 8007a9c:	08007b35 	.word	0x08007b35
 8007aa0:	08007b35 	.word	0x08007b35
 8007aa4:	08007b35 	.word	0x08007b35
 8007aa8:	08007b35 	.word	0x08007b35
 8007aac:	08007b23 	.word	0x08007b23
 8007ab0:	08007b35 	.word	0x08007b35
 8007ab4:	08007b35 	.word	0x08007b35
 8007ab8:	08007b35 	.word	0x08007b35
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b35 	.word	0x08007b35
 8007ac4:	08007b35 	.word	0x08007b35
 8007ac8:	08007b35 	.word	0x08007b35
 8007acc:	08007b3b 	.word	0x08007b3b
 8007ad0:	08007b35 	.word	0x08007b35
 8007ad4:	08007b35 	.word	0x08007b35
 8007ad8:	08007b35 	.word	0x08007b35
 8007adc:	08007b35 	.word	0x08007b35
 8007ae0:	08007b35 	.word	0x08007b35
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b3b 	.word	0x08007b3b
 8007af0:	08007b35 	.word	0x08007b35
 8007af4:	08007b35 	.word	0x08007b35
 8007af8:	08007b35 	.word	0x08007b35
 8007afc:	08007b35 	.word	0x08007b35
 8007b00:	08007b35 	.word	0x08007b35
 8007b04:	08007b35 	.word	0x08007b35
 8007b08:	08007b35 	.word	0x08007b35
 8007b0c:	08007b3b 	.word	0x08007b3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	2101      	movs	r1, #1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 f96a 	bl	8008df0 <RCCEx_PLL2_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b20:	e00c      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3324      	adds	r3, #36	; 0x24
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 fa13 	bl	8008f54 <RCCEx_PLL3_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b32:	e003      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b42:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b4e:	492f      	ldr	r1, [pc, #188]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	654b      	str	r3, [r1, #84]	; 0x54
 8007b54:	e001      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d037      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	d820      	bhi.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007bb7 	.word	0x08007bb7
 8007b78:	08007b8d 	.word	0x08007b8d
 8007b7c:	08007b9f 	.word	0x08007b9f
 8007b80:	08007bb7 	.word	0x08007bb7
 8007b84:	08007bb7 	.word	0x08007bb7
 8007b88:	08007bb7 	.word	0x08007bb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	2101      	movs	r1, #1
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 f92c 	bl	8008df0 <RCCEx_PLL2_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b9c:	e00c      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3324      	adds	r3, #36	; 0x24
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 f9d5 	bl	8008f54 <RCCEx_PLL3_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bae:	e003      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f023 0207 	bic.w	r2, r3, #7
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bca:	4910      	ldr	r1, [pc, #64]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	654b      	str	r3, [r1, #84]	; 0x54
 8007bd0:	e001      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d040      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	d827      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c43 	.word	0x08007c43
 8007bf8:	08007c19 	.word	0x08007c19
 8007bfc:	08007c2b 	.word	0x08007c2b
 8007c00:	08007c43 	.word	0x08007c43
 8007c04:	08007c43 	.word	0x08007c43
 8007c08:	08007c43 	.word	0x08007c43
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	58024800 	.word	0x58024800
 8007c14:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 f8e6 	bl	8008df0 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c28:	e00c      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f98f 	bl	8008f54 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c3a:	e003      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c40:	e000      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c4a:	4bb2      	ldr	r3, [pc, #712]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4e:	f023 0207 	bic.w	r2, r3, #7
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	49ae      	ldr	r1, [pc, #696]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c5e:	e001      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d044      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c7a:	d01b      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c80:	d805      	bhi.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007c8c:	e01b      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c92:	d01d      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c98:	d01c      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c9e:	d01b      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007ca0:	e011      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f8a1 	bl	8008df0 <RCCEx_PLL2_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cb2:	e012      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3324      	adds	r3, #36	; 0x24
 8007cb8:	2102      	movs	r1, #2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f94a 	bl	8008f54 <RCCEx_PLL3_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cc4:	e009      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cca:	e006      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ccc:	bf00      	nop
 8007cce:	e004      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e002      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ce0:	4b8c      	ldr	r3, [pc, #560]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cee:	4989      	ldr	r1, [pc, #548]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	654b      	str	r3, [r1, #84]	; 0x54
 8007cf4:	e001      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d044      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d10:	d01b      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d16:	d805      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d022      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d20:	d00a      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007d22:	e01b      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d28:	d01d      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007d2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d2e:	d01c      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d34:	d01b      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007d36:	e011      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f856 	bl	8008df0 <RCCEx_PLL2_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d48:	e012      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3324      	adds	r3, #36	; 0x24
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f8ff 	bl	8008f54 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d5a:	e009      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d60:	e006      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d62:	bf00      	nop
 8007d64:	e004      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10a      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d76:	4b67      	ldr	r3, [pc, #412]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d84:	4963      	ldr	r1, [pc, #396]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	658b      	str	r3, [r1, #88]	; 0x58
 8007d8a:	e001      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d044      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da6:	d01b      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dac:	d805      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d022      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007db8:	e01b      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dbe:	d01d      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007dc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dc4:	d01c      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007dc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dca:	d01b      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007dcc:	e011      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f001 f80b 	bl	8008df0 <RCCEx_PLL2_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dde:	e012      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3324      	adds	r3, #36	; 0x24
 8007de4:	2102      	movs	r1, #2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 f8b4 	bl	8008f54 <RCCEx_PLL3_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007df0:	e009      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
      break;
 8007df6:	e006      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e004      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e002      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e0c:	4b41      	ldr	r3, [pc, #260]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e1a:	493e      	ldr	r1, [pc, #248]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	658b      	str	r3, [r1, #88]	; 0x58
 8007e20:	e001      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01a      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3c:	d10a      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3324      	adds	r3, #36	; 0x24
 8007e42:	2102      	movs	r1, #2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f885 	bl	8008f54 <RCCEx_PLL3_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e54:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e62:	492c      	ldr	r1, [pc, #176]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01a      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7e:	d10a      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	2102      	movs	r1, #2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 f864 	bl	8008f54 <RCCEx_PLL3_Config>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ea4:	491b      	ldr	r1, [pc, #108]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d032      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec0:	d00d      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec6:	d016      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d111      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 ff8c 	bl	8008df0 <RCCEx_PLL2_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007edc:	e00c      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3324      	adds	r3, #36	; 0x24
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 f835 	bl	8008f54 <RCCEx_PLL3_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007eee:	e003      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef4:	e000      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f0c:	4901      	ldr	r1, [pc, #4]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	658b      	str	r3, [r1, #88]	; 0x58
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02f      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f32:	d00c      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f38:	d015      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3e:	d10f      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f40:	4b71      	ldr	r3, [pc, #452]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a70      	ldr	r2, [pc, #448]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f4c:	e00c      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3324      	adds	r3, #36	; 0x24
 8007f52:	2101      	movs	r1, #1
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fffd 	bl	8008f54 <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f5e:	e003      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
      break;
 8007f64:	e000      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f6e:	4b66      	ldr	r3, [pc, #408]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7c:	4962      	ldr	r1, [pc, #392]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	654b      	str	r3, [r1, #84]	; 0x54
 8007f82:	e001      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d029      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa0:	d007      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007fa2:	e00f      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa4:	4b58      	ldr	r3, [pc, #352]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4a57      	ldr	r2, [pc, #348]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fb0:	e00b      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	2102      	movs	r1, #2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 ff19 	bl	8008df0 <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fc2:	e002      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d109      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fd0:	4b4d      	ldr	r3, [pc, #308]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fdc:	494a      	ldr	r1, [pc, #296]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fe2:	e001      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	2102      	movs	r1, #2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 ffaa 	bl	8008f54 <RCCEx_PLL3_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d02f      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	d00c      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008024:	d802      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d011      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800802a:	e00d      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800802c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008030:	d00f      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008036:	d00e      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008038:	e006      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803a:	4b33      	ldr	r3, [pc, #204]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a32      	ldr	r2, [pc, #200]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008046:	e007      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	75fb      	strb	r3, [r7, #23]
      break;
 800804c:	e004      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800804e:	bf00      	nop
 8008050:	e002      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008052:	bf00      	nop
 8008054:	e000      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800805e:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800806a:	4927      	ldr	r1, [pc, #156]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800806c:	4313      	orrs	r3, r2
 800806e:	654b      	str	r3, [r1, #84]	; 0x54
 8008070:	e001      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008082:	4b21      	ldr	r3, [pc, #132]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	491e      	ldr	r1, [pc, #120]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008090:	4313      	orrs	r3, r2
 8008092:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d008      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080a0:	4b19      	ldr	r3, [pc, #100]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ac:	4916      	ldr	r1, [pc, #88]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00d      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	4a11      	ldr	r2, [pc, #68]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080c8:	6113      	str	r3, [r2, #16]
 80080ca:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80080d4:	490c      	ldr	r1, [pc, #48]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	da08      	bge.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080e2:	4b09      	ldr	r3, [pc, #36]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ee:	4906      	ldr	r1, [pc, #24]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80080f4:	7dbb      	ldrb	r3, [r7, #22]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e000      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	58024400 	.word	0x58024400

0800810c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b090      	sub	sp, #64	; 0x40
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811a:	d150      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800811c:	4ba1      	ldr	r3, [pc, #644]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2b04      	cmp	r3, #4
 800812a:	d844      	bhi.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008149 	.word	0x08008149
 8008138:	08008159 	.word	0x08008159
 800813c:	08008169 	.word	0x08008169
 8008140:	080081b1 	.word	0x080081b1
 8008144:	08008179 	.word	0x08008179
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fd03 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008156:	e241      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008158:	f107 0318 	add.w	r3, r7, #24
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fa63 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008166:	e239      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fba7 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008176:	e231      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008178:	4b8a      	ldr	r3, [pc, #552]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800817a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008180:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008188:	4b87      	ldr	r3, [pc, #540]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800818c:	e226      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008194:	d102      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008196:	4b85      	ldr	r3, [pc, #532]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800819a:	e21f      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80081a4:	4b82      	ldr	r3, [pc, #520]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a8:	e218      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ae:	e215      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081b0:	4b80      	ldr	r3, [pc, #512]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b4:	e212      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ba:	bf00      	nop
 80081bc:	e20e      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c4:	d14f      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80081c6:	4b77      	ldr	r3, [pc, #476]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80081ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d01c      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d804      	bhi.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d008      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d00e      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80081e2:	e03c      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80081e4:	2bc0      	cmp	r3, #192	; 0xc0
 80081e6:	d037      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80081e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ec:	d018      	beq.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80081ee:	e036      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fcaf 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081fe:	e1ed      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008200:	f107 0318 	add.w	r3, r7, #24
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fa0f 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800820e:	e1e5      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fb53 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800821e:	e1dd      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008220:	4b60      	ldr	r3, [pc, #384]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008228:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800822a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008230:	4b5d      	ldr	r3, [pc, #372]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008234:	e1d2      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800823c:	d102      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800823e:	4b5b      	ldr	r3, [pc, #364]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008242:	e1cb      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824a:	d102      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800824c:	4b58      	ldr	r3, [pc, #352]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008250:	e1c4      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008256:	e1c1      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008258:	4b56      	ldr	r3, [pc, #344]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800825c:	e1be      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008262:	bf00      	nop
 8008264:	e1ba      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800826c:	d153      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800826e:	4b4d      	ldr	r3, [pc, #308]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008272:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008276:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800827e:	d01f      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008284:	d805      	bhi.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800828a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800828e:	d00f      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008290:	e03d      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008292:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008296:	d037      	beq.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800829c:	d018      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800829e:	e036      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fc57 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ae:	e195      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082b0:	f107 0318 	add.w	r3, r7, #24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f9b7 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082be:	e18d      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fafb 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ce:	e185      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082d0:	4b34      	ldr	r3, [pc, #208]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082e0:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082e4:	e17a      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ec:	d102      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80082ee:	4b2f      	ldr	r3, [pc, #188]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082f2:	e173      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fa:	d102      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80082fc:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008300:	e16c      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008306:	e169      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008308:	4b2a      	ldr	r3, [pc, #168]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800830c:	e166      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008312:	bf00      	nop
 8008314:	e162      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831c:	d15d      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800831e:	4b21      	ldr	r3, [pc, #132]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008322:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008326:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800832e:	d01f      	beq.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008334:	d805      	bhi.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800833a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800833e:	d00f      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008340:	e047      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008342:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008346:	d041      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800834c:	d018      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800834e:	e040      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fbff 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800835e:	e13d      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008360:	f107 0318 	add.w	r3, r7, #24
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f95f 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800836e:	e135      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008370:	f107 030c 	add.w	r3, r7, #12
 8008374:	4618      	mov	r0, r3
 8008376:	f000 faa3 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800837e:	e12d      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008388:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800838a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008394:	e122      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800839c:	d10c      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a2:	e11b      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	003d0900 	.word	0x003d0900
 80083b0:	017d7840 	.word	0x017d7840
 80083b4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083be:	d102      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80083c0:	4b89      	ldr	r3, [pc, #548]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c4:	e10a      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ca:	e107      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083cc:	4b87      	ldr	r3, [pc, #540]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d0:	e104      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d6:	bf00      	nop
 80083d8:	e100      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e0:	d153      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80083e2:	4b83      	ldr	r3, [pc, #524]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80083ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f2:	d01f      	beq.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80083f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f8:	d805      	bhi.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80083fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008402:	d00f      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008404:	e03d      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008406:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800840a:	d037      	beq.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800840c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008410:	d018      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008412:	e036      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fb9d 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008422:	e0db      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008424:	f107 0318 	add.w	r3, r7, #24
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f8fd 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008432:	e0d3      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fa41 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008442:	e0cb      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008444:	4b6a      	ldr	r3, [pc, #424]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800844c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008454:	4b67      	ldr	r3, [pc, #412]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008458:	e0c0      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800845a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008460:	d102      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008462:	4b65      	ldr	r3, [pc, #404]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008466:	e0b9      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846e:	d102      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008470:	4b5d      	ldr	r3, [pc, #372]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008474:	e0b2      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800847a:	e0af      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800847c:	4b5b      	ldr	r3, [pc, #364]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008480:	e0ac      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008486:	bf00      	nop
 8008488:	e0a8      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008490:	d13d      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008492:	4b57      	ldr	r3, [pc, #348]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800849a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a2:	d00c      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80084a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a8:	d011      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d12b      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ae:	f107 0318 	add.w	r3, r7, #24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f8b8 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084bc:	e08e      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084be:	f107 030c 	add.w	r3, r7, #12
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f9fc 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084cc:	e086      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084ce:	4b48      	ldr	r3, [pc, #288]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80084de:	4b45      	ldr	r3, [pc, #276]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80084e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80084e2:	e07b      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ea:	d102      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80084ec:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f0:	e074      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80084f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f8:	d102      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80084fa:	4b3b      	ldr	r3, [pc, #236]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084fe:	e06d      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008504:	e06a      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800850a:	bf00      	nop
 800850c:	e066      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008514:	d11f      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008516:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800851e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852a:	d008      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800852c:	e00f      	b.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800852e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fb10 	bl	8008b58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800853c:	e04e      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853e:	f107 0318 	add.w	r3, r7, #24
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f870 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854c:	e046      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008552:	bf00      	nop
 8008554:	e042      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800855c:	d13c      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800855e:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008566:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800856e:	d01e      	beq.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008574:	d805      	bhi.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800857a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800857e:	d00e      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008580:	e026      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008586:	d01d      	beq.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800858c:	d01d      	beq.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800858e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008592:	d014      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008594:	e01c      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008596:	f000 f831 	bl	80085fc <HAL_RCCEx_GetD3PCLK1Freq>
 800859a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800859c:	e01e      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859e:	f107 0318 	add.w	r3, r7, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f840 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ac:	e016      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ae:	f107 030c 	add.w	r3, r7, #12
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f984 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085bc:	e00e      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80085c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085c2:	e00b      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085c8:	e008      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80085ca:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ce:	e005      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d4:	bf00      	nop
 80085d6:	e001      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3740      	adds	r7, #64	; 0x40
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	017d7840 	.word	0x017d7840
 80085ec:	00bb8000 	.word	0x00bb8000
 80085f0:	58024400 	.word	0x58024400
 80085f4:	03d09000 	.word	0x03d09000
 80085f8:	003d0900 	.word	0x003d0900

080085fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008600:	f7fe fe4a 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 8008604:	4601      	mov	r1, r0
 8008606:	4b06      	ldr	r3, [pc, #24]	; (8008620 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	091b      	lsrs	r3, r3, #4
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	4a04      	ldr	r2, [pc, #16]	; (8008624 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008612:	5cd3      	ldrb	r3, [r2, r3]
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800861c:	4618      	mov	r0, r3
 800861e:	bd80      	pop	{r7, pc}
 8008620:	58024400 	.word	0x58024400
 8008624:	0800cf74 	.word	0x0800cf74

08008628 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008628:	b480      	push	{r7}
 800862a:	b089      	sub	sp, #36	; 0x24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008630:	4b9d      	ldr	r3, [pc, #628]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	f003 0303 	and.w	r3, r3, #3
 8008638:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800863a:	4b9b      	ldr	r3, [pc, #620]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	0b1b      	lsrs	r3, r3, #12
 8008640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008644:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008646:	4b98      	ldr	r3, [pc, #608]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	091b      	lsrs	r3, r3, #4
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008652:	4b95      	ldr	r3, [pc, #596]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	08db      	lsrs	r3, r3, #3
 8008658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 810a 	beq.w	800888a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d05a      	beq.n	8008732 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800867c:	2b01      	cmp	r3, #1
 800867e:	d302      	bcc.n	8008686 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008680:	2b02      	cmp	r3, #2
 8008682:	d078      	beq.n	8008776 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008684:	e099      	b.n	80087ba <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008686:	4b88      	ldr	r3, [pc, #544]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d02d      	beq.n	80086ee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008692:	4b85      	ldr	r3, [pc, #532]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	08db      	lsrs	r3, r3, #3
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	4a83      	ldr	r2, [pc, #524]	; (80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800869e:	fa22 f303 	lsr.w	r3, r2, r3
 80086a2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	ee07 3a90 	vmov	s15, r3
 80086b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086bc:	4b7a      	ldr	r3, [pc, #488]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086ec:	e087      	b.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80086fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008700:	4b69      	ldr	r3, [pc, #420]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008710:	ed97 6a03 	vldr	s12, [r7, #12]
 8008714:	eddf 5a66 	vldr	s11, [pc, #408]	; 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008730:	e065      	b.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008744:	4b58      	ldr	r3, [pc, #352]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008754:	ed97 6a03 	vldr	s12, [r7, #12]
 8008758:	eddf 5a55 	vldr	s11, [pc, #340]	; 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800875c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008774:	e043      	b.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	ee07 3a90 	vmov	s15, r3
 800877c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008780:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80088bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008788:	4b47      	ldr	r3, [pc, #284]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008798:	ed97 6a03 	vldr	s12, [r7, #12]
 800879c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80087a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087b8:	e021      	b.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	ee07 3a90 	vmov	s15, r3
 80087c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80087c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087cc:	4b36      	ldr	r3, [pc, #216]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80087e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087fc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80087fe:	4b2a      	ldr	r3, [pc, #168]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	0a5b      	lsrs	r3, r3, #9
 8008804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008808:	ee07 3a90 	vmov	s15, r3
 800880c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008818:	edd7 6a07 	vldr	s13, [r7, #28]
 800881c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008824:	ee17 2a90 	vmov	r2, s15
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800882c:	4b1e      	ldr	r3, [pc, #120]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800882e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008830:	0c1b      	lsrs	r3, r3, #16
 8008832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008846:	edd7 6a07 	vldr	s13, [r7, #28]
 800884a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008852:	ee17 2a90 	vmov	r2, s15
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800885a:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	0e1b      	lsrs	r3, r3, #24
 8008860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008874:	edd7 6a07 	vldr	s13, [r7, #28]
 8008878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800887c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008880:	ee17 2a90 	vmov	r2, s15
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008888:	e008      	b.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	609a      	str	r2, [r3, #8]
}
 800889c:	bf00      	nop
 800889e:	3724      	adds	r7, #36	; 0x24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	58024400 	.word	0x58024400
 80088ac:	03d09000 	.word	0x03d09000
 80088b0:	46000000 	.word	0x46000000
 80088b4:	4c742400 	.word	0x4c742400
 80088b8:	4a742400 	.word	0x4a742400
 80088bc:	4bbebc20 	.word	0x4bbebc20

080088c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088c8:	4b9d      	ldr	r3, [pc, #628]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088d2:	4b9b      	ldr	r3, [pc, #620]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	0d1b      	lsrs	r3, r3, #20
 80088d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088de:	4b98      	ldr	r3, [pc, #608]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80088ea:	4b95      	ldr	r3, [pc, #596]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	08db      	lsrs	r3, r3, #3
 80088f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 810a 	beq.w	8008b22 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d05a      	beq.n	80089ca <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008914:	2b01      	cmp	r3, #1
 8008916:	d302      	bcc.n	800891e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008918:	2b02      	cmp	r3, #2
 800891a:	d078      	beq.n	8008a0e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800891c:	e099      	b.n	8008a52 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800891e:	4b88      	ldr	r3, [pc, #544]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d02d      	beq.n	8008986 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800892a:	4b85      	ldr	r3, [pc, #532]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	08db      	lsrs	r3, r3, #3
 8008930:	f003 0303 	and.w	r3, r3, #3
 8008934:	4a83      	ldr	r2, [pc, #524]	; (8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008936:	fa22 f303 	lsr.w	r3, r2, r3
 800893a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008954:	4b7a      	ldr	r3, [pc, #488]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008964:	ed97 6a03 	vldr	s12, [r7, #12]
 8008968:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800896c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008980:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008984:	e087      	b.n	8008a96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008990:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008b4c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008998:	4b69      	ldr	r3, [pc, #420]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c8:	e065      	b.n	8008a96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	ee07 3a90 	vmov	s15, r3
 80089d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80089d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089dc:	4b58      	ldr	r3, [pc, #352]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e4:	ee07 3a90 	vmov	s15, r3
 80089e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a0c:	e043      	b.n	8008a96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a20:	4b47      	ldr	r3, [pc, #284]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a28:	ee07 3a90 	vmov	s15, r3
 8008a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a34:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a50:	e021      	b.n	8008a96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	ee07 3a90 	vmov	s15, r3
 8008a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a64:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6c:	ee07 3a90 	vmov	s15, r3
 8008a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a74:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a78:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a94:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a96:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	0a5b      	lsrs	r3, r3, #9
 8008a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa0:	ee07 3a90 	vmov	s15, r3
 8008aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008abc:	ee17 2a90 	vmov	r2, s15
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008ac4:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aea:	ee17 2a90 	vmov	r2, s15
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008af2:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	0e1b      	lsrs	r3, r3, #24
 8008af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b18:	ee17 2a90 	vmov	r2, s15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b20:	e008      	b.n	8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	609a      	str	r2, [r3, #8]
}
 8008b34:	bf00      	nop
 8008b36:	3724      	adds	r7, #36	; 0x24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	58024400 	.word	0x58024400
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	46000000 	.word	0x46000000
 8008b4c:	4c742400 	.word	0x4c742400
 8008b50:	4a742400 	.word	0x4a742400
 8008b54:	4bbebc20 	.word	0x4bbebc20

08008b58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b089      	sub	sp, #36	; 0x24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b60:	4b9d      	ldr	r3, [pc, #628]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	f003 0303 	and.w	r3, r3, #3
 8008b68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008b6a:	4b9b      	ldr	r3, [pc, #620]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	091b      	lsrs	r3, r3, #4
 8008b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b76:	4b98      	ldr	r3, [pc, #608]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b80:	4b95      	ldr	r3, [pc, #596]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	08db      	lsrs	r3, r3, #3
 8008b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	fb02 f303 	mul.w	r3, r2, r3
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 810a 	beq.w	8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d05a      	beq.n	8008c60 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d302      	bcc.n	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d078      	beq.n	8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008bb2:	e099      	b.n	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bb4:	4b88      	ldr	r3, [pc, #544]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d02d      	beq.n	8008c1c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bc0:	4b85      	ldr	r3, [pc, #532]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a84      	ldr	r2, [pc, #528]	; (8008ddc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	ee07 3a90 	vmov	s15, r3
 8008bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b7b      	ldr	r3, [pc, #492]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c1a:	e087      	b.n	8008d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008de4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b6a      	ldr	r3, [pc, #424]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c5e:	e065      	b.n	8008d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b59      	ldr	r3, [pc, #356]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca2:	e043      	b.n	8008d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b48      	ldr	r3, [pc, #288]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce6:	e021      	b.n	8008d2c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d2a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d30:	0a5b      	lsrs	r3, r3, #9
 8008d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d52:	ee17 2a90 	vmov	r2, s15
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008d5a:	4b1f      	ldr	r3, [pc, #124]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d80:	ee17 2a90 	vmov	r2, s15
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d88:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	0e1b      	lsrs	r3, r3, #24
 8008d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dae:	ee17 2a90 	vmov	r2, s15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008db6:	e008      	b.n	8008dca <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	609a      	str	r2, [r3, #8]
}
 8008dca:	bf00      	nop
 8008dcc:	3724      	adds	r7, #36	; 0x24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	58024400 	.word	0x58024400
 8008ddc:	03d09000 	.word	0x03d09000
 8008de0:	46000000 	.word	0x46000000
 8008de4:	4c742400 	.word	0x4c742400
 8008de8:	4a742400 	.word	0x4a742400
 8008dec:	4bbebc20 	.word	0x4bbebc20

08008df0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dfe:	4b53      	ldr	r3, [pc, #332]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d101      	bne.n	8008e0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e099      	b.n	8008f42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e0e:	4b4f      	ldr	r3, [pc, #316]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a4e      	ldr	r2, [pc, #312]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1a:	f7f9 f9d9 	bl	80021d0 <HAL_GetTick>
 8008e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e20:	e008      	b.n	8008e34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e22:	f7f9 f9d5 	bl	80021d0 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e086      	b.n	8008f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e34:	4b45      	ldr	r3, [pc, #276]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1f0      	bne.n	8008e22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e40:	4b42      	ldr	r3, [pc, #264]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	031b      	lsls	r3, r3, #12
 8008e4e:	493f      	ldr	r1, [pc, #252]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	628b      	str	r3, [r1, #40]	; 0x28
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	025b      	lsls	r3, r3, #9
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	061b      	lsls	r3, r3, #24
 8008e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e84:	4931      	ldr	r1, [pc, #196]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e8a:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	492d      	ldr	r1, [pc, #180]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e9c:	4b2b      	ldr	r3, [pc, #172]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	f023 0220 	bic.w	r2, r3, #32
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	4928      	ldr	r1, [pc, #160]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008eae:	4b27      	ldr	r3, [pc, #156]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a26      	ldr	r2, [pc, #152]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	f023 0310 	bic.w	r3, r3, #16
 8008eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eba:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ebe:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <RCCEx_PLL2_Config+0x160>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	69d2      	ldr	r2, [r2, #28]
 8008ec6:	00d2      	lsls	r2, r2, #3
 8008ec8:	4920      	ldr	r1, [pc, #128]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ece:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	4a1e      	ldr	r2, [pc, #120]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	f043 0310 	orr.w	r3, r3, #16
 8008ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d106      	bne.n	8008eee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4a19      	ldr	r2, [pc, #100]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008eec:	e00f      	b.n	8008f0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d106      	bne.n	8008f02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ef4:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	4a14      	ldr	r2, [pc, #80]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008efe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f00:	e005      	b.n	8008f0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	4a11      	ldr	r2, [pc, #68]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a0e      	ldr	r2, [pc, #56]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1a:	f7f9 f959 	bl	80021d0 <HAL_GetTick>
 8008f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f20:	e008      	b.n	8008f34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f22:	f7f9 f955 	bl	80021d0 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e006      	b.n	8008f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <RCCEx_PLL2_Config+0x15c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0f0      	beq.n	8008f22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	ffff0007 	.word	0xffff0007

08008f54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f62:	4b53      	ldr	r3, [pc, #332]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d101      	bne.n	8008f72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e099      	b.n	80090a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f72:	4b4f      	ldr	r3, [pc, #316]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a4e      	ldr	r2, [pc, #312]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7e:	f7f9 f927 	bl	80021d0 <HAL_GetTick>
 8008f82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f84:	e008      	b.n	8008f98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f86:	f7f9 f923 	bl	80021d0 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e086      	b.n	80090a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f98:	4b45      	ldr	r3, [pc, #276]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1f0      	bne.n	8008f86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fa4:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	051b      	lsls	r3, r3, #20
 8008fb2:	493f      	ldr	r1, [pc, #252]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	628b      	str	r3, [r1, #40]	; 0x28
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	025b      	lsls	r3, r3, #9
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	061b      	lsls	r3, r3, #24
 8008fe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fe8:	4931      	ldr	r1, [pc, #196]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fee:	4b30      	ldr	r3, [pc, #192]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	492d      	ldr	r1, [pc, #180]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009000:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	4928      	ldr	r1, [pc, #160]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009012:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	4a26      	ldr	r2, [pc, #152]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800901c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800901e:	4b24      	ldr	r3, [pc, #144]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009022:	4b24      	ldr	r3, [pc, #144]	; (80090b4 <RCCEx_PLL3_Config+0x160>)
 8009024:	4013      	ands	r3, r2
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	69d2      	ldr	r2, [r2, #28]
 800902a:	00d2      	lsls	r2, r2, #3
 800902c:	4920      	ldr	r1, [pc, #128]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800902e:	4313      	orrs	r3, r2
 8009030:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009032:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800903c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d106      	bne.n	8009052 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009044:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	4a19      	ldr	r2, [pc, #100]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800904a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800904e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009050:	e00f      	b.n	8009072 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d106      	bne.n	8009066 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009058:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800905e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009064:	e005      	b.n	8009072 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	4a11      	ldr	r2, [pc, #68]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800906c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009070:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a0e      	ldr	r2, [pc, #56]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 8009078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907e:	f7f9 f8a7 	bl	80021d0 <HAL_GetTick>
 8009082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009084:	e008      	b.n	8009098 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009086:	f7f9 f8a3 	bl	80021d0 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e006      	b.n	80090a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <RCCEx_PLL3_Config+0x15c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0f0      	beq.n	8009086 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	58024400 	.word	0x58024400
 80090b4:	ffff0007 	.word	0xffff0007

080090b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e01d      	b.n	8009106 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7f8 fccc 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f000 f97c 	bl	80093f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <HAL_TIM_Base_Start_IT+0x50>)
 8009130:	4013      	ands	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b06      	cmp	r3, #6
 8009138:	d00b      	beq.n	8009152 <HAL_TIM_Base_Start_IT+0x42>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009140:	d007      	beq.n	8009152 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f042 0201 	orr.w	r2, r2, #1
 8009150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	00010007 	.word	0x00010007

08009164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b02      	cmp	r3, #2
 8009178:	d122      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b02      	cmp	r3, #2
 8009186:	d11b      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f06f 0202 	mvn.w	r2, #2
 8009190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f905 	bl	80093b6 <HAL_TIM_IC_CaptureCallback>
 80091ac:	e005      	b.n	80091ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8f7 	bl	80093a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f908 	bl	80093ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d122      	bne.n	8009214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d11b      	bne.n	8009214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f06f 0204 	mvn.w	r2, #4
 80091e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f8db 	bl	80093b6 <HAL_TIM_IC_CaptureCallback>
 8009200:	e005      	b.n	800920e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8cd 	bl	80093a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f8de 	bl	80093ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f003 0308 	and.w	r3, r3, #8
 800921e:	2b08      	cmp	r3, #8
 8009220:	d122      	bne.n	8009268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b08      	cmp	r3, #8
 800922e:	d11b      	bne.n	8009268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f06f 0208 	mvn.w	r2, #8
 8009238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2204      	movs	r2, #4
 800923e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f8b1 	bl	80093b6 <HAL_TIM_IC_CaptureCallback>
 8009254:	e005      	b.n	8009262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f8a3 	bl	80093a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f8b4 	bl	80093ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	2b10      	cmp	r3, #16
 8009274:	d122      	bne.n	80092bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b10      	cmp	r3, #16
 8009282:	d11b      	bne.n	80092bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f06f 0210 	mvn.w	r2, #16
 800928c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2208      	movs	r2, #8
 8009292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f887 	bl	80093b6 <HAL_TIM_IC_CaptureCallback>
 80092a8:	e005      	b.n	80092b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f879 	bl	80093a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f88a 	bl	80093ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d10e      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d107      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f06f 0201 	mvn.w	r2, #1
 80092e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7f7 fc28 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f2:	2b80      	cmp	r3, #128	; 0x80
 80092f4:	d10e      	bne.n	8009314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b80      	cmp	r3, #128	; 0x80
 8009302:	d107      	bne.n	8009314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800930c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f99c 	bl	800964c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800931e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009322:	d10e      	bne.n	8009342 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932e:	2b80      	cmp	r3, #128	; 0x80
 8009330:	d107      	bne.n	8009342 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800933a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f98f 	bl	8009660 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	d10e      	bne.n	800936e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b40      	cmp	r3, #64	; 0x40
 800935c:	d107      	bne.n	800936e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f838 	bl	80093de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b20      	cmp	r3, #32
 800937a:	d10e      	bne.n	800939a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b20      	cmp	r3, #32
 8009388:	d107      	bne.n	800939a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f06f 0220 	mvn.w	r2, #32
 8009392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f94f 	bl	8009638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a40      	ldr	r2, [pc, #256]	; (8009508 <TIM_Base_SetConfig+0x114>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d013      	beq.n	8009434 <TIM_Base_SetConfig+0x40>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009412:	d00f      	beq.n	8009434 <TIM_Base_SetConfig+0x40>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a3d      	ldr	r2, [pc, #244]	; (800950c <TIM_Base_SetConfig+0x118>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00b      	beq.n	8009434 <TIM_Base_SetConfig+0x40>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a3c      	ldr	r2, [pc, #240]	; (8009510 <TIM_Base_SetConfig+0x11c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d007      	beq.n	8009434 <TIM_Base_SetConfig+0x40>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a3b      	ldr	r2, [pc, #236]	; (8009514 <TIM_Base_SetConfig+0x120>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_Base_SetConfig+0x40>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a3a      	ldr	r2, [pc, #232]	; (8009518 <TIM_Base_SetConfig+0x124>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d108      	bne.n	8009446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a2f      	ldr	r2, [pc, #188]	; (8009508 <TIM_Base_SetConfig+0x114>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d01f      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009454:	d01b      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a2c      	ldr	r2, [pc, #176]	; (800950c <TIM_Base_SetConfig+0x118>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d017      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a2b      	ldr	r2, [pc, #172]	; (8009510 <TIM_Base_SetConfig+0x11c>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d013      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a2a      	ldr	r2, [pc, #168]	; (8009514 <TIM_Base_SetConfig+0x120>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d00f      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a29      	ldr	r2, [pc, #164]	; (8009518 <TIM_Base_SetConfig+0x124>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00b      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a28      	ldr	r2, [pc, #160]	; (800951c <TIM_Base_SetConfig+0x128>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d007      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a27      	ldr	r2, [pc, #156]	; (8009520 <TIM_Base_SetConfig+0x12c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d003      	beq.n	800948e <TIM_Base_SetConfig+0x9a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a26      	ldr	r2, [pc, #152]	; (8009524 <TIM_Base_SetConfig+0x130>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d108      	bne.n	80094a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a10      	ldr	r2, [pc, #64]	; (8009508 <TIM_Base_SetConfig+0x114>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00f      	beq.n	80094ec <TIM_Base_SetConfig+0xf8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a12      	ldr	r2, [pc, #72]	; (8009518 <TIM_Base_SetConfig+0x124>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00b      	beq.n	80094ec <TIM_Base_SetConfig+0xf8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a11      	ldr	r2, [pc, #68]	; (800951c <TIM_Base_SetConfig+0x128>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d007      	beq.n	80094ec <TIM_Base_SetConfig+0xf8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a10      	ldr	r2, [pc, #64]	; (8009520 <TIM_Base_SetConfig+0x12c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d003      	beq.n	80094ec <TIM_Base_SetConfig+0xf8>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a0f      	ldr	r2, [pc, #60]	; (8009524 <TIM_Base_SetConfig+0x130>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d103      	bne.n	80094f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	615a      	str	r2, [r3, #20]
}
 80094fa:	bf00      	nop
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40010000 	.word	0x40010000
 800950c:	40000400 	.word	0x40000400
 8009510:	40000800 	.word	0x40000800
 8009514:	40000c00 	.word	0x40000c00
 8009518:	40010400 	.word	0x40010400
 800951c:	40014000 	.word	0x40014000
 8009520:	40014400 	.word	0x40014400
 8009524:	40014800 	.word	0x40014800

08009528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d101      	bne.n	8009540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800953c:	2302      	movs	r3, #2
 800953e:	e068      	b.n	8009612 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2e      	ldr	r2, [pc, #184]	; (8009620 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d004      	beq.n	8009574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a2d      	ldr	r2, [pc, #180]	; (8009624 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d108      	bne.n	8009586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800957a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800958c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	4313      	orrs	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d01d      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b2:	d018      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a1b      	ldr	r2, [pc, #108]	; (8009628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d013      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a1a      	ldr	r2, [pc, #104]	; (800962c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d00e      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a18      	ldr	r2, [pc, #96]	; (8009630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d009      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a13      	ldr	r2, [pc, #76]	; (8009624 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d004      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a14      	ldr	r2, [pc, #80]	; (8009634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d10c      	bne.n	8009600 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40010000 	.word	0x40010000
 8009624:	40010400 	.word	0x40010400
 8009628:	40000400 	.word	0x40000400
 800962c:	40000800 	.word	0x40000800
 8009630:	40000c00 	.word	0x40000c00
 8009634:	40001800 	.word	0x40001800

08009638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e042      	b.n	800970c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7f8 fa17 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2224      	movs	r2, #36	; 0x24
 80096a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fc3a 	bl	8009f30 <UART_SetConfig>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d101      	bne.n	80096c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e022      	b.n	800970c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fdac 	bl	800c22c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f002 fe33 	bl	800c370 <UART_CheckIdleState>
 800970a:	4603      	mov	r3, r0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800972a:	2b20      	cmp	r3, #32
 800972c:	f040 8083 	bne.w	8009836 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <HAL_UART_Transmit+0x28>
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e07b      	b.n	8009838 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_UART_Transmit+0x3a>
 800974a:	2302      	movs	r3, #2
 800974c:	e074      	b.n	8009838 <HAL_UART_Transmit+0x124>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009766:	f7f8 fd33 	bl	80021d0 <HAL_GetTick>
 800976a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	88fa      	ldrh	r2, [r7, #6]
 8009778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009784:	d108      	bne.n	8009798 <HAL_UART_Transmit+0x84>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	61bb      	str	r3, [r7, #24]
 8009796:	e003      	b.n	80097a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097a0:	e02c      	b.n	80097fc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2200      	movs	r2, #0
 80097aa:	2180      	movs	r1, #128	; 0x80
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f002 fe27 	bl	800c400 <UART_WaitOnFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e03d      	b.n	8009838 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10b      	bne.n	80097da <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	461a      	mov	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	3302      	adds	r3, #2
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	e007      	b.n	80097ea <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	3301      	adds	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	3b01      	subs	r3, #1
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1cc      	bne.n	80097a2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2200      	movs	r2, #0
 8009810:	2140      	movs	r1, #64	; 0x40
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f002 fdf4 	bl	800c400 <UART_WaitOnFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e00a      	b.n	8009838 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e000      	b.n	8009838 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009836:	2302      	movs	r3, #2
  }
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009854:	2b20      	cmp	r3, #32
 8009856:	d168      	bne.n	800992a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_UART_Transmit_IT+0x24>
 800985e:	88fb      	ldrh	r3, [r7, #6]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e061      	b.n	800992c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_UART_Transmit_IT+0x36>
 8009872:	2302      	movs	r3, #2
 8009874:	e05a      	b.n	800992c <HAL_UART_Transmit_IT+0xec>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	88fa      	ldrh	r2, [r7, #6]
 8009888:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	88fa      	ldrh	r2, [r7, #6]
 8009890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2221      	movs	r2, #33	; 0x21
 80098a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b2:	d11c      	bne.n	80098ee <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098bc:	d107      	bne.n	80098ce <HAL_UART_Transmit_IT+0x8e>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4a1b      	ldr	r2, [pc, #108]	; (8009938 <HAL_UART_Transmit_IT+0xf8>)
 80098ca:	671a      	str	r2, [r3, #112]	; 0x70
 80098cc:	e002      	b.n	80098d4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4a1a      	ldr	r2, [pc, #104]	; (800993c <HAL_UART_Transmit_IT+0xfc>)
 80098d2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	e01b      	b.n	8009926 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f6:	d107      	bne.n	8009908 <HAL_UART_Transmit_IT+0xc8>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d103      	bne.n	8009908 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a0f      	ldr	r2, [pc, #60]	; (8009940 <HAL_UART_Transmit_IT+0x100>)
 8009904:	671a      	str	r2, [r3, #112]	; 0x70
 8009906:	e002      	b.n	800990e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4a0e      	ldr	r2, [pc, #56]	; (8009944 <HAL_UART_Transmit_IT+0x104>)
 800990c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009924:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	e000      	b.n	800992c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800992a:	2302      	movs	r3, #2
  }
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	0800c83f 	.word	0x0800c83f
 800993c:	0800c7a5 	.word	0x0800c7a5
 8009940:	0800c727 	.word	0x0800c727
 8009944:	0800c6b3 	.word	0x0800c6b3

08009948 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995c:	2b20      	cmp	r3, #32
 800995e:	f040 80bc 	bne.w	8009ada <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <HAL_UART_Receive_IT+0x26>
 8009968:	88fb      	ldrh	r3, [r7, #6]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e0b4      	b.n	8009adc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_UART_Receive_IT+0x38>
 800997c:	2302      	movs	r3, #2
 800997e:	e0ad      	b.n	8009adc <HAL_UART_Receive_IT+0x194>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	88fa      	ldrh	r2, [r7, #6]
 8009992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	88fa      	ldrh	r2, [r7, #6]
 800999a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ac:	d10e      	bne.n	80099cc <HAL_UART_Receive_IT+0x84>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <HAL_UART_Receive_IT+0x7a>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80099bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099c0:	e02d      	b.n	8009a1e <HAL_UART_Receive_IT+0xd6>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	22ff      	movs	r2, #255	; 0xff
 80099c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099ca:	e028      	b.n	8009a1e <HAL_UART_Receive_IT+0xd6>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10d      	bne.n	80099f0 <HAL_UART_Receive_IT+0xa8>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <HAL_UART_Receive_IT+0x9e>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	22ff      	movs	r2, #255	; 0xff
 80099e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099e4:	e01b      	b.n	8009a1e <HAL_UART_Receive_IT+0xd6>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	227f      	movs	r2, #127	; 0x7f
 80099ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099ee:	e016      	b.n	8009a1e <HAL_UART_Receive_IT+0xd6>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099f8:	d10d      	bne.n	8009a16 <HAL_UART_Receive_IT+0xce>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <HAL_UART_Receive_IT+0xc4>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	227f      	movs	r2, #127	; 0x7f
 8009a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a0a:	e008      	b.n	8009a1e <HAL_UART_Receive_IT+0xd6>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	223f      	movs	r2, #63	; 0x3f
 8009a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a14:	e003      	b.n	8009a1e <HAL_UART_Receive_IT+0xd6>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2222      	movs	r2, #34	; 0x22
 8009a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a46:	d12a      	bne.n	8009a9e <HAL_UART_Receive_IT+0x156>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a4e:	88fa      	ldrh	r2, [r7, #6]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d324      	bcc.n	8009a9e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5c:	d107      	bne.n	8009a6e <HAL_UART_Receive_IT+0x126>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <HAL_UART_Receive_IT+0x1a0>)
 8009a6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a6c:	e002      	b.n	8009a74 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <HAL_UART_Receive_IT+0x1a4>)
 8009a72:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a8a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689a      	ldr	r2, [r3, #8]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009a9a:	609a      	str	r2, [r3, #8]
 8009a9c:	e01b      	b.n	8009ad6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa6:	d107      	bne.n	8009ab8 <HAL_UART_Receive_IT+0x170>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <HAL_UART_Receive_IT+0x1a8>)
 8009ab4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ab6:	e002      	b.n	8009abe <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4a0e      	ldr	r2, [pc, #56]	; (8009af4 <HAL_UART_Receive_IT+0x1ac>)
 8009abc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009ad4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e000      	b.n	8009adc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009ada:	2302      	movs	r3, #2
  }
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	0800cb75 	.word	0x0800cb75
 8009aec:	0800ca6d 	.word	0x0800ca6d
 8009af0:	0800c9c1 	.word	0x0800c9c1
 8009af4:	0800c917 	.word	0x0800c917

08009af8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	4613      	mov	r3, r2
 8009b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d170      	bne.n	8009bf2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <HAL_UART_Receive_DMA+0x24>
 8009b16:	88fb      	ldrh	r3, [r7, #6]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e069      	b.n	8009bf4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UART_Receive_DMA+0x36>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e062      	b.n	8009bf4 <HAL_UART_Receive_DMA+0xfc>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	88fa      	ldrh	r2, [r7, #6]
 8009b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2222      	movs	r2, #34	; 0x22
 8009b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02c      	beq.n	8009bb6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b60:	4a26      	ldr	r2, [pc, #152]	; (8009bfc <HAL_UART_Receive_DMA+0x104>)
 8009b62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b68:	4a25      	ldr	r2, [pc, #148]	; (8009c00 <HAL_UART_Receive_DMA+0x108>)
 8009b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b70:	4a24      	ldr	r2, [pc, #144]	; (8009c04 <HAL_UART_Receive_DMA+0x10c>)
 8009b72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b78:	2200      	movs	r2, #0
 8009b7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	4619      	mov	r1, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	f7fa faa4 	bl	80040dc <HAL_DMA_Start_IT>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00d      	beq.n	8009bb6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2210      	movs	r2, #16
 8009b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e01e      	b.n	8009bf4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bcc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f042 0201 	orr.w	r2, r2, #1
 8009bdc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bec:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e000      	b.n	8009bf4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009bf2:	2302      	movs	r3, #2
  }
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	0800c585 	.word	0x0800c585
 8009c00:	0800c5eb 	.word	0x0800c5eb
 8009c04:	0800c607 	.word	0x0800c607

08009c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c2e:	4013      	ands	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d118      	bne.n	8009c6a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d013      	beq.n	8009c6a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	f003 0320 	and.w	r3, r3, #32
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d104      	bne.n	8009c56 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d009      	beq.n	8009c6a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 8145 	beq.w	8009eea <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	4798      	blx	r3
      }
      return;
 8009c68:	e13f      	b.n	8009eea <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80e8 	beq.w	8009e42 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4ba1      	ldr	r3, [pc, #644]	; (8009efc <HAL_UART_IRQHandler+0x2f4>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d105      	bne.n	8009c88 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	4ba0      	ldr	r3, [pc, #640]	; (8009f00 <HAL_UART_IRQHandler+0x2f8>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 80dd 	beq.w	8009e42 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d010      	beq.n	8009cb4 <HAL_UART_IRQHandler+0xac>
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009caa:	f043 0201 	orr.w	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d010      	beq.n	8009ce0 <HAL_UART_IRQHandler+0xd8>
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd6:	f043 0204 	orr.w	r2, r3, #4
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d010      	beq.n	8009d0c <HAL_UART_IRQHandler+0x104>
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2204      	movs	r2, #4
 8009cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	f043 0202 	orr.w	r2, r3, #2
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d015      	beq.n	8009d42 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f003 0320 	and.w	r3, r3, #32
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d104      	bne.n	8009d2a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	4b76      	ldr	r3, [pc, #472]	; (8009efc <HAL_UART_IRQHandler+0x2f4>)
 8009d24:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2208      	movs	r2, #8
 8009d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d38:	f043 0208 	orr.w	r2, r3, #8
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d011      	beq.n	8009d70 <HAL_UART_IRQHandler+0x168>
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00c      	beq.n	8009d70 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d66:	f043 0220 	orr.w	r2, r3, #32
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80b9 	beq.w	8009eee <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d011      	beq.n	8009daa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbc:	2b40      	cmp	r3, #64	; 0x40
 8009dbe:	d004      	beq.n	8009dca <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d031      	beq.n	8009e2e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f002 fbb6 	bl	800c53c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dda:	2b40      	cmp	r3, #64	; 0x40
 8009ddc:	d123      	bne.n	8009e26 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d013      	beq.n	8009e1e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dfa:	4a42      	ldr	r2, [pc, #264]	; (8009f04 <HAL_UART_IRQHandler+0x2fc>)
 8009dfc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fa fbd4 	bl	80045b0 <HAL_DMA_Abort_IT>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d017      	beq.n	8009e3e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e1c:	e00f      	b.n	8009e3e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f87c 	bl	8009f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e24:	e00b      	b.n	8009e3e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f878 	bl	8009f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2c:	e007      	b.n	8009e3e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f874 	bl	8009f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009e3c:	e057      	b.n	8009eee <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e3e:	bf00      	nop
    return;
 8009e40:	e055      	b.n	8009eee <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00d      	beq.n	8009e68 <HAL_UART_IRQHandler+0x260>
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d008      	beq.n	8009e68 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f002 ff0b 	bl	800cc7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e66:	e045      	b.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d012      	beq.n	8009e98 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d104      	bne.n	8009e86 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d031      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
    }
    return;
 8009e96:	e02c      	b.n	8009ef2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d008      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x2ac>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f002 fd18 	bl	800c8e2 <UART_EndTransmit_IT>
    return;
 8009eb2:	e01f      	b.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d008      	beq.n	8009ed0 <HAL_UART_IRQHandler+0x2c8>
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f002 feeb 	bl	800cca4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ece:	e011      	b.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00c      	beq.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da09      	bge.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f002 fed5 	bl	800cc90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ee6:	bf00      	nop
 8009ee8:	e004      	b.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009eea:	bf00      	nop
 8009eec:	e002      	b.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009eee:	bf00      	nop
 8009ef0:	e000      	b.n	8009ef4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009ef2:	bf00      	nop
  }
}
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	10000001 	.word	0x10000001
 8009f00:	04000120 	.word	0x04000120
 8009f04:	0800c687 	.word	0x0800c687

08009f08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f30:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009f34:	b090      	sub	sp, #64	; 0x40
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	431a      	orrs	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f66:	4313      	orrs	r3, r2
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	4bc1      	ldr	r3, [pc, #772]	; (800a278 <UART_SetConfig+0x348>)
 8009f72:	4013      	ands	r3, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4ab7      	ldr	r2, [pc, #732]	; (800a27c <UART_SetConfig+0x34c>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d004      	beq.n	8009fae <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009faa:	4313      	orrs	r3, r2
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	4bb2      	ldr	r3, [pc, #712]	; (800a280 <UART_SetConfig+0x350>)
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6812      	ldr	r2, [r2, #0]
 8009fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fbe:	430b      	orrs	r3, r1
 8009fc0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	f023 010f 	bic.w	r1, r3, #15
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4aa9      	ldr	r2, [pc, #676]	; (800a284 <UART_SetConfig+0x354>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d177      	bne.n	800a0d2 <UART_SetConfig+0x1a2>
 8009fe2:	4ba9      	ldr	r3, [pc, #676]	; (800a288 <UART_SetConfig+0x358>)
 8009fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fea:	2b28      	cmp	r3, #40	; 0x28
 8009fec:	d86c      	bhi.n	800a0c8 <UART_SetConfig+0x198>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0xc4>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a099 	.word	0x0800a099
 8009ff8:	0800a0c9 	.word	0x0800a0c9
 8009ffc:	0800a0c9 	.word	0x0800a0c9
 800a000:	0800a0c9 	.word	0x0800a0c9
 800a004:	0800a0c9 	.word	0x0800a0c9
 800a008:	0800a0c9 	.word	0x0800a0c9
 800a00c:	0800a0c9 	.word	0x0800a0c9
 800a010:	0800a0c9 	.word	0x0800a0c9
 800a014:	0800a0a1 	.word	0x0800a0a1
 800a018:	0800a0c9 	.word	0x0800a0c9
 800a01c:	0800a0c9 	.word	0x0800a0c9
 800a020:	0800a0c9 	.word	0x0800a0c9
 800a024:	0800a0c9 	.word	0x0800a0c9
 800a028:	0800a0c9 	.word	0x0800a0c9
 800a02c:	0800a0c9 	.word	0x0800a0c9
 800a030:	0800a0c9 	.word	0x0800a0c9
 800a034:	0800a0a9 	.word	0x0800a0a9
 800a038:	0800a0c9 	.word	0x0800a0c9
 800a03c:	0800a0c9 	.word	0x0800a0c9
 800a040:	0800a0c9 	.word	0x0800a0c9
 800a044:	0800a0c9 	.word	0x0800a0c9
 800a048:	0800a0c9 	.word	0x0800a0c9
 800a04c:	0800a0c9 	.word	0x0800a0c9
 800a050:	0800a0c9 	.word	0x0800a0c9
 800a054:	0800a0b1 	.word	0x0800a0b1
 800a058:	0800a0c9 	.word	0x0800a0c9
 800a05c:	0800a0c9 	.word	0x0800a0c9
 800a060:	0800a0c9 	.word	0x0800a0c9
 800a064:	0800a0c9 	.word	0x0800a0c9
 800a068:	0800a0c9 	.word	0x0800a0c9
 800a06c:	0800a0c9 	.word	0x0800a0c9
 800a070:	0800a0c9 	.word	0x0800a0c9
 800a074:	0800a0b9 	.word	0x0800a0b9
 800a078:	0800a0c9 	.word	0x0800a0c9
 800a07c:	0800a0c9 	.word	0x0800a0c9
 800a080:	0800a0c9 	.word	0x0800a0c9
 800a084:	0800a0c9 	.word	0x0800a0c9
 800a088:	0800a0c9 	.word	0x0800a0c9
 800a08c:	0800a0c9 	.word	0x0800a0c9
 800a090:	0800a0c9 	.word	0x0800a0c9
 800a094:	0800a0c1 	.word	0x0800a0c1
 800a098:	2301      	movs	r3, #1
 800a09a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a09e:	e233      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0a6:	e22f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ae:	e22b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0b6:	e227      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0be:	e223      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0c0:	2340      	movs	r3, #64	; 0x40
 800a0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0c6:	e21f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0c8:	2380      	movs	r3, #128	; 0x80
 800a0ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ce:	bf00      	nop
 800a0d0:	e21a      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a6d      	ldr	r2, [pc, #436]	; (800a28c <UART_SetConfig+0x35c>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d132      	bne.n	800a142 <UART_SetConfig+0x212>
 800a0dc:	4b6a      	ldr	r3, [pc, #424]	; (800a288 <UART_SetConfig+0x358>)
 800a0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e0:	f003 0307 	and.w	r3, r3, #7
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d827      	bhi.n	800a138 <UART_SetConfig+0x208>
 800a0e8:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <UART_SetConfig+0x1c0>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a109 	.word	0x0800a109
 800a0f4:	0800a111 	.word	0x0800a111
 800a0f8:	0800a119 	.word	0x0800a119
 800a0fc:	0800a121 	.word	0x0800a121
 800a100:	0800a129 	.word	0x0800a129
 800a104:	0800a131 	.word	0x0800a131
 800a108:	2300      	movs	r3, #0
 800a10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a10e:	e1fb      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a110:	2304      	movs	r3, #4
 800a112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a116:	e1f7      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a118:	2308      	movs	r3, #8
 800a11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a11e:	e1f3      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a120:	2310      	movs	r3, #16
 800a122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a126:	e1ef      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a128:	2320      	movs	r3, #32
 800a12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a12e:	e1eb      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a136:	e1e7      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a138:	2380      	movs	r3, #128	; 0x80
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a13e:	bf00      	nop
 800a140:	e1e2      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a52      	ldr	r2, [pc, #328]	; (800a290 <UART_SetConfig+0x360>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d132      	bne.n	800a1b2 <UART_SetConfig+0x282>
 800a14c:	4b4e      	ldr	r3, [pc, #312]	; (800a288 <UART_SetConfig+0x358>)
 800a14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a150:	f003 0307 	and.w	r3, r3, #7
 800a154:	2b05      	cmp	r3, #5
 800a156:	d827      	bhi.n	800a1a8 <UART_SetConfig+0x278>
 800a158:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0x230>)
 800a15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15e:	bf00      	nop
 800a160:	0800a179 	.word	0x0800a179
 800a164:	0800a181 	.word	0x0800a181
 800a168:	0800a189 	.word	0x0800a189
 800a16c:	0800a191 	.word	0x0800a191
 800a170:	0800a199 	.word	0x0800a199
 800a174:	0800a1a1 	.word	0x0800a1a1
 800a178:	2300      	movs	r3, #0
 800a17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a17e:	e1c3      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a180:	2304      	movs	r3, #4
 800a182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a186:	e1bf      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a188:	2308      	movs	r3, #8
 800a18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a18e:	e1bb      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a190:	2310      	movs	r3, #16
 800a192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a196:	e1b7      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a198:	2320      	movs	r3, #32
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e1b3      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	e1af      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a1a8:	2380      	movs	r3, #128	; 0x80
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	bf00      	nop
 800a1b0:	e1aa      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a37      	ldr	r2, [pc, #220]	; (800a294 <UART_SetConfig+0x364>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d132      	bne.n	800a222 <UART_SetConfig+0x2f2>
 800a1bc:	4b32      	ldr	r3, [pc, #200]	; (800a288 <UART_SetConfig+0x358>)
 800a1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	2b05      	cmp	r3, #5
 800a1c6:	d827      	bhi.n	800a218 <UART_SetConfig+0x2e8>
 800a1c8:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <UART_SetConfig+0x2a0>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a1e9 	.word	0x0800a1e9
 800a1d4:	0800a1f1 	.word	0x0800a1f1
 800a1d8:	0800a1f9 	.word	0x0800a1f9
 800a1dc:	0800a201 	.word	0x0800a201
 800a1e0:	0800a209 	.word	0x0800a209
 800a1e4:	0800a211 	.word	0x0800a211
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ee:	e18b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1f6:	e187      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1fe:	e183      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a200:	2310      	movs	r3, #16
 800a202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a206:	e17f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a208:	2320      	movs	r3, #32
 800a20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20e:	e17b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a210:	2340      	movs	r3, #64	; 0x40
 800a212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a216:	e177      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a218:	2380      	movs	r3, #128	; 0x80
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	bf00      	nop
 800a220:	e172      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <UART_SetConfig+0x368>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d144      	bne.n	800a2b6 <UART_SetConfig+0x386>
 800a22c:	4b16      	ldr	r3, [pc, #88]	; (800a288 <UART_SetConfig+0x358>)
 800a22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a230:	f003 0307 	and.w	r3, r3, #7
 800a234:	2b05      	cmp	r3, #5
 800a236:	d839      	bhi.n	800a2ac <UART_SetConfig+0x37c>
 800a238:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <UART_SetConfig+0x310>)
 800a23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23e:	bf00      	nop
 800a240:	0800a259 	.word	0x0800a259
 800a244:	0800a261 	.word	0x0800a261
 800a248:	0800a269 	.word	0x0800a269
 800a24c:	0800a271 	.word	0x0800a271
 800a250:	0800a29d 	.word	0x0800a29d
 800a254:	0800a2a5 	.word	0x0800a2a5
 800a258:	2300      	movs	r3, #0
 800a25a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a25e:	e153      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a260:	2304      	movs	r3, #4
 800a262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a266:	e14f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a268:	2308      	movs	r3, #8
 800a26a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a26e:	e14b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a270:	2310      	movs	r3, #16
 800a272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a276:	e147      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a278:	cfff69f3 	.word	0xcfff69f3
 800a27c:	58000c00 	.word	0x58000c00
 800a280:	11fff4ff 	.word	0x11fff4ff
 800a284:	40011000 	.word	0x40011000
 800a288:	58024400 	.word	0x58024400
 800a28c:	40004400 	.word	0x40004400
 800a290:	40004800 	.word	0x40004800
 800a294:	40004c00 	.word	0x40004c00
 800a298:	40005000 	.word	0x40005000
 800a29c:	2320      	movs	r3, #32
 800a29e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2a2:	e131      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a2a4:	2340      	movs	r3, #64	; 0x40
 800a2a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2aa:	e12d      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2b2:	bf00      	nop
 800a2b4:	e128      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4ac3      	ldr	r2, [pc, #780]	; (800a5c8 <UART_SetConfig+0x698>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d178      	bne.n	800a3b2 <UART_SetConfig+0x482>
 800a2c0:	4bc2      	ldr	r3, [pc, #776]	; (800a5cc <UART_SetConfig+0x69c>)
 800a2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2c8:	2b28      	cmp	r3, #40	; 0x28
 800a2ca:	d86d      	bhi.n	800a3a8 <UART_SetConfig+0x478>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <UART_SetConfig+0x3a4>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a379 	.word	0x0800a379
 800a2d8:	0800a3a9 	.word	0x0800a3a9
 800a2dc:	0800a3a9 	.word	0x0800a3a9
 800a2e0:	0800a3a9 	.word	0x0800a3a9
 800a2e4:	0800a3a9 	.word	0x0800a3a9
 800a2e8:	0800a3a9 	.word	0x0800a3a9
 800a2ec:	0800a3a9 	.word	0x0800a3a9
 800a2f0:	0800a3a9 	.word	0x0800a3a9
 800a2f4:	0800a381 	.word	0x0800a381
 800a2f8:	0800a3a9 	.word	0x0800a3a9
 800a2fc:	0800a3a9 	.word	0x0800a3a9
 800a300:	0800a3a9 	.word	0x0800a3a9
 800a304:	0800a3a9 	.word	0x0800a3a9
 800a308:	0800a3a9 	.word	0x0800a3a9
 800a30c:	0800a3a9 	.word	0x0800a3a9
 800a310:	0800a3a9 	.word	0x0800a3a9
 800a314:	0800a389 	.word	0x0800a389
 800a318:	0800a3a9 	.word	0x0800a3a9
 800a31c:	0800a3a9 	.word	0x0800a3a9
 800a320:	0800a3a9 	.word	0x0800a3a9
 800a324:	0800a3a9 	.word	0x0800a3a9
 800a328:	0800a3a9 	.word	0x0800a3a9
 800a32c:	0800a3a9 	.word	0x0800a3a9
 800a330:	0800a3a9 	.word	0x0800a3a9
 800a334:	0800a391 	.word	0x0800a391
 800a338:	0800a3a9 	.word	0x0800a3a9
 800a33c:	0800a3a9 	.word	0x0800a3a9
 800a340:	0800a3a9 	.word	0x0800a3a9
 800a344:	0800a3a9 	.word	0x0800a3a9
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	0800a3a9 	.word	0x0800a3a9
 800a350:	0800a3a9 	.word	0x0800a3a9
 800a354:	0800a399 	.word	0x0800a399
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	0800a3a9 	.word	0x0800a3a9
 800a360:	0800a3a9 	.word	0x0800a3a9
 800a364:	0800a3a9 	.word	0x0800a3a9
 800a368:	0800a3a9 	.word	0x0800a3a9
 800a36c:	0800a3a9 	.word	0x0800a3a9
 800a370:	0800a3a9 	.word	0x0800a3a9
 800a374:	0800a3a1 	.word	0x0800a3a1
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a37e:	e0c3      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a380:	2304      	movs	r3, #4
 800a382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a386:	e0bf      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a388:	2308      	movs	r3, #8
 800a38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a38e:	e0bb      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a390:	2310      	movs	r3, #16
 800a392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a396:	e0b7      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a398:	2320      	movs	r3, #32
 800a39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a39e:	e0b3      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a3a0:	2340      	movs	r3, #64	; 0x40
 800a3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	e0af      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a3a8:	2380      	movs	r3, #128	; 0x80
 800a3aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ae:	bf00      	nop
 800a3b0:	e0aa      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a86      	ldr	r2, [pc, #536]	; (800a5d0 <UART_SetConfig+0x6a0>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d132      	bne.n	800a422 <UART_SetConfig+0x4f2>
 800a3bc:	4b83      	ldr	r3, [pc, #524]	; (800a5cc <UART_SetConfig+0x69c>)
 800a3be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	2b05      	cmp	r3, #5
 800a3c6:	d827      	bhi.n	800a418 <UART_SetConfig+0x4e8>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <UART_SetConfig+0x4a0>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a3e9 	.word	0x0800a3e9
 800a3d4:	0800a3f1 	.word	0x0800a3f1
 800a3d8:	0800a3f9 	.word	0x0800a3f9
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a409 	.word	0x0800a409
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ee:	e08b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3f6:	e087      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3fe:	e083      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a400:	2310      	movs	r3, #16
 800a402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a406:	e07f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a408:	2320      	movs	r3, #32
 800a40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a40e:	e07b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a410:	2340      	movs	r3, #64	; 0x40
 800a412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a416:	e077      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a418:	2380      	movs	r3, #128	; 0x80
 800a41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a41e:	bf00      	nop
 800a420:	e072      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a6b      	ldr	r2, [pc, #428]	; (800a5d4 <UART_SetConfig+0x6a4>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d132      	bne.n	800a492 <UART_SetConfig+0x562>
 800a42c:	4b67      	ldr	r3, [pc, #412]	; (800a5cc <UART_SetConfig+0x69c>)
 800a42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	2b05      	cmp	r3, #5
 800a436:	d827      	bhi.n	800a488 <UART_SetConfig+0x558>
 800a438:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <UART_SetConfig+0x510>)
 800a43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43e:	bf00      	nop
 800a440:	0800a459 	.word	0x0800a459
 800a444:	0800a461 	.word	0x0800a461
 800a448:	0800a469 	.word	0x0800a469
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a479 	.word	0x0800a479
 800a454:	0800a481 	.word	0x0800a481
 800a458:	2300      	movs	r3, #0
 800a45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a45e:	e053      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a460:	2304      	movs	r3, #4
 800a462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a466:	e04f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a468:	2308      	movs	r3, #8
 800a46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a46e:	e04b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a470:	2310      	movs	r3, #16
 800a472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a476:	e047      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a478:	2320      	movs	r3, #32
 800a47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a47e:	e043      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a486:	e03f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a48e:	bf00      	nop
 800a490:	e03a      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a50      	ldr	r2, [pc, #320]	; (800a5d8 <UART_SetConfig+0x6a8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d132      	bne.n	800a502 <UART_SetConfig+0x5d2>
 800a49c:	4b4b      	ldr	r3, [pc, #300]	; (800a5cc <UART_SetConfig+0x69c>)
 800a49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	2b05      	cmp	r3, #5
 800a4a6:	d827      	bhi.n	800a4f8 <UART_SetConfig+0x5c8>
 800a4a8:	a201      	add	r2, pc, #4	; (adr r2, 800a4b0 <UART_SetConfig+0x580>)
 800a4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ae:	bf00      	nop
 800a4b0:	0800a4c9 	.word	0x0800a4c9
 800a4b4:	0800a4d1 	.word	0x0800a4d1
 800a4b8:	0800a4d9 	.word	0x0800a4d9
 800a4bc:	0800a4e1 	.word	0x0800a4e1
 800a4c0:	0800a4e9 	.word	0x0800a4e9
 800a4c4:	0800a4f1 	.word	0x0800a4f1
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ce:	e01b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a4d0:	2304      	movs	r3, #4
 800a4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4d6:	e017      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a4d8:	2308      	movs	r3, #8
 800a4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4de:	e013      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4e6:	e00f      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a4e8:	2320      	movs	r3, #32
 800a4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ee:	e00b      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4f6:	e007      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a4f8:	2380      	movs	r3, #128	; 0x80
 800a4fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4fe:	bf00      	nop
 800a500:	e002      	b.n	800a508 <UART_SetConfig+0x5d8>
 800a502:	2380      	movs	r3, #128	; 0x80
 800a504:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a32      	ldr	r2, [pc, #200]	; (800a5d8 <UART_SetConfig+0x6a8>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	f040 86f7 	bne.w	800b302 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a514:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a518:	2b08      	cmp	r3, #8
 800a51a:	f000 80c0 	beq.w	800a69e <UART_SetConfig+0x76e>
 800a51e:	2b08      	cmp	r3, #8
 800a520:	dc04      	bgt.n	800a52c <UART_SetConfig+0x5fc>
 800a522:	2b02      	cmp	r3, #2
 800a524:	d00c      	beq.n	800a540 <UART_SetConfig+0x610>
 800a526:	2b04      	cmp	r3, #4
 800a528:	d065      	beq.n	800a5f6 <UART_SetConfig+0x6c6>
 800a52a:	e27a      	b.n	800aa22 <UART_SetConfig+0xaf2>
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	f000 81b0 	beq.w	800a892 <UART_SetConfig+0x962>
 800a532:	2b40      	cmp	r3, #64	; 0x40
 800a534:	f000 821e 	beq.w	800a974 <UART_SetConfig+0xa44>
 800a538:	2b10      	cmp	r3, #16
 800a53a:	f000 8104 	beq.w	800a746 <UART_SetConfig+0x816>
 800a53e:	e270      	b.n	800aa22 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a540:	f7fe f85c 	bl	80085fc <HAL_RCCEx_GetD3PCLK1Freq>
 800a544:	4602      	mov	r2, r0
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d04e      	beq.n	800a5ec <UART_SetConfig+0x6bc>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b01      	cmp	r3, #1
 800a554:	d048      	beq.n	800a5e8 <UART_SetConfig+0x6b8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d042      	beq.n	800a5e4 <UART_SetConfig+0x6b4>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b03      	cmp	r3, #3
 800a564:	d03c      	beq.n	800a5e0 <UART_SetConfig+0x6b0>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d036      	beq.n	800a5dc <UART_SetConfig+0x6ac>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b05      	cmp	r3, #5
 800a574:	d026      	beq.n	800a5c4 <UART_SetConfig+0x694>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b06      	cmp	r3, #6
 800a57c:	d020      	beq.n	800a5c0 <UART_SetConfig+0x690>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	2b07      	cmp	r3, #7
 800a584:	d01a      	beq.n	800a5bc <UART_SetConfig+0x68c>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d014      	beq.n	800a5b8 <UART_SetConfig+0x688>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	2b09      	cmp	r3, #9
 800a594:	d00e      	beq.n	800a5b4 <UART_SetConfig+0x684>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	2b0a      	cmp	r3, #10
 800a59c:	d008      	beq.n	800a5b0 <UART_SetConfig+0x680>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	2b0b      	cmp	r3, #11
 800a5a4:	d102      	bne.n	800a5ac <UART_SetConfig+0x67c>
 800a5a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5aa:	e020      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e01e      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5b0:	2380      	movs	r3, #128	; 0x80
 800a5b2:	e01c      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5b4:	2340      	movs	r3, #64	; 0x40
 800a5b6:	e01a      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5b8:	2320      	movs	r3, #32
 800a5ba:	e018      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	e016      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5c0:	230c      	movs	r3, #12
 800a5c2:	e014      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5c4:	230a      	movs	r3, #10
 800a5c6:	e012      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5c8:	40011400 	.word	0x40011400
 800a5cc:	58024400 	.word	0x58024400
 800a5d0:	40007800 	.word	0x40007800
 800a5d4:	40007c00 	.word	0x40007c00
 800a5d8:	58000c00 	.word	0x58000c00
 800a5dc:	2308      	movs	r3, #8
 800a5de:	e006      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5e0:	2306      	movs	r3, #6
 800a5e2:	e004      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	e002      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e000      	b.n	800a5ee <UART_SetConfig+0x6be>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5f4:	e219      	b.n	800aa2a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f6:	f107 0318 	add.w	r3, r7, #24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe f814 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	2b00      	cmp	r3, #0
 800a608:	d044      	beq.n	800a694 <UART_SetConfig+0x764>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d03e      	beq.n	800a690 <UART_SetConfig+0x760>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b02      	cmp	r3, #2
 800a618:	d038      	beq.n	800a68c <UART_SetConfig+0x75c>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d032      	beq.n	800a688 <UART_SetConfig+0x758>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b04      	cmp	r3, #4
 800a628:	d02c      	beq.n	800a684 <UART_SetConfig+0x754>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d026      	beq.n	800a680 <UART_SetConfig+0x750>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b06      	cmp	r3, #6
 800a638:	d020      	beq.n	800a67c <UART_SetConfig+0x74c>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	2b07      	cmp	r3, #7
 800a640:	d01a      	beq.n	800a678 <UART_SetConfig+0x748>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b08      	cmp	r3, #8
 800a648:	d014      	beq.n	800a674 <UART_SetConfig+0x744>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d00e      	beq.n	800a670 <UART_SetConfig+0x740>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b0a      	cmp	r3, #10
 800a658:	d008      	beq.n	800a66c <UART_SetConfig+0x73c>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b0b      	cmp	r3, #11
 800a660:	d102      	bne.n	800a668 <UART_SetConfig+0x738>
 800a662:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a666:	e016      	b.n	800a696 <UART_SetConfig+0x766>
 800a668:	2301      	movs	r3, #1
 800a66a:	e014      	b.n	800a696 <UART_SetConfig+0x766>
 800a66c:	2380      	movs	r3, #128	; 0x80
 800a66e:	e012      	b.n	800a696 <UART_SetConfig+0x766>
 800a670:	2340      	movs	r3, #64	; 0x40
 800a672:	e010      	b.n	800a696 <UART_SetConfig+0x766>
 800a674:	2320      	movs	r3, #32
 800a676:	e00e      	b.n	800a696 <UART_SetConfig+0x766>
 800a678:	2310      	movs	r3, #16
 800a67a:	e00c      	b.n	800a696 <UART_SetConfig+0x766>
 800a67c:	230c      	movs	r3, #12
 800a67e:	e00a      	b.n	800a696 <UART_SetConfig+0x766>
 800a680:	230a      	movs	r3, #10
 800a682:	e008      	b.n	800a696 <UART_SetConfig+0x766>
 800a684:	2308      	movs	r3, #8
 800a686:	e006      	b.n	800a696 <UART_SetConfig+0x766>
 800a688:	2306      	movs	r3, #6
 800a68a:	e004      	b.n	800a696 <UART_SetConfig+0x766>
 800a68c:	2304      	movs	r3, #4
 800a68e:	e002      	b.n	800a696 <UART_SetConfig+0x766>
 800a690:	2302      	movs	r3, #2
 800a692:	e000      	b.n	800a696 <UART_SetConfig+0x766>
 800a694:	2301      	movs	r3, #1
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a69c:	e1c5      	b.n	800aa2a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a69e:	f107 030c 	add.w	r3, r7, #12
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe f90c 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d044      	beq.n	800a73c <UART_SetConfig+0x80c>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d03e      	beq.n	800a738 <UART_SetConfig+0x808>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d038      	beq.n	800a734 <UART_SetConfig+0x804>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d032      	beq.n	800a730 <UART_SetConfig+0x800>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	d02c      	beq.n	800a72c <UART_SetConfig+0x7fc>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b05      	cmp	r3, #5
 800a6d8:	d026      	beq.n	800a728 <UART_SetConfig+0x7f8>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b06      	cmp	r3, #6
 800a6e0:	d020      	beq.n	800a724 <UART_SetConfig+0x7f4>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b07      	cmp	r3, #7
 800a6e8:	d01a      	beq.n	800a720 <UART_SetConfig+0x7f0>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	2b08      	cmp	r3, #8
 800a6f0:	d014      	beq.n	800a71c <UART_SetConfig+0x7ec>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b09      	cmp	r3, #9
 800a6f8:	d00e      	beq.n	800a718 <UART_SetConfig+0x7e8>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b0a      	cmp	r3, #10
 800a700:	d008      	beq.n	800a714 <UART_SetConfig+0x7e4>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b0b      	cmp	r3, #11
 800a708:	d102      	bne.n	800a710 <UART_SetConfig+0x7e0>
 800a70a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a70e:	e016      	b.n	800a73e <UART_SetConfig+0x80e>
 800a710:	2301      	movs	r3, #1
 800a712:	e014      	b.n	800a73e <UART_SetConfig+0x80e>
 800a714:	2380      	movs	r3, #128	; 0x80
 800a716:	e012      	b.n	800a73e <UART_SetConfig+0x80e>
 800a718:	2340      	movs	r3, #64	; 0x40
 800a71a:	e010      	b.n	800a73e <UART_SetConfig+0x80e>
 800a71c:	2320      	movs	r3, #32
 800a71e:	e00e      	b.n	800a73e <UART_SetConfig+0x80e>
 800a720:	2310      	movs	r3, #16
 800a722:	e00c      	b.n	800a73e <UART_SetConfig+0x80e>
 800a724:	230c      	movs	r3, #12
 800a726:	e00a      	b.n	800a73e <UART_SetConfig+0x80e>
 800a728:	230a      	movs	r3, #10
 800a72a:	e008      	b.n	800a73e <UART_SetConfig+0x80e>
 800a72c:	2308      	movs	r3, #8
 800a72e:	e006      	b.n	800a73e <UART_SetConfig+0x80e>
 800a730:	2306      	movs	r3, #6
 800a732:	e004      	b.n	800a73e <UART_SetConfig+0x80e>
 800a734:	2304      	movs	r3, #4
 800a736:	e002      	b.n	800a73e <UART_SetConfig+0x80e>
 800a738:	2302      	movs	r3, #2
 800a73a:	e000      	b.n	800a73e <UART_SetConfig+0x80e>
 800a73c:	2301      	movs	r3, #1
 800a73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a744:	e171      	b.n	800aa2a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a746:	4b7a      	ldr	r3, [pc, #488]	; (800a930 <UART_SetConfig+0xa00>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d054      	beq.n	800a7fc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a752:	4b77      	ldr	r3, [pc, #476]	; (800a930 <UART_SetConfig+0xa00>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	4a75      	ldr	r2, [pc, #468]	; (800a934 <UART_SetConfig+0xa04>)
 800a75e:	40da      	lsrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b00      	cmp	r3, #0
 800a766:	d044      	beq.n	800a7f2 <UART_SetConfig+0x8c2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d03e      	beq.n	800a7ee <UART_SetConfig+0x8be>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b02      	cmp	r3, #2
 800a776:	d038      	beq.n	800a7ea <UART_SetConfig+0x8ba>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d032      	beq.n	800a7e6 <UART_SetConfig+0x8b6>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b04      	cmp	r3, #4
 800a786:	d02c      	beq.n	800a7e2 <UART_SetConfig+0x8b2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b05      	cmp	r3, #5
 800a78e:	d026      	beq.n	800a7de <UART_SetConfig+0x8ae>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b06      	cmp	r3, #6
 800a796:	d020      	beq.n	800a7da <UART_SetConfig+0x8aa>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b07      	cmp	r3, #7
 800a79e:	d01a      	beq.n	800a7d6 <UART_SetConfig+0x8a6>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d014      	beq.n	800a7d2 <UART_SetConfig+0x8a2>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d00e      	beq.n	800a7ce <UART_SetConfig+0x89e>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b0a      	cmp	r3, #10
 800a7b6:	d008      	beq.n	800a7ca <UART_SetConfig+0x89a>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b0b      	cmp	r3, #11
 800a7be:	d102      	bne.n	800a7c6 <UART_SetConfig+0x896>
 800a7c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7c4:	e016      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e014      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7ca:	2380      	movs	r3, #128	; 0x80
 800a7cc:	e012      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7ce:	2340      	movs	r3, #64	; 0x40
 800a7d0:	e010      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7d2:	2320      	movs	r3, #32
 800a7d4:	e00e      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7d6:	2310      	movs	r3, #16
 800a7d8:	e00c      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7da:	230c      	movs	r3, #12
 800a7dc:	e00a      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7de:	230a      	movs	r3, #10
 800a7e0:	e008      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7e2:	2308      	movs	r3, #8
 800a7e4:	e006      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7e6:	2306      	movs	r3, #6
 800a7e8:	e004      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7ea:	2304      	movs	r3, #4
 800a7ec:	e002      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	e000      	b.n	800a7f4 <UART_SetConfig+0x8c4>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a7fa:	e116      	b.n	800aa2a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	2b00      	cmp	r3, #0
 800a802:	d043      	beq.n	800a88c <UART_SetConfig+0x95c>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d03d      	beq.n	800a888 <UART_SetConfig+0x958>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b02      	cmp	r3, #2
 800a812:	d037      	beq.n	800a884 <UART_SetConfig+0x954>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d031      	beq.n	800a880 <UART_SetConfig+0x950>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b04      	cmp	r3, #4
 800a822:	d02b      	beq.n	800a87c <UART_SetConfig+0x94c>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d025      	beq.n	800a878 <UART_SetConfig+0x948>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b06      	cmp	r3, #6
 800a832:	d01f      	beq.n	800a874 <UART_SetConfig+0x944>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	2b07      	cmp	r3, #7
 800a83a:	d019      	beq.n	800a870 <UART_SetConfig+0x940>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	2b08      	cmp	r3, #8
 800a842:	d013      	beq.n	800a86c <UART_SetConfig+0x93c>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	2b09      	cmp	r3, #9
 800a84a:	d00d      	beq.n	800a868 <UART_SetConfig+0x938>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2b0a      	cmp	r3, #10
 800a852:	d007      	beq.n	800a864 <UART_SetConfig+0x934>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	2b0b      	cmp	r3, #11
 800a85a:	d101      	bne.n	800a860 <UART_SetConfig+0x930>
 800a85c:	4b36      	ldr	r3, [pc, #216]	; (800a938 <UART_SetConfig+0xa08>)
 800a85e:	e016      	b.n	800a88e <UART_SetConfig+0x95e>
 800a860:	4b34      	ldr	r3, [pc, #208]	; (800a934 <UART_SetConfig+0xa04>)
 800a862:	e014      	b.n	800a88e <UART_SetConfig+0x95e>
 800a864:	4b35      	ldr	r3, [pc, #212]	; (800a93c <UART_SetConfig+0xa0c>)
 800a866:	e012      	b.n	800a88e <UART_SetConfig+0x95e>
 800a868:	4b35      	ldr	r3, [pc, #212]	; (800a940 <UART_SetConfig+0xa10>)
 800a86a:	e010      	b.n	800a88e <UART_SetConfig+0x95e>
 800a86c:	4b35      	ldr	r3, [pc, #212]	; (800a944 <UART_SetConfig+0xa14>)
 800a86e:	e00e      	b.n	800a88e <UART_SetConfig+0x95e>
 800a870:	4b35      	ldr	r3, [pc, #212]	; (800a948 <UART_SetConfig+0xa18>)
 800a872:	e00c      	b.n	800a88e <UART_SetConfig+0x95e>
 800a874:	4b35      	ldr	r3, [pc, #212]	; (800a94c <UART_SetConfig+0xa1c>)
 800a876:	e00a      	b.n	800a88e <UART_SetConfig+0x95e>
 800a878:	4b35      	ldr	r3, [pc, #212]	; (800a950 <UART_SetConfig+0xa20>)
 800a87a:	e008      	b.n	800a88e <UART_SetConfig+0x95e>
 800a87c:	4b35      	ldr	r3, [pc, #212]	; (800a954 <UART_SetConfig+0xa24>)
 800a87e:	e006      	b.n	800a88e <UART_SetConfig+0x95e>
 800a880:	4b35      	ldr	r3, [pc, #212]	; (800a958 <UART_SetConfig+0xa28>)
 800a882:	e004      	b.n	800a88e <UART_SetConfig+0x95e>
 800a884:	4b35      	ldr	r3, [pc, #212]	; (800a95c <UART_SetConfig+0xa2c>)
 800a886:	e002      	b.n	800a88e <UART_SetConfig+0x95e>
 800a888:	4b35      	ldr	r3, [pc, #212]	; (800a960 <UART_SetConfig+0xa30>)
 800a88a:	e000      	b.n	800a88e <UART_SetConfig+0x95e>
 800a88c:	4b29      	ldr	r3, [pc, #164]	; (800a934 <UART_SetConfig+0xa04>)
 800a88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a890:	e0cb      	b.n	800aa2a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d046      	beq.n	800a928 <UART_SetConfig+0x9f8>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d040      	beq.n	800a924 <UART_SetConfig+0x9f4>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d03a      	beq.n	800a920 <UART_SetConfig+0x9f0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d034      	beq.n	800a91c <UART_SetConfig+0x9ec>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d02e      	beq.n	800a918 <UART_SetConfig+0x9e8>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	d028      	beq.n	800a914 <UART_SetConfig+0x9e4>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b06      	cmp	r3, #6
 800a8c8:	d022      	beq.n	800a910 <UART_SetConfig+0x9e0>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b07      	cmp	r3, #7
 800a8d0:	d01c      	beq.n	800a90c <UART_SetConfig+0x9dc>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b08      	cmp	r3, #8
 800a8d8:	d016      	beq.n	800a908 <UART_SetConfig+0x9d8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b09      	cmp	r3, #9
 800a8e0:	d00f      	beq.n	800a902 <UART_SetConfig+0x9d2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b0a      	cmp	r3, #10
 800a8e8:	d008      	beq.n	800a8fc <UART_SetConfig+0x9cc>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2b0b      	cmp	r3, #11
 800a8f0:	d102      	bne.n	800a8f8 <UART_SetConfig+0x9c8>
 800a8f2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a8f6:	e018      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a8f8:	4b13      	ldr	r3, [pc, #76]	; (800a948 <UART_SetConfig+0xa18>)
 800a8fa:	e016      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a8fc:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a900:	e013      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a902:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a906:	e010      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a908:	4b16      	ldr	r3, [pc, #88]	; (800a964 <UART_SetConfig+0xa34>)
 800a90a:	e00e      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <UART_SetConfig+0xa08>)
 800a90e:	e00c      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a910:	4b15      	ldr	r3, [pc, #84]	; (800a968 <UART_SetConfig+0xa38>)
 800a912:	e00a      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a914:	4b15      	ldr	r3, [pc, #84]	; (800a96c <UART_SetConfig+0xa3c>)
 800a916:	e008      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a918:	4b08      	ldr	r3, [pc, #32]	; (800a93c <UART_SetConfig+0xa0c>)
 800a91a:	e006      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a91c:	4b14      	ldr	r3, [pc, #80]	; (800a970 <UART_SetConfig+0xa40>)
 800a91e:	e004      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <UART_SetConfig+0xa10>)
 800a922:	e002      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a924:	4b07      	ldr	r3, [pc, #28]	; (800a944 <UART_SetConfig+0xa14>)
 800a926:	e000      	b.n	800a92a <UART_SetConfig+0x9fa>
 800a928:	4b07      	ldr	r3, [pc, #28]	; (800a948 <UART_SetConfig+0xa18>)
 800a92a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a92c:	e07d      	b.n	800aa2a <UART_SetConfig+0xafa>
 800a92e:	bf00      	nop
 800a930:	58024400 	.word	0x58024400
 800a934:	03d09000 	.word	0x03d09000
 800a938:	0003d090 	.word	0x0003d090
 800a93c:	0007a120 	.word	0x0007a120
 800a940:	000f4240 	.word	0x000f4240
 800a944:	001e8480 	.word	0x001e8480
 800a948:	003d0900 	.word	0x003d0900
 800a94c:	00516155 	.word	0x00516155
 800a950:	0061a800 	.word	0x0061a800
 800a954:	007a1200 	.word	0x007a1200
 800a958:	00a2c2aa 	.word	0x00a2c2aa
 800a95c:	00f42400 	.word	0x00f42400
 800a960:	01e84800 	.word	0x01e84800
 800a964:	0001e848 	.word	0x0001e848
 800a968:	00051615 	.word	0x00051615
 800a96c:	00061a80 	.word	0x00061a80
 800a970:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d04e      	beq.n	800aa1a <UART_SetConfig+0xaea>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b01      	cmp	r3, #1
 800a982:	d047      	beq.n	800aa14 <UART_SetConfig+0xae4>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d040      	beq.n	800aa0e <UART_SetConfig+0xade>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b03      	cmp	r3, #3
 800a992:	d039      	beq.n	800aa08 <UART_SetConfig+0xad8>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d032      	beq.n	800aa02 <UART_SetConfig+0xad2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	2b05      	cmp	r3, #5
 800a9a2:	d02b      	beq.n	800a9fc <UART_SetConfig+0xacc>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b06      	cmp	r3, #6
 800a9aa:	d024      	beq.n	800a9f6 <UART_SetConfig+0xac6>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b07      	cmp	r3, #7
 800a9b2:	d01d      	beq.n	800a9f0 <UART_SetConfig+0xac0>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	d016      	beq.n	800a9ea <UART_SetConfig+0xaba>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	2b09      	cmp	r3, #9
 800a9c2:	d00f      	beq.n	800a9e4 <UART_SetConfig+0xab4>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b0a      	cmp	r3, #10
 800a9ca:	d008      	beq.n	800a9de <UART_SetConfig+0xaae>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b0b      	cmp	r3, #11
 800a9d2:	d101      	bne.n	800a9d8 <UART_SetConfig+0xaa8>
 800a9d4:	2380      	movs	r3, #128	; 0x80
 800a9d6:	e022      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9dc:	e01f      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9e2:	e01c      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9e8:	e019      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	e016      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9f4:	e013      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9f6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a9fa:	e010      	b.n	800aa1e <UART_SetConfig+0xaee>
 800a9fc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800aa00:	e00d      	b.n	800aa1e <UART_SetConfig+0xaee>
 800aa02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa06:	e00a      	b.n	800aa1e <UART_SetConfig+0xaee>
 800aa08:	f241 5355 	movw	r3, #5461	; 0x1555
 800aa0c:	e007      	b.n	800aa1e <UART_SetConfig+0xaee>
 800aa0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa12:	e004      	b.n	800aa1e <UART_SetConfig+0xaee>
 800aa14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa18:	e001      	b.n	800aa1e <UART_SetConfig+0xaee>
 800aa1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa20:	e003      	b.n	800aa2a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aa28:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f001 83e8 	beq.w	800c202 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	4613      	mov	r3, r2
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	4413      	add	r3, r2
 800aa3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d305      	bcc.n	800aa4e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d904      	bls.n	800aa58 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa54:	f001 bbd5 	b.w	800c202 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800aa58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	f000 8154 	beq.w	800ad0a <UART_SetConfig+0xdda>
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	dc06      	bgt.n	800aa74 <UART_SetConfig+0xb44>
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d00f      	beq.n	800aa8a <UART_SetConfig+0xb5a>
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	f000 80ac 	beq.w	800abc8 <UART_SetConfig+0xc98>
 800aa70:	f000 bc30 	b.w	800b2d4 <UART_SetConfig+0x13a4>
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	f000 832d 	beq.w	800b0d4 <UART_SetConfig+0x11a4>
 800aa7a:	2b40      	cmp	r3, #64	; 0x40
 800aa7c:	f000 83a5 	beq.w	800b1ca <UART_SetConfig+0x129a>
 800aa80:	2b10      	cmp	r3, #16
 800aa82:	f000 81e3 	beq.w	800ae4c <UART_SetConfig+0xf1c>
 800aa86:	f000 bc25 	b.w	800b2d4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa8a:	f7fd fdb7 	bl	80085fc <HAL_RCCEx_GetD3PCLK1Freq>
 800aa8e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	4618      	mov	r0, r3
 800aa94:	f04f 0100 	mov.w	r1, #0
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d067      	beq.n	800ab70 <UART_SetConfig+0xc40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d05e      	beq.n	800ab66 <UART_SetConfig+0xc36>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d055      	beq.n	800ab5c <UART_SetConfig+0xc2c>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d04c      	beq.n	800ab52 <UART_SetConfig+0xc22>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d043      	beq.n	800ab48 <UART_SetConfig+0xc18>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b05      	cmp	r3, #5
 800aac6:	d03a      	beq.n	800ab3e <UART_SetConfig+0xc0e>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b06      	cmp	r3, #6
 800aace:	d031      	beq.n	800ab34 <UART_SetConfig+0xc04>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b07      	cmp	r3, #7
 800aad6:	d028      	beq.n	800ab2a <UART_SetConfig+0xbfa>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d01f      	beq.n	800ab20 <UART_SetConfig+0xbf0>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	d016      	beq.n	800ab16 <UART_SetConfig+0xbe6>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	2b0a      	cmp	r3, #10
 800aaee:	d00d      	beq.n	800ab0c <UART_SetConfig+0xbdc>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	2b0b      	cmp	r3, #11
 800aaf6:	d104      	bne.n	800ab02 <UART_SetConfig+0xbd2>
 800aaf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aafc:	f04f 0400 	mov.w	r4, #0
 800ab00:	e03a      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab02:	f04f 0301 	mov.w	r3, #1
 800ab06:	f04f 0400 	mov.w	r4, #0
 800ab0a:	e035      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab10:	f04f 0400 	mov.w	r4, #0
 800ab14:	e030      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab16:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ab1a:	f04f 0400 	mov.w	r4, #0
 800ab1e:	e02b      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab20:	f04f 0320 	mov.w	r3, #32
 800ab24:	f04f 0400 	mov.w	r4, #0
 800ab28:	e026      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab2a:	f04f 0310 	mov.w	r3, #16
 800ab2e:	f04f 0400 	mov.w	r4, #0
 800ab32:	e021      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab34:	f04f 030c 	mov.w	r3, #12
 800ab38:	f04f 0400 	mov.w	r4, #0
 800ab3c:	e01c      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab3e:	f04f 030a 	mov.w	r3, #10
 800ab42:	f04f 0400 	mov.w	r4, #0
 800ab46:	e017      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab48:	f04f 0308 	mov.w	r3, #8
 800ab4c:	f04f 0400 	mov.w	r4, #0
 800ab50:	e012      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab52:	f04f 0306 	mov.w	r3, #6
 800ab56:	f04f 0400 	mov.w	r4, #0
 800ab5a:	e00d      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab5c:	f04f 0304 	mov.w	r3, #4
 800ab60:	f04f 0400 	mov.w	r4, #0
 800ab64:	e008      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab66:	f04f 0302 	mov.w	r3, #2
 800ab6a:	f04f 0400 	mov.w	r4, #0
 800ab6e:	e003      	b.n	800ab78 <UART_SetConfig+0xc48>
 800ab70:	f04f 0301 	mov.w	r3, #1
 800ab74:	f04f 0400 	mov.w	r4, #0
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	f7f5 fbac 	bl	80002d8 <__aeabi_uldivmod>
 800ab80:	4603      	mov	r3, r0
 800ab82:	460c      	mov	r4, r1
 800ab84:	4619      	mov	r1, r3
 800ab86:	4622      	mov	r2, r4
 800ab88:	f04f 0300 	mov.w	r3, #0
 800ab8c:	f04f 0400 	mov.w	r4, #0
 800ab90:	0214      	lsls	r4, r2, #8
 800ab92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ab96:	020b      	lsls	r3, r1, #8
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6852      	ldr	r2, [r2, #4]
 800ab9c:	0852      	lsrs	r2, r2, #1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	f04f 0200 	mov.w	r2, #0
 800aba4:	eb13 0b01 	adds.w	fp, r3, r1
 800aba8:	eb44 0c02 	adc.w	ip, r4, r2
 800abac:	4658      	mov	r0, fp
 800abae:	4661      	mov	r1, ip
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f04f 0400 	mov.w	r4, #0
 800abb8:	461a      	mov	r2, r3
 800abba:	4623      	mov	r3, r4
 800abbc:	f7f5 fb8c 	bl	80002d8 <__aeabi_uldivmod>
 800abc0:	4603      	mov	r3, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abc6:	e389      	b.n	800b2dc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc8:	f107 0318 	add.w	r3, r7, #24
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd fd2b 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f04f 0100 	mov.w	r1, #0
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d067      	beq.n	800acb2 <UART_SetConfig+0xd82>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d05e      	beq.n	800aca8 <UART_SetConfig+0xd78>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d055      	beq.n	800ac9e <UART_SetConfig+0xd6e>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d04c      	beq.n	800ac94 <UART_SetConfig+0xd64>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d043      	beq.n	800ac8a <UART_SetConfig+0xd5a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	d03a      	beq.n	800ac80 <UART_SetConfig+0xd50>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2b06      	cmp	r3, #6
 800ac10:	d031      	beq.n	800ac76 <UART_SetConfig+0xd46>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2b07      	cmp	r3, #7
 800ac18:	d028      	beq.n	800ac6c <UART_SetConfig+0xd3c>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b08      	cmp	r3, #8
 800ac20:	d01f      	beq.n	800ac62 <UART_SetConfig+0xd32>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d016      	beq.n	800ac58 <UART_SetConfig+0xd28>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b0a      	cmp	r3, #10
 800ac30:	d00d      	beq.n	800ac4e <UART_SetConfig+0xd1e>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b0b      	cmp	r3, #11
 800ac38:	d104      	bne.n	800ac44 <UART_SetConfig+0xd14>
 800ac3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac3e:	f04f 0400 	mov.w	r4, #0
 800ac42:	e03a      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac44:	f04f 0301 	mov.w	r3, #1
 800ac48:	f04f 0400 	mov.w	r4, #0
 800ac4c:	e035      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac4e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac52:	f04f 0400 	mov.w	r4, #0
 800ac56:	e030      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac58:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac5c:	f04f 0400 	mov.w	r4, #0
 800ac60:	e02b      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac62:	f04f 0320 	mov.w	r3, #32
 800ac66:	f04f 0400 	mov.w	r4, #0
 800ac6a:	e026      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac6c:	f04f 0310 	mov.w	r3, #16
 800ac70:	f04f 0400 	mov.w	r4, #0
 800ac74:	e021      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac76:	f04f 030c 	mov.w	r3, #12
 800ac7a:	f04f 0400 	mov.w	r4, #0
 800ac7e:	e01c      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac80:	f04f 030a 	mov.w	r3, #10
 800ac84:	f04f 0400 	mov.w	r4, #0
 800ac88:	e017      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac8a:	f04f 0308 	mov.w	r3, #8
 800ac8e:	f04f 0400 	mov.w	r4, #0
 800ac92:	e012      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac94:	f04f 0306 	mov.w	r3, #6
 800ac98:	f04f 0400 	mov.w	r4, #0
 800ac9c:	e00d      	b.n	800acba <UART_SetConfig+0xd8a>
 800ac9e:	f04f 0304 	mov.w	r3, #4
 800aca2:	f04f 0400 	mov.w	r4, #0
 800aca6:	e008      	b.n	800acba <UART_SetConfig+0xd8a>
 800aca8:	f04f 0302 	mov.w	r3, #2
 800acac:	f04f 0400 	mov.w	r4, #0
 800acb0:	e003      	b.n	800acba <UART_SetConfig+0xd8a>
 800acb2:	f04f 0301 	mov.w	r3, #1
 800acb6:	f04f 0400 	mov.w	r4, #0
 800acba:	461a      	mov	r2, r3
 800acbc:	4623      	mov	r3, r4
 800acbe:	f7f5 fb0b 	bl	80002d8 <__aeabi_uldivmod>
 800acc2:	4603      	mov	r3, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	4619      	mov	r1, r3
 800acc8:	4622      	mov	r2, r4
 800acca:	f04f 0300 	mov.w	r3, #0
 800acce:	f04f 0400 	mov.w	r4, #0
 800acd2:	0214      	lsls	r4, r2, #8
 800acd4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800acd8:	020b      	lsls	r3, r1, #8
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	6852      	ldr	r2, [r2, #4]
 800acde:	0852      	lsrs	r2, r2, #1
 800ace0:	4611      	mov	r1, r2
 800ace2:	f04f 0200 	mov.w	r2, #0
 800ace6:	eb13 0b01 	adds.w	fp, r3, r1
 800acea:	eb44 0c02 	adc.w	ip, r4, r2
 800acee:	4658      	mov	r0, fp
 800acf0:	4661      	mov	r1, ip
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f04f 0400 	mov.w	r4, #0
 800acfa:	461a      	mov	r2, r3
 800acfc:	4623      	mov	r3, r4
 800acfe:	f7f5 faeb 	bl	80002d8 <__aeabi_uldivmod>
 800ad02:	4603      	mov	r3, r0
 800ad04:	460c      	mov	r4, r1
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad08:	e2e8      	b.n	800b2dc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fd fdd6 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f04f 0100 	mov.w	r1, #0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d067      	beq.n	800adf4 <UART_SetConfig+0xec4>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d05e      	beq.n	800adea <UART_SetConfig+0xeba>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d055      	beq.n	800ade0 <UART_SetConfig+0xeb0>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d04c      	beq.n	800add6 <UART_SetConfig+0xea6>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d043      	beq.n	800adcc <UART_SetConfig+0xe9c>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	2b05      	cmp	r3, #5
 800ad4a:	d03a      	beq.n	800adc2 <UART_SetConfig+0xe92>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	2b06      	cmp	r3, #6
 800ad52:	d031      	beq.n	800adb8 <UART_SetConfig+0xe88>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	2b07      	cmp	r3, #7
 800ad5a:	d028      	beq.n	800adae <UART_SetConfig+0xe7e>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d01f      	beq.n	800ada4 <UART_SetConfig+0xe74>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	2b09      	cmp	r3, #9
 800ad6a:	d016      	beq.n	800ad9a <UART_SetConfig+0xe6a>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	2b0a      	cmp	r3, #10
 800ad72:	d00d      	beq.n	800ad90 <UART_SetConfig+0xe60>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	2b0b      	cmp	r3, #11
 800ad7a:	d104      	bne.n	800ad86 <UART_SetConfig+0xe56>
 800ad7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad80:	f04f 0400 	mov.w	r4, #0
 800ad84:	e03a      	b.n	800adfc <UART_SetConfig+0xecc>
 800ad86:	f04f 0301 	mov.w	r3, #1
 800ad8a:	f04f 0400 	mov.w	r4, #0
 800ad8e:	e035      	b.n	800adfc <UART_SetConfig+0xecc>
 800ad90:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ad94:	f04f 0400 	mov.w	r4, #0
 800ad98:	e030      	b.n	800adfc <UART_SetConfig+0xecc>
 800ad9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad9e:	f04f 0400 	mov.w	r4, #0
 800ada2:	e02b      	b.n	800adfc <UART_SetConfig+0xecc>
 800ada4:	f04f 0320 	mov.w	r3, #32
 800ada8:	f04f 0400 	mov.w	r4, #0
 800adac:	e026      	b.n	800adfc <UART_SetConfig+0xecc>
 800adae:	f04f 0310 	mov.w	r3, #16
 800adb2:	f04f 0400 	mov.w	r4, #0
 800adb6:	e021      	b.n	800adfc <UART_SetConfig+0xecc>
 800adb8:	f04f 030c 	mov.w	r3, #12
 800adbc:	f04f 0400 	mov.w	r4, #0
 800adc0:	e01c      	b.n	800adfc <UART_SetConfig+0xecc>
 800adc2:	f04f 030a 	mov.w	r3, #10
 800adc6:	f04f 0400 	mov.w	r4, #0
 800adca:	e017      	b.n	800adfc <UART_SetConfig+0xecc>
 800adcc:	f04f 0308 	mov.w	r3, #8
 800add0:	f04f 0400 	mov.w	r4, #0
 800add4:	e012      	b.n	800adfc <UART_SetConfig+0xecc>
 800add6:	f04f 0306 	mov.w	r3, #6
 800adda:	f04f 0400 	mov.w	r4, #0
 800adde:	e00d      	b.n	800adfc <UART_SetConfig+0xecc>
 800ade0:	f04f 0304 	mov.w	r3, #4
 800ade4:	f04f 0400 	mov.w	r4, #0
 800ade8:	e008      	b.n	800adfc <UART_SetConfig+0xecc>
 800adea:	f04f 0302 	mov.w	r3, #2
 800adee:	f04f 0400 	mov.w	r4, #0
 800adf2:	e003      	b.n	800adfc <UART_SetConfig+0xecc>
 800adf4:	f04f 0301 	mov.w	r3, #1
 800adf8:	f04f 0400 	mov.w	r4, #0
 800adfc:	461a      	mov	r2, r3
 800adfe:	4623      	mov	r3, r4
 800ae00:	f7f5 fa6a 	bl	80002d8 <__aeabi_uldivmod>
 800ae04:	4603      	mov	r3, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	f04f 0400 	mov.w	r4, #0
 800ae14:	0214      	lsls	r4, r2, #8
 800ae16:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ae1a:	020b      	lsls	r3, r1, #8
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6852      	ldr	r2, [r2, #4]
 800ae20:	0852      	lsrs	r2, r2, #1
 800ae22:	4611      	mov	r1, r2
 800ae24:	f04f 0200 	mov.w	r2, #0
 800ae28:	eb13 0b01 	adds.w	fp, r3, r1
 800ae2c:	eb44 0c02 	adc.w	ip, r4, r2
 800ae30:	4658      	mov	r0, fp
 800ae32:	4661      	mov	r1, ip
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	f04f 0400 	mov.w	r4, #0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4623      	mov	r3, r4
 800ae40:	f7f5 fa4a 	bl	80002d8 <__aeabi_uldivmod>
 800ae44:	4603      	mov	r3, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae4a:	e247      	b.n	800b2dc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae4c:	4b96      	ldr	r3, [pc, #600]	; (800b0a8 <UART_SetConfig+0x1178>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 80a3 	beq.w	800afa0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae5a:	4b93      	ldr	r3, [pc, #588]	; (800b0a8 <UART_SetConfig+0x1178>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	08db      	lsrs	r3, r3, #3
 800ae60:	f003 0303 	and.w	r3, r3, #3
 800ae64:	4a91      	ldr	r2, [pc, #580]	; (800b0ac <UART_SetConfig+0x117c>)
 800ae66:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f04f 0100 	mov.w	r1, #0
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d067      	beq.n	800af48 <UART_SetConfig+0x1018>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d05e      	beq.n	800af3e <UART_SetConfig+0x100e>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d055      	beq.n	800af34 <UART_SetConfig+0x1004>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d04c      	beq.n	800af2a <UART_SetConfig+0xffa>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d043      	beq.n	800af20 <UART_SetConfig+0xff0>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	2b05      	cmp	r3, #5
 800ae9e:	d03a      	beq.n	800af16 <UART_SetConfig+0xfe6>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	2b06      	cmp	r3, #6
 800aea6:	d031      	beq.n	800af0c <UART_SetConfig+0xfdc>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b07      	cmp	r3, #7
 800aeae:	d028      	beq.n	800af02 <UART_SetConfig+0xfd2>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d01f      	beq.n	800aef8 <UART_SetConfig+0xfc8>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d016      	beq.n	800aeee <UART_SetConfig+0xfbe>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b0a      	cmp	r3, #10
 800aec6:	d00d      	beq.n	800aee4 <UART_SetConfig+0xfb4>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	2b0b      	cmp	r3, #11
 800aece:	d104      	bne.n	800aeda <UART_SetConfig+0xfaa>
 800aed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aed4:	f04f 0400 	mov.w	r4, #0
 800aed8:	e03a      	b.n	800af50 <UART_SetConfig+0x1020>
 800aeda:	f04f 0301 	mov.w	r3, #1
 800aede:	f04f 0400 	mov.w	r4, #0
 800aee2:	e035      	b.n	800af50 <UART_SetConfig+0x1020>
 800aee4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aee8:	f04f 0400 	mov.w	r4, #0
 800aeec:	e030      	b.n	800af50 <UART_SetConfig+0x1020>
 800aeee:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aef2:	f04f 0400 	mov.w	r4, #0
 800aef6:	e02b      	b.n	800af50 <UART_SetConfig+0x1020>
 800aef8:	f04f 0320 	mov.w	r3, #32
 800aefc:	f04f 0400 	mov.w	r4, #0
 800af00:	e026      	b.n	800af50 <UART_SetConfig+0x1020>
 800af02:	f04f 0310 	mov.w	r3, #16
 800af06:	f04f 0400 	mov.w	r4, #0
 800af0a:	e021      	b.n	800af50 <UART_SetConfig+0x1020>
 800af0c:	f04f 030c 	mov.w	r3, #12
 800af10:	f04f 0400 	mov.w	r4, #0
 800af14:	e01c      	b.n	800af50 <UART_SetConfig+0x1020>
 800af16:	f04f 030a 	mov.w	r3, #10
 800af1a:	f04f 0400 	mov.w	r4, #0
 800af1e:	e017      	b.n	800af50 <UART_SetConfig+0x1020>
 800af20:	f04f 0308 	mov.w	r3, #8
 800af24:	f04f 0400 	mov.w	r4, #0
 800af28:	e012      	b.n	800af50 <UART_SetConfig+0x1020>
 800af2a:	f04f 0306 	mov.w	r3, #6
 800af2e:	f04f 0400 	mov.w	r4, #0
 800af32:	e00d      	b.n	800af50 <UART_SetConfig+0x1020>
 800af34:	f04f 0304 	mov.w	r3, #4
 800af38:	f04f 0400 	mov.w	r4, #0
 800af3c:	e008      	b.n	800af50 <UART_SetConfig+0x1020>
 800af3e:	f04f 0302 	mov.w	r3, #2
 800af42:	f04f 0400 	mov.w	r4, #0
 800af46:	e003      	b.n	800af50 <UART_SetConfig+0x1020>
 800af48:	f04f 0301 	mov.w	r3, #1
 800af4c:	f04f 0400 	mov.w	r4, #0
 800af50:	461a      	mov	r2, r3
 800af52:	4623      	mov	r3, r4
 800af54:	f7f5 f9c0 	bl	80002d8 <__aeabi_uldivmod>
 800af58:	4603      	mov	r3, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	4619      	mov	r1, r3
 800af5e:	4622      	mov	r2, r4
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	f04f 0400 	mov.w	r4, #0
 800af68:	0214      	lsls	r4, r2, #8
 800af6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af6e:	020b      	lsls	r3, r1, #8
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	6852      	ldr	r2, [r2, #4]
 800af74:	0852      	lsrs	r2, r2, #1
 800af76:	4611      	mov	r1, r2
 800af78:	f04f 0200 	mov.w	r2, #0
 800af7c:	eb13 0b01 	adds.w	fp, r3, r1
 800af80:	eb44 0c02 	adc.w	ip, r4, r2
 800af84:	4658      	mov	r0, fp
 800af86:	4661      	mov	r1, ip
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f04f 0400 	mov.w	r4, #0
 800af90:	461a      	mov	r2, r3
 800af92:	4623      	mov	r3, r4
 800af94:	f7f5 f9a0 	bl	80002d8 <__aeabi_uldivmod>
 800af98:	4603      	mov	r3, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800af9e:	e19d      	b.n	800b2dc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d05b      	beq.n	800b060 <UART_SetConfig+0x1130>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b01      	cmp	r3, #1
 800afae:	d053      	beq.n	800b058 <UART_SetConfig+0x1128>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d04b      	beq.n	800b050 <UART_SetConfig+0x1120>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d043      	beq.n	800b048 <UART_SetConfig+0x1118>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d03b      	beq.n	800b040 <UART_SetConfig+0x1110>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b05      	cmp	r3, #5
 800afce:	d033      	beq.n	800b038 <UART_SetConfig+0x1108>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b06      	cmp	r3, #6
 800afd6:	d02b      	beq.n	800b030 <UART_SetConfig+0x1100>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	2b07      	cmp	r3, #7
 800afde:	d023      	beq.n	800b028 <UART_SetConfig+0x10f8>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	2b08      	cmp	r3, #8
 800afe6:	d01b      	beq.n	800b020 <UART_SetConfig+0x10f0>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2b09      	cmp	r3, #9
 800afee:	d013      	beq.n	800b018 <UART_SetConfig+0x10e8>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b0a      	cmp	r3, #10
 800aff6:	d00b      	beq.n	800b010 <UART_SetConfig+0x10e0>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	2b0b      	cmp	r3, #11
 800affe:	d103      	bne.n	800b008 <UART_SetConfig+0x10d8>
 800b000:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <UART_SetConfig+0x117c>)
 800b002:	f04f 0400 	mov.w	r4, #0
 800b006:	e02e      	b.n	800b066 <UART_SetConfig+0x1136>
 800b008:	4b29      	ldr	r3, [pc, #164]	; (800b0b0 <UART_SetConfig+0x1180>)
 800b00a:	f04f 0403 	mov.w	r4, #3
 800b00e:	e02a      	b.n	800b066 <UART_SetConfig+0x1136>
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <UART_SetConfig+0x1184>)
 800b012:	f04f 0400 	mov.w	r4, #0
 800b016:	e026      	b.n	800b066 <UART_SetConfig+0x1136>
 800b018:	4b27      	ldr	r3, [pc, #156]	; (800b0b8 <UART_SetConfig+0x1188>)
 800b01a:	f04f 0400 	mov.w	r4, #0
 800b01e:	e022      	b.n	800b066 <UART_SetConfig+0x1136>
 800b020:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <UART_SetConfig+0x118c>)
 800b022:	f04f 0400 	mov.w	r4, #0
 800b026:	e01e      	b.n	800b066 <UART_SetConfig+0x1136>
 800b028:	4b25      	ldr	r3, [pc, #148]	; (800b0c0 <UART_SetConfig+0x1190>)
 800b02a:	f04f 0400 	mov.w	r4, #0
 800b02e:	e01a      	b.n	800b066 <UART_SetConfig+0x1136>
 800b030:	a419      	add	r4, pc, #100	; (adr r4, 800b098 <UART_SetConfig+0x1168>)
 800b032:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b036:	e016      	b.n	800b066 <UART_SetConfig+0x1136>
 800b038:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <UART_SetConfig+0x1194>)
 800b03a:	f04f 0400 	mov.w	r4, #0
 800b03e:	e012      	b.n	800b066 <UART_SetConfig+0x1136>
 800b040:	4b21      	ldr	r3, [pc, #132]	; (800b0c8 <UART_SetConfig+0x1198>)
 800b042:	f04f 0400 	mov.w	r4, #0
 800b046:	e00e      	b.n	800b066 <UART_SetConfig+0x1136>
 800b048:	a415      	add	r4, pc, #84	; (adr r4, 800b0a0 <UART_SetConfig+0x1170>)
 800b04a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b04e:	e00a      	b.n	800b066 <UART_SetConfig+0x1136>
 800b050:	4b1e      	ldr	r3, [pc, #120]	; (800b0cc <UART_SetConfig+0x119c>)
 800b052:	f04f 0400 	mov.w	r4, #0
 800b056:	e006      	b.n	800b066 <UART_SetConfig+0x1136>
 800b058:	4b1d      	ldr	r3, [pc, #116]	; (800b0d0 <UART_SetConfig+0x11a0>)
 800b05a:	f04f 0401 	mov.w	r4, #1
 800b05e:	e002      	b.n	800b066 <UART_SetConfig+0x1136>
 800b060:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <UART_SetConfig+0x1180>)
 800b062:	f04f 0403 	mov.w	r4, #3
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6852      	ldr	r2, [r2, #4]
 800b06a:	0852      	lsrs	r2, r2, #1
 800b06c:	4611      	mov	r1, r2
 800b06e:	f04f 0200 	mov.w	r2, #0
 800b072:	eb13 0b01 	adds.w	fp, r3, r1
 800b076:	eb44 0c02 	adc.w	ip, r4, r2
 800b07a:	4658      	mov	r0, fp
 800b07c:	4661      	mov	r1, ip
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f04f 0400 	mov.w	r4, #0
 800b086:	461a      	mov	r2, r3
 800b088:	4623      	mov	r3, r4
 800b08a:	f7f5 f925 	bl	80002d8 <__aeabi_uldivmod>
 800b08e:	4603      	mov	r3, r0
 800b090:	460c      	mov	r4, r1
 800b092:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b094:	e122      	b.n	800b2dc <UART_SetConfig+0x13ac>
 800b096:	bf00      	nop
 800b098:	51615500 	.word	0x51615500
 800b09c:	00000000 	.word	0x00000000
 800b0a0:	a2c2aa00 	.word	0xa2c2aa00
 800b0a4:	00000000 	.word	0x00000000
 800b0a8:	58024400 	.word	0x58024400
 800b0ac:	03d09000 	.word	0x03d09000
 800b0b0:	d0900000 	.word	0xd0900000
 800b0b4:	07a12000 	.word	0x07a12000
 800b0b8:	0f424000 	.word	0x0f424000
 800b0bc:	1e848000 	.word	0x1e848000
 800b0c0:	3d090000 	.word	0x3d090000
 800b0c4:	61a80000 	.word	0x61a80000
 800b0c8:	7a120000 	.word	0x7a120000
 800b0cc:	f4240000 	.word	0xf4240000
 800b0d0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d05b      	beq.n	800b194 <UART_SetConfig+0x1264>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d053      	beq.n	800b18c <UART_SetConfig+0x125c>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d04b      	beq.n	800b184 <UART_SetConfig+0x1254>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d043      	beq.n	800b17c <UART_SetConfig+0x124c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b04      	cmp	r3, #4
 800b0fa:	d03b      	beq.n	800b174 <UART_SetConfig+0x1244>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	2b05      	cmp	r3, #5
 800b102:	d033      	beq.n	800b16c <UART_SetConfig+0x123c>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b06      	cmp	r3, #6
 800b10a:	d02b      	beq.n	800b164 <UART_SetConfig+0x1234>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b07      	cmp	r3, #7
 800b112:	d023      	beq.n	800b15c <UART_SetConfig+0x122c>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b08      	cmp	r3, #8
 800b11a:	d01b      	beq.n	800b154 <UART_SetConfig+0x1224>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	2b09      	cmp	r3, #9
 800b122:	d013      	beq.n	800b14c <UART_SetConfig+0x121c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	2b0a      	cmp	r3, #10
 800b12a:	d00b      	beq.n	800b144 <UART_SetConfig+0x1214>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	2b0b      	cmp	r3, #11
 800b132:	d103      	bne.n	800b13c <UART_SetConfig+0x120c>
 800b134:	4bc0      	ldr	r3, [pc, #768]	; (800b438 <UART_SetConfig+0x1508>)
 800b136:	f04f 0400 	mov.w	r4, #0
 800b13a:	e02e      	b.n	800b19a <UART_SetConfig+0x126a>
 800b13c:	4bbf      	ldr	r3, [pc, #764]	; (800b43c <UART_SetConfig+0x150c>)
 800b13e:	f04f 0400 	mov.w	r4, #0
 800b142:	e02a      	b.n	800b19a <UART_SetConfig+0x126a>
 800b144:	4bbe      	ldr	r3, [pc, #760]	; (800b440 <UART_SetConfig+0x1510>)
 800b146:	f04f 0400 	mov.w	r4, #0
 800b14a:	e026      	b.n	800b19a <UART_SetConfig+0x126a>
 800b14c:	4bbd      	ldr	r3, [pc, #756]	; (800b444 <UART_SetConfig+0x1514>)
 800b14e:	f04f 0400 	mov.w	r4, #0
 800b152:	e022      	b.n	800b19a <UART_SetConfig+0x126a>
 800b154:	4bbc      	ldr	r3, [pc, #752]	; (800b448 <UART_SetConfig+0x1518>)
 800b156:	f04f 0400 	mov.w	r4, #0
 800b15a:	e01e      	b.n	800b19a <UART_SetConfig+0x126a>
 800b15c:	4bbb      	ldr	r3, [pc, #748]	; (800b44c <UART_SetConfig+0x151c>)
 800b15e:	f04f 0400 	mov.w	r4, #0
 800b162:	e01a      	b.n	800b19a <UART_SetConfig+0x126a>
 800b164:	a4b0      	add	r4, pc, #704	; (adr r4, 800b428 <UART_SetConfig+0x14f8>)
 800b166:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b16a:	e016      	b.n	800b19a <UART_SetConfig+0x126a>
 800b16c:	4bb8      	ldr	r3, [pc, #736]	; (800b450 <UART_SetConfig+0x1520>)
 800b16e:	f04f 0400 	mov.w	r4, #0
 800b172:	e012      	b.n	800b19a <UART_SetConfig+0x126a>
 800b174:	4bb7      	ldr	r3, [pc, #732]	; (800b454 <UART_SetConfig+0x1524>)
 800b176:	f04f 0400 	mov.w	r4, #0
 800b17a:	e00e      	b.n	800b19a <UART_SetConfig+0x126a>
 800b17c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b430 <UART_SetConfig+0x1500>)
 800b17e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b182:	e00a      	b.n	800b19a <UART_SetConfig+0x126a>
 800b184:	4bb4      	ldr	r3, [pc, #720]	; (800b458 <UART_SetConfig+0x1528>)
 800b186:	f04f 0400 	mov.w	r4, #0
 800b18a:	e006      	b.n	800b19a <UART_SetConfig+0x126a>
 800b18c:	4bb3      	ldr	r3, [pc, #716]	; (800b45c <UART_SetConfig+0x152c>)
 800b18e:	f04f 0400 	mov.w	r4, #0
 800b192:	e002      	b.n	800b19a <UART_SetConfig+0x126a>
 800b194:	4ba9      	ldr	r3, [pc, #676]	; (800b43c <UART_SetConfig+0x150c>)
 800b196:	f04f 0400 	mov.w	r4, #0
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	6852      	ldr	r2, [r2, #4]
 800b19e:	0852      	lsrs	r2, r2, #1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	f04f 0200 	mov.w	r2, #0
 800b1a6:	eb13 0b01 	adds.w	fp, r3, r1
 800b1aa:	eb44 0c02 	adc.w	ip, r4, r2
 800b1ae:	4658      	mov	r0, fp
 800b1b0:	4661      	mov	r1, ip
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	f04f 0400 	mov.w	r4, #0
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	4623      	mov	r3, r4
 800b1be:	f7f5 f88b 	bl	80002d8 <__aeabi_uldivmod>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b1c8:	e088      	b.n	800b2dc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d064      	beq.n	800b29c <UART_SetConfig+0x136c>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d05b      	beq.n	800b292 <UART_SetConfig+0x1362>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d052      	beq.n	800b288 <UART_SetConfig+0x1358>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d04a      	beq.n	800b280 <UART_SetConfig+0x1350>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d041      	beq.n	800b276 <UART_SetConfig+0x1346>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d039      	beq.n	800b26e <UART_SetConfig+0x133e>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b06      	cmp	r3, #6
 800b200:	d031      	beq.n	800b266 <UART_SetConfig+0x1336>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b07      	cmp	r3, #7
 800b208:	d028      	beq.n	800b25c <UART_SetConfig+0x132c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b08      	cmp	r3, #8
 800b210:	d01f      	beq.n	800b252 <UART_SetConfig+0x1322>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b09      	cmp	r3, #9
 800b218:	d016      	beq.n	800b248 <UART_SetConfig+0x1318>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	2b0a      	cmp	r3, #10
 800b220:	d00d      	beq.n	800b23e <UART_SetConfig+0x130e>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b0b      	cmp	r3, #11
 800b228:	d104      	bne.n	800b234 <UART_SetConfig+0x1304>
 800b22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b22e:	f04f 0400 	mov.w	r4, #0
 800b232:	e037      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b234:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b238:	f04f 0400 	mov.w	r4, #0
 800b23c:	e032      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b23e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b242:	f04f 0400 	mov.w	r4, #0
 800b246:	e02d      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b24c:	f04f 0400 	mov.w	r4, #0
 800b250:	e028      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b252:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b256:	f04f 0400 	mov.w	r4, #0
 800b25a:	e023      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b25c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b260:	f04f 0400 	mov.w	r4, #0
 800b264:	e01e      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b266:	4b7e      	ldr	r3, [pc, #504]	; (800b460 <UART_SetConfig+0x1530>)
 800b268:	f04f 0400 	mov.w	r4, #0
 800b26c:	e01a      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b26e:	4b7d      	ldr	r3, [pc, #500]	; (800b464 <UART_SetConfig+0x1534>)
 800b270:	f04f 0400 	mov.w	r4, #0
 800b274:	e016      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b276:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b27a:	f04f 0400 	mov.w	r4, #0
 800b27e:	e011      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b280:	4b79      	ldr	r3, [pc, #484]	; (800b468 <UART_SetConfig+0x1538>)
 800b282:	f04f 0400 	mov.w	r4, #0
 800b286:	e00d      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b28c:	f04f 0400 	mov.w	r4, #0
 800b290:	e008      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b296:	f04f 0400 	mov.w	r4, #0
 800b29a:	e003      	b.n	800b2a4 <UART_SetConfig+0x1374>
 800b29c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2a0:	f04f 0400 	mov.w	r4, #0
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	6852      	ldr	r2, [r2, #4]
 800b2a8:	0852      	lsrs	r2, r2, #1
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	eb13 0b01 	adds.w	fp, r3, r1
 800b2b4:	eb44 0c02 	adc.w	ip, r4, r2
 800b2b8:	4658      	mov	r0, fp
 800b2ba:	4661      	mov	r1, ip
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f04f 0400 	mov.w	r4, #0
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4623      	mov	r3, r4
 800b2c8:	f7f5 f806 	bl	80002d8 <__aeabi_uldivmod>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2d2:	e003      	b.n	800b2dc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b2da:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2e2:	d309      	bcc.n	800b2f8 <UART_SetConfig+0x13c8>
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ea:	d205      	bcs.n	800b2f8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2f2:	60da      	str	r2, [r3, #12]
 800b2f4:	f000 bf85 	b.w	800c202 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fe:	f000 bf80 	b.w	800c202 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b30a:	f040 83da 	bne.w	800bac2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b30e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b312:	2b40      	cmp	r3, #64	; 0x40
 800b314:	f200 83b3 	bhi.w	800ba7e <UART_SetConfig+0x1b4e>
 800b318:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0x13f0>)
 800b31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31e:	bf00      	nop
 800b320:	0800b46d 	.word	0x0800b46d
 800b324:	0800b525 	.word	0x0800b525
 800b328:	0800ba7f 	.word	0x0800ba7f
 800b32c:	0800ba7f 	.word	0x0800ba7f
 800b330:	0800b5dd 	.word	0x0800b5dd
 800b334:	0800ba7f 	.word	0x0800ba7f
 800b338:	0800ba7f 	.word	0x0800ba7f
 800b33c:	0800ba7f 	.word	0x0800ba7f
 800b340:	0800b699 	.word	0x0800b699
 800b344:	0800ba7f 	.word	0x0800ba7f
 800b348:	0800ba7f 	.word	0x0800ba7f
 800b34c:	0800ba7f 	.word	0x0800ba7f
 800b350:	0800ba7f 	.word	0x0800ba7f
 800b354:	0800ba7f 	.word	0x0800ba7f
 800b358:	0800ba7f 	.word	0x0800ba7f
 800b35c:	0800ba7f 	.word	0x0800ba7f
 800b360:	0800b755 	.word	0x0800b755
 800b364:	0800ba7f 	.word	0x0800ba7f
 800b368:	0800ba7f 	.word	0x0800ba7f
 800b36c:	0800ba7f 	.word	0x0800ba7f
 800b370:	0800ba7f 	.word	0x0800ba7f
 800b374:	0800ba7f 	.word	0x0800ba7f
 800b378:	0800ba7f 	.word	0x0800ba7f
 800b37c:	0800ba7f 	.word	0x0800ba7f
 800b380:	0800ba7f 	.word	0x0800ba7f
 800b384:	0800ba7f 	.word	0x0800ba7f
 800b388:	0800ba7f 	.word	0x0800ba7f
 800b38c:	0800ba7f 	.word	0x0800ba7f
 800b390:	0800ba7f 	.word	0x0800ba7f
 800b394:	0800ba7f 	.word	0x0800ba7f
 800b398:	0800ba7f 	.word	0x0800ba7f
 800b39c:	0800ba7f 	.word	0x0800ba7f
 800b3a0:	0800b8c7 	.word	0x0800b8c7
 800b3a4:	0800ba7f 	.word	0x0800ba7f
 800b3a8:	0800ba7f 	.word	0x0800ba7f
 800b3ac:	0800ba7f 	.word	0x0800ba7f
 800b3b0:	0800ba7f 	.word	0x0800ba7f
 800b3b4:	0800ba7f 	.word	0x0800ba7f
 800b3b8:	0800ba7f 	.word	0x0800ba7f
 800b3bc:	0800ba7f 	.word	0x0800ba7f
 800b3c0:	0800ba7f 	.word	0x0800ba7f
 800b3c4:	0800ba7f 	.word	0x0800ba7f
 800b3c8:	0800ba7f 	.word	0x0800ba7f
 800b3cc:	0800ba7f 	.word	0x0800ba7f
 800b3d0:	0800ba7f 	.word	0x0800ba7f
 800b3d4:	0800ba7f 	.word	0x0800ba7f
 800b3d8:	0800ba7f 	.word	0x0800ba7f
 800b3dc:	0800ba7f 	.word	0x0800ba7f
 800b3e0:	0800ba7f 	.word	0x0800ba7f
 800b3e4:	0800ba7f 	.word	0x0800ba7f
 800b3e8:	0800ba7f 	.word	0x0800ba7f
 800b3ec:	0800ba7f 	.word	0x0800ba7f
 800b3f0:	0800ba7f 	.word	0x0800ba7f
 800b3f4:	0800ba7f 	.word	0x0800ba7f
 800b3f8:	0800ba7f 	.word	0x0800ba7f
 800b3fc:	0800ba7f 	.word	0x0800ba7f
 800b400:	0800ba7f 	.word	0x0800ba7f
 800b404:	0800ba7f 	.word	0x0800ba7f
 800b408:	0800ba7f 	.word	0x0800ba7f
 800b40c:	0800ba7f 	.word	0x0800ba7f
 800b410:	0800ba7f 	.word	0x0800ba7f
 800b414:	0800ba7f 	.word	0x0800ba7f
 800b418:	0800ba7f 	.word	0x0800ba7f
 800b41c:	0800ba7f 	.word	0x0800ba7f
 800b420:	0800b9bd 	.word	0x0800b9bd
 800b424:	f3af 8000 	nop.w
 800b428:	05161500 	.word	0x05161500
 800b42c:	00000000 	.word	0x00000000
 800b430:	0a2c2a00 	.word	0x0a2c2a00
 800b434:	00000000 	.word	0x00000000
 800b438:	003d0900 	.word	0x003d0900
 800b43c:	3d090000 	.word	0x3d090000
 800b440:	007a1200 	.word	0x007a1200
 800b444:	00f42400 	.word	0x00f42400
 800b448:	01e84800 	.word	0x01e84800
 800b44c:	03d09000 	.word	0x03d09000
 800b450:	061a8000 	.word	0x061a8000
 800b454:	07a12000 	.word	0x07a12000
 800b458:	0f424000 	.word	0x0f424000
 800b45c:	1e848000 	.word	0x1e848000
 800b460:	000aaa00 	.word	0x000aaa00
 800b464:	000ccc00 	.word	0x000ccc00
 800b468:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b46c:	f7fb ff44 	bl	80072f8 <HAL_RCC_GetPCLK1Freq>
 800b470:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b00      	cmp	r3, #0
 800b478:	d044      	beq.n	800b504 <UART_SetConfig+0x15d4>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d03e      	beq.n	800b500 <UART_SetConfig+0x15d0>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b02      	cmp	r3, #2
 800b488:	d038      	beq.n	800b4fc <UART_SetConfig+0x15cc>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d032      	beq.n	800b4f8 <UART_SetConfig+0x15c8>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b04      	cmp	r3, #4
 800b498:	d02c      	beq.n	800b4f4 <UART_SetConfig+0x15c4>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b05      	cmp	r3, #5
 800b4a0:	d026      	beq.n	800b4f0 <UART_SetConfig+0x15c0>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2b06      	cmp	r3, #6
 800b4a8:	d020      	beq.n	800b4ec <UART_SetConfig+0x15bc>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	2b07      	cmp	r3, #7
 800b4b0:	d01a      	beq.n	800b4e8 <UART_SetConfig+0x15b8>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	2b08      	cmp	r3, #8
 800b4b8:	d014      	beq.n	800b4e4 <UART_SetConfig+0x15b4>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d00e      	beq.n	800b4e0 <UART_SetConfig+0x15b0>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b0a      	cmp	r3, #10
 800b4c8:	d008      	beq.n	800b4dc <UART_SetConfig+0x15ac>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b0b      	cmp	r3, #11
 800b4d0:	d102      	bne.n	800b4d8 <UART_SetConfig+0x15a8>
 800b4d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4d6:	e016      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e014      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4dc:	2380      	movs	r3, #128	; 0x80
 800b4de:	e012      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4e0:	2340      	movs	r3, #64	; 0x40
 800b4e2:	e010      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4e4:	2320      	movs	r3, #32
 800b4e6:	e00e      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	e00c      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4ec:	230c      	movs	r3, #12
 800b4ee:	e00a      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4f0:	230a      	movs	r3, #10
 800b4f2:	e008      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4f4:	2308      	movs	r3, #8
 800b4f6:	e006      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4f8:	2306      	movs	r3, #6
 800b4fa:	e004      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	e002      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b500:	2302      	movs	r3, #2
 800b502:	e000      	b.n	800b506 <UART_SetConfig+0x15d6>
 800b504:	2301      	movs	r3, #1
 800b506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b508:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50c:	005a      	lsls	r2, r3, #1
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	441a      	add	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51e:	b29b      	uxth	r3, r3
 800b520:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b522:	e2b0      	b.n	800ba86 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b524:	f7fb fefe 	bl	8007324 <HAL_RCC_GetPCLK2Freq>
 800b528:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d044      	beq.n	800b5bc <UART_SetConfig+0x168c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b01      	cmp	r3, #1
 800b538:	d03e      	beq.n	800b5b8 <UART_SetConfig+0x1688>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d038      	beq.n	800b5b4 <UART_SetConfig+0x1684>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b03      	cmp	r3, #3
 800b548:	d032      	beq.n	800b5b0 <UART_SetConfig+0x1680>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d02c      	beq.n	800b5ac <UART_SetConfig+0x167c>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b05      	cmp	r3, #5
 800b558:	d026      	beq.n	800b5a8 <UART_SetConfig+0x1678>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	2b06      	cmp	r3, #6
 800b560:	d020      	beq.n	800b5a4 <UART_SetConfig+0x1674>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	2b07      	cmp	r3, #7
 800b568:	d01a      	beq.n	800b5a0 <UART_SetConfig+0x1670>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d014      	beq.n	800b59c <UART_SetConfig+0x166c>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b576:	2b09      	cmp	r3, #9
 800b578:	d00e      	beq.n	800b598 <UART_SetConfig+0x1668>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	2b0a      	cmp	r3, #10
 800b580:	d008      	beq.n	800b594 <UART_SetConfig+0x1664>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	2b0b      	cmp	r3, #11
 800b588:	d102      	bne.n	800b590 <UART_SetConfig+0x1660>
 800b58a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b58e:	e016      	b.n	800b5be <UART_SetConfig+0x168e>
 800b590:	2301      	movs	r3, #1
 800b592:	e014      	b.n	800b5be <UART_SetConfig+0x168e>
 800b594:	2380      	movs	r3, #128	; 0x80
 800b596:	e012      	b.n	800b5be <UART_SetConfig+0x168e>
 800b598:	2340      	movs	r3, #64	; 0x40
 800b59a:	e010      	b.n	800b5be <UART_SetConfig+0x168e>
 800b59c:	2320      	movs	r3, #32
 800b59e:	e00e      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	e00c      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	e00a      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5a8:	230a      	movs	r3, #10
 800b5aa:	e008      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5ac:	2308      	movs	r3, #8
 800b5ae:	e006      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5b0:	2306      	movs	r3, #6
 800b5b2:	e004      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5b4:	2304      	movs	r3, #4
 800b5b6:	e002      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e000      	b.n	800b5be <UART_SetConfig+0x168e>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c4:	005a      	lsls	r2, r3, #1
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	085b      	lsrs	r3, r3, #1
 800b5cc:	441a      	add	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5da:	e254      	b.n	800ba86 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5dc:	f107 0318 	add.w	r3, r7, #24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fd f821 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5e6:	69fa      	ldr	r2, [r7, #28]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d044      	beq.n	800b67a <UART_SetConfig+0x174a>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d03e      	beq.n	800b676 <UART_SetConfig+0x1746>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d038      	beq.n	800b672 <UART_SetConfig+0x1742>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	2b03      	cmp	r3, #3
 800b606:	d032      	beq.n	800b66e <UART_SetConfig+0x173e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d02c      	beq.n	800b66a <UART_SetConfig+0x173a>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b05      	cmp	r3, #5
 800b616:	d026      	beq.n	800b666 <UART_SetConfig+0x1736>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b06      	cmp	r3, #6
 800b61e:	d020      	beq.n	800b662 <UART_SetConfig+0x1732>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	2b07      	cmp	r3, #7
 800b626:	d01a      	beq.n	800b65e <UART_SetConfig+0x172e>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	2b08      	cmp	r3, #8
 800b62e:	d014      	beq.n	800b65a <UART_SetConfig+0x172a>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b634:	2b09      	cmp	r3, #9
 800b636:	d00e      	beq.n	800b656 <UART_SetConfig+0x1726>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	2b0a      	cmp	r3, #10
 800b63e:	d008      	beq.n	800b652 <UART_SetConfig+0x1722>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	2b0b      	cmp	r3, #11
 800b646:	d102      	bne.n	800b64e <UART_SetConfig+0x171e>
 800b648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b64c:	e016      	b.n	800b67c <UART_SetConfig+0x174c>
 800b64e:	2301      	movs	r3, #1
 800b650:	e014      	b.n	800b67c <UART_SetConfig+0x174c>
 800b652:	2380      	movs	r3, #128	; 0x80
 800b654:	e012      	b.n	800b67c <UART_SetConfig+0x174c>
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	e010      	b.n	800b67c <UART_SetConfig+0x174c>
 800b65a:	2320      	movs	r3, #32
 800b65c:	e00e      	b.n	800b67c <UART_SetConfig+0x174c>
 800b65e:	2310      	movs	r3, #16
 800b660:	e00c      	b.n	800b67c <UART_SetConfig+0x174c>
 800b662:	230c      	movs	r3, #12
 800b664:	e00a      	b.n	800b67c <UART_SetConfig+0x174c>
 800b666:	230a      	movs	r3, #10
 800b668:	e008      	b.n	800b67c <UART_SetConfig+0x174c>
 800b66a:	2308      	movs	r3, #8
 800b66c:	e006      	b.n	800b67c <UART_SetConfig+0x174c>
 800b66e:	2306      	movs	r3, #6
 800b670:	e004      	b.n	800b67c <UART_SetConfig+0x174c>
 800b672:	2304      	movs	r3, #4
 800b674:	e002      	b.n	800b67c <UART_SetConfig+0x174c>
 800b676:	2302      	movs	r3, #2
 800b678:	e000      	b.n	800b67c <UART_SetConfig+0x174c>
 800b67a:	2301      	movs	r3, #1
 800b67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b680:	005a      	lsls	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	085b      	lsrs	r3, r3, #1
 800b688:	441a      	add	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b692:	b29b      	uxth	r3, r3
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b696:	e1f6      	b.n	800ba86 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fd f90f 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d044      	beq.n	800b736 <UART_SetConfig+0x1806>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d03e      	beq.n	800b732 <UART_SetConfig+0x1802>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d038      	beq.n	800b72e <UART_SetConfig+0x17fe>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d032      	beq.n	800b72a <UART_SetConfig+0x17fa>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d02c      	beq.n	800b726 <UART_SetConfig+0x17f6>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b05      	cmp	r3, #5
 800b6d2:	d026      	beq.n	800b722 <UART_SetConfig+0x17f2>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2b06      	cmp	r3, #6
 800b6da:	d020      	beq.n	800b71e <UART_SetConfig+0x17ee>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	2b07      	cmp	r3, #7
 800b6e2:	d01a      	beq.n	800b71a <UART_SetConfig+0x17ea>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d014      	beq.n	800b716 <UART_SetConfig+0x17e6>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b09      	cmp	r3, #9
 800b6f2:	d00e      	beq.n	800b712 <UART_SetConfig+0x17e2>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	2b0a      	cmp	r3, #10
 800b6fa:	d008      	beq.n	800b70e <UART_SetConfig+0x17de>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b700:	2b0b      	cmp	r3, #11
 800b702:	d102      	bne.n	800b70a <UART_SetConfig+0x17da>
 800b704:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b708:	e016      	b.n	800b738 <UART_SetConfig+0x1808>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e014      	b.n	800b738 <UART_SetConfig+0x1808>
 800b70e:	2380      	movs	r3, #128	; 0x80
 800b710:	e012      	b.n	800b738 <UART_SetConfig+0x1808>
 800b712:	2340      	movs	r3, #64	; 0x40
 800b714:	e010      	b.n	800b738 <UART_SetConfig+0x1808>
 800b716:	2320      	movs	r3, #32
 800b718:	e00e      	b.n	800b738 <UART_SetConfig+0x1808>
 800b71a:	2310      	movs	r3, #16
 800b71c:	e00c      	b.n	800b738 <UART_SetConfig+0x1808>
 800b71e:	230c      	movs	r3, #12
 800b720:	e00a      	b.n	800b738 <UART_SetConfig+0x1808>
 800b722:	230a      	movs	r3, #10
 800b724:	e008      	b.n	800b738 <UART_SetConfig+0x1808>
 800b726:	2308      	movs	r3, #8
 800b728:	e006      	b.n	800b738 <UART_SetConfig+0x1808>
 800b72a:	2306      	movs	r3, #6
 800b72c:	e004      	b.n	800b738 <UART_SetConfig+0x1808>
 800b72e:	2304      	movs	r3, #4
 800b730:	e002      	b.n	800b738 <UART_SetConfig+0x1808>
 800b732:	2302      	movs	r3, #2
 800b734:	e000      	b.n	800b738 <UART_SetConfig+0x1808>
 800b736:	2301      	movs	r3, #1
 800b738:	fbb2 f3f3 	udiv	r3, r2, r3
 800b73c:	005a      	lsls	r2, r3, #1
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	441a      	add	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74e:	b29b      	uxth	r3, r3
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b752:	e198      	b.n	800ba86 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b754:	4b87      	ldr	r3, [pc, #540]	; (800b974 <UART_SetConfig+0x1a44>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0320 	and.w	r3, r3, #32
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d05e      	beq.n	800b81e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b760:	4b84      	ldr	r3, [pc, #528]	; (800b974 <UART_SetConfig+0x1a44>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	08db      	lsrs	r3, r3, #3
 800b766:	f003 0303 	and.w	r3, r3, #3
 800b76a:	4a83      	ldr	r2, [pc, #524]	; (800b978 <UART_SetConfig+0x1a48>)
 800b76c:	40da      	lsrs	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	2b00      	cmp	r3, #0
 800b774:	d044      	beq.n	800b800 <UART_SetConfig+0x18d0>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d03e      	beq.n	800b7fc <UART_SetConfig+0x18cc>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b02      	cmp	r3, #2
 800b784:	d038      	beq.n	800b7f8 <UART_SetConfig+0x18c8>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d032      	beq.n	800b7f4 <UART_SetConfig+0x18c4>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	2b04      	cmp	r3, #4
 800b794:	d02c      	beq.n	800b7f0 <UART_SetConfig+0x18c0>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	d026      	beq.n	800b7ec <UART_SetConfig+0x18bc>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	2b06      	cmp	r3, #6
 800b7a4:	d020      	beq.n	800b7e8 <UART_SetConfig+0x18b8>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b07      	cmp	r3, #7
 800b7ac:	d01a      	beq.n	800b7e4 <UART_SetConfig+0x18b4>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2b08      	cmp	r3, #8
 800b7b4:	d014      	beq.n	800b7e0 <UART_SetConfig+0x18b0>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	2b09      	cmp	r3, #9
 800b7bc:	d00e      	beq.n	800b7dc <UART_SetConfig+0x18ac>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	2b0a      	cmp	r3, #10
 800b7c4:	d008      	beq.n	800b7d8 <UART_SetConfig+0x18a8>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	2b0b      	cmp	r3, #11
 800b7cc:	d102      	bne.n	800b7d4 <UART_SetConfig+0x18a4>
 800b7ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d2:	e016      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e014      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7d8:	2380      	movs	r3, #128	; 0x80
 800b7da:	e012      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7dc:	2340      	movs	r3, #64	; 0x40
 800b7de:	e010      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7e0:	2320      	movs	r3, #32
 800b7e2:	e00e      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7e4:	2310      	movs	r3, #16
 800b7e6:	e00c      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7e8:	230c      	movs	r3, #12
 800b7ea:	e00a      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7ec:	230a      	movs	r3, #10
 800b7ee:	e008      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	e006      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7f4:	2306      	movs	r3, #6
 800b7f6:	e004      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7f8:	2304      	movs	r3, #4
 800b7fa:	e002      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e000      	b.n	800b802 <UART_SetConfig+0x18d2>
 800b800:	2301      	movs	r3, #1
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	005a      	lsls	r2, r3, #1
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	085b      	lsrs	r3, r3, #1
 800b80e:	441a      	add	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	fbb2 f3f3 	udiv	r3, r2, r3
 800b818:	b29b      	uxth	r3, r3
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b81c:	e133      	b.n	800ba86 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b00      	cmp	r3, #0
 800b824:	d043      	beq.n	800b8ae <UART_SetConfig+0x197e>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d03d      	beq.n	800b8aa <UART_SetConfig+0x197a>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2b02      	cmp	r3, #2
 800b834:	d037      	beq.n	800b8a6 <UART_SetConfig+0x1976>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d031      	beq.n	800b8a2 <UART_SetConfig+0x1972>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b04      	cmp	r3, #4
 800b844:	d02b      	beq.n	800b89e <UART_SetConfig+0x196e>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d025      	beq.n	800b89a <UART_SetConfig+0x196a>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b06      	cmp	r3, #6
 800b854:	d01f      	beq.n	800b896 <UART_SetConfig+0x1966>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b07      	cmp	r3, #7
 800b85c:	d019      	beq.n	800b892 <UART_SetConfig+0x1962>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b08      	cmp	r3, #8
 800b864:	d013      	beq.n	800b88e <UART_SetConfig+0x195e>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	2b09      	cmp	r3, #9
 800b86c:	d00d      	beq.n	800b88a <UART_SetConfig+0x195a>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	2b0a      	cmp	r3, #10
 800b874:	d007      	beq.n	800b886 <UART_SetConfig+0x1956>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b0b      	cmp	r3, #11
 800b87c:	d101      	bne.n	800b882 <UART_SetConfig+0x1952>
 800b87e:	4b3f      	ldr	r3, [pc, #252]	; (800b97c <UART_SetConfig+0x1a4c>)
 800b880:	e016      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b882:	4b3f      	ldr	r3, [pc, #252]	; (800b980 <UART_SetConfig+0x1a50>)
 800b884:	e014      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b886:	4b3f      	ldr	r3, [pc, #252]	; (800b984 <UART_SetConfig+0x1a54>)
 800b888:	e012      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b88a:	4b3f      	ldr	r3, [pc, #252]	; (800b988 <UART_SetConfig+0x1a58>)
 800b88c:	e010      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b88e:	4b3f      	ldr	r3, [pc, #252]	; (800b98c <UART_SetConfig+0x1a5c>)
 800b890:	e00e      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b892:	4b3f      	ldr	r3, [pc, #252]	; (800b990 <UART_SetConfig+0x1a60>)
 800b894:	e00c      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b896:	4b3f      	ldr	r3, [pc, #252]	; (800b994 <UART_SetConfig+0x1a64>)
 800b898:	e00a      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b89a:	4b3f      	ldr	r3, [pc, #252]	; (800b998 <UART_SetConfig+0x1a68>)
 800b89c:	e008      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b89e:	4b3f      	ldr	r3, [pc, #252]	; (800b99c <UART_SetConfig+0x1a6c>)
 800b8a0:	e006      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b8a2:	4b3f      	ldr	r3, [pc, #252]	; (800b9a0 <UART_SetConfig+0x1a70>)
 800b8a4:	e004      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b8a6:	4b3f      	ldr	r3, [pc, #252]	; (800b9a4 <UART_SetConfig+0x1a74>)
 800b8a8:	e002      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b8aa:	4b33      	ldr	r3, [pc, #204]	; (800b978 <UART_SetConfig+0x1a48>)
 800b8ac:	e000      	b.n	800b8b0 <UART_SetConfig+0x1980>
 800b8ae:	4b34      	ldr	r3, [pc, #208]	; (800b980 <UART_SetConfig+0x1a50>)
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6852      	ldr	r2, [r2, #4]
 800b8b4:	0852      	lsrs	r2, r2, #1
 800b8b6:	441a      	add	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8c4:	e0df      	b.n	800ba86 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d045      	beq.n	800b95a <UART_SetConfig+0x1a2a>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d03f      	beq.n	800b956 <UART_SetConfig+0x1a26>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d039      	beq.n	800b952 <UART_SetConfig+0x1a22>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d033      	beq.n	800b94e <UART_SetConfig+0x1a1e>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b04      	cmp	r3, #4
 800b8ec:	d02d      	beq.n	800b94a <UART_SetConfig+0x1a1a>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	d027      	beq.n	800b946 <UART_SetConfig+0x1a16>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b06      	cmp	r3, #6
 800b8fc:	d021      	beq.n	800b942 <UART_SetConfig+0x1a12>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b07      	cmp	r3, #7
 800b904:	d01b      	beq.n	800b93e <UART_SetConfig+0x1a0e>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	2b08      	cmp	r3, #8
 800b90c:	d015      	beq.n	800b93a <UART_SetConfig+0x1a0a>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2b09      	cmp	r3, #9
 800b914:	d00f      	beq.n	800b936 <UART_SetConfig+0x1a06>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	2b0a      	cmp	r3, #10
 800b91c:	d008      	beq.n	800b930 <UART_SetConfig+0x1a00>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	2b0b      	cmp	r3, #11
 800b924:	d102      	bne.n	800b92c <UART_SetConfig+0x19fc>
 800b926:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b92a:	e017      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b92c:	4b18      	ldr	r3, [pc, #96]	; (800b990 <UART_SetConfig+0x1a60>)
 800b92e:	e015      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b930:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b934:	e012      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b936:	4b1c      	ldr	r3, [pc, #112]	; (800b9a8 <UART_SetConfig+0x1a78>)
 800b938:	e010      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b93a:	4b1c      	ldr	r3, [pc, #112]	; (800b9ac <UART_SetConfig+0x1a7c>)
 800b93c:	e00e      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b93e:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <UART_SetConfig+0x1a4c>)
 800b940:	e00c      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b942:	4b1b      	ldr	r3, [pc, #108]	; (800b9b0 <UART_SetConfig+0x1a80>)
 800b944:	e00a      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b946:	4b1b      	ldr	r3, [pc, #108]	; (800b9b4 <UART_SetConfig+0x1a84>)
 800b948:	e008      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b94a:	4b0e      	ldr	r3, [pc, #56]	; (800b984 <UART_SetConfig+0x1a54>)
 800b94c:	e006      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b94e:	4b1a      	ldr	r3, [pc, #104]	; (800b9b8 <UART_SetConfig+0x1a88>)
 800b950:	e004      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b952:	4b0d      	ldr	r3, [pc, #52]	; (800b988 <UART_SetConfig+0x1a58>)
 800b954:	e002      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b956:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <UART_SetConfig+0x1a5c>)
 800b958:	e000      	b.n	800b95c <UART_SetConfig+0x1a2c>
 800b95a:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <UART_SetConfig+0x1a60>)
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	6852      	ldr	r2, [r2, #4]
 800b960:	0852      	lsrs	r2, r2, #1
 800b962:	441a      	add	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	fbb2 f3f3 	udiv	r3, r2, r3
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b970:	e089      	b.n	800ba86 <UART_SetConfig+0x1b56>
 800b972:	bf00      	nop
 800b974:	58024400 	.word	0x58024400
 800b978:	03d09000 	.word	0x03d09000
 800b97c:	0007a120 	.word	0x0007a120
 800b980:	07a12000 	.word	0x07a12000
 800b984:	000f4240 	.word	0x000f4240
 800b988:	001e8480 	.word	0x001e8480
 800b98c:	003d0900 	.word	0x003d0900
 800b990:	007a1200 	.word	0x007a1200
 800b994:	00a2c2aa 	.word	0x00a2c2aa
 800b998:	00c35000 	.word	0x00c35000
 800b99c:	00f42400 	.word	0x00f42400
 800b9a0:	01458554 	.word	0x01458554
 800b9a4:	01e84800 	.word	0x01e84800
 800b9a8:	0001e848 	.word	0x0001e848
 800b9ac:	0003d090 	.word	0x0003d090
 800b9b0:	000a2c2a 	.word	0x000a2c2a
 800b9b4:	000c3500 	.word	0x000c3500
 800b9b8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d04f      	beq.n	800ba64 <UART_SetConfig+0x1b34>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d048      	beq.n	800ba5e <UART_SetConfig+0x1b2e>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d041      	beq.n	800ba58 <UART_SetConfig+0x1b28>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d03a      	beq.n	800ba52 <UART_SetConfig+0x1b22>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d033      	beq.n	800ba4c <UART_SetConfig+0x1b1c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b05      	cmp	r3, #5
 800b9ea:	d02c      	beq.n	800ba46 <UART_SetConfig+0x1b16>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	2b06      	cmp	r3, #6
 800b9f2:	d025      	beq.n	800ba40 <UART_SetConfig+0x1b10>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b07      	cmp	r3, #7
 800b9fa:	d01e      	beq.n	800ba3a <UART_SetConfig+0x1b0a>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	2b08      	cmp	r3, #8
 800ba02:	d017      	beq.n	800ba34 <UART_SetConfig+0x1b04>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	2b09      	cmp	r3, #9
 800ba0a:	d010      	beq.n	800ba2e <UART_SetConfig+0x1afe>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b0a      	cmp	r3, #10
 800ba12:	d009      	beq.n	800ba28 <UART_SetConfig+0x1af8>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b0b      	cmp	r3, #11
 800ba1a:	d102      	bne.n	800ba22 <UART_SetConfig+0x1af2>
 800ba1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba20:	e022      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba26:	e01f      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba2c:	e01c      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba32:	e019      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba38:	e016      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba3e:	e013      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba40:	f241 5354 	movw	r3, #5460	; 0x1554
 800ba44:	e010      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba46:	f641 1398 	movw	r3, #6552	; 0x1998
 800ba4a:	e00d      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba50:	e00a      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba52:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ba56:	e007      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba5c:	e004      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba62:	e001      	b.n	800ba68 <UART_SetConfig+0x1b38>
 800ba64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	6852      	ldr	r2, [r2, #4]
 800ba6c:	0852      	lsrs	r2, r2, #1
 800ba6e:	441a      	add	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba7c:	e003      	b.n	800ba86 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ba84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba88:	2b0f      	cmp	r3, #15
 800ba8a:	d916      	bls.n	800baba <UART_SetConfig+0x1b8a>
 800ba8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba92:	d212      	bcs.n	800baba <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f023 030f 	bic.w	r3, r3, #15
 800ba9c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	085b      	lsrs	r3, r3, #1
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	f003 0307 	and.w	r3, r3, #7
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800baac:	4313      	orrs	r3, r2
 800baae:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bab6:	60da      	str	r2, [r3, #12]
 800bab8:	e3a3      	b.n	800c202 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac0:	e39f      	b.n	800c202 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bac2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bac6:	2b40      	cmp	r3, #64	; 0x40
 800bac8:	f200 8388 	bhi.w	800c1dc <UART_SetConfig+0x22ac>
 800bacc:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <UART_SetConfig+0x1ba4>)
 800bace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad2:	bf00      	nop
 800bad4:	0800bbd9 	.word	0x0800bbd9
 800bad8:	0800bc8f 	.word	0x0800bc8f
 800badc:	0800c1dd 	.word	0x0800c1dd
 800bae0:	0800c1dd 	.word	0x0800c1dd
 800bae4:	0800bd45 	.word	0x0800bd45
 800bae8:	0800c1dd 	.word	0x0800c1dd
 800baec:	0800c1dd 	.word	0x0800c1dd
 800baf0:	0800c1dd 	.word	0x0800c1dd
 800baf4:	0800bdff 	.word	0x0800bdff
 800baf8:	0800c1dd 	.word	0x0800c1dd
 800bafc:	0800c1dd 	.word	0x0800c1dd
 800bb00:	0800c1dd 	.word	0x0800c1dd
 800bb04:	0800c1dd 	.word	0x0800c1dd
 800bb08:	0800c1dd 	.word	0x0800c1dd
 800bb0c:	0800c1dd 	.word	0x0800c1dd
 800bb10:	0800c1dd 	.word	0x0800c1dd
 800bb14:	0800beb9 	.word	0x0800beb9
 800bb18:	0800c1dd 	.word	0x0800c1dd
 800bb1c:	0800c1dd 	.word	0x0800c1dd
 800bb20:	0800c1dd 	.word	0x0800c1dd
 800bb24:	0800c1dd 	.word	0x0800c1dd
 800bb28:	0800c1dd 	.word	0x0800c1dd
 800bb2c:	0800c1dd 	.word	0x0800c1dd
 800bb30:	0800c1dd 	.word	0x0800c1dd
 800bb34:	0800c1dd 	.word	0x0800c1dd
 800bb38:	0800c1dd 	.word	0x0800c1dd
 800bb3c:	0800c1dd 	.word	0x0800c1dd
 800bb40:	0800c1dd 	.word	0x0800c1dd
 800bb44:	0800c1dd 	.word	0x0800c1dd
 800bb48:	0800c1dd 	.word	0x0800c1dd
 800bb4c:	0800c1dd 	.word	0x0800c1dd
 800bb50:	0800c1dd 	.word	0x0800c1dd
 800bb54:	0800c029 	.word	0x0800c029
 800bb58:	0800c1dd 	.word	0x0800c1dd
 800bb5c:	0800c1dd 	.word	0x0800c1dd
 800bb60:	0800c1dd 	.word	0x0800c1dd
 800bb64:	0800c1dd 	.word	0x0800c1dd
 800bb68:	0800c1dd 	.word	0x0800c1dd
 800bb6c:	0800c1dd 	.word	0x0800c1dd
 800bb70:	0800c1dd 	.word	0x0800c1dd
 800bb74:	0800c1dd 	.word	0x0800c1dd
 800bb78:	0800c1dd 	.word	0x0800c1dd
 800bb7c:	0800c1dd 	.word	0x0800c1dd
 800bb80:	0800c1dd 	.word	0x0800c1dd
 800bb84:	0800c1dd 	.word	0x0800c1dd
 800bb88:	0800c1dd 	.word	0x0800c1dd
 800bb8c:	0800c1dd 	.word	0x0800c1dd
 800bb90:	0800c1dd 	.word	0x0800c1dd
 800bb94:	0800c1dd 	.word	0x0800c1dd
 800bb98:	0800c1dd 	.word	0x0800c1dd
 800bb9c:	0800c1dd 	.word	0x0800c1dd
 800bba0:	0800c1dd 	.word	0x0800c1dd
 800bba4:	0800c1dd 	.word	0x0800c1dd
 800bba8:	0800c1dd 	.word	0x0800c1dd
 800bbac:	0800c1dd 	.word	0x0800c1dd
 800bbb0:	0800c1dd 	.word	0x0800c1dd
 800bbb4:	0800c1dd 	.word	0x0800c1dd
 800bbb8:	0800c1dd 	.word	0x0800c1dd
 800bbbc:	0800c1dd 	.word	0x0800c1dd
 800bbc0:	0800c1dd 	.word	0x0800c1dd
 800bbc4:	0800c1dd 	.word	0x0800c1dd
 800bbc8:	0800c1dd 	.word	0x0800c1dd
 800bbcc:	0800c1dd 	.word	0x0800c1dd
 800bbd0:	0800c1dd 	.word	0x0800c1dd
 800bbd4:	0800c11d 	.word	0x0800c11d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbd8:	f7fb fb8e 	bl	80072f8 <HAL_RCC_GetPCLK1Freq>
 800bbdc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d044      	beq.n	800bc70 <UART_SetConfig+0x1d40>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d03e      	beq.n	800bc6c <UART_SetConfig+0x1d3c>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d038      	beq.n	800bc68 <UART_SetConfig+0x1d38>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d032      	beq.n	800bc64 <UART_SetConfig+0x1d34>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d02c      	beq.n	800bc60 <UART_SetConfig+0x1d30>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	2b05      	cmp	r3, #5
 800bc0c:	d026      	beq.n	800bc5c <UART_SetConfig+0x1d2c>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	2b06      	cmp	r3, #6
 800bc14:	d020      	beq.n	800bc58 <UART_SetConfig+0x1d28>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	2b07      	cmp	r3, #7
 800bc1c:	d01a      	beq.n	800bc54 <UART_SetConfig+0x1d24>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	2b08      	cmp	r3, #8
 800bc24:	d014      	beq.n	800bc50 <UART_SetConfig+0x1d20>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	2b09      	cmp	r3, #9
 800bc2c:	d00e      	beq.n	800bc4c <UART_SetConfig+0x1d1c>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	2b0a      	cmp	r3, #10
 800bc34:	d008      	beq.n	800bc48 <UART_SetConfig+0x1d18>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3a:	2b0b      	cmp	r3, #11
 800bc3c:	d102      	bne.n	800bc44 <UART_SetConfig+0x1d14>
 800bc3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc42:	e016      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc44:	2301      	movs	r3, #1
 800bc46:	e014      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc48:	2380      	movs	r3, #128	; 0x80
 800bc4a:	e012      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc4c:	2340      	movs	r3, #64	; 0x40
 800bc4e:	e010      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc50:	2320      	movs	r3, #32
 800bc52:	e00e      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc54:	2310      	movs	r3, #16
 800bc56:	e00c      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc58:	230c      	movs	r3, #12
 800bc5a:	e00a      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc5c:	230a      	movs	r3, #10
 800bc5e:	e008      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc60:	2308      	movs	r3, #8
 800bc62:	e006      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc64:	2306      	movs	r3, #6
 800bc66:	e004      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc68:	2304      	movs	r3, #4
 800bc6a:	e002      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e000      	b.n	800bc72 <UART_SetConfig+0x1d42>
 800bc70:	2301      	movs	r3, #1
 800bc72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc74:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	085b      	lsrs	r3, r3, #1
 800bc7e:	441a      	add	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc8c:	e2aa      	b.n	800c1e4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc8e:	f7fb fb49 	bl	8007324 <HAL_RCC_GetPCLK2Freq>
 800bc92:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d044      	beq.n	800bd26 <UART_SetConfig+0x1df6>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d03e      	beq.n	800bd22 <UART_SetConfig+0x1df2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d038      	beq.n	800bd1e <UART_SetConfig+0x1dee>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d032      	beq.n	800bd1a <UART_SetConfig+0x1dea>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b04      	cmp	r3, #4
 800bcba:	d02c      	beq.n	800bd16 <UART_SetConfig+0x1de6>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b05      	cmp	r3, #5
 800bcc2:	d026      	beq.n	800bd12 <UART_SetConfig+0x1de2>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b06      	cmp	r3, #6
 800bcca:	d020      	beq.n	800bd0e <UART_SetConfig+0x1dde>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b07      	cmp	r3, #7
 800bcd2:	d01a      	beq.n	800bd0a <UART_SetConfig+0x1dda>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	d014      	beq.n	800bd06 <UART_SetConfig+0x1dd6>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	2b09      	cmp	r3, #9
 800bce2:	d00e      	beq.n	800bd02 <UART_SetConfig+0x1dd2>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b0a      	cmp	r3, #10
 800bcea:	d008      	beq.n	800bcfe <UART_SetConfig+0x1dce>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b0b      	cmp	r3, #11
 800bcf2:	d102      	bne.n	800bcfa <UART_SetConfig+0x1dca>
 800bcf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcf8:	e016      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e014      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bcfe:	2380      	movs	r3, #128	; 0x80
 800bd00:	e012      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd02:	2340      	movs	r3, #64	; 0x40
 800bd04:	e010      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd06:	2320      	movs	r3, #32
 800bd08:	e00e      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd0a:	2310      	movs	r3, #16
 800bd0c:	e00c      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	e00a      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd12:	230a      	movs	r3, #10
 800bd14:	e008      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd16:	2308      	movs	r3, #8
 800bd18:	e006      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd1a:	2306      	movs	r3, #6
 800bd1c:	e004      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd1e:	2304      	movs	r3, #4
 800bd20:	e002      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd22:	2302      	movs	r3, #2
 800bd24:	e000      	b.n	800bd28 <UART_SetConfig+0x1df8>
 800bd26:	2301      	movs	r3, #1
 800bd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd2a:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	085b      	lsrs	r3, r3, #1
 800bd34:	441a      	add	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd42:	e24f      	b.n	800c1e4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd44:	f107 0318 	add.w	r3, r7, #24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fc fc6d 	bl	8008628 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd4e:	69fa      	ldr	r2, [r7, #28]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d044      	beq.n	800bde2 <UART_SetConfig+0x1eb2>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d03e      	beq.n	800bdde <UART_SetConfig+0x1eae>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d038      	beq.n	800bdda <UART_SetConfig+0x1eaa>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d032      	beq.n	800bdd6 <UART_SetConfig+0x1ea6>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	d02c      	beq.n	800bdd2 <UART_SetConfig+0x1ea2>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	2b05      	cmp	r3, #5
 800bd7e:	d026      	beq.n	800bdce <UART_SetConfig+0x1e9e>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	2b06      	cmp	r3, #6
 800bd86:	d020      	beq.n	800bdca <UART_SetConfig+0x1e9a>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b07      	cmp	r3, #7
 800bd8e:	d01a      	beq.n	800bdc6 <UART_SetConfig+0x1e96>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	2b08      	cmp	r3, #8
 800bd96:	d014      	beq.n	800bdc2 <UART_SetConfig+0x1e92>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d00e      	beq.n	800bdbe <UART_SetConfig+0x1e8e>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	2b0a      	cmp	r3, #10
 800bda6:	d008      	beq.n	800bdba <UART_SetConfig+0x1e8a>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	2b0b      	cmp	r3, #11
 800bdae:	d102      	bne.n	800bdb6 <UART_SetConfig+0x1e86>
 800bdb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdb4:	e016      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e014      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdba:	2380      	movs	r3, #128	; 0x80
 800bdbc:	e012      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdbe:	2340      	movs	r3, #64	; 0x40
 800bdc0:	e010      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	e00e      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdc6:	2310      	movs	r3, #16
 800bdc8:	e00c      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdca:	230c      	movs	r3, #12
 800bdcc:	e00a      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdce:	230a      	movs	r3, #10
 800bdd0:	e008      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdd2:	2308      	movs	r3, #8
 800bdd4:	e006      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdd6:	2306      	movs	r3, #6
 800bdd8:	e004      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdda:	2304      	movs	r3, #4
 800bddc:	e002      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bdde:	2302      	movs	r3, #2
 800bde0:	e000      	b.n	800bde4 <UART_SetConfig+0x1eb4>
 800bde2:	2301      	movs	r3, #1
 800bde4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	085b      	lsrs	r3, r3, #1
 800bdee:	441a      	add	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdfc:	e1f2      	b.n	800c1e4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdfe:	f107 030c 	add.w	r3, r7, #12
 800be02:	4618      	mov	r0, r3
 800be04:	f7fc fd5c 	bl	80088c0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d044      	beq.n	800be9c <UART_SetConfig+0x1f6c>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be16:	2b01      	cmp	r3, #1
 800be18:	d03e      	beq.n	800be98 <UART_SetConfig+0x1f68>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d038      	beq.n	800be94 <UART_SetConfig+0x1f64>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	2b03      	cmp	r3, #3
 800be28:	d032      	beq.n	800be90 <UART_SetConfig+0x1f60>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d02c      	beq.n	800be8c <UART_SetConfig+0x1f5c>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	2b05      	cmp	r3, #5
 800be38:	d026      	beq.n	800be88 <UART_SetConfig+0x1f58>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	2b06      	cmp	r3, #6
 800be40:	d020      	beq.n	800be84 <UART_SetConfig+0x1f54>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	2b07      	cmp	r3, #7
 800be48:	d01a      	beq.n	800be80 <UART_SetConfig+0x1f50>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4e:	2b08      	cmp	r3, #8
 800be50:	d014      	beq.n	800be7c <UART_SetConfig+0x1f4c>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	2b09      	cmp	r3, #9
 800be58:	d00e      	beq.n	800be78 <UART_SetConfig+0x1f48>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	2b0a      	cmp	r3, #10
 800be60:	d008      	beq.n	800be74 <UART_SetConfig+0x1f44>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	2b0b      	cmp	r3, #11
 800be68:	d102      	bne.n	800be70 <UART_SetConfig+0x1f40>
 800be6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be6e:	e016      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be70:	2301      	movs	r3, #1
 800be72:	e014      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be74:	2380      	movs	r3, #128	; 0x80
 800be76:	e012      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be78:	2340      	movs	r3, #64	; 0x40
 800be7a:	e010      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be7c:	2320      	movs	r3, #32
 800be7e:	e00e      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be80:	2310      	movs	r3, #16
 800be82:	e00c      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be84:	230c      	movs	r3, #12
 800be86:	e00a      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be88:	230a      	movs	r3, #10
 800be8a:	e008      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be8c:	2308      	movs	r3, #8
 800be8e:	e006      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be90:	2306      	movs	r3, #6
 800be92:	e004      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be94:	2304      	movs	r3, #4
 800be96:	e002      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be98:	2302      	movs	r3, #2
 800be9a:	e000      	b.n	800be9e <UART_SetConfig+0x1f6e>
 800be9c:	2301      	movs	r3, #1
 800be9e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	085b      	lsrs	r3, r3, #1
 800bea8:	441a      	add	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800beb6:	e195      	b.n	800c1e4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beb8:	4b87      	ldr	r3, [pc, #540]	; (800c0d8 <UART_SetConfig+0x21a8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0320 	and.w	r3, r3, #32
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d05d      	beq.n	800bf80 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bec4:	4b84      	ldr	r3, [pc, #528]	; (800c0d8 <UART_SetConfig+0x21a8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	08db      	lsrs	r3, r3, #3
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	4a83      	ldr	r2, [pc, #524]	; (800c0dc <UART_SetConfig+0x21ac>)
 800bed0:	40da      	lsrs	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d044      	beq.n	800bf64 <UART_SetConfig+0x2034>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d03e      	beq.n	800bf60 <UART_SetConfig+0x2030>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d038      	beq.n	800bf5c <UART_SetConfig+0x202c>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d032      	beq.n	800bf58 <UART_SetConfig+0x2028>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d02c      	beq.n	800bf54 <UART_SetConfig+0x2024>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d026      	beq.n	800bf50 <UART_SetConfig+0x2020>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	2b06      	cmp	r3, #6
 800bf08:	d020      	beq.n	800bf4c <UART_SetConfig+0x201c>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	2b07      	cmp	r3, #7
 800bf10:	d01a      	beq.n	800bf48 <UART_SetConfig+0x2018>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf16:	2b08      	cmp	r3, #8
 800bf18:	d014      	beq.n	800bf44 <UART_SetConfig+0x2014>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1e:	2b09      	cmp	r3, #9
 800bf20:	d00e      	beq.n	800bf40 <UART_SetConfig+0x2010>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf26:	2b0a      	cmp	r3, #10
 800bf28:	d008      	beq.n	800bf3c <UART_SetConfig+0x200c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2e:	2b0b      	cmp	r3, #11
 800bf30:	d102      	bne.n	800bf38 <UART_SetConfig+0x2008>
 800bf32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf36:	e016      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e014      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	e012      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf40:	2340      	movs	r3, #64	; 0x40
 800bf42:	e010      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf44:	2320      	movs	r3, #32
 800bf46:	e00e      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf48:	2310      	movs	r3, #16
 800bf4a:	e00c      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf4c:	230c      	movs	r3, #12
 800bf4e:	e00a      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf50:	230a      	movs	r3, #10
 800bf52:	e008      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf54:	2308      	movs	r3, #8
 800bf56:	e006      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf58:	2306      	movs	r3, #6
 800bf5a:	e004      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf5c:	2304      	movs	r3, #4
 800bf5e:	e002      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf60:	2302      	movs	r3, #2
 800bf62:	e000      	b.n	800bf66 <UART_SetConfig+0x2036>
 800bf64:	2301      	movs	r3, #1
 800bf66:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	085b      	lsrs	r3, r3, #1
 800bf70:	441a      	add	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bf7e:	e131      	b.n	800c1e4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d043      	beq.n	800c010 <UART_SetConfig+0x20e0>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d03d      	beq.n	800c00c <UART_SetConfig+0x20dc>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d037      	beq.n	800c008 <UART_SetConfig+0x20d8>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d031      	beq.n	800c004 <UART_SetConfig+0x20d4>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d02b      	beq.n	800c000 <UART_SetConfig+0x20d0>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	2b05      	cmp	r3, #5
 800bfae:	d025      	beq.n	800bffc <UART_SetConfig+0x20cc>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	2b06      	cmp	r3, #6
 800bfb6:	d01f      	beq.n	800bff8 <UART_SetConfig+0x20c8>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	2b07      	cmp	r3, #7
 800bfbe:	d019      	beq.n	800bff4 <UART_SetConfig+0x20c4>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc4:	2b08      	cmp	r3, #8
 800bfc6:	d013      	beq.n	800bff0 <UART_SetConfig+0x20c0>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	2b09      	cmp	r3, #9
 800bfce:	d00d      	beq.n	800bfec <UART_SetConfig+0x20bc>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	2b0a      	cmp	r3, #10
 800bfd6:	d007      	beq.n	800bfe8 <UART_SetConfig+0x20b8>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	2b0b      	cmp	r3, #11
 800bfde:	d101      	bne.n	800bfe4 <UART_SetConfig+0x20b4>
 800bfe0:	4b3f      	ldr	r3, [pc, #252]	; (800c0e0 <UART_SetConfig+0x21b0>)
 800bfe2:	e016      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bfe4:	4b3d      	ldr	r3, [pc, #244]	; (800c0dc <UART_SetConfig+0x21ac>)
 800bfe6:	e014      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bfe8:	4b3e      	ldr	r3, [pc, #248]	; (800c0e4 <UART_SetConfig+0x21b4>)
 800bfea:	e012      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bfec:	4b3e      	ldr	r3, [pc, #248]	; (800c0e8 <UART_SetConfig+0x21b8>)
 800bfee:	e010      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bff0:	4b3e      	ldr	r3, [pc, #248]	; (800c0ec <UART_SetConfig+0x21bc>)
 800bff2:	e00e      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bff4:	4b3e      	ldr	r3, [pc, #248]	; (800c0f0 <UART_SetConfig+0x21c0>)
 800bff6:	e00c      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bff8:	4b3e      	ldr	r3, [pc, #248]	; (800c0f4 <UART_SetConfig+0x21c4>)
 800bffa:	e00a      	b.n	800c012 <UART_SetConfig+0x20e2>
 800bffc:	4b3e      	ldr	r3, [pc, #248]	; (800c0f8 <UART_SetConfig+0x21c8>)
 800bffe:	e008      	b.n	800c012 <UART_SetConfig+0x20e2>
 800c000:	4b3e      	ldr	r3, [pc, #248]	; (800c0fc <UART_SetConfig+0x21cc>)
 800c002:	e006      	b.n	800c012 <UART_SetConfig+0x20e2>
 800c004:	4b3e      	ldr	r3, [pc, #248]	; (800c100 <UART_SetConfig+0x21d0>)
 800c006:	e004      	b.n	800c012 <UART_SetConfig+0x20e2>
 800c008:	4b3e      	ldr	r3, [pc, #248]	; (800c104 <UART_SetConfig+0x21d4>)
 800c00a:	e002      	b.n	800c012 <UART_SetConfig+0x20e2>
 800c00c:	4b3e      	ldr	r3, [pc, #248]	; (800c108 <UART_SetConfig+0x21d8>)
 800c00e:	e000      	b.n	800c012 <UART_SetConfig+0x20e2>
 800c010:	4b32      	ldr	r3, [pc, #200]	; (800c0dc <UART_SetConfig+0x21ac>)
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	6852      	ldr	r2, [r2, #4]
 800c016:	0852      	lsrs	r2, r2, #1
 800c018:	441a      	add	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c022:	b29b      	uxth	r3, r3
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c026:	e0dd      	b.n	800c1e4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d046      	beq.n	800c0be <UART_SetConfig+0x218e>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b01      	cmp	r3, #1
 800c036:	d040      	beq.n	800c0ba <UART_SetConfig+0x218a>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d03a      	beq.n	800c0b6 <UART_SetConfig+0x2186>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b03      	cmp	r3, #3
 800c046:	d034      	beq.n	800c0b2 <UART_SetConfig+0x2182>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	d02e      	beq.n	800c0ae <UART_SetConfig+0x217e>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b05      	cmp	r3, #5
 800c056:	d028      	beq.n	800c0aa <UART_SetConfig+0x217a>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b06      	cmp	r3, #6
 800c05e:	d022      	beq.n	800c0a6 <UART_SetConfig+0x2176>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b07      	cmp	r3, #7
 800c066:	d01c      	beq.n	800c0a2 <UART_SetConfig+0x2172>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d016      	beq.n	800c09e <UART_SetConfig+0x216e>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	2b09      	cmp	r3, #9
 800c076:	d00f      	beq.n	800c098 <UART_SetConfig+0x2168>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b0a      	cmp	r3, #10
 800c07e:	d008      	beq.n	800c092 <UART_SetConfig+0x2162>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	2b0b      	cmp	r3, #11
 800c086:	d102      	bne.n	800c08e <UART_SetConfig+0x215e>
 800c088:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c08c:	e018      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c08e:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <UART_SetConfig+0x21c0>)
 800c090:	e016      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c092:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c096:	e013      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c098:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c09c:	e010      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c09e:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <UART_SetConfig+0x21dc>)
 800c0a0:	e00e      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <UART_SetConfig+0x21b0>)
 800c0a4:	e00c      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0a6:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <UART_SetConfig+0x21e0>)
 800c0a8:	e00a      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0aa:	4b1a      	ldr	r3, [pc, #104]	; (800c114 <UART_SetConfig+0x21e4>)
 800c0ac:	e008      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <UART_SetConfig+0x21b4>)
 800c0b0:	e006      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0b2:	4b19      	ldr	r3, [pc, #100]	; (800c118 <UART_SetConfig+0x21e8>)
 800c0b4:	e004      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0b6:	4b0c      	ldr	r3, [pc, #48]	; (800c0e8 <UART_SetConfig+0x21b8>)
 800c0b8:	e002      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <UART_SetConfig+0x21bc>)
 800c0bc:	e000      	b.n	800c0c0 <UART_SetConfig+0x2190>
 800c0be:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <UART_SetConfig+0x21c0>)
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	6852      	ldr	r2, [r2, #4]
 800c0c4:	0852      	lsrs	r2, r2, #1
 800c0c6:	441a      	add	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0d4:	e086      	b.n	800c1e4 <UART_SetConfig+0x22b4>
 800c0d6:	bf00      	nop
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	03d09000 	.word	0x03d09000
 800c0e0:	0003d090 	.word	0x0003d090
 800c0e4:	0007a120 	.word	0x0007a120
 800c0e8:	000f4240 	.word	0x000f4240
 800c0ec:	001e8480 	.word	0x001e8480
 800c0f0:	003d0900 	.word	0x003d0900
 800c0f4:	00516155 	.word	0x00516155
 800c0f8:	0061a800 	.word	0x0061a800
 800c0fc:	007a1200 	.word	0x007a1200
 800c100:	00a2c2aa 	.word	0x00a2c2aa
 800c104:	00f42400 	.word	0x00f42400
 800c108:	01e84800 	.word	0x01e84800
 800c10c:	0001e848 	.word	0x0001e848
 800c110:	00051615 	.word	0x00051615
 800c114:	00061a80 	.word	0x00061a80
 800c118:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	2b00      	cmp	r3, #0
 800c122:	d04e      	beq.n	800c1c2 <UART_SetConfig+0x2292>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d047      	beq.n	800c1bc <UART_SetConfig+0x228c>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c130:	2b02      	cmp	r3, #2
 800c132:	d040      	beq.n	800c1b6 <UART_SetConfig+0x2286>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d039      	beq.n	800c1b0 <UART_SetConfig+0x2280>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	2b04      	cmp	r3, #4
 800c142:	d032      	beq.n	800c1aa <UART_SetConfig+0x227a>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c148:	2b05      	cmp	r3, #5
 800c14a:	d02b      	beq.n	800c1a4 <UART_SetConfig+0x2274>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	2b06      	cmp	r3, #6
 800c152:	d024      	beq.n	800c19e <UART_SetConfig+0x226e>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	2b07      	cmp	r3, #7
 800c15a:	d01d      	beq.n	800c198 <UART_SetConfig+0x2268>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	2b08      	cmp	r3, #8
 800c162:	d016      	beq.n	800c192 <UART_SetConfig+0x2262>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c168:	2b09      	cmp	r3, #9
 800c16a:	d00f      	beq.n	800c18c <UART_SetConfig+0x225c>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c170:	2b0a      	cmp	r3, #10
 800c172:	d008      	beq.n	800c186 <UART_SetConfig+0x2256>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	2b0b      	cmp	r3, #11
 800c17a:	d101      	bne.n	800c180 <UART_SetConfig+0x2250>
 800c17c:	2380      	movs	r3, #128	; 0x80
 800c17e:	e022      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c184:	e01f      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c18a:	e01c      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c18c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c190:	e019      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c196:	e016      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c19c:	e013      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c19e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c1a2:	e010      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c1a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c1a8:	e00d      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c1aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1ae:	e00a      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c1b0:	f241 5355 	movw	r3, #5461	; 0x1555
 800c1b4:	e007      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c1b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1ba:	e004      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c1bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1c0:	e001      	b.n	800c1c6 <UART_SetConfig+0x2296>
 800c1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	6852      	ldr	r2, [r2, #4]
 800c1ca:	0852      	lsrs	r2, r2, #1
 800c1cc:	441a      	add	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1da:	e003      	b.n	800c1e4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c1e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d908      	bls.n	800c1fc <UART_SetConfig+0x22cc>
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f0:	d204      	bcs.n	800c1fc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1f8:	60da      	str	r2, [r3, #12]
 800c1fa:	e002      	b.n	800c202 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c21e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c222:	4618      	mov	r0, r3
 800c224:	3740      	adds	r7, #64	; 0x40
 800c226:	46bd      	mov	sp, r7
 800c228:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c22c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25a:	f003 0302 	and.w	r3, r3, #2
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00a      	beq.n	800c29a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	430a      	orrs	r2, r1
 800c298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29e:	f003 0308 	and.w	r3, r3, #8
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	f003 0310 	and.w	r3, r3, #16
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00a      	beq.n	800c2de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	f003 0320 	and.w	r3, r3, #32
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d01a      	beq.n	800c342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c32a:	d10a      	bne.n	800c342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	430a      	orrs	r2, r1
 800c340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	430a      	orrs	r2, r1
 800c362:	605a      	str	r2, [r3, #4]
  }
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af02      	add	r7, sp, #8
 800c376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c380:	f7f5 ff26 	bl	80021d0 <HAL_GetTick>
 800c384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 0308 	and.w	r3, r3, #8
 800c390:	2b08      	cmp	r3, #8
 800c392:	d10e      	bne.n	800c3b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f82c 	bl	800c400 <UART_WaitOnFlagUntilTimeout>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	e022      	b.n	800c3f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d10e      	bne.n	800c3de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 f816 	bl	800c400 <UART_WaitOnFlagUntilTimeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e00c      	b.n	800c3f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2220      	movs	r2, #32
 800c3ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	4613      	mov	r3, r2
 800c40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c410:	e062      	b.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c418:	d05e      	beq.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c41a:	f7f5 fed9 	bl	80021d0 <HAL_GetTick>
 800c41e:	4602      	mov	r2, r0
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	429a      	cmp	r2, r3
 800c428:	d302      	bcc.n	800c430 <UART_WaitOnFlagUntilTimeout+0x30>
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d11d      	bne.n	800c46c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c43e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689a      	ldr	r2, [r3, #8]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0201 	bic.w	r2, r2, #1
 800c44e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2220      	movs	r2, #32
 800c454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2220      	movs	r2, #32
 800c45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e045      	b.n	800c4f8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0304 	and.w	r3, r3, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	d02e      	beq.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	69db      	ldr	r3, [r3, #28]
 800c480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c488:	d126      	bne.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c492:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f022 0201 	bic.w	r2, r2, #1
 800c4b2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2220      	movs	r2, #32
 800c4b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2220      	movs	r2, #32
 800c4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e00f      	b.n	800c4f8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	69da      	ldr	r2, [r3, #28]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2301      	moveq	r3, #1
 800c4ea:	2300      	movne	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d08d      	beq.n	800c412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c516:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689a      	ldr	r2, [r3, #8]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c526:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c552:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6899      	ldr	r1, [r3, #8]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b08      	ldr	r3, [pc, #32]	; (800c580 <UART_EndRxTransfer+0x44>)
 800c560:	400b      	ands	r3, r1
 800c562:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2220      	movs	r2, #32
 800c568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c572:	bf00      	nop
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	effffffe 	.word	0xeffffffe

0800c584 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c590:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	69db      	ldr	r3, [r3, #28]
 800c596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59a:	d01f      	beq.n	800c5dc <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5b2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689a      	ldr	r2, [r3, #8]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f022 0201 	bic.w	r2, r2, #1
 800c5c2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	689a      	ldr	r2, [r3, #8]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5d2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7f4 f8b3 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f7fd fc85 	bl	8009f08 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b086      	sub	sp, #24
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c612:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c61a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c622:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c62e:	2b80      	cmp	r3, #128	; 0x80
 800c630:	d109      	bne.n	800c646 <UART_DMAError+0x40>
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	2b21      	cmp	r3, #33	; 0x21
 800c636:	d106      	bne.n	800c646 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c640:	6978      	ldr	r0, [r7, #20]
 800c642:	f7ff ff5d 	bl	800c500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c650:	2b40      	cmp	r3, #64	; 0x40
 800c652:	d109      	bne.n	800c668 <UART_DMAError+0x62>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b22      	cmp	r3, #34	; 0x22
 800c658:	d106      	bne.n	800c668 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c662:	6978      	ldr	r0, [r7, #20]
 800c664:	f7ff ff6a 	bl	800c53c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66e:	f043 0210 	orr.w	r2, r3, #16
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c678:	6978      	ldr	r0, [r7, #20]
 800c67a:	f7fd fc4f 	bl	8009f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c67e:	bf00      	nop
 800c680:	3718      	adds	r7, #24
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b084      	sub	sp, #16
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7fd fc39 	bl	8009f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6aa:	bf00      	nop
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6c0:	2b21      	cmp	r3, #33	; 0x21
 800c6c2:	d12a      	bne.n	800c71a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d110      	bne.n	800c6f2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6de:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6ee:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c6f0:	e013      	b.n	800c71a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f6:	781a      	ldrb	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c70e:	b29b      	uxth	r3, r3
 800c710:	3b01      	subs	r3, #1
 800c712:	b29a      	uxth	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c71a:	bf00      	nop
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c726:	b480      	push	{r7}
 800c728:	b085      	sub	sp, #20
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c734:	2b21      	cmp	r3, #33	; 0x21
 800c736:	d12f      	bne.n	800c798 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c73e:	b29b      	uxth	r3, r3
 800c740:	2b00      	cmp	r3, #0
 800c742:	d110      	bne.n	800c766 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c752:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c762:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c764:	e018      	b.n	800c798 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c76a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	461a      	mov	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c77a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c780:	1c9a      	adds	r2, r3, #2
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c798:	bf00      	nop
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7b2:	2b21      	cmp	r3, #33	; 0x21
 800c7b4:	d13d      	bne.n	800c832 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7bc:	81fb      	strh	r3, [r7, #14]
 800c7be:	e035      	b.n	800c82c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d111      	bne.n	800c7f0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c7da:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ea:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c7ec:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c7ee:	e020      	b.n	800c832 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d013      	beq.n	800c826 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	3b01      	subs	r3, #1
 800c81e:	b29a      	uxth	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c826:	89fb      	ldrh	r3, [r7, #14]
 800c828:	3b01      	subs	r3, #1
 800c82a:	81fb      	strh	r3, [r7, #14]
 800c82c:	89fb      	ldrh	r3, [r7, #14]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1c6      	bne.n	800c7c0 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c832:	bf00      	nop
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c83e:	b480      	push	{r7}
 800c840:	b085      	sub	sp, #20
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c84c:	2b21      	cmp	r3, #33	; 0x21
 800c84e:	d142      	bne.n	800c8d6 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c856:	81fb      	strh	r3, [r7, #14]
 800c858:	e03a      	b.n	800c8d0 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c860:	b29b      	uxth	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	d111      	bne.n	800c88a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	689a      	ldr	r2, [r3, #8]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c874:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c884:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c886:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c888:	e025      	b.n	800c8d6 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c894:	2b00      	cmp	r3, #0
 800c896:	d018      	beq.n	800c8ca <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c89c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8ac:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8ca:	89fb      	ldrh	r3, [r7, #14]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	81fb      	strh	r3, [r7, #14]
 800c8d0:	89fb      	ldrh	r3, [r7, #14]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1c1      	bne.n	800c85a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c8d6:	bf00      	nop
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7f3 fedb 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c924:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c92c:	2b22      	cmp	r3, #34	; 0x22
 800c92e:	d13b      	bne.n	800c9a8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c938:	89bb      	ldrh	r3, [r7, #12]
 800c93a:	b2d9      	uxtb	r1, r3
 800c93c:	89fb      	ldrh	r3, [r7, #14]
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c944:	400a      	ands	r2, r1
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d122      	bne.n	800c9b8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c980:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	689a      	ldr	r2, [r3, #8]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0201 	bic.w	r2, r2, #1
 800c990:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2220      	movs	r2, #32
 800c996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7f3 fed1 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9a6:	e007      	b.n	800c9b8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	699a      	ldr	r2, [r3, #24]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f042 0208 	orr.w	r2, r2, #8
 800c9b6:	619a      	str	r2, [r3, #24]
}
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9d6:	2b22      	cmp	r3, #34	; 0x22
 800c9d8:	d13b      	bne.n	800ca52 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c9e8:	89ba      	ldrh	r2, [r7, #12]
 800c9ea:	89fb      	ldrh	r3, [r7, #14]
 800c9ec:	4013      	ands	r3, r2
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f8:	1c9a      	adds	r2, r3, #2
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d122      	bne.n	800ca62 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca2a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	689a      	ldr	r2, [r3, #8]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f022 0201 	bic.w	r2, r2, #1
 800ca3a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7f3 fe7c 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca50:	e007      	b.n	800ca62 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	699a      	ldr	r2, [r3, #24]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f042 0208 	orr.w	r2, r2, #8
 800ca60:	619a      	str	r2, [r3, #24]
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
	...

0800ca6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca7a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca82:	2b22      	cmp	r3, #34	; 0x22
 800ca84:	d166      	bne.n	800cb54 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca8c:	81fb      	strh	r3, [r7, #14]
 800ca8e:	e03d      	b.n	800cb0c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca96:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca98:	893b      	ldrh	r3, [r7, #8]
 800ca9a:	b2d9      	uxtb	r1, r3
 800ca9c:	89bb      	ldrh	r3, [r7, #12]
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa4:	400a      	ands	r2, r1
 800caa6:	b2d2      	uxtb	r2, r2
 800caa8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caba:	b29b      	uxth	r3, r3
 800cabc:	3b01      	subs	r3, #1
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cacc:	b29b      	uxth	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d119      	bne.n	800cb06 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cae0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6899      	ldr	r1, [r3, #8]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	4b1f      	ldr	r3, [pc, #124]	; (800cb6c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800caee:	400b      	ands	r3, r1
 800caf0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7f3 fe21 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb06:	89fb      	ldrh	r3, [r7, #14]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	81fb      	strh	r3, [r7, #14]
 800cb0c:	89fb      	ldrh	r3, [r7, #14]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1be      	bne.n	800ca90 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb18:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb1a:	897b      	ldrh	r3, [r7, #10]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d021      	beq.n	800cb64 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb26:	897a      	ldrh	r2, [r7, #10]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d21b      	bcs.n	800cb64 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	689a      	ldr	r2, [r3, #8]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb3a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a0c      	ldr	r2, [pc, #48]	; (800cb70 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800cb40:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f042 0220 	orr.w	r2, r2, #32
 800cb50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb52:	e007      	b.n	800cb64 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	699a      	ldr	r2, [r3, #24]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f042 0208 	orr.w	r2, r2, #8
 800cb62:	619a      	str	r2, [r3, #24]
}
 800cb64:	bf00      	nop
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	effffffe 	.word	0xeffffffe
 800cb70:	0800c917 	.word	0x0800c917

0800cb74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb82:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb8a:	2b22      	cmp	r3, #34	; 0x22
 800cb8c:	d166      	bne.n	800cc5c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb94:	82fb      	strh	r3, [r7, #22]
 800cb96:	e03d      	b.n	800cc14 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cba6:	8a3a      	ldrh	r2, [r7, #16]
 800cba8:	8abb      	ldrh	r3, [r7, #20]
 800cbaa:	4013      	ands	r3, r2
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb6:	1c9a      	adds	r2, r3, #2
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d119      	bne.n	800cc0e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbe8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	6899      	ldr	r1, [r3, #8]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	4b1f      	ldr	r3, [pc, #124]	; (800cc74 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cbf6:	400b      	ands	r3, r1
 800cbf8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2220      	movs	r2, #32
 800cbfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7f3 fd9d 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cc0e:	8afb      	ldrh	r3, [r7, #22]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	82fb      	strh	r3, [r7, #22]
 800cc14:	8afb      	ldrh	r3, [r7, #22]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1be      	bne.n	800cb98 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc20:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc22:	8a7b      	ldrh	r3, [r7, #18]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d021      	beq.n	800cc6c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc2e:	8a7a      	ldrh	r2, [r7, #18]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d21b      	bcs.n	800cc6c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689a      	ldr	r2, [r3, #8]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cc42:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a0c      	ldr	r2, [pc, #48]	; (800cc78 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800cc48:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f042 0220 	orr.w	r2, r2, #32
 800cc58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc5a:	e007      	b.n	800cc6c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	699a      	ldr	r2, [r3, #24]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f042 0208 	orr.w	r2, r2, #8
 800cc6a:	619a      	str	r2, [r3, #24]
}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	effffffe 	.word	0xeffffffe
 800cc78:	0800c9c1 	.word	0x0800c9c1

0800cc7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d101      	bne.n	800ccce <HAL_UARTEx_DisableFifoMode+0x16>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e027      	b.n	800cd1e <HAL_UARTEx_DisableFifoMode+0x66>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2224      	movs	r2, #36	; 0x24
 800ccda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0201 	bic.w	r2, r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ccfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d101      	bne.n	800cd42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd3e:	2302      	movs	r3, #2
 800cd40:	e02d      	b.n	800cd9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2224      	movs	r2, #36	; 0x24
 800cd4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 0201 	bic.w	r2, r2, #1
 800cd68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	430a      	orrs	r2, r1
 800cd7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f850 	bl	800ce24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2220      	movs	r2, #32
 800cd90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cdba:	2302      	movs	r3, #2
 800cdbc:	e02d      	b.n	800ce1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2224      	movs	r2, #36	; 0x24
 800cdca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f022 0201 	bic.w	r2, r2, #1
 800cde4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	683a      	ldr	r2, [r7, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f812 	bl	800ce24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2220      	movs	r2, #32
 800ce0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
	...

0800ce24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b089      	sub	sp, #36	; 0x24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ce2c:	4a2f      	ldr	r2, [pc, #188]	; (800ceec <UARTEx_SetNbDataToProcess+0xc8>)
 800ce2e:	f107 0314 	add.w	r3, r7, #20
 800ce32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce36:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ce3a:	4a2d      	ldr	r2, [pc, #180]	; (800cef0 <UARTEx_SetNbDataToProcess+0xcc>)
 800ce3c:	f107 030c 	add.w	r3, r7, #12
 800ce40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce44:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d108      	bne.n	800ce62 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce60:	e03d      	b.n	800cede <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce62:	2308      	movs	r3, #8
 800ce64:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce66:	2308      	movs	r3, #8
 800ce68:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	0e5b      	lsrs	r3, r3, #25
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 0307 	and.w	r3, r3, #7
 800ce78:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	0f5b      	lsrs	r3, r3, #29
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 0307 	and.w	r3, r3, #7
 800ce88:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ce8a:	7fbb      	ldrb	r3, [r7, #30]
 800ce8c:	7f3a      	ldrb	r2, [r7, #28]
 800ce8e:	f107 0120 	add.w	r1, r7, #32
 800ce92:	440a      	add	r2, r1
 800ce94:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ce98:	fb02 f303 	mul.w	r3, r2, r3
 800ce9c:	7f3a      	ldrb	r2, [r7, #28]
 800ce9e:	f107 0120 	add.w	r1, r7, #32
 800cea2:	440a      	add	r2, r1
 800cea4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ceb4:	7ffb      	ldrb	r3, [r7, #31]
 800ceb6:	7f7a      	ldrb	r2, [r7, #29]
 800ceb8:	f107 0120 	add.w	r1, r7, #32
 800cebc:	440a      	add	r2, r1
 800cebe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cec2:	fb02 f303 	mul.w	r3, r2, r3
 800cec6:	7f7a      	ldrb	r2, [r7, #29]
 800cec8:	f107 0120 	add.w	r1, r7, #32
 800cecc:	440a      	add	r2, r1
 800cece:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ced2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cede:	bf00      	nop
 800cee0:	3724      	adds	r7, #36	; 0x24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	0800cf64 	.word	0x0800cf64
 800cef0:	0800cf6c 	.word	0x0800cf6c

0800cef4 <__libc_init_array>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4e0d      	ldr	r6, [pc, #52]	; (800cf2c <__libc_init_array+0x38>)
 800cef8:	4c0d      	ldr	r4, [pc, #52]	; (800cf30 <__libc_init_array+0x3c>)
 800cefa:	1ba4      	subs	r4, r4, r6
 800cefc:	10a4      	asrs	r4, r4, #2
 800cefe:	2500      	movs	r5, #0
 800cf00:	42a5      	cmp	r5, r4
 800cf02:	d109      	bne.n	800cf18 <__libc_init_array+0x24>
 800cf04:	4e0b      	ldr	r6, [pc, #44]	; (800cf34 <__libc_init_array+0x40>)
 800cf06:	4c0c      	ldr	r4, [pc, #48]	; (800cf38 <__libc_init_array+0x44>)
 800cf08:	f000 f820 	bl	800cf4c <_init>
 800cf0c:	1ba4      	subs	r4, r4, r6
 800cf0e:	10a4      	asrs	r4, r4, #2
 800cf10:	2500      	movs	r5, #0
 800cf12:	42a5      	cmp	r5, r4
 800cf14:	d105      	bne.n	800cf22 <__libc_init_array+0x2e>
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf1c:	4798      	blx	r3
 800cf1e:	3501      	adds	r5, #1
 800cf20:	e7ee      	b.n	800cf00 <__libc_init_array+0xc>
 800cf22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf26:	4798      	blx	r3
 800cf28:	3501      	adds	r5, #1
 800cf2a:	e7f2      	b.n	800cf12 <__libc_init_array+0x1e>
 800cf2c:	0800cf94 	.word	0x0800cf94
 800cf30:	0800cf94 	.word	0x0800cf94
 800cf34:	0800cf94 	.word	0x0800cf94
 800cf38:	0800cf98 	.word	0x0800cf98

0800cf3c <memset>:
 800cf3c:	4402      	add	r2, r0
 800cf3e:	4603      	mov	r3, r0
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d100      	bne.n	800cf46 <memset+0xa>
 800cf44:	4770      	bx	lr
 800cf46:	f803 1b01 	strb.w	r1, [r3], #1
 800cf4a:	e7f9      	b.n	800cf40 <memset+0x4>

0800cf4c <_init>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	bf00      	nop
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr

0800cf58 <_fini>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr
