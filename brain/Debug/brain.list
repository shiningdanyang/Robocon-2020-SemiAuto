
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c874  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb34  0800cb34  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb34  0800cb34  0001cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb3c  0800cb3c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb3c  0800cb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  24000000  0800cb44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  24000038  0800cb78  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000c3c  0800cb78  00020c3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fa7  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f82  00000000  00000000  00041009  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  00043f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00045620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038678  00000000  00000000  00046bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012754  00000000  00000000  0007f228  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173a1d  00000000  00000000  0009197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00205399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  00205414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800caf4 	.word	0x0800caf4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	0800caf4 	.word	0x0800caf4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000024 	.word	0x24000024
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f008 ff30 	bl	80094f0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f009 f803 	bl	80096a0 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f008 fffe 	bl	80096a0 <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000014 	.word	0x24000014
 80006ac:	24000b44 	.word	0x24000b44
 80006b0:	24000a90 	.word	0x24000a90
 80006b4:	24000b1c 	.word	0x24000b1c
 80006b8:	240001b4 	.word	0x240001b4
 80006bc:	240006d0 	.word	0x240006d0
 80006c0:	24000920 	.word	0x24000920

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000920 	.word	0x24000920
 800072c:	240002a8 	.word	0x240002a8
 8000730:	240001b4 	.word	0x240001b4
 8000734:	24000a68 	.word	0x24000a68
 8000738:	24000a90 	.word	0x24000a90
 800073c:	24000790 	.word	0x24000790
 8000740:	24000088 	.word	0x24000088
 8000744:	24000114 	.word	0x24000114

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 fd92 	bl	80092bc <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f008 fea4 	bl	80094f0 <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000920 	.word	0x24000920
 80007c8:	24000061 	.word	0x24000061
 80007cc:	240001b4 	.word	0x240001b4
 80007d0:	24000a68 	.word	0x24000a68
 80007d4:	24000a90 	.word	0x24000a90
 80007d8:	24000b44 	.word	0x24000b44
 80007dc:	24000014 	.word	0x24000014
 80007e0:	24000c30 	.word	0x24000c30
 80007e4:	24000088 	.word	0x24000088
 80007e8:	24000a70 	.word	0x24000a70

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f008 fdf4 	bl	80093e8 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000920 	.word	0x24000920

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f008 fde1 	bl	80093e8 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000920 	.word	0x24000920

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	240002a8 	.word	0x240002a8

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 fdc1 	bl	80093e8 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	24000014 	.word	0x24000014
 8000874:	24000a90 	.word	0x24000a90

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	24000790 	.word	0x24000790

0800089c <peripheralADC_Init>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <controlMotor1>:
void roR_pit_yaw_mixSpeed(void);
void brake(void);

#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bfb8      	it	lt
 80008ba:	425b      	neglt	r3, r3
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <controlMotor1+0x48>)
 80008c0:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db07      	blt.n	80008d8 <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <controlMotor1+0x48>)
 80008ca:	7a1b      	ldrb	r3, [r3, #8]
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <controlMotor1+0x48>)
 80008d4:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 80008d6:	e006      	b.n	80008e6 <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <controlMotor1+0x48>)
 80008da:	7a1b      	ldrb	r3, [r3, #8]
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <controlMotor1+0x48>)
 80008e4:	721a      	strb	r2, [r3, #8]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	24000014 	.word	0x24000014

080008f8 <controlMotor2>:
void controlMotor2(int _speed)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfb8      	it	lt
 8000906:	425b      	neglt	r3, r3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <controlMotor2+0x48>)
 800090c:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db07      	blt.n	8000924 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <controlMotor2+0x48>)
 8000916:	7a1b      	ldrb	r3, [r3, #8]
 8000918:	f023 0302 	bic.w	r3, r3, #2
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <controlMotor2+0x48>)
 8000920:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000922:	e006      	b.n	8000932 <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <controlMotor2+0x48>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <controlMotor2+0x48>)
 8000930:	721a      	strb	r2, [r3, #8]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	24000014 	.word	0x24000014

08000944 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <controlMotor3+0x48>)
 8000958:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db07      	blt.n	8000970 <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <controlMotor3+0x48>)
 8000962:	7a1b      	ldrb	r3, [r3, #8]
 8000964:	f023 0304 	bic.w	r3, r3, #4
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <controlMotor3+0x48>)
 800096c:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 800096e:	e006      	b.n	800097e <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <controlMotor3+0x48>)
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <controlMotor3+0x48>)
 800097c:	721a      	strb	r2, [r3, #8]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	24000014 	.word	0x24000014

08000990 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	bfb8      	it	lt
 800099e:	425b      	neglt	r3, r3
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <controlMotor4+0x48>)
 80009a4:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	db07      	blt.n	80009bc <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <controlMotor4+0x48>)
 80009ae:	7a1b      	ldrb	r3, [r3, #8]
 80009b0:	f023 0308 	bic.w	r3, r3, #8
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <controlMotor4+0x48>)
 80009b8:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 80009ba:	e006      	b.n	80009ca <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <controlMotor4+0x48>)
 80009be:	7a1b      	ldrb	r3, [r3, #8]
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <controlMotor4+0x48>)
 80009c8:	721a      	strb	r2, [r3, #8]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	24000014 	.word	0x24000014

080009dc <testPWM>:
void testPWM(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
  for(int i = -1; i > -255; --i)
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e034      	b.n	8000a54 <testPWM+0x78>
  {
	  controlMotor1(i);
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff5e 	bl	80008ac <controlMotor1>
	  controlMotor2(i);
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff ff81 	bl	80008f8 <controlMotor2>
	  controlMotor3(i);
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff ffa4 	bl	8000944 <controlMotor3>
	  controlMotor4(i);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ffc7 	bl	8000990 <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000a02:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <testPWM+0x1ec>)
 8000a04:	7a5b      	ldrb	r3, [r3, #9]
 8000a06:	3341      	adds	r3, #65	; 0x41
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <testPWM+0x1f0>)
 8000a0c:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000a0e:	4b6e      	ldr	r3, [pc, #440]	; (8000bc8 <testPWM+0x1ec>)
 8000a10:	7a9b      	ldrb	r3, [r3, #10]
 8000a12:	3341      	adds	r3, #65	; 0x41
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b6d      	ldr	r3, [pc, #436]	; (8000bcc <testPWM+0x1f0>)
 8000a18:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000a1a:	4b6b      	ldr	r3, [pc, #428]	; (8000bc8 <testPWM+0x1ec>)
 8000a1c:	7adb      	ldrb	r3, [r3, #11]
 8000a1e:	3341      	adds	r3, #65	; 0x41
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b6a      	ldr	r3, [pc, #424]	; (8000bcc <testPWM+0x1f0>)
 8000a24:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000a26:	4b68      	ldr	r3, [pc, #416]	; (8000bc8 <testPWM+0x1ec>)
 8000a28:	7b1b      	ldrb	r3, [r3, #12]
 8000a2a:	3341      	adds	r3, #65	; 0x41
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <testPWM+0x1f0>)
 8000a30:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000a32:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <testPWM+0x1f0>)
 8000a34:	220a      	movs	r2, #10
 8000a36:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000a38:	f7ff ff0e 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000a3c:	2332      	movs	r3, #50	; 0x32
 8000a3e:	2205      	movs	r2, #5
 8000a40:	4962      	ldr	r1, [pc, #392]	; (8000bcc <testPWM+0x1f0>)
 8000a42:	4863      	ldr	r0, [pc, #396]	; (8000bd0 <testPWM+0x1f4>)
 8000a44:	f008 fc3a 	bl	80092bc <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f001 fc3f 	bl	80022cc <HAL_Delay>
  for(int i = -1; i > -255; --i)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000a5a:	dac6      	bge.n	80009ea <testPWM+0xe>
  }
  for(int i = -255; i < 0; ++i)
 8000a5c:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	e034      	b.n	8000ace <testPWM+0xf2>
  {
	  controlMotor1(i);
 8000a64:	68b8      	ldr	r0, [r7, #8]
 8000a66:	f7ff ff21 	bl	80008ac <controlMotor1>
	  controlMotor2(i);
 8000a6a:	68b8      	ldr	r0, [r7, #8]
 8000a6c:	f7ff ff44 	bl	80008f8 <controlMotor2>
	  controlMotor3(i);
 8000a70:	68b8      	ldr	r0, [r7, #8]
 8000a72:	f7ff ff67 	bl	8000944 <controlMotor3>
	  controlMotor4(i);
 8000a76:	68b8      	ldr	r0, [r7, #8]
 8000a78:	f7ff ff8a 	bl	8000990 <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000a7c:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <testPWM+0x1ec>)
 8000a7e:	7a5b      	ldrb	r3, [r3, #9]
 8000a80:	3341      	adds	r3, #65	; 0x41
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <testPWM+0x1f0>)
 8000a86:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <testPWM+0x1ec>)
 8000a8a:	7a9b      	ldrb	r3, [r3, #10]
 8000a8c:	3341      	adds	r3, #65	; 0x41
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <testPWM+0x1f0>)
 8000a92:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000a94:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <testPWM+0x1ec>)
 8000a96:	7adb      	ldrb	r3, [r3, #11]
 8000a98:	3341      	adds	r3, #65	; 0x41
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <testPWM+0x1f0>)
 8000a9e:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000aa0:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <testPWM+0x1ec>)
 8000aa2:	7b1b      	ldrb	r3, [r3, #12]
 8000aa4:	3341      	adds	r3, #65	; 0x41
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <testPWM+0x1f0>)
 8000aaa:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000aac:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <testPWM+0x1f0>)
 8000aae:	220a      	movs	r2, #10
 8000ab0:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000ab2:	f7ff fed1 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000ab6:	2332      	movs	r3, #50	; 0x32
 8000ab8:	2205      	movs	r2, #5
 8000aba:	4944      	ldr	r1, [pc, #272]	; (8000bcc <testPWM+0x1f0>)
 8000abc:	4844      	ldr	r0, [pc, #272]	; (8000bd0 <testPWM+0x1f4>)
 8000abe:	f008 fbfd 	bl	80092bc <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000ac2:	2014      	movs	r0, #20
 8000ac4:	f001 fc02 	bl	80022cc <HAL_Delay>
  for(int i = -255; i < 0; ++i)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dbc7      	blt.n	8000a64 <testPWM+0x88>
  }
  for(int i = 1 ; i < 255; ++i)
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	e034      	b.n	8000b44 <testPWM+0x168>
  {
	  controlMotor1(i);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fee6 	bl	80008ac <controlMotor1>
	  controlMotor2(i);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff09 	bl	80008f8 <controlMotor2>
	  controlMotor3(i);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff2c 	bl	8000944 <controlMotor3>
	  controlMotor4(i);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff4f 	bl	8000990 <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <testPWM+0x1ec>)
 8000af4:	7a5b      	ldrb	r3, [r3, #9]
 8000af6:	3341      	adds	r3, #65	; 0x41
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <testPWM+0x1f0>)
 8000afc:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <testPWM+0x1ec>)
 8000b00:	7a9b      	ldrb	r3, [r3, #10]
 8000b02:	3341      	adds	r3, #65	; 0x41
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <testPWM+0x1f0>)
 8000b08:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <testPWM+0x1ec>)
 8000b0c:	7adb      	ldrb	r3, [r3, #11]
 8000b0e:	3341      	adds	r3, #65	; 0x41
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <testPWM+0x1f0>)
 8000b14:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <testPWM+0x1ec>)
 8000b18:	7b1b      	ldrb	r3, [r3, #12]
 8000b1a:	3341      	adds	r3, #65	; 0x41
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <testPWM+0x1f0>)
 8000b20:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <testPWM+0x1f0>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000b28:	f7ff fe96 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000b2c:	2332      	movs	r3, #50	; 0x32
 8000b2e:	2205      	movs	r2, #5
 8000b30:	4926      	ldr	r1, [pc, #152]	; (8000bcc <testPWM+0x1f0>)
 8000b32:	4827      	ldr	r0, [pc, #156]	; (8000bd0 <testPWM+0x1f4>)
 8000b34:	f008 fbc2 	bl	80092bc <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000b38:	2014      	movs	r0, #20
 8000b3a:	f001 fbc7 	bl	80022cc <HAL_Delay>
  for(int i = 1 ; i < 255; ++i)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2bfe      	cmp	r3, #254	; 0xfe
 8000b48:	ddc7      	ble.n	8000ada <testPWM+0xfe>
  }
  for(int i = 255; i > 0; --i)
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	e034      	b.n	8000bba <testPWM+0x1de>
  {
	  controlMotor1(i);
 8000b50:	6838      	ldr	r0, [r7, #0]
 8000b52:	f7ff feab 	bl	80008ac <controlMotor1>
	  controlMotor2(i);
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f7ff fece 	bl	80008f8 <controlMotor2>
	  controlMotor3(i);
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f7ff fef1 	bl	8000944 <controlMotor3>
	  controlMotor4(i);
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f7ff ff14 	bl	8000990 <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <testPWM+0x1ec>)
 8000b6a:	7a5b      	ldrb	r3, [r3, #9]
 8000b6c:	3341      	adds	r3, #65	; 0x41
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <testPWM+0x1f0>)
 8000b72:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <testPWM+0x1ec>)
 8000b76:	7a9b      	ldrb	r3, [r3, #10]
 8000b78:	3341      	adds	r3, #65	; 0x41
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <testPWM+0x1f0>)
 8000b7e:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <testPWM+0x1ec>)
 8000b82:	7adb      	ldrb	r3, [r3, #11]
 8000b84:	3341      	adds	r3, #65	; 0x41
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <testPWM+0x1f0>)
 8000b8a:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <testPWM+0x1ec>)
 8000b8e:	7b1b      	ldrb	r3, [r3, #12]
 8000b90:	3341      	adds	r3, #65	; 0x41
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <testPWM+0x1f0>)
 8000b96:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <testPWM+0x1f0>)
 8000b9a:	220a      	movs	r2, #10
 8000b9c:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000b9e:	f7ff fe5b 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000ba2:	2332      	movs	r3, #50	; 0x32
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	4909      	ldr	r1, [pc, #36]	; (8000bcc <testPWM+0x1f0>)
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <testPWM+0x1f4>)
 8000baa:	f008 fb87 	bl	80092bc <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000bae:	2014      	movs	r0, #20
 8000bb0:	f001 fb8c 	bl	80022cc <HAL_Delay>
  for(int i = 255; i > 0; --i)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dcc7      	bgt.n	8000b50 <testPWM+0x174>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000014 	.word	0x24000014
 8000bcc:	2400000c 	.word	0x2400000c
 8000bd0:	240001b4 	.word	0x240001b4

08000bd4 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fe67 	bl	80008ac <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8000bde:	f04f 30ff 	mov.w	r0, #4294967295
 8000be2:	f7ff fe89 	bl	80008f8 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff feac 	bl	8000944 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff fece 	bl	8000990 <controlMotor4>
	spinalCordTrans();
 8000bf4:	f7ff fe30 	bl	8000858 <spinalCordTrans>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <positionControl_Init+0x18>)
 8000c02:	f008 f859 	bl	8008cb8 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <positionControl_Init+0x1c>)
 8000c0c:	f005 f9aa 	bl	8005f64 <HAL_GPIO_WritePin>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24000bd8 	.word	0x24000bd8
 8000c18:	58021000 	.word	0x58021000

08000c1c <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d16e      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8000c30:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d16a      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11e      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	4837      	ldr	r0, [pc, #220]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c48:	f005 f98c 	bl	8005f64 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c50:	4834      	ldr	r0, [pc, #208]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c52:	f005 f9a0 	bl	8005f96 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c5e:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c68:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2bc7      	cmp	r3, #199	; 0xc7
 8000c70:	dd05      	ble.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d11f      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4825      	ldr	r0, [pc, #148]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c8e:	f005 f969 	bl	8005f64 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c96:	4823      	ldr	r0, [pc, #140]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c98:	f005 f97d 	bl	8005f96 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ca4:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cae:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000cb8:	db05      	blt.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d11f      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000cd6:	f005 f945 	bl	8005f64 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cde:	4811      	ldr	r0, [pc, #68]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ce0:	f005 f959 	bl	8005f96 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000cec:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cf6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000d00:	db05      	blt.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000bd8 	.word	0x24000bd8
 8000d1c:	240009b8 	.word	0x240009b8
 8000d20:	24000b24 	.word	0x24000b24
 8000d24:	58020c00 	.word	0x58020c00
 8000d28:	240009b0 	.word	0x240009b0
 8000d2c:	24000a6c 	.word	0x24000a6c

08000d30 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e01f      	b.n	8000d80 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000d50:	2201      	movs	r2, #1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <SendByteSPI+0x60>)
 8000d56:	f005 f905 	bl	8005f64 <HAL_GPIO_WritePin>
 8000d5a:	e004      	b.n	8000d66 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <SendByteSPI+0x60>)
 8000d62:	f005 f8ff 	bl	8005f64 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000d66:	2200      	movs	r2, #0
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <SendByteSPI+0x60>)
 8000d6c:	f005 f8fa 	bl	8005f64 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000d70:	2201      	movs	r2, #1
 8000d72:	2120      	movs	r1, #32
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <SendByteSPI+0x60>)
 8000d76:	f005 f8f5 	bl	8005f64 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	dddc      	ble.n	8000d40 <SendByteSPI+0x10>

	}
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58020000 	.word	0x58020000

08000d94 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2140      	movs	r1, #64	; 0x40
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <ST7920_SendCmd+0x4c>)
 8000da4:	f005 f8de 	bl	8005f64 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000da8:	20f8      	movs	r0, #248	; 0xf8
 8000daa:	f7ff ffc1 	bl	8000d30 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f023 030f 	bic.w	r3, r3, #15
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffba 	bl	8000d30 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffb4 	bl	8000d30 <SendByteSPI>
	delayUs(50);
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f7ff fc25 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <ST7920_SendCmd+0x4c>)
 8000dd4:	f005 f8c6 	bl	8005f64 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58020000 	.word	0x58020000

08000de4 <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	481c      	ldr	r0, [pc, #112]	; (8000e60 <ST7920_Init+0x7c>)
 8000dee:	f005 f8b9 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000df2:	200a      	movs	r0, #10
 8000df4:	f001 fa6a 	bl	80022cc <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4818      	ldr	r0, [pc, #96]	; (8000e60 <ST7920_Init+0x7c>)
 8000dfe:	f005 f8b1 	bl	8005f64 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000e02:	2032      	movs	r0, #50	; 0x32
 8000e04:	f001 fa62 	bl	80022cc <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f7ff ffc3 	bl	8000d94 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000e0e:	206e      	movs	r0, #110	; 0x6e
 8000e10:	f7ff fc02 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000e14:	2030      	movs	r0, #48	; 0x30
 8000e16:	f7ff ffbd 	bl	8000d94 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000e1a:	2028      	movs	r0, #40	; 0x28
 8000e1c:	f7ff fbfc 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000e20:	2008      	movs	r0, #8
 8000e22:	f7ff ffb7 	bl	8000d94 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000e26:	206e      	movs	r0, #110	; 0x6e
 8000e28:	f7ff fbf6 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff ffb1 	bl	8000d94 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000e32:	200c      	movs	r0, #12
 8000e34:	f001 fa4a 	bl	80022cc <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff ffab 	bl	8000d94 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 fa44 	bl	80022cc <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000e44:	200c      	movs	r0, #12
 8000e46:	f7ff ffa5 	bl	8000d94 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f001 fa3e 	bl	80022cc <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff ff9f 	bl	8000d94 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000e56:	2001      	movs	r0, #1
 8000e58:	f001 fa38 	bl	80022cc <HAL_Delay>

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58020400 	.word	0x58020400

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f001 f99e 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f83c 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 fbe8 	bl	8001644 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e74:	f000 fb96 	bl	80015a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e78:	f000 f8ec 	bl	8001054 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000e7c:	f000 f9c6 	bl	800120c <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000e80:	f000 faac 	bl	80013dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e84:	f000 faf6 	bl	8001474 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000e88:	f000 fa24 	bl	80012d4 <MX_TIM7_Init>
  MX_UART7_Init();
 8000e8c:	f000 fa5a 	bl	8001344 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000e90:	f000 fb3c 	bl	800150c <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8000e94:	f000 f956 	bl	8001144 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8000e98:	f7ff fb9e 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 8000e9c:	f7ff fbe2 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8000ea0:	f7ff fcfc 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8000ea4:	f7ff feaa 	bl	8000bfc <positionControl_Init>
  ST7920_Init();
 8000ea8:	f7ff ff9c 	bl	8000de4 <ST7920_Init>

  tracking = 1000;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <main+0x7c>)
 8000eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb2:	601a      	str	r2, [r3, #0]
  brake();
 8000eb4:	f7ff fe8e 	bl	8000bd4 <brake>
  compassReset();
 8000eb8:	f7ff fc98 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <main+0x80>)
 8000ec2:	f005 f84f 	bl	8005f64 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000ec6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eca:	f001 f9ff 	bl	80022cc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  testPWM();
 8000ece:	f7ff fd85 	bl	80009dc <testPWM>
//////////////////////////////////////////////////////////////////////
//	  readADC();
	  tracking++;
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <main+0x7c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a01      	ldr	r2, [pc, #4]	; (8000ee0 <main+0x7c>)
 8000eda:	6013      	str	r3, [r2, #0]
	  testPWM();
 8000edc:	e7f7      	b.n	8000ece <main+0x6a>
 8000ede:	bf00      	nop
 8000ee0:	24000a3c 	.word	0x24000a3c
 8000ee4:	58020400 	.word	0x58020400

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0cc      	sub	sp, #304	; 0x130
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ef2:	224c      	movs	r2, #76	; 0x4c
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f00b fdf4 	bl	800cae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f00:	2220      	movs	r2, #32
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00b fded 	bl	800cae4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	23bc      	movs	r3, #188	; 0xbc
 8000f12:	461a      	mov	r2, r3
 8000f14:	2100      	movs	r1, #0
 8000f16:	f00b fde5 	bl	800cae4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f005 f856 	bl	8005fcc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	4b49      	ldr	r3, [pc, #292]	; (800104c <SystemClock_Config+0x164>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a48      	ldr	r2, [pc, #288]	; (800104c <SystemClock_Config+0x164>)
 8000f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <SystemClock_Config+0x164>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <SystemClock_Config+0x168>)
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	4a43      	ldr	r2, [pc, #268]	; (8001050 <SystemClock_Config+0x168>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <SystemClock_Config+0x168>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f003 0201 	and.w	r2, r3, #1
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5a:	bf00      	nop
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <SystemClock_Config+0x164>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f68:	d1f8      	bne.n	8000f5c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f8e:	233c      	movs	r3, #60	; 0x3c
 8000f90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 f83f 	bl	8006040 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000fc8:	f000 fc52 	bl	8001870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	233f      	movs	r3, #63	; 0x3f
 8000fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fe4:	2340      	movs	r3, #64	; 0x40
 8000fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fea:	2340      	movs	r3, #64	; 0x40
 8000fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ff8:	2340      	movs	r3, #64	; 0x40
 8000ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ffe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001002:	2104      	movs	r1, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fbf3 	bl	80067f0 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001010:	f000 fc2e 	bl	8001870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2203      	movs	r2, #3
 800101a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2200      	movs	r2, #0
 8001022:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2200      	movs	r2, #0
 800102a:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4618      	mov	r0, r3
 8001032:	f005 ff61 	bl	8006ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800103c:	f000 fc18 	bl	8001870 <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	58024800 	.word	0x58024800
 8001050:	58000400 	.word	0x58000400

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_ADC1_Init+0xe4>)
 800107a:	4a30      	ldr	r2, [pc, #192]	; (800113c <MX_ADC1_Init+0xe8>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_ADC1_Init+0xe4>)
 8001080:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001084:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_ADC1_Init+0xe4>)
 8001088:	2208      	movs	r2, #8
 800108a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_ADC1_Init+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_ADC1_Init+0xe4>)
 8001094:	2204      	movs	r2, #4
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_ADC1_Init+0xe4>)
 800109a:	2200      	movs	r2, #0
 800109c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d6:	4818      	ldr	r0, [pc, #96]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010d8:	f001 fabc 	bl	8002654 <HAL_ADC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010e2:	f000 fbc5 	bl	8001870 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_ADC1_Init+0xe4>)
 80010f2:	f002 f881 	bl	80031f8 <HAL_ADCEx_MultiModeConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010fc:	f000 fbb8 	bl	8001870 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_ADC1_Init+0xec>)
 8001102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001104:	2306      	movs	r3, #6
 8001106:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_ADC1_Init+0xe4>)
 8001120:	f001 fc38 	bl	8002994 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800112a:	f000 fba1 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	240007b0 	.word	0x240007b0
 800113c:	40022000 	.word	0x40022000
 8001140:	3ef08000 	.word	0x3ef08000

08001144 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MX_ADC2_Init+0xbc>)
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <MX_ADC2_Init+0xc0>)
 8001160:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_ADC2_Init+0xbc>)
 8001164:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001168:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_ADC2_Init+0xbc>)
 800116c:	2208      	movs	r2, #8
 800116e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_ADC2_Init+0xbc>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_ADC2_Init+0xbc>)
 8001178:	2204      	movs	r2, #4
 800117a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_ADC2_Init+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_ADC2_Init+0xbc>)
 8001184:	2200      	movs	r2, #0
 8001186:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_ADC2_Init+0xbc>)
 800118a:	2201      	movs	r2, #1
 800118c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_ADC2_Init+0xbc>)
 8001190:	2200      	movs	r2, #0
 8001192:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC2_Init+0xbc>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC2_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_ADC2_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_ADC2_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_ADC2_Init+0xbc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_ADC2_Init+0xbc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_ADC2_Init+0xbc>)
 80011bc:	f001 fa4a 	bl	8002654 <HAL_ADC_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80011c6:	f000 fb53 	bl	8001870 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC2_Init+0xc4>)
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ce:	2306      	movs	r3, #6
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2304      	movs	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_ADC2_Init+0xbc>)
 80011ea:	f001 fbd3 	bl	8002994 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80011f4:	f000 fb3c 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	24000244 	.word	0x24000244
 8001204:	40022100 	.word	0x40022100
 8001208:	2a000400 	.word	0x2a000400

0800120c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <MX_ADC3_Init+0xc0>)
 8001228:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_ADC3_Init+0xbc>)
 800122c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001230:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001234:	2208      	movs	r2, #8
 8001236:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_ADC3_Init+0xbc>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001240:	2204      	movs	r2, #4
 8001242:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001246:	2200      	movs	r2, #0
 8001248:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_ADC3_Init+0xbc>)
 800124c:	2200      	movs	r2, #0
 800124e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001252:	2201      	movs	r2, #1
 8001254:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001258:	2200      	movs	r2, #0
 800125a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_ADC3_Init+0xbc>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_ADC3_Init+0xbc>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001276:	2200      	movs	r2, #0
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_ADC3_Init+0xbc>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001282:	4811      	ldr	r0, [pc, #68]	; (80012c8 <MX_ADC3_Init+0xbc>)
 8001284:	f001 f9e6 	bl	8002654 <HAL_ADC_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800128e:	f000 faef 	bl	8001870 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_ADC3_Init+0xc4>)
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001296:	2306      	movs	r3, #6
 8001298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a4:	2304      	movs	r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_ADC3_Init+0xbc>)
 80012b2:	f001 fb6f 	bl	8002994 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80012bc:	f000 fad8 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2400081c 	.word	0x2400081c
 80012cc:	58026000 	.word	0x58026000
 80012d0:	04300002 	.word	0x04300002

080012d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_TIM7_Init+0x68>)
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_TIM7_Init+0x6c>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_TIM7_Init+0x68>)
 80012ec:	f640 125f 	movw	r2, #2399	; 0x95f
 80012f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_TIM7_Init+0x68>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_TIM7_Init+0x68>)
 80012fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_TIM7_Init+0x68>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_TIM7_Init+0x68>)
 8001308:	f007 fcaa 	bl	8008c60 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001312:	f000 faad 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_TIM7_Init+0x68>)
 8001324:	f007 fed4 	bl	80090d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800132e:	f000 fa9f 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24000bd8 	.word	0x24000bd8
 8001340:	40001400 	.word	0x40001400

08001344 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_UART7_Init+0x90>)
 800134a:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <MX_UART7_Init+0x94>)
 800134c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_UART7_Init+0x90>)
 8001350:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001354:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_UART7_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_UART7_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_UART7_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_UART7_Init+0x90>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_UART7_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_UART7_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_UART7_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_UART7_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_UART7_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_UART7_Init+0x90>)
 800138e:	f007 ff45 	bl	800921c <HAL_UART_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 fa6a 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139c:	2100      	movs	r1, #0
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_UART7_Init+0x90>)
 80013a0:	f00b fa97 	bl	800c8d2 <HAL_UARTEx_SetTxFifoThreshold>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80013aa:	f000 fa61 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <MX_UART7_Init+0x90>)
 80013b2:	f00b facc 	bl	800c94e <HAL_UARTEx_SetRxFifoThreshold>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80013bc:	f000 fa58 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_UART7_Init+0x90>)
 80013c2:	f00b fa4d 	bl	800c860 <HAL_UARTEx_DisableFifoMode>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80013cc:	f000 fa50 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	24000088 	.word	0x24000088
 80013d8:	40007800 	.word	0x40007800

080013dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_USART1_UART_Init+0x90>)
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <MX_USART1_UART_Init+0x94>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_USART1_UART_Init+0x90>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_USART1_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_USART1_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_USART1_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_USART1_UART_Init+0x90>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_USART1_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_USART1_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_USART1_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_USART1_UART_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_USART1_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_USART1_UART_Init+0x90>)
 8001426:	f007 fef9 	bl	800921c <HAL_UART_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001430:	f000 fa1e 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_USART1_UART_Init+0x90>)
 8001438:	f00b fa4b 	bl	800c8d2 <HAL_UARTEx_SetTxFifoThreshold>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001442:	f000 fa15 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001446:	2100      	movs	r1, #0
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <MX_USART1_UART_Init+0x90>)
 800144a:	f00b fa80 	bl	800c94e <HAL_UARTEx_SetRxFifoThreshold>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001454:	f000 fa0c 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_USART1_UART_Init+0x90>)
 800145a:	f00b fa01 	bl	800c860 <HAL_UARTEx_DisableFifoMode>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 fa04 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	24000920 	.word	0x24000920
 8001470:	40011000 	.word	0x40011000

08001474 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_USART3_UART_Init+0x90>)
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <MX_USART3_UART_Init+0x94>)
 800147c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_USART3_UART_Init+0x90>)
 8001480:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_USART3_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_USART3_UART_Init+0x90>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014bc:	4811      	ldr	r0, [pc, #68]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014be:	f007 fead 	bl	800921c <HAL_UART_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014c8:	f000 f9d2 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	480d      	ldr	r0, [pc, #52]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014d0:	f00b f9ff 	bl	800c8d2 <HAL_UARTEx_SetTxFifoThreshold>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014da:	f000 f9c9 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014e2:	f00b fa34 	bl	800c94e <HAL_UARTEx_SetRxFifoThreshold>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014ec:	f000 f9c0 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_USART3_UART_Init+0x90>)
 80014f2:	f00b f9b5 	bl	800c860 <HAL_UARTEx_DisableFifoMode>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014fc:	f000 f9b8 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	240001b4 	.word	0x240001b4
 8001508:	40004800 	.word	0x40004800

0800150c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <MX_USART6_UART_Init+0x94>)
 8001514:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001518:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800151c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_USART6_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_USART6_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_USART6_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001556:	f007 fe61 	bl	800921c <HAL_UART_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001560:	f000 f986 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_USART6_UART_Init+0x90>)
 8001568:	f00b f9b3 	bl	800c8d2 <HAL_UARTEx_SetTxFifoThreshold>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001572:	f000 f97d 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <MX_USART6_UART_Init+0x90>)
 800157a:	f00b f9e8 	bl	800c94e <HAL_UARTEx_SetRxFifoThreshold>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001584:	f000 f974 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_USART6_UART_Init+0x90>)
 800158a:	f00b f969 	bl	800c860 <HAL_UARTEx_DisableFifoMode>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001594:	f000 f96c 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	24000a90 	.word	0x24000a90
 80015a0:	40011400 	.word	0x40011400

080015a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_DMA_Init+0x9c>)
 80015ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_DMA_Init+0x9c>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <MX_DMA_Init+0x9c>)
 80015bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_DMA_Init+0x9c>)
 80015ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <MX_DMA_Init+0x9c>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <MX_DMA_Init+0x9c>)
 80015da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f001 ffb9 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f001 ffd0 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200c      	movs	r0, #12
 80015fc:	f001 ffb1 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001600:	200c      	movs	r0, #12
 8001602:	f001 ffc8 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f001 ffa9 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001610:	200d      	movs	r0, #13
 8001612:	f001 ffc0 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200e      	movs	r0, #14
 800161c:	f001 ffa1 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001620:	200e      	movs	r0, #14
 8001622:	f001 ffb8 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	203a      	movs	r0, #58	; 0x3a
 800162c:	f001 ff99 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001630:	203a      	movs	r0, #58	; 0x3a
 8001632:	f001 ffb0 	bl	8003596 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	58024400 	.word	0x58024400

08001644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <MX_GPIO_Init+0x214>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001660:	4a7d      	ldr	r2, [pc, #500]	; (8001858 <MX_GPIO_Init+0x214>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166a:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <MX_GPIO_Init+0x214>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	4b77      	ldr	r3, [pc, #476]	; (8001858 <MX_GPIO_Init+0x214>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a76      	ldr	r2, [pc, #472]	; (8001858 <MX_GPIO_Init+0x214>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b73      	ldr	r3, [pc, #460]	; (8001858 <MX_GPIO_Init+0x214>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b70      	ldr	r3, [pc, #448]	; (8001858 <MX_GPIO_Init+0x214>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	4a6e      	ldr	r2, [pc, #440]	; (8001858 <MX_GPIO_Init+0x214>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a6:	4b6c      	ldr	r3, [pc, #432]	; (8001858 <MX_GPIO_Init+0x214>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <MX_GPIO_Init+0x214>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <MX_GPIO_Init+0x214>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b64      	ldr	r3, [pc, #400]	; (8001858 <MX_GPIO_Init+0x214>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d2:	4b61      	ldr	r3, [pc, #388]	; (8001858 <MX_GPIO_Init+0x214>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <MX_GPIO_Init+0x214>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <MX_GPIO_Init+0x214>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <MX_GPIO_Init+0x214>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <MX_GPIO_Init+0x214>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <MX_GPIO_Init+0x214>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	4b52      	ldr	r3, [pc, #328]	; (8001858 <MX_GPIO_Init+0x214>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	4a50      	ldr	r2, [pc, #320]	; (8001858 <MX_GPIO_Init+0x214>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <MX_GPIO_Init+0x214>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f240 7104 	movw	r1, #1796	; 0x704
 8001732:	484a      	ldr	r0, [pc, #296]	; (800185c <MX_GPIO_Init+0x218>)
 8001734:	f004 fc16 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001738:	2200      	movs	r2, #0
 800173a:	f242 0167 	movw	r1, #8295	; 0x2067
 800173e:	4848      	ldr	r0, [pc, #288]	; (8001860 <MX_GPIO_Init+0x21c>)
 8001740:	f004 fc10 	bl	8005f64 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001744:	2200      	movs	r2, #0
 8001746:	f643 610d 	movw	r1, #15885	; 0x3e0d
 800174a:	4846      	ldr	r0, [pc, #280]	; (8001864 <MX_GPIO_Init+0x220>)
 800174c:	f004 fc0a 	bl	8005f64 <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2182      	movs	r1, #130	; 0x82
 8001754:	4844      	ldr	r0, [pc, #272]	; (8001868 <MX_GPIO_Init+0x224>)
 8001756:	f004 fc05 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001760:	4842      	ldr	r0, [pc, #264]	; (800186c <MX_GPIO_Init+0x228>)
 8001762:	f004 fbff 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001766:	f240 7304 	movw	r3, #1796	; 0x704
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4837      	ldr	r0, [pc, #220]	; (800185c <MX_GPIO_Init+0x218>)
 8001780:	f004 fa40 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001784:	f242 0367 	movw	r3, #8295	; 0x2067
 8001788:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4830      	ldr	r0, [pc, #192]	; (8001860 <MX_GPIO_Init+0x21c>)
 800179e:	f004 fa31 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80017a2:	230d      	movs	r3, #13
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	482a      	ldr	r0, [pc, #168]	; (8001864 <MX_GPIO_Init+0x220>)
 80017ba:	f004 fa23 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4824      	ldr	r0, [pc, #144]	; (8001868 <MX_GPIO_Init+0x224>)
 80017d6:	f004 fa15 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 80017da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	481e      	ldr	r0, [pc, #120]	; (800186c <MX_GPIO_Init+0x228>)
 80017f4:	f004 fa06 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 80017f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4816      	ldr	r0, [pc, #88]	; (800186c <MX_GPIO_Init+0x228>)
 8001812:	f004 f9f7 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001816:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800181a:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_GPIO_Init+0x220>)
 8001830:	f004 f9e8 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_GPIO_Init+0x224>)
 800184c:	f004 f9da 	bl	8005c04 <HAL_GPIO_Init>

}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58024400 	.word	0x58024400
 800185c:	58020000 	.word	0x58020000
 8001860:	58020400 	.word	0x58020400
 8001864:	58021800 	.word	0x58021800
 8001868:	58021000 	.word	0x58021000
 800186c:	58020c00 	.word	0x58020c00

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_MspInit+0x30>)
 8001888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x30>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x30>)
 8001898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	58024400 	.word	0x58024400

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a96      	ldr	r2, [pc, #600]	; (8001b2c <HAL_ADC_MspInit+0x278>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d163      	bne.n	800199e <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018d6:	4b96      	ldr	r3, [pc, #600]	; (8001b30 <HAL_ADC_MspInit+0x27c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a94      	ldr	r2, [pc, #592]	; (8001b30 <HAL_ADC_MspInit+0x27c>)
 80018de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018e0:	4b93      	ldr	r3, [pc, #588]	; (8001b30 <HAL_ADC_MspInit+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10e      	bne.n	8001906 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018e8:	4b92      	ldr	r3, [pc, #584]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80018ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ee:	4a91      	ldr	r2, [pc, #580]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018f8:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80018fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	4a89      	ldr	r2, [pc, #548]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001916:	4b87      	ldr	r3, [pc, #540]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001924:	2308      	movs	r3, #8
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001928:	2303      	movs	r3, #3
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	4880      	ldr	r0, [pc, #512]	; (8001b38 <HAL_ADC_MspInit+0x284>)
 8001938:	f004 f964 	bl	8005c04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800193c:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 800193e:	4a80      	ldr	r2, [pc, #512]	; (8001b40 <HAL_ADC_MspInit+0x28c>)
 8001940:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001942:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001944:	2209      	movs	r2, #9
 8001946:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001948:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195c:	4b77      	ldr	r3, [pc, #476]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 800195e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001962:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001964:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 800196e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001972:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001974:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197a:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001980:	486e      	ldr	r0, [pc, #440]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001982:	f001 fe23 	bl	80035cc <HAL_DMA_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 800198c:	f7ff ff70 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001994:	64da      	str	r2, [r3, #76]	; 0x4c
 8001996:	4a69      	ldr	r2, [pc, #420]	; (8001b3c <HAL_ADC_MspInit+0x288>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800199c:	e0c1      	b.n	8001b22 <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a68      	ldr	r2, [pc, #416]	; (8001b44 <HAL_ADC_MspInit+0x290>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d163      	bne.n	8001a70 <HAL_ADC_MspInit+0x1bc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019a8:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <HAL_ADC_MspInit+0x27c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a60      	ldr	r2, [pc, #384]	; (8001b30 <HAL_ADC_MspInit+0x27c>)
 80019b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <HAL_ADC_MspInit+0x27c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10e      	bne.n	80019d8 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80019bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c0:	4a5c      	ldr	r2, [pc, #368]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019ca:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80019cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e8:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RollRigt_Pin;
 80019f6:	2301      	movs	r3, #1
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	2303      	movs	r3, #3
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	4619      	mov	r1, r3
 8001a08:	484f      	ldr	r0, [pc, #316]	; (8001b48 <HAL_ADC_MspInit+0x294>)
 8001a0a:	f004 f8fb 	bl	8005c04 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001a0e:	4b4f      	ldr	r3, [pc, #316]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_ADC_MspInit+0x29c>)
 8001a12:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a16:	220a      	movs	r2, #10
 8001a18:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a20:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a34:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a44:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4c:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a52:	483e      	ldr	r0, [pc, #248]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a54:	f001 fdba 	bl	80035cc <HAL_DMA_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 8001a5e:	f7ff ff07 	bl	8001870 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a39      	ldr	r2, [pc, #228]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a66:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a68:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <HAL_ADC_MspInit+0x298>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a6e:	e058      	b.n	8001b22 <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <HAL_ADC_MspInit+0x2a0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d153      	bne.n	8001b22 <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_ADC_MspInit+0x280>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001ab6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001aba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001abe:	f000 fc33 	bl	8002328 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <HAL_ADC_MspInit+0x2a8>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001aca:	2273      	movs	r2, #115	; 0x73
 8001acc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001b08:	f001 fd60 	bl	80035cc <HAL_DMA_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_ADC_MspInit+0x262>
      Error_Handler();
 8001b12:	f7ff fead 	bl	8001870 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_ADC_MspInit+0x2a4>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b22:	bf00      	nop
 8001b24:	3738      	adds	r7, #56	; 0x38
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	24000058 	.word	0x24000058
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58020000 	.word	0x58020000
 8001b3c:	240009c0 	.word	0x240009c0
 8001b40:	40020010 	.word	0x40020010
 8001b44:	40022100 	.word	0x40022100
 8001b48:	58020800 	.word	0x58020800
 8001b4c:	24000b54 	.word	0x24000b54
 8001b50:	40020028 	.word	0x40020028
 8001b54:	58026000 	.word	0x58026000
 8001b58:	240006f0 	.word	0x240006f0
 8001b5c:	40020040 	.word	0x40020040

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_TIM_Base_MspInit+0x48>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d116      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_TIM_Base_MspInit+0x4c>)
 8001b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_TIM_Base_MspInit+0x4c>)
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_TIM_Base_MspInit+0x4c>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2037      	movs	r0, #55	; 0x37
 8001b96:	f001 fce4 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b9a:	2037      	movs	r0, #55	; 0x37
 8001b9c:	f001 fcfb 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40001400 	.word	0x40001400
 8001bac:	58024400 	.word	0x58024400

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4aa3      	ldr	r2, [pc, #652]	; (8001e5c <HAL_UART_MspInit+0x2ac>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d136      	bne.n	8001c40 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001bd2:	4ba3      	ldr	r3, [pc, #652]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd8:	4aa1      	ldr	r2, [pc, #644]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001be2:	4b9f      	ldr	r3, [pc, #636]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bf0:	4b9b      	ldr	r3, [pc, #620]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c00:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c1e:	2307      	movs	r3, #7
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	488e      	ldr	r0, [pc, #568]	; (8001e64 <HAL_UART_MspInit+0x2b4>)
 8001c2a:	f003 ffeb 	bl	8005c04 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2104      	movs	r1, #4
 8001c32:	2052      	movs	r0, #82	; 0x52
 8001c34:	f001 fc95 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001c38:	2052      	movs	r0, #82	; 0x52
 8001c3a:	f001 fcac 	bl	8003596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c3e:	e108      	b.n	8001e52 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a88      	ldr	r2, [pc, #544]	; (8001e68 <HAL_UART_MspInit+0x2b8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d165      	bne.n	8001d16 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c50:	4a83      	ldr	r2, [pc, #524]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c5a:	4b81      	ldr	r3, [pc, #516]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a7c      	ldr	r2, [pc, #496]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001c86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4872      	ldr	r0, [pc, #456]	; (8001e6c <HAL_UART_MspInit+0x2bc>)
 8001ca4:	f003 ffae 	bl	8005c04 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001caa:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <HAL_UART_MspInit+0x2c4>)
 8001cac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001cae:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cb0:	2229      	movs	r2, #41	; 0x29
 8001cb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb4:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cba:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc8:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cce:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cda:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cdc:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ce8:	4861      	ldr	r0, [pc, #388]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cea:	f001 fc6f 	bl	80035cc <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001cf4:	f7ff fdbc 	bl	8001870 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a5d      	ldr	r2, [pc, #372]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001cfc:	679a      	str	r2, [r3, #120]	; 0x78
 8001cfe:	4a5c      	ldr	r2, [pc, #368]	; (8001e70 <HAL_UART_MspInit+0x2c0>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2101      	movs	r1, #1
 8001d08:	2025      	movs	r0, #37	; 0x25
 8001d0a:	f001 fc2a 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d0e:	2025      	movs	r0, #37	; 0x25
 8001d10:	f001 fc41 	bl	8003596 <HAL_NVIC_EnableIRQ>
}
 8001d14:	e09d      	b.n	8001e52 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_UART_MspInit+0x2c8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d15d      	bne.n	8001ddc <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d20:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d26:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	4a46      	ldr	r2, [pc, #280]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001d5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d76:	4619      	mov	r1, r3
 8001d78:	483c      	ldr	r0, [pc, #240]	; (8001e6c <HAL_UART_MspInit+0x2bc>)
 8001d7a:	f003 ff43 	bl	8005c04 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001d7e:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001d80:	4a3f      	ldr	r2, [pc, #252]	; (8001e80 <HAL_UART_MspInit+0x2d0>)
 8001d82:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001d86:	222d      	movs	r2, #45	; 0x2d
 8001d88:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db2:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001dbe:	482f      	ldr	r0, [pc, #188]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001dc0:	f001 fc04 	bl	80035cc <HAL_DMA_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001dca:	f7ff fd51 	bl	8001870 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001dd2:	679a      	str	r2, [r3, #120]	; 0x78
 8001dd4:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <HAL_UART_MspInit+0x2cc>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dda:	e03a      	b.n	8001e52 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_UART_MspInit+0x2d4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d135      	bne.n	8001e52 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_UART_MspInit+0x2b0>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001e32:	2307      	movs	r3, #7
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4812      	ldr	r0, [pc, #72]	; (8001e88 <HAL_UART_MspInit+0x2d8>)
 8001e3e:	f003 fee1 	bl	8005c04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2102      	movs	r1, #2
 8001e46:	2047      	movs	r0, #71	; 0x47
 8001e48:	f001 fb8b 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e4c:	2047      	movs	r0, #71	; 0x47
 8001e4e:	f001 fba2 	bl	8003596 <HAL_NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3740      	adds	r7, #64	; 0x40
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40007800 	.word	0x40007800
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58021400 	.word	0x58021400
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	58020400 	.word	0x58020400
 8001e70:	24000884 	.word	0x24000884
 8001e74:	40020058 	.word	0x40020058
 8001e78:	40004800 	.word	0x40004800
 8001e7c:	2400012c 	.word	0x2400012c
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40011400 	.word	0x40011400
 8001e88:	58020800 	.word	0x58020800

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <SysTick_Handler+0x2c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <SysTick_Handler+0x2c>)
 8001eea:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SysTick_Handler+0x2c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d904      	bls.n	8001efe <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Handler+0x2c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001efa:	f7fe fc8d 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f9c5 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	24000910 	.word	0x24000910

08001f0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DMA1_Stream0_IRQHandler+0x10>)
 8001f12:	f002 fb65 	bl	80045e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	240009c0 	.word	0x240009c0

08001f20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//	leftRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
//	rigtRawDistance = a_Linear *pitchRawValue[1] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[2] + b_Linear;
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA1_Stream1_IRQHandler+0x10>)
 8001f26:	f002 fb5b 	bl	80045e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	24000b54 	.word	0x24000b54

08001f34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <DMA1_Stream2_IRQHandler+0x10>)
 8001f3a:	f002 fb51 	bl	80045e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	240006f0 	.word	0x240006f0

08001f48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <DMA1_Stream3_IRQHandler+0x24>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <DMA1_Stream3_IRQHandler+0x24>)
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <DMA1_Stream3_IRQHandler+0x28>)
 8001f60:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f62:	4804      	ldr	r0, [pc, #16]	; (8001f74 <DMA1_Stream3_IRQHandler+0x2c>)
 8001f64:	f002 fb3c 	bl	80045e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	240006d0 	.word	0x240006d0
 8001f70:	24000780 	.word	0x24000780
 8001f74:	24000884 	.word	0x24000884

08001f78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <USART1_IRQHandler+0x10>)
 8001f7e:	f007 fc17 	bl	80097b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	24000920 	.word	0x24000920

08001f8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM7_IRQHandler+0x10>)
 8001f92:	f006 febb 	bl	8008d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	24000bd8 	.word	0x24000bd8

08001fa0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <DMA2_Stream2_IRQHandler+0xa8>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d135      	bne.n	8002018 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <DMA2_Stream2_IRQHandler+0xac>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	b2d1      	uxtb	r1, r2
 8001fb4:	4a25      	ldr	r2, [pc, #148]	; (800204c <DMA2_Stream2_IRQHandler+0xac>)
 8001fb6:	7011      	strb	r1, [r2, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <DMA2_Stream2_IRQHandler+0xb0>)
 8001fbc:	7819      	ldrb	r1, [r3, #0]
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fc0:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <DMA2_Stream2_IRQHandler+0xac>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d926      	bls.n	8002018 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <DMA2_Stream2_IRQHandler+0xac>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <DMA2_Stream2_IRQHandler+0xa8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <DMA2_Stream2_IRQHandler+0xb8>)
 8001fea:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ff6:	78db      	ldrb	r3, [r3, #3]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <DMA2_Stream2_IRQHandler+0xbc>)
 8002000:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 8002004:	791b      	ldrb	r3, [r3, #4]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	b21a      	sxth	r2, r3
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <DMA2_Stream2_IRQHandler+0xb4>)
 800200c:	795b      	ldrb	r3, [r3, #5]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21a      	sxth	r2, r3
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <DMA2_Stream2_IRQHandler+0xc0>)
 8002016:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <DMA2_Stream2_IRQHandler+0xb0>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2baa      	cmp	r3, #170	; 0xaa
 800201e:	d106      	bne.n	800202e <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <DMA2_Stream2_IRQHandler+0xa8>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <DMA2_Stream2_IRQHandler+0xa8>)
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e006      	b.n	800203c <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <DMA2_Stream2_IRQHandler+0xa8>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d002      	beq.n	800203c <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <DMA2_Stream2_IRQHandler+0xa8>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <DMA2_Stream2_IRQHandler+0xc4>)
 800203e:	f002 facf 	bl	80045e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	24000054 	.word	0x24000054
 800204c:	24000814 	.word	0x24000814
 8002050:	24000b1c 	.word	0x24000b1c
 8002054:	240006c8 	.word	0x240006c8
 8002058:	240009bc 	.word	0x240009bc
 800205c:	240009be 	.word	0x240009be
 8002060:	24000b30 	.word	0x24000b30
 8002064:	2400012c 	.word	0x2400012c

08002068 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <USART6_IRQHandler+0x10>)
 800206e:	f007 fb9f 	bl	80097b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24000a90 	.word	0x24000a90

0800207c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <UART7_IRQHandler+0x10>)
 8002082:	f007 fb95 	bl	80097b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	24000088 	.word	0x24000088

08002090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <SystemInit+0xac>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	4a28      	ldr	r2, [pc, #160]	; (800213c <SystemInit+0xac>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <SystemInit+0xb0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <SystemInit+0xb0>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <SystemInit+0xb0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <SystemInit+0xb0>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4921      	ldr	r1, [pc, #132]	; (8002140 <SystemInit+0xb0>)
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <SystemInit+0xb4>)
 80020be:	4013      	ands	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <SystemInit+0xb0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <SystemInit+0xb0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <SystemInit+0xb0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <SystemInit+0xb0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <SystemInit+0xb0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <SystemInit+0xb0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <SystemInit+0xb0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <SystemInit+0xb0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <SystemInit+0xb0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <SystemInit+0xb0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <SystemInit+0xb0>)
 8002100:	2200      	movs	r2, #0
 8002102:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <SystemInit+0xb0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <SystemInit+0xb0>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <SystemInit+0xb0>)
 8002112:	2200      	movs	r2, #0
 8002114:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <SystemInit+0xb8>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <SystemInit+0xbc>)
 800211c:	4013      	ands	r3, r2
 800211e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002122:	d202      	bcs.n	800212a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <SystemInit+0xc0>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SystemInit+0xac>)
 800212c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002130:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00
 8002140:	58024400 	.word	0x58024400
 8002144:	eaf6ed7f 	.word	0xeaf6ed7f
 8002148:	5c001000 	.word	0x5c001000
 800214c:	ffff0000 	.word	0xffff0000
 8002150:	51008108 	.word	0x51008108

08002154 <Reset_Handler>:
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800218c <LoopFillZerobss+0x14>
 8002158:	2100      	movs	r1, #0
 800215a:	e003      	b.n	8002164 <LoopCopyDataInit>

0800215c <CopyDataInit>:
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <LoopFillZerobss+0x18>)
 800215e:	585b      	ldr	r3, [r3, r1]
 8002160:	5043      	str	r3, [r0, r1]
 8002162:	3104      	adds	r1, #4

08002164 <LoopCopyDataInit>:
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <LoopFillZerobss+0x1c>)
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <LoopFillZerobss+0x20>)
 8002168:	1842      	adds	r2, r0, r1
 800216a:	429a      	cmp	r2, r3
 800216c:	d3f6      	bcc.n	800215c <CopyDataInit>
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <LoopFillZerobss+0x24>)
 8002170:	e002      	b.n	8002178 <LoopFillZerobss>

08002172 <FillZerobss>:
 8002172:	2300      	movs	r3, #0
 8002174:	f842 3b04 	str.w	r3, [r2], #4

08002178 <LoopFillZerobss>:
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <LoopFillZerobss+0x28>)
 800217a:	429a      	cmp	r2, r3
 800217c:	d3f9      	bcc.n	8002172 <FillZerobss>
 800217e:	f7ff ff87 	bl	8002090 <SystemInit>
 8002182:	f00a fc8b 	bl	800ca9c <__libc_init_array>
 8002186:	f7fe fe6d 	bl	8000e64 <main>
 800218a:	4770      	bx	lr
 800218c:	24080000 	.word	0x24080000
 8002190:	0800cb44 	.word	0x0800cb44
 8002194:	24000000 	.word	0x24000000
 8002198:	24000034 	.word	0x24000034
 800219c:	24000038 	.word	0x24000038
 80021a0:	24000c3c 	.word	0x24000c3c

080021a4 <ADC3_IRQHandler>:
 80021a4:	e7fe      	b.n	80021a4 <ADC3_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ae:	2003      	movs	r0, #3
 80021b0:	f001 f9cc 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021b4:	f004 fcd2 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 80021b8:	4601      	mov	r1, r0
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_Init+0x68>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_Init+0x6c>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa21 f303 	lsr.w	r3, r1, r3
 80021d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_Init+0x68>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_Init+0x6c>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_Init+0x70>)
 80021ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021ec:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_Init+0x74>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f814 	bl	8002220 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e002      	b.n	8002208 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002202:	f7ff fb3d 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58024400 	.word	0x58024400
 8002214:	0800cb1c 	.word	0x0800cb1c
 8002218:	24000028 	.word	0x24000028
 800221c:	24000024 	.word	0x24000024

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_InitTick+0x60>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e021      	b.n	8002278 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_InitTick+0x64>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_InitTick+0x60>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f001 f9b1 	bl	80035b2 <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f001 f97b 	bl	8003562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_InitTick+0x68>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	24000030 	.word	0x24000030
 8002284:	24000024 	.word	0x24000024
 8002288:	2400002c 	.word	0x2400002c

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	24000030 	.word	0x24000030
 80022b0:	24000c38 	.word	0x24000c38

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	24000c38 	.word	0x24000c38

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_Delay+0x40>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	24000030 	.word	0x24000030

08002310 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetREVID+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0c1b      	lsrs	r3, r3, #16
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	5c001000 	.word	0x5c001000

08002328 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	58000400 	.word	0x58000400

08002354 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023bc:	b490      	push	{r4, r7}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3360      	adds	r3, #96	; 0x60
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	430b      	orrs	r3, r1
 80023e8:	4313      	orrs	r3, r2
 80023ea:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc90      	pop	{r4, r7}
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	611a      	str	r2, [r3, #16]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002428:	b490      	push	{r4, r7}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3360      	adds	r3, #96	; 0x60
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	6023      	str	r3, [r4, #0]
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bc90      	pop	{r4, r7}
 8002456:	4770      	bx	lr

08002458 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002458:	b490      	push	{r4, r7}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3330      	adds	r3, #48	; 0x30
 8002468:	461a      	mov	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	4413      	add	r3, r2
 8002476:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	211f      	movs	r1, #31
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	f003 011f 	and.w	r1, r3, #31
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc90      	pop	{r4, r7}
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024aa:	b490      	push	{r4, r7}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3314      	adds	r3, #20
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0e5b      	lsrs	r3, r3, #25
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	4413      	add	r3, r2
 80024c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0d1b      	lsrs	r3, r3, #20
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2107      	movs	r1, #7
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0d1b      	lsrs	r3, r3, #20
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc90      	pop	{r4, r7}
 80024f8:	4770      	bx	lr
	...

080024fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0318 	and.w	r3, r3, #24
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002520:	40d9      	lsrs	r1, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	400b      	ands	r3, r1
 8002526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252a:	431a      	orrs	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	000fffff 	.word	0x000fffff

08002544 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6093      	str	r3, [r2, #8]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	5fffffc0 	.word	0x5fffffc0

08002568 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800257c:	d101      	bne.n	8002582 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800259e:	4013      	ands	r3, r2
 80025a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	6fffffc0 	.word	0x6fffffc0

080025b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <LL_ADC_IsEnabled+0x18>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_ADC_IsEnabled+0x1a>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d101      	bne.n	800261e <LL_ADC_REG_IsConversionOngoing+0x18>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b08      	cmp	r3, #8
 800263e:	d101      	bne.n	8002644 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e18e      	b.n	800298c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff f919 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff67 	bl	8002568 <LL_ADC_IsDeepPowerDownEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff4d 	bl	8002544 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff82 	bl	80025b8 <LL_ADC_IsInternalRegulatorEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff66 	bl	8002590 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026c4:	4b9a      	ldr	r3, [pc, #616]	; (8002930 <HAL_ADC_Init+0x2dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	4a9a      	ldr	r2, [pc, #616]	; (8002934 <HAL_ADC_Init+0x2e0>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026d4:	e002      	b.n	80026dc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f9      	bne.n	80026d6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff66 	bl	80025b8 <LL_ADC_IsInternalRegulatorEnabled>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff77 	bl	8002606 <LL_ADC_REG_IsConversionOngoing>
 8002718:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8129 	bne.w	800297a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8125 	bne.w	800297a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002738:	f043 0202 	orr.w	r2, r3, #2
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff4b 	bl	80025e0 <LL_ADC_IsEnabled>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d136      	bne.n	80027be <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_ADC_Init+0x2e4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_ADC_Init+0x110>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a77      	ldr	r2, [pc, #476]	; (800293c <HAL_ADC_Init+0x2e8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10e      	bne.n	8002782 <HAL_ADC_Init+0x12e>
 8002764:	4874      	ldr	r0, [pc, #464]	; (8002938 <HAL_ADC_Init+0x2e4>)
 8002766:	f7ff ff3b 	bl	80025e0 <LL_ADC_IsEnabled>
 800276a:	4604      	mov	r4, r0
 800276c:	4873      	ldr	r0, [pc, #460]	; (800293c <HAL_ADC_Init+0x2e8>)
 800276e:	f7ff ff37 	bl	80025e0 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	4323      	orrs	r3, r4
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e008      	b.n	8002794 <HAL_ADC_Init+0x140>
 8002782:	486f      	ldr	r0, [pc, #444]	; (8002940 <HAL_ADC_Init+0x2ec>)
 8002784:	f7ff ff2c 	bl	80025e0 <LL_ADC_IsEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_ADC_Init+0x2e4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_Init+0x158>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a65      	ldr	r2, [pc, #404]	; (800293c <HAL_ADC_Init+0x2e8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_Init+0x15c>
 80027ac:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_ADC_Init+0x2f0>)
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_Init+0x15e>
 80027b0:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_ADC_Init+0x2f4>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4619      	mov	r1, r3
 80027b8:	4610      	mov	r0, r2
 80027ba:	f7ff fdcb 	bl	8002354 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80027be:	f7ff fda7 	bl	8002310 <HAL_GetREVID>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d914      	bls.n	80027f6 <HAL_ADC_Init+0x1a2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d110      	bne.n	80027f6 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7d5b      	ldrb	r3, [r3, #21]
 80027d8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027de:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027e4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7f1b      	ldrb	r3, [r3, #28]
 80027ea:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80027ec:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027ee:	f043 030c 	orr.w	r3, r3, #12
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e00d      	b.n	8002812 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7d5b      	ldrb	r3, [r3, #21]
 80027fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002800:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002806:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7f1b      	ldrb	r3, [r3, #28]
 800280c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7f1b      	ldrb	r3, [r3, #28]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d106      	bne.n	8002828 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	3b01      	subs	r3, #1
 8002820:	045b      	lsls	r3, r3, #17
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_ADC_Init+0x2f8>)
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fed2 	bl	8002606 <LL_ADC_REG_IsConversionOngoing>
 8002862:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fedf 	bl	800262c <LL_ADC_INJ_IsConversionOngoing>
 800286e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d14a      	bne.n	800290c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d147      	bne.n	800290c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7d1b      	ldrb	r3, [r3, #20]
 8002880:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_ADC_Init+0x2fc>)
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	69b9      	ldr	r1, [r7, #24]
 800289a:	430b      	orrs	r3, r1
 800289c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d11b      	bne.n	80028e0 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_ADC_Init+0x300>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028bc:	3a01      	subs	r2, #1
 80028be:	0411      	lsls	r1, r2, #16
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028d0:	430a      	orrs	r2, r1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	e007      	b.n	80028f0 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fb58 	bl	8002fbc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d121      	bne.n	8002958 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f023 010f 	bic.w	r1, r3, #15
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	1e5a      	subs	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
 800292c:	e01c      	b.n	8002968 <HAL_ADC_Init+0x314>
 800292e:	bf00      	nop
 8002930:	24000024 	.word	0x24000024
 8002934:	053e2d63 	.word	0x053e2d63
 8002938:	40022000 	.word	0x40022000
 800293c:	40022100 	.word	0x40022100
 8002940:	58026000 	.word	0x58026000
 8002944:	40022300 	.word	0x40022300
 8002948:	58026300 	.word	0x58026300
 800294c:	fff0c003 	.word	0xfff0c003
 8002950:	ffffbffc 	.word	0xffffbffc
 8002954:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020f 	bic.w	r2, r2, #15
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f023 0303 	bic.w	r3, r3, #3
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
 8002978:	e007      	b.n	800298a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800298a:	7ffb      	ldrb	r3, [r7, #31]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3724      	adds	r7, #36	; 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}

08002994 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b099      	sub	sp, #100	; 0x64
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a99      	ldr	r2, [pc, #612]	; (8002c14 <HAL_ADC_ConfigChannel+0x280>)
 80029ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x2a>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e2e6      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x5f8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fe1b 	bl	8002606 <LL_ADC_REG_IsConversionOngoing>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 82cb 	bne.w	8002f6e <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d108      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x62>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2201      	movs	r2, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	e00f      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x82>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2201      	movs	r2, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	69d1      	ldr	r1, [r2, #28]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f7ff fd11 	bl	8002458 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fde3 	bl	8002606 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fdf0 	bl	800262c <LL_ADC_INJ_IsConversionOngoing>
 8002a4c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 80b3 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 80af 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7ff fd1d 	bl	80024aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a70:	4b69      	ldr	r3, [pc, #420]	; (8002c18 <HAL_ADC_ConfigChannel+0x284>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a7c:	d10b      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x102>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	e01d      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x13e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x128>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	e00a      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x13e>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d027      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6919      	ldr	r1, [r3, #16]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aea:	f7ff fc67 	bl	80023bc <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	7e5b      	ldrb	r3, [r3, #25]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d102      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x170>
 8002afe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b02:	e000      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x172>
 8002b04:	2300      	movs	r3, #0
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7ff fc8e 	bl	8002428 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6919      	ldr	r1, [r3, #16]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7e1b      	ldrb	r3, [r3, #24]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d102      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x18e>
 8002b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b20:	e000      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x190>
 8002b22:	2300      	movs	r3, #0
 8002b24:	461a      	mov	r2, r3
 8002b26:	f7ff fc66 	bl	80023f6 <LL_ADC_SetDataRightShift>
 8002b2a:	e047      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b4e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	069b      	lsls	r3, r3, #26
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d107      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b72:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b96:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fd0d 	bl	80025e0 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 81d9 	bne.w	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff fc8e 	bl	80024fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_ADC_ConfigChannel+0x280>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	f040 8101 	bne.w	8002dee <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x288>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	bf94      	ite	ls
 8002c0c:	2301      	movls	r3, #1
 8002c0e:	2300      	movhi	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e016      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x2ae>
 8002c14:	47ff0000 	.word	0x47ff0000
 8002c18:	5c001000 	.word	0x5c001000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d064      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x2ce>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	3301      	adds	r3, #1
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c60:	e00e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x2ec>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	069b      	lsls	r3, r3, #26
 8002c7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x30c>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	e010      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x32e>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	ea42 0103 	orr.w	r1, r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x354>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	051b      	lsls	r3, r3, #20
 8002ce6:	e011      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x378>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	e069      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x398>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	069b      	lsls	r3, r3, #26
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	e00e      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x3b6>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	61fb      	str	r3, [r7, #28]
  return result;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	069b      	lsls	r3, r3, #26
 8002d46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x3d6>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	e010      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x3f8>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	617b      	str	r3, [r7, #20]
  return result;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	ea42 0103 	orr.w	r1, r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10d      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x424>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	3b1e      	subs	r3, #30
 8002db0:	051b      	lsls	r3, r3, #20
 8002db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002db6:	e014      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x44e>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	60fb      	str	r3, [r7, #12]
  return result;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b1e      	subs	r3, #30
 8002ddc:	051b      	lsls	r3, r3, #20
 8002dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de2:	430b      	orrs	r3, r1
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	6892      	ldr	r2, [r2, #8]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7ff fb5e 	bl	80024aa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f280 80c4 	bge.w	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_ADC_ConfigChannel+0x600>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d004      	beq.n	8002e0c <HAL_ADC_ConfigChannel+0x478>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a64      	ldr	r2, [pc, #400]	; (8002f98 <HAL_ADC_ConfigChannel+0x604>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x47c>
 8002e0c:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_ADC_ConfigChannel+0x608>)
 8002e0e:	e000      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x47e>
 8002e10:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_ADC_ConfigChannel+0x60c>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fac4 	bl	80023a0 <LL_ADC_GetCommonPathInternalCh>
 8002e18:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a5d      	ldr	r2, [pc, #372]	; (8002f94 <HAL_ADC_ConfigChannel+0x600>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_ADC_ConfigChannel+0x49a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5b      	ldr	r2, [pc, #364]	; (8002f98 <HAL_ADC_ConfigChannel+0x604>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10e      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x4b8>
 8002e2e:	4859      	ldr	r0, [pc, #356]	; (8002f94 <HAL_ADC_ConfigChannel+0x600>)
 8002e30:	f7ff fbd6 	bl	80025e0 <LL_ADC_IsEnabled>
 8002e34:	4604      	mov	r4, r0
 8002e36:	4858      	ldr	r0, [pc, #352]	; (8002f98 <HAL_ADC_ConfigChannel+0x604>)
 8002e38:	f7ff fbd2 	bl	80025e0 <LL_ADC_IsEnabled>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4323      	orrs	r3, r4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e008      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x4ca>
 8002e4c:	4855      	ldr	r0, [pc, #340]	; (8002fa4 <HAL_ADC_ConfigChannel+0x610>)
 8002e4e:	f7ff fbc7 	bl	80025e0 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d07b      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a50      	ldr	r2, [pc, #320]	; (8002fa8 <HAL_ADC_ConfigChannel+0x614>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d12e      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x536>
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d129      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a4a      	ldr	r2, [pc, #296]	; (8002fa4 <HAL_ADC_ConfigChannel+0x610>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d17f      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a43      	ldr	r2, [pc, #268]	; (8002f94 <HAL_ADC_ConfigChannel+0x600>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0x500>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a42      	ldr	r2, [pc, #264]	; (8002f98 <HAL_ADC_ConfigChannel+0x604>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x504>
 8002e94:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <HAL_ADC_ConfigChannel+0x608>)
 8002e96:	e000      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x506>
 8002e98:	4a41      	ldr	r2, [pc, #260]	; (8002fa0 <HAL_ADC_ConfigChannel+0x60c>)
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f7ff fa69 	bl	800237a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_ADC_ConfigChannel+0x618>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	4a40      	ldr	r2, [pc, #256]	; (8002fb0 <HAL_ADC_ConfigChannel+0x61c>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002eba:	e002      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f9      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec8:	e05a      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_ADC_ConfigChannel+0x620>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d11e      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x57e>
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_ADC_ConfigChannel+0x610>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d14b      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <HAL_ADC_ConfigChannel+0x600>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x568>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <HAL_ADC_ConfigChannel+0x604>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x56c>
 8002efc:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_ADC_ConfigChannel+0x608>)
 8002efe:	e000      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x56e>
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_ADC_ConfigChannel+0x60c>)
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7ff fa35 	bl	800237a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f10:	e036      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_ADC_ConfigChannel+0x624>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d131      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12c      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_ADC_ConfigChannel+0x610>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d127      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_ADC_ConfigChannel+0x600>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x5b0>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_ADC_ConfigChannel+0x604>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x5b4>
 8002f44:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <HAL_ADC_ConfigChannel+0x608>)
 8002f46:	e000      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x5b6>
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_ADC_ConfigChannel+0x60c>)
 8002f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff fa11 	bl	800237a <LL_ADC_SetCommonPathInternalCh>
 8002f58:	e012      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f6c:	e008      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3764      	adds	r7, #100	; 0x64
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd90      	pop	{r4, r7, pc}
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40022100 	.word	0x40022100
 8002f9c:	40022300 	.word	0x40022300
 8002fa0:	58026300 	.word	0x58026300
 8002fa4:	58026000 	.word	0x58026000
 8002fa8:	cb840000 	.word	0xcb840000
 8002fac:	24000024 	.word	0x24000024
 8002fb0:	053e2d63 	.word	0x053e2d63
 8002fb4:	c7520000 	.word	0xc7520000
 8002fb8:	cfb80000 	.word	0xcfb80000

08002fbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a70      	ldr	r2, [pc, #448]	; (800318c <ADC_ConfigureBoostMode+0x1d0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <ADC_ConfigureBoostMode+0x1c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6f      	ldr	r2, [pc, #444]	; (8003190 <ADC_ConfigureBoostMode+0x1d4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d109      	bne.n	8002fec <ADC_ConfigureBoostMode+0x30>
 8002fd8:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <ADC_ConfigureBoostMode+0x1d8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e008      	b.n	8002ffe <ADC_ConfigureBoostMode+0x42>
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <ADC_ConfigureBoostMode+0x1dc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01a      	beq.n	8003038 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003002:	f003 ff1d 	bl	8006e40 <HAL_RCC_GetHCLKFreq>
 8003006:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003010:	d006      	beq.n	8003020 <ADC_ConfigureBoostMode+0x64>
 8003012:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003016:	d00b      	beq.n	8003030 <ADC_ConfigureBoostMode+0x74>
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301c:	d000      	beq.n	8003020 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800301e:	e05d      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	60fb      	str	r3, [r7, #12]
        break;
 800302e:	e055      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	60fb      	str	r3, [r7, #12]
        break;
 8003036:	e051      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003038:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800303c:	f004 fe3a 	bl	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003040:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800304a:	d02a      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
 800304c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003050:	d813      	bhi.n	800307a <ADC_ConfigureBoostMode+0xbe>
 8003052:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003056:	d024      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
 8003058:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800305c:	d806      	bhi.n	800306c <ADC_ConfigureBoostMode+0xb0>
 800305e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003062:	d01e      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
 8003064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003068:	d01b      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800306a:	e037      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800306c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003070:	d017      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
 8003072:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003076:	d014      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
        break;
 8003078:	e030      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800307a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800307e:	d021      	beq.n	80030c4 <ADC_ConfigureBoostMode+0x108>
 8003080:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003084:	d806      	bhi.n	8003094 <ADC_ConfigureBoostMode+0xd8>
 8003086:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800308a:	d013      	beq.n	80030b4 <ADC_ConfigureBoostMode+0xf8>
 800308c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003090:	d014      	beq.n	80030bc <ADC_ConfigureBoostMode+0x100>
        break;
 8003092:	e023      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003094:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003098:	d018      	beq.n	80030cc <ADC_ConfigureBoostMode+0x110>
 800309a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800309e:	d019      	beq.n	80030d4 <ADC_ConfigureBoostMode+0x118>
        break;
 80030a0:	e01c      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	60fb      	str	r3, [r7, #12]
        break;
 80030b2:	e013      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
      break;
 80030ba:	e00f      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	60fb      	str	r3, [r7, #12]
        break;
 80030c2:	e00b      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	60fb      	str	r3, [r7, #12]
        break;
 80030ca:	e007      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	09db      	lsrs	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
        break;
 80030d2:	e003      	b.n	80030dc <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	60fb      	str	r3, [r7, #12]
        break;
 80030da:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030dc:	f7ff f918 	bl	8002310 <HAL_GetREVID>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d815      	bhi.n	8003116 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <ADC_ConfigureBoostMode+0x1e0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d908      	bls.n	8003104 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003100:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003102:	e03e      	b.n	8003182 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	e035      	b.n	8003182 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <ADC_ConfigureBoostMode+0x1e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d808      	bhi.n	8003136 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	e025      	b.n	8003182 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <ADC_ConfigureBoostMode+0x1e8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d80a      	bhi.n	8003154 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003150:	609a      	str	r2, [r3, #8]
}
 8003152:	e016      	b.n	8003182 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <ADC_ConfigureBoostMode+0x1ec>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d80a      	bhi.n	8003172 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	e007      	b.n	8003182 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003180:	609a      	str	r2, [r3, #8]
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	40022100 	.word	0x40022100
 8003194:	40022300 	.word	0x40022300
 8003198:	58026300 	.word	0x58026300
 800319c:	01312d00 	.word	0x01312d00
 80031a0:	005f5e10 	.word	0x005f5e10
 80031a4:	00bebc20 	.word	0x00bebc20
 80031a8:	017d7840 	.word	0x017d7840

080031ac <LL_ADC_IsEnabled>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <LL_ADC_IsEnabled+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <LL_ADC_IsEnabled+0x1a>
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d101      	bne.n	80031ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b09f      	sub	sp, #124	; 0x7c
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e0ba      	b.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5c      	ldr	r2, [pc, #368]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003228:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	e001      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e09d      	b.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ffbd 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 8003258:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ffb7 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d17f      	bne.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800326a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326c:	2b00      	cmp	r3, #0
 800326e:	d17c      	bne.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a47      	ldr	r2, [pc, #284]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a46      	ldr	r2, [pc, #280]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003284:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003286:	e000      	b.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003288:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800328a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d039      	beq.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10e      	bne.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80032ba:	4836      	ldr	r0, [pc, #216]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80032bc:	f7ff ff76 	bl	80031ac <LL_ADC_IsEnabled>
 80032c0:	4604      	mov	r4, r0
 80032c2:	4835      	ldr	r0, [pc, #212]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032c4:	f7ff ff72 	bl	80031ac <LL_ADC_IsEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4323      	orrs	r3, r4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e008      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80032d8:	4832      	ldr	r0, [pc, #200]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032da:	f7ff ff67 	bl	80031ac <LL_ADC_IsEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d047      	beq.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003304:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003306:	e03a      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10e      	bne.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003328:	481a      	ldr	r0, [pc, #104]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800332a:	f7ff ff3f 	bl	80031ac <LL_ADC_IsEnabled>
 800332e:	4604      	mov	r4, r0
 8003330:	4819      	ldr	r0, [pc, #100]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003332:	f7ff ff3b 	bl	80031ac <LL_ADC_IsEnabled>
 8003336:	4603      	mov	r3, r0
 8003338:	4323      	orrs	r3, r4
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e008      	b.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003346:	4817      	ldr	r0, [pc, #92]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003348:	f7ff ff30 	bl	80031ac <LL_ADC_IsEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003362:	4013      	ands	r3, r2
 8003364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003366:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003368:	e009      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800337c:	e000      	b.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003388:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800338c:	4618      	mov	r0, r3
 800338e:	377c      	adds	r7, #124	; 0x7c
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	40022000 	.word	0x40022000
 8003398:	40022100 	.word	0x40022100
 800339c:	40022300 	.word	0x40022300
 80033a0:	58026300 	.word	0x58026300
 80033a4:	58026000 	.word	0x58026000
 80033a8:	fffff0e0 	.word	0xfffff0e0

080033ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <__NVIC_SetPriorityGrouping+0x40>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <__NVIC_SetPriorityGrouping+0x40>)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	60d3      	str	r3, [r2, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00
 80033f0:	05fa0000 	.word	0x05fa0000

080033f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_GetPriorityGrouping+0x18>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800341a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db0b      	blt.n	800343a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4907      	ldr	r1, [pc, #28]	; (8003448 <__NVIC_EnableIRQ+0x38>)
 800342a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2001      	movs	r0, #1
 8003432:	fa00 f202 	lsl.w	r2, r0, r2
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
         );
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003518:	d301      	bcc.n	800351e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351a:	2301      	movs	r3, #1
 800351c:	e00f      	b.n	800353e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <SysTick_Config+0x40>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003526:	210f      	movs	r1, #15
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f7ff ff8e 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Config+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <SysTick_Config+0x40>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff29 	bl	80033ac <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003570:	f7ff ff40 	bl	80033f4 <__NVIC_GetPriorityGrouping>
 8003574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff ff90 	bl	80034a0 <NVIC_EncodePriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff5f 	bl	800344c <__NVIC_SetPriority>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff33 	bl	8003410 <__NVIC_EnableIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ffa4 	bl	8003508 <SysTick_Config>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7fe fe6e 	bl	80022b4 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e316      	b.n	8003c12 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a66      	ldr	r2, [pc, #408]	; (8003784 <HAL_DMA_Init+0x1b8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d04a      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a65      	ldr	r2, [pc, #404]	; (8003788 <HAL_DMA_Init+0x1bc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d045      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a63      	ldr	r2, [pc, #396]	; (800378c <HAL_DMA_Init+0x1c0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d040      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a62      	ldr	r2, [pc, #392]	; (8003790 <HAL_DMA_Init+0x1c4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d03b      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_DMA_Init+0x1c8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d036      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a5f      	ldr	r2, [pc, #380]	; (8003798 <HAL_DMA_Init+0x1cc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d031      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a5d      	ldr	r2, [pc, #372]	; (800379c <HAL_DMA_Init+0x1d0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02c      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a5c      	ldr	r2, [pc, #368]	; (80037a0 <HAL_DMA_Init+0x1d4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d027      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a5a      	ldr	r2, [pc, #360]	; (80037a4 <HAL_DMA_Init+0x1d8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a59      	ldr	r2, [pc, #356]	; (80037a8 <HAL_DMA_Init+0x1dc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a57      	ldr	r2, [pc, #348]	; (80037ac <HAL_DMA_Init+0x1e0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a56      	ldr	r2, [pc, #344]	; (80037b0 <HAL_DMA_Init+0x1e4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <HAL_DMA_Init+0x1e8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a53      	ldr	r2, [pc, #332]	; (80037b8 <HAL_DMA_Init+0x1ec>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a51      	ldr	r2, [pc, #324]	; (80037bc <HAL_DMA_Init+0x1f0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_DMA_Init+0xb8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a50      	ldr	r2, [pc, #320]	; (80037c0 <HAL_DMA_Init+0x1f4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_DMA_Init+0xbc>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_DMA_Init+0xbe>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 813b 	beq.w	8003906 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a37      	ldr	r2, [pc, #220]	; (8003784 <HAL_DMA_Init+0x1b8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d04a      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a36      	ldr	r2, [pc, #216]	; (8003788 <HAL_DMA_Init+0x1bc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d045      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a34      	ldr	r2, [pc, #208]	; (800378c <HAL_DMA_Init+0x1c0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d040      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a33      	ldr	r2, [pc, #204]	; (8003790 <HAL_DMA_Init+0x1c4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d03b      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a31      	ldr	r2, [pc, #196]	; (8003794 <HAL_DMA_Init+0x1c8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d036      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a30      	ldr	r2, [pc, #192]	; (8003798 <HAL_DMA_Init+0x1cc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d031      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2e      	ldr	r2, [pc, #184]	; (800379c <HAL_DMA_Init+0x1d0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02c      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_DMA_Init+0x1d4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d027      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_DMA_Init+0x1d8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_DMA_Init+0x174>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <HAL_DMA_Init+0x1dc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d01d      	beq.n	8003740 <HAL_DMA_Init+0x174>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a28      	ldr	r2, [pc, #160]	; (80037ac <HAL_DMA_Init+0x1e0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_DMA_Init+0x174>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <HAL_DMA_Init+0x1e4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_DMA_Init+0x174>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_DMA_Init+0x1e8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_DMA_Init+0x174>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a24      	ldr	r2, [pc, #144]	; (80037b8 <HAL_DMA_Init+0x1ec>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_DMA_Init+0x174>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_DMA_Init+0x1f0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_DMA_Init+0x174>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <HAL_DMA_Init+0x1f4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <HAL_DMA_Init+0x186>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e007      	b.n	8003762 <HAL_DMA_Init+0x196>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003762:	e02f      	b.n	80037c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003764:	f7fe fda6 	bl	80022b4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b05      	cmp	r3, #5
 8003770:	d928      	bls.n	80037c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2203      	movs	r2, #3
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e246      	b.n	8003c12 <HAL_DMA_Init+0x646>
 8003784:	40020010 	.word	0x40020010
 8003788:	40020028 	.word	0x40020028
 800378c:	40020040 	.word	0x40020040
 8003790:	40020058 	.word	0x40020058
 8003794:	40020070 	.word	0x40020070
 8003798:	40020088 	.word	0x40020088
 800379c:	400200a0 	.word	0x400200a0
 80037a0:	400200b8 	.word	0x400200b8
 80037a4:	40020410 	.word	0x40020410
 80037a8:	40020428 	.word	0x40020428
 80037ac:	40020440 	.word	0x40020440
 80037b0:	40020458 	.word	0x40020458
 80037b4:	40020470 	.word	0x40020470
 80037b8:	40020488 	.word	0x40020488
 80037bc:	400204a0 	.word	0x400204a0
 80037c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1c8      	bne.n	8003764 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4b83      	ldr	r3, [pc, #524]	; (80039ec <HAL_DMA_Init+0x420>)
 80037de:	4013      	ands	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80037ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003802:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2b04      	cmp	r3, #4
 8003816:	d107      	bne.n	8003828 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	4313      	orrs	r3, r2
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003828:	4b71      	ldr	r3, [pc, #452]	; (80039f0 <HAL_DMA_Init+0x424>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b71      	ldr	r3, [pc, #452]	; (80039f4 <HAL_DMA_Init+0x428>)
 800382e:	4013      	ands	r3, r2
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d328      	bcc.n	8003888 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b28      	cmp	r3, #40	; 0x28
 800383c:	d903      	bls.n	8003846 <HAL_DMA_Init+0x27a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b2e      	cmp	r3, #46	; 0x2e
 8003844:	d917      	bls.n	8003876 <HAL_DMA_Init+0x2aa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b3e      	cmp	r3, #62	; 0x3e
 800384c:	d903      	bls.n	8003856 <HAL_DMA_Init+0x28a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b42      	cmp	r3, #66	; 0x42
 8003854:	d90f      	bls.n	8003876 <HAL_DMA_Init+0x2aa>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b46      	cmp	r3, #70	; 0x46
 800385c:	d903      	bls.n	8003866 <HAL_DMA_Init+0x29a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b48      	cmp	r3, #72	; 0x48
 8003864:	d907      	bls.n	8003876 <HAL_DMA_Init+0x2aa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b4e      	cmp	r3, #78	; 0x4e
 800386c:	d905      	bls.n	800387a <HAL_DMA_Init+0x2ae>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b52      	cmp	r3, #82	; 0x52
 8003874:	d801      	bhi.n	800387a <HAL_DMA_Init+0x2ae>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <HAL_DMA_Init+0x2b0>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003886:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d117      	bne.n	80038e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f002 f813 	bl	80058f0 <DMA_CheckFifoParam>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e197      	b.n	8003c12 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f001 ff4e 	bl	800578c <DMA_CalcBaseAndBitshift>
 80038f0:	4603      	mov	r3, r0
 80038f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	223f      	movs	r2, #63	; 0x3f
 80038fe:	409a      	lsls	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e0cd      	b.n	8003aa2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <HAL_DMA_Init+0x42c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a39      	ldr	r2, [pc, #228]	; (80039fc <HAL_DMA_Init+0x430>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01d      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a38      	ldr	r2, [pc, #224]	; (8003a00 <HAL_DMA_Init+0x434>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d018      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a36      	ldr	r2, [pc, #216]	; (8003a04 <HAL_DMA_Init+0x438>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a35      	ldr	r2, [pc, #212]	; (8003a08 <HAL_DMA_Init+0x43c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a33      	ldr	r2, [pc, #204]	; (8003a0c <HAL_DMA_Init+0x440>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <HAL_DMA_Init+0x444>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_DMA_Init+0x38a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a30      	ldr	r2, [pc, #192]	; (8003a14 <HAL_DMA_Init+0x448>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_DMA_Init+0x38e>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_DMA_Init+0x390>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8097 	beq.w	8003a90 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <HAL_DMA_Init+0x42c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d021      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <HAL_DMA_Init+0x430>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01c      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_DMA_Init+0x434>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d017      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_DMA_Init+0x438>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d012      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_DMA_Init+0x43c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00d      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <HAL_DMA_Init+0x440>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d008      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <HAL_DMA_Init+0x444>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <HAL_DMA_Init+0x3e4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_DMA_Init+0x448>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_DMA_Init+0x44c>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d020      	beq.n	8003a1c <HAL_DMA_Init+0x450>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d102      	bne.n	80039e8 <HAL_DMA_Init+0x41c>
 80039e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039e6:	e01a      	b.n	8003a1e <HAL_DMA_Init+0x452>
 80039e8:	2300      	movs	r3, #0
 80039ea:	e018      	b.n	8003a1e <HAL_DMA_Init+0x452>
 80039ec:	fe10803f 	.word	0xfe10803f
 80039f0:	5c001000 	.word	0x5c001000
 80039f4:	ffff0000 	.word	0xffff0000
 80039f8:	58025408 	.word	0x58025408
 80039fc:	5802541c 	.word	0x5802541c
 8003a00:	58025430 	.word	0x58025430
 8003a04:	58025444 	.word	0x58025444
 8003a08:	58025458 	.word	0x58025458
 8003a0c:	5802546c 	.word	0x5802546c
 8003a10:	58025480 	.word	0x58025480
 8003a14:	58025494 	.word	0x58025494
 8003a18:	fffe000f 	.word	0xfffe000f
 8003a1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68d2      	ldr	r2, [r2, #12]
 8003a22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b6e      	ldr	r3, [pc, #440]	; (8003c1c <HAL_DMA_Init+0x650>)
 8003a64:	4413      	add	r3, r2
 8003a66:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_DMA_Init+0x654>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	009a      	lsls	r2, r3, #2
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 fe89 	bl	800578c <DMA_CalcBaseAndBitshift>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2201      	movs	r2, #1
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e008      	b.n	8003aa2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0b7      	b.n	8003c12 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5f      	ldr	r2, [pc, #380]	; (8003c24 <HAL_DMA_Init+0x658>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d072      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_DMA_Init+0x65c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d06d      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a5c      	ldr	r2, [pc, #368]	; (8003c2c <HAL_DMA_Init+0x660>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d068      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a5a      	ldr	r2, [pc, #360]	; (8003c30 <HAL_DMA_Init+0x664>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d063      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a59      	ldr	r2, [pc, #356]	; (8003c34 <HAL_DMA_Init+0x668>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d05e      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_DMA_Init+0x66c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d059      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a56      	ldr	r2, [pc, #344]	; (8003c3c <HAL_DMA_Init+0x670>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d054      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_DMA_Init+0x674>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04f      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a53      	ldr	r2, [pc, #332]	; (8003c44 <HAL_DMA_Init+0x678>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d04a      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a51      	ldr	r2, [pc, #324]	; (8003c48 <HAL_DMA_Init+0x67c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d045      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a50      	ldr	r2, [pc, #320]	; (8003c4c <HAL_DMA_Init+0x680>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d040      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_DMA_Init+0x684>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d03b      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <HAL_DMA_Init+0x688>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d036      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a4b      	ldr	r2, [pc, #300]	; (8003c58 <HAL_DMA_Init+0x68c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d031      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <HAL_DMA_Init+0x690>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d02c      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a48      	ldr	r2, [pc, #288]	; (8003c60 <HAL_DMA_Init+0x694>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d027      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a47      	ldr	r2, [pc, #284]	; (8003c64 <HAL_DMA_Init+0x698>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d022      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a45      	ldr	r2, [pc, #276]	; (8003c68 <HAL_DMA_Init+0x69c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a44      	ldr	r2, [pc, #272]	; (8003c6c <HAL_DMA_Init+0x6a0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d018      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a42      	ldr	r2, [pc, #264]	; (8003c70 <HAL_DMA_Init+0x6a4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a41      	ldr	r2, [pc, #260]	; (8003c74 <HAL_DMA_Init+0x6a8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3f      	ldr	r2, [pc, #252]	; (8003c78 <HAL_DMA_Init+0x6ac>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3e      	ldr	r2, [pc, #248]	; (8003c7c <HAL_DMA_Init+0x6b0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_DMA_Init+0x5c6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <HAL_DMA_Init+0x6b4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_DMA_Init+0x5ca>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_DMA_Init+0x5cc>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d032      	beq.n	8003c02 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f001 ff23 	bl	80059e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bc4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_DMA_Init+0x624>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d80c      	bhi.n	8003bf0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f001 ffa0 	bl	8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e008      	b.n	8003c02 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	a7fdabf8 	.word	0xa7fdabf8
 8003c20:	cccccccd 	.word	0xcccccccd
 8003c24:	40020010 	.word	0x40020010
 8003c28:	40020028 	.word	0x40020028
 8003c2c:	40020040 	.word	0x40020040
 8003c30:	40020058 	.word	0x40020058
 8003c34:	40020070 	.word	0x40020070
 8003c38:	40020088 	.word	0x40020088
 8003c3c:	400200a0 	.word	0x400200a0
 8003c40:	400200b8 	.word	0x400200b8
 8003c44:	40020410 	.word	0x40020410
 8003c48:	40020428 	.word	0x40020428
 8003c4c:	40020440 	.word	0x40020440
 8003c50:	40020458 	.word	0x40020458
 8003c54:	40020470 	.word	0x40020470
 8003c58:	40020488 	.word	0x40020488
 8003c5c:	400204a0 	.word	0x400204a0
 8003c60:	400204b8 	.word	0x400204b8
 8003c64:	58025408 	.word	0x58025408
 8003c68:	5802541c 	.word	0x5802541c
 8003c6c:	58025430 	.word	0x58025430
 8003c70:	58025444 	.word	0x58025444
 8003c74:	58025458 	.word	0x58025458
 8003c78:	5802546c 	.word	0x5802546c
 8003c7c:	58025480 	.word	0x58025480
 8003c80:	58025494 	.word	0x58025494

08003c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e226      	b.n	80040ee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_DMA_Start_IT+0x2a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e21f      	b.n	80040ee <HAL_DMA_Start_IT+0x46a>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	f040 820a 	bne.w	80040d8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_DMA_Start_IT+0x1f4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_DMA_Start_IT+0x1f8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_DMA_Start_IT+0x1fc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a63      	ldr	r2, [pc, #396]	; (8003e84 <HAL_DMA_Start_IT+0x200>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a62      	ldr	r2, [pc, #392]	; (8003e88 <HAL_DMA_Start_IT+0x204>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a60      	ldr	r2, [pc, #384]	; (8003e8c <HAL_DMA_Start_IT+0x208>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a5f      	ldr	r2, [pc, #380]	; (8003e90 <HAL_DMA_Start_IT+0x20c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a5d      	ldr	r2, [pc, #372]	; (8003e94 <HAL_DMA_Start_IT+0x210>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_DMA_Start_IT+0x214>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a5a      	ldr	r2, [pc, #360]	; (8003e9c <HAL_DMA_Start_IT+0x218>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_DMA_Start_IT+0x21c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a57      	ldr	r2, [pc, #348]	; (8003ea4 <HAL_DMA_Start_IT+0x220>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_DMA_Start_IT+0x224>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a54      	ldr	r2, [pc, #336]	; (8003eac <HAL_DMA_Start_IT+0x228>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a53      	ldr	r2, [pc, #332]	; (8003eb0 <HAL_DMA_Start_IT+0x22c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_Start_IT+0xee>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a51      	ldr	r2, [pc, #324]	; (8003eb4 <HAL_DMA_Start_IT+0x230>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_DMA_Start_IT+0x100>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_DMA_Start_IT+0x110>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f001 fb4a 	bl	8005434 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a34      	ldr	r2, [pc, #208]	; (8003e78 <HAL_DMA_Start_IT+0x1f4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d04a      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <HAL_DMA_Start_IT+0x1f8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d045      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <HAL_DMA_Start_IT+0x1fc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d040      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <HAL_DMA_Start_IT+0x200>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d03b      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <HAL_DMA_Start_IT+0x204>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d036      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <HAL_DMA_Start_IT+0x208>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d031      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <HAL_DMA_Start_IT+0x20c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d02c      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <HAL_DMA_Start_IT+0x210>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d027      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a28      	ldr	r2, [pc, #160]	; (8003e98 <HAL_DMA_Start_IT+0x214>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <HAL_DMA_Start_IT+0x218>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d01d      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <HAL_DMA_Start_IT+0x21c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_DMA_Start_IT+0x220>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_DMA_Start_IT+0x224>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_DMA_Start_IT+0x228>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_DMA_Start_IT+0x22c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_DMA_Start_IT+0x1bc>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_DMA_Start_IT+0x230>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_DMA_Start_IT+0x1c0>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_DMA_Start_IT+0x1c2>
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d036      	beq.n	8003eb8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 021e 	bic.w	r2, r3, #30
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0216 	orr.w	r2, r2, #22
 8003e5c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03e      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0208 	orr.w	r2, r2, #8
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e035      	b.n	8003ee4 <HAL_DMA_Start_IT+0x260>
 8003e78:	40020010 	.word	0x40020010
 8003e7c:	40020028 	.word	0x40020028
 8003e80:	40020040 	.word	0x40020040
 8003e84:	40020058 	.word	0x40020058
 8003e88:	40020070 	.word	0x40020070
 8003e8c:	40020088 	.word	0x40020088
 8003e90:	400200a0 	.word	0x400200a0
 8003e94:	400200b8 	.word	0x400200b8
 8003e98:	40020410 	.word	0x40020410
 8003e9c:	40020428 	.word	0x40020428
 8003ea0:	40020440 	.word	0x40020440
 8003ea4:	40020458 	.word	0x40020458
 8003ea8:	40020470 	.word	0x40020470
 8003eac:	40020488 	.word	0x40020488
 8003eb0:	400204a0 	.word	0x400204a0
 8003eb4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020e 	bic.w	r2, r3, #14
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 020a 	orr.w	r2, r2, #10
 8003eca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0204 	orr.w	r2, r2, #4
 8003ee2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a83      	ldr	r2, [pc, #524]	; (80040f8 <HAL_DMA_Start_IT+0x474>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d072      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a82      	ldr	r2, [pc, #520]	; (80040fc <HAL_DMA_Start_IT+0x478>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d06d      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a80      	ldr	r2, [pc, #512]	; (8004100 <HAL_DMA_Start_IT+0x47c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d068      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a7f      	ldr	r2, [pc, #508]	; (8004104 <HAL_DMA_Start_IT+0x480>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d063      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a7d      	ldr	r2, [pc, #500]	; (8004108 <HAL_DMA_Start_IT+0x484>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d05e      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7c      	ldr	r2, [pc, #496]	; (800410c <HAL_DMA_Start_IT+0x488>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d059      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7a      	ldr	r2, [pc, #488]	; (8004110 <HAL_DMA_Start_IT+0x48c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d054      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a79      	ldr	r2, [pc, #484]	; (8004114 <HAL_DMA_Start_IT+0x490>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04f      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a77      	ldr	r2, [pc, #476]	; (8004118 <HAL_DMA_Start_IT+0x494>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d04a      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a76      	ldr	r2, [pc, #472]	; (800411c <HAL_DMA_Start_IT+0x498>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d045      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a74      	ldr	r2, [pc, #464]	; (8004120 <HAL_DMA_Start_IT+0x49c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d040      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a73      	ldr	r2, [pc, #460]	; (8004124 <HAL_DMA_Start_IT+0x4a0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d03b      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a71      	ldr	r2, [pc, #452]	; (8004128 <HAL_DMA_Start_IT+0x4a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d036      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_DMA_Start_IT+0x4a8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d031      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6e      	ldr	r2, [pc, #440]	; (8004130 <HAL_DMA_Start_IT+0x4ac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02c      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6d      	ldr	r2, [pc, #436]	; (8004134 <HAL_DMA_Start_IT+0x4b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d027      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6b      	ldr	r2, [pc, #428]	; (8004138 <HAL_DMA_Start_IT+0x4b4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d022      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_DMA_Start_IT+0x4b8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d01d      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a68      	ldr	r2, [pc, #416]	; (8004140 <HAL_DMA_Start_IT+0x4bc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_DMA_Start_IT+0x4c0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_DMA_Start_IT+0x4c4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a64      	ldr	r2, [pc, #400]	; (800414c <HAL_DMA_Start_IT+0x4c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a62      	ldr	r2, [pc, #392]	; (8004150 <HAL_DMA_Start_IT+0x4cc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x350>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a61      	ldr	r2, [pc, #388]	; (8004154 <HAL_DMA_Start_IT+0x4d0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DMA_Start_IT+0x354>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_DMA_Start_IT+0x356>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01a      	beq.n	8004014 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004012:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <HAL_DMA_Start_IT+0x474>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d04a      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a36      	ldr	r2, [pc, #216]	; (80040fc <HAL_DMA_Start_IT+0x478>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d045      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a34      	ldr	r2, [pc, #208]	; (8004100 <HAL_DMA_Start_IT+0x47c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d040      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a33      	ldr	r2, [pc, #204]	; (8004104 <HAL_DMA_Start_IT+0x480>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d03b      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a31      	ldr	r2, [pc, #196]	; (8004108 <HAL_DMA_Start_IT+0x484>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d036      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a30      	ldr	r2, [pc, #192]	; (800410c <HAL_DMA_Start_IT+0x488>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d031      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <HAL_DMA_Start_IT+0x48c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02c      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <HAL_DMA_Start_IT+0x490>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d027      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <HAL_DMA_Start_IT+0x494>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <HAL_DMA_Start_IT+0x498>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01d      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a28      	ldr	r2, [pc, #160]	; (8004120 <HAL_DMA_Start_IT+0x49c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a27      	ldr	r2, [pc, #156]	; (8004124 <HAL_DMA_Start_IT+0x4a0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <HAL_DMA_Start_IT+0x4a4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_DMA_Start_IT+0x4a8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a22      	ldr	r2, [pc, #136]	; (8004130 <HAL_DMA_Start_IT+0x4ac>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_Start_IT+0x430>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <HAL_DMA_Start_IT+0x4b0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d108      	bne.n	80040c6 <HAL_DMA_Start_IT+0x442>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e012      	b.n	80040ec <HAL_DMA_Start_IT+0x468>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e009      	b.n	80040ec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
 8004138:	58025408 	.word	0x58025408
 800413c:	5802541c 	.word	0x5802541c
 8004140:	58025430 	.word	0x58025430
 8004144:	58025444 	.word	0x58025444
 8004148:	58025458 	.word	0x58025458
 800414c:	5802546c 	.word	0x5802546c
 8004150:	58025480 	.word	0x58025480
 8004154:	58025494 	.word	0x58025494

08004158 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e205      	b.n	8004576 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e1fa      	b.n	8004576 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a8c      	ldr	r2, [pc, #560]	; (80043b8 <HAL_DMA_Abort_IT+0x260>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04a      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a8b      	ldr	r2, [pc, #556]	; (80043bc <HAL_DMA_Abort_IT+0x264>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d045      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a89      	ldr	r2, [pc, #548]	; (80043c0 <HAL_DMA_Abort_IT+0x268>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d040      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a88      	ldr	r2, [pc, #544]	; (80043c4 <HAL_DMA_Abort_IT+0x26c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03b      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a86      	ldr	r2, [pc, #536]	; (80043c8 <HAL_DMA_Abort_IT+0x270>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d036      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a85      	ldr	r2, [pc, #532]	; (80043cc <HAL_DMA_Abort_IT+0x274>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d031      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a83      	ldr	r2, [pc, #524]	; (80043d0 <HAL_DMA_Abort_IT+0x278>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02c      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a82      	ldr	r2, [pc, #520]	; (80043d4 <HAL_DMA_Abort_IT+0x27c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d027      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a80      	ldr	r2, [pc, #512]	; (80043d8 <HAL_DMA_Abort_IT+0x280>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7f      	ldr	r2, [pc, #508]	; (80043dc <HAL_DMA_Abort_IT+0x284>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01d      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7d      	ldr	r2, [pc, #500]	; (80043e0 <HAL_DMA_Abort_IT+0x288>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7c      	ldr	r2, [pc, #496]	; (80043e4 <HAL_DMA_Abort_IT+0x28c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7a      	ldr	r2, [pc, #488]	; (80043e8 <HAL_DMA_Abort_IT+0x290>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a79      	ldr	r2, [pc, #484]	; (80043ec <HAL_DMA_Abort_IT+0x294>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_DMA_Abort_IT+0x298>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_DMA_Abort_IT+0xc8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a76      	ldr	r2, [pc, #472]	; (80043f4 <HAL_DMA_Abort_IT+0x29c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <HAL_DMA_Abort_IT+0xcc>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_DMA_Abort_IT+0xce>
 8004224:	2300      	movs	r3, #0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d065      	beq.n	80042f6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a60      	ldr	r2, [pc, #384]	; (80043b8 <HAL_DMA_Abort_IT+0x260>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d04a      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_DMA_Abort_IT+0x264>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d045      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a5d      	ldr	r2, [pc, #372]	; (80043c0 <HAL_DMA_Abort_IT+0x268>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d040      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_DMA_Abort_IT+0x26c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d03b      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5a      	ldr	r2, [pc, #360]	; (80043c8 <HAL_DMA_Abort_IT+0x270>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d036      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_DMA_Abort_IT+0x274>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d031      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a57      	ldr	r2, [pc, #348]	; (80043d0 <HAL_DMA_Abort_IT+0x278>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d02c      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a55      	ldr	r2, [pc, #340]	; (80043d4 <HAL_DMA_Abort_IT+0x27c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d027      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a54      	ldr	r2, [pc, #336]	; (80043d8 <HAL_DMA_Abort_IT+0x280>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d022      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_DMA_Abort_IT+0x284>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01d      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a51      	ldr	r2, [pc, #324]	; (80043e0 <HAL_DMA_Abort_IT+0x288>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d018      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <HAL_DMA_Abort_IT+0x28c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <HAL_DMA_Abort_IT+0x290>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a4c      	ldr	r2, [pc, #304]	; (80043ec <HAL_DMA_Abort_IT+0x294>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4b      	ldr	r2, [pc, #300]	; (80043f0 <HAL_DMA_Abort_IT+0x298>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x17a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a49      	ldr	r2, [pc, #292]	; (80043f4 <HAL_DMA_Abort_IT+0x29c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <HAL_DMA_Abort_IT+0x18c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e147      	b.n	8004574 <HAL_DMA_Abort_IT+0x41c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e13e      	b.n	8004574 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 020e 	bic.w	r2, r2, #14
 8004304:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_DMA_Abort_IT+0x260>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d04a      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <HAL_DMA_Abort_IT+0x264>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d045      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_DMA_Abort_IT+0x268>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d040      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <HAL_DMA_Abort_IT+0x26c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d03b      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_DMA_Abort_IT+0x270>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d036      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a23      	ldr	r2, [pc, #140]	; (80043cc <HAL_DMA_Abort_IT+0x274>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d031      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <HAL_DMA_Abort_IT+0x278>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d02c      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <HAL_DMA_Abort_IT+0x27c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d027      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_DMA_Abort_IT+0x280>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <HAL_DMA_Abort_IT+0x284>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01d      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_DMA_Abort_IT+0x288>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_DMA_Abort_IT+0x28c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_DMA_Abort_IT+0x290>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_DMA_Abort_IT+0x294>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <HAL_DMA_Abort_IT+0x298>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x24e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <HAL_DMA_Abort_IT+0x29c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d128      	bne.n	80043f8 <HAL_DMA_Abort_IT+0x2a0>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e027      	b.n	8004408 <HAL_DMA_Abort_IT+0x2b0>
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5c      	ldr	r2, [pc, #368]	; (8004580 <HAL_DMA_Abort_IT+0x428>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d072      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a5b      	ldr	r2, [pc, #364]	; (8004584 <HAL_DMA_Abort_IT+0x42c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d06d      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a59      	ldr	r2, [pc, #356]	; (8004588 <HAL_DMA_Abort_IT+0x430>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d068      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a58      	ldr	r2, [pc, #352]	; (800458c <HAL_DMA_Abort_IT+0x434>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d063      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a56      	ldr	r2, [pc, #344]	; (8004590 <HAL_DMA_Abort_IT+0x438>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d05e      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a55      	ldr	r2, [pc, #340]	; (8004594 <HAL_DMA_Abort_IT+0x43c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d059      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a53      	ldr	r2, [pc, #332]	; (8004598 <HAL_DMA_Abort_IT+0x440>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d054      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a52      	ldr	r2, [pc, #328]	; (800459c <HAL_DMA_Abort_IT+0x444>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d04f      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a50      	ldr	r2, [pc, #320]	; (80045a0 <HAL_DMA_Abort_IT+0x448>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d04a      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a4f      	ldr	r2, [pc, #316]	; (80045a4 <HAL_DMA_Abort_IT+0x44c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d045      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a4d      	ldr	r2, [pc, #308]	; (80045a8 <HAL_DMA_Abort_IT+0x450>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d040      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <HAL_DMA_Abort_IT+0x454>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d03b      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <HAL_DMA_Abort_IT+0x458>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d036      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a49      	ldr	r2, [pc, #292]	; (80045b4 <HAL_DMA_Abort_IT+0x45c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a47      	ldr	r2, [pc, #284]	; (80045b8 <HAL_DMA_Abort_IT+0x460>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02c      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a46      	ldr	r2, [pc, #280]	; (80045bc <HAL_DMA_Abort_IT+0x464>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d027      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a44      	ldr	r2, [pc, #272]	; (80045c0 <HAL_DMA_Abort_IT+0x468>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d022      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a43      	ldr	r2, [pc, #268]	; (80045c4 <HAL_DMA_Abort_IT+0x46c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01d      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <HAL_DMA_Abort_IT+0x470>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a40      	ldr	r2, [pc, #256]	; (80045cc <HAL_DMA_Abort_IT+0x474>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <HAL_DMA_Abort_IT+0x478>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <HAL_DMA_Abort_IT+0x47c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <HAL_DMA_Abort_IT+0x480>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x3a0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_DMA_Abort_IT+0x484>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_Abort_IT+0x3a4>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_DMA_Abort_IT+0x3a6>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d028      	beq.n	8004554 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2201      	movs	r2, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004530:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004548:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004552:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40020010 	.word	0x40020010
 8004584:	40020028 	.word	0x40020028
 8004588:	40020040 	.word	0x40020040
 800458c:	40020058 	.word	0x40020058
 8004590:	40020070 	.word	0x40020070
 8004594:	40020088 	.word	0x40020088
 8004598:	400200a0 	.word	0x400200a0
 800459c:	400200b8 	.word	0x400200b8
 80045a0:	40020410 	.word	0x40020410
 80045a4:	40020428 	.word	0x40020428
 80045a8:	40020440 	.word	0x40020440
 80045ac:	40020458 	.word	0x40020458
 80045b0:	40020470 	.word	0x40020470
 80045b4:	40020488 	.word	0x40020488
 80045b8:	400204a0 	.word	0x400204a0
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	58025408 	.word	0x58025408
 80045c4:	5802541c 	.word	0x5802541c
 80045c8:	58025430 	.word	0x58025430
 80045cc:	58025444 	.word	0x58025444
 80045d0:	58025458 	.word	0x58025458
 80045d4:	5802546c 	.word	0x5802546c
 80045d8:	58025480 	.word	0x58025480
 80045dc:	58025494 	.word	0x58025494

080045e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045ec:	4b67      	ldr	r3, [pc, #412]	; (800478c <HAL_DMA_IRQHandler+0x1ac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a67      	ldr	r2, [pc, #412]	; (8004790 <HAL_DMA_IRQHandler+0x1b0>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5f      	ldr	r2, [pc, #380]	; (8004794 <HAL_DMA_IRQHandler+0x1b4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04a      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5d      	ldr	r2, [pc, #372]	; (8004798 <HAL_DMA_IRQHandler+0x1b8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5c      	ldr	r2, [pc, #368]	; (800479c <HAL_DMA_IRQHandler+0x1bc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d040      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5a      	ldr	r2, [pc, #360]	; (80047a0 <HAL_DMA_IRQHandler+0x1c0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d03b      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a59      	ldr	r2, [pc, #356]	; (80047a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d036      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a57      	ldr	r2, [pc, #348]	; (80047a8 <HAL_DMA_IRQHandler+0x1c8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a56      	ldr	r2, [pc, #344]	; (80047ac <HAL_DMA_IRQHandler+0x1cc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d02c      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a54      	ldr	r2, [pc, #336]	; (80047b0 <HAL_DMA_IRQHandler+0x1d0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d027      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a53      	ldr	r2, [pc, #332]	; (80047b4 <HAL_DMA_IRQHandler+0x1d4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a51      	ldr	r2, [pc, #324]	; (80047b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a50      	ldr	r2, [pc, #320]	; (80047bc <HAL_DMA_IRQHandler+0x1dc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4e      	ldr	r2, [pc, #312]	; (80047c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_DMA_IRQHandler+0x1e8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_DMA_IRQHandler+0x1ec>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xd2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a48      	ldr	r2, [pc, #288]	; (80047d0 <HAL_DMA_IRQHandler+0x1f0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_DMA_IRQHandler+0xd6>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_DMA_IRQHandler+0xd8>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 842b 	beq.w	8004f14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2208      	movs	r2, #8
 80046c8:	409a      	lsls	r2, r3
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80a2 	beq.w	8004818 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <HAL_DMA_IRQHandler+0x1b4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d04a      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <HAL_DMA_IRQHandler+0x1b8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d045      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2b      	ldr	r2, [pc, #172]	; (800479c <HAL_DMA_IRQHandler+0x1bc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d040      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_DMA_IRQHandler+0x1c0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d03b      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d036      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_DMA_IRQHandler+0x1c8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d031      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_DMA_IRQHandler+0x1cc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d02c      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_DMA_IRQHandler+0x1d0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d027      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <HAL_DMA_IRQHandler+0x1d4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d022      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d01d      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <HAL_DMA_IRQHandler+0x1dc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1b      	ldr	r2, [pc, #108]	; (80047c8 <HAL_DMA_IRQHandler+0x1e8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a19      	ldr	r2, [pc, #100]	; (80047cc <HAL_DMA_IRQHandler+0x1ec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_DMA_IRQHandler+0x194>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_DMA_IRQHandler+0x1f0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d12f      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x1f4>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e02e      	b.n	80047e8 <HAL_DMA_IRQHandler+0x208>
 800478a:	bf00      	nop
 800478c:	24000024 	.word	0x24000024
 8004790:	1b4e81b5 	.word	0x1b4e81b5
 8004794:	40020010 	.word	0x40020010
 8004798:	40020028 	.word	0x40020028
 800479c:	40020040 	.word	0x40020040
 80047a0:	40020058 	.word	0x40020058
 80047a4:	40020070 	.word	0x40020070
 80047a8:	40020088 	.word	0x40020088
 80047ac:	400200a0 	.word	0x400200a0
 80047b0:	400200b8 	.word	0x400200b8
 80047b4:	40020410 	.word	0x40020410
 80047b8:	40020428 	.word	0x40020428
 80047bc:	40020440 	.word	0x40020440
 80047c0:	40020458 	.word	0x40020458
 80047c4:	40020470 	.word	0x40020470
 80047c8:	40020488 	.word	0x40020488
 80047cc:	400204a0 	.word	0x400204a0
 80047d0:	400204b8 	.word	0x400204b8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2208      	movs	r2, #8
 8004806:	409a      	lsls	r2, r3
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d06e      	beq.n	800490c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a69      	ldr	r2, [pc, #420]	; (80049d8 <HAL_DMA_IRQHandler+0x3f8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a67      	ldr	r2, [pc, #412]	; (80049dc <HAL_DMA_IRQHandler+0x3fc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a66      	ldr	r2, [pc, #408]	; (80049e0 <HAL_DMA_IRQHandler+0x400>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a64      	ldr	r2, [pc, #400]	; (80049e4 <HAL_DMA_IRQHandler+0x404>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a63      	ldr	r2, [pc, #396]	; (80049e8 <HAL_DMA_IRQHandler+0x408>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a61      	ldr	r2, [pc, #388]	; (80049ec <HAL_DMA_IRQHandler+0x40c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a60      	ldr	r2, [pc, #384]	; (80049f0 <HAL_DMA_IRQHandler+0x410>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a5e      	ldr	r2, [pc, #376]	; (80049f4 <HAL_DMA_IRQHandler+0x414>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a5d      	ldr	r2, [pc, #372]	; (80049f8 <HAL_DMA_IRQHandler+0x418>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5b      	ldr	r2, [pc, #364]	; (80049fc <HAL_DMA_IRQHandler+0x41c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5a      	ldr	r2, [pc, #360]	; (8004a00 <HAL_DMA_IRQHandler+0x420>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_DMA_IRQHandler+0x424>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a57      	ldr	r2, [pc, #348]	; (8004a08 <HAL_DMA_IRQHandler+0x428>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a55      	ldr	r2, [pc, #340]	; (8004a0c <HAL_DMA_IRQHandler+0x42c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a54      	ldr	r2, [pc, #336]	; (8004a10 <HAL_DMA_IRQHandler+0x430>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_IRQHandler+0x2ee>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_DMA_IRQHandler+0x434>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10a      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x304>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e003      	b.n	80048ec <HAL_DMA_IRQHandler+0x30c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f043 0202 	orr.w	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2204      	movs	r2, #4
 8004916:	409a      	lsls	r2, r3
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 808f 	beq.w	8004a40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <HAL_DMA_IRQHandler+0x3f8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <HAL_DMA_IRQHandler+0x3fc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_DMA_IRQHandler+0x400>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_DMA_IRQHandler+0x404>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <HAL_DMA_IRQHandler+0x408>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a24      	ldr	r2, [pc, #144]	; (80049ec <HAL_DMA_IRQHandler+0x40c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_DMA_IRQHandler+0x410>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <HAL_DMA_IRQHandler+0x414>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <HAL_DMA_IRQHandler+0x418>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <HAL_DMA_IRQHandler+0x41c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <HAL_DMA_IRQHandler+0x420>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <HAL_DMA_IRQHandler+0x424>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1a      	ldr	r2, [pc, #104]	; (8004a08 <HAL_DMA_IRQHandler+0x428>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_DMA_IRQHandler+0x42c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <HAL_DMA_IRQHandler+0x430>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x3e2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_DMA_IRQHandler+0x434>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d12a      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x438>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e023      	b.n	8004a20 <HAL_DMA_IRQHandler+0x440>
 80049d8:	40020010 	.word	0x40020010
 80049dc:	40020028 	.word	0x40020028
 80049e0:	40020040 	.word	0x40020040
 80049e4:	40020058 	.word	0x40020058
 80049e8:	40020070 	.word	0x40020070
 80049ec:	40020088 	.word	0x40020088
 80049f0:	400200a0 	.word	0x400200a0
 80049f4:	400200b8 	.word	0x400200b8
 80049f8:	40020410 	.word	0x40020410
 80049fc:	40020428 	.word	0x40020428
 8004a00:	40020440 	.word	0x40020440
 8004a04:	40020458 	.word	0x40020458
 8004a08:	40020470 	.word	0x40020470
 8004a0c:	40020488 	.word	0x40020488
 8004a10:	400204a0 	.word	0x400204a0
 8004a14:	400204b8 	.word	0x400204b8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	f043 0204 	orr.w	r2, r3, #4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2210      	movs	r2, #16
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a6 	beq.w	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a85      	ldr	r2, [pc, #532]	; (8004c70 <HAL_DMA_IRQHandler+0x690>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04a      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a83      	ldr	r2, [pc, #524]	; (8004c74 <HAL_DMA_IRQHandler+0x694>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d045      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a82      	ldr	r2, [pc, #520]	; (8004c78 <HAL_DMA_IRQHandler+0x698>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d040      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <HAL_DMA_IRQHandler+0x69c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d03b      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7f      	ldr	r2, [pc, #508]	; (8004c80 <HAL_DMA_IRQHandler+0x6a0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d036      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7d      	ldr	r2, [pc, #500]	; (8004c84 <HAL_DMA_IRQHandler+0x6a4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d031      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7c      	ldr	r2, [pc, #496]	; (8004c88 <HAL_DMA_IRQHandler+0x6a8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d02c      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <HAL_DMA_IRQHandler+0x6ac>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d027      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a79      	ldr	r2, [pc, #484]	; (8004c90 <HAL_DMA_IRQHandler+0x6b0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a77      	ldr	r2, [pc, #476]	; (8004c94 <HAL_DMA_IRQHandler+0x6b4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01d      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a76      	ldr	r2, [pc, #472]	; (8004c98 <HAL_DMA_IRQHandler+0x6b8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a74      	ldr	r2, [pc, #464]	; (8004c9c <HAL_DMA_IRQHandler+0x6bc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a73      	ldr	r2, [pc, #460]	; (8004ca0 <HAL_DMA_IRQHandler+0x6c0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a71      	ldr	r2, [pc, #452]	; (8004ca4 <HAL_DMA_IRQHandler+0x6c4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a70      	ldr	r2, [pc, #448]	; (8004ca8 <HAL_DMA_IRQHandler+0x6c8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x516>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6e      	ldr	r2, [pc, #440]	; (8004cac <HAL_DMA_IRQHandler+0x6cc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10a      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x52c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e009      	b.n	8004b20 <HAL_DMA_IRQHandler+0x540>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf14      	ite	ne
 8004b1a:	2301      	movne	r3, #1
 8004b1c:	2300      	moveq	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d03e      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d108      	bne.n	8004b62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d024      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
 8004b60:	e01f      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01b      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
 8004b72:	e016      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d107      	bne.n	8004b92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0208 	bic.w	r2, r2, #8
 8004b90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2220      	movs	r2, #32
 8004bac:	409a      	lsls	r2, r3
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8110 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <HAL_DMA_IRQHandler+0x690>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d04a      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <HAL_DMA_IRQHandler+0x694>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d045      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <HAL_DMA_IRQHandler+0x698>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d040      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <HAL_DMA_IRQHandler+0x69c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d03b      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <HAL_DMA_IRQHandler+0x6a0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d036      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <HAL_DMA_IRQHandler+0x6a4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d031      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_DMA_IRQHandler+0x6a8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_DMA_IRQHandler+0x6ac>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d027      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <HAL_DMA_IRQHandler+0x6b0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d022      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_DMA_IRQHandler+0x6b4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01d      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_DMA_IRQHandler+0x6b8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d018      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_DMA_IRQHandler+0x6bc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_DMA_IRQHandler+0x6c0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_DMA_IRQHandler+0x6c4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_DMA_IRQHandler+0x6c8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x678>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a16      	ldr	r2, [pc, #88]	; (8004cac <HAL_DMA_IRQHandler+0x6cc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d12b      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x6d0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e02a      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x6e4>
 8004c6e:	bf00      	nop
 8004c70:	40020010 	.word	0x40020010
 8004c74:	40020028 	.word	0x40020028
 8004c78:	40020040 	.word	0x40020040
 8004c7c:	40020058 	.word	0x40020058
 8004c80:	40020070 	.word	0x40020070
 8004c84:	40020088 	.word	0x40020088
 8004c88:	400200a0 	.word	0x400200a0
 8004c8c:	400200b8 	.word	0x400200b8
 8004c90:	40020410 	.word	0x40020410
 8004c94:	40020428 	.word	0x40020428
 8004c98:	40020440 	.word	0x40020440
 8004c9c:	40020458 	.word	0x40020458
 8004ca0:	40020470 	.word	0x40020470
 8004ca4:	40020488 	.word	0x40020488
 8004ca8:	400204a0 	.word	0x400204a0
 8004cac:	400204b8 	.word	0x400204b8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf14      	ite	ne
 8004cbe:	2301      	movne	r3, #1
 8004cc0:	2300      	moveq	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8087 	beq.w	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d139      	bne.n	8004d5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0216 	bic.w	r2, r2, #22
 8004cf4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <HAL_DMA_IRQHandler+0x736>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0208 	bic.w	r2, r2, #8
 8004d24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	223f      	movs	r2, #63	; 0x3f
 8004d30:	409a      	lsls	r2, r3
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 834a 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
          }
          return;
 8004d58:	e344      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d018      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02c      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
 8004d86:	e027      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d023      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
 8004d98:	e01e      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10f      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0210 	bic.w	r2, r2, #16
 8004db6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8306 	beq.w	80053ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8088 	beq.w	8004f00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a7a      	ldr	r2, [pc, #488]	; (8004fe8 <HAL_DMA_IRQHandler+0xa08>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d04a      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a79      	ldr	r2, [pc, #484]	; (8004fec <HAL_DMA_IRQHandler+0xa0c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d045      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a77      	ldr	r2, [pc, #476]	; (8004ff0 <HAL_DMA_IRQHandler+0xa10>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d040      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a76      	ldr	r2, [pc, #472]	; (8004ff4 <HAL_DMA_IRQHandler+0xa14>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d03b      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a74      	ldr	r2, [pc, #464]	; (8004ff8 <HAL_DMA_IRQHandler+0xa18>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d036      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a73      	ldr	r2, [pc, #460]	; (8004ffc <HAL_DMA_IRQHandler+0xa1c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d031      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a71      	ldr	r2, [pc, #452]	; (8005000 <HAL_DMA_IRQHandler+0xa20>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d02c      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a70      	ldr	r2, [pc, #448]	; (8005004 <HAL_DMA_IRQHandler+0xa24>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d027      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a6e      	ldr	r2, [pc, #440]	; (8005008 <HAL_DMA_IRQHandler+0xa28>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d022      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6d      	ldr	r2, [pc, #436]	; (800500c <HAL_DMA_IRQHandler+0xa2c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d01d      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6b      	ldr	r2, [pc, #428]	; (8005010 <HAL_DMA_IRQHandler+0xa30>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6a      	ldr	r2, [pc, #424]	; (8005014 <HAL_DMA_IRQHandler+0xa34>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a68      	ldr	r2, [pc, #416]	; (8005018 <HAL_DMA_IRQHandler+0xa38>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a67      	ldr	r2, [pc, #412]	; (800501c <HAL_DMA_IRQHandler+0xa3c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a65      	ldr	r2, [pc, #404]	; (8005020 <HAL_DMA_IRQHandler+0xa40>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x8b8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a64      	ldr	r2, [pc, #400]	; (8005024 <HAL_DMA_IRQHandler+0xa44>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d108      	bne.n	8004eaa <HAL_DMA_IRQHandler+0x8ca>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e007      	b.n	8004eba <HAL_DMA_IRQHandler+0x8da>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d307      	bcc.n	8004ed6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f2      	bne.n	8004eba <HAL_DMA_IRQHandler+0x8da>
 8004ed4:	e000      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ed6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ef6:	e003      	b.n	8004f00 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8272 	beq.w	80053ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
 8004f12:	e26c      	b.n	80053ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a43      	ldr	r2, [pc, #268]	; (8005028 <HAL_DMA_IRQHandler+0xa48>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d022      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a42      	ldr	r2, [pc, #264]	; (800502c <HAL_DMA_IRQHandler+0xa4c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01d      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a40      	ldr	r2, [pc, #256]	; (8005030 <HAL_DMA_IRQHandler+0xa50>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d018      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3f      	ldr	r2, [pc, #252]	; (8005034 <HAL_DMA_IRQHandler+0xa54>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3d      	ldr	r2, [pc, #244]	; (8005038 <HAL_DMA_IRQHandler+0xa58>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3c      	ldr	r2, [pc, #240]	; (800503c <HAL_DMA_IRQHandler+0xa5c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <HAL_DMA_IRQHandler+0xa60>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x984>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a39      	ldr	r2, [pc, #228]	; (8005044 <HAL_DMA_IRQHandler+0xa64>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x988>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_DMA_IRQHandler+0x98a>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 823f 	beq.w	80053ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2204      	movs	r2, #4
 8004f82:	409a      	lsls	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80cd 	beq.w	8005128 <HAL_DMA_IRQHandler+0xb48>
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80c7 	beq.w	8005128 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d049      	beq.n	8005048 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8210 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd0:	e20a      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8206 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe4:	e200      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe08>
 8004fe6:	bf00      	nop
 8004fe8:	40020010 	.word	0x40020010
 8004fec:	40020028 	.word	0x40020028
 8004ff0:	40020040 	.word	0x40020040
 8004ff4:	40020058 	.word	0x40020058
 8004ff8:	40020070 	.word	0x40020070
 8004ffc:	40020088 	.word	0x40020088
 8005000:	400200a0 	.word	0x400200a0
 8005004:	400200b8 	.word	0x400200b8
 8005008:	40020410 	.word	0x40020410
 800500c:	40020428 	.word	0x40020428
 8005010:	40020440 	.word	0x40020440
 8005014:	40020458 	.word	0x40020458
 8005018:	40020470 	.word	0x40020470
 800501c:	40020488 	.word	0x40020488
 8005020:	400204a0 	.word	0x400204a0
 8005024:	400204b8 	.word	0x400204b8
 8005028:	58025408 	.word	0x58025408
 800502c:	5802541c 	.word	0x5802541c
 8005030:	58025430 	.word	0x58025430
 8005034:	58025444 	.word	0x58025444
 8005038:	58025458 	.word	0x58025458
 800503c:	5802546c 	.word	0x5802546c
 8005040:	58025480 	.word	0x58025480
 8005044:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d160      	bne.n	8005114 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a8c      	ldr	r2, [pc, #560]	; (8005288 <HAL_DMA_IRQHandler+0xca8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d04a      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a8a      	ldr	r2, [pc, #552]	; (800528c <HAL_DMA_IRQHandler+0xcac>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d045      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a89      	ldr	r2, [pc, #548]	; (8005290 <HAL_DMA_IRQHandler+0xcb0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d040      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a87      	ldr	r2, [pc, #540]	; (8005294 <HAL_DMA_IRQHandler+0xcb4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d03b      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a86      	ldr	r2, [pc, #536]	; (8005298 <HAL_DMA_IRQHandler+0xcb8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d036      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a84      	ldr	r2, [pc, #528]	; (800529c <HAL_DMA_IRQHandler+0xcbc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d031      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a83      	ldr	r2, [pc, #524]	; (80052a0 <HAL_DMA_IRQHandler+0xcc0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d02c      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a81      	ldr	r2, [pc, #516]	; (80052a4 <HAL_DMA_IRQHandler+0xcc4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d027      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a80      	ldr	r2, [pc, #512]	; (80052a8 <HAL_DMA_IRQHandler+0xcc8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a7e      	ldr	r2, [pc, #504]	; (80052ac <HAL_DMA_IRQHandler+0xccc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01d      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7d      	ldr	r2, [pc, #500]	; (80052b0 <HAL_DMA_IRQHandler+0xcd0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a7b      	ldr	r2, [pc, #492]	; (80052b4 <HAL_DMA_IRQHandler+0xcd4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a7a      	ldr	r2, [pc, #488]	; (80052b8 <HAL_DMA_IRQHandler+0xcd8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a78      	ldr	r2, [pc, #480]	; (80052bc <HAL_DMA_IRQHandler+0xcdc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a77      	ldr	r2, [pc, #476]	; (80052c0 <HAL_DMA_IRQHandler+0xce0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xb12>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <HAL_DMA_IRQHandler+0xce4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <HAL_DMA_IRQHandler+0xb24>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0208 	bic.w	r2, r2, #8
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e007      	b.n	8005114 <HAL_DMA_IRQHandler+0xb34>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8165 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005126:	e15f      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2202      	movs	r2, #2
 8005132:	409a      	lsls	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80c5 	beq.w	80052c8 <HAL_DMA_IRQHandler+0xce8>
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80bf 	beq.w	80052c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	2202      	movs	r2, #2
 8005154:	409a      	lsls	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d018      	beq.n	8005196 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 813a 	beq.w	80053ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005180:	e134      	b.n	80053ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8130 	beq.w	80053ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005194:	e12a      	b.n	80053ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d168      	bne.n	8005272 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a38      	ldr	r2, [pc, #224]	; (8005288 <HAL_DMA_IRQHandler+0xca8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d04a      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a37      	ldr	r2, [pc, #220]	; (800528c <HAL_DMA_IRQHandler+0xcac>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d045      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a35      	ldr	r2, [pc, #212]	; (8005290 <HAL_DMA_IRQHandler+0xcb0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a34      	ldr	r2, [pc, #208]	; (8005294 <HAL_DMA_IRQHandler+0xcb4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d03b      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a32      	ldr	r2, [pc, #200]	; (8005298 <HAL_DMA_IRQHandler+0xcb8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d036      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a31      	ldr	r2, [pc, #196]	; (800529c <HAL_DMA_IRQHandler+0xcbc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <HAL_DMA_IRQHandler+0xcc0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02c      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <HAL_DMA_IRQHandler+0xcc4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d027      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <HAL_DMA_IRQHandler+0xcc8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <HAL_DMA_IRQHandler+0xccc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <HAL_DMA_IRQHandler+0xcd0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a28      	ldr	r2, [pc, #160]	; (80052b4 <HAL_DMA_IRQHandler+0xcd4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <HAL_DMA_IRQHandler+0xcd8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_DMA_IRQHandler+0xcdc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <HAL_DMA_IRQHandler+0xce0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_DMA_IRQHandler+0xc60>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <HAL_DMA_IRQHandler+0xce4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d108      	bne.n	8005252 <HAL_DMA_IRQHandler+0xc72>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0214 	bic.w	r2, r2, #20
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e007      	b.n	8005262 <HAL_DMA_IRQHandler+0xc82>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 020a 	bic.w	r2, r2, #10
 8005260:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80b8 	beq.w	80053ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005284:	e0b2      	b.n	80053ec <HAL_DMA_IRQHandler+0xe0c>
 8005286:	bf00      	nop
 8005288:	40020010 	.word	0x40020010
 800528c:	40020028 	.word	0x40020028
 8005290:	40020040 	.word	0x40020040
 8005294:	40020058 	.word	0x40020058
 8005298:	40020070 	.word	0x40020070
 800529c:	40020088 	.word	0x40020088
 80052a0:	400200a0 	.word	0x400200a0
 80052a4:	400200b8 	.word	0x400200b8
 80052a8:	40020410 	.word	0x40020410
 80052ac:	40020428 	.word	0x40020428
 80052b0:	40020440 	.word	0x40020440
 80052b4:	40020458 	.word	0x40020458
 80052b8:	40020470 	.word	0x40020470
 80052bc:	40020488 	.word	0x40020488
 80052c0:	400204a0 	.word	0x400204a0
 80052c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2208      	movs	r2, #8
 80052d2:	409a      	lsls	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8088 	beq.w	80053ee <HAL_DMA_IRQHandler+0xe0e>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8082 	beq.w	80053ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a41      	ldr	r2, [pc, #260]	; (80053f4 <HAL_DMA_IRQHandler+0xe14>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d04a      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <HAL_DMA_IRQHandler+0xe18>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d045      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a3e      	ldr	r2, [pc, #248]	; (80053fc <HAL_DMA_IRQHandler+0xe1c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d040      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <HAL_DMA_IRQHandler+0xe20>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d03b      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a3b      	ldr	r2, [pc, #236]	; (8005404 <HAL_DMA_IRQHandler+0xe24>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d036      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a39      	ldr	r2, [pc, #228]	; (8005408 <HAL_DMA_IRQHandler+0xe28>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d031      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a38      	ldr	r2, [pc, #224]	; (800540c <HAL_DMA_IRQHandler+0xe2c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d02c      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a36      	ldr	r2, [pc, #216]	; (8005410 <HAL_DMA_IRQHandler+0xe30>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d027      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a35      	ldr	r2, [pc, #212]	; (8005414 <HAL_DMA_IRQHandler+0xe34>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <HAL_DMA_IRQHandler+0xe38>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01d      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a32      	ldr	r2, [pc, #200]	; (800541c <HAL_DMA_IRQHandler+0xe3c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_DMA_IRQHandler+0xe40>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <HAL_DMA_IRQHandler+0xe44>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <HAL_DMA_IRQHandler+0xe48>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <HAL_DMA_IRQHandler+0xe4c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_DMA_IRQHandler+0xdaa>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2a      	ldr	r2, [pc, #168]	; (8005430 <HAL_DMA_IRQHandler+0xe50>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <HAL_DMA_IRQHandler+0xdbc>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 021c 	bic.w	r2, r2, #28
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e007      	b.n	80053ac <HAL_DMA_IRQHandler+0xdcc>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 020e 	bic.w	r2, r2, #14
 80053aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
 80053e2:	e004      	b.n	80053ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053e4:	bf00      	nop
 80053e6:	e002      	b.n	80053ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40020010 	.word	0x40020010
 80053f8:	40020028 	.word	0x40020028
 80053fc:	40020040 	.word	0x40020040
 8005400:	40020058 	.word	0x40020058
 8005404:	40020070 	.word	0x40020070
 8005408:	40020088 	.word	0x40020088
 800540c:	400200a0 	.word	0x400200a0
 8005410:	400200b8 	.word	0x400200b8
 8005414:	40020410 	.word	0x40020410
 8005418:	40020428 	.word	0x40020428
 800541c:	40020440 	.word	0x40020440
 8005420:	40020458 	.word	0x40020458
 8005424:	40020470 	.word	0x40020470
 8005428:	40020488 	.word	0x40020488
 800542c:	400204a0 	.word	0x400204a0
 8005430:	400204b8 	.word	0x400204b8

08005434 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a84      	ldr	r2, [pc, #528]	; (8005664 <DMA_SetConfig+0x230>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d072      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a82      	ldr	r2, [pc, #520]	; (8005668 <DMA_SetConfig+0x234>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d06d      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a81      	ldr	r2, [pc, #516]	; (800566c <DMA_SetConfig+0x238>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d068      	beq.n	800553e <DMA_SetConfig+0x10a>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a7f      	ldr	r2, [pc, #508]	; (8005670 <DMA_SetConfig+0x23c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d063      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a7e      	ldr	r2, [pc, #504]	; (8005674 <DMA_SetConfig+0x240>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d05e      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a7c      	ldr	r2, [pc, #496]	; (8005678 <DMA_SetConfig+0x244>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d059      	beq.n	800553e <DMA_SetConfig+0x10a>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7b      	ldr	r2, [pc, #492]	; (800567c <DMA_SetConfig+0x248>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d054      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a79      	ldr	r2, [pc, #484]	; (8005680 <DMA_SetConfig+0x24c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d04f      	beq.n	800553e <DMA_SetConfig+0x10a>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a78      	ldr	r2, [pc, #480]	; (8005684 <DMA_SetConfig+0x250>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a76      	ldr	r2, [pc, #472]	; (8005688 <DMA_SetConfig+0x254>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a75      	ldr	r2, [pc, #468]	; (800568c <DMA_SetConfig+0x258>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a73      	ldr	r2, [pc, #460]	; (8005690 <DMA_SetConfig+0x25c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a72      	ldr	r2, [pc, #456]	; (8005694 <DMA_SetConfig+0x260>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a70      	ldr	r2, [pc, #448]	; (8005698 <DMA_SetConfig+0x264>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6f      	ldr	r2, [pc, #444]	; (800569c <DMA_SetConfig+0x268>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6d      	ldr	r2, [pc, #436]	; (80056a0 <DMA_SetConfig+0x26c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6c      	ldr	r2, [pc, #432]	; (80056a4 <DMA_SetConfig+0x270>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <DMA_SetConfig+0x10a>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6a      	ldr	r2, [pc, #424]	; (80056a8 <DMA_SetConfig+0x274>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a69      	ldr	r2, [pc, #420]	; (80056ac <DMA_SetConfig+0x278>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <DMA_SetConfig+0x10a>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a67      	ldr	r2, [pc, #412]	; (80056b0 <DMA_SetConfig+0x27c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a66      	ldr	r2, [pc, #408]	; (80056b4 <DMA_SetConfig+0x280>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a64      	ldr	r2, [pc, #400]	; (80056b8 <DMA_SetConfig+0x284>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <DMA_SetConfig+0x10a>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a63      	ldr	r2, [pc, #396]	; (80056bc <DMA_SetConfig+0x288>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <DMA_SetConfig+0x10a>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a61      	ldr	r2, [pc, #388]	; (80056c0 <DMA_SetConfig+0x28c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d101      	bne.n	8005542 <DMA_SetConfig+0x10e>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <DMA_SetConfig+0x110>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005550:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005562:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3e      	ldr	r2, [pc, #248]	; (8005664 <DMA_SetConfig+0x230>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04a      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3d      	ldr	r2, [pc, #244]	; (8005668 <DMA_SetConfig+0x234>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d045      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3b      	ldr	r2, [pc, #236]	; (800566c <DMA_SetConfig+0x238>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d040      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3a      	ldr	r2, [pc, #232]	; (8005670 <DMA_SetConfig+0x23c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d03b      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a38      	ldr	r2, [pc, #224]	; (8005674 <DMA_SetConfig+0x240>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d036      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a37      	ldr	r2, [pc, #220]	; (8005678 <DMA_SetConfig+0x244>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d031      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a35      	ldr	r2, [pc, #212]	; (800567c <DMA_SetConfig+0x248>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02c      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a34      	ldr	r2, [pc, #208]	; (8005680 <DMA_SetConfig+0x24c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a32      	ldr	r2, [pc, #200]	; (8005684 <DMA_SetConfig+0x250>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a31      	ldr	r2, [pc, #196]	; (8005688 <DMA_SetConfig+0x254>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2f      	ldr	r2, [pc, #188]	; (800568c <DMA_SetConfig+0x258>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <DMA_SetConfig+0x25c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <DMA_SetConfig+0x260>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <DMA_SetConfig+0x264>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a29      	ldr	r2, [pc, #164]	; (800569c <DMA_SetConfig+0x268>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <DMA_SetConfig+0x1d0>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <DMA_SetConfig+0x26c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <DMA_SetConfig+0x1d4>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <DMA_SetConfig+0x1d6>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d05a      	beq.n	80056c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	223f      	movs	r2, #63	; 0x3f
 8005618:	409a      	lsls	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800562c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d108      	bne.n	8005650 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800564e:	e087      	b.n	8005760 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
}
 8005660:	e07e      	b.n	8005760 <DMA_SetConfig+0x32c>
 8005662:	bf00      	nop
 8005664:	40020010 	.word	0x40020010
 8005668:	40020028 	.word	0x40020028
 800566c:	40020040 	.word	0x40020040
 8005670:	40020058 	.word	0x40020058
 8005674:	40020070 	.word	0x40020070
 8005678:	40020088 	.word	0x40020088
 800567c:	400200a0 	.word	0x400200a0
 8005680:	400200b8 	.word	0x400200b8
 8005684:	40020410 	.word	0x40020410
 8005688:	40020428 	.word	0x40020428
 800568c:	40020440 	.word	0x40020440
 8005690:	40020458 	.word	0x40020458
 8005694:	40020470 	.word	0x40020470
 8005698:	40020488 	.word	0x40020488
 800569c:	400204a0 	.word	0x400204a0
 80056a0:	400204b8 	.word	0x400204b8
 80056a4:	58025408 	.word	0x58025408
 80056a8:	5802541c 	.word	0x5802541c
 80056ac:	58025430 	.word	0x58025430
 80056b0:	58025444 	.word	0x58025444
 80056b4:	58025458 	.word	0x58025458
 80056b8:	5802546c 	.word	0x5802546c
 80056bc:	58025480 	.word	0x58025480
 80056c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a28      	ldr	r2, [pc, #160]	; (800576c <DMA_SetConfig+0x338>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <DMA_SetConfig+0x33c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d01d      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a25      	ldr	r2, [pc, #148]	; (8005774 <DMA_SetConfig+0x340>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a24      	ldr	r2, [pc, #144]	; (8005778 <DMA_SetConfig+0x344>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a22      	ldr	r2, [pc, #136]	; (800577c <DMA_SetConfig+0x348>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	; (8005780 <DMA_SetConfig+0x34c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <DMA_SetConfig+0x350>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <DMA_SetConfig+0x2e0>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <DMA_SetConfig+0x354>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d101      	bne.n	8005718 <DMA_SetConfig+0x2e4>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <DMA_SetConfig+0x2e6>
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d020      	beq.n	8005760 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2201      	movs	r2, #1
 8005728:	409a      	lsls	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d108      	bne.n	8005750 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	60da      	str	r2, [r3, #12]
}
 800574e:	e007      	b.n	8005760 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	58025408 	.word	0x58025408
 8005770:	5802541c 	.word	0x5802541c
 8005774:	58025430 	.word	0x58025430
 8005778:	58025444 	.word	0x58025444
 800577c:	58025458 	.word	0x58025458
 8005780:	5802546c 	.word	0x5802546c
 8005784:	58025480 	.word	0x58025480
 8005788:	58025494 	.word	0x58025494

0800578c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a42      	ldr	r2, [pc, #264]	; (80058a4 <DMA_CalcBaseAndBitshift+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d04a      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a41      	ldr	r2, [pc, #260]	; (80058a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d045      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a3f      	ldr	r2, [pc, #252]	; (80058ac <DMA_CalcBaseAndBitshift+0x120>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d040      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3e      	ldr	r2, [pc, #248]	; (80058b0 <DMA_CalcBaseAndBitshift+0x124>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d03b      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3c      	ldr	r2, [pc, #240]	; (80058b4 <DMA_CalcBaseAndBitshift+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d036      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d031      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a39      	ldr	r2, [pc, #228]	; (80058bc <DMA_CalcBaseAndBitshift+0x130>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02c      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a38      	ldr	r2, [pc, #224]	; (80058c0 <DMA_CalcBaseAndBitshift+0x134>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d027      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a36      	ldr	r2, [pc, #216]	; (80058c4 <DMA_CalcBaseAndBitshift+0x138>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a35      	ldr	r2, [pc, #212]	; (80058c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d01d      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a33      	ldr	r2, [pc, #204]	; (80058cc <DMA_CalcBaseAndBitshift+0x140>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <DMA_CalcBaseAndBitshift+0x144>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a30      	ldr	r2, [pc, #192]	; (80058d4 <DMA_CalcBaseAndBitshift+0x148>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2d      	ldr	r2, [pc, #180]	; (80058dc <DMA_CalcBaseAndBitshift+0x150>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <DMA_CalcBaseAndBitshift+0x154>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d101      	bne.n	8005838 <DMA_CalcBaseAndBitshift+0xac>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <DMA_CalcBaseAndBitshift+0xae>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d024      	beq.n	8005888 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	3b10      	subs	r3, #16
 8005846:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <DMA_CalcBaseAndBitshift+0x158>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	4a24      	ldr	r2, [pc, #144]	; (80058e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d908      	bls.n	8005878 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b1f      	ldr	r3, [pc, #124]	; (80058ec <DMA_CalcBaseAndBitshift+0x160>)
 800586e:	4013      	ands	r3, r2
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	659a      	str	r2, [r3, #88]	; 0x58
 8005876:	e00d      	b.n	8005894 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <DMA_CalcBaseAndBitshift+0x160>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6593      	str	r3, [r2, #88]	; 0x58
 8005886:	e005      	b.n	8005894 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40020010 	.word	0x40020010
 80058a8:	40020028 	.word	0x40020028
 80058ac:	40020040 	.word	0x40020040
 80058b0:	40020058 	.word	0x40020058
 80058b4:	40020070 	.word	0x40020070
 80058b8:	40020088 	.word	0x40020088
 80058bc:	400200a0 	.word	0x400200a0
 80058c0:	400200b8 	.word	0x400200b8
 80058c4:	40020410 	.word	0x40020410
 80058c8:	40020428 	.word	0x40020428
 80058cc:	40020440 	.word	0x40020440
 80058d0:	40020458 	.word	0x40020458
 80058d4:	40020470 	.word	0x40020470
 80058d8:	40020488 	.word	0x40020488
 80058dc:	400204a0 	.word	0x400204a0
 80058e0:	400204b8 	.word	0x400204b8
 80058e4:	aaaaaaab 	.word	0xaaaaaaab
 80058e8:	0800cb2c 	.word	0x0800cb2c
 80058ec:	fffffc00 	.word	0xfffffc00

080058f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d120      	bne.n	8005946 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	2b03      	cmp	r3, #3
 800590a:	d858      	bhi.n	80059be <DMA_CheckFifoParam+0xce>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <DMA_CheckFifoParam+0x24>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005925 	.word	0x08005925
 8005918:	08005937 	.word	0x08005937
 800591c:	08005925 	.word	0x08005925
 8005920:	080059bf 	.word	0x080059bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d048      	beq.n	80059c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005934:	e045      	b.n	80059c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800593e:	d142      	bne.n	80059c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005944:	e03f      	b.n	80059c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800594e:	d123      	bne.n	8005998 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	2b03      	cmp	r3, #3
 8005956:	d838      	bhi.n	80059ca <DMA_CheckFifoParam+0xda>
 8005958:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <DMA_CheckFifoParam+0x70>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005971 	.word	0x08005971
 8005964:	08005977 	.word	0x08005977
 8005968:	08005971 	.word	0x08005971
 800596c:	08005989 	.word	0x08005989
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
        break;
 8005974:	e030      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d025      	beq.n	80059ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005986:	e022      	b.n	80059ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005990:	d11f      	bne.n	80059d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005996:	e01c      	b.n	80059d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	2b02      	cmp	r3, #2
 800599e:	d902      	bls.n	80059a6 <DMA_CheckFifoParam+0xb6>
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d003      	beq.n	80059ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80059a4:	e018      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
        break;
 80059aa:	e015      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
    break;
 80059bc:	e00b      	b.n	80059d6 <DMA_CheckFifoParam+0xe6>
        break;
 80059be:	bf00      	nop
 80059c0:	e00a      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059c2:	bf00      	nop
 80059c4:	e008      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059c6:	bf00      	nop
 80059c8:	e006      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
    break;
 80059d6:	bf00      	nop
    }
  }

  return status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop

080059e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a38      	ldr	r2, [pc, #224]	; (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d022      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a36      	ldr	r2, [pc, #216]	; (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01d      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d018      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a33      	ldr	r2, [pc, #204]	; (8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a32      	ldr	r2, [pc, #200]	; (8005aec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a30      	ldr	r2, [pc, #192]	; (8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2d      	ldr	r2, [pc, #180]	; (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	3b08      	subs	r3, #8
 8005a58:	4a28      	ldr	r2, [pc, #160]	; (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a84:	e024      	b.n	8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	3b10      	subs	r3, #16
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d806      	bhi.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d902      	bls.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ac0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	58025408 	.word	0x58025408
 8005ae0:	5802541c 	.word	0x5802541c
 8005ae4:	58025430 	.word	0x58025430
 8005ae8:	58025444 	.word	0x58025444
 8005aec:	58025458 	.word	0x58025458
 8005af0:	5802546c 	.word	0x5802546c
 8005af4:	58025480 	.word	0x58025480
 8005af8:	58025494 	.word	0x58025494
 8005afc:	cccccccd 	.word	0xcccccccd
 8005b00:	16009600 	.word	0x16009600
 8005b04:	58025880 	.word	0x58025880
 8005b08:	aaaaaaab 	.word	0xaaaaaaab
 8005b0c:	400204b8 	.word	0x400204b8
 8005b10:	4002040f 	.word	0x4002040f
 8005b14:	10008200 	.word	0x10008200
 8005b18:	40020880 	.word	0x40020880

08005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d04a      	beq.n	8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d847      	bhi.n	8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a25      	ldr	r2, [pc, #148]	; (8005bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a24      	ldr	r2, [pc, #144]	; (8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4b17      	ldr	r3, [pc, #92]	; (8005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ba4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ba6:	e009      	b.n	8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4b14      	ldr	r3, [pc, #80]	; (8005bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005bba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	58025408 	.word	0x58025408
 8005bd8:	5802541c 	.word	0x5802541c
 8005bdc:	58025430 	.word	0x58025430
 8005be0:	58025444 	.word	0x58025444
 8005be4:	58025458 	.word	0x58025458
 8005be8:	5802546c 	.word	0x5802546c
 8005bec:	58025480 	.word	0x58025480
 8005bf0:	58025494 	.word	0x58025494
 8005bf4:	1600963f 	.word	0x1600963f
 8005bf8:	58025940 	.word	0x58025940
 8005bfc:	1000823f 	.word	0x1000823f
 8005c00:	40020940 	.word	0x40020940

08005c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c12:	4b89      	ldr	r3, [pc, #548]	; (8005e38 <HAL_GPIO_Init+0x234>)
 8005c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c16:	e194      	b.n	8005f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	4013      	ands	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 8186 	beq.w	8005f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d00b      	beq.n	8005c50 <HAL_GPIO_Init+0x4c>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d007      	beq.n	8005c50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c44:	2b11      	cmp	r3, #17
 8005c46:	d003      	beq.n	8005c50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b12      	cmp	r3, #18
 8005c4e:	d130      	bne.n	8005cb2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c86:	2201      	movs	r2, #1
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4013      	ands	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0201 	and.w	r2, r3, #1
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d003      	beq.n	8005cf2 <HAL_GPIO_Init+0xee>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b12      	cmp	r3, #18
 8005cf0:	d123      	bne.n	8005d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	08da      	lsrs	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3208      	adds	r2, #8
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	220f      	movs	r2, #15
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	08da      	lsrs	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3208      	adds	r2, #8
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	2203      	movs	r2, #3
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 0203 	and.w	r2, r3, #3
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80e0 	beq.w	8005f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d7c:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <HAL_GPIO_Init+0x238>)
 8005d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d82:	4a2e      	ldr	r2, [pc, #184]	; (8005e3c <HAL_GPIO_Init+0x238>)
 8005d84:	f043 0302 	orr.w	r3, r3, #2
 8005d88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <HAL_GPIO_Init+0x238>)
 8005d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d9a:	4a29      	ldr	r2, [pc, #164]	; (8005e40 <HAL_GPIO_Init+0x23c>)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	3302      	adds	r3, #2
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <HAL_GPIO_Init+0x240>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d052      	beq.n	8005e6c <HAL_GPIO_Init+0x268>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <HAL_GPIO_Init+0x244>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d031      	beq.n	8005e32 <HAL_GPIO_Init+0x22e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_GPIO_Init+0x248>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d02b      	beq.n	8005e2e <HAL_GPIO_Init+0x22a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_GPIO_Init+0x24c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d025      	beq.n	8005e2a <HAL_GPIO_Init+0x226>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_GPIO_Init+0x250>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01f      	beq.n	8005e26 <HAL_GPIO_Init+0x222>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_GPIO_Init+0x254>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d019      	beq.n	8005e22 <HAL_GPIO_Init+0x21e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_GPIO_Init+0x258>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_GPIO_Init+0x21a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <HAL_GPIO_Init+0x25c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00d      	beq.n	8005e1a <HAL_GPIO_Init+0x216>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a18      	ldr	r2, [pc, #96]	; (8005e64 <HAL_GPIO_Init+0x260>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <HAL_GPIO_Init+0x212>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <HAL_GPIO_Init+0x264>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <HAL_GPIO_Init+0x20e>
 8005e0e:	2309      	movs	r3, #9
 8005e10:	e02d      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e12:	230a      	movs	r3, #10
 8005e14:	e02b      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e16:	2308      	movs	r3, #8
 8005e18:	e029      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e1a:	2307      	movs	r3, #7
 8005e1c:	e027      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e1e:	2306      	movs	r3, #6
 8005e20:	e025      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e22:	2305      	movs	r3, #5
 8005e24:	e023      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e26:	2304      	movs	r3, #4
 8005e28:	e021      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e01f      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e01d      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e01b      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e36:	bf00      	nop
 8005e38:	58000080 	.word	0x58000080
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	58000400 	.word	0x58000400
 8005e44:	58020000 	.word	0x58020000
 8005e48:	58020400 	.word	0x58020400
 8005e4c:	58020800 	.word	0x58020800
 8005e50:	58020c00 	.word	0x58020c00
 8005e54:	58021000 	.word	0x58021000
 8005e58:	58021400 	.word	0x58021400
 8005e5c:	58021800 	.word	0x58021800
 8005e60:	58021c00 	.word	0x58021c00
 8005e64:	58022000 	.word	0x58022000
 8005e68:	58022400 	.word	0x58022400
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	f002 0203 	and.w	r2, r2, #3
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	4093      	lsls	r3, r2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e7e:	4938      	ldr	r1, [pc, #224]	; (8005f60 <HAL_GPIO_Init+0x35c>)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	3302      	adds	r3, #2
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f ae63 	bne.w	8005c18 <HAL_GPIO_Init+0x14>
  }
}
 8005f52:	bf00      	nop
 8005f54:	3724      	adds	r7, #36	; 0x24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	58000400 	.word	0x58000400

08005f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
 8005f70:	4613      	mov	r3, r2
 8005f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f74:	787b      	ldrb	r3, [r7, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f80:	e003      	b.n	8005f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f82:	887b      	ldrh	r3, [r7, #2]
 8005f84:	041a      	lsls	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	619a      	str	r2, [r3, #24]
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	887b      	ldrh	r3, [r7, #2]
 8005fa8:	401a      	ands	r2, r3
 8005faa:	887b      	ldrh	r3, [r7, #2]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d104      	bne.n	8005fba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	041a      	lsls	r2, r3, #16
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005fb8:	e002      	b.n	8005fc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005fba:	887a      	ldrh	r2, [r7, #2]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005fd4:	4b19      	ldr	r3, [pc, #100]	; (800603c <HAL_PWREx_ConfigSupply+0x70>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d00a      	beq.n	8005ff6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fe0:	4b16      	ldr	r3, [pc, #88]	; (800603c <HAL_PWREx_ConfigSupply+0x70>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d001      	beq.n	8005ff2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e01f      	b.n	8006032 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e01d      	b.n	8006032 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ff6:	4b11      	ldr	r3, [pc, #68]	; (800603c <HAL_PWREx_ConfigSupply+0x70>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f023 0207 	bic.w	r2, r3, #7
 8005ffe:	490f      	ldr	r1, [pc, #60]	; (800603c <HAL_PWREx_ConfigSupply+0x70>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4313      	orrs	r3, r2
 8006004:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006006:	f7fc f955 	bl	80022b4 <HAL_GetTick>
 800600a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800600c:	e009      	b.n	8006022 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800600e:	f7fc f951 	bl	80022b4 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800601c:	d901      	bls.n	8006022 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e007      	b.n	8006032 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <HAL_PWREx_ConfigSupply+0x70>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	d1ee      	bne.n	800600e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	58024800 	.word	0x58024800

08006040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08c      	sub	sp, #48	; 0x30
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e3c4      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 8087 	beq.w	800616e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006060:	4ba2      	ldr	r3, [pc, #648]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800606a:	4ba0      	ldr	r3, [pc, #640]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	2b10      	cmp	r3, #16
 8006074:	d007      	beq.n	8006086 <HAL_RCC_OscConfig+0x46>
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b18      	cmp	r3, #24
 800607a:	d110      	bne.n	800609e <HAL_RCC_OscConfig+0x5e>
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d10b      	bne.n	800609e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006086:	4b99      	ldr	r3, [pc, #612]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d06c      	beq.n	800616c <HAL_RCC_OscConfig+0x12c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d168      	bne.n	800616c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e39e      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a6:	d106      	bne.n	80060b6 <HAL_RCC_OscConfig+0x76>
 80060a8:	4b90      	ldr	r3, [pc, #576]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a8f      	ldr	r2, [pc, #572]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e02e      	b.n	8006114 <HAL_RCC_OscConfig+0xd4>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x98>
 80060be:	4b8b      	ldr	r3, [pc, #556]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a8a      	ldr	r2, [pc, #552]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b88      	ldr	r3, [pc, #544]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a87      	ldr	r2, [pc, #540]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e01d      	b.n	8006114 <HAL_RCC_OscConfig+0xd4>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e0:	d10c      	bne.n	80060fc <HAL_RCC_OscConfig+0xbc>
 80060e2:	4b82      	ldr	r3, [pc, #520]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a81      	ldr	r2, [pc, #516]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4b7f      	ldr	r3, [pc, #508]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a7e      	ldr	r2, [pc, #504]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	e00b      	b.n	8006114 <HAL_RCC_OscConfig+0xd4>
 80060fc:	4b7b      	ldr	r3, [pc, #492]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a7a      	ldr	r2, [pc, #488]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	4b78      	ldr	r3, [pc, #480]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a77      	ldr	r2, [pc, #476]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800610e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611c:	f7fc f8ca 	bl	80022b4 <HAL_GetTick>
 8006120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006124:	f7fc f8c6 	bl	80022b4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b64      	cmp	r3, #100	; 0x64
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e352      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006136:	4b6d      	ldr	r3, [pc, #436]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0xe4>
 8006142:	e014      	b.n	800616e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fc f8b6 	bl	80022b4 <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800614c:	f7fc f8b2 	bl	80022b4 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	; 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e33e      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800615e:	4b63      	ldr	r3, [pc, #396]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x10c>
 800616a:	e000      	b.n	800616e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800616c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 8092 	beq.w	80062a0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617c:	4b5b      	ldr	r3, [pc, #364]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006184:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006186:	4b59      	ldr	r3, [pc, #356]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d007      	beq.n	80061a2 <HAL_RCC_OscConfig+0x162>
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	2b18      	cmp	r3, #24
 8006196:	d12d      	bne.n	80061f4 <HAL_RCC_OscConfig+0x1b4>
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d128      	bne.n	80061f4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061a2:	4b52      	ldr	r3, [pc, #328]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <HAL_RCC_OscConfig+0x17a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e310      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ba:	f7fc f8a9 	bl	8002310 <HAL_GetREVID>
 80061be:	4602      	mov	r2, r0
 80061c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d80a      	bhi.n	80061de <HAL_RCC_OscConfig+0x19e>
 80061c8:	4b48      	ldr	r3, [pc, #288]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	031b      	lsls	r3, r3, #12
 80061d6:	4945      	ldr	r1, [pc, #276]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061dc:	e060      	b.n	80062a0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061de:	4b43      	ldr	r3, [pc, #268]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	061b      	lsls	r3, r3, #24
 80061ec:	493f      	ldr	r1, [pc, #252]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f2:	e055      	b.n	80062a0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d038      	beq.n	800626e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061fc:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f023 0219 	bic.w	r2, r3, #25
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4938      	ldr	r1, [pc, #224]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800620a:	4313      	orrs	r3, r2
 800620c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fc f851 	bl	80022b4 <HAL_GetTick>
 8006212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006216:	f7fc f84d 	bl	80022b4 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e2d9      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006228:	4b30      	ldr	r3, [pc, #192]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006234:	f7fc f86c 	bl	8002310 <HAL_GetREVID>
 8006238:	4602      	mov	r2, r0
 800623a:	f241 0303 	movw	r3, #4099	; 0x1003
 800623e:	429a      	cmp	r2, r3
 8006240:	d80a      	bhi.n	8006258 <HAL_RCC_OscConfig+0x218>
 8006242:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	031b      	lsls	r3, r3, #12
 8006250:	4926      	ldr	r1, [pc, #152]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006252:	4313      	orrs	r3, r2
 8006254:	604b      	str	r3, [r1, #4]
 8006256:	e023      	b.n	80062a0 <HAL_RCC_OscConfig+0x260>
 8006258:	4b24      	ldr	r3, [pc, #144]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	061b      	lsls	r3, r3, #24
 8006266:	4921      	ldr	r1, [pc, #132]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
 800626c:	e018      	b.n	80062a0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626e:	4b1f      	ldr	r3, [pc, #124]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fc f81b 	bl	80022b4 <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006282:	f7fc f817 	bl	80022b4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e2a3      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006294:	4b15      	ldr	r3, [pc, #84]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f0      	bne.n	8006282 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8091 	beq.w	80063d0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d007      	beq.n	80062d4 <HAL_RCC_OscConfig+0x294>
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b18      	cmp	r3, #24
 80062c8:	d12f      	bne.n	800632a <HAL_RCC_OscConfig+0x2ea>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d12a      	bne.n	800632a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_OscConfig+0x2ac>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_RCC_OscConfig+0x2b0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d003      	beq.n	80062f0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e277      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
 80062ec:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062f0:	f7fc f80e 	bl	8002310 <HAL_GetREVID>
 80062f4:	4602      	mov	r2, r0
 80062f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d80a      	bhi.n	8006314 <HAL_RCC_OscConfig+0x2d4>
 80062fe:	4ba2      	ldr	r3, [pc, #648]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	069b      	lsls	r3, r3, #26
 800630c:	499e      	ldr	r1, [pc, #632]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800630e:	4313      	orrs	r3, r2
 8006310:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006312:	e05d      	b.n	80063d0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006314:	4b9c      	ldr	r3, [pc, #624]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	061b      	lsls	r3, r3, #24
 8006322:	4999      	ldr	r1, [pc, #612]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006324:	4313      	orrs	r3, r2
 8006326:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006328:	e052      	b.n	80063d0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d035      	beq.n	800639e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006332:	4b95      	ldr	r3, [pc, #596]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a94      	ldr	r2, [pc, #592]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633e:	f7fb ffb9 	bl	80022b4 <HAL_GetTick>
 8006342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006346:	f7fb ffb5 	bl	80022b4 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e241      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006358:	4b8b      	ldr	r3, [pc, #556]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006364:	f7fb ffd4 	bl	8002310 <HAL_GetREVID>
 8006368:	4602      	mov	r2, r0
 800636a:	f241 0303 	movw	r3, #4099	; 0x1003
 800636e:	429a      	cmp	r2, r3
 8006370:	d80a      	bhi.n	8006388 <HAL_RCC_OscConfig+0x348>
 8006372:	4b85      	ldr	r3, [pc, #532]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	069b      	lsls	r3, r3, #26
 8006380:	4981      	ldr	r1, [pc, #516]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006382:	4313      	orrs	r3, r2
 8006384:	604b      	str	r3, [r1, #4]
 8006386:	e023      	b.n	80063d0 <HAL_RCC_OscConfig+0x390>
 8006388:	4b7f      	ldr	r3, [pc, #508]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	061b      	lsls	r3, r3, #24
 8006396:	497c      	ldr	r1, [pc, #496]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006398:	4313      	orrs	r3, r2
 800639a:	60cb      	str	r3, [r1, #12]
 800639c:	e018      	b.n	80063d0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800639e:	4b7a      	ldr	r3, [pc, #488]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a79      	ldr	r2, [pc, #484]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 80063a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063aa:	f7fb ff83 	bl	80022b4 <HAL_GetTick>
 80063ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063b2:	f7fb ff7f 	bl	80022b4 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e20b      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063c4:	4b70      	ldr	r3, [pc, #448]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f0      	bne.n	80063b2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d036      	beq.n	800644a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d019      	beq.n	8006418 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e4:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 80063e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e8:	4a67      	ldr	r2, [pc, #412]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fb ff60 	bl	80022b4 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f8:	f7fb ff5c 	bl	80022b4 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1e8      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800640a:	4b5f      	ldr	r3, [pc, #380]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f0      	beq.n	80063f8 <HAL_RCC_OscConfig+0x3b8>
 8006416:	e018      	b.n	800644a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006418:	4b5b      	ldr	r3, [pc, #364]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800641a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641c:	4a5a      	ldr	r2, [pc, #360]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006424:	f7fb ff46 	bl	80022b4 <HAL_GetTick>
 8006428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642c:	f7fb ff42 	bl	80022b4 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1ce      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800643e:	4b52      	ldr	r3, [pc, #328]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d036      	beq.n	80064c4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d019      	beq.n	8006492 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800645e:	4b4a      	ldr	r3, [pc, #296]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a49      	ldr	r2, [pc, #292]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006468:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800646a:	f7fb ff23 	bl	80022b4 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006472:	f7fb ff1f 	bl	80022b4 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1ab      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006484:	4b40      	ldr	r3, [pc, #256]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x432>
 8006490:	e018      	b.n	80064c4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006492:	4b3d      	ldr	r3, [pc, #244]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a3c      	ldr	r2, [pc, #240]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800649c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800649e:	f7fb ff09 	bl	80022b4 <HAL_GetTick>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064a6:	f7fb ff05 	bl	80022b4 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e191      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064b8:	4b33      	ldr	r3, [pc, #204]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f0      	bne.n	80064a6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8086 	beq.w	80065de <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064d2:	4b2e      	ldr	r3, [pc, #184]	; (800658c <HAL_RCC_OscConfig+0x54c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2d      	ldr	r2, [pc, #180]	; (800658c <HAL_RCC_OscConfig+0x54c>)
 80064d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064de:	f7fb fee9 	bl	80022b4 <HAL_GetTick>
 80064e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064e6:	f7fb fee5 	bl	80022b4 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b64      	cmp	r3, #100	; 0x64
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e171      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f8:	4b24      	ldr	r3, [pc, #144]	; (800658c <HAL_RCC_OscConfig+0x54c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d106      	bne.n	800651a <HAL_RCC_OscConfig+0x4da>
 800650c:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	e02d      	b.n	8006576 <HAL_RCC_OscConfig+0x536>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0x4fc>
 8006522:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	6713      	str	r3, [r2, #112]	; 0x70
 800652e:	4b16      	ldr	r3, [pc, #88]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	4a15      	ldr	r2, [pc, #84]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006534:	f023 0304 	bic.w	r3, r3, #4
 8006538:	6713      	str	r3, [r2, #112]	; 0x70
 800653a:	e01c      	b.n	8006576 <HAL_RCC_OscConfig+0x536>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b05      	cmp	r3, #5
 8006542:	d10c      	bne.n	800655e <HAL_RCC_OscConfig+0x51e>
 8006544:	4b10      	ldr	r3, [pc, #64]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800654a:	f043 0304 	orr.w	r3, r3, #4
 800654e:	6713      	str	r3, [r2, #112]	; 0x70
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4a0c      	ldr	r2, [pc, #48]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6713      	str	r3, [r2, #112]	; 0x70
 800655c:	e00b      	b.n	8006576 <HAL_RCC_OscConfig+0x536>
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	6713      	str	r3, [r2, #112]	; 0x70
 800656a:	4b07      	ldr	r3, [pc, #28]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4a06      	ldr	r2, [pc, #24]	; (8006588 <HAL_RCC_OscConfig+0x548>)
 8006570:	f023 0304 	bic.w	r3, r3, #4
 8006574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01a      	beq.n	80065b4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fb fe99 	bl	80022b4 <HAL_GetTick>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006584:	e00f      	b.n	80065a6 <HAL_RCC_OscConfig+0x566>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
 800658c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006590:	f7fb fe90 	bl	80022b4 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	; 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e11a      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a6:	4b8f      	ldr	r3, [pc, #572]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0ee      	beq.n	8006590 <HAL_RCC_OscConfig+0x550>
 80065b2:	e014      	b.n	80065de <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b4:	f7fb fe7e 	bl	80022b4 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065ba:	e00a      	b.n	80065d2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065bc:	f7fb fe7a 	bl	80022b4 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e104      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065d2:	4b84      	ldr	r3, [pc, #528]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1ee      	bne.n	80065bc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80f9 	beq.w	80067da <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065e8:	4b7e      	ldr	r3, [pc, #504]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f0:	2b18      	cmp	r3, #24
 80065f2:	f000 80b4 	beq.w	800675e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	f040 8095 	bne.w	800672a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006600:	4b78      	ldr	r3, [pc, #480]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a77      	ldr	r2, [pc, #476]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fb fe52 	bl	80022b4 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006614:	f7fb fe4e 	bl	80022b4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0da      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006626:	4b6f      	ldr	r3, [pc, #444]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006632:	4b6c      	ldr	r3, [pc, #432]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006636:	4b6c      	ldr	r3, [pc, #432]	; (80067e8 <HAL_RCC_OscConfig+0x7a8>)
 8006638:	4013      	ands	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006642:	0112      	lsls	r2, r2, #4
 8006644:	430a      	orrs	r2, r1
 8006646:	4967      	ldr	r1, [pc, #412]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006648:	4313      	orrs	r3, r2
 800664a:	628b      	str	r3, [r1, #40]	; 0x28
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	3b01      	subs	r3, #1
 8006652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	3b01      	subs	r3, #1
 800665c:	025b      	lsls	r3, r3, #9
 800665e:	b29b      	uxth	r3, r3
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	3b01      	subs	r3, #1
 8006668:	041b      	lsls	r3, r3, #16
 800666a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006674:	3b01      	subs	r3, #1
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800667c:	4959      	ldr	r1, [pc, #356]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 800667e:	4313      	orrs	r3, r2
 8006680:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006682:	4b58      	ldr	r3, [pc, #352]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	4a57      	ldr	r2, [pc, #348]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800668e:	4b55      	ldr	r3, [pc, #340]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006692:	4b56      	ldr	r3, [pc, #344]	; (80067ec <HAL_RCC_OscConfig+0x7ac>)
 8006694:	4013      	ands	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800669a:	00d2      	lsls	r2, r2, #3
 800669c:	4951      	ldr	r1, [pc, #324]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066a2:	4b50      	ldr	r3, [pc, #320]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	f023 020c 	bic.w	r2, r3, #12
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	494d      	ldr	r1, [pc, #308]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066b4:	4b4b      	ldr	r3, [pc, #300]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	f023 0202 	bic.w	r2, r3, #2
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	4948      	ldr	r1, [pc, #288]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066c6:	4b47      	ldr	r3, [pc, #284]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	4a46      	ldr	r2, [pc, #280]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d2:	4b44      	ldr	r3, [pc, #272]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	4a43      	ldr	r2, [pc, #268]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066de:	4b41      	ldr	r3, [pc, #260]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80066ea:	4b3e      	ldr	r3, [pc, #248]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	4a3d      	ldr	r2, [pc, #244]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f6:	4b3b      	ldr	r3, [pc, #236]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3a      	ldr	r2, [pc, #232]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 80066fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fb fdd7 	bl	80022b4 <HAL_GetTick>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670a:	f7fb fdd3 	bl	80022b4 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e05f      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800671c:	4b31      	ldr	r3, [pc, #196]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0x6ca>
 8006728:	e057      	b.n	80067da <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006736:	f7fb fdbd 	bl	80022b4 <HAL_GetTick>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800673e:	f7fb fdb9 	bl	80022b4 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e045      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006750:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <HAL_RCC_OscConfig+0x6fe>
 800675c:	e03d      	b.n	80067da <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800675e:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006764:	4b1f      	ldr	r3, [pc, #124]	; (80067e4 <HAL_RCC_OscConfig+0x7a4>)
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b01      	cmp	r3, #1
 8006770:	d031      	beq.n	80067d6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f003 0203 	and.w	r2, r3, #3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d12a      	bne.n	80067d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678c:	429a      	cmp	r2, r3
 800678e:	d122      	bne.n	80067d6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d11a      	bne.n	80067d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0a5b      	lsrs	r3, r3, #9
 80067a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d111      	bne.n	80067d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d108      	bne.n	80067d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	0e1b      	lsrs	r3, r3, #24
 80067c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d001      	beq.n	80067da <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3730      	adds	r7, #48	; 0x30
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	58024400 	.word	0x58024400
 80067e8:	fffffc0c 	.word	0xfffffc0c
 80067ec:	ffff0007 	.word	0xffff0007

080067f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e19c      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006804:	4b8a      	ldr	r3, [pc, #552]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d910      	bls.n	8006834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	4b87      	ldr	r3, [pc, #540]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f023 020f 	bic.w	r2, r3, #15
 800681a:	4985      	ldr	r1, [pc, #532]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	4313      	orrs	r3, r2
 8006820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006822:	4b83      	ldr	r3, [pc, #524]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e184      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	4b7b      	ldr	r3, [pc, #492]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800684c:	429a      	cmp	r2, r3
 800684e:	d908      	bls.n	8006862 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006850:	4b78      	ldr	r3, [pc, #480]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4975      	ldr	r1, [pc, #468]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800685e:	4313      	orrs	r3, r2
 8006860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	4b70      	ldr	r3, [pc, #448]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800687a:	429a      	cmp	r2, r3
 800687c:	d908      	bls.n	8006890 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800687e:	4b6d      	ldr	r3, [pc, #436]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	496a      	ldr	r1, [pc, #424]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d010      	beq.n	80068be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	4b64      	ldr	r3, [pc, #400]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d908      	bls.n	80068be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ac:	4b61      	ldr	r3, [pc, #388]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	495e      	ldr	r1, [pc, #376]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d010      	beq.n	80068ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d908      	bls.n	80068ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068da:	4b56      	ldr	r3, [pc, #344]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	4953      	ldr	r1, [pc, #332]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d010      	beq.n	800691a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	4b4d      	ldr	r3, [pc, #308]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	429a      	cmp	r2, r3
 8006906:	d908      	bls.n	800691a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006908:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f023 020f 	bic.w	r2, r3, #15
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4947      	ldr	r1, [pc, #284]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006916:	4313      	orrs	r3, r2
 8006918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d055      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006926:	4b43      	ldr	r3, [pc, #268]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4940      	ldr	r1, [pc, #256]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006934:	4313      	orrs	r3, r2
 8006936:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d107      	bne.n	8006950 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006940:	4b3c      	ldr	r3, [pc, #240]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d121      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0f6      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d107      	bne.n	8006968 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006958:	4b36      	ldr	r3, [pc, #216]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d115      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0ea      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006970:	4b30      	ldr	r3, [pc, #192]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0de      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006980:	4b2c      	ldr	r3, [pc, #176]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0d6      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006990:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f023 0207 	bic.w	r2, r3, #7
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4925      	ldr	r1, [pc, #148]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a2:	f7fb fc87 	bl	80022b4 <HAL_GetTick>
 80069a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a8:	e00a      	b.n	80069c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069aa:	f7fb fc83 	bl	80022b4 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e0be      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c0:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d1eb      	bne.n	80069aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d010      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d208      	bcs.n	8006a00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ee:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f023 020f 	bic.w	r2, r3, #15
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	490e      	ldr	r1, [pc, #56]	; (8006a34 <HAL_RCC_ClockConfig+0x244>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d214      	bcs.n	8006a38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 020f 	bic.w	r2, r3, #15
 8006a16:	4906      	ldr	r1, [pc, #24]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <HAL_RCC_ClockConfig+0x240>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d005      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e086      	b.n	8006b3e <HAL_RCC_ClockConfig+0x34e>
 8006a30:	52002000 	.word	0x52002000
 8006a34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	4b3f      	ldr	r3, [pc, #252]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d208      	bcs.n	8006a66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a54:	4b3c      	ldr	r3, [pc, #240]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	4939      	ldr	r1, [pc, #228]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d208      	bcs.n	8006a94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a82:	4b31      	ldr	r3, [pc, #196]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	492e      	ldr	r1, [pc, #184]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d010      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	4b28      	ldr	r3, [pc, #160]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d208      	bcs.n	8006ac2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	4922      	ldr	r1, [pc, #136]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d010      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69da      	ldr	r2, [r3, #28]
 8006ad2:	4b1d      	ldr	r3, [pc, #116]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d208      	bcs.n	8006af0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ade:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	4917      	ldr	r1, [pc, #92]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006af0:	f000 f834 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 8006af4:	4601      	mov	r1, r0
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <HAL_RCC_ClockConfig+0x35c>)
 8006b02:	5cd3      	ldrb	r3, [r2, r3]
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	fa21 f303 	lsr.w	r3, r1, r3
 8006b0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <HAL_RCC_ClockConfig+0x358>)
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	4a0d      	ldr	r2, [pc, #52]	; (8006b4c <HAL_RCC_ClockConfig+0x35c>)
 8006b18:	5cd3      	ldrb	r3, [r2, r3]
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
 8006b24:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <HAL_RCC_ClockConfig+0x360>)
 8006b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b28:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <HAL_RCC_ClockConfig+0x364>)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_RCC_ClockConfig+0x368>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fb fb74 	bl	8002220 <HAL_InitTick>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	0800cb1c 	.word	0x0800cb1c
 8006b50:	24000028 	.word	0x24000028
 8006b54:	24000024 	.word	0x24000024
 8006b58:	2400002c 	.word	0x2400002c

08006b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	; 0x24
 8006b60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b62:	4baf      	ldr	r3, [pc, #700]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b6a:	2b18      	cmp	r3, #24
 8006b6c:	f200 814e 	bhi.w	8006e0c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006e0d 	.word	0x08006e0d
 8006b80:	08006e0d 	.word	0x08006e0d
 8006b84:	08006e0d 	.word	0x08006e0d
 8006b88:	08006e0d 	.word	0x08006e0d
 8006b8c:	08006e0d 	.word	0x08006e0d
 8006b90:	08006e0d 	.word	0x08006e0d
 8006b94:	08006e0d 	.word	0x08006e0d
 8006b98:	08006c03 	.word	0x08006c03
 8006b9c:	08006e0d 	.word	0x08006e0d
 8006ba0:	08006e0d 	.word	0x08006e0d
 8006ba4:	08006e0d 	.word	0x08006e0d
 8006ba8:	08006e0d 	.word	0x08006e0d
 8006bac:	08006e0d 	.word	0x08006e0d
 8006bb0:	08006e0d 	.word	0x08006e0d
 8006bb4:	08006e0d 	.word	0x08006e0d
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006e0d 	.word	0x08006e0d
 8006bc0:	08006e0d 	.word	0x08006e0d
 8006bc4:	08006e0d 	.word	0x08006e0d
 8006bc8:	08006e0d 	.word	0x08006e0d
 8006bcc:	08006e0d 	.word	0x08006e0d
 8006bd0:	08006e0d 	.word	0x08006e0d
 8006bd4:	08006e0d 	.word	0x08006e0d
 8006bd8:	08006c0f 	.word	0x08006c0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bdc:	4b90      	ldr	r3, [pc, #576]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006be8:	4b8d      	ldr	r3, [pc, #564]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	4a8c      	ldr	r2, [pc, #560]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006bfa:	e10a      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bfc:	4b89      	ldr	r3, [pc, #548]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006bfe:	61bb      	str	r3, [r7, #24]
    break;
 8006c00:	e107      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c02:	4b89      	ldr	r3, [pc, #548]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c04:	61bb      	str	r3, [r7, #24]
    break;
 8006c06:	e104      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c08:	4b88      	ldr	r3, [pc, #544]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006c0a:	61bb      	str	r3, [r7, #24]
    break;
 8006c0c:	e101      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c0e:	4b84      	ldr	r3, [pc, #528]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c18:	4b81      	ldr	r3, [pc, #516]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	091b      	lsrs	r3, r3, #4
 8006c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c24:	4b7e      	ldr	r3, [pc, #504]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c2e:	4b7c      	ldr	r3, [pc, #496]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	08db      	lsrs	r3, r3, #3
 8006c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	fb02 f303 	mul.w	r3, r2, r3
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80da 	beq.w	8006e06 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d05a      	beq.n	8006d0e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d302      	bcc.n	8006c62 <HAL_RCC_GetSysClockFreq+0x106>
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d078      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006c60:	e099      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c62:	4b6f      	ldr	r3, [pc, #444]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02d      	beq.n	8006cca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c6e:	4b6c      	ldr	r3, [pc, #432]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	08db      	lsrs	r3, r3, #3
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	4a6a      	ldr	r2, [pc, #424]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c98:	4b61      	ldr	r3, [pc, #388]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006cc8:	e087      	b.n	8006dda <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006e34 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cdc:	4b50      	ldr	r3, [pc, #320]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce4:	ee07 3a90 	vmov	s15, r3
 8006ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cf0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d0c:	e065      	b.n	8006dda <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006e38 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d20:	4b3f      	ldr	r3, [pc, #252]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d30:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d34:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d50:	e043      	b.n	8006dda <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006e3c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d74:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d78:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d94:	e021      	b.n	8006dda <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006e38 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dbc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006e30 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	0a5b      	lsrs	r3, r3, #9
 8006de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de4:	3301      	adds	r3, #1
 8006de6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dfe:	ee17 3a90 	vmov	r3, s15
 8006e02:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e04:	e005      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
    break;
 8006e0a:	e002      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e0e:	61bb      	str	r3, [r7, #24]
    break;
 8006e10:	bf00      	nop
  }

  return sysclockfreq;
 8006e12:	69bb      	ldr	r3, [r7, #24]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3724      	adds	r7, #36	; 0x24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	58024400 	.word	0x58024400
 8006e24:	03d09000 	.word	0x03d09000
 8006e28:	003d0900 	.word	0x003d0900
 8006e2c:	017d7840 	.word	0x017d7840
 8006e30:	46000000 	.word	0x46000000
 8006e34:	4c742400 	.word	0x4c742400
 8006e38:	4a742400 	.word	0x4a742400
 8006e3c:	4bbebc20 	.word	0x4bbebc20

08006e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e46:	f7ff fe89 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	0a1b      	lsrs	r3, r3, #8
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e58:	5cd3      	ldrb	r3, [r2, r3]
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8006e62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e6e:	5cd3      	ldrb	r3, [r2, r3]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7a:	4a07      	ldr	r2, [pc, #28]	; (8006e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e7e:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e84:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e86:	681b      	ldr	r3, [r3, #0]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	58024400 	.word	0x58024400
 8006e94:	0800cb1c 	.word	0x0800cb1c
 8006e98:	24000028 	.word	0x24000028
 8006e9c:	24000024 	.word	0x24000024

08006ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ea4:	f7ff ffcc 	bl	8006e40 <HAL_RCC_GetHCLKFreq>
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006eb6:	5cd3      	ldrb	r3, [r2, r3]
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	0800cb1c 	.word	0x0800cb1c

08006ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ed0:	f7ff ffb6 	bl	8006e40 <HAL_RCC_GetHCLKFreq>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4a04      	ldr	r2, [pc, #16]	; (8006ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ee2:	5cd3      	ldrb	r3, [r2, r3]
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	0800cb1c 	.word	0x0800cb1c

08006ef8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f00:	2300      	movs	r3, #0
 8006f02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f04:	2300      	movs	r3, #0
 8006f06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d03d      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1c:	d013      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f22:	d802      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006f28:	e01f      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f2e:	d013      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006f30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f34:	d01c      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006f36:	e018      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f38:	4baf      	ldr	r3, [pc, #700]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4aae      	ldr	r2, [pc, #696]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f44:	e015      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fd23 	bl	8008998 <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f56:	e00c      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3324      	adds	r3, #36	; 0x24
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fdcc 	bl	8008afc <RCCEx_PLL3_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f68:	e003      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f78:	4b9f      	ldr	r3, [pc, #636]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f84:	499c      	ldr	r1, [pc, #624]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	650b      	str	r3, [r1, #80]	; 0x50
 8006f8a:	e001      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d03d      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d826      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006fa4:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fc1 	.word	0x08006fc1
 8006fb0:	08006fcf 	.word	0x08006fcf
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	08006ff9 	.word	0x08006ff9
 8006fbc:	08006ff9 	.word	0x08006ff9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b8d      	ldr	r3, [pc, #564]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a8c      	ldr	r2, [pc, #560]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fcc:	e015      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fcdf 	bl	8008998 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fde:	e00c      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fd88 	bl	8008afc <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ff0:	e003      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007000:	4b7d      	ldr	r3, [pc, #500]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	f023 0207 	bic.w	r2, r3, #7
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700c:	497a      	ldr	r1, [pc, #488]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800700e:	4313      	orrs	r3, r2
 8007010:	650b      	str	r3, [r1, #80]	; 0x50
 8007012:	e001      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007020:	2b00      	cmp	r3, #0
 8007022:	d03e      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d01c      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d804      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d00d      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007038:	e01e      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800703a:	2bc0      	cmp	r3, #192	; 0xc0
 800703c:	d01f      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	d01e      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007044:	e018      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007046:	4b6c      	ldr	r3, [pc, #432]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	4a6b      	ldr	r2, [pc, #428]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800704c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007050:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007052:	e017      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	2100      	movs	r1, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f001 fc9c 	bl	8008998 <RCCEx_PLL2_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007064:	e00e      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3324      	adds	r3, #36	; 0x24
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fd45 	bl	8008afc <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007076:	e005      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
      break;
 800707c:	e002      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800708a:	4b5b      	ldr	r3, [pc, #364]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800708c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	4958      	ldr	r1, [pc, #352]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007098:	4313      	orrs	r3, r2
 800709a:	650b      	str	r3, [r1, #80]	; 0x50
 800709c:	e001      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d044      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b8:	d01f      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80070ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070be:	d805      	bhi.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c8:	d00e      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80070ca:	e01f      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80070cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070d0:	d01f      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80070d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070d6:	d01e      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80070d8:	e018      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a46      	ldr	r2, [pc, #280]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070e6:	e017      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fc52 	bl	8008998 <RCCEx_PLL2_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070f8:	e00e      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fcfb 	bl	8008afc <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800710a:	e005      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	e002      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800711e:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800712c:	4932      	ldr	r1, [pc, #200]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800712e:	4313      	orrs	r3, r2
 8007130:	658b      	str	r3, [r1, #88]	; 0x58
 8007132:	e001      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007140:	2b00      	cmp	r3, #0
 8007142:	d044      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800714a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800714e:	d01f      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007154:	d805      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800715a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800715e:	d00e      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007160:	e01f      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007166:	d01f      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800716c:	d01e      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800716e:	e018      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800717a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800717c:	e017      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fc07 	bl	8008998 <RCCEx_PLL2_Config>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800718e:	e00e      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fcb0 	bl	8008afc <RCCEx_PLL3_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071a0:	e005      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]
      break;
 80071a6:	e002      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80071ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071c2:	490d      	ldr	r1, [pc, #52]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	658b      	str	r3, [r1, #88]	; 0x58
 80071c8:	e001      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d035      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d00c      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80071e2:	2b10      	cmp	r3, #16
 80071e4:	d802      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01b      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80071ea:	e017      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80071ec:	2b20      	cmp	r3, #32
 80071ee:	d00c      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x312>
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d018      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80071f4:	e012      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fc:	4baf      	ldr	r3, [pc, #700]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4aae      	ldr	r2, [pc, #696]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007208:	e00e      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f001 fbc1 	bl	8008998 <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800721a:	e005      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
      break;
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800722e:	4ba3      	ldr	r3, [pc, #652]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723a:	49a0      	ldr	r1, [pc, #640]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007240:	e001      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d042      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725a:	d01f      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800725c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007260:	d805      	bhi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d00e      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800726c:	e01f      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800726e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007272:	d01f      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007278:	d01e      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800727a:	e018      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800727c:	4b8f      	ldr	r3, [pc, #572]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	4a8e      	ldr	r2, [pc, #568]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007288:	e017      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f001 fb81 	bl	8008998 <RCCEx_PLL2_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800729a:	e00e      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3324      	adds	r3, #36	; 0x24
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 fc2a 	bl	8008afc <RCCEx_PLL3_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072ac:	e005      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	75fb      	strb	r3, [r7, #23]
      break;
 80072b2:	e002      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80072b4:	bf00      	nop
 80072b6:	e000      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80072b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072c0:	4b7e      	ldr	r3, [pc, #504]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	497b      	ldr	r1, [pc, #492]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	650b      	str	r3, [r1, #80]	; 0x50
 80072d2:	e001      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d042      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ec:	d01b      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80072ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f2:	d805      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d022      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80072f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80072fe:	e01b      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007304:	d01d      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800730a:	d01c      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800730c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007310:	d01b      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007312:	e011      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3304      	adds	r3, #4
 8007318:	2101      	movs	r1, #1
 800731a:	4618      	mov	r0, r3
 800731c:	f001 fb3c 	bl	8008998 <RCCEx_PLL2_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007324:	e012      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3324      	adds	r3, #36	; 0x24
 800732a:	2101      	movs	r1, #1
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fbe5 	bl	8008afc <RCCEx_PLL3_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007336:	e009      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	75fb      	strb	r3, [r7, #23]
      break;
 800733c:	e006      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800733e:	bf00      	nop
 8007340:	e004      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007342:	bf00      	nop
 8007344:	e002      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800734a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007352:	4b5a      	ldr	r3, [pc, #360]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735e:	4957      	ldr	r1, [pc, #348]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007360:	4313      	orrs	r3, r2
 8007362:	650b      	str	r3, [r1, #80]	; 0x50
 8007364:	e001      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d044      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007380:	d01b      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007386:	d805      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d022      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800738c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007390:	d00a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007392:	e01b      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d01d      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800739a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800739e:	d01c      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80073a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073a4:	d01b      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80073a6:	e011      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 faf2 	bl	8008998 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073b8:	e012      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3324      	adds	r3, #36	; 0x24
 80073be:	2101      	movs	r1, #1
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fb9b 	bl	8008afc <RCCEx_PLL3_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073ca:	e009      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
      break;
 80073d0:	e006      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80073d2:	bf00      	nop
 80073d4:	e004      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80073d6:	bf00      	nop
 80073d8:	e002      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80073da:	bf00      	nop
 80073dc:	e000      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80073de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073e6:	4b35      	ldr	r3, [pc, #212]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073f4:	4931      	ldr	r1, [pc, #196]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	658b      	str	r3, [r1, #88]	; 0x58
 80073fa:	e001      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d02d      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007414:	d005      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741a:	d009      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d013      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007420:	e00f      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007422:	4b26      	ldr	r3, [pc, #152]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800742c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800742e:	e00c      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f001 faae 	bl	8008998 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007440:	e003      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
      break;
 8007446:	e000      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d109      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007450:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007454:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745c:	4917      	ldr	r1, [pc, #92]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800745e:	4313      	orrs	r3, r2
 8007460:	650b      	str	r3, [r1, #80]	; 0x50
 8007462:	e001      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d035      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007478:	2b03      	cmp	r3, #3
 800747a:	d81b      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074c1 	.word	0x080074c1
 8007488:	08007495 	.word	0x08007495
 800748c:	080074a3 	.word	0x080074a3
 8007490:	080074c1 	.word	0x080074c1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a08      	ldr	r2, [pc, #32]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800749a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074a0:	e00f      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	2102      	movs	r1, #2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fa75 	bl	8008998 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074b2:	e006      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]
      break;
 80074b8:	e003      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80074ba:	bf00      	nop
 80074bc:	58024400 	.word	0x58024400
      break;
 80074c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074c8:	4bba      	ldr	r3, [pc, #744]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074cc:	f023 0203 	bic.w	r2, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	49b7      	ldr	r1, [pc, #732]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074da:	e001      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8086 	beq.w	80075fa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ee:	4bb2      	ldr	r3, [pc, #712]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4ab1      	ldr	r2, [pc, #708]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80074f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074fa:	f7fa fedb 	bl	80022b4 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007500:	e009      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007502:	f7fa fed7 	bl	80022b4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b64      	cmp	r3, #100	; 0x64
 800750e:	d902      	bls.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	75fb      	strb	r3, [r7, #23]
        break;
 8007514:	e005      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007516:	4ba8      	ldr	r3, [pc, #672]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0ef      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d166      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007528:	4ba2      	ldr	r3, [pc, #648]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800752a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007532:	4053      	eors	r3, r2
 8007534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007538:	2b00      	cmp	r3, #0
 800753a:	d013      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800753c:	4b9d      	ldr	r3, [pc, #628]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800753e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007544:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007546:	4b9b      	ldr	r3, [pc, #620]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754a:	4a9a      	ldr	r2, [pc, #616]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800754c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007550:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007552:	4b98      	ldr	r3, [pc, #608]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	4a97      	ldr	r2, [pc, #604]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800755c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800755e:	4a95      	ldr	r2, [pc, #596]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800756a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756e:	d115      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7fa fea0 	bl	80022b4 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007576:	e00b      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007578:	f7fa fe9c 	bl	80022b4 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	f241 3288 	movw	r2, #5000	; 0x1388
 8007586:	4293      	cmp	r3, r2
 8007588:	d902      	bls.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	75fb      	strb	r3, [r7, #23]
            break;
 800758e:	e005      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007590:	4b88      	ldr	r3, [pc, #544]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0ed      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d126      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b0:	d10d      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80075b2:	4b80      	ldr	r3, [pc, #512]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075c0:	0919      	lsrs	r1, r3, #4
 80075c2:	4b7e      	ldr	r3, [pc, #504]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80075c4:	400b      	ands	r3, r1
 80075c6:	497b      	ldr	r1, [pc, #492]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	610b      	str	r3, [r1, #16]
 80075cc:	e005      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80075ce:	4b79      	ldr	r3, [pc, #484]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	4a78      	ldr	r2, [pc, #480]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075d8:	6113      	str	r3, [r2, #16]
 80075da:	4b76      	ldr	r3, [pc, #472]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e8:	4972      	ldr	r1, [pc, #456]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	670b      	str	r3, [r1, #112]	; 0x70
 80075ee:	e004      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	75bb      	strb	r3, [r7, #22]
 80075f4:	e001      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d07d      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800760a:	2b28      	cmp	r3, #40	; 0x28
 800760c:	d866      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	080076e3 	.word	0x080076e3
 8007618:	080076dd 	.word	0x080076dd
 800761c:	080076dd 	.word	0x080076dd
 8007620:	080076dd 	.word	0x080076dd
 8007624:	080076dd 	.word	0x080076dd
 8007628:	080076dd 	.word	0x080076dd
 800762c:	080076dd 	.word	0x080076dd
 8007630:	080076dd 	.word	0x080076dd
 8007634:	080076b9 	.word	0x080076b9
 8007638:	080076dd 	.word	0x080076dd
 800763c:	080076dd 	.word	0x080076dd
 8007640:	080076dd 	.word	0x080076dd
 8007644:	080076dd 	.word	0x080076dd
 8007648:	080076dd 	.word	0x080076dd
 800764c:	080076dd 	.word	0x080076dd
 8007650:	080076dd 	.word	0x080076dd
 8007654:	080076cb 	.word	0x080076cb
 8007658:	080076dd 	.word	0x080076dd
 800765c:	080076dd 	.word	0x080076dd
 8007660:	080076dd 	.word	0x080076dd
 8007664:	080076dd 	.word	0x080076dd
 8007668:	080076dd 	.word	0x080076dd
 800766c:	080076dd 	.word	0x080076dd
 8007670:	080076dd 	.word	0x080076dd
 8007674:	080076e3 	.word	0x080076e3
 8007678:	080076dd 	.word	0x080076dd
 800767c:	080076dd 	.word	0x080076dd
 8007680:	080076dd 	.word	0x080076dd
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076dd 	.word	0x080076dd
 800768c:	080076dd 	.word	0x080076dd
 8007690:	080076dd 	.word	0x080076dd
 8007694:	080076e3 	.word	0x080076e3
 8007698:	080076dd 	.word	0x080076dd
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076dd 	.word	0x080076dd
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076dd 	.word	0x080076dd
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	080076e3 	.word	0x080076e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	2101      	movs	r1, #1
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 f96a 	bl	8008998 <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076c8:	e00c      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3324      	adds	r3, #36	; 0x24
 80076ce:	2101      	movs	r1, #1
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fa13 	bl	8008afc <RCCEx_PLL3_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076da:	e003      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
      break;
 80076e0:	e000      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80076e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076ea:	4b32      	ldr	r3, [pc, #200]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f6:	492f      	ldr	r1, [pc, #188]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	654b      	str	r3, [r1, #84]	; 0x54
 80076fc:	e001      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d037      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007712:	2b05      	cmp	r3, #5
 8007714:	d820      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800775f 	.word	0x0800775f
 8007720:	08007735 	.word	0x08007735
 8007724:	08007747 	.word	0x08007747
 8007728:	0800775f 	.word	0x0800775f
 800772c:	0800775f 	.word	0x0800775f
 8007730:	0800775f 	.word	0x0800775f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	2101      	movs	r1, #1
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f92c 	bl	8008998 <RCCEx_PLL2_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007744:	e00c      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3324      	adds	r3, #36	; 0x24
 800774a:	2101      	movs	r1, #1
 800774c:	4618      	mov	r0, r3
 800774e:	f001 f9d5 	bl	8008afc <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	e000      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800775e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f023 0207 	bic.w	r2, r3, #7
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007772:	4910      	ldr	r1, [pc, #64]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007774:	4313      	orrs	r3, r2
 8007776:	654b      	str	r3, [r1, #84]	; 0x54
 8007778:	e001      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d040      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007790:	2b05      	cmp	r3, #5
 8007792:	d827      	bhi.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077eb 	.word	0x080077eb
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077d3 	.word	0x080077d3
 80077a8:	080077eb 	.word	0x080077eb
 80077ac:	080077eb 	.word	0x080077eb
 80077b0:	080077eb 	.word	0x080077eb
 80077b4:	58024400 	.word	0x58024400
 80077b8:	58024800 	.word	0x58024800
 80077bc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	2101      	movs	r1, #1
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f8e6 	bl	8008998 <RCCEx_PLL2_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077d0:	e00c      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3324      	adds	r3, #36	; 0x24
 80077d6:	2101      	movs	r1, #1
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 f98f 	bl	8008afc <RCCEx_PLL3_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077e2:	e003      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
      break;
 80077e8:	e000      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80077ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077f2:	4bb2      	ldr	r3, [pc, #712]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f6:	f023 0207 	bic.w	r2, r3, #7
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007800:	49ae      	ldr	r1, [pc, #696]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007802:	4313      	orrs	r3, r2
 8007804:	658b      	str	r3, [r1, #88]	; 0x58
 8007806:	e001      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d044      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800781e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007822:	d01b      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007828:	d805      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d022      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800782e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007832:	d00a      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007834:	e01b      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783a:	d01d      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800783c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007840:	d01c      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007842:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007846:	d01b      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007848:	e011      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3304      	adds	r3, #4
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f8a1 	bl	8008998 <RCCEx_PLL2_Config>
 8007856:	4603      	mov	r3, r0
 8007858:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800785a:	e012      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	2102      	movs	r1, #2
 8007862:	4618      	mov	r0, r3
 8007864:	f001 f94a 	bl	8008afc <RCCEx_PLL3_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800786c:	e009      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
      break;
 8007872:	e006      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007874:	bf00      	nop
 8007876:	e004      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007878:	bf00      	nop
 800787a:	e002      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800787c:	bf00      	nop
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007888:	4b8c      	ldr	r3, [pc, #560]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800788a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007896:	4989      	ldr	r1, [pc, #548]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007898:	4313      	orrs	r3, r2
 800789a:	654b      	str	r3, [r1, #84]	; 0x54
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d044      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b8:	d01b      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80078ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078be:	d805      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d022      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d00a      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80078ca:	e01b      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	d01d      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80078d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078d6:	d01c      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80078d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078dc:	d01b      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80078de:	e011      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 f856 	bl	8008998 <RCCEx_PLL2_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078f0:	e012      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	; 0x24
 80078f6:	2102      	movs	r1, #2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 f8ff 	bl	8008afc <RCCEx_PLL3_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007902:	e009      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800790a:	bf00      	nop
 800790c:	e004      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800790e:	bf00      	nop
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800791e:	4b67      	ldr	r3, [pc, #412]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007922:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800792c:	4963      	ldr	r1, [pc, #396]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800792e:	4313      	orrs	r3, r2
 8007930:	658b      	str	r3, [r1, #88]	; 0x58
 8007932:	e001      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d044      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800794a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800794e:	d01b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007954:	d805      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d022      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800795a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007960:	e01b      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007966:	d01d      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007968:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800796c:	d01c      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800796e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007972:	d01b      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007974:	e011      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3304      	adds	r3, #4
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f001 f80b 	bl	8008998 <RCCEx_PLL2_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007986:	e012      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3324      	adds	r3, #36	; 0x24
 800798c:	2102      	movs	r1, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f001 f8b4 	bl	8008afc <RCCEx_PLL3_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007998:	e009      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]
      break;
 800799e:	e006      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079a0:	bf00      	nop
 80079a2:	e004      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079a4:	bf00      	nop
 80079a6:	e002      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079b4:	4b41      	ldr	r3, [pc, #260]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079c2:	493e      	ldr	r1, [pc, #248]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	658b      	str	r3, [r1, #88]	; 0x58
 80079c8:	e001      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01a      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e4:	d10a      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	2102      	movs	r1, #2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 f885 	bl	8008afc <RCCEx_PLL3_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079fc:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a0a:	492c      	ldr	r1, [pc, #176]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01a      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a26:	d10a      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 f864 	bl	8008afc <RCCEx_PLL3_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a3e:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a4c:	491b      	ldr	r1, [pc, #108]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d032      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a68:	d00d      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a6e:	d016      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d111      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 ff8c 	bl	8008998 <RCCEx_PLL2_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a84:	e00c      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3324      	adds	r3, #36	; 0x24
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 f835 	bl	8008afc <RCCEx_PLL3_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a96:	e003      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9c:	e000      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ab4:	4901      	ldr	r1, [pc, #4]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d02f      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ada:	d00c      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ae0:	d015      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ae6:	d10f      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae8:	4b71      	ldr	r3, [pc, #452]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a70      	ldr	r2, [pc, #448]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007af4:	e00c      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3324      	adds	r3, #36	; 0x24
 8007afa:	2101      	movs	r1, #1
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fffd 	bl	8008afc <RCCEx_PLL3_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b06:	e003      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0c:	e000      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b16:	4b66      	ldr	r3, [pc, #408]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b24:	4962      	ldr	r1, [pc, #392]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	654b      	str	r3, [r1, #84]	; 0x54
 8007b2a:	e001      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d029      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b48:	d007      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007b4a:	e00f      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4c:	4b58      	ldr	r3, [pc, #352]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4a57      	ldr	r2, [pc, #348]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b58:	e00b      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	2102      	movs	r1, #2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 ff19 	bl	8008998 <RCCEx_PLL2_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b6a:	e002      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b78:	4b4d      	ldr	r3, [pc, #308]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b84:	494a      	ldr	r1, [pc, #296]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b8a:	e001      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3324      	adds	r3, #36	; 0x24
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 ffaa 	bl	8008afc <RCCEx_PLL3_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02f      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc6:	d00c      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bcc:	d802      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d011      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007bd2:	e00d      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd8:	d00f      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bde:	d00e      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007be0:	e006      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be2:	4b33      	ldr	r3, [pc, #204]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	4a32      	ldr	r2, [pc, #200]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007bee:	e007      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf4:	e004      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007bf6:	bf00      	nop
 8007bf8:	e002      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c06:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c12:	4927      	ldr	r1, [pc, #156]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	654b      	str	r3, [r1, #84]	; 0x54
 8007c18:	e001      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c2a:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	491e      	ldr	r1, [pc, #120]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c54:	4916      	ldr	r1, [pc, #88]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00d      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c66:	4b12      	ldr	r3, [pc, #72]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c70:	6113      	str	r3, [r2, #16]
 8007c72:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c7c:	490c      	ldr	r1, [pc, #48]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da08      	bge.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	4906      	ldr	r1, [pc, #24]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007c9c:	7dbb      	ldrb	r3, [r7, #22]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	58024400 	.word	0x58024400

08007cb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b090      	sub	sp, #64	; 0x40
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc2:	d150      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007cc4:	4ba1      	ldr	r3, [pc, #644]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d844      	bhi.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007cf1 	.word	0x08007cf1
 8007ce0:	08007d01 	.word	0x08007d01
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	08007d59 	.word	0x08007d59
 8007cec:	08007d21 	.word	0x08007d21
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fd03 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfe:	e241      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d00:	f107 0318 	add.w	r3, r7, #24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fa63 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0e:	e239      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d10:	f107 030c 	add.w	r3, r7, #12
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fba7 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1e:	e231      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d20:	4b8a      	ldr	r3, [pc, #552]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d30:	4b87      	ldr	r3, [pc, #540]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d34:	e226      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d3c:	d102      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007d3e:	4b85      	ldr	r3, [pc, #532]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d42:	e21f      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4a:	d102      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007d4c:	4b82      	ldr	r3, [pc, #520]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d50:	e218      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d56:	e215      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d58:	4b80      	ldr	r3, [pc, #512]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5c:	e212      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d62:	bf00      	nop
 8007d64:	e20e      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d14f      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007d6e:	4b77      	ldr	r3, [pc, #476]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007d76:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2b80      	cmp	r3, #128	; 0x80
 8007d7c:	d01c      	beq.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007d7e:	2b80      	cmp	r3, #128	; 0x80
 8007d80:	d804      	bhi.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d00e      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007d8a:	e03c      	b.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8007d8e:	d037      	beq.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d94:	d018      	beq.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007d96:	e036      	b.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fcaf 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da6:	e1ed      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da8:	f107 0318 	add.w	r3, r7, #24
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fa0f 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db6:	e1e5      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db8:	f107 030c 	add.w	r3, r7, #12
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fb53 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc6:	e1dd      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dc8:	4b60      	ldr	r3, [pc, #384]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dd8:	4b5d      	ldr	r3, [pc, #372]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ddc:	e1d2      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de4:	d102      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007de6:	4b5b      	ldr	r3, [pc, #364]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dea:	e1cb      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007df4:	4b58      	ldr	r3, [pc, #352]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df8:	e1c4      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfe:	e1c1      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e00:	4b56      	ldr	r3, [pc, #344]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e04:	e1be      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0a:	bf00      	nop
 8007e0c:	e1ba      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e14:	d153      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007e16:	4b4d      	ldr	r3, [pc, #308]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e26:	d01f      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e2c:	d805      	bhi.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e36:	d00f      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007e38:	e03d      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007e3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e3e:	d037      	beq.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e44:	d018      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007e46:	e036      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fc57 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e56:	e195      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e58:	f107 0318 	add.w	r3, r7, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f9b7 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e66:	e18d      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fafb 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e76:	e185      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e78:	4b34      	ldr	r3, [pc, #208]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e80:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e88:	4b31      	ldr	r3, [pc, #196]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e8c:	e17a      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e94:	d102      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007e96:	4b2f      	ldr	r3, [pc, #188]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e9a:	e173      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea2:	d102      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007ea4:	4b2c      	ldr	r3, [pc, #176]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea8:	e16c      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eae:	e169      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007eb0:	4b2a      	ldr	r3, [pc, #168]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb4:	e166      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eba:	bf00      	nop
 8007ebc:	e162      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec4:	d15d      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007ec6:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007ece:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed6:	d01f      	beq.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007edc:	d805      	bhi.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ee6:	d00f      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007ee8:	e047      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007eea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007eee:	d041      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ef4:	d018      	beq.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007ef6:	e040      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fbff 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f06:	e13d      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f08:	f107 0318 	add.w	r3, r7, #24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 f95f 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f16:	e135      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 faa3 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f26:	e12d      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f28:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f3c:	e122      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f44:	d10c      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f4a:	e11b      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	03d09000 	.word	0x03d09000
 8007f54:	003d0900 	.word	0x003d0900
 8007f58:	017d7840 	.word	0x017d7840
 8007f5c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f66:	d102      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007f68:	4b89      	ldr	r3, [pc, #548]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6c:	e10a      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f72:	e107      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f74:	4b87      	ldr	r3, [pc, #540]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f78:	e104      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f7e:	bf00      	nop
 8007f80:	e100      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f88:	d153      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007f8a:	4b83      	ldr	r3, [pc, #524]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007f92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9a:	d01f      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fa0:	d805      	bhi.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	d00f      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007fac:	e03d      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007fae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fb2:	d037      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fb8:	d018      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007fba:	e036      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fb9d 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fca:	e0db      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fcc:	f107 0318 	add.w	r3, r7, #24
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 f8fd 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fda:	e0d3      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fdc:	f107 030c 	add.w	r3, r7, #12
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fa41 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fea:	e0cb      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fec:	4b6a      	ldr	r3, [pc, #424]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ffc:	4b67      	ldr	r3, [pc, #412]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008000:	e0c0      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008008:	d102      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800800a:	4b65      	ldr	r3, [pc, #404]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800800e:	e0b9      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008016:	d102      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008018:	4b5d      	ldr	r3, [pc, #372]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801c:	e0b2      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008022:	e0af      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008024:	4b5b      	ldr	r3, [pc, #364]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008028:	e0ac      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800802e:	bf00      	nop
 8008030:	e0a8      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008038:	d13d      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800803a:	4b57      	ldr	r3, [pc, #348]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008042:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804a:	d00c      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800804c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008050:	d011      	beq.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d12b      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008056:	f107 0318 	add.w	r3, r7, #24
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f8b8 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008064:	e08e      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f9fc 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008074:	e086      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008076:	4b48      	ldr	r3, [pc, #288]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800807e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008086:	4b45      	ldr	r3, [pc, #276]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800808a:	e07b      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800808c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008092:	d102      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008094:	4b42      	ldr	r3, [pc, #264]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008098:	e074      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a0:	d102      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80080a2:	4b3b      	ldr	r3, [pc, #236]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080a6:	e06d      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ac:	e06a      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b2:	bf00      	nop
 80080b4:	e066      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d11f      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80080be:	4b36      	ldr	r3, [pc, #216]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80080c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80080ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d2:	d008      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80080d4:	e00f      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fb10 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e4:	e04e      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e6:	f107 0318 	add.w	r3, r7, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f870 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f4:	e046      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080fa:	bf00      	nop
 80080fc:	e042      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008104:	d13c      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008106:	4b24      	ldr	r3, [pc, #144]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800810e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008116:	d01e      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811c:	d805      	bhi.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00d      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008126:	d00e      	beq.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008128:	e026      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d01d      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008134:	d01d      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800813a:	d014      	beq.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800813c:	e01c      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800813e:	f000 f831 	bl	80081a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008142:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008144:	e01e      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008146:	f107 0318 	add.w	r3, r7, #24
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f840 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008154:	e016      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f984 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008164:	e00e      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800816a:	e00b      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008170:	e008      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008176:	e005      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817c:	bf00      	nop
 800817e:	e001      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008186:	4618      	mov	r0, r3
 8008188:	3740      	adds	r7, #64	; 0x40
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	017d7840 	.word	0x017d7840
 8008194:	00bb8000 	.word	0x00bb8000
 8008198:	58024400 	.word	0x58024400
 800819c:	03d09000 	.word	0x03d09000
 80081a0:	003d0900 	.word	0x003d0900

080081a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081a8:	f7fe fe4a 	bl	8006e40 <HAL_RCC_GetHCLKFreq>
 80081ac:	4601      	mov	r1, r0
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	091b      	lsrs	r3, r3, #4
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	4a04      	ldr	r2, [pc, #16]	; (80081cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081ba:	5cd3      	ldrb	r3, [r2, r3]
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	58024400 	.word	0x58024400
 80081cc:	0800cb1c 	.word	0x0800cb1c

080081d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b089      	sub	sp, #36	; 0x24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d8:	4b9d      	ldr	r3, [pc, #628]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081e2:	4b9b      	ldr	r3, [pc, #620]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	0b1b      	lsrs	r3, r3, #12
 80081e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ee:	4b98      	ldr	r3, [pc, #608]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	091b      	lsrs	r3, r3, #4
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081fa:	4b95      	ldr	r3, [pc, #596]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 810a 	beq.w	8008432 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d05a      	beq.n	80082da <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008224:	2b01      	cmp	r3, #1
 8008226:	d302      	bcc.n	800822e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008228:	2b02      	cmp	r3, #2
 800822a:	d078      	beq.n	800831e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800822c:	e099      	b.n	8008362 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822e:	4b88      	ldr	r3, [pc, #544]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d02d      	beq.n	8008296 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800823a:	4b85      	ldr	r3, [pc, #532]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a83      	ldr	r2, [pc, #524]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008264:	4b7a      	ldr	r3, [pc, #488]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008274:	ed97 6a03 	vldr	s12, [r7, #12]
 8008278:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800827c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008290:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008294:	e087      	b.n	80083a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80082a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a8:	4b69      	ldr	r3, [pc, #420]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082d8:	e065      	b.n	80083a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	ee07 3a90 	vmov	s15, r3
 80082e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80082e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ec:	4b58      	ldr	r3, [pc, #352]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008300:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800831c:	e043      	b.n	80083a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800832c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008330:	4b47      	ldr	r3, [pc, #284]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008340:	ed97 6a03 	vldr	s12, [r7, #12]
 8008344:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008360:	e021      	b.n	80083a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	ee07 3a90 	vmov	s15, r3
 8008368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008374:	4b36      	ldr	r3, [pc, #216]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008384:	ed97 6a03 	vldr	s12, [r7, #12]
 8008388:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800838c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083a4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083a6:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	0a5b      	lsrs	r3, r3, #9
 80083ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083cc:	ee17 2a90 	vmov	r2, s15
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fa:	ee17 2a90 	vmov	r2, s15
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008402:	4b13      	ldr	r3, [pc, #76]	; (8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	0e1b      	lsrs	r3, r3, #24
 8008408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800841c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008428:	ee17 2a90 	vmov	r2, s15
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008430:	e008      	b.n	8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	609a      	str	r2, [r3, #8]
}
 8008444:	bf00      	nop
 8008446:	3724      	adds	r7, #36	; 0x24
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	46000000 	.word	0x46000000
 800845c:	4c742400 	.word	0x4c742400
 8008460:	4a742400 	.word	0x4a742400
 8008464:	4bbebc20 	.word	0x4bbebc20

08008468 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008468:	b480      	push	{r7}
 800846a:	b089      	sub	sp, #36	; 0x24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008470:	4b9d      	ldr	r3, [pc, #628]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800847a:	4b9b      	ldr	r3, [pc, #620]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	0d1b      	lsrs	r3, r3, #20
 8008480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008484:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008486:	4b98      	ldr	r3, [pc, #608]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008492:	4b95      	ldr	r3, [pc, #596]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008496:	08db      	lsrs	r3, r3, #3
 8008498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 810a 	beq.w	80086ca <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d05a      	beq.n	8008572 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d302      	bcc.n	80084c6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d078      	beq.n	80085b6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80084c4:	e099      	b.n	80085fa <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c6:	4b88      	ldr	r3, [pc, #544]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02d      	beq.n	800852e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084d2:	4b85      	ldr	r3, [pc, #532]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	08db      	lsrs	r3, r3, #3
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	4a83      	ldr	r2, [pc, #524]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80084de:	fa22 f303 	lsr.w	r3, r2, r3
 80084e2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fc:	4b7a      	ldr	r3, [pc, #488]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008510:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008528:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800852c:	e087      	b.n	800863e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008538:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800853c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008540:	4b69      	ldr	r3, [pc, #420]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008550:	ed97 6a03 	vldr	s12, [r7, #12]
 8008554:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008570:	e065      	b.n	800863e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008584:	4b58      	ldr	r3, [pc, #352]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008594:	ed97 6a03 	vldr	s12, [r7, #12]
 8008598:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800859c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b4:	e043      	b.n	800863e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80085c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c8:	4b47      	ldr	r3, [pc, #284]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f8:	e021      	b.n	800863e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008604:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860c:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800860e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008620:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800863e:	4b2a      	ldr	r3, [pc, #168]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008658:	edd7 6a07 	vldr	s13, [r7, #28]
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800866c:	4b1e      	ldr	r3, [pc, #120]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800869a:	4b13      	ldr	r3, [pc, #76]	; (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c0:	ee17 2a90 	vmov	r2, s15
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086c8:	e008      	b.n	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	3724      	adds	r7, #36	; 0x24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	58024400 	.word	0x58024400
 80086ec:	03d09000 	.word	0x03d09000
 80086f0:	46000000 	.word	0x46000000
 80086f4:	4c742400 	.word	0x4c742400
 80086f8:	4a742400 	.word	0x4a742400
 80086fc:	4bbebc20 	.word	0x4bbebc20

08008700 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008708:	4b9d      	ldr	r3, [pc, #628]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	f003 0303 	and.w	r3, r3, #3
 8008710:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008712:	4b9b      	ldr	r3, [pc, #620]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	091b      	lsrs	r3, r3, #4
 8008718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800871c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800871e:	4b98      	ldr	r3, [pc, #608]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008728:	4b95      	ldr	r3, [pc, #596]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800872a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	fb02 f303 	mul.w	r3, r2, r3
 8008738:	ee07 3a90 	vmov	s15, r3
 800873c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008740:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 810a 	beq.w	8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d05a      	beq.n	8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008752:	2b01      	cmp	r3, #1
 8008754:	d302      	bcc.n	800875c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008756:	2b02      	cmp	r3, #2
 8008758:	d078      	beq.n	800884c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800875a:	e099      	b.n	8008890 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800875c:	4b88      	ldr	r3, [pc, #544]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d02d      	beq.n	80087c4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008768:	4b85      	ldr	r3, [pc, #532]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	4a84      	ldr	r2, [pc, #528]	; (8008984 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008792:	4b7b      	ldr	r3, [pc, #492]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80087aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087c2:	e087      	b.n	80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80087d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d6:	4b6a      	ldr	r3, [pc, #424]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80087ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008806:	e065      	b.n	80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008812:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b59      	ldr	r3, [pc, #356]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800884a:	e043      	b.n	80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b48      	ldr	r3, [pc, #288]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008872:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800888e:	e021      	b.n	80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b37      	ldr	r3, [pc, #220]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008988 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088d2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80088d4:	4b2a      	ldr	r3, [pc, #168]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	0a5b      	lsrs	r3, r3, #9
 80088da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088fa:	ee17 2a90 	vmov	r2, s15
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008902:	4b1f      	ldr	r3, [pc, #124]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	0c1b      	lsrs	r3, r3, #16
 8008908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800891c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008928:	ee17 2a90 	vmov	r2, s15
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008930:	4b13      	ldr	r3, [pc, #76]	; (8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	0e1b      	lsrs	r3, r3, #24
 8008936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800894a:	edd7 6a07 	vldr	s13, [r7, #28]
 800894e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008956:	ee17 2a90 	vmov	r2, s15
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800895e:	e008      	b.n	8008972 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	609a      	str	r2, [r3, #8]
}
 8008972:	bf00      	nop
 8008974:	3724      	adds	r7, #36	; 0x24
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	58024400 	.word	0x58024400
 8008984:	03d09000 	.word	0x03d09000
 8008988:	46000000 	.word	0x46000000
 800898c:	4c742400 	.word	0x4c742400
 8008990:	4a742400 	.word	0x4a742400
 8008994:	4bbebc20 	.word	0x4bbebc20

08008998 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089a6:	4b53      	ldr	r3, [pc, #332]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d101      	bne.n	80089b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e099      	b.n	8008aea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089b6:	4b4f      	ldr	r3, [pc, #316]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a4e      	ldr	r2, [pc, #312]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 80089bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089c2:	f7f9 fc77 	bl	80022b4 <HAL_GetTick>
 80089c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089c8:	e008      	b.n	80089dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089ca:	f7f9 fc73 	bl	80022b4 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e086      	b.n	8008aea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089dc:	4b45      	ldr	r3, [pc, #276]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1f0      	bne.n	80089ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089e8:	4b42      	ldr	r3, [pc, #264]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	031b      	lsls	r3, r3, #12
 80089f6:	493f      	ldr	r1, [pc, #252]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	628b      	str	r3, [r1, #40]	; 0x28
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	025b      	lsls	r3, r3, #9
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	041b      	lsls	r3, r3, #16
 8008a1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	061b      	lsls	r3, r3, #24
 8008a28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a2c:	4931      	ldr	r1, [pc, #196]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a32:	4b30      	ldr	r3, [pc, #192]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	492d      	ldr	r1, [pc, #180]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a44:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	f023 0220 	bic.w	r2, r3, #32
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	4928      	ldr	r1, [pc, #160]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a56:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a5c:	f023 0310 	bic.w	r3, r3, #16
 8008a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <RCCEx_PLL2_Config+0x160>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	69d2      	ldr	r2, [r2, #28]
 8008a6e:	00d2      	lsls	r2, r2, #3
 8008a70:	4920      	ldr	r1, [pc, #128]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a76:	4b1f      	ldr	r3, [pc, #124]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a7c:	f043 0310 	orr.w	r3, r3, #16
 8008a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a88:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	4a19      	ldr	r2, [pc, #100]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a94:	e00f      	b.n	8008ab6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d106      	bne.n	8008aaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a9c:	4b15      	ldr	r3, [pc, #84]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa0:	4a14      	ldr	r2, [pc, #80]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008aa8:	e005      	b.n	8008ab6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008aaa:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a0e      	ldr	r2, [pc, #56]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ac2:	f7f9 fbf7 	bl	80022b4 <HAL_GetTick>
 8008ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ac8:	e008      	b.n	8008adc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008aca:	f7f9 fbf3 	bl	80022b4 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d901      	bls.n	8008adc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e006      	b.n	8008aea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <RCCEx_PLL2_Config+0x15c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0f0      	beq.n	8008aca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	58024400 	.word	0x58024400
 8008af8:	ffff0007 	.word	0xffff0007

08008afc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b0a:	4b53      	ldr	r3, [pc, #332]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d101      	bne.n	8008b1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e099      	b.n	8008c4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b1a:	4b4f      	ldr	r3, [pc, #316]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a4e      	ldr	r2, [pc, #312]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b26:	f7f9 fbc5 	bl	80022b4 <HAL_GetTick>
 8008b2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b2c:	e008      	b.n	8008b40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b2e:	f7f9 fbc1 	bl	80022b4 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d901      	bls.n	8008b40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e086      	b.n	8008c4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b40:	4b45      	ldr	r3, [pc, #276]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1f0      	bne.n	8008b2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b4c:	4b42      	ldr	r3, [pc, #264]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	051b      	lsls	r3, r3, #20
 8008b5a:	493f      	ldr	r1, [pc, #252]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	025b      	lsls	r3, r3, #9
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	431a      	orrs	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	041b      	lsls	r3, r3, #16
 8008b7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	061b      	lsls	r3, r3, #24
 8008b8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b90:	4931      	ldr	r1, [pc, #196]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b96:	4b30      	ldr	r3, [pc, #192]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	492d      	ldr	r1, [pc, #180]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	4928      	ldr	r1, [pc, #160]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bba:	4b27      	ldr	r3, [pc, #156]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	4a26      	ldr	r2, [pc, #152]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bc6:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bca:	4b24      	ldr	r3, [pc, #144]	; (8008c5c <RCCEx_PLL3_Config+0x160>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	69d2      	ldr	r2, [r2, #28]
 8008bd2:	00d2      	lsls	r2, r2, #3
 8008bd4:	4920      	ldr	r1, [pc, #128]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008bda:	4b1f      	ldr	r3, [pc, #124]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	4a1e      	ldr	r2, [pc, #120]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	4a19      	ldr	r2, [pc, #100]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008bf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bf8:	e00f      	b.n	8008c1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d106      	bne.n	8008c0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c00:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c0c:	e005      	b.n	8008c1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	4a11      	ldr	r2, [pc, #68]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a0e      	ldr	r2, [pc, #56]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c26:	f7f9 fb45 	bl	80022b4 <HAL_GetTick>
 8008c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c2c:	e008      	b.n	8008c40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c2e:	f7f9 fb41 	bl	80022b4 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d901      	bls.n	8008c40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e006      	b.n	8008c4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c40:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <RCCEx_PLL3_Config+0x15c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0f0      	beq.n	8008c2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	ffff0007 	.word	0xffff0007

08008c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e01d      	b.n	8008cae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7f8 ff6a 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f000 f97c 	bl	8008f9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <HAL_TIM_Base_Start_IT+0x50>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b06      	cmp	r3, #6
 8008ce0:	d00b      	beq.n	8008cfa <HAL_TIM_Base_Start_IT+0x42>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce8:	d007      	beq.n	8008cfa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0201 	orr.w	r2, r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	00010007 	.word	0x00010007

08008d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d122      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d11b      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0202 	mvn.w	r2, #2
 8008d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f905 	bl	8008f5e <HAL_TIM_IC_CaptureCallback>
 8008d54:	e005      	b.n	8008d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f8f7 	bl	8008f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f908 	bl	8008f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d122      	bne.n	8008dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d11b      	bne.n	8008dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0204 	mvn.w	r2, #4
 8008d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f8db 	bl	8008f5e <HAL_TIM_IC_CaptureCallback>
 8008da8:	e005      	b.n	8008db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f8cd 	bl	8008f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f8de 	bl	8008f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	d122      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d11b      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0208 	mvn.w	r2, #8
 8008de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2204      	movs	r2, #4
 8008de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f8b1 	bl	8008f5e <HAL_TIM_IC_CaptureCallback>
 8008dfc:	e005      	b.n	8008e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f8a3 	bl	8008f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f8b4 	bl	8008f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 0310 	and.w	r3, r3, #16
 8008e1a:	2b10      	cmp	r3, #16
 8008e1c:	d122      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d11b      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0210 	mvn.w	r2, #16
 8008e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f887 	bl	8008f5e <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f879 	bl	8008f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f88a 	bl	8008f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d10e      	bne.n	8008e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d107      	bne.n	8008e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0201 	mvn.w	r2, #1
 8008e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7f7 fec6 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9a:	2b80      	cmp	r3, #128	; 0x80
 8008e9c:	d10e      	bne.n	8008ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea8:	2b80      	cmp	r3, #128	; 0x80
 8008eaa:	d107      	bne.n	8008ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f99c 	bl	80091f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eca:	d10e      	bne.n	8008eea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed6:	2b80      	cmp	r3, #128	; 0x80
 8008ed8:	d107      	bne.n	8008eea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f98f 	bl	8009208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b40      	cmp	r3, #64	; 0x40
 8008ef6:	d10e      	bne.n	8008f16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f02:	2b40      	cmp	r3, #64	; 0x40
 8008f04:	d107      	bne.n	8008f16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f838 	bl	8008f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b20      	cmp	r3, #32
 8008f22:	d10e      	bne.n	8008f42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d107      	bne.n	8008f42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f06f 0220 	mvn.w	r2, #32
 8008f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f94f 	bl	80091e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a40      	ldr	r2, [pc, #256]	; (80090b0 <TIM_Base_SetConfig+0x114>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d013      	beq.n	8008fdc <TIM_Base_SetConfig+0x40>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fba:	d00f      	beq.n	8008fdc <TIM_Base_SetConfig+0x40>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a3d      	ldr	r2, [pc, #244]	; (80090b4 <TIM_Base_SetConfig+0x118>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00b      	beq.n	8008fdc <TIM_Base_SetConfig+0x40>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a3c      	ldr	r2, [pc, #240]	; (80090b8 <TIM_Base_SetConfig+0x11c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d007      	beq.n	8008fdc <TIM_Base_SetConfig+0x40>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a3b      	ldr	r2, [pc, #236]	; (80090bc <TIM_Base_SetConfig+0x120>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d003      	beq.n	8008fdc <TIM_Base_SetConfig+0x40>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a3a      	ldr	r2, [pc, #232]	; (80090c0 <TIM_Base_SetConfig+0x124>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d108      	bne.n	8008fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a2f      	ldr	r2, [pc, #188]	; (80090b0 <TIM_Base_SetConfig+0x114>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d01f      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffc:	d01b      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a2c      	ldr	r2, [pc, #176]	; (80090b4 <TIM_Base_SetConfig+0x118>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d017      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a2b      	ldr	r2, [pc, #172]	; (80090b8 <TIM_Base_SetConfig+0x11c>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a2a      	ldr	r2, [pc, #168]	; (80090bc <TIM_Base_SetConfig+0x120>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d00f      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a29      	ldr	r2, [pc, #164]	; (80090c0 <TIM_Base_SetConfig+0x124>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00b      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a28      	ldr	r2, [pc, #160]	; (80090c4 <TIM_Base_SetConfig+0x128>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d007      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a27      	ldr	r2, [pc, #156]	; (80090c8 <TIM_Base_SetConfig+0x12c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d003      	beq.n	8009036 <TIM_Base_SetConfig+0x9a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a26      	ldr	r2, [pc, #152]	; (80090cc <TIM_Base_SetConfig+0x130>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d108      	bne.n	8009048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800903c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a10      	ldr	r2, [pc, #64]	; (80090b0 <TIM_Base_SetConfig+0x114>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00f      	beq.n	8009094 <TIM_Base_SetConfig+0xf8>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <TIM_Base_SetConfig+0x124>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00b      	beq.n	8009094 <TIM_Base_SetConfig+0xf8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a11      	ldr	r2, [pc, #68]	; (80090c4 <TIM_Base_SetConfig+0x128>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d007      	beq.n	8009094 <TIM_Base_SetConfig+0xf8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <TIM_Base_SetConfig+0x12c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d003      	beq.n	8009094 <TIM_Base_SetConfig+0xf8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a0f      	ldr	r2, [pc, #60]	; (80090cc <TIM_Base_SetConfig+0x130>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d103      	bne.n	800909c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	615a      	str	r2, [r3, #20]
}
 80090a2:	bf00      	nop
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40010000 	.word	0x40010000
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40010400 	.word	0x40010400
 80090c4:	40014000 	.word	0x40014000
 80090c8:	40014400 	.word	0x40014400
 80090cc:	40014800 	.word	0x40014800

080090d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e068      	b.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a2e      	ldr	r2, [pc, #184]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d004      	beq.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a2d      	ldr	r2, [pc, #180]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d108      	bne.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d01d      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915a:	d018      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d013      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a1a      	ldr	r2, [pc, #104]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00e      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d009      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a13      	ldr	r2, [pc, #76]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d004      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a14      	ldr	r2, [pc, #80]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d10c      	bne.n	80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4313      	orrs	r3, r2
 800919e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40010000 	.word	0x40010000
 80091cc:	40010400 	.word	0x40010400
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40000c00 	.word	0x40000c00
 80091dc:	40001800 	.word	0x40001800

080091e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e042      	b.n	80092b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7f8 fcb5 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2224      	movs	r2, #36	; 0x24
 800924a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0201 	bic.w	r2, r2, #1
 800925c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fc3a 	bl	8009ad8 <UART_SetConfig>
 8009264:	4603      	mov	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e022      	b.n	80092b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f002 fdac 	bl	800bdd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800928a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800929a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f002 fe33 	bl	800bf18 <UART_CheckIdleState>
 80092b2:	4603      	mov	r3, r0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08a      	sub	sp, #40	; 0x28
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	4613      	mov	r3, r2
 80092ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	f040 8083 	bne.w	80093de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <HAL_UART_Transmit+0x28>
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e07b      	b.n	80093e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_UART_Transmit+0x3a>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e074      	b.n	80093e0 <HAL_UART_Transmit+0x124>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2221      	movs	r2, #33	; 0x21
 800930a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800930e:	f7f8 ffd1 	bl	80022b4 <HAL_GetTick>
 8009312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932c:	d108      	bne.n	8009340 <HAL_UART_Transmit+0x84>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d104      	bne.n	8009340 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	e003      	b.n	8009348 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009344:	2300      	movs	r3, #0
 8009346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009348:	e02c      	b.n	80093a4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	2200      	movs	r2, #0
 8009352:	2180      	movs	r1, #128	; 0x80
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f002 fe27 	bl	800bfa8 <UART_WaitOnFlagUntilTimeout>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e03d      	b.n	80093e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009378:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	3302      	adds	r3, #2
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	e007      	b.n	8009392 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	781a      	ldrb	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	3301      	adds	r3, #1
 8009390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1cc      	bne.n	800934a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2200      	movs	r2, #0
 80093b8:	2140      	movs	r1, #64	; 0x40
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f002 fdf4 	bl	800bfa8 <UART_WaitOnFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e00a      	b.n	80093e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	e000      	b.n	80093e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80093de:	2302      	movs	r3, #2
  }
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4613      	mov	r3, r2
 80093f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d168      	bne.n	80094d2 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <HAL_UART_Transmit_IT+0x24>
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e061      	b.n	80094d4 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_UART_Transmit_IT+0x36>
 800941a:	2302      	movs	r3, #2
 800941c:	e05a      	b.n	80094d4 <HAL_UART_Transmit_IT+0xec>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	88fa      	ldrh	r2, [r7, #6]
 8009430:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2221      	movs	r2, #33	; 0x21
 800944e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945a:	d11c      	bne.n	8009496 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009464:	d107      	bne.n	8009476 <HAL_UART_Transmit_IT+0x8e>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d103      	bne.n	8009476 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <HAL_UART_Transmit_IT+0xf8>)
 8009472:	671a      	str	r2, [r3, #112]	; 0x70
 8009474:	e002      	b.n	800947c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a1a      	ldr	r2, [pc, #104]	; (80094e4 <HAL_UART_Transmit_IT+0xfc>)
 800947a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009492:	609a      	str	r2, [r3, #8]
 8009494:	e01b      	b.n	80094ce <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949e:	d107      	bne.n	80094b0 <HAL_UART_Transmit_IT+0xc8>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	4a0f      	ldr	r2, [pc, #60]	; (80094e8 <HAL_UART_Transmit_IT+0x100>)
 80094ac:	671a      	str	r2, [r3, #112]	; 0x70
 80094ae:	e002      	b.n	80094b6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a0e      	ldr	r2, [pc, #56]	; (80094ec <HAL_UART_Transmit_IT+0x104>)
 80094b4:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094cc:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e000      	b.n	80094d4 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80094d2:	2302      	movs	r3, #2
  }
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	0800c3e7 	.word	0x0800c3e7
 80094e4:	0800c34d 	.word	0x0800c34d
 80094e8:	0800c2cf 	.word	0x0800c2cf
 80094ec:	0800c25b 	.word	0x0800c25b

080094f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009504:	2b20      	cmp	r3, #32
 8009506:	f040 80bc 	bne.w	8009682 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <HAL_UART_Receive_IT+0x26>
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e0b4      	b.n	8009684 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_UART_Receive_IT+0x38>
 8009524:	2302      	movs	r3, #2
 8009526:	e0ad      	b.n	8009684 <HAL_UART_Receive_IT+0x194>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	88fa      	ldrh	r2, [r7, #6]
 800953a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	88fa      	ldrh	r2, [r7, #6]
 8009542:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009554:	d10e      	bne.n	8009574 <HAL_UART_Receive_IT+0x84>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <HAL_UART_Receive_IT+0x7a>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009568:	e02d      	b.n	80095c6 <HAL_UART_Receive_IT+0xd6>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	22ff      	movs	r2, #255	; 0xff
 800956e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009572:	e028      	b.n	80095c6 <HAL_UART_Receive_IT+0xd6>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10d      	bne.n	8009598 <HAL_UART_Receive_IT+0xa8>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <HAL_UART_Receive_IT+0x9e>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	22ff      	movs	r2, #255	; 0xff
 8009588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800958c:	e01b      	b.n	80095c6 <HAL_UART_Receive_IT+0xd6>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	227f      	movs	r2, #127	; 0x7f
 8009592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009596:	e016      	b.n	80095c6 <HAL_UART_Receive_IT+0xd6>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095a0:	d10d      	bne.n	80095be <HAL_UART_Receive_IT+0xce>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <HAL_UART_Receive_IT+0xc4>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	227f      	movs	r2, #127	; 0x7f
 80095ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095b2:	e008      	b.n	80095c6 <HAL_UART_Receive_IT+0xd6>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	223f      	movs	r2, #63	; 0x3f
 80095b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095bc:	e003      	b.n	80095c6 <HAL_UART_Receive_IT+0xd6>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2222      	movs	r2, #34	; 0x22
 80095d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f042 0201 	orr.w	r2, r2, #1
 80095e4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ee:	d12a      	bne.n	8009646 <HAL_UART_Receive_IT+0x156>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095f6:	88fa      	ldrh	r2, [r7, #6]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d324      	bcc.n	8009646 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009604:	d107      	bne.n	8009616 <HAL_UART_Receive_IT+0x126>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a1f      	ldr	r2, [pc, #124]	; (8009690 <HAL_UART_Receive_IT+0x1a0>)
 8009612:	66da      	str	r2, [r3, #108]	; 0x6c
 8009614:	e002      	b.n	800961c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4a1e      	ldr	r2, [pc, #120]	; (8009694 <HAL_UART_Receive_IT+0x1a4>)
 800961a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009632:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689a      	ldr	r2, [r3, #8]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009642:	609a      	str	r2, [r3, #8]
 8009644:	e01b      	b.n	800967e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800964e:	d107      	bne.n	8009660 <HAL_UART_Receive_IT+0x170>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4a0f      	ldr	r2, [pc, #60]	; (8009698 <HAL_UART_Receive_IT+0x1a8>)
 800965c:	66da      	str	r2, [r3, #108]	; 0x6c
 800965e:	e002      	b.n	8009666 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4a0e      	ldr	r2, [pc, #56]	; (800969c <HAL_UART_Receive_IT+0x1ac>)
 8009664:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800967c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e000      	b.n	8009684 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009682:	2302      	movs	r3, #2
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	0800c71d 	.word	0x0800c71d
 8009694:	0800c615 	.word	0x0800c615
 8009698:	0800c569 	.word	0x0800c569
 800969c:	0800c4bf 	.word	0x0800c4bf

080096a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	4613      	mov	r3, r2
 80096ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d170      	bne.n	800979a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <HAL_UART_Receive_DMA+0x24>
 80096be:	88fb      	ldrh	r3, [r7, #6]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e069      	b.n	800979c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_UART_Receive_DMA+0x36>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e062      	b.n	800979c <HAL_UART_Receive_DMA+0xfc>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	88fa      	ldrh	r2, [r7, #6]
 80096e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2222      	movs	r2, #34	; 0x22
 80096f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009700:	2b00      	cmp	r3, #0
 8009702:	d02c      	beq.n	800975e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009708:	4a26      	ldr	r2, [pc, #152]	; (80097a4 <HAL_UART_Receive_DMA+0x104>)
 800970a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009710:	4a25      	ldr	r2, [pc, #148]	; (80097a8 <HAL_UART_Receive_DMA+0x108>)
 8009712:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009718:	4a24      	ldr	r2, [pc, #144]	; (80097ac <HAL_UART_Receive_DMA+0x10c>)
 800971a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009720:	2200      	movs	r2, #0
 8009722:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3324      	adds	r3, #36	; 0x24
 800972e:	4619      	mov	r1, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009734:	461a      	mov	r2, r3
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	f7fa faa4 	bl	8003c84 <HAL_DMA_Start_IT>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00d      	beq.n	800975e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2210      	movs	r2, #16
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2220      	movs	r2, #32
 8009756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e01e      	b.n	800979c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009774:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f042 0201 	orr.w	r2, r2, #1
 8009784:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009794:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	e000      	b.n	800979c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800979a:	2302      	movs	r3, #2
  }
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	0800c12d 	.word	0x0800c12d
 80097a8:	0800c193 	.word	0x0800c193
 80097ac:	0800c1af 	.word	0x0800c1af

080097b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80097d6:	4013      	ands	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d118      	bne.n	8009812 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d013      	beq.n	8009812 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d104      	bne.n	80097fe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8145 	beq.w	8009a92 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
      }
      return;
 8009810:	e13f      	b.n	8009a92 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80e8 	beq.w	80099ea <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4ba1      	ldr	r3, [pc, #644]	; (8009aa4 <HAL_UART_IRQHandler+0x2f4>)
 800981e:	4013      	ands	r3, r2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d105      	bne.n	8009830 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	4ba0      	ldr	r3, [pc, #640]	; (8009aa8 <HAL_UART_IRQHandler+0x2f8>)
 8009828:	4013      	ands	r3, r2
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80dd 	beq.w	80099ea <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b00      	cmp	r3, #0
 8009838:	d010      	beq.n	800985c <HAL_UART_IRQHandler+0xac>
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2201      	movs	r2, #1
 800984a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009852:	f043 0201 	orr.w	r2, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d010      	beq.n	8009888 <HAL_UART_IRQHandler+0xd8>
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2202      	movs	r2, #2
 8009876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987e:	f043 0204 	orr.w	r2, r3, #4
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b00      	cmp	r3, #0
 8009890:	d010      	beq.n	80098b4 <HAL_UART_IRQHandler+0x104>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2204      	movs	r2, #4
 80098a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098aa:	f043 0202 	orr.w	r2, r3, #2
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d015      	beq.n	80098ea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	4b76      	ldr	r3, [pc, #472]	; (8009aa4 <HAL_UART_IRQHandler+0x2f4>)
 80098cc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2208      	movs	r2, #8
 80098d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e0:	f043 0208 	orr.w	r2, r3, #8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d011      	beq.n	8009918 <HAL_UART_IRQHandler+0x168>
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800990e:	f043 0220 	orr.w	r2, r3, #32
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 80b9 	beq.w	8009a96 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b00      	cmp	r3, #0
 800992c:	d011      	beq.n	8009952 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	f003 0320 	and.w	r3, r3, #32
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009958:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009964:	2b40      	cmp	r3, #64	; 0x40
 8009966:	d004      	beq.n	8009972 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800996e:	2b00      	cmp	r3, #0
 8009970:	d031      	beq.n	80099d6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f002 fbb6 	bl	800c0e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009982:	2b40      	cmp	r3, #64	; 0x40
 8009984:	d123      	bne.n	80099ce <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009994:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800999a:	2b00      	cmp	r3, #0
 800999c:	d013      	beq.n	80099c6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a2:	4a42      	ldr	r2, [pc, #264]	; (8009aac <HAL_UART_IRQHandler+0x2fc>)
 80099a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fa fbd4 	bl	8004158 <HAL_DMA_Abort_IT>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d017      	beq.n	80099e6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c4:	e00f      	b.n	80099e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f87c 	bl	8009ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	e00b      	b.n	80099e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f878 	bl	8009ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	e007      	b.n	80099e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f874 	bl	8009ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80099e4:	e057      	b.n	8009a96 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e6:	bf00      	nop
    return;
 80099e8:	e055      	b.n	8009a96 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00d      	beq.n	8009a10 <HAL_UART_IRQHandler+0x260>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f002 ff0b 	bl	800c824 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a0e:	e045      	b.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d012      	beq.n	8009a40 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d008      	beq.n	8009a40 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d031      	beq.n	8009a9a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
    }
    return;
 8009a3e:	e02c      	b.n	8009a9a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d008      	beq.n	8009a5c <HAL_UART_IRQHandler+0x2ac>
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f002 fd18 	bl	800c48a <UART_EndTransmit_IT>
    return;
 8009a5a:	e01f      	b.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d008      	beq.n	8009a78 <HAL_UART_IRQHandler+0x2c8>
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f002 feeb 	bl	800c84c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a76:	e011      	b.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00c      	beq.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	da09      	bge.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f002 fed5 	bl	800c838 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a8e:	bf00      	nop
 8009a90:	e004      	b.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
      return;
 8009a92:	bf00      	nop
 8009a94:	e002      	b.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009a96:	bf00      	nop
 8009a98:	e000      	b.n	8009a9c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009a9a:	bf00      	nop
  }
}
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	10000001 	.word	0x10000001
 8009aa8:	04000120 	.word	0x04000120
 8009aac:	0800c22f 	.word	0x0800c22f

08009ab0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ad8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009adc:	b090      	sub	sp, #64	; 0x40
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	4bc1      	ldr	r3, [pc, #772]	; (8009e20 <UART_SetConfig+0x348>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6812      	ldr	r2, [r2, #0]
 8009b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b22:	430b      	orrs	r3, r1
 8009b24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4ab7      	ldr	r2, [pc, #732]	; (8009e24 <UART_SetConfig+0x34c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d004      	beq.n	8009b56 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b52:	4313      	orrs	r3, r2
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	4bb2      	ldr	r3, [pc, #712]	; (8009e28 <UART_SetConfig+0x350>)
 8009b5e:	4013      	ands	r3, r2
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b66:	430b      	orrs	r3, r1
 8009b68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	f023 010f 	bic.w	r1, r3, #15
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4aa9      	ldr	r2, [pc, #676]	; (8009e2c <UART_SetConfig+0x354>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d177      	bne.n	8009c7a <UART_SetConfig+0x1a2>
 8009b8a:	4ba9      	ldr	r3, [pc, #676]	; (8009e30 <UART_SetConfig+0x358>)
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b92:	2b28      	cmp	r3, #40	; 0x28
 8009b94:	d86c      	bhi.n	8009c70 <UART_SetConfig+0x198>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0xc4>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009c41 	.word	0x08009c41
 8009ba0:	08009c71 	.word	0x08009c71
 8009ba4:	08009c71 	.word	0x08009c71
 8009ba8:	08009c71 	.word	0x08009c71
 8009bac:	08009c71 	.word	0x08009c71
 8009bb0:	08009c71 	.word	0x08009c71
 8009bb4:	08009c71 	.word	0x08009c71
 8009bb8:	08009c71 	.word	0x08009c71
 8009bbc:	08009c49 	.word	0x08009c49
 8009bc0:	08009c71 	.word	0x08009c71
 8009bc4:	08009c71 	.word	0x08009c71
 8009bc8:	08009c71 	.word	0x08009c71
 8009bcc:	08009c71 	.word	0x08009c71
 8009bd0:	08009c71 	.word	0x08009c71
 8009bd4:	08009c71 	.word	0x08009c71
 8009bd8:	08009c71 	.word	0x08009c71
 8009bdc:	08009c51 	.word	0x08009c51
 8009be0:	08009c71 	.word	0x08009c71
 8009be4:	08009c71 	.word	0x08009c71
 8009be8:	08009c71 	.word	0x08009c71
 8009bec:	08009c71 	.word	0x08009c71
 8009bf0:	08009c71 	.word	0x08009c71
 8009bf4:	08009c71 	.word	0x08009c71
 8009bf8:	08009c71 	.word	0x08009c71
 8009bfc:	08009c59 	.word	0x08009c59
 8009c00:	08009c71 	.word	0x08009c71
 8009c04:	08009c71 	.word	0x08009c71
 8009c08:	08009c71 	.word	0x08009c71
 8009c0c:	08009c71 	.word	0x08009c71
 8009c10:	08009c71 	.word	0x08009c71
 8009c14:	08009c71 	.word	0x08009c71
 8009c18:	08009c71 	.word	0x08009c71
 8009c1c:	08009c61 	.word	0x08009c61
 8009c20:	08009c71 	.word	0x08009c71
 8009c24:	08009c71 	.word	0x08009c71
 8009c28:	08009c71 	.word	0x08009c71
 8009c2c:	08009c71 	.word	0x08009c71
 8009c30:	08009c71 	.word	0x08009c71
 8009c34:	08009c71 	.word	0x08009c71
 8009c38:	08009c71 	.word	0x08009c71
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c46:	e233      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c4e:	e22f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c50:	2308      	movs	r3, #8
 8009c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c56:	e22b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c5e:	e227      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c60:	2320      	movs	r3, #32
 8009c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c66:	e223      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c6e:	e21f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c76:	bf00      	nop
 8009c78:	e21a      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a6d      	ldr	r2, [pc, #436]	; (8009e34 <UART_SetConfig+0x35c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d132      	bne.n	8009cea <UART_SetConfig+0x212>
 8009c84:	4b6a      	ldr	r3, [pc, #424]	; (8009e30 <UART_SetConfig+0x358>)
 8009c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	2b05      	cmp	r3, #5
 8009c8e:	d827      	bhi.n	8009ce0 <UART_SetConfig+0x208>
 8009c90:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <UART_SetConfig+0x1c0>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009cb1 	.word	0x08009cb1
 8009c9c:	08009cb9 	.word	0x08009cb9
 8009ca0:	08009cc1 	.word	0x08009cc1
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cd1 	.word	0x08009cd1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cb6:	e1fb      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cbe:	e1f7      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cc6:	e1f3      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cce:	e1ef      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cd6:	e1eb      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cde:	e1e7      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ce6:	bf00      	nop
 8009ce8:	e1e2      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a52      	ldr	r2, [pc, #328]	; (8009e38 <UART_SetConfig+0x360>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d132      	bne.n	8009d5a <UART_SetConfig+0x282>
 8009cf4:	4b4e      	ldr	r3, [pc, #312]	; (8009e30 <UART_SetConfig+0x358>)
 8009cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	2b05      	cmp	r3, #5
 8009cfe:	d827      	bhi.n	8009d50 <UART_SetConfig+0x278>
 8009d00:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x230>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d21 	.word	0x08009d21
 8009d0c:	08009d29 	.word	0x08009d29
 8009d10:	08009d31 	.word	0x08009d31
 8009d14:	08009d39 	.word	0x08009d39
 8009d18:	08009d41 	.word	0x08009d41
 8009d1c:	08009d49 	.word	0x08009d49
 8009d20:	2300      	movs	r3, #0
 8009d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d26:	e1c3      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d28:	2304      	movs	r3, #4
 8009d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2e:	e1bf      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d30:	2308      	movs	r3, #8
 8009d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d36:	e1bb      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d38:	2310      	movs	r3, #16
 8009d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d3e:	e1b7      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d40:	2320      	movs	r3, #32
 8009d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d46:	e1b3      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d48:	2340      	movs	r3, #64	; 0x40
 8009d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d4e:	e1af      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d50:	2380      	movs	r3, #128	; 0x80
 8009d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d56:	bf00      	nop
 8009d58:	e1aa      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a37      	ldr	r2, [pc, #220]	; (8009e3c <UART_SetConfig+0x364>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d132      	bne.n	8009dca <UART_SetConfig+0x2f2>
 8009d64:	4b32      	ldr	r3, [pc, #200]	; (8009e30 <UART_SetConfig+0x358>)
 8009d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d827      	bhi.n	8009dc0 <UART_SetConfig+0x2e8>
 8009d70:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x2a0>)
 8009d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d76:	bf00      	nop
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	08009da9 	.word	0x08009da9
 8009d88:	08009db1 	.word	0x08009db1
 8009d8c:	08009db9 	.word	0x08009db9
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d96:	e18b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	e187      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009da6:	e183      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dae:	e17f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009db0:	2320      	movs	r3, #32
 8009db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009db6:	e17b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dbe:	e177      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009dc0:	2380      	movs	r3, #128	; 0x80
 8009dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	bf00      	nop
 8009dc8:	e172      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <UART_SetConfig+0x368>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d144      	bne.n	8009e5e <UART_SetConfig+0x386>
 8009dd4:	4b16      	ldr	r3, [pc, #88]	; (8009e30 <UART_SetConfig+0x358>)
 8009dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	2b05      	cmp	r3, #5
 8009dde:	d839      	bhi.n	8009e54 <UART_SetConfig+0x37c>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x310>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e45 	.word	0x08009e45
 8009dfc:	08009e4d 	.word	0x08009e4d
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e06:	e153      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e0e:	e14f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e16:	e14b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e1e:	e147      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e20:	cfff69f3 	.word	0xcfff69f3
 8009e24:	58000c00 	.word	0x58000c00
 8009e28:	11fff4ff 	.word	0x11fff4ff
 8009e2c:	40011000 	.word	0x40011000
 8009e30:	58024400 	.word	0x58024400
 8009e34:	40004400 	.word	0x40004400
 8009e38:	40004800 	.word	0x40004800
 8009e3c:	40004c00 	.word	0x40004c00
 8009e40:	40005000 	.word	0x40005000
 8009e44:	2320      	movs	r3, #32
 8009e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e4a:	e131      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e4c:	2340      	movs	r3, #64	; 0x40
 8009e4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e52:	e12d      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e54:	2380      	movs	r3, #128	; 0x80
 8009e56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e5a:	bf00      	nop
 8009e5c:	e128      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4ac3      	ldr	r2, [pc, #780]	; (800a170 <UART_SetConfig+0x698>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d178      	bne.n	8009f5a <UART_SetConfig+0x482>
 8009e68:	4bc2      	ldr	r3, [pc, #776]	; (800a174 <UART_SetConfig+0x69c>)
 8009e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e70:	2b28      	cmp	r3, #40	; 0x28
 8009e72:	d86d      	bhi.n	8009f50 <UART_SetConfig+0x478>
 8009e74:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <UART_SetConfig+0x3a4>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009f21 	.word	0x08009f21
 8009e80:	08009f51 	.word	0x08009f51
 8009e84:	08009f51 	.word	0x08009f51
 8009e88:	08009f51 	.word	0x08009f51
 8009e8c:	08009f51 	.word	0x08009f51
 8009e90:	08009f51 	.word	0x08009f51
 8009e94:	08009f51 	.word	0x08009f51
 8009e98:	08009f51 	.word	0x08009f51
 8009e9c:	08009f29 	.word	0x08009f29
 8009ea0:	08009f51 	.word	0x08009f51
 8009ea4:	08009f51 	.word	0x08009f51
 8009ea8:	08009f51 	.word	0x08009f51
 8009eac:	08009f51 	.word	0x08009f51
 8009eb0:	08009f51 	.word	0x08009f51
 8009eb4:	08009f51 	.word	0x08009f51
 8009eb8:	08009f51 	.word	0x08009f51
 8009ebc:	08009f31 	.word	0x08009f31
 8009ec0:	08009f51 	.word	0x08009f51
 8009ec4:	08009f51 	.word	0x08009f51
 8009ec8:	08009f51 	.word	0x08009f51
 8009ecc:	08009f51 	.word	0x08009f51
 8009ed0:	08009f51 	.word	0x08009f51
 8009ed4:	08009f51 	.word	0x08009f51
 8009ed8:	08009f51 	.word	0x08009f51
 8009edc:	08009f39 	.word	0x08009f39
 8009ee0:	08009f51 	.word	0x08009f51
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	08009f51 	.word	0x08009f51
 8009eec:	08009f51 	.word	0x08009f51
 8009ef0:	08009f51 	.word	0x08009f51
 8009ef4:	08009f51 	.word	0x08009f51
 8009ef8:	08009f51 	.word	0x08009f51
 8009efc:	08009f41 	.word	0x08009f41
 8009f00:	08009f51 	.word	0x08009f51
 8009f04:	08009f51 	.word	0x08009f51
 8009f08:	08009f51 	.word	0x08009f51
 8009f0c:	08009f51 	.word	0x08009f51
 8009f10:	08009f51 	.word	0x08009f51
 8009f14:	08009f51 	.word	0x08009f51
 8009f18:	08009f51 	.word	0x08009f51
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f26:	e0c3      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f2e:	e0bf      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f36:	e0bb      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f3e:	e0b7      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f40:	2320      	movs	r3, #32
 8009f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f46:	e0b3      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f4e:	e0af      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f50:	2380      	movs	r3, #128	; 0x80
 8009f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f56:	bf00      	nop
 8009f58:	e0aa      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a86      	ldr	r2, [pc, #536]	; (800a178 <UART_SetConfig+0x6a0>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d132      	bne.n	8009fca <UART_SetConfig+0x4f2>
 8009f64:	4b83      	ldr	r3, [pc, #524]	; (800a174 <UART_SetConfig+0x69c>)
 8009f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	2b05      	cmp	r3, #5
 8009f6e:	d827      	bhi.n	8009fc0 <UART_SetConfig+0x4e8>
 8009f70:	a201      	add	r2, pc, #4	; (adr r2, 8009f78 <UART_SetConfig+0x4a0>)
 8009f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f76:	bf00      	nop
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009f99 	.word	0x08009f99
 8009f80:	08009fa1 	.word	0x08009fa1
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fb1 	.word	0x08009fb1
 8009f8c:	08009fb9 	.word	0x08009fb9
 8009f90:	2300      	movs	r3, #0
 8009f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f96:	e08b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f9e:	e087      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fa6:	e083      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fae:	e07f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fb6:	e07b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fbe:	e077      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fc6:	bf00      	nop
 8009fc8:	e072      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a6b      	ldr	r2, [pc, #428]	; (800a17c <UART_SetConfig+0x6a4>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d132      	bne.n	800a03a <UART_SetConfig+0x562>
 8009fd4:	4b67      	ldr	r3, [pc, #412]	; (800a174 <UART_SetConfig+0x69c>)
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	2b05      	cmp	r3, #5
 8009fde:	d827      	bhi.n	800a030 <UART_SetConfig+0x558>
 8009fe0:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <UART_SetConfig+0x510>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	0800a001 	.word	0x0800a001
 8009fec:	0800a009 	.word	0x0800a009
 8009ff0:	0800a011 	.word	0x0800a011
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	2300      	movs	r3, #0
 800a002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a006:	e053      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a00e:	e04f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a016:	e04b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a01e:	e047      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a020:	2320      	movs	r3, #32
 800a022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a026:	e043      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a028:	2340      	movs	r3, #64	; 0x40
 800a02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a02e:	e03f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a030:	2380      	movs	r3, #128	; 0x80
 800a032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a036:	bf00      	nop
 800a038:	e03a      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a50      	ldr	r2, [pc, #320]	; (800a180 <UART_SetConfig+0x6a8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d132      	bne.n	800a0aa <UART_SetConfig+0x5d2>
 800a044:	4b4b      	ldr	r3, [pc, #300]	; (800a174 <UART_SetConfig+0x69c>)
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a048:	f003 0307 	and.w	r3, r3, #7
 800a04c:	2b05      	cmp	r3, #5
 800a04e:	d827      	bhi.n	800a0a0 <UART_SetConfig+0x5c8>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <UART_SetConfig+0x580>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a071 	.word	0x0800a071
 800a05c:	0800a079 	.word	0x0800a079
 800a060:	0800a081 	.word	0x0800a081
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a091 	.word	0x0800a091
 800a06c:	0800a099 	.word	0x0800a099
 800a070:	2302      	movs	r3, #2
 800a072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a076:	e01b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a078:	2304      	movs	r3, #4
 800a07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a07e:	e017      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a080:	2308      	movs	r3, #8
 800a082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a086:	e013      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a088:	2310      	movs	r3, #16
 800a08a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a08e:	e00f      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a090:	2320      	movs	r3, #32
 800a092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a096:	e00b      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a098:	2340      	movs	r3, #64	; 0x40
 800a09a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a09e:	e007      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a0a0:	2380      	movs	r3, #128	; 0x80
 800a0a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0a6:	bf00      	nop
 800a0a8:	e002      	b.n	800a0b0 <UART_SetConfig+0x5d8>
 800a0aa:	2380      	movs	r3, #128	; 0x80
 800a0ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a32      	ldr	r2, [pc, #200]	; (800a180 <UART_SetConfig+0x6a8>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	f040 86f7 	bne.w	800aeaa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	f000 80c0 	beq.w	800a246 <UART_SetConfig+0x76e>
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	dc04      	bgt.n	800a0d4 <UART_SetConfig+0x5fc>
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d00c      	beq.n	800a0e8 <UART_SetConfig+0x610>
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d065      	beq.n	800a19e <UART_SetConfig+0x6c6>
 800a0d2:	e27a      	b.n	800a5ca <UART_SetConfig+0xaf2>
 800a0d4:	2b20      	cmp	r3, #32
 800a0d6:	f000 81b0 	beq.w	800a43a <UART_SetConfig+0x962>
 800a0da:	2b40      	cmp	r3, #64	; 0x40
 800a0dc:	f000 821e 	beq.w	800a51c <UART_SetConfig+0xa44>
 800a0e0:	2b10      	cmp	r3, #16
 800a0e2:	f000 8104 	beq.w	800a2ee <UART_SetConfig+0x816>
 800a0e6:	e270      	b.n	800a5ca <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a0e8:	f7fe f85c 	bl	80081a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d04e      	beq.n	800a194 <UART_SetConfig+0x6bc>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d048      	beq.n	800a190 <UART_SetConfig+0x6b8>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	2b02      	cmp	r3, #2
 800a104:	d042      	beq.n	800a18c <UART_SetConfig+0x6b4>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d03c      	beq.n	800a188 <UART_SetConfig+0x6b0>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b04      	cmp	r3, #4
 800a114:	d036      	beq.n	800a184 <UART_SetConfig+0x6ac>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d026      	beq.n	800a16c <UART_SetConfig+0x694>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	2b06      	cmp	r3, #6
 800a124:	d020      	beq.n	800a168 <UART_SetConfig+0x690>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	2b07      	cmp	r3, #7
 800a12c:	d01a      	beq.n	800a164 <UART_SetConfig+0x68c>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b08      	cmp	r3, #8
 800a134:	d014      	beq.n	800a160 <UART_SetConfig+0x688>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	d00e      	beq.n	800a15c <UART_SetConfig+0x684>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a142:	2b0a      	cmp	r3, #10
 800a144:	d008      	beq.n	800a158 <UART_SetConfig+0x680>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	2b0b      	cmp	r3, #11
 800a14c:	d102      	bne.n	800a154 <UART_SetConfig+0x67c>
 800a14e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a152:	e020      	b.n	800a196 <UART_SetConfig+0x6be>
 800a154:	2301      	movs	r3, #1
 800a156:	e01e      	b.n	800a196 <UART_SetConfig+0x6be>
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	e01c      	b.n	800a196 <UART_SetConfig+0x6be>
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	e01a      	b.n	800a196 <UART_SetConfig+0x6be>
 800a160:	2320      	movs	r3, #32
 800a162:	e018      	b.n	800a196 <UART_SetConfig+0x6be>
 800a164:	2310      	movs	r3, #16
 800a166:	e016      	b.n	800a196 <UART_SetConfig+0x6be>
 800a168:	230c      	movs	r3, #12
 800a16a:	e014      	b.n	800a196 <UART_SetConfig+0x6be>
 800a16c:	230a      	movs	r3, #10
 800a16e:	e012      	b.n	800a196 <UART_SetConfig+0x6be>
 800a170:	40011400 	.word	0x40011400
 800a174:	58024400 	.word	0x58024400
 800a178:	40007800 	.word	0x40007800
 800a17c:	40007c00 	.word	0x40007c00
 800a180:	58000c00 	.word	0x58000c00
 800a184:	2308      	movs	r3, #8
 800a186:	e006      	b.n	800a196 <UART_SetConfig+0x6be>
 800a188:	2306      	movs	r3, #6
 800a18a:	e004      	b.n	800a196 <UART_SetConfig+0x6be>
 800a18c:	2304      	movs	r3, #4
 800a18e:	e002      	b.n	800a196 <UART_SetConfig+0x6be>
 800a190:	2302      	movs	r3, #2
 800a192:	e000      	b.n	800a196 <UART_SetConfig+0x6be>
 800a194:	2301      	movs	r3, #1
 800a196:	fbb2 f3f3 	udiv	r3, r2, r3
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a19c:	e219      	b.n	800a5d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a19e:	f107 0318 	add.w	r3, r7, #24
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe f814 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d044      	beq.n	800a23c <UART_SetConfig+0x764>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d03e      	beq.n	800a238 <UART_SetConfig+0x760>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d038      	beq.n	800a234 <UART_SetConfig+0x75c>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d032      	beq.n	800a230 <UART_SetConfig+0x758>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d02c      	beq.n	800a22c <UART_SetConfig+0x754>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d026      	beq.n	800a228 <UART_SetConfig+0x750>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b06      	cmp	r3, #6
 800a1e0:	d020      	beq.n	800a224 <UART_SetConfig+0x74c>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b07      	cmp	r3, #7
 800a1e8:	d01a      	beq.n	800a220 <UART_SetConfig+0x748>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	d014      	beq.n	800a21c <UART_SetConfig+0x744>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	d00e      	beq.n	800a218 <UART_SetConfig+0x740>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b0a      	cmp	r3, #10
 800a200:	d008      	beq.n	800a214 <UART_SetConfig+0x73c>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b0b      	cmp	r3, #11
 800a208:	d102      	bne.n	800a210 <UART_SetConfig+0x738>
 800a20a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a20e:	e016      	b.n	800a23e <UART_SetConfig+0x766>
 800a210:	2301      	movs	r3, #1
 800a212:	e014      	b.n	800a23e <UART_SetConfig+0x766>
 800a214:	2380      	movs	r3, #128	; 0x80
 800a216:	e012      	b.n	800a23e <UART_SetConfig+0x766>
 800a218:	2340      	movs	r3, #64	; 0x40
 800a21a:	e010      	b.n	800a23e <UART_SetConfig+0x766>
 800a21c:	2320      	movs	r3, #32
 800a21e:	e00e      	b.n	800a23e <UART_SetConfig+0x766>
 800a220:	2310      	movs	r3, #16
 800a222:	e00c      	b.n	800a23e <UART_SetConfig+0x766>
 800a224:	230c      	movs	r3, #12
 800a226:	e00a      	b.n	800a23e <UART_SetConfig+0x766>
 800a228:	230a      	movs	r3, #10
 800a22a:	e008      	b.n	800a23e <UART_SetConfig+0x766>
 800a22c:	2308      	movs	r3, #8
 800a22e:	e006      	b.n	800a23e <UART_SetConfig+0x766>
 800a230:	2306      	movs	r3, #6
 800a232:	e004      	b.n	800a23e <UART_SetConfig+0x766>
 800a234:	2304      	movs	r3, #4
 800a236:	e002      	b.n	800a23e <UART_SetConfig+0x766>
 800a238:	2302      	movs	r3, #2
 800a23a:	e000      	b.n	800a23e <UART_SetConfig+0x766>
 800a23c:	2301      	movs	r3, #1
 800a23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a244:	e1c5      	b.n	800a5d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a246:	f107 030c 	add.w	r3, r7, #12
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe f90c 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d044      	beq.n	800a2e4 <UART_SetConfig+0x80c>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d03e      	beq.n	800a2e0 <UART_SetConfig+0x808>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b02      	cmp	r3, #2
 800a268:	d038      	beq.n	800a2dc <UART_SetConfig+0x804>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d032      	beq.n	800a2d8 <UART_SetConfig+0x800>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b04      	cmp	r3, #4
 800a278:	d02c      	beq.n	800a2d4 <UART_SetConfig+0x7fc>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d026      	beq.n	800a2d0 <UART_SetConfig+0x7f8>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b06      	cmp	r3, #6
 800a288:	d020      	beq.n	800a2cc <UART_SetConfig+0x7f4>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b07      	cmp	r3, #7
 800a290:	d01a      	beq.n	800a2c8 <UART_SetConfig+0x7f0>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b08      	cmp	r3, #8
 800a298:	d014      	beq.n	800a2c4 <UART_SetConfig+0x7ec>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d00e      	beq.n	800a2c0 <UART_SetConfig+0x7e8>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	2b0a      	cmp	r3, #10
 800a2a8:	d008      	beq.n	800a2bc <UART_SetConfig+0x7e4>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b0b      	cmp	r3, #11
 800a2b0:	d102      	bne.n	800a2b8 <UART_SetConfig+0x7e0>
 800a2b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2b6:	e016      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e014      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	e012      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2c0:	2340      	movs	r3, #64	; 0x40
 800a2c2:	e010      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	e00e      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	e00c      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2cc:	230c      	movs	r3, #12
 800a2ce:	e00a      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2d0:	230a      	movs	r3, #10
 800a2d2:	e008      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	e006      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2d8:	2306      	movs	r3, #6
 800a2da:	e004      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	e002      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e000      	b.n	800a2e6 <UART_SetConfig+0x80e>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ec:	e171      	b.n	800a5d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ee:	4b7a      	ldr	r3, [pc, #488]	; (800a4d8 <UART_SetConfig+0xa00>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0320 	and.w	r3, r3, #32
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d054      	beq.n	800a3a4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a2fa:	4b77      	ldr	r3, [pc, #476]	; (800a4d8 <UART_SetConfig+0xa00>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	08db      	lsrs	r3, r3, #3
 800a300:	f003 0303 	and.w	r3, r3, #3
 800a304:	4a75      	ldr	r2, [pc, #468]	; (800a4dc <UART_SetConfig+0xa04>)
 800a306:	40da      	lsrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d044      	beq.n	800a39a <UART_SetConfig+0x8c2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	2b01      	cmp	r3, #1
 800a316:	d03e      	beq.n	800a396 <UART_SetConfig+0x8be>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d038      	beq.n	800a392 <UART_SetConfig+0x8ba>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	2b03      	cmp	r3, #3
 800a326:	d032      	beq.n	800a38e <UART_SetConfig+0x8b6>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	d02c      	beq.n	800a38a <UART_SetConfig+0x8b2>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	2b05      	cmp	r3, #5
 800a336:	d026      	beq.n	800a386 <UART_SetConfig+0x8ae>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	2b06      	cmp	r3, #6
 800a33e:	d020      	beq.n	800a382 <UART_SetConfig+0x8aa>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a344:	2b07      	cmp	r3, #7
 800a346:	d01a      	beq.n	800a37e <UART_SetConfig+0x8a6>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d014      	beq.n	800a37a <UART_SetConfig+0x8a2>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	2b09      	cmp	r3, #9
 800a356:	d00e      	beq.n	800a376 <UART_SetConfig+0x89e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	2b0a      	cmp	r3, #10
 800a35e:	d008      	beq.n	800a372 <UART_SetConfig+0x89a>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b0b      	cmp	r3, #11
 800a366:	d102      	bne.n	800a36e <UART_SetConfig+0x896>
 800a368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a36c:	e016      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a36e:	2301      	movs	r3, #1
 800a370:	e014      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a372:	2380      	movs	r3, #128	; 0x80
 800a374:	e012      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a376:	2340      	movs	r3, #64	; 0x40
 800a378:	e010      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a37a:	2320      	movs	r3, #32
 800a37c:	e00e      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a37e:	2310      	movs	r3, #16
 800a380:	e00c      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a382:	230c      	movs	r3, #12
 800a384:	e00a      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a386:	230a      	movs	r3, #10
 800a388:	e008      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a38a:	2308      	movs	r3, #8
 800a38c:	e006      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a38e:	2306      	movs	r3, #6
 800a390:	e004      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a392:	2304      	movs	r3, #4
 800a394:	e002      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a396:	2302      	movs	r3, #2
 800a398:	e000      	b.n	800a39c <UART_SetConfig+0x8c4>
 800a39a:	2301      	movs	r3, #1
 800a39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a3a2:	e116      	b.n	800a5d2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d043      	beq.n	800a434 <UART_SetConfig+0x95c>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d03d      	beq.n	800a430 <UART_SetConfig+0x958>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d037      	beq.n	800a42c <UART_SetConfig+0x954>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d031      	beq.n	800a428 <UART_SetConfig+0x950>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d02b      	beq.n	800a424 <UART_SetConfig+0x94c>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	d025      	beq.n	800a420 <UART_SetConfig+0x948>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	2b06      	cmp	r3, #6
 800a3da:	d01f      	beq.n	800a41c <UART_SetConfig+0x944>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	d019      	beq.n	800a418 <UART_SetConfig+0x940>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d013      	beq.n	800a414 <UART_SetConfig+0x93c>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	2b09      	cmp	r3, #9
 800a3f2:	d00d      	beq.n	800a410 <UART_SetConfig+0x938>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	2b0a      	cmp	r3, #10
 800a3fa:	d007      	beq.n	800a40c <UART_SetConfig+0x934>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	2b0b      	cmp	r3, #11
 800a402:	d101      	bne.n	800a408 <UART_SetConfig+0x930>
 800a404:	4b36      	ldr	r3, [pc, #216]	; (800a4e0 <UART_SetConfig+0xa08>)
 800a406:	e016      	b.n	800a436 <UART_SetConfig+0x95e>
 800a408:	4b34      	ldr	r3, [pc, #208]	; (800a4dc <UART_SetConfig+0xa04>)
 800a40a:	e014      	b.n	800a436 <UART_SetConfig+0x95e>
 800a40c:	4b35      	ldr	r3, [pc, #212]	; (800a4e4 <UART_SetConfig+0xa0c>)
 800a40e:	e012      	b.n	800a436 <UART_SetConfig+0x95e>
 800a410:	4b35      	ldr	r3, [pc, #212]	; (800a4e8 <UART_SetConfig+0xa10>)
 800a412:	e010      	b.n	800a436 <UART_SetConfig+0x95e>
 800a414:	4b35      	ldr	r3, [pc, #212]	; (800a4ec <UART_SetConfig+0xa14>)
 800a416:	e00e      	b.n	800a436 <UART_SetConfig+0x95e>
 800a418:	4b35      	ldr	r3, [pc, #212]	; (800a4f0 <UART_SetConfig+0xa18>)
 800a41a:	e00c      	b.n	800a436 <UART_SetConfig+0x95e>
 800a41c:	4b35      	ldr	r3, [pc, #212]	; (800a4f4 <UART_SetConfig+0xa1c>)
 800a41e:	e00a      	b.n	800a436 <UART_SetConfig+0x95e>
 800a420:	4b35      	ldr	r3, [pc, #212]	; (800a4f8 <UART_SetConfig+0xa20>)
 800a422:	e008      	b.n	800a436 <UART_SetConfig+0x95e>
 800a424:	4b35      	ldr	r3, [pc, #212]	; (800a4fc <UART_SetConfig+0xa24>)
 800a426:	e006      	b.n	800a436 <UART_SetConfig+0x95e>
 800a428:	4b35      	ldr	r3, [pc, #212]	; (800a500 <UART_SetConfig+0xa28>)
 800a42a:	e004      	b.n	800a436 <UART_SetConfig+0x95e>
 800a42c:	4b35      	ldr	r3, [pc, #212]	; (800a504 <UART_SetConfig+0xa2c>)
 800a42e:	e002      	b.n	800a436 <UART_SetConfig+0x95e>
 800a430:	4b35      	ldr	r3, [pc, #212]	; (800a508 <UART_SetConfig+0xa30>)
 800a432:	e000      	b.n	800a436 <UART_SetConfig+0x95e>
 800a434:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <UART_SetConfig+0xa04>)
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a438:	e0cb      	b.n	800a5d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d046      	beq.n	800a4d0 <UART_SetConfig+0x9f8>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	2b01      	cmp	r3, #1
 800a448:	d040      	beq.n	800a4cc <UART_SetConfig+0x9f4>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d03a      	beq.n	800a4c8 <UART_SetConfig+0x9f0>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	2b03      	cmp	r3, #3
 800a458:	d034      	beq.n	800a4c4 <UART_SetConfig+0x9ec>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d02e      	beq.n	800a4c0 <UART_SetConfig+0x9e8>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a466:	2b05      	cmp	r3, #5
 800a468:	d028      	beq.n	800a4bc <UART_SetConfig+0x9e4>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	2b06      	cmp	r3, #6
 800a470:	d022      	beq.n	800a4b8 <UART_SetConfig+0x9e0>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b07      	cmp	r3, #7
 800a478:	d01c      	beq.n	800a4b4 <UART_SetConfig+0x9dc>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b08      	cmp	r3, #8
 800a480:	d016      	beq.n	800a4b0 <UART_SetConfig+0x9d8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b09      	cmp	r3, #9
 800a488:	d00f      	beq.n	800a4aa <UART_SetConfig+0x9d2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	2b0a      	cmp	r3, #10
 800a490:	d008      	beq.n	800a4a4 <UART_SetConfig+0x9cc>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	2b0b      	cmp	r3, #11
 800a498:	d102      	bne.n	800a4a0 <UART_SetConfig+0x9c8>
 800a49a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a49e:	e018      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4a0:	4b13      	ldr	r3, [pc, #76]	; (800a4f0 <UART_SetConfig+0xa18>)
 800a4a2:	e016      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4a4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a4a8:	e013      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a4ae:	e010      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4b0:	4b16      	ldr	r3, [pc, #88]	; (800a50c <UART_SetConfig+0xa34>)
 800a4b2:	e00e      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <UART_SetConfig+0xa08>)
 800a4b6:	e00c      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4b8:	4b15      	ldr	r3, [pc, #84]	; (800a510 <UART_SetConfig+0xa38>)
 800a4ba:	e00a      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4bc:	4b15      	ldr	r3, [pc, #84]	; (800a514 <UART_SetConfig+0xa3c>)
 800a4be:	e008      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4c0:	4b08      	ldr	r3, [pc, #32]	; (800a4e4 <UART_SetConfig+0xa0c>)
 800a4c2:	e006      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4c4:	4b14      	ldr	r3, [pc, #80]	; (800a518 <UART_SetConfig+0xa40>)
 800a4c6:	e004      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4c8:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <UART_SetConfig+0xa10>)
 800a4ca:	e002      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <UART_SetConfig+0xa14>)
 800a4ce:	e000      	b.n	800a4d2 <UART_SetConfig+0x9fa>
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <UART_SetConfig+0xa18>)
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4d4:	e07d      	b.n	800a5d2 <UART_SetConfig+0xafa>
 800a4d6:	bf00      	nop
 800a4d8:	58024400 	.word	0x58024400
 800a4dc:	03d09000 	.word	0x03d09000
 800a4e0:	0003d090 	.word	0x0003d090
 800a4e4:	0007a120 	.word	0x0007a120
 800a4e8:	000f4240 	.word	0x000f4240
 800a4ec:	001e8480 	.word	0x001e8480
 800a4f0:	003d0900 	.word	0x003d0900
 800a4f4:	00516155 	.word	0x00516155
 800a4f8:	0061a800 	.word	0x0061a800
 800a4fc:	007a1200 	.word	0x007a1200
 800a500:	00a2c2aa 	.word	0x00a2c2aa
 800a504:	00f42400 	.word	0x00f42400
 800a508:	01e84800 	.word	0x01e84800
 800a50c:	0001e848 	.word	0x0001e848
 800a510:	00051615 	.word	0x00051615
 800a514:	00061a80 	.word	0x00061a80
 800a518:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b00      	cmp	r3, #0
 800a522:	d04e      	beq.n	800a5c2 <UART_SetConfig+0xaea>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d047      	beq.n	800a5bc <UART_SetConfig+0xae4>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	2b02      	cmp	r3, #2
 800a532:	d040      	beq.n	800a5b6 <UART_SetConfig+0xade>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d039      	beq.n	800a5b0 <UART_SetConfig+0xad8>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	2b04      	cmp	r3, #4
 800a542:	d032      	beq.n	800a5aa <UART_SetConfig+0xad2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	2b05      	cmp	r3, #5
 800a54a:	d02b      	beq.n	800a5a4 <UART_SetConfig+0xacc>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	2b06      	cmp	r3, #6
 800a552:	d024      	beq.n	800a59e <UART_SetConfig+0xac6>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2b07      	cmp	r3, #7
 800a55a:	d01d      	beq.n	800a598 <UART_SetConfig+0xac0>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	2b08      	cmp	r3, #8
 800a562:	d016      	beq.n	800a592 <UART_SetConfig+0xaba>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	2b09      	cmp	r3, #9
 800a56a:	d00f      	beq.n	800a58c <UART_SetConfig+0xab4>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	2b0a      	cmp	r3, #10
 800a572:	d008      	beq.n	800a586 <UART_SetConfig+0xaae>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	2b0b      	cmp	r3, #11
 800a57a:	d101      	bne.n	800a580 <UART_SetConfig+0xaa8>
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	e022      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a584:	e01f      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a58a:	e01c      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a58c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a590:	e019      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a596:	e016      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a59c:	e013      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a59e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a5a2:	e010      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a5a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a5a8:	e00d      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a5aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5ae:	e00a      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a5b0:	f241 5355 	movw	r3, #5461	; 0x1555
 800a5b4:	e007      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a5b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5ba:	e004      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a5bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5c0:	e001      	b.n	800a5c6 <UART_SetConfig+0xaee>
 800a5c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5c8:	e003      	b.n	800a5d2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a5d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f001 83e8 	beq.w	800bdaa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	4413      	add	r3, r2
 800a5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d305      	bcc.n	800a5f6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d904      	bls.n	800a600 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fc:	f001 bbd5 	b.w	800bdaa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a600:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a604:	2b08      	cmp	r3, #8
 800a606:	f000 8154 	beq.w	800a8b2 <UART_SetConfig+0xdda>
 800a60a:	2b08      	cmp	r3, #8
 800a60c:	dc06      	bgt.n	800a61c <UART_SetConfig+0xb44>
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d00f      	beq.n	800a632 <UART_SetConfig+0xb5a>
 800a612:	2b04      	cmp	r3, #4
 800a614:	f000 80ac 	beq.w	800a770 <UART_SetConfig+0xc98>
 800a618:	f000 bc30 	b.w	800ae7c <UART_SetConfig+0x13a4>
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	f000 832d 	beq.w	800ac7c <UART_SetConfig+0x11a4>
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	f000 83a5 	beq.w	800ad72 <UART_SetConfig+0x129a>
 800a628:	2b10      	cmp	r3, #16
 800a62a:	f000 81e3 	beq.w	800a9f4 <UART_SetConfig+0xf1c>
 800a62e:	f000 bc25 	b.w	800ae7c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a632:	f7fd fdb7 	bl	80081a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a636:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	4618      	mov	r0, r3
 800a63c:	f04f 0100 	mov.w	r1, #0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	d067      	beq.n	800a718 <UART_SetConfig+0xc40>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d05e      	beq.n	800a70e <UART_SetConfig+0xc36>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	2b02      	cmp	r3, #2
 800a656:	d055      	beq.n	800a704 <UART_SetConfig+0xc2c>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d04c      	beq.n	800a6fa <UART_SetConfig+0xc22>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	2b04      	cmp	r3, #4
 800a666:	d043      	beq.n	800a6f0 <UART_SetConfig+0xc18>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b05      	cmp	r3, #5
 800a66e:	d03a      	beq.n	800a6e6 <UART_SetConfig+0xc0e>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2b06      	cmp	r3, #6
 800a676:	d031      	beq.n	800a6dc <UART_SetConfig+0xc04>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	2b07      	cmp	r3, #7
 800a67e:	d028      	beq.n	800a6d2 <UART_SetConfig+0xbfa>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	2b08      	cmp	r3, #8
 800a686:	d01f      	beq.n	800a6c8 <UART_SetConfig+0xbf0>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	2b09      	cmp	r3, #9
 800a68e:	d016      	beq.n	800a6be <UART_SetConfig+0xbe6>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2b0a      	cmp	r3, #10
 800a696:	d00d      	beq.n	800a6b4 <UART_SetConfig+0xbdc>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	2b0b      	cmp	r3, #11
 800a69e:	d104      	bne.n	800a6aa <UART_SetConfig+0xbd2>
 800a6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a4:	f04f 0400 	mov.w	r4, #0
 800a6a8:	e03a      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6aa:	f04f 0301 	mov.w	r3, #1
 800a6ae:	f04f 0400 	mov.w	r4, #0
 800a6b2:	e035      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a6b8:	f04f 0400 	mov.w	r4, #0
 800a6bc:	e030      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6be:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a6c2:	f04f 0400 	mov.w	r4, #0
 800a6c6:	e02b      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6c8:	f04f 0320 	mov.w	r3, #32
 800a6cc:	f04f 0400 	mov.w	r4, #0
 800a6d0:	e026      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6d2:	f04f 0310 	mov.w	r3, #16
 800a6d6:	f04f 0400 	mov.w	r4, #0
 800a6da:	e021      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6dc:	f04f 030c 	mov.w	r3, #12
 800a6e0:	f04f 0400 	mov.w	r4, #0
 800a6e4:	e01c      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6e6:	f04f 030a 	mov.w	r3, #10
 800a6ea:	f04f 0400 	mov.w	r4, #0
 800a6ee:	e017      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6f0:	f04f 0308 	mov.w	r3, #8
 800a6f4:	f04f 0400 	mov.w	r4, #0
 800a6f8:	e012      	b.n	800a720 <UART_SetConfig+0xc48>
 800a6fa:	f04f 0306 	mov.w	r3, #6
 800a6fe:	f04f 0400 	mov.w	r4, #0
 800a702:	e00d      	b.n	800a720 <UART_SetConfig+0xc48>
 800a704:	f04f 0304 	mov.w	r3, #4
 800a708:	f04f 0400 	mov.w	r4, #0
 800a70c:	e008      	b.n	800a720 <UART_SetConfig+0xc48>
 800a70e:	f04f 0302 	mov.w	r3, #2
 800a712:	f04f 0400 	mov.w	r4, #0
 800a716:	e003      	b.n	800a720 <UART_SetConfig+0xc48>
 800a718:	f04f 0301 	mov.w	r3, #1
 800a71c:	f04f 0400 	mov.w	r4, #0
 800a720:	461a      	mov	r2, r3
 800a722:	4623      	mov	r3, r4
 800a724:	f7f5 fdd8 	bl	80002d8 <__aeabi_uldivmod>
 800a728:	4603      	mov	r3, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	4619      	mov	r1, r3
 800a72e:	4622      	mov	r2, r4
 800a730:	f04f 0300 	mov.w	r3, #0
 800a734:	f04f 0400 	mov.w	r4, #0
 800a738:	0214      	lsls	r4, r2, #8
 800a73a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a73e:	020b      	lsls	r3, r1, #8
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6852      	ldr	r2, [r2, #4]
 800a744:	0852      	lsrs	r2, r2, #1
 800a746:	4611      	mov	r1, r2
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	eb13 0b01 	adds.w	fp, r3, r1
 800a750:	eb44 0c02 	adc.w	ip, r4, r2
 800a754:	4658      	mov	r0, fp
 800a756:	4661      	mov	r1, ip
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f04f 0400 	mov.w	r4, #0
 800a760:	461a      	mov	r2, r3
 800a762:	4623      	mov	r3, r4
 800a764:	f7f5 fdb8 	bl	80002d8 <__aeabi_uldivmod>
 800a768:	4603      	mov	r3, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a76e:	e389      	b.n	800ae84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a770:	f107 0318 	add.w	r3, r7, #24
 800a774:	4618      	mov	r0, r3
 800a776:	f7fd fd2b 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f04f 0100 	mov.w	r1, #0
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b00      	cmp	r3, #0
 800a788:	d067      	beq.n	800a85a <UART_SetConfig+0xd82>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d05e      	beq.n	800a850 <UART_SetConfig+0xd78>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b02      	cmp	r3, #2
 800a798:	d055      	beq.n	800a846 <UART_SetConfig+0xd6e>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d04c      	beq.n	800a83c <UART_SetConfig+0xd64>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d043      	beq.n	800a832 <UART_SetConfig+0xd5a>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d03a      	beq.n	800a828 <UART_SetConfig+0xd50>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2b06      	cmp	r3, #6
 800a7b8:	d031      	beq.n	800a81e <UART_SetConfig+0xd46>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	d028      	beq.n	800a814 <UART_SetConfig+0xd3c>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b08      	cmp	r3, #8
 800a7c8:	d01f      	beq.n	800a80a <UART_SetConfig+0xd32>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d016      	beq.n	800a800 <UART_SetConfig+0xd28>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	2b0a      	cmp	r3, #10
 800a7d8:	d00d      	beq.n	800a7f6 <UART_SetConfig+0xd1e>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b0b      	cmp	r3, #11
 800a7e0:	d104      	bne.n	800a7ec <UART_SetConfig+0xd14>
 800a7e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7e6:	f04f 0400 	mov.w	r4, #0
 800a7ea:	e03a      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a7ec:	f04f 0301 	mov.w	r3, #1
 800a7f0:	f04f 0400 	mov.w	r4, #0
 800a7f4:	e035      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a7f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a7fa:	f04f 0400 	mov.w	r4, #0
 800a7fe:	e030      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a800:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a804:	f04f 0400 	mov.w	r4, #0
 800a808:	e02b      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a80a:	f04f 0320 	mov.w	r3, #32
 800a80e:	f04f 0400 	mov.w	r4, #0
 800a812:	e026      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a814:	f04f 0310 	mov.w	r3, #16
 800a818:	f04f 0400 	mov.w	r4, #0
 800a81c:	e021      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a81e:	f04f 030c 	mov.w	r3, #12
 800a822:	f04f 0400 	mov.w	r4, #0
 800a826:	e01c      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a828:	f04f 030a 	mov.w	r3, #10
 800a82c:	f04f 0400 	mov.w	r4, #0
 800a830:	e017      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a832:	f04f 0308 	mov.w	r3, #8
 800a836:	f04f 0400 	mov.w	r4, #0
 800a83a:	e012      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a83c:	f04f 0306 	mov.w	r3, #6
 800a840:	f04f 0400 	mov.w	r4, #0
 800a844:	e00d      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a846:	f04f 0304 	mov.w	r3, #4
 800a84a:	f04f 0400 	mov.w	r4, #0
 800a84e:	e008      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a850:	f04f 0302 	mov.w	r3, #2
 800a854:	f04f 0400 	mov.w	r4, #0
 800a858:	e003      	b.n	800a862 <UART_SetConfig+0xd8a>
 800a85a:	f04f 0301 	mov.w	r3, #1
 800a85e:	f04f 0400 	mov.w	r4, #0
 800a862:	461a      	mov	r2, r3
 800a864:	4623      	mov	r3, r4
 800a866:	f7f5 fd37 	bl	80002d8 <__aeabi_uldivmod>
 800a86a:	4603      	mov	r3, r0
 800a86c:	460c      	mov	r4, r1
 800a86e:	4619      	mov	r1, r3
 800a870:	4622      	mov	r2, r4
 800a872:	f04f 0300 	mov.w	r3, #0
 800a876:	f04f 0400 	mov.w	r4, #0
 800a87a:	0214      	lsls	r4, r2, #8
 800a87c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a880:	020b      	lsls	r3, r1, #8
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6852      	ldr	r2, [r2, #4]
 800a886:	0852      	lsrs	r2, r2, #1
 800a888:	4611      	mov	r1, r2
 800a88a:	f04f 0200 	mov.w	r2, #0
 800a88e:	eb13 0b01 	adds.w	fp, r3, r1
 800a892:	eb44 0c02 	adc.w	ip, r4, r2
 800a896:	4658      	mov	r0, fp
 800a898:	4661      	mov	r1, ip
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f04f 0400 	mov.w	r4, #0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	f7f5 fd17 	bl	80002d8 <__aeabi_uldivmod>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a8b0:	e2e8      	b.n	800ae84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd fdd6 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f04f 0100 	mov.w	r1, #0
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d067      	beq.n	800a99c <UART_SetConfig+0xec4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d05e      	beq.n	800a992 <UART_SetConfig+0xeba>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d055      	beq.n	800a988 <UART_SetConfig+0xeb0>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d04c      	beq.n	800a97e <UART_SetConfig+0xea6>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d043      	beq.n	800a974 <UART_SetConfig+0xe9c>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d03a      	beq.n	800a96a <UART_SetConfig+0xe92>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2b06      	cmp	r3, #6
 800a8fa:	d031      	beq.n	800a960 <UART_SetConfig+0xe88>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b07      	cmp	r3, #7
 800a902:	d028      	beq.n	800a956 <UART_SetConfig+0xe7e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d01f      	beq.n	800a94c <UART_SetConfig+0xe74>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	2b09      	cmp	r3, #9
 800a912:	d016      	beq.n	800a942 <UART_SetConfig+0xe6a>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b0a      	cmp	r3, #10
 800a91a:	d00d      	beq.n	800a938 <UART_SetConfig+0xe60>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	2b0b      	cmp	r3, #11
 800a922:	d104      	bne.n	800a92e <UART_SetConfig+0xe56>
 800a924:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a928:	f04f 0400 	mov.w	r4, #0
 800a92c:	e03a      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a92e:	f04f 0301 	mov.w	r3, #1
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e035      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a938:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a93c:	f04f 0400 	mov.w	r4, #0
 800a940:	e030      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a942:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a946:	f04f 0400 	mov.w	r4, #0
 800a94a:	e02b      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a94c:	f04f 0320 	mov.w	r3, #32
 800a950:	f04f 0400 	mov.w	r4, #0
 800a954:	e026      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a956:	f04f 0310 	mov.w	r3, #16
 800a95a:	f04f 0400 	mov.w	r4, #0
 800a95e:	e021      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a960:	f04f 030c 	mov.w	r3, #12
 800a964:	f04f 0400 	mov.w	r4, #0
 800a968:	e01c      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a96a:	f04f 030a 	mov.w	r3, #10
 800a96e:	f04f 0400 	mov.w	r4, #0
 800a972:	e017      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a974:	f04f 0308 	mov.w	r3, #8
 800a978:	f04f 0400 	mov.w	r4, #0
 800a97c:	e012      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a97e:	f04f 0306 	mov.w	r3, #6
 800a982:	f04f 0400 	mov.w	r4, #0
 800a986:	e00d      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a988:	f04f 0304 	mov.w	r3, #4
 800a98c:	f04f 0400 	mov.w	r4, #0
 800a990:	e008      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a992:	f04f 0302 	mov.w	r3, #2
 800a996:	f04f 0400 	mov.w	r4, #0
 800a99a:	e003      	b.n	800a9a4 <UART_SetConfig+0xecc>
 800a99c:	f04f 0301 	mov.w	r3, #1
 800a9a0:	f04f 0400 	mov.w	r4, #0
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4623      	mov	r3, r4
 800a9a8:	f7f5 fc96 	bl	80002d8 <__aeabi_uldivmod>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	f04f 0300 	mov.w	r3, #0
 800a9b8:	f04f 0400 	mov.w	r4, #0
 800a9bc:	0214      	lsls	r4, r2, #8
 800a9be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a9c2:	020b      	lsls	r3, r1, #8
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	6852      	ldr	r2, [r2, #4]
 800a9c8:	0852      	lsrs	r2, r2, #1
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	f04f 0200 	mov.w	r2, #0
 800a9d0:	eb13 0b01 	adds.w	fp, r3, r1
 800a9d4:	eb44 0c02 	adc.w	ip, r4, r2
 800a9d8:	4658      	mov	r0, fp
 800a9da:	4661      	mov	r1, ip
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f04f 0400 	mov.w	r4, #0
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4623      	mov	r3, r4
 800a9e8:	f7f5 fc76 	bl	80002d8 <__aeabi_uldivmod>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9f2:	e247      	b.n	800ae84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9f4:	4b96      	ldr	r3, [pc, #600]	; (800ac50 <UART_SetConfig+0x1178>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 80a3 	beq.w	800ab48 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa02:	4b93      	ldr	r3, [pc, #588]	; (800ac50 <UART_SetConfig+0x1178>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	08db      	lsrs	r3, r3, #3
 800aa08:	f003 0303 	and.w	r3, r3, #3
 800aa0c:	4a91      	ldr	r2, [pc, #580]	; (800ac54 <UART_SetConfig+0x117c>)
 800aa0e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa12:	4618      	mov	r0, r3
 800aa14:	f04f 0100 	mov.w	r1, #0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d067      	beq.n	800aaf0 <UART_SetConfig+0x1018>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d05e      	beq.n	800aae6 <UART_SetConfig+0x100e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d055      	beq.n	800aadc <UART_SetConfig+0x1004>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d04c      	beq.n	800aad2 <UART_SetConfig+0xffa>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d043      	beq.n	800aac8 <UART_SetConfig+0xff0>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	d03a      	beq.n	800aabe <UART_SetConfig+0xfe6>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	2b06      	cmp	r3, #6
 800aa4e:	d031      	beq.n	800aab4 <UART_SetConfig+0xfdc>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	2b07      	cmp	r3, #7
 800aa56:	d028      	beq.n	800aaaa <UART_SetConfig+0xfd2>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	d01f      	beq.n	800aaa0 <UART_SetConfig+0xfc8>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	2b09      	cmp	r3, #9
 800aa66:	d016      	beq.n	800aa96 <UART_SetConfig+0xfbe>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	2b0a      	cmp	r3, #10
 800aa6e:	d00d      	beq.n	800aa8c <UART_SetConfig+0xfb4>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa74:	2b0b      	cmp	r3, #11
 800aa76:	d104      	bne.n	800aa82 <UART_SetConfig+0xfaa>
 800aa78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa7c:	f04f 0400 	mov.w	r4, #0
 800aa80:	e03a      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aa82:	f04f 0301 	mov.w	r3, #1
 800aa86:	f04f 0400 	mov.w	r4, #0
 800aa8a:	e035      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aa8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa90:	f04f 0400 	mov.w	r4, #0
 800aa94:	e030      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aa96:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa9a:	f04f 0400 	mov.w	r4, #0
 800aa9e:	e02b      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aaa0:	f04f 0320 	mov.w	r3, #32
 800aaa4:	f04f 0400 	mov.w	r4, #0
 800aaa8:	e026      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aaaa:	f04f 0310 	mov.w	r3, #16
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	e021      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aab4:	f04f 030c 	mov.w	r3, #12
 800aab8:	f04f 0400 	mov.w	r4, #0
 800aabc:	e01c      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aabe:	f04f 030a 	mov.w	r3, #10
 800aac2:	f04f 0400 	mov.w	r4, #0
 800aac6:	e017      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aac8:	f04f 0308 	mov.w	r3, #8
 800aacc:	f04f 0400 	mov.w	r4, #0
 800aad0:	e012      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aad2:	f04f 0306 	mov.w	r3, #6
 800aad6:	f04f 0400 	mov.w	r4, #0
 800aada:	e00d      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aadc:	f04f 0304 	mov.w	r3, #4
 800aae0:	f04f 0400 	mov.w	r4, #0
 800aae4:	e008      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aae6:	f04f 0302 	mov.w	r3, #2
 800aaea:	f04f 0400 	mov.w	r4, #0
 800aaee:	e003      	b.n	800aaf8 <UART_SetConfig+0x1020>
 800aaf0:	f04f 0301 	mov.w	r3, #1
 800aaf4:	f04f 0400 	mov.w	r4, #0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4623      	mov	r3, r4
 800aafc:	f7f5 fbec 	bl	80002d8 <__aeabi_uldivmod>
 800ab00:	4603      	mov	r3, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	4619      	mov	r1, r3
 800ab06:	4622      	mov	r2, r4
 800ab08:	f04f 0300 	mov.w	r3, #0
 800ab0c:	f04f 0400 	mov.w	r4, #0
 800ab10:	0214      	lsls	r4, r2, #8
 800ab12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ab16:	020b      	lsls	r3, r1, #8
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	6852      	ldr	r2, [r2, #4]
 800ab1c:	0852      	lsrs	r2, r2, #1
 800ab1e:	4611      	mov	r1, r2
 800ab20:	f04f 0200 	mov.w	r2, #0
 800ab24:	eb13 0b01 	adds.w	fp, r3, r1
 800ab28:	eb44 0c02 	adc.w	ip, r4, r2
 800ab2c:	4658      	mov	r0, fp
 800ab2e:	4661      	mov	r1, ip
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f04f 0400 	mov.w	r4, #0
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4623      	mov	r3, r4
 800ab3c:	f7f5 fbcc 	bl	80002d8 <__aeabi_uldivmod>
 800ab40:	4603      	mov	r3, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ab46:	e19d      	b.n	800ae84 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d05b      	beq.n	800ac08 <UART_SetConfig+0x1130>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d053      	beq.n	800ac00 <UART_SetConfig+0x1128>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d04b      	beq.n	800abf8 <UART_SetConfig+0x1120>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d043      	beq.n	800abf0 <UART_SetConfig+0x1118>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	d03b      	beq.n	800abe8 <UART_SetConfig+0x1110>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	d033      	beq.n	800abe0 <UART_SetConfig+0x1108>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b06      	cmp	r3, #6
 800ab7e:	d02b      	beq.n	800abd8 <UART_SetConfig+0x1100>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b07      	cmp	r3, #7
 800ab86:	d023      	beq.n	800abd0 <UART_SetConfig+0x10f8>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	d01b      	beq.n	800abc8 <UART_SetConfig+0x10f0>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d013      	beq.n	800abc0 <UART_SetConfig+0x10e8>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b0a      	cmp	r3, #10
 800ab9e:	d00b      	beq.n	800abb8 <UART_SetConfig+0x10e0>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b0b      	cmp	r3, #11
 800aba6:	d103      	bne.n	800abb0 <UART_SetConfig+0x10d8>
 800aba8:	4b2a      	ldr	r3, [pc, #168]	; (800ac54 <UART_SetConfig+0x117c>)
 800abaa:	f04f 0400 	mov.w	r4, #0
 800abae:	e02e      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abb0:	4b29      	ldr	r3, [pc, #164]	; (800ac58 <UART_SetConfig+0x1180>)
 800abb2:	f04f 0403 	mov.w	r4, #3
 800abb6:	e02a      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abb8:	4b28      	ldr	r3, [pc, #160]	; (800ac5c <UART_SetConfig+0x1184>)
 800abba:	f04f 0400 	mov.w	r4, #0
 800abbe:	e026      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abc0:	4b27      	ldr	r3, [pc, #156]	; (800ac60 <UART_SetConfig+0x1188>)
 800abc2:	f04f 0400 	mov.w	r4, #0
 800abc6:	e022      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abc8:	4b26      	ldr	r3, [pc, #152]	; (800ac64 <UART_SetConfig+0x118c>)
 800abca:	f04f 0400 	mov.w	r4, #0
 800abce:	e01e      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abd0:	4b25      	ldr	r3, [pc, #148]	; (800ac68 <UART_SetConfig+0x1190>)
 800abd2:	f04f 0400 	mov.w	r4, #0
 800abd6:	e01a      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abd8:	a419      	add	r4, pc, #100	; (adr r4, 800ac40 <UART_SetConfig+0x1168>)
 800abda:	e9d4 3400 	ldrd	r3, r4, [r4]
 800abde:	e016      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abe0:	4b22      	ldr	r3, [pc, #136]	; (800ac6c <UART_SetConfig+0x1194>)
 800abe2:	f04f 0400 	mov.w	r4, #0
 800abe6:	e012      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abe8:	4b21      	ldr	r3, [pc, #132]	; (800ac70 <UART_SetConfig+0x1198>)
 800abea:	f04f 0400 	mov.w	r4, #0
 800abee:	e00e      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abf0:	a415      	add	r4, pc, #84	; (adr r4, 800ac48 <UART_SetConfig+0x1170>)
 800abf2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800abf6:	e00a      	b.n	800ac0e <UART_SetConfig+0x1136>
 800abf8:	4b1e      	ldr	r3, [pc, #120]	; (800ac74 <UART_SetConfig+0x119c>)
 800abfa:	f04f 0400 	mov.w	r4, #0
 800abfe:	e006      	b.n	800ac0e <UART_SetConfig+0x1136>
 800ac00:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <UART_SetConfig+0x11a0>)
 800ac02:	f04f 0401 	mov.w	r4, #1
 800ac06:	e002      	b.n	800ac0e <UART_SetConfig+0x1136>
 800ac08:	4b13      	ldr	r3, [pc, #76]	; (800ac58 <UART_SetConfig+0x1180>)
 800ac0a:	f04f 0403 	mov.w	r4, #3
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6852      	ldr	r2, [r2, #4]
 800ac12:	0852      	lsrs	r2, r2, #1
 800ac14:	4611      	mov	r1, r2
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	eb13 0b01 	adds.w	fp, r3, r1
 800ac1e:	eb44 0c02 	adc.w	ip, r4, r2
 800ac22:	4658      	mov	r0, fp
 800ac24:	4661      	mov	r1, ip
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f04f 0400 	mov.w	r4, #0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	4623      	mov	r3, r4
 800ac32:	f7f5 fb51 	bl	80002d8 <__aeabi_uldivmod>
 800ac36:	4603      	mov	r3, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac3c:	e122      	b.n	800ae84 <UART_SetConfig+0x13ac>
 800ac3e:	bf00      	nop
 800ac40:	51615500 	.word	0x51615500
 800ac44:	00000000 	.word	0x00000000
 800ac48:	a2c2aa00 	.word	0xa2c2aa00
 800ac4c:	00000000 	.word	0x00000000
 800ac50:	58024400 	.word	0x58024400
 800ac54:	03d09000 	.word	0x03d09000
 800ac58:	d0900000 	.word	0xd0900000
 800ac5c:	07a12000 	.word	0x07a12000
 800ac60:	0f424000 	.word	0x0f424000
 800ac64:	1e848000 	.word	0x1e848000
 800ac68:	3d090000 	.word	0x3d090000
 800ac6c:	61a80000 	.word	0x61a80000
 800ac70:	7a120000 	.word	0x7a120000
 800ac74:	f4240000 	.word	0xf4240000
 800ac78:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d05b      	beq.n	800ad3c <UART_SetConfig+0x1264>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d053      	beq.n	800ad34 <UART_SetConfig+0x125c>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d04b      	beq.n	800ad2c <UART_SetConfig+0x1254>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d043      	beq.n	800ad24 <UART_SetConfig+0x124c>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d03b      	beq.n	800ad1c <UART_SetConfig+0x1244>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b05      	cmp	r3, #5
 800acaa:	d033      	beq.n	800ad14 <UART_SetConfig+0x123c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2b06      	cmp	r3, #6
 800acb2:	d02b      	beq.n	800ad0c <UART_SetConfig+0x1234>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b07      	cmp	r3, #7
 800acba:	d023      	beq.n	800ad04 <UART_SetConfig+0x122c>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d01b      	beq.n	800acfc <UART_SetConfig+0x1224>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	2b09      	cmp	r3, #9
 800acca:	d013      	beq.n	800acf4 <UART_SetConfig+0x121c>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	2b0a      	cmp	r3, #10
 800acd2:	d00b      	beq.n	800acec <UART_SetConfig+0x1214>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	2b0b      	cmp	r3, #11
 800acda:	d103      	bne.n	800ace4 <UART_SetConfig+0x120c>
 800acdc:	4bc0      	ldr	r3, [pc, #768]	; (800afe0 <UART_SetConfig+0x1508>)
 800acde:	f04f 0400 	mov.w	r4, #0
 800ace2:	e02e      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ace4:	4bbf      	ldr	r3, [pc, #764]	; (800afe4 <UART_SetConfig+0x150c>)
 800ace6:	f04f 0400 	mov.w	r4, #0
 800acea:	e02a      	b.n	800ad42 <UART_SetConfig+0x126a>
 800acec:	4bbe      	ldr	r3, [pc, #760]	; (800afe8 <UART_SetConfig+0x1510>)
 800acee:	f04f 0400 	mov.w	r4, #0
 800acf2:	e026      	b.n	800ad42 <UART_SetConfig+0x126a>
 800acf4:	4bbd      	ldr	r3, [pc, #756]	; (800afec <UART_SetConfig+0x1514>)
 800acf6:	f04f 0400 	mov.w	r4, #0
 800acfa:	e022      	b.n	800ad42 <UART_SetConfig+0x126a>
 800acfc:	4bbc      	ldr	r3, [pc, #752]	; (800aff0 <UART_SetConfig+0x1518>)
 800acfe:	f04f 0400 	mov.w	r4, #0
 800ad02:	e01e      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad04:	4bbb      	ldr	r3, [pc, #748]	; (800aff4 <UART_SetConfig+0x151c>)
 800ad06:	f04f 0400 	mov.w	r4, #0
 800ad0a:	e01a      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad0c:	a4b0      	add	r4, pc, #704	; (adr r4, 800afd0 <UART_SetConfig+0x14f8>)
 800ad0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ad12:	e016      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad14:	4bb8      	ldr	r3, [pc, #736]	; (800aff8 <UART_SetConfig+0x1520>)
 800ad16:	f04f 0400 	mov.w	r4, #0
 800ad1a:	e012      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad1c:	4bb7      	ldr	r3, [pc, #732]	; (800affc <UART_SetConfig+0x1524>)
 800ad1e:	f04f 0400 	mov.w	r4, #0
 800ad22:	e00e      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad24:	a4ac      	add	r4, pc, #688	; (adr r4, 800afd8 <UART_SetConfig+0x1500>)
 800ad26:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ad2a:	e00a      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad2c:	4bb4      	ldr	r3, [pc, #720]	; (800b000 <UART_SetConfig+0x1528>)
 800ad2e:	f04f 0400 	mov.w	r4, #0
 800ad32:	e006      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad34:	4bb3      	ldr	r3, [pc, #716]	; (800b004 <UART_SetConfig+0x152c>)
 800ad36:	f04f 0400 	mov.w	r4, #0
 800ad3a:	e002      	b.n	800ad42 <UART_SetConfig+0x126a>
 800ad3c:	4ba9      	ldr	r3, [pc, #676]	; (800afe4 <UART_SetConfig+0x150c>)
 800ad3e:	f04f 0400 	mov.w	r4, #0
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	6852      	ldr	r2, [r2, #4]
 800ad46:	0852      	lsrs	r2, r2, #1
 800ad48:	4611      	mov	r1, r2
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	eb13 0b01 	adds.w	fp, r3, r1
 800ad52:	eb44 0c02 	adc.w	ip, r4, r2
 800ad56:	4658      	mov	r0, fp
 800ad58:	4661      	mov	r1, ip
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	f04f 0400 	mov.w	r4, #0
 800ad62:	461a      	mov	r2, r3
 800ad64:	4623      	mov	r3, r4
 800ad66:	f7f5 fab7 	bl	80002d8 <__aeabi_uldivmod>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad70:	e088      	b.n	800ae84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d064      	beq.n	800ae44 <UART_SetConfig+0x136c>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d05b      	beq.n	800ae3a <UART_SetConfig+0x1362>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d052      	beq.n	800ae30 <UART_SetConfig+0x1358>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d04a      	beq.n	800ae28 <UART_SetConfig+0x1350>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d041      	beq.n	800ae1e <UART_SetConfig+0x1346>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	d039      	beq.n	800ae16 <UART_SetConfig+0x133e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b06      	cmp	r3, #6
 800ada8:	d031      	beq.n	800ae0e <UART_SetConfig+0x1336>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b07      	cmp	r3, #7
 800adb0:	d028      	beq.n	800ae04 <UART_SetConfig+0x132c>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d01f      	beq.n	800adfa <UART_SetConfig+0x1322>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2b09      	cmp	r3, #9
 800adc0:	d016      	beq.n	800adf0 <UART_SetConfig+0x1318>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	2b0a      	cmp	r3, #10
 800adc8:	d00d      	beq.n	800ade6 <UART_SetConfig+0x130e>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	2b0b      	cmp	r3, #11
 800add0:	d104      	bne.n	800addc <UART_SetConfig+0x1304>
 800add2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800add6:	f04f 0400 	mov.w	r4, #0
 800adda:	e037      	b.n	800ae4c <UART_SetConfig+0x1374>
 800addc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ade0:	f04f 0400 	mov.w	r4, #0
 800ade4:	e032      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ade6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adea:	f04f 0400 	mov.w	r4, #0
 800adee:	e02d      	b.n	800ae4c <UART_SetConfig+0x1374>
 800adf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800adf4:	f04f 0400 	mov.w	r4, #0
 800adf8:	e028      	b.n	800ae4c <UART_SetConfig+0x1374>
 800adfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800adfe:	f04f 0400 	mov.w	r4, #0
 800ae02:	e023      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae08:	f04f 0400 	mov.w	r4, #0
 800ae0c:	e01e      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae0e:	4b7e      	ldr	r3, [pc, #504]	; (800b008 <UART_SetConfig+0x1530>)
 800ae10:	f04f 0400 	mov.w	r4, #0
 800ae14:	e01a      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae16:	4b7d      	ldr	r3, [pc, #500]	; (800b00c <UART_SetConfig+0x1534>)
 800ae18:	f04f 0400 	mov.w	r4, #0
 800ae1c:	e016      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae22:	f04f 0400 	mov.w	r4, #0
 800ae26:	e011      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae28:	4b79      	ldr	r3, [pc, #484]	; (800b010 <UART_SetConfig+0x1538>)
 800ae2a:	f04f 0400 	mov.w	r4, #0
 800ae2e:	e00d      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae34:	f04f 0400 	mov.w	r4, #0
 800ae38:	e008      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae3e:	f04f 0400 	mov.w	r4, #0
 800ae42:	e003      	b.n	800ae4c <UART_SetConfig+0x1374>
 800ae44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae48:	f04f 0400 	mov.w	r4, #0
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	6852      	ldr	r2, [r2, #4]
 800ae50:	0852      	lsrs	r2, r2, #1
 800ae52:	4611      	mov	r1, r2
 800ae54:	f04f 0200 	mov.w	r2, #0
 800ae58:	eb13 0b01 	adds.w	fp, r3, r1
 800ae5c:	eb44 0c02 	adc.w	ip, r4, r2
 800ae60:	4658      	mov	r0, fp
 800ae62:	4661      	mov	r1, ip
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f04f 0400 	mov.w	r4, #0
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4623      	mov	r3, r4
 800ae70:	f7f5 fa32 	bl	80002d8 <__aeabi_uldivmod>
 800ae74:	4603      	mov	r3, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae7a:	e003      	b.n	800ae84 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800ae82:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae8a:	d309      	bcc.n	800aea0 <UART_SetConfig+0x13c8>
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae92:	d205      	bcs.n	800aea0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae9a:	60da      	str	r2, [r3, #12]
 800ae9c:	f000 bf85 	b.w	800bdaa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aea6:	f000 bf80 	b.w	800bdaa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb2:	f040 83da 	bne.w	800b66a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800aeb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aeba:	2b40      	cmp	r3, #64	; 0x40
 800aebc:	f200 83b3 	bhi.w	800b626 <UART_SetConfig+0x1b4e>
 800aec0:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0x13f0>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800b015 	.word	0x0800b015
 800aecc:	0800b0cd 	.word	0x0800b0cd
 800aed0:	0800b627 	.word	0x0800b627
 800aed4:	0800b627 	.word	0x0800b627
 800aed8:	0800b185 	.word	0x0800b185
 800aedc:	0800b627 	.word	0x0800b627
 800aee0:	0800b627 	.word	0x0800b627
 800aee4:	0800b627 	.word	0x0800b627
 800aee8:	0800b241 	.word	0x0800b241
 800aeec:	0800b627 	.word	0x0800b627
 800aef0:	0800b627 	.word	0x0800b627
 800aef4:	0800b627 	.word	0x0800b627
 800aef8:	0800b627 	.word	0x0800b627
 800aefc:	0800b627 	.word	0x0800b627
 800af00:	0800b627 	.word	0x0800b627
 800af04:	0800b627 	.word	0x0800b627
 800af08:	0800b2fd 	.word	0x0800b2fd
 800af0c:	0800b627 	.word	0x0800b627
 800af10:	0800b627 	.word	0x0800b627
 800af14:	0800b627 	.word	0x0800b627
 800af18:	0800b627 	.word	0x0800b627
 800af1c:	0800b627 	.word	0x0800b627
 800af20:	0800b627 	.word	0x0800b627
 800af24:	0800b627 	.word	0x0800b627
 800af28:	0800b627 	.word	0x0800b627
 800af2c:	0800b627 	.word	0x0800b627
 800af30:	0800b627 	.word	0x0800b627
 800af34:	0800b627 	.word	0x0800b627
 800af38:	0800b627 	.word	0x0800b627
 800af3c:	0800b627 	.word	0x0800b627
 800af40:	0800b627 	.word	0x0800b627
 800af44:	0800b627 	.word	0x0800b627
 800af48:	0800b46f 	.word	0x0800b46f
 800af4c:	0800b627 	.word	0x0800b627
 800af50:	0800b627 	.word	0x0800b627
 800af54:	0800b627 	.word	0x0800b627
 800af58:	0800b627 	.word	0x0800b627
 800af5c:	0800b627 	.word	0x0800b627
 800af60:	0800b627 	.word	0x0800b627
 800af64:	0800b627 	.word	0x0800b627
 800af68:	0800b627 	.word	0x0800b627
 800af6c:	0800b627 	.word	0x0800b627
 800af70:	0800b627 	.word	0x0800b627
 800af74:	0800b627 	.word	0x0800b627
 800af78:	0800b627 	.word	0x0800b627
 800af7c:	0800b627 	.word	0x0800b627
 800af80:	0800b627 	.word	0x0800b627
 800af84:	0800b627 	.word	0x0800b627
 800af88:	0800b627 	.word	0x0800b627
 800af8c:	0800b627 	.word	0x0800b627
 800af90:	0800b627 	.word	0x0800b627
 800af94:	0800b627 	.word	0x0800b627
 800af98:	0800b627 	.word	0x0800b627
 800af9c:	0800b627 	.word	0x0800b627
 800afa0:	0800b627 	.word	0x0800b627
 800afa4:	0800b627 	.word	0x0800b627
 800afa8:	0800b627 	.word	0x0800b627
 800afac:	0800b627 	.word	0x0800b627
 800afb0:	0800b627 	.word	0x0800b627
 800afb4:	0800b627 	.word	0x0800b627
 800afb8:	0800b627 	.word	0x0800b627
 800afbc:	0800b627 	.word	0x0800b627
 800afc0:	0800b627 	.word	0x0800b627
 800afc4:	0800b627 	.word	0x0800b627
 800afc8:	0800b565 	.word	0x0800b565
 800afcc:	f3af 8000 	nop.w
 800afd0:	05161500 	.word	0x05161500
 800afd4:	00000000 	.word	0x00000000
 800afd8:	0a2c2a00 	.word	0x0a2c2a00
 800afdc:	00000000 	.word	0x00000000
 800afe0:	003d0900 	.word	0x003d0900
 800afe4:	3d090000 	.word	0x3d090000
 800afe8:	007a1200 	.word	0x007a1200
 800afec:	00f42400 	.word	0x00f42400
 800aff0:	01e84800 	.word	0x01e84800
 800aff4:	03d09000 	.word	0x03d09000
 800aff8:	061a8000 	.word	0x061a8000
 800affc:	07a12000 	.word	0x07a12000
 800b000:	0f424000 	.word	0x0f424000
 800b004:	1e848000 	.word	0x1e848000
 800b008:	000aaa00 	.word	0x000aaa00
 800b00c:	000ccc00 	.word	0x000ccc00
 800b010:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b014:	f7fb ff44 	bl	8006ea0 <HAL_RCC_GetPCLK1Freq>
 800b018:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d044      	beq.n	800b0ac <UART_SetConfig+0x15d4>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	2b01      	cmp	r3, #1
 800b028:	d03e      	beq.n	800b0a8 <UART_SetConfig+0x15d0>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d038      	beq.n	800b0a4 <UART_SetConfig+0x15cc>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	2b03      	cmp	r3, #3
 800b038:	d032      	beq.n	800b0a0 <UART_SetConfig+0x15c8>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d02c      	beq.n	800b09c <UART_SetConfig+0x15c4>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	2b05      	cmp	r3, #5
 800b048:	d026      	beq.n	800b098 <UART_SetConfig+0x15c0>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	2b06      	cmp	r3, #6
 800b050:	d020      	beq.n	800b094 <UART_SetConfig+0x15bc>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b056:	2b07      	cmp	r3, #7
 800b058:	d01a      	beq.n	800b090 <UART_SetConfig+0x15b8>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	2b08      	cmp	r3, #8
 800b060:	d014      	beq.n	800b08c <UART_SetConfig+0x15b4>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	2b09      	cmp	r3, #9
 800b068:	d00e      	beq.n	800b088 <UART_SetConfig+0x15b0>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b0a      	cmp	r3, #10
 800b070:	d008      	beq.n	800b084 <UART_SetConfig+0x15ac>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	2b0b      	cmp	r3, #11
 800b078:	d102      	bne.n	800b080 <UART_SetConfig+0x15a8>
 800b07a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b07e:	e016      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b080:	2301      	movs	r3, #1
 800b082:	e014      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b084:	2380      	movs	r3, #128	; 0x80
 800b086:	e012      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b088:	2340      	movs	r3, #64	; 0x40
 800b08a:	e010      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b08c:	2320      	movs	r3, #32
 800b08e:	e00e      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b090:	2310      	movs	r3, #16
 800b092:	e00c      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b094:	230c      	movs	r3, #12
 800b096:	e00a      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b098:	230a      	movs	r3, #10
 800b09a:	e008      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b09c:	2308      	movs	r3, #8
 800b09e:	e006      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b0a0:	2306      	movs	r3, #6
 800b0a2:	e004      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	e002      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	e000      	b.n	800b0ae <UART_SetConfig+0x15d6>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b4:	005a      	lsls	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	085b      	lsrs	r3, r3, #1
 800b0bc:	441a      	add	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0ca:	e2b0      	b.n	800b62e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0cc:	f7fb fefe 	bl	8006ecc <HAL_RCC_GetPCLK2Freq>
 800b0d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d044      	beq.n	800b164 <UART_SetConfig+0x168c>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d03e      	beq.n	800b160 <UART_SetConfig+0x1688>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d038      	beq.n	800b15c <UART_SetConfig+0x1684>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d032      	beq.n	800b158 <UART_SetConfig+0x1680>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d02c      	beq.n	800b154 <UART_SetConfig+0x167c>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fe:	2b05      	cmp	r3, #5
 800b100:	d026      	beq.n	800b150 <UART_SetConfig+0x1678>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	2b06      	cmp	r3, #6
 800b108:	d020      	beq.n	800b14c <UART_SetConfig+0x1674>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	2b07      	cmp	r3, #7
 800b110:	d01a      	beq.n	800b148 <UART_SetConfig+0x1670>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b116:	2b08      	cmp	r3, #8
 800b118:	d014      	beq.n	800b144 <UART_SetConfig+0x166c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	2b09      	cmp	r3, #9
 800b120:	d00e      	beq.n	800b140 <UART_SetConfig+0x1668>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	2b0a      	cmp	r3, #10
 800b128:	d008      	beq.n	800b13c <UART_SetConfig+0x1664>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b0b      	cmp	r3, #11
 800b130:	d102      	bne.n	800b138 <UART_SetConfig+0x1660>
 800b132:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b136:	e016      	b.n	800b166 <UART_SetConfig+0x168e>
 800b138:	2301      	movs	r3, #1
 800b13a:	e014      	b.n	800b166 <UART_SetConfig+0x168e>
 800b13c:	2380      	movs	r3, #128	; 0x80
 800b13e:	e012      	b.n	800b166 <UART_SetConfig+0x168e>
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	e010      	b.n	800b166 <UART_SetConfig+0x168e>
 800b144:	2320      	movs	r3, #32
 800b146:	e00e      	b.n	800b166 <UART_SetConfig+0x168e>
 800b148:	2310      	movs	r3, #16
 800b14a:	e00c      	b.n	800b166 <UART_SetConfig+0x168e>
 800b14c:	230c      	movs	r3, #12
 800b14e:	e00a      	b.n	800b166 <UART_SetConfig+0x168e>
 800b150:	230a      	movs	r3, #10
 800b152:	e008      	b.n	800b166 <UART_SetConfig+0x168e>
 800b154:	2308      	movs	r3, #8
 800b156:	e006      	b.n	800b166 <UART_SetConfig+0x168e>
 800b158:	2306      	movs	r3, #6
 800b15a:	e004      	b.n	800b166 <UART_SetConfig+0x168e>
 800b15c:	2304      	movs	r3, #4
 800b15e:	e002      	b.n	800b166 <UART_SetConfig+0x168e>
 800b160:	2302      	movs	r3, #2
 800b162:	e000      	b.n	800b166 <UART_SetConfig+0x168e>
 800b164:	2301      	movs	r3, #1
 800b166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b168:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16c:	005a      	lsls	r2, r3, #1
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	085b      	lsrs	r3, r3, #1
 800b174:	441a      	add	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17e:	b29b      	uxth	r3, r3
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b182:	e254      	b.n	800b62e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b184:	f107 0318 	add.w	r3, r7, #24
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fd f821 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d044      	beq.n	800b222 <UART_SetConfig+0x174a>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d03e      	beq.n	800b21e <UART_SetConfig+0x1746>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d038      	beq.n	800b21a <UART_SetConfig+0x1742>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d032      	beq.n	800b216 <UART_SetConfig+0x173e>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d02c      	beq.n	800b212 <UART_SetConfig+0x173a>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	2b05      	cmp	r3, #5
 800b1be:	d026      	beq.n	800b20e <UART_SetConfig+0x1736>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c4:	2b06      	cmp	r3, #6
 800b1c6:	d020      	beq.n	800b20a <UART_SetConfig+0x1732>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	2b07      	cmp	r3, #7
 800b1ce:	d01a      	beq.n	800b206 <UART_SetConfig+0x172e>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d014      	beq.n	800b202 <UART_SetConfig+0x172a>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	d00e      	beq.n	800b1fe <UART_SetConfig+0x1726>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e4:	2b0a      	cmp	r3, #10
 800b1e6:	d008      	beq.n	800b1fa <UART_SetConfig+0x1722>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	2b0b      	cmp	r3, #11
 800b1ee:	d102      	bne.n	800b1f6 <UART_SetConfig+0x171e>
 800b1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f4:	e016      	b.n	800b224 <UART_SetConfig+0x174c>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e014      	b.n	800b224 <UART_SetConfig+0x174c>
 800b1fa:	2380      	movs	r3, #128	; 0x80
 800b1fc:	e012      	b.n	800b224 <UART_SetConfig+0x174c>
 800b1fe:	2340      	movs	r3, #64	; 0x40
 800b200:	e010      	b.n	800b224 <UART_SetConfig+0x174c>
 800b202:	2320      	movs	r3, #32
 800b204:	e00e      	b.n	800b224 <UART_SetConfig+0x174c>
 800b206:	2310      	movs	r3, #16
 800b208:	e00c      	b.n	800b224 <UART_SetConfig+0x174c>
 800b20a:	230c      	movs	r3, #12
 800b20c:	e00a      	b.n	800b224 <UART_SetConfig+0x174c>
 800b20e:	230a      	movs	r3, #10
 800b210:	e008      	b.n	800b224 <UART_SetConfig+0x174c>
 800b212:	2308      	movs	r3, #8
 800b214:	e006      	b.n	800b224 <UART_SetConfig+0x174c>
 800b216:	2306      	movs	r3, #6
 800b218:	e004      	b.n	800b224 <UART_SetConfig+0x174c>
 800b21a:	2304      	movs	r3, #4
 800b21c:	e002      	b.n	800b224 <UART_SetConfig+0x174c>
 800b21e:	2302      	movs	r3, #2
 800b220:	e000      	b.n	800b224 <UART_SetConfig+0x174c>
 800b222:	2301      	movs	r3, #1
 800b224:	fbb2 f3f3 	udiv	r3, r2, r3
 800b228:	005a      	lsls	r2, r3, #1
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	085b      	lsrs	r3, r3, #1
 800b230:	441a      	add	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b23e:	e1f6      	b.n	800b62e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b240:	f107 030c 	add.w	r3, r7, #12
 800b244:	4618      	mov	r0, r3
 800b246:	f7fd f90f 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	2b00      	cmp	r3, #0
 800b252:	d044      	beq.n	800b2de <UART_SetConfig+0x1806>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d03e      	beq.n	800b2da <UART_SetConfig+0x1802>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	2b02      	cmp	r3, #2
 800b262:	d038      	beq.n	800b2d6 <UART_SetConfig+0x17fe>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d032      	beq.n	800b2d2 <UART_SetConfig+0x17fa>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b04      	cmp	r3, #4
 800b272:	d02c      	beq.n	800b2ce <UART_SetConfig+0x17f6>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b05      	cmp	r3, #5
 800b27a:	d026      	beq.n	800b2ca <UART_SetConfig+0x17f2>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	2b06      	cmp	r3, #6
 800b282:	d020      	beq.n	800b2c6 <UART_SetConfig+0x17ee>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b07      	cmp	r3, #7
 800b28a:	d01a      	beq.n	800b2c2 <UART_SetConfig+0x17ea>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b08      	cmp	r3, #8
 800b292:	d014      	beq.n	800b2be <UART_SetConfig+0x17e6>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b09      	cmp	r3, #9
 800b29a:	d00e      	beq.n	800b2ba <UART_SetConfig+0x17e2>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b0a      	cmp	r3, #10
 800b2a2:	d008      	beq.n	800b2b6 <UART_SetConfig+0x17de>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2b0b      	cmp	r3, #11
 800b2aa:	d102      	bne.n	800b2b2 <UART_SetConfig+0x17da>
 800b2ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b0:	e016      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e014      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2b6:	2380      	movs	r3, #128	; 0x80
 800b2b8:	e012      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	e010      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2be:	2320      	movs	r3, #32
 800b2c0:	e00e      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2c2:	2310      	movs	r3, #16
 800b2c4:	e00c      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	e00a      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2ca:	230a      	movs	r3, #10
 800b2cc:	e008      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2ce:	2308      	movs	r3, #8
 800b2d0:	e006      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2d2:	2306      	movs	r3, #6
 800b2d4:	e004      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2d6:	2304      	movs	r3, #4
 800b2d8:	e002      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2da:	2302      	movs	r3, #2
 800b2dc:	e000      	b.n	800b2e0 <UART_SetConfig+0x1808>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e4:	005a      	lsls	r2, r3, #1
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	441a      	add	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2fa:	e198      	b.n	800b62e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2fc:	4b87      	ldr	r3, [pc, #540]	; (800b51c <UART_SetConfig+0x1a44>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0320 	and.w	r3, r3, #32
 800b304:	2b00      	cmp	r3, #0
 800b306:	d05e      	beq.n	800b3c6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b308:	4b84      	ldr	r3, [pc, #528]	; (800b51c <UART_SetConfig+0x1a44>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	08db      	lsrs	r3, r3, #3
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	4a83      	ldr	r2, [pc, #524]	; (800b520 <UART_SetConfig+0x1a48>)
 800b314:	40da      	lsrs	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d044      	beq.n	800b3a8 <UART_SetConfig+0x18d0>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	2b01      	cmp	r3, #1
 800b324:	d03e      	beq.n	800b3a4 <UART_SetConfig+0x18cc>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d038      	beq.n	800b3a0 <UART_SetConfig+0x18c8>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	2b03      	cmp	r3, #3
 800b334:	d032      	beq.n	800b39c <UART_SetConfig+0x18c4>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d02c      	beq.n	800b398 <UART_SetConfig+0x18c0>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	2b05      	cmp	r3, #5
 800b344:	d026      	beq.n	800b394 <UART_SetConfig+0x18bc>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34a:	2b06      	cmp	r3, #6
 800b34c:	d020      	beq.n	800b390 <UART_SetConfig+0x18b8>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b352:	2b07      	cmp	r3, #7
 800b354:	d01a      	beq.n	800b38c <UART_SetConfig+0x18b4>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35a:	2b08      	cmp	r3, #8
 800b35c:	d014      	beq.n	800b388 <UART_SetConfig+0x18b0>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b362:	2b09      	cmp	r3, #9
 800b364:	d00e      	beq.n	800b384 <UART_SetConfig+0x18ac>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	2b0a      	cmp	r3, #10
 800b36c:	d008      	beq.n	800b380 <UART_SetConfig+0x18a8>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	2b0b      	cmp	r3, #11
 800b374:	d102      	bne.n	800b37c <UART_SetConfig+0x18a4>
 800b376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b37a:	e016      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e014      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b380:	2380      	movs	r3, #128	; 0x80
 800b382:	e012      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b384:	2340      	movs	r3, #64	; 0x40
 800b386:	e010      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b388:	2320      	movs	r3, #32
 800b38a:	e00e      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b38c:	2310      	movs	r3, #16
 800b38e:	e00c      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b390:	230c      	movs	r3, #12
 800b392:	e00a      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b394:	230a      	movs	r3, #10
 800b396:	e008      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b398:	2308      	movs	r3, #8
 800b39a:	e006      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b39c:	2306      	movs	r3, #6
 800b39e:	e004      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b3a0:	2304      	movs	r3, #4
 800b3a2:	e002      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	e000      	b.n	800b3aa <UART_SetConfig+0x18d2>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ae:	005a      	lsls	r2, r3, #1
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	085b      	lsrs	r3, r3, #1
 800b3b6:	441a      	add	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b3c4:	e133      	b.n	800b62e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d043      	beq.n	800b456 <UART_SetConfig+0x197e>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d03d      	beq.n	800b452 <UART_SetConfig+0x197a>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d037      	beq.n	800b44e <UART_SetConfig+0x1976>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d031      	beq.n	800b44a <UART_SetConfig+0x1972>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	d02b      	beq.n	800b446 <UART_SetConfig+0x196e>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f2:	2b05      	cmp	r3, #5
 800b3f4:	d025      	beq.n	800b442 <UART_SetConfig+0x196a>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	2b06      	cmp	r3, #6
 800b3fc:	d01f      	beq.n	800b43e <UART_SetConfig+0x1966>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b402:	2b07      	cmp	r3, #7
 800b404:	d019      	beq.n	800b43a <UART_SetConfig+0x1962>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	2b08      	cmp	r3, #8
 800b40c:	d013      	beq.n	800b436 <UART_SetConfig+0x195e>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	2b09      	cmp	r3, #9
 800b414:	d00d      	beq.n	800b432 <UART_SetConfig+0x195a>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	2b0a      	cmp	r3, #10
 800b41c:	d007      	beq.n	800b42e <UART_SetConfig+0x1956>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	2b0b      	cmp	r3, #11
 800b424:	d101      	bne.n	800b42a <UART_SetConfig+0x1952>
 800b426:	4b3f      	ldr	r3, [pc, #252]	; (800b524 <UART_SetConfig+0x1a4c>)
 800b428:	e016      	b.n	800b458 <UART_SetConfig+0x1980>
 800b42a:	4b3f      	ldr	r3, [pc, #252]	; (800b528 <UART_SetConfig+0x1a50>)
 800b42c:	e014      	b.n	800b458 <UART_SetConfig+0x1980>
 800b42e:	4b3f      	ldr	r3, [pc, #252]	; (800b52c <UART_SetConfig+0x1a54>)
 800b430:	e012      	b.n	800b458 <UART_SetConfig+0x1980>
 800b432:	4b3f      	ldr	r3, [pc, #252]	; (800b530 <UART_SetConfig+0x1a58>)
 800b434:	e010      	b.n	800b458 <UART_SetConfig+0x1980>
 800b436:	4b3f      	ldr	r3, [pc, #252]	; (800b534 <UART_SetConfig+0x1a5c>)
 800b438:	e00e      	b.n	800b458 <UART_SetConfig+0x1980>
 800b43a:	4b3f      	ldr	r3, [pc, #252]	; (800b538 <UART_SetConfig+0x1a60>)
 800b43c:	e00c      	b.n	800b458 <UART_SetConfig+0x1980>
 800b43e:	4b3f      	ldr	r3, [pc, #252]	; (800b53c <UART_SetConfig+0x1a64>)
 800b440:	e00a      	b.n	800b458 <UART_SetConfig+0x1980>
 800b442:	4b3f      	ldr	r3, [pc, #252]	; (800b540 <UART_SetConfig+0x1a68>)
 800b444:	e008      	b.n	800b458 <UART_SetConfig+0x1980>
 800b446:	4b3f      	ldr	r3, [pc, #252]	; (800b544 <UART_SetConfig+0x1a6c>)
 800b448:	e006      	b.n	800b458 <UART_SetConfig+0x1980>
 800b44a:	4b3f      	ldr	r3, [pc, #252]	; (800b548 <UART_SetConfig+0x1a70>)
 800b44c:	e004      	b.n	800b458 <UART_SetConfig+0x1980>
 800b44e:	4b3f      	ldr	r3, [pc, #252]	; (800b54c <UART_SetConfig+0x1a74>)
 800b450:	e002      	b.n	800b458 <UART_SetConfig+0x1980>
 800b452:	4b33      	ldr	r3, [pc, #204]	; (800b520 <UART_SetConfig+0x1a48>)
 800b454:	e000      	b.n	800b458 <UART_SetConfig+0x1980>
 800b456:	4b34      	ldr	r3, [pc, #208]	; (800b528 <UART_SetConfig+0x1a50>)
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6852      	ldr	r2, [r2, #4]
 800b45c:	0852      	lsrs	r2, r2, #1
 800b45e:	441a      	add	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	fbb2 f3f3 	udiv	r3, r2, r3
 800b468:	b29b      	uxth	r3, r3
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b46c:	e0df      	b.n	800b62e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	2b00      	cmp	r3, #0
 800b474:	d045      	beq.n	800b502 <UART_SetConfig+0x1a2a>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d03f      	beq.n	800b4fe <UART_SetConfig+0x1a26>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	2b02      	cmp	r3, #2
 800b484:	d039      	beq.n	800b4fa <UART_SetConfig+0x1a22>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d033      	beq.n	800b4f6 <UART_SetConfig+0x1a1e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b492:	2b04      	cmp	r3, #4
 800b494:	d02d      	beq.n	800b4f2 <UART_SetConfig+0x1a1a>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49a:	2b05      	cmp	r3, #5
 800b49c:	d027      	beq.n	800b4ee <UART_SetConfig+0x1a16>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	2b06      	cmp	r3, #6
 800b4a4:	d021      	beq.n	800b4ea <UART_SetConfig+0x1a12>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	2b07      	cmp	r3, #7
 800b4ac:	d01b      	beq.n	800b4e6 <UART_SetConfig+0x1a0e>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	2b08      	cmp	r3, #8
 800b4b4:	d015      	beq.n	800b4e2 <UART_SetConfig+0x1a0a>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	2b09      	cmp	r3, #9
 800b4bc:	d00f      	beq.n	800b4de <UART_SetConfig+0x1a06>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	2b0a      	cmp	r3, #10
 800b4c4:	d008      	beq.n	800b4d8 <UART_SetConfig+0x1a00>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	2b0b      	cmp	r3, #11
 800b4cc:	d102      	bne.n	800b4d4 <UART_SetConfig+0x19fc>
 800b4ce:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b4d2:	e017      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4d4:	4b18      	ldr	r3, [pc, #96]	; (800b538 <UART_SetConfig+0x1a60>)
 800b4d6:	e015      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b4dc:	e012      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4de:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <UART_SetConfig+0x1a78>)
 800b4e0:	e010      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4e2:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <UART_SetConfig+0x1a7c>)
 800b4e4:	e00e      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4e6:	4b0f      	ldr	r3, [pc, #60]	; (800b524 <UART_SetConfig+0x1a4c>)
 800b4e8:	e00c      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <UART_SetConfig+0x1a80>)
 800b4ec:	e00a      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4ee:	4b1b      	ldr	r3, [pc, #108]	; (800b55c <UART_SetConfig+0x1a84>)
 800b4f0:	e008      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <UART_SetConfig+0x1a54>)
 800b4f4:	e006      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4f6:	4b1a      	ldr	r3, [pc, #104]	; (800b560 <UART_SetConfig+0x1a88>)
 800b4f8:	e004      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4fa:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <UART_SetConfig+0x1a58>)
 800b4fc:	e002      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b4fe:	4b0d      	ldr	r3, [pc, #52]	; (800b534 <UART_SetConfig+0x1a5c>)
 800b500:	e000      	b.n	800b504 <UART_SetConfig+0x1a2c>
 800b502:	4b0d      	ldr	r3, [pc, #52]	; (800b538 <UART_SetConfig+0x1a60>)
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	6852      	ldr	r2, [r2, #4]
 800b508:	0852      	lsrs	r2, r2, #1
 800b50a:	441a      	add	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	fbb2 f3f3 	udiv	r3, r2, r3
 800b514:	b29b      	uxth	r3, r3
 800b516:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b518:	e089      	b.n	800b62e <UART_SetConfig+0x1b56>
 800b51a:	bf00      	nop
 800b51c:	58024400 	.word	0x58024400
 800b520:	03d09000 	.word	0x03d09000
 800b524:	0007a120 	.word	0x0007a120
 800b528:	07a12000 	.word	0x07a12000
 800b52c:	000f4240 	.word	0x000f4240
 800b530:	001e8480 	.word	0x001e8480
 800b534:	003d0900 	.word	0x003d0900
 800b538:	007a1200 	.word	0x007a1200
 800b53c:	00a2c2aa 	.word	0x00a2c2aa
 800b540:	00c35000 	.word	0x00c35000
 800b544:	00f42400 	.word	0x00f42400
 800b548:	01458554 	.word	0x01458554
 800b54c:	01e84800 	.word	0x01e84800
 800b550:	0001e848 	.word	0x0001e848
 800b554:	0003d090 	.word	0x0003d090
 800b558:	000a2c2a 	.word	0x000a2c2a
 800b55c:	000c3500 	.word	0x000c3500
 800b560:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d04f      	beq.n	800b60c <UART_SetConfig+0x1b34>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	2b01      	cmp	r3, #1
 800b572:	d048      	beq.n	800b606 <UART_SetConfig+0x1b2e>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d041      	beq.n	800b600 <UART_SetConfig+0x1b28>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	2b03      	cmp	r3, #3
 800b582:	d03a      	beq.n	800b5fa <UART_SetConfig+0x1b22>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d033      	beq.n	800b5f4 <UART_SetConfig+0x1b1c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b590:	2b05      	cmp	r3, #5
 800b592:	d02c      	beq.n	800b5ee <UART_SetConfig+0x1b16>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	2b06      	cmp	r3, #6
 800b59a:	d025      	beq.n	800b5e8 <UART_SetConfig+0x1b10>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	2b07      	cmp	r3, #7
 800b5a2:	d01e      	beq.n	800b5e2 <UART_SetConfig+0x1b0a>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d017      	beq.n	800b5dc <UART_SetConfig+0x1b04>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	2b09      	cmp	r3, #9
 800b5b2:	d010      	beq.n	800b5d6 <UART_SetConfig+0x1afe>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	2b0a      	cmp	r3, #10
 800b5ba:	d009      	beq.n	800b5d0 <UART_SetConfig+0x1af8>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b0b      	cmp	r3, #11
 800b5c2:	d102      	bne.n	800b5ca <UART_SetConfig+0x1af2>
 800b5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c8:	e022      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b5ce:	e01f      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5d4:	e01c      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5da:	e019      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5e0:	e016      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5e6:	e013      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5e8:	f241 5354 	movw	r3, #5460	; 0x1554
 800b5ec:	e010      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5ee:	f641 1398 	movw	r3, #6552	; 0x1998
 800b5f2:	e00d      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5f8:	e00a      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b5fa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b5fe:	e007      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b604:	e004      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b60a:	e001      	b.n	800b610 <UART_SetConfig+0x1b38>
 800b60c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6852      	ldr	r2, [r2, #4]
 800b614:	0852      	lsrs	r2, r2, #1
 800b616:	441a      	add	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	b29b      	uxth	r3, r3
 800b622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b624:	e003      	b.n	800b62e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b62c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	2b0f      	cmp	r3, #15
 800b632:	d916      	bls.n	800b662 <UART_SetConfig+0x1b8a>
 800b634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b63a:	d212      	bcs.n	800b662 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63e:	b29b      	uxth	r3, r3
 800b640:	f023 030f 	bic.w	r3, r3, #15
 800b644:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b648:	085b      	lsrs	r3, r3, #1
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	f003 0307 	and.w	r3, r3, #7
 800b650:	b29a      	uxth	r2, r3
 800b652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b654:	4313      	orrs	r3, r2
 800b656:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b65e:	60da      	str	r2, [r3, #12]
 800b660:	e3a3      	b.n	800bdaa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b668:	e39f      	b.n	800bdaa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b66a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b66e:	2b40      	cmp	r3, #64	; 0x40
 800b670:	f200 8388 	bhi.w	800bd84 <UART_SetConfig+0x22ac>
 800b674:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <UART_SetConfig+0x1ba4>)
 800b676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67a:	bf00      	nop
 800b67c:	0800b781 	.word	0x0800b781
 800b680:	0800b837 	.word	0x0800b837
 800b684:	0800bd85 	.word	0x0800bd85
 800b688:	0800bd85 	.word	0x0800bd85
 800b68c:	0800b8ed 	.word	0x0800b8ed
 800b690:	0800bd85 	.word	0x0800bd85
 800b694:	0800bd85 	.word	0x0800bd85
 800b698:	0800bd85 	.word	0x0800bd85
 800b69c:	0800b9a7 	.word	0x0800b9a7
 800b6a0:	0800bd85 	.word	0x0800bd85
 800b6a4:	0800bd85 	.word	0x0800bd85
 800b6a8:	0800bd85 	.word	0x0800bd85
 800b6ac:	0800bd85 	.word	0x0800bd85
 800b6b0:	0800bd85 	.word	0x0800bd85
 800b6b4:	0800bd85 	.word	0x0800bd85
 800b6b8:	0800bd85 	.word	0x0800bd85
 800b6bc:	0800ba61 	.word	0x0800ba61
 800b6c0:	0800bd85 	.word	0x0800bd85
 800b6c4:	0800bd85 	.word	0x0800bd85
 800b6c8:	0800bd85 	.word	0x0800bd85
 800b6cc:	0800bd85 	.word	0x0800bd85
 800b6d0:	0800bd85 	.word	0x0800bd85
 800b6d4:	0800bd85 	.word	0x0800bd85
 800b6d8:	0800bd85 	.word	0x0800bd85
 800b6dc:	0800bd85 	.word	0x0800bd85
 800b6e0:	0800bd85 	.word	0x0800bd85
 800b6e4:	0800bd85 	.word	0x0800bd85
 800b6e8:	0800bd85 	.word	0x0800bd85
 800b6ec:	0800bd85 	.word	0x0800bd85
 800b6f0:	0800bd85 	.word	0x0800bd85
 800b6f4:	0800bd85 	.word	0x0800bd85
 800b6f8:	0800bd85 	.word	0x0800bd85
 800b6fc:	0800bbd1 	.word	0x0800bbd1
 800b700:	0800bd85 	.word	0x0800bd85
 800b704:	0800bd85 	.word	0x0800bd85
 800b708:	0800bd85 	.word	0x0800bd85
 800b70c:	0800bd85 	.word	0x0800bd85
 800b710:	0800bd85 	.word	0x0800bd85
 800b714:	0800bd85 	.word	0x0800bd85
 800b718:	0800bd85 	.word	0x0800bd85
 800b71c:	0800bd85 	.word	0x0800bd85
 800b720:	0800bd85 	.word	0x0800bd85
 800b724:	0800bd85 	.word	0x0800bd85
 800b728:	0800bd85 	.word	0x0800bd85
 800b72c:	0800bd85 	.word	0x0800bd85
 800b730:	0800bd85 	.word	0x0800bd85
 800b734:	0800bd85 	.word	0x0800bd85
 800b738:	0800bd85 	.word	0x0800bd85
 800b73c:	0800bd85 	.word	0x0800bd85
 800b740:	0800bd85 	.word	0x0800bd85
 800b744:	0800bd85 	.word	0x0800bd85
 800b748:	0800bd85 	.word	0x0800bd85
 800b74c:	0800bd85 	.word	0x0800bd85
 800b750:	0800bd85 	.word	0x0800bd85
 800b754:	0800bd85 	.word	0x0800bd85
 800b758:	0800bd85 	.word	0x0800bd85
 800b75c:	0800bd85 	.word	0x0800bd85
 800b760:	0800bd85 	.word	0x0800bd85
 800b764:	0800bd85 	.word	0x0800bd85
 800b768:	0800bd85 	.word	0x0800bd85
 800b76c:	0800bd85 	.word	0x0800bd85
 800b770:	0800bd85 	.word	0x0800bd85
 800b774:	0800bd85 	.word	0x0800bd85
 800b778:	0800bd85 	.word	0x0800bd85
 800b77c:	0800bcc5 	.word	0x0800bcc5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b780:	f7fb fb8e 	bl	8006ea0 <HAL_RCC_GetPCLK1Freq>
 800b784:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d044      	beq.n	800b818 <UART_SetConfig+0x1d40>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	2b01      	cmp	r3, #1
 800b794:	d03e      	beq.n	800b814 <UART_SetConfig+0x1d3c>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d038      	beq.n	800b810 <UART_SetConfig+0x1d38>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d032      	beq.n	800b80c <UART_SetConfig+0x1d34>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d02c      	beq.n	800b808 <UART_SetConfig+0x1d30>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	d026      	beq.n	800b804 <UART_SetConfig+0x1d2c>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	2b06      	cmp	r3, #6
 800b7bc:	d020      	beq.n	800b800 <UART_SetConfig+0x1d28>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	2b07      	cmp	r3, #7
 800b7c4:	d01a      	beq.n	800b7fc <UART_SetConfig+0x1d24>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	2b08      	cmp	r3, #8
 800b7cc:	d014      	beq.n	800b7f8 <UART_SetConfig+0x1d20>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	2b09      	cmp	r3, #9
 800b7d4:	d00e      	beq.n	800b7f4 <UART_SetConfig+0x1d1c>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	2b0a      	cmp	r3, #10
 800b7dc:	d008      	beq.n	800b7f0 <UART_SetConfig+0x1d18>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	2b0b      	cmp	r3, #11
 800b7e4:	d102      	bne.n	800b7ec <UART_SetConfig+0x1d14>
 800b7e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ea:	e016      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e014      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b7f0:	2380      	movs	r3, #128	; 0x80
 800b7f2:	e012      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b7f4:	2340      	movs	r3, #64	; 0x40
 800b7f6:	e010      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	e00e      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b7fc:	2310      	movs	r3, #16
 800b7fe:	e00c      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b800:	230c      	movs	r3, #12
 800b802:	e00a      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b804:	230a      	movs	r3, #10
 800b806:	e008      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b808:	2308      	movs	r3, #8
 800b80a:	e006      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b80c:	2306      	movs	r3, #6
 800b80e:	e004      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b810:	2304      	movs	r3, #4
 800b812:	e002      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b814:	2302      	movs	r3, #2
 800b816:	e000      	b.n	800b81a <UART_SetConfig+0x1d42>
 800b818:	2301      	movs	r3, #1
 800b81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	085b      	lsrs	r3, r3, #1
 800b826:	441a      	add	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b830:	b29b      	uxth	r3, r3
 800b832:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b834:	e2aa      	b.n	800bd8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b836:	f7fb fb49 	bl	8006ecc <HAL_RCC_GetPCLK2Freq>
 800b83a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	2b00      	cmp	r3, #0
 800b842:	d044      	beq.n	800b8ce <UART_SetConfig+0x1df6>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d03e      	beq.n	800b8ca <UART_SetConfig+0x1df2>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	2b02      	cmp	r3, #2
 800b852:	d038      	beq.n	800b8c6 <UART_SetConfig+0x1dee>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d032      	beq.n	800b8c2 <UART_SetConfig+0x1dea>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	2b04      	cmp	r3, #4
 800b862:	d02c      	beq.n	800b8be <UART_SetConfig+0x1de6>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	2b05      	cmp	r3, #5
 800b86a:	d026      	beq.n	800b8ba <UART_SetConfig+0x1de2>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	2b06      	cmp	r3, #6
 800b872:	d020      	beq.n	800b8b6 <UART_SetConfig+0x1dde>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2b07      	cmp	r3, #7
 800b87a:	d01a      	beq.n	800b8b2 <UART_SetConfig+0x1dda>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b08      	cmp	r3, #8
 800b882:	d014      	beq.n	800b8ae <UART_SetConfig+0x1dd6>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	2b09      	cmp	r3, #9
 800b88a:	d00e      	beq.n	800b8aa <UART_SetConfig+0x1dd2>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	2b0a      	cmp	r3, #10
 800b892:	d008      	beq.n	800b8a6 <UART_SetConfig+0x1dce>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	2b0b      	cmp	r3, #11
 800b89a:	d102      	bne.n	800b8a2 <UART_SetConfig+0x1dca>
 800b89c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8a0:	e016      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e014      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8a6:	2380      	movs	r3, #128	; 0x80
 800b8a8:	e012      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8aa:	2340      	movs	r3, #64	; 0x40
 800b8ac:	e010      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8ae:	2320      	movs	r3, #32
 800b8b0:	e00e      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8b2:	2310      	movs	r3, #16
 800b8b4:	e00c      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8b6:	230c      	movs	r3, #12
 800b8b8:	e00a      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8ba:	230a      	movs	r3, #10
 800b8bc:	e008      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8be:	2308      	movs	r3, #8
 800b8c0:	e006      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8c2:	2306      	movs	r3, #6
 800b8c4:	e004      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	e002      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e000      	b.n	800b8d0 <UART_SetConfig+0x1df8>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	085b      	lsrs	r3, r3, #1
 800b8dc:	441a      	add	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8ea:	e24f      	b.n	800bd8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ec:	f107 0318 	add.w	r3, r7, #24
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fc fc6d 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d044      	beq.n	800b98a <UART_SetConfig+0x1eb2>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	2b01      	cmp	r3, #1
 800b906:	d03e      	beq.n	800b986 <UART_SetConfig+0x1eae>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d038      	beq.n	800b982 <UART_SetConfig+0x1eaa>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	2b03      	cmp	r3, #3
 800b916:	d032      	beq.n	800b97e <UART_SetConfig+0x1ea6>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d02c      	beq.n	800b97a <UART_SetConfig+0x1ea2>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	2b05      	cmp	r3, #5
 800b926:	d026      	beq.n	800b976 <UART_SetConfig+0x1e9e>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2b06      	cmp	r3, #6
 800b92e:	d020      	beq.n	800b972 <UART_SetConfig+0x1e9a>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	2b07      	cmp	r3, #7
 800b936:	d01a      	beq.n	800b96e <UART_SetConfig+0x1e96>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	2b08      	cmp	r3, #8
 800b93e:	d014      	beq.n	800b96a <UART_SetConfig+0x1e92>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	2b09      	cmp	r3, #9
 800b946:	d00e      	beq.n	800b966 <UART_SetConfig+0x1e8e>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b0a      	cmp	r3, #10
 800b94e:	d008      	beq.n	800b962 <UART_SetConfig+0x1e8a>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	2b0b      	cmp	r3, #11
 800b956:	d102      	bne.n	800b95e <UART_SetConfig+0x1e86>
 800b958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b95c:	e016      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b95e:	2301      	movs	r3, #1
 800b960:	e014      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b962:	2380      	movs	r3, #128	; 0x80
 800b964:	e012      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b966:	2340      	movs	r3, #64	; 0x40
 800b968:	e010      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b96a:	2320      	movs	r3, #32
 800b96c:	e00e      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b96e:	2310      	movs	r3, #16
 800b970:	e00c      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b972:	230c      	movs	r3, #12
 800b974:	e00a      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b976:	230a      	movs	r3, #10
 800b978:	e008      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b97a:	2308      	movs	r3, #8
 800b97c:	e006      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b97e:	2306      	movs	r3, #6
 800b980:	e004      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b982:	2304      	movs	r3, #4
 800b984:	e002      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b986:	2302      	movs	r3, #2
 800b988:	e000      	b.n	800b98c <UART_SetConfig+0x1eb4>
 800b98a:	2301      	movs	r3, #1
 800b98c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	085b      	lsrs	r3, r3, #1
 800b996:	441a      	add	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9a4:	e1f2      	b.n	800bd8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9a6:	f107 030c 	add.w	r3, r7, #12
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fc fd5c 	bl	8008468 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d044      	beq.n	800ba44 <UART_SetConfig+0x1f6c>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d03e      	beq.n	800ba40 <UART_SetConfig+0x1f68>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d038      	beq.n	800ba3c <UART_SetConfig+0x1f64>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d032      	beq.n	800ba38 <UART_SetConfig+0x1f60>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d02c      	beq.n	800ba34 <UART_SetConfig+0x1f5c>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	2b05      	cmp	r3, #5
 800b9e0:	d026      	beq.n	800ba30 <UART_SetConfig+0x1f58>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	2b06      	cmp	r3, #6
 800b9e8:	d020      	beq.n	800ba2c <UART_SetConfig+0x1f54>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	2b07      	cmp	r3, #7
 800b9f0:	d01a      	beq.n	800ba28 <UART_SetConfig+0x1f50>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f6:	2b08      	cmp	r3, #8
 800b9f8:	d014      	beq.n	800ba24 <UART_SetConfig+0x1f4c>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fe:	2b09      	cmp	r3, #9
 800ba00:	d00e      	beq.n	800ba20 <UART_SetConfig+0x1f48>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	2b0a      	cmp	r3, #10
 800ba08:	d008      	beq.n	800ba1c <UART_SetConfig+0x1f44>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	2b0b      	cmp	r3, #11
 800ba10:	d102      	bne.n	800ba18 <UART_SetConfig+0x1f40>
 800ba12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba16:	e016      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e014      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba1c:	2380      	movs	r3, #128	; 0x80
 800ba1e:	e012      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba20:	2340      	movs	r3, #64	; 0x40
 800ba22:	e010      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba24:	2320      	movs	r3, #32
 800ba26:	e00e      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba28:	2310      	movs	r3, #16
 800ba2a:	e00c      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba2c:	230c      	movs	r3, #12
 800ba2e:	e00a      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba30:	230a      	movs	r3, #10
 800ba32:	e008      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba34:	2308      	movs	r3, #8
 800ba36:	e006      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba38:	2306      	movs	r3, #6
 800ba3a:	e004      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	e002      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e000      	b.n	800ba46 <UART_SetConfig+0x1f6e>
 800ba44:	2301      	movs	r3, #1
 800ba46:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	085b      	lsrs	r3, r3, #1
 800ba50:	441a      	add	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba5e:	e195      	b.n	800bd8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba60:	4b87      	ldr	r3, [pc, #540]	; (800bc80 <UART_SetConfig+0x21a8>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0320 	and.w	r3, r3, #32
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d05d      	beq.n	800bb28 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba6c:	4b84      	ldr	r3, [pc, #528]	; (800bc80 <UART_SetConfig+0x21a8>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	08db      	lsrs	r3, r3, #3
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	4a83      	ldr	r2, [pc, #524]	; (800bc84 <UART_SetConfig+0x21ac>)
 800ba78:	40da      	lsrs	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d044      	beq.n	800bb0c <UART_SetConfig+0x2034>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d03e      	beq.n	800bb08 <UART_SetConfig+0x2030>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d038      	beq.n	800bb04 <UART_SetConfig+0x202c>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	d032      	beq.n	800bb00 <UART_SetConfig+0x2028>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d02c      	beq.n	800bafc <UART_SetConfig+0x2024>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	2b05      	cmp	r3, #5
 800baa8:	d026      	beq.n	800baf8 <UART_SetConfig+0x2020>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	2b06      	cmp	r3, #6
 800bab0:	d020      	beq.n	800baf4 <UART_SetConfig+0x201c>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	2b07      	cmp	r3, #7
 800bab8:	d01a      	beq.n	800baf0 <UART_SetConfig+0x2018>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babe:	2b08      	cmp	r3, #8
 800bac0:	d014      	beq.n	800baec <UART_SetConfig+0x2014>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	2b09      	cmp	r3, #9
 800bac8:	d00e      	beq.n	800bae8 <UART_SetConfig+0x2010>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bace:	2b0a      	cmp	r3, #10
 800bad0:	d008      	beq.n	800bae4 <UART_SetConfig+0x200c>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	2b0b      	cmp	r3, #11
 800bad8:	d102      	bne.n	800bae0 <UART_SetConfig+0x2008>
 800bada:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bade:	e016      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bae0:	2301      	movs	r3, #1
 800bae2:	e014      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bae4:	2380      	movs	r3, #128	; 0x80
 800bae6:	e012      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bae8:	2340      	movs	r3, #64	; 0x40
 800baea:	e010      	b.n	800bb0e <UART_SetConfig+0x2036>
 800baec:	2320      	movs	r3, #32
 800baee:	e00e      	b.n	800bb0e <UART_SetConfig+0x2036>
 800baf0:	2310      	movs	r3, #16
 800baf2:	e00c      	b.n	800bb0e <UART_SetConfig+0x2036>
 800baf4:	230c      	movs	r3, #12
 800baf6:	e00a      	b.n	800bb0e <UART_SetConfig+0x2036>
 800baf8:	230a      	movs	r3, #10
 800bafa:	e008      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bafc:	2308      	movs	r3, #8
 800bafe:	e006      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bb00:	2306      	movs	r3, #6
 800bb02:	e004      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bb04:	2304      	movs	r3, #4
 800bb06:	e002      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e000      	b.n	800bb0e <UART_SetConfig+0x2036>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	085b      	lsrs	r3, r3, #1
 800bb18:	441a      	add	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bb26:	e131      	b.n	800bd8c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d043      	beq.n	800bbb8 <UART_SetConfig+0x20e0>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d03d      	beq.n	800bbb4 <UART_SetConfig+0x20dc>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d037      	beq.n	800bbb0 <UART_SetConfig+0x20d8>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d031      	beq.n	800bbac <UART_SetConfig+0x20d4>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d02b      	beq.n	800bba8 <UART_SetConfig+0x20d0>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb54:	2b05      	cmp	r3, #5
 800bb56:	d025      	beq.n	800bba4 <UART_SetConfig+0x20cc>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2b06      	cmp	r3, #6
 800bb5e:	d01f      	beq.n	800bba0 <UART_SetConfig+0x20c8>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	2b07      	cmp	r3, #7
 800bb66:	d019      	beq.n	800bb9c <UART_SetConfig+0x20c4>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b08      	cmp	r3, #8
 800bb6e:	d013      	beq.n	800bb98 <UART_SetConfig+0x20c0>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d00d      	beq.n	800bb94 <UART_SetConfig+0x20bc>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7c:	2b0a      	cmp	r3, #10
 800bb7e:	d007      	beq.n	800bb90 <UART_SetConfig+0x20b8>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	2b0b      	cmp	r3, #11
 800bb86:	d101      	bne.n	800bb8c <UART_SetConfig+0x20b4>
 800bb88:	4b3f      	ldr	r3, [pc, #252]	; (800bc88 <UART_SetConfig+0x21b0>)
 800bb8a:	e016      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bb8c:	4b3d      	ldr	r3, [pc, #244]	; (800bc84 <UART_SetConfig+0x21ac>)
 800bb8e:	e014      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bb90:	4b3e      	ldr	r3, [pc, #248]	; (800bc8c <UART_SetConfig+0x21b4>)
 800bb92:	e012      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bb94:	4b3e      	ldr	r3, [pc, #248]	; (800bc90 <UART_SetConfig+0x21b8>)
 800bb96:	e010      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bb98:	4b3e      	ldr	r3, [pc, #248]	; (800bc94 <UART_SetConfig+0x21bc>)
 800bb9a:	e00e      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bb9c:	4b3e      	ldr	r3, [pc, #248]	; (800bc98 <UART_SetConfig+0x21c0>)
 800bb9e:	e00c      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bba0:	4b3e      	ldr	r3, [pc, #248]	; (800bc9c <UART_SetConfig+0x21c4>)
 800bba2:	e00a      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bba4:	4b3e      	ldr	r3, [pc, #248]	; (800bca0 <UART_SetConfig+0x21c8>)
 800bba6:	e008      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bba8:	4b3e      	ldr	r3, [pc, #248]	; (800bca4 <UART_SetConfig+0x21cc>)
 800bbaa:	e006      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bbac:	4b3e      	ldr	r3, [pc, #248]	; (800bca8 <UART_SetConfig+0x21d0>)
 800bbae:	e004      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bbb0:	4b3e      	ldr	r3, [pc, #248]	; (800bcac <UART_SetConfig+0x21d4>)
 800bbb2:	e002      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bbb4:	4b3e      	ldr	r3, [pc, #248]	; (800bcb0 <UART_SetConfig+0x21d8>)
 800bbb6:	e000      	b.n	800bbba <UART_SetConfig+0x20e2>
 800bbb8:	4b32      	ldr	r3, [pc, #200]	; (800bc84 <UART_SetConfig+0x21ac>)
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	6852      	ldr	r2, [r2, #4]
 800bbbe:	0852      	lsrs	r2, r2, #1
 800bbc0:	441a      	add	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbce:	e0dd      	b.n	800bd8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d046      	beq.n	800bc66 <UART_SetConfig+0x218e>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d040      	beq.n	800bc62 <UART_SetConfig+0x218a>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d03a      	beq.n	800bc5e <UART_SetConfig+0x2186>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d034      	beq.n	800bc5a <UART_SetConfig+0x2182>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	d02e      	beq.n	800bc56 <UART_SetConfig+0x217e>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfc:	2b05      	cmp	r3, #5
 800bbfe:	d028      	beq.n	800bc52 <UART_SetConfig+0x217a>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc04:	2b06      	cmp	r3, #6
 800bc06:	d022      	beq.n	800bc4e <UART_SetConfig+0x2176>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	2b07      	cmp	r3, #7
 800bc0e:	d01c      	beq.n	800bc4a <UART_SetConfig+0x2172>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc14:	2b08      	cmp	r3, #8
 800bc16:	d016      	beq.n	800bc46 <UART_SetConfig+0x216e>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d00f      	beq.n	800bc40 <UART_SetConfig+0x2168>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	2b0a      	cmp	r3, #10
 800bc26:	d008      	beq.n	800bc3a <UART_SetConfig+0x2162>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b0b      	cmp	r3, #11
 800bc2e:	d102      	bne.n	800bc36 <UART_SetConfig+0x215e>
 800bc30:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bc34:	e018      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc36:	4b18      	ldr	r3, [pc, #96]	; (800bc98 <UART_SetConfig+0x21c0>)
 800bc38:	e016      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc3a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bc3e:	e013      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc40:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bc44:	e010      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc46:	4b1b      	ldr	r3, [pc, #108]	; (800bcb4 <UART_SetConfig+0x21dc>)
 800bc48:	e00e      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc4a:	4b0f      	ldr	r3, [pc, #60]	; (800bc88 <UART_SetConfig+0x21b0>)
 800bc4c:	e00c      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc4e:	4b1a      	ldr	r3, [pc, #104]	; (800bcb8 <UART_SetConfig+0x21e0>)
 800bc50:	e00a      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc52:	4b1a      	ldr	r3, [pc, #104]	; (800bcbc <UART_SetConfig+0x21e4>)
 800bc54:	e008      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <UART_SetConfig+0x21b4>)
 800bc58:	e006      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc5a:	4b19      	ldr	r3, [pc, #100]	; (800bcc0 <UART_SetConfig+0x21e8>)
 800bc5c:	e004      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <UART_SetConfig+0x21b8>)
 800bc60:	e002      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <UART_SetConfig+0x21bc>)
 800bc64:	e000      	b.n	800bc68 <UART_SetConfig+0x2190>
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <UART_SetConfig+0x21c0>)
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	6852      	ldr	r2, [r2, #4]
 800bc6c:	0852      	lsrs	r2, r2, #1
 800bc6e:	441a      	add	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc7c:	e086      	b.n	800bd8c <UART_SetConfig+0x22b4>
 800bc7e:	bf00      	nop
 800bc80:	58024400 	.word	0x58024400
 800bc84:	03d09000 	.word	0x03d09000
 800bc88:	0003d090 	.word	0x0003d090
 800bc8c:	0007a120 	.word	0x0007a120
 800bc90:	000f4240 	.word	0x000f4240
 800bc94:	001e8480 	.word	0x001e8480
 800bc98:	003d0900 	.word	0x003d0900
 800bc9c:	00516155 	.word	0x00516155
 800bca0:	0061a800 	.word	0x0061a800
 800bca4:	007a1200 	.word	0x007a1200
 800bca8:	00a2c2aa 	.word	0x00a2c2aa
 800bcac:	00f42400 	.word	0x00f42400
 800bcb0:	01e84800 	.word	0x01e84800
 800bcb4:	0001e848 	.word	0x0001e848
 800bcb8:	00051615 	.word	0x00051615
 800bcbc:	00061a80 	.word	0x00061a80
 800bcc0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d04e      	beq.n	800bd6a <UART_SetConfig+0x2292>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d047      	beq.n	800bd64 <UART_SetConfig+0x228c>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d040      	beq.n	800bd5e <UART_SetConfig+0x2286>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	2b03      	cmp	r3, #3
 800bce2:	d039      	beq.n	800bd58 <UART_SetConfig+0x2280>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	d032      	beq.n	800bd52 <UART_SetConfig+0x227a>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b05      	cmp	r3, #5
 800bcf2:	d02b      	beq.n	800bd4c <UART_SetConfig+0x2274>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	2b06      	cmp	r3, #6
 800bcfa:	d024      	beq.n	800bd46 <UART_SetConfig+0x226e>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	2b07      	cmp	r3, #7
 800bd02:	d01d      	beq.n	800bd40 <UART_SetConfig+0x2268>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd08:	2b08      	cmp	r3, #8
 800bd0a:	d016      	beq.n	800bd3a <UART_SetConfig+0x2262>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	2b09      	cmp	r3, #9
 800bd12:	d00f      	beq.n	800bd34 <UART_SetConfig+0x225c>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd18:	2b0a      	cmp	r3, #10
 800bd1a:	d008      	beq.n	800bd2e <UART_SetConfig+0x2256>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd20:	2b0b      	cmp	r3, #11
 800bd22:	d101      	bne.n	800bd28 <UART_SetConfig+0x2250>
 800bd24:	2380      	movs	r3, #128	; 0x80
 800bd26:	e022      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd2c:	e01f      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd32:	e01c      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd38:	e019      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd3e:	e016      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd44:	e013      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd46:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bd4a:	e010      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd4c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bd50:	e00d      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd56:	e00a      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd58:	f241 5355 	movw	r3, #5461	; 0x1555
 800bd5c:	e007      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd62:	e004      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd68:	e001      	b.n	800bd6e <UART_SetConfig+0x2296>
 800bd6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	6852      	ldr	r2, [r2, #4]
 800bd72:	0852      	lsrs	r2, r2, #1
 800bd74:	441a      	add	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd82:	e003      	b.n	800bd8c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bd8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8e:	2b0f      	cmp	r3, #15
 800bd90:	d908      	bls.n	800bda4 <UART_SetConfig+0x22cc>
 800bd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd98:	d204      	bcs.n	800bda4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bda0:	60da      	str	r2, [r3, #12]
 800bda2:	e002      	b.n	800bdaa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bdc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3740      	adds	r7, #64	; 0x40
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bdd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be02:	f003 0302 	and.w	r3, r3, #2
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be46:	f003 0308 	and.w	r3, r3, #8
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	430a      	orrs	r2, r1
 800be62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be68:	f003 0310 	and.w	r3, r3, #16
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00a      	beq.n	800be86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8a:	f003 0320 	and.w	r3, r3, #32
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	430a      	orrs	r2, r1
 800bea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01a      	beq.n	800beea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bed2:	d10a      	bne.n	800beea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	605a      	str	r2, [r3, #4]
  }
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af02      	add	r7, sp, #8
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bf28:	f7f6 f9c4 	bl	80022b4 <HAL_GetTick>
 800bf2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0308 	and.w	r3, r3, #8
 800bf38:	2b08      	cmp	r3, #8
 800bf3a:	d10e      	bne.n	800bf5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f82c 	bl	800bfa8 <UART_WaitOnFlagUntilTimeout>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e022      	b.n	800bfa0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d10e      	bne.n	800bf86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f816 	bl	800bfa8 <UART_WaitOnFlagUntilTimeout>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e00c      	b.n	800bfa0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2220      	movs	r2, #32
 800bf92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfb8:	e062      	b.n	800c080 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d05e      	beq.n	800c080 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfc2:	f7f6 f977 	bl	80022b4 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	69ba      	ldr	r2, [r7, #24]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d302      	bcc.n	800bfd8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11d      	bne.n	800c014 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bfe6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f022 0201 	bic.w	r2, r2, #1
 800bff6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2220      	movs	r2, #32
 800bffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2220      	movs	r2, #32
 800c004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c010:	2303      	movs	r3, #3
 800c012:	e045      	b.n	800c0a0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0304 	and.w	r3, r3, #4
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d02e      	beq.n	800c080 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c02c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c030:	d126      	bne.n	800c080 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c03a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c04a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689a      	ldr	r2, [r3, #8]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0201 	bic.w	r2, r2, #1
 800c05a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2220      	movs	r2, #32
 800c060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2220      	movs	r2, #32
 800c068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2220      	movs	r2, #32
 800c070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e00f      	b.n	800c0a0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69da      	ldr	r2, [r3, #28]
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	4013      	ands	r3, r2
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	bf0c      	ite	eq
 800c090:	2301      	moveq	r3, #1
 800c092:	2300      	movne	r3, #0
 800c094:	b2db      	uxtb	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	79fb      	ldrb	r3, [r7, #7]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d08d      	beq.n	800bfba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c0be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c0ce:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2220      	movs	r2, #32
 800c0d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c0fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6899      	ldr	r1, [r3, #8]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	4b08      	ldr	r3, [pc, #32]	; (800c128 <UART_EndRxTransfer+0x44>)
 800c108:	400b      	ands	r3, r1
 800c10a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2220      	movs	r2, #32
 800c110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c11a:	bf00      	nop
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	effffffe 	.word	0xeffffffe

0800c12c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c138:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c142:	d01f      	beq.n	800c184 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c15a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f022 0201 	bic.w	r2, r2, #1
 800c16a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689a      	ldr	r2, [r3, #8]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c17a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2220      	movs	r2, #32
 800c180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f7f4 fadf 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7fd fc85 	bl	8009ab0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b086      	sub	sp, #24
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d6:	2b80      	cmp	r3, #128	; 0x80
 800c1d8:	d109      	bne.n	800c1ee <UART_DMAError+0x40>
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b21      	cmp	r3, #33	; 0x21
 800c1de:	d106      	bne.n	800c1ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c1e8:	6978      	ldr	r0, [r7, #20]
 800c1ea:	f7ff ff5d 	bl	800c0a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f8:	2b40      	cmp	r3, #64	; 0x40
 800c1fa:	d109      	bne.n	800c210 <UART_DMAError+0x62>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b22      	cmp	r3, #34	; 0x22
 800c200:	d106      	bne.n	800c210 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2200      	movs	r2, #0
 800c206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c20a:	6978      	ldr	r0, [r7, #20]
 800c20c:	f7ff ff6a 	bl	800c0e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c216:	f043 0210 	orr.w	r2, r3, #16
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c220:	6978      	ldr	r0, [r7, #20]
 800c222:	f7fd fc4f 	bl	8009ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c226:	bf00      	nop
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b084      	sub	sp, #16
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f7fd fc39 	bl	8009ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c25a:	b480      	push	{r7}
 800c25c:	b083      	sub	sp, #12
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c268:	2b21      	cmp	r3, #33	; 0x21
 800c26a:	d12a      	bne.n	800c2c2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c272:	b29b      	uxth	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d110      	bne.n	800c29a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c286:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c296:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c298:	e013      	b.n	800c2c2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c2c2:	bf00      	nop
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2dc:	2b21      	cmp	r3, #33	; 0x21
 800c2de:	d12f      	bne.n	800c340 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d110      	bne.n	800c30e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2fa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c30a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c30c:	e018      	b.n	800c340 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c312:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	461a      	mov	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c322:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c328:	1c9a      	adds	r2, r3, #2
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c334:	b29b      	uxth	r3, r3
 800c336:	3b01      	subs	r3, #1
 800c338:	b29a      	uxth	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c340:	bf00      	nop
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c35a:	2b21      	cmp	r3, #33	; 0x21
 800c35c:	d13d      	bne.n	800c3da <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c364:	81fb      	strh	r3, [r7, #14]
 800c366:	e035      	b.n	800c3d4 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c36e:	b29b      	uxth	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	d111      	bne.n	800c398 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689a      	ldr	r2, [r3, #8]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c382:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c392:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c394:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c396:	e020      	b.n	800c3da <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d013      	beq.n	800c3ce <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3aa:	781a      	ldrb	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c3ce:	89fb      	ldrh	r3, [r7, #14]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	81fb      	strh	r3, [r7, #14]
 800c3d4:	89fb      	ldrh	r3, [r7, #14]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1c6      	bne.n	800c368 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c3da:	bf00      	nop
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f4:	2b21      	cmp	r3, #33	; 0x21
 800c3f6:	d142      	bne.n	800c47e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3fe:	81fb      	strh	r3, [r7, #14]
 800c400:	e03a      	b.n	800c478 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c408:	b29b      	uxth	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d111      	bne.n	800c432 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689a      	ldr	r2, [r3, #8]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c41c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c42c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c42e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c430:	e025      	b.n	800c47e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d018      	beq.n	800c472 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c444:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c454:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45a:	1c9a      	adds	r2, r3, #2
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c466:	b29b      	uxth	r3, r3
 800c468:	3b01      	subs	r3, #1
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c472:	89fb      	ldrh	r3, [r7, #14]
 800c474:	3b01      	subs	r3, #1
 800c476:	81fb      	strh	r3, [r7, #14]
 800c478:	89fb      	ldrh	r3, [r7, #14]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1c1      	bne.n	800c402 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7f4 f907 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4b6:	bf00      	nop
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4cc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4d4:	2b22      	cmp	r3, #34	; 0x22
 800c4d6:	d13b      	bne.n	800c550 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4e0:	89bb      	ldrh	r3, [r7, #12]
 800c4e2:	b2d9      	uxtb	r1, r3
 800c4e4:	89fb      	ldrh	r3, [r7, #14]
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ec:	400a      	ands	r2, r1
 800c4ee:	b2d2      	uxtb	r2, r2
 800c4f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c502:	b29b      	uxth	r3, r3
 800c504:	3b01      	subs	r3, #1
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c514:	b29b      	uxth	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d122      	bne.n	800c560 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c528:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689a      	ldr	r2, [r3, #8]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f022 0201 	bic.w	r2, r2, #1
 800c538:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7f4 f8fd 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c54e:	e007      	b.n	800c560 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	699a      	ldr	r2, [r3, #24]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f042 0208 	orr.w	r2, r2, #8
 800c55e:	619a      	str	r2, [r3, #24]
}
 800c560:	bf00      	nop
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c576:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c57e:	2b22      	cmp	r3, #34	; 0x22
 800c580:	d13b      	bne.n	800c5fa <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c588:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c58e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c590:	89ba      	ldrh	r2, [r7, #12]
 800c592:	89fb      	ldrh	r3, [r7, #14]
 800c594:	4013      	ands	r3, r2
 800c596:	b29a      	uxth	r2, r3
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a0:	1c9a      	adds	r2, r3, #2
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d122      	bne.n	800c60a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 0201 	bic.w	r2, r2, #1
 800c5e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7f4 f8a8 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5f8:	e007      	b.n	800c60a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	699a      	ldr	r2, [r3, #24]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f042 0208 	orr.w	r2, r2, #8
 800c608:	619a      	str	r2, [r3, #24]
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c622:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c62a:	2b22      	cmp	r3, #34	; 0x22
 800c62c:	d166      	bne.n	800c6fc <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c634:	81fb      	strh	r3, [r7, #14]
 800c636:	e03d      	b.n	800c6b4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c640:	893b      	ldrh	r3, [r7, #8]
 800c642:	b2d9      	uxtb	r1, r3
 800c644:	89bb      	ldrh	r3, [r7, #12]
 800c646:	b2da      	uxtb	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c64c:	400a      	ands	r2, r1
 800c64e:	b2d2      	uxtb	r2, r2
 800c650:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c662:	b29b      	uxth	r3, r3
 800c664:	3b01      	subs	r3, #1
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c674:	b29b      	uxth	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d119      	bne.n	800c6ae <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c688:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6899      	ldr	r1, [r3, #8]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	4b1f      	ldr	r3, [pc, #124]	; (800c714 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c696:	400b      	ands	r3, r1
 800c698:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7f4 f84d 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c6ae:	89fb      	ldrh	r3, [r7, #14]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	81fb      	strh	r3, [r7, #14]
 800c6b4:	89fb      	ldrh	r3, [r7, #14]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1be      	bne.n	800c638 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6c0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c6c2:	897b      	ldrh	r3, [r7, #10]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d021      	beq.n	800c70c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6ce:	897a      	ldrh	r2, [r7, #10]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d21b      	bcs.n	800c70c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	689a      	ldr	r2, [r3, #8]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c6e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a0c      	ldr	r2, [pc, #48]	; (800c718 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c6e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f042 0220 	orr.w	r2, r2, #32
 800c6f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6fa:	e007      	b.n	800c70c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	699a      	ldr	r2, [r3, #24]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f042 0208 	orr.w	r2, r2, #8
 800c70a:	619a      	str	r2, [r3, #24]
}
 800c70c:	bf00      	nop
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	effffffe 	.word	0xeffffffe
 800c718:	0800c4bf 	.word	0x0800c4bf

0800c71c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c72a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c732:	2b22      	cmp	r3, #34	; 0x22
 800c734:	d166      	bne.n	800c804 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c73c:	82fb      	strh	r3, [r7, #22]
 800c73e:	e03d      	b.n	800c7bc <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c746:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c74e:	8a3a      	ldrh	r2, [r7, #16]
 800c750:	8abb      	ldrh	r3, [r7, #20]
 800c752:	4013      	ands	r3, r2
 800c754:	b29a      	uxth	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c75e:	1c9a      	adds	r2, r3, #2
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	3b01      	subs	r3, #1
 800c76e:	b29a      	uxth	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d119      	bne.n	800c7b6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c790:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6899      	ldr	r1, [r3, #8]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	4b1f      	ldr	r3, [pc, #124]	; (800c81c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c79e:	400b      	ands	r3, r1
 800c7a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7f3 ffc9 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c7b6:	8afb      	ldrh	r3, [r7, #22]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	82fb      	strh	r3, [r7, #22]
 800c7bc:	8afb      	ldrh	r3, [r7, #22]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1be      	bne.n	800c740 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7ca:	8a7b      	ldrh	r3, [r7, #18]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d021      	beq.n	800c814 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7d6:	8a7a      	ldrh	r2, [r7, #18]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d21b      	bcs.n	800c814 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c7ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a0c      	ldr	r2, [pc, #48]	; (800c820 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c7f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f042 0220 	orr.w	r2, r2, #32
 800c800:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c802:	e007      	b.n	800c814 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	699a      	ldr	r2, [r3, #24]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f042 0208 	orr.w	r2, r2, #8
 800c812:	619a      	str	r2, [r3, #24]
}
 800c814:	bf00      	nop
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	effffffe 	.word	0xeffffffe
 800c820:	0800c569 	.word	0x0800c569

0800c824 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d101      	bne.n	800c876 <HAL_UARTEx_DisableFifoMode+0x16>
 800c872:	2302      	movs	r3, #2
 800c874:	e027      	b.n	800c8c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2224      	movs	r2, #36	; 0x24
 800c882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f022 0201 	bic.w	r2, r2, #1
 800c89c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2220      	movs	r2, #32
 800c8b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d101      	bne.n	800c8ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	e02d      	b.n	800c946 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2224      	movs	r2, #36	; 0x24
 800c8f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 0201 	bic.w	r2, r2, #1
 800c910:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f850 	bl	800c9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2220      	movs	r2, #32
 800c938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d101      	bne.n	800c966 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c962:	2302      	movs	r3, #2
 800c964:	e02d      	b.n	800c9c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2224      	movs	r2, #36	; 0x24
 800c972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f022 0201 	bic.w	r2, r2, #1
 800c98c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 f812 	bl	800c9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b089      	sub	sp, #36	; 0x24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c9d4:	4a2f      	ldr	r2, [pc, #188]	; (800ca94 <UARTEx_SetNbDataToProcess+0xc8>)
 800c9d6:	f107 0314 	add.w	r3, r7, #20
 800c9da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c9e2:	4a2d      	ldr	r2, [pc, #180]	; (800ca98 <UARTEx_SetNbDataToProcess+0xcc>)
 800c9e4:	f107 030c 	add.w	r3, r7, #12
 800c9e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d108      	bne.n	800ca0a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca08:	e03d      	b.n	800ca86 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca0a:	2308      	movs	r3, #8
 800ca0c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca0e:	2308      	movs	r3, #8
 800ca10:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	0e5b      	lsrs	r3, r3, #25
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	f003 0307 	and.w	r3, r3, #7
 800ca20:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	0f5b      	lsrs	r3, r3, #29
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	f003 0307 	and.w	r3, r3, #7
 800ca30:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ca32:	7fbb      	ldrb	r3, [r7, #30]
 800ca34:	7f3a      	ldrb	r2, [r7, #28]
 800ca36:	f107 0120 	add.w	r1, r7, #32
 800ca3a:	440a      	add	r2, r1
 800ca3c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ca40:	fb02 f303 	mul.w	r3, r2, r3
 800ca44:	7f3a      	ldrb	r2, [r7, #28]
 800ca46:	f107 0120 	add.w	r1, r7, #32
 800ca4a:	440a      	add	r2, r1
 800ca4c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ca50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ca5c:	7ffb      	ldrb	r3, [r7, #31]
 800ca5e:	7f7a      	ldrb	r2, [r7, #29]
 800ca60:	f107 0120 	add.w	r1, r7, #32
 800ca64:	440a      	add	r2, r1
 800ca66:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ca6a:	fb02 f303 	mul.w	r3, r2, r3
 800ca6e:	7f7a      	ldrb	r2, [r7, #29]
 800ca70:	f107 0120 	add.w	r1, r7, #32
 800ca74:	440a      	add	r2, r1
 800ca76:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ca7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca86:	bf00      	nop
 800ca88:	3724      	adds	r7, #36	; 0x24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	0800cb0c 	.word	0x0800cb0c
 800ca98:	0800cb14 	.word	0x0800cb14

0800ca9c <__libc_init_array>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	4e0d      	ldr	r6, [pc, #52]	; (800cad4 <__libc_init_array+0x38>)
 800caa0:	4c0d      	ldr	r4, [pc, #52]	; (800cad8 <__libc_init_array+0x3c>)
 800caa2:	1ba4      	subs	r4, r4, r6
 800caa4:	10a4      	asrs	r4, r4, #2
 800caa6:	2500      	movs	r5, #0
 800caa8:	42a5      	cmp	r5, r4
 800caaa:	d109      	bne.n	800cac0 <__libc_init_array+0x24>
 800caac:	4e0b      	ldr	r6, [pc, #44]	; (800cadc <__libc_init_array+0x40>)
 800caae:	4c0c      	ldr	r4, [pc, #48]	; (800cae0 <__libc_init_array+0x44>)
 800cab0:	f000 f820 	bl	800caf4 <_init>
 800cab4:	1ba4      	subs	r4, r4, r6
 800cab6:	10a4      	asrs	r4, r4, #2
 800cab8:	2500      	movs	r5, #0
 800caba:	42a5      	cmp	r5, r4
 800cabc:	d105      	bne.n	800caca <__libc_init_array+0x2e>
 800cabe:	bd70      	pop	{r4, r5, r6, pc}
 800cac0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cac4:	4798      	blx	r3
 800cac6:	3501      	adds	r5, #1
 800cac8:	e7ee      	b.n	800caa8 <__libc_init_array+0xc>
 800caca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cace:	4798      	blx	r3
 800cad0:	3501      	adds	r5, #1
 800cad2:	e7f2      	b.n	800caba <__libc_init_array+0x1e>
 800cad4:	0800cb3c 	.word	0x0800cb3c
 800cad8:	0800cb3c 	.word	0x0800cb3c
 800cadc:	0800cb3c 	.word	0x0800cb3c
 800cae0:	0800cb40 	.word	0x0800cb40

0800cae4 <memset>:
 800cae4:	4402      	add	r2, r0
 800cae6:	4603      	mov	r3, r0
 800cae8:	4293      	cmp	r3, r2
 800caea:	d100      	bne.n	800caee <memset+0xa>
 800caec:	4770      	bx	lr
 800caee:	f803 1b01 	strb.w	r1, [r3], #1
 800caf2:	e7f9      	b.n	800cae8 <memset+0x4>

0800caf4 <_init>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	bf00      	nop
 800caf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafa:	bc08      	pop	{r3}
 800cafc:	469e      	mov	lr, r3
 800cafe:	4770      	bx	lr

0800cb00 <_fini>:
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	bf00      	nop
 800cb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb06:	bc08      	pop	{r3}
 800cb08:	469e      	mov	lr, r3
 800cb0a:	4770      	bx	lr
